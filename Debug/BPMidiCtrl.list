
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e5c  08012b80  08012b80  00022b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080149dc  080149dc  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  080149dc  080149dc  000249dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080149e4  080149e4  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080149e4  080149e4  000249e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080149e8  080149e8  000249e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  080149ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030e4  20000334  08014d20  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003418  08014d20  00033418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002af21  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bae  00000000  00000000  0005b285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  00060e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002015b  00000000  00000000  00062ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00026b3c  00000000  00000000  00082c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6c3d  00000000  00000000  000a9757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00150394  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001ab0  00000000  00000000  001503e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089d8  00000000  00000000  00151e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000334 	.word	0x20000334
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012b68 	.word	0x08012b68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000338 	.word	0x20000338
 80001dc:	08012b68 	.word	0x08012b68

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a4 	b.w	8000fec <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468c      	mov	ip, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8083 	bne.w	8000e3e <__udivmoddi4+0x116>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d947      	bls.n	8000dce <__udivmoddi4+0xa6>
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b142      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	f1c2 0020 	rsb	r0, r2, #32
 8000d48:	fa24 f000 	lsr.w	r0, r4, r0
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	4097      	lsls	r7, r2
 8000d50:	ea40 0c01 	orr.w	ip, r0, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d60:	fa1f fe87 	uxth.w	lr, r7
 8000d64:	fb08 c116 	mls	r1, r8, r6, ip
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 8119 	bcs.w	8000fb0 <__udivmoddi4+0x288>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8116 	bls.w	8000fb0 <__udivmoddi4+0x288>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8105 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f240 8102 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xaa>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d150      	bne.n	8000e7c <__udivmoddi4+0x154>
 8000dda:	1bcb      	subs	r3, r1, r7
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fa1f f887 	uxth.w	r8, r7
 8000de4:	2601      	movs	r6, #1
 8000de6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dea:	0c21      	lsrs	r1, r4, #16
 8000dec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb08 f30c 	mul.w	r3, r8, ip
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0xe2>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	f200 80e9 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1ac9      	subs	r1, r1, r3
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x10a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80d9 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e7bf      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x12e>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80b1 	beq.w	8000faa <__udivmoddi4+0x282>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x1cc>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x140>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80b8 	bhi.w	8000fd8 <__udivmoddi4+0x2b0>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	468c      	mov	ip, r1
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0a8      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7a:	e7a5      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f603 	lsr.w	r6, r0, r3
 8000e84:	4097      	lsls	r7, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	4330      	orrs	r0, r6
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea4:	fb06 f108 	mul.w	r1, r6, r8
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	fa04 f402 	lsl.w	r4, r4, r2
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x19c>
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb6:	f080 808d 	bcs.w	8000fd4 <__udivmoddi4+0x2ac>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 808a 	bls.w	8000fd4 <__udivmoddi4+0x2ac>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	443b      	add	r3, r7
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b281      	uxth	r1, r0
 8000ec8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ecc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed4:	fb00 f308 	mul.w	r3, r0, r8
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d907      	bls.n	8000eec <__udivmoddi4+0x1c4>
 8000edc:	1879      	adds	r1, r7, r1
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d273      	bcs.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d971      	bls.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4439      	add	r1, r7
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef2:	e778      	b.n	8000de6 <__udivmoddi4+0xbe>
 8000ef4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef8:	fa03 f406 	lsl.w	r4, r3, r6
 8000efc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f00:	431c      	orrs	r4, r3
 8000f02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0c3b      	lsrs	r3, r7, #16
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fa1f f884 	uxth.w	r8, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f26:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f30:	fa00 f306 	lsl.w	r3, r0, r6
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x220>
 8000f36:	1861      	adds	r1, r4, r1
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d248      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f3e:	458a      	cmp	sl, r1
 8000f40:	d946      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	4421      	add	r1, r4
 8000f48:	eba1 010a 	sub.w	r1, r1, sl
 8000f4c:	b2bf      	uxth	r7, r7
 8000f4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x24a>
 8000f62:	19e7      	adds	r7, r4, r7
 8000f64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f68:	d22e      	bcs.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d92c      	bls.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	4427      	add	r7, r4
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba7 0708 	sub.w	r7, r7, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454f      	cmp	r7, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	d31a      	bcc.n	8000fbc <__udivmoddi4+0x294>
 8000f86:	d017      	beq.n	8000fb8 <__udivmoddi4+0x290>
 8000f88:	b15d      	cbz	r5, 8000fa2 <__udivmoddi4+0x27a>
 8000f8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f96:	40f2      	lsrs	r2, r6
 8000f98:	ea4c 0202 	orr.w	r2, ip, r2
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e70b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6fd      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fb8:	4543      	cmp	r3, r8
 8000fba:	d2e5      	bcs.n	8000f88 <__udivmoddi4+0x260>
 8000fbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7df      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e7d2      	b.n	8000f72 <__udivmoddi4+0x24a>
 8000fcc:	4660      	mov	r0, ip
 8000fce:	e78d      	b.n	8000eec <__udivmoddi4+0x1c4>
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	e7b9      	b.n	8000f48 <__udivmoddi4+0x220>
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	e775      	b.n	8000ec4 <__udivmoddi4+0x19c>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	e74a      	b.n	8000e72 <__udivmoddi4+0x14a>
 8000fdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe0:	4439      	add	r1, r7
 8000fe2:	e713      	b.n	8000e0c <__udivmoddi4+0xe4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	443c      	add	r4, r7
 8000fe8:	e724      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <KnobMap>:
//uint8_t Knob_Map(Knob *k) {
//	return k->value * k->max_range / (k->max_values - 1);
//}

// Maps values from (0, max_values-1) to (0, m)
uint8_t KnobMap(Knob *k, uint8_t value, uint8_t m) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	78ba      	ldrb	r2, [r7, #2]
 8001004:	fb02 f203 	mul.w	r2, r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7f1b      	ldrb	r3, [r3, #28]
 800100c:	3b01      	subs	r3, #1
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ffc2 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <SD_Disable>:
void SD_Enable() {
    __HAL_SD_ENABLE(hsd);
    hsd.State = HAL_SD_STATE_READY;
}

void SD_Disable() {
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
    __HAL_SD_DISABLE(hsd);
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SD_Disable+0x1c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
    hsd.State = HAL_SD_STATE_RESET;
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SD_Disable+0x20>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	422580a0 	.word	0x422580a0
 80010d8:	2000263c 	.word	0x2000263c

080010dc <ADC_Mux_Select>:

void ADC_Mux_Select(uint8_t c) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    if (c > NUM_ADC_CHANNELS) return;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d824      	bhi.n	8001136 <ADC_Mux_Select+0x5a>

    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e01d      	b.n	800112e <ADC_Mux_Select+0x52>
        if (c & (1 << i)) {
 80010f2:	79fa      	ldrb	r2, [r7, #7]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	fa42 f303 	asr.w	r3, r2, r3
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d009      	beq.n	8001116 <ADC_Mux_Select+0x3a>
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_SET);
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <ADC_Mux_Select+0x64>)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <ADC_Mux_Select+0x68>)
 8001110:	f002 fd06 	bl	8003b20 <HAL_GPIO_WritePin>
 8001114:	e008      	b.n	8001128 <ADC_Mux_Select+0x4c>
        } else {
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_RESET);
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <ADC_Mux_Select+0x64>)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	4808      	ldr	r0, [pc, #32]	; (8001144 <ADC_Mux_Select+0x68>)
 8001124:	f002 fcfc 	bl	8003b20 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3301      	adds	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b03      	cmp	r3, #3
 8001132:	ddde      	ble.n	80010f2 <ADC_Mux_Select+0x16>
 8001134:	e000      	b.n	8001138 <ADC_Mux_Select+0x5c>
    if (c > NUM_ADC_CHANNELS) return;
 8001136:	bf00      	nop
        }
    }
}
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	08014130 	.word	0x08014130
 8001144:	40020400 	.word	0x40020400

08001148 <ADC_Read_Knobs>:

void ADC_Read_Knobs() {
 8001148:	b580      	push	{r7, lr}
 800114a:	b096      	sub	sp, #88	; 0x58
 800114c:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 800114e:	2300      	movs	r3, #0
 8001150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001154:	e070      	b.n	8001238 <ADC_Read_Knobs+0xf0>
        uint16_t adcBuf[NUM_ADC_SAMPLES];

        ADC_Mux_Select(channel);
 8001156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ffbe 	bl	80010dc <ADC_Mux_Select>

        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 8001160:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 800116e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001172:	4a36      	ldr	r2, [pc, #216]	; (800124c <ADC_Read_Knobs+0x104>)
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	643b      	str	r3, [r7, #64]	; 0x40
        sConfig.Rank = 1;
 800117a:	2301      	movs	r3, #1
 800117c:	647b      	str	r3, [r7, #68]	; 0x44
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800117e:	2300      	movs	r3, #0
 8001180:	64bb      	str	r3, [r7, #72]	; 0x48
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001186:	4619      	mov	r1, r3
 8001188:	4831      	ldr	r0, [pc, #196]	; (8001250 <ADC_Read_Knobs+0x108>)
 800118a:	f001 ffed 	bl	8003168 <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <ADC_Read_Knobs+0x50>
            Error_Handler();
 8001194:	f000 fc1e 	bl	80019d4 <Error_Handler>
        }

        // Sample the channel NUM_ADC_SAMPLES times to the buffer
        HAL_ADC_Start(&hadc1);
 8001198:	482d      	ldr	r0, [pc, #180]	; (8001250 <ADC_Read_Knobs+0x108>)
 800119a:	f001 fe65 	bl	8002e68 <HAL_ADC_Start>
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80011a4:	e016      	b.n	80011d4 <ADC_Read_Knobs+0x8c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 80011a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011aa:	4829      	ldr	r0, [pc, #164]	; (8001250 <ADC_Read_Knobs+0x108>)
 80011ac:	f001 ff43 	bl	8003036 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 80011b0:	4827      	ldr	r0, [pc, #156]	; (8001250 <ADC_Read_Knobs+0x108>)
 80011b2:	f001 ffcb 	bl	800314c <HAL_ADC_GetValue>
 80011b6:	4602      	mov	r2, r0
 80011b8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011bc:	b292      	uxth	r2, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80011c4:	440b      	add	r3, r1
 80011c6:	f823 2c58 	strh.w	r2, [r3, #-88]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80011ca:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011ce:	3301      	adds	r3, #1
 80011d0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80011d4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011d8:	2b1f      	cmp	r3, #31
 80011da:	d9e4      	bls.n	80011a6 <ADC_Read_Knobs+0x5e>
        }
        HAL_ADC_Stop(&hadc1);
 80011dc:	481c      	ldr	r0, [pc, #112]	; (8001250 <ADC_Read_Knobs+0x108>)
 80011de:	f001 fef7 	bl	8002fd0 <HAL_ADC_Stop>

        // Calculate average of all samples for the channel
        uint16_t adc_sum = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80011ee:	e011      	b.n	8001214 <ADC_Read_Knobs+0xcc>
            adc_sum += adcBuf[i];
 80011f0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80011fa:	4413      	add	r3, r2
 80011fc:	f833 2c58 	ldrh.w	r2, [r3, #-88]
 8001200:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001204:	4413      	add	r3, r2
 8001206:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800120a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800120e:	3301      	adds	r3, #1
 8001210:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8001214:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001218:	2b1f      	cmp	r3, #31
 800121a:	d9e9      	bls.n	80011f0 <ADC_Read_Knobs+0xa8>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 800121c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001220:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001224:	0952      	lsrs	r2, r2, #5
 8001226:	b291      	uxth	r1, r2
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <ADC_Read_Knobs+0x10c>)
 800122a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 800122e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001232:	3301      	adds	r3, #1
 8001234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800123c:	2b03      	cmp	r3, #3
 800123e:	d98a      	bls.n	8001156 <ADC_Read_Knobs+0xe>
    }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3758      	adds	r7, #88	; 0x58
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000010 	.word	0x20000010
 8001250:	200025d4 	.word	0x200025d4
 8001254:	20000350 	.word	0x20000350

08001258 <MIDI_Send>:

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, KnobMap(k, value, k->max_range));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7e1c      	ldrb	r4, [r3, #24]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7e5d      	ldrb	r5, [r3, #25]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7f5a      	ldrb	r2, [r3, #29]
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff febb 	bl	8000ff0 <KnobMap>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4629      	mov	r1, r5
 8001280:	4620      	mov	r0, r4
 8001282:	f00c fe71 	bl	800df68 <MX_USB_Send_Midi>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001290 <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7f1b      	ldrb	r3, [r3, #28]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f957 	bl	8000554 <__aeabi_i2d>
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <MIDI_Scale_And_Filter+0x130>)
 80012ac:	f7ff fae6 	bl	800087c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc98 	bl	8000bec <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff f959 	bl	8000578 <__aeabi_f2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <MIDI_Scale_And_Filter+0x134>)
 80012cc:	f7ff f9ac 	bl	8000628 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4614      	mov	r4, r2
 80012d6:	461d      	mov	r5, r3
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f93a 	bl	8000554 <__aeabi_i2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4620      	mov	r0, r4
 80012e6:	4629      	mov	r1, r5
 80012e8:	f7ff f99e 	bl	8000628 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4614      	mov	r4, r2
 80012f2:	461d      	mov	r5, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7edb      	ldrb	r3, [r3, #27]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f92b 	bl	8000554 <__aeabi_i2d>
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <MIDI_Scale_And_Filter+0x134>)
 8001304:	f7ff f990 	bl	8000628 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4620      	mov	r0, r4
 800130e:	4629      	mov	r1, r5
 8001310:	f7fe ffd4 	bl	80002bc <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7f5b      	ldrb	r3, [r3, #29]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f917 	bl	8000554 <__aeabi_i2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff fbed 	bl	8000b0c <__aeabi_dcmplt>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d032      	beq.n	800139e <MIDI_Scale_And_Filter+0x10e>
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f7ff f91d 	bl	8000578 <__aeabi_f2d>
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MIDI_Scale_And_Filter+0x134>)
 8001344:	f7ff f970 	bl	8000628 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4614      	mov	r4, r2
 800134e:	461d      	mov	r5, r3
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f8fe 	bl	8000554 <__aeabi_i2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4620      	mov	r0, r4
 800135e:	4629      	mov	r1, r5
 8001360:	f7ff f962 	bl	8000628 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4614      	mov	r4, r2
 800136a:	461d      	mov	r5, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7edb      	ldrb	r3, [r3, #27]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f8ef 	bl	8000554 <__aeabi_i2d>
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MIDI_Scale_And_Filter+0x134>)
 800137c:	f7ff f954 	bl	8000628 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4620      	mov	r0, r4
 8001386:	4629      	mov	r1, r5
 8001388:	f7fe ff98 	bl	80002bc <__adddf3>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc0a 	bl	8000bac <__aeabi_d2uiz>
 8001398:	4603      	mov	r3, r0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	e00c      	b.n	80013b8 <MIDI_Scale_And_Filter+0x128>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7f5b      	ldrb	r3, [r3, #29]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8d6 	bl	8000554 <__aeabi_i2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fbfc 	bl	8000bac <__aeabi_d2uiz>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b2db      	uxtb	r3, r3
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bdb0      	pop	{r4, r5, r7, pc}
 80013c0:	406f4000 	.word	0x406f4000
 80013c4:	3fe00000 	.word	0x3fe00000

080013c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b0a7      	sub	sp, #156	; 0x9c
 80013cc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80013ce:	f001 fc71 	bl	8002cb4 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80013d2:	f000 f929 	bl	8001628 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80013d6:	f000 fa71 	bl	80018bc <MX_GPIO_Init>
    MX_ADC1_Init();
 80013da:	f000 f9a7 	bl	800172c <MX_ADC1_Init>
    MX_I2C1_Init();
 80013de:	f000 f9f9 	bl	80017d4 <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 80013e2:	f00c fd91 	bl	800df08 <MX_USB_DEVICE_Init>
    MX_SDIO_SD_Init();
 80013e6:	f000 fa49 	bl	800187c <MX_SDIO_SD_Init>
    MX_RTC_Init();
 80013ea:	f000 fa21 	bl	8001830 <MX_RTC_Init>
    MX_FATFS_Init();
 80013ee:	f008 fb55 	bl	8009a9c <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */

    Knob knobs[4];

    retSD = f_mount(&SDFatFS, "", 1);
 80013f2:	2201      	movs	r2, #1
 80013f4:	4983      	ldr	r1, [pc, #524]	; (8001604 <main+0x23c>)
 80013f6:	4884      	ldr	r0, [pc, #528]	; (8001608 <main+0x240>)
 80013f8:	f00c f878 	bl	800d4ec <f_mount>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	4b82      	ldr	r3, [pc, #520]	; (800160c <main+0x244>)
 8001402:	701a      	strb	r2, [r3, #0]
    retSD = f_open(&SDFile, "knobs.json", FA_READ);
 8001404:	2201      	movs	r2, #1
 8001406:	4982      	ldr	r1, [pc, #520]	; (8001610 <main+0x248>)
 8001408:	4882      	ldr	r0, [pc, #520]	; (8001614 <main+0x24c>)
 800140a:	f00c f8b5 	bl	800d578 <f_open>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	4b7e      	ldr	r3, [pc, #504]	; (800160c <main+0x244>)
 8001414:	701a      	strb	r2, [r3, #0]

    char readBuf[f_size(&SDFile) + 1];
 8001416:	4b7f      	ldr	r3, [pc, #508]	; (8001614 <main+0x24c>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	1c5c      	adds	r4, r3, #1
 800141c:	4623      	mov	r3, r4
 800141e:	3b01      	subs	r3, #1
 8001420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001424:	4620      	mov	r0, r4
 8001426:	f04f 0100 	mov.w	r1, #0
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	00cb      	lsls	r3, r1, #3
 8001434:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001438:	00c2      	lsls	r2, r0, #3
 800143a:	4620      	mov	r0, r4
 800143c:	f04f 0100 	mov.w	r1, #0
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	00cb      	lsls	r3, r1, #3
 800144a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800144e:	00c2      	lsls	r2, r0, #3
 8001450:	1de3      	adds	r3, r4, #7
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	ebad 0d03 	sub.w	sp, sp, r3
 800145a:	466b      	mov	r3, sp
 800145c:	3300      	adds	r3, #0
 800145e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    unsigned int bytesRead;

    retSD = f_read(&SDFile, readBuf, sizeof(readBuf) - 1, &bytesRead);
 8001462:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001466:	1e62      	subs	r2, r4, #1
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	486a      	ldr	r0, [pc, #424]	; (8001614 <main+0x24c>)
 800146c:	f00c fa42 	bl	800d8f4 <f_read>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	4b65      	ldr	r3, [pc, #404]	; (800160c <main+0x244>)
 8001476:	701a      	strb	r2, [r3, #0]
    readBuf[bytesRead] = '\0';
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800147e:	2100      	movs	r1, #0
 8001480:	54d1      	strb	r1, [r2, r3]

    Preset_Load(knobs, readBuf);
 8001482:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f000 faa7 	bl	80019e0 <Preset_Load>
    retSD = f_close(&SDFile);
 8001492:	4860      	ldr	r0, [pc, #384]	; (8001614 <main+0x24c>)
 8001494:	f00c fbeb 	bl	800dc6e <f_close>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4b5b      	ldr	r3, [pc, #364]	; (800160c <main+0x244>)
 800149e:	701a      	strb	r2, [r3, #0]
    retSD = f_mount(NULL, "", 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	4958      	ldr	r1, [pc, #352]	; (8001604 <main+0x23c>)
 80014a4:	2000      	movs	r0, #0
 80014a6:	f00c f821 	bl	800d4ec <f_mount>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b57      	ldr	r3, [pc, #348]	; (800160c <main+0x244>)
 80014b0:	701a      	strb	r2, [r3, #0]

    SD_Disable();
 80014b2:	f7ff fe01 	bl	80010b8 <SD_Disable>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 80014b6:	f001 fb53 	bl	8002b60 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 80014ba:	4b57      	ldr	r3, [pc, #348]	; (8001618 <main+0x250>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a57      	ldr	r2, [pc, #348]	; (800161c <main+0x254>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	095b      	lsrs	r3, r3, #5
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fdd4 	bl	8001074 <SysTick_Config>

    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80014d2:	e018      	b.n	8001506 <main+0x13e>
        ssd1306_Init(&hi2c1, &knobs[i]);
 80014d4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80014d8:	f107 0208 	add.w	r2, r7, #8
 80014dc:	015b      	lsls	r3, r3, #5
 80014de:	4413      	add	r3, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	484f      	ldr	r0, [pc, #316]	; (8001620 <main+0x258>)
 80014e4:	f000 fba4 	bl	8001c30 <ssd1306_Init>
        ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 80014e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80014ec:	f107 0208 	add.w	r2, r7, #8
 80014f0:	015b      	lsls	r3, r3, #5
 80014f2:	4413      	add	r3, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	484a      	ldr	r0, [pc, #296]	; (8001620 <main+0x258>)
 80014f8:	f000 fd16 	bl	8001f28 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80014fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001500:	3301      	adds	r3, #1
 8001502:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001506:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800150a:	2b03      	cmp	r3, #3
 800150c:	d9e2      	bls.n	80014d4 <main+0x10c>
    }

    while (1) {
        ADC_Read_Knobs();
 800150e:	f7ff fe1b 	bl	8001148 <ADC_Read_Knobs>

        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001518:	e06e      	b.n	80015f8 <main+0x230>
            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 800151a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800151e:	f107 0208 	add.w	r2, r7, #8
 8001522:	015b      	lsls	r3, r3, #5
 8001524:	441a      	add	r2, r3
 8001526:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800152a:	493e      	ldr	r1, [pc, #248]	; (8001624 <main+0x25c>)
 800152c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	4610      	mov	r0, r2
 8001536:	f7ff feab 	bl	8001290 <MIDI_Scale_And_Filter>
 800153a:	4603      	mov	r3, r0
 800153c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

            if (curr_MIDI_val != knobs[i].value) {
 8001540:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001544:	015b      	lsls	r3, r3, #5
 8001546:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800154a:	4413      	add	r3, r2
 800154c:	3b75      	subs	r3, #117	; 0x75
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8001554:	429a      	cmp	r2, r3
 8001556:	d04a      	beq.n	80015ee <main+0x226>
                knobs[i].value = curr_MIDI_val;
 8001558:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800155c:	015b      	lsls	r3, r3, #5
 800155e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001562:	4413      	add	r3, r2
 8001564:	3b75      	subs	r3, #117	; 0x75
 8001566:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800156a:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 800156c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001570:	f107 0208 	add.w	r2, r7, #8
 8001574:	015b      	lsls	r3, r3, #5
 8001576:	4413      	add	r3, r2
 8001578:	4619      	mov	r1, r3
 800157a:	4829      	ldr	r0, [pc, #164]	; (8001620 <main+0x258>)
 800157c:	f000 fcd4 	bl	8001f28 <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 8001580:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800158a:	4413      	add	r3, r2
 800158c:	3b75      	subs	r3, #117	; 0x75
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800159a:	440b      	add	r3, r1
 800159c:	3b76      	subs	r3, #118	; 0x76
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d108      	bne.n	80015b6 <main+0x1ee>
 80015a4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80015ae:	4413      	add	r3, r2
 80015b0:	3b72      	subs	r3, #114	; 0x72
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 80015b6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80015ba:	015b      	lsls	r3, r3, #5
 80015bc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80015c0:	4413      	add	r3, r2
 80015c2:	3b72      	subs	r3, #114	; 0x72
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d111      	bne.n	80015ee <main+0x226>
 80015ca:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80015ce:	f107 0208 	add.w	r2, r7, #8
 80015d2:	015b      	lsls	r3, r3, #5
 80015d4:	441a      	add	r2, r3
 80015d6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80015e0:	440b      	add	r3, r1
 80015e2:	3b75      	subs	r3, #117	; 0x75
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	4619      	mov	r1, r3
 80015e8:	4610      	mov	r0, r2
 80015ea:	f7ff fe35 	bl	8001258 <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 80015ee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80015f2:	3301      	adds	r3, #1
 80015f4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80015f8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d98c      	bls.n	800151a <main+0x152>
        ADC_Read_Knobs();
 8001600:	e785      	b.n	800150e <main+0x146>
 8001602:	bf00      	nop
 8001604:	08012b80 	.word	0x08012b80
 8001608:	200028fc 	.word	0x200028fc
 800160c:	200026c4 	.word	0x200026c4
 8001610:	08012b84 	.word	0x08012b84
 8001614:	200026cc 	.word	0x200026cc
 8001618:	20000048 	.word	0x20000048
 800161c:	cccccccd 	.word	0xcccccccd
 8001620:	20002580 	.word	0x20002580
 8001624:	20000350 	.word	0x20000350

08001628 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b09a      	sub	sp, #104	; 0x68
 800162c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800162e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001632:	2230      	movs	r2, #48	; 0x30
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f00e fbf2 	bl	800fe20 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b30      	ldr	r3, [pc, #192]	; (8001724 <SystemClock_Config+0xfc>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <SystemClock_Config+0xfc>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <SystemClock_Config+0xfc>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <SystemClock_Config+0x100>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <SystemClock_Config+0x100>)
 8001684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <SystemClock_Config+0x100>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001696:	2309      	movs	r3, #9
 8001698:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800169a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a4:	2302      	movs	r3, #2
 80016a6:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ac:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 25;
 80016ae:	2319      	movs	r3, #25
 80016b0:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 192;
 80016b2:	23c0      	movs	r3, #192	; 0xc0
 80016b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b6:	2302      	movs	r3, #2
 80016b8:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80016ba:	2304      	movs	r3, #4
 80016bc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 f9be 	bl	8005a44 <HAL_RCC_OscConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0xaa>
            {
        Error_Handler();
 80016ce:	f000 f981 	bl	80019d4 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016d2:	230f      	movs	r3, #15
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d6:	2302      	movs	r3, #2
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	2103      	movs	r1, #3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fc20 	bl	8005f34 <HAL_RCC_ClockConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0xd6>
            {
        Error_Handler();
 80016fa:	f000 f96b 	bl	80019d4 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016fe:	2302      	movs	r3, #2
 8001700:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001706:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4618      	mov	r0, r3
 800170e:	f004 fdcd 	bl	80062ac <HAL_RCCEx_PeriphCLKConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0xf4>
            {
        Error_Handler();
 8001718:	f000 f95c 	bl	80019d4 <Error_Handler>
    }
}
 800171c:	bf00      	nop
 800171e:	3768      	adds	r7, #104	; 0x68
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000

0800172c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 8001732:	463b      	mov	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_ADC1_Init+0x9c>)
 8001740:	4a22      	ldr	r2, [pc, #136]	; (80017cc <MX_ADC1_Init+0xa0>)
 8001742:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_ADC1_Init+0x9c>)
 8001746:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800174a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <MX_ADC1_Init+0x9c>)
 800174e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001752:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_ADC1_Init+0x9c>)
 8001756:	2201      	movs	r2, #1
 8001758:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_ADC1_Init+0x9c>)
 800175c:	2201      	movs	r2, #1
 800175e:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_ADC1_Init+0x9c>)
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_ADC1_Init+0x9c>)
 800176a:	2200      	movs	r2, #0
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_ADC1_Init+0x9c>)
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <MX_ADC1_Init+0xa4>)
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_ADC1_Init+0x9c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_ADC1_Init+0x9c>)
 800177c:	2201      	movs	r2, #1
 800177e:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_ADC1_Init+0x9c>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_ADC1_Init+0x9c>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800178e:	480e      	ldr	r0, [pc, #56]	; (80017c8 <MX_ADC1_Init+0x9c>)
 8001790:	f001 fb26 	bl	8002de0 <HAL_ADC_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_ADC1_Init+0x72>
            {
        Error_Handler();
 800179a:	f000 f91b 	bl	80019d4 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017aa:	463b      	mov	r3, r7
 80017ac:	4619      	mov	r1, r3
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <MX_ADC1_Init+0x9c>)
 80017b0:	f001 fcda 	bl	8003168 <HAL_ADC_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_ADC1_Init+0x92>
            {
        Error_Handler();
 80017ba:	f000 f90b 	bl	80019d4 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200025d4 	.word	0x200025d4
 80017cc:	40012000 	.word	0x40012000
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_I2C1_Init+0x50>)
 80017da:	4a13      	ldr	r2, [pc, #76]	; (8001828 <MX_I2C1_Init+0x54>)
 80017dc:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 800000;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_I2C1_Init+0x50>)
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <MX_I2C1_Init+0x58>)
 80017e2:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_I2C1_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_I2C1_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_I2C1_Init+0x50>)
 80017f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f6:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <MX_I2C1_Init+0x50>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_I2C1_Init+0x50>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <MX_I2C1_Init+0x50>)
 8001812:	f002 f9b9 	bl	8003b88 <HAL_I2C_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_I2C1_Init+0x4c>
            {
        Error_Handler();
 800181c:	f000 f8da 	bl	80019d4 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20002580 	.word	0x20002580
 8001828:	40005400 	.word	0x40005400
 800182c:	000c3500 	.word	0x000c3500

08001830 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_RTC_Init+0x44>)
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <MX_RTC_Init+0x48>)
 8001838:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_RTC_Init+0x44>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_RTC_Init+0x44>)
 8001842:	227f      	movs	r2, #127	; 0x7f
 8001844:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <MX_RTC_Init+0x44>)
 8001848:	22ff      	movs	r2, #255	; 0xff
 800184a:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_RTC_Init+0x44>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_RTC_Init+0x44>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_RTC_Init+0x44>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_RTC_Init+0x44>)
 8001860:	f004 fe14 	bl	800648c <HAL_RTC_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_RTC_Init+0x3e>
            {
        Error_Handler();
 800186a:	f000 f8b3 	bl	80019d4 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000261c 	.word	0x2000261c
 8001878:	40002800 	.word	0x40002800

0800187c <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_SDIO_SD_Init+0x38>)
 8001882:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <MX_SDIO_SD_Init+0x3c>)
 8001884:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_SDIO_SD_Init+0x38>)
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_SDIO_SD_Init+0x38>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_SDIO_SD_Init+0x38>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_SDIO_SD_Init+0x38>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <MX_SDIO_SD_Init+0x38>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 8;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <MX_SDIO_SD_Init+0x38>)
 80018a6:	2208      	movs	r2, #8
 80018a8:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	2000263c 	.word	0x2000263c
 80018b8:	40012c00 	.word	0x40012c00

080018bc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <MX_GPIO_Init+0x108>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a3a      	ldr	r2, [pc, #232]	; (80019c4 <MX_GPIO_Init+0x108>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <MX_GPIO_Init+0x108>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <MX_GPIO_Init+0x108>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a33      	ldr	r2, [pc, #204]	; (80019c4 <MX_GPIO_Init+0x108>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <MX_GPIO_Init+0x108>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <MX_GPIO_Init+0x108>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a2c      	ldr	r2, [pc, #176]	; (80019c4 <MX_GPIO_Init+0x108>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <MX_GPIO_Init+0x108>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <MX_GPIO_Init+0x108>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <MX_GPIO_Init+0x108>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <MX_GPIO_Init+0x108>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001942:	2200      	movs	r2, #0
 8001944:	f247 710f 	movw	r1, #30479	; 0x770f
 8001948:	481f      	ldr	r0, [pc, #124]	; (80019c8 <MX_GPIO_Init+0x10c>)
 800194a:	f002 f8e9 	bl	8003b20 <HAL_GPIO_WritePin>
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : Detect_SDIO_Pin */
    GPIO_InitStruct.Pin = Detect_SDIO_Pin;
 800194e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001958:	2302      	movs	r3, #2
 800195a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Detect_SDIO_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	481a      	ldr	r0, [pc, #104]	; (80019cc <MX_GPIO_Init+0x110>)
 8001964:	f001 ff40 	bl	80037e8 <HAL_GPIO_Init>

    /*Configure GPIO pin : Button_6_Pin */
    GPIO_InitStruct.Pin = Button_6_Pin;
 8001968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001972:	2301      	movs	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Button_6_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <MX_GPIO_Init+0x110>)
 800197e:	f001 ff33 	bl	80037e8 <HAL_GPIO_Init>

    /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
     Button_5_Pin */
    GPIO_InitStruct.Pin = Button_1_Pin | Button_2_Pin | Button_3_Pin | Button_4_Pin
 8001982:	f248 43b0 	movw	r3, #33968	; 0x84b0
 8001986:	617b      	str	r3, [r7, #20]
            | Button_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198c:	2301      	movs	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	480e      	ldr	r0, [pc, #56]	; (80019d0 <MX_GPIO_Init+0x114>)
 8001998:	f001 ff26 	bl	80037e8 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
     LED_5_Pin LED_6_Pin AMUX_S1_Pin AMUX_S0_Pin
     AMUX_S2_Pin AMUX_S3_Pin */
    GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 800199c:	f247 730f 	movw	r3, #30479	; 0x770f
 80019a0:	617b      	str	r3, [r7, #20]
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_GPIO_Init+0x10c>)
 80019b6:	f001 ff17 	bl	80037e8 <HAL_GPIO_Init>

}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	; 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020000 	.word	0x40020000

080019d4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    __disable_irq();
    while (1) {
 80019dc:	e7fe      	b.n	80019dc <Error_Handler+0x8>
	...

080019e0 <Preset_Load>:
#include "preset.h"

void Preset_Load(Knob *k, char* buffer) {
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b093      	sub	sp, #76	; 0x4c
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
    //char* json_str = File_To_String(filename);
    char* json_str = buffer;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
    cJSON* knobs_json = cJSON_Parse(json_str);
 80019ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019f0:	f00d fc9a 	bl	800f328 <cJSON_Parse>
 80019f4:	6338      	str	r0, [r7, #48]	; 0x30
    if (knobs_json == NULL) return;
 80019f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80e5 	beq.w	8001bc8 <Preset_Load+0x1e8>

    const cJSON* knob = NULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
    uint8_t i = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob, knobs_json) {
 8001a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <Preset_Load+0x34>
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	e000      	b.n	8001a16 <Preset_Load+0x36>
 8001a14:	2300      	movs	r3, #0
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
 8001a18:	e0d1      	b.n	8001bbe <Preset_Load+0x1de>
        if (i >= 4) return;
 8001a1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	f200 80d4 	bhi.w	8001bcc <Preset_Load+0x1ec>

        const cJSON *row = cJSON_GetObjectItemCaseSensitive(knob, "row");
 8001a24:	496b      	ldr	r1, [pc, #428]	; (8001bd4 <Preset_Load+0x1f4>)
 8001a26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a28:	f00d ff83 	bl	800f932 <cJSON_GetObjectItemCaseSensitive>
 8001a2c:	62f8      	str	r0, [r7, #44]	; 0x2c
        const cJSON *col = cJSON_GetObjectItemCaseSensitive(knob, "col");
 8001a2e:	496a      	ldr	r1, [pc, #424]	; (8001bd8 <Preset_Load+0x1f8>)
 8001a30:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a32:	f00d ff7e 	bl	800f932 <cJSON_GetObjectItemCaseSensitive>
 8001a36:	62b8      	str	r0, [r7, #40]	; 0x28
        const cJSON *label = cJSON_GetObjectItemCaseSensitive(knob, "label");
 8001a38:	4968      	ldr	r1, [pc, #416]	; (8001bdc <Preset_Load+0x1fc>)
 8001a3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a3c:	f00d ff79 	bl	800f932 <cJSON_GetObjectItemCaseSensitive>
 8001a40:	6278      	str	r0, [r7, #36]	; 0x24
        const cJSON *channel = cJSON_GetObjectItemCaseSensitive(knob, "channel");
 8001a42:	4967      	ldr	r1, [pc, #412]	; (8001be0 <Preset_Load+0x200>)
 8001a44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a46:	f00d ff74 	bl	800f932 <cJSON_GetObjectItemCaseSensitive>
 8001a4a:	6238      	str	r0, [r7, #32]
        const cJSON *cc = cJSON_GetObjectItemCaseSensitive(knob, "cc");
 8001a4c:	4965      	ldr	r1, [pc, #404]	; (8001be4 <Preset_Load+0x204>)
 8001a4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a50:	f00d ff6f 	bl	800f932 <cJSON_GetObjectItemCaseSensitive>
 8001a54:	61f8      	str	r0, [r7, #28]
        const cJSON *init_value = cJSON_GetObjectItemCaseSensitive(knob, "init_value");
 8001a56:	4964      	ldr	r1, [pc, #400]	; (8001be8 <Preset_Load+0x208>)
 8001a58:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a5a:	f00d ff6a 	bl	800f932 <cJSON_GetObjectItemCaseSensitive>
 8001a5e:	61b8      	str	r0, [r7, #24]
        const cJSON *max_values = cJSON_GetObjectItemCaseSensitive(knob, "max_values");
 8001a60:	4962      	ldr	r1, [pc, #392]	; (8001bec <Preset_Load+0x20c>)
 8001a62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a64:	f00d ff65 	bl	800f932 <cJSON_GetObjectItemCaseSensitive>
 8001a68:	6178      	str	r0, [r7, #20]
        const cJSON *max_range = cJSON_GetObjectItemCaseSensitive(knob, "max_range");
 8001a6a:	4961      	ldr	r1, [pc, #388]	; (8001bf0 <Preset_Load+0x210>)
 8001a6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a6e:	f00d ff60 	bl	800f932 <cJSON_GetObjectItemCaseSensitive>
 8001a72:	6138      	str	r0, [r7, #16]
        const cJSON *isLocked = cJSON_GetObjectItemCaseSensitive(knob, "isLocked");
 8001a74:	495f      	ldr	r1, [pc, #380]	; (8001bf4 <Preset_Load+0x214>)
 8001a76:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a78:	f00d ff5b 	bl	800f932 <cJSON_GetObjectItemCaseSensitive>
 8001a7c:	60f8      	str	r0, [r7, #12]

        k[i].row = row->valueint;
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	6959      	ldr	r1, [r3, #20]
 8001a82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a86:	015b      	lsls	r3, r3, #5
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b2ca      	uxtb	r2, r1
 8001a8e:	701a      	strb	r2, [r3, #0]
        k[i].col = col->valueint;
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	6959      	ldr	r1, [r3, #20]
 8001a94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a98:	015b      	lsls	r3, r3, #5
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b2ca      	uxtb	r2, r1
 8001aa0:	705a      	strb	r2, [r3, #1]
        snprintf(k[i].label, sizeof(k[i].label)/sizeof(k[i].label[0]), "%s", label->valuestring);
 8001aa2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001aa6:	015b      	lsls	r3, r3, #5
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	1c98      	adds	r0, r3, #2
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	4a51      	ldr	r2, [pc, #324]	; (8001bf8 <Preset_Load+0x218>)
 8001ab4:	210f      	movs	r1, #15
 8001ab6:	f00e faf3 	bl	80100a0 <sniprintf>
        k[i].channel = channel->valueint;
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	6959      	ldr	r1, [r3, #20]
 8001abe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ac2:	015b      	lsls	r3, r3, #5
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b2ca      	uxtb	r2, r1
 8001aca:	761a      	strb	r2, [r3, #24]
        k[i].cc = cc->valueint;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	6959      	ldr	r1, [r3, #20]
 8001ad0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ad4:	015b      	lsls	r3, r3, #5
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	765a      	strb	r2, [r3, #25]
        k[i].init_value = init_value->valueint;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	6959      	ldr	r1, [r3, #20]
 8001ae2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ae6:	015b      	lsls	r3, r3, #5
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	b2ca      	uxtb	r2, r1
 8001aee:	769a      	strb	r2, [r3, #26]
        k[i].max_values = max_values->valueint;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	6959      	ldr	r1, [r3, #20]
 8001af4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001af8:	015b      	lsls	r3, r3, #5
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	771a      	strb	r2, [r3, #28]
        k[i].max_range = max_range->valueint;
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6959      	ldr	r1, [r3, #20]
 8001b06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b0a:	015b      	lsls	r3, r3, #5
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	775a      	strb	r2, [r3, #29]
        k[i].isLocked = isLocked->valueint;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6959      	ldr	r1, [r3, #20]
 8001b18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b1c:	015b      	lsls	r3, r3, #5
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	779a      	strb	r2, [r3, #30]

        const cJSON* sub_labels = cJSON_GetObjectItemCaseSensitive(knob, "sub_labels");
 8001b26:	4935      	ldr	r1, [pc, #212]	; (8001bfc <Preset_Load+0x21c>)
 8001b28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b2a:	f00d ff02 	bl	800f932 <cJSON_GetObjectItemCaseSensitive>
 8001b2e:	60b8      	str	r0, [r7, #8]
        const cJSON* sub_label = NULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        k[i].sub_labels = malloc(sizeof(*k[i].sub_labels) * (k[i].max_values));
 8001b34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b38:	015b      	lsls	r3, r3, #5
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	7f1b      	ldrb	r3, [r3, #28]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4613      	mov	r3, r2
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a99      	subs	r1, r3, r2
 8001b48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b4c:	015b      	lsls	r3, r3, #5
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	18d4      	adds	r4, r2, r3
 8001b52:	4608      	mov	r0, r1
 8001b54:	f00e f946 	bl	800fde4 <malloc>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	6163      	str	r3, [r4, #20]

        uint8_t label_index = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels) {
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <Preset_Load+0x18e>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	e000      	b.n	8001b70 <Preset_Load+0x190>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b72:	e019      	b.n	8001ba8 <Preset_Load+0x1c8>
            snprintf(k[i].sub_labels[label_index], sizeof(k[i].sub_labels[0]) / sizeof(k[i].sub_labels[0][0]), "%s", sub_label->valuestring);
 8001b74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b78:	015b      	lsls	r3, r3, #5
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	6959      	ldr	r1, [r3, #20]
 8001b80:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001b84:	4613      	mov	r3, r2
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	18c8      	adds	r0, r1, r3
 8001b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <Preset_Load+0x218>)
 8001b92:	210f      	movs	r1, #15
 8001b94:	f00e fa84 	bl	80100a0 <sniprintf>
            label_index++;
 8001b98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels) {
 8001ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1e2      	bne.n	8001b74 <Preset_Load+0x194>
        }
        i++;
 8001bae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob, knobs_json) {
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8001bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f af2a 	bne.w	8001a1a <Preset_Load+0x3a>
 8001bc6:	e002      	b.n	8001bce <Preset_Load+0x1ee>
    if (knobs_json == NULL) return;
 8001bc8:	bf00      	nop
 8001bca:	e000      	b.n	8001bce <Preset_Load+0x1ee>
        if (i >= 4) return;
 8001bcc:	bf00      	nop
    }
}
 8001bce:	374c      	adds	r7, #76	; 0x4c
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd90      	pop	{r4, r7, pc}
 8001bd4:	08012b90 	.word	0x08012b90
 8001bd8:	08012b94 	.word	0x08012b94
 8001bdc:	08012b98 	.word	0x08012b98
 8001be0:	08012ba0 	.word	0x08012ba0
 8001be4:	08012ba8 	.word	0x08012ba8
 8001be8:	08012bac 	.word	0x08012bac
 8001bec:	08012bb8 	.word	0x08012bb8
 8001bf0:	08012bc4 	.word	0x08012bc4
 8001bf4:	08012bd0 	.word	0x08012bd0
 8001bf8:	08012bdc 	.word	0x08012bdc
 8001bfc:	08012be0 	.word	0x08012be0

08001c00 <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af04      	add	r7, sp, #16
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	2301      	movs	r3, #1
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	1cfb      	adds	r3, r7, #3
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2178      	movs	r1, #120	; 0x78
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f002 f9f4 	bl	800400c <HAL_I2C_Mem_Write>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
    // Wait for the screen to boot
    int status = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(hi2c, k);
 8001c3e:	6839      	ldr	r1, [r7, #0]
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fc0d 	bl	8002460 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001c46:	21ae      	movs	r1, #174	; 0xae
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ffd9 	bl	8001c00 <ssd1306_WriteCommand>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001c58:	2120      	movs	r1, #32
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffd0 	bl	8001c00 <ssd1306_WriteCommand>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001c6a:	2110      	movs	r1, #16
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ffc7 	bl	8001c00 <ssd1306_WriteCommand>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001c7c:	21b0      	movs	r1, #176	; 0xb0
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ffbe 	bl	8001c00 <ssd1306_WriteCommand>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001c8e:	21c8      	movs	r1, #200	; 0xc8
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffb5 	bl	8001c00 <ssd1306_WriteCommand>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffac 	bl	8001c00 <ssd1306_WriteCommand>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001cb2:	2110      	movs	r1, #16
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ffa3 	bl	8001c00 <ssd1306_WriteCommand>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001cc4:	2140      	movs	r1, #64	; 0x40
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff9a 	bl	8001c00 <ssd1306_WriteCommand>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001cd6:	2181      	movs	r1, #129	; 0x81
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff91 	bl	8001c00 <ssd1306_WriteCommand>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);
 8001ce8:	2140      	movs	r1, #64	; 0x40
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff88 	bl	8001c00 <ssd1306_WriteCommand>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001cfa:	21a1      	movs	r1, #161	; 0xa1
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff7f 	bl	8001c00 <ssd1306_WriteCommand>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001d0c:	21a6      	movs	r1, #166	; 0xa6
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ff76 	bl	8001c00 <ssd1306_WriteCommand>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001d1e:	21a8      	movs	r1, #168	; 0xa8
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff6d 	bl	8001c00 <ssd1306_WriteCommand>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001d30:	213f      	movs	r1, #63	; 0x3f
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ff64 	bl	8001c00 <ssd1306_WriteCommand>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d42:	21a4      	movs	r1, #164	; 0xa4
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff5b 	bl	8001c00 <ssd1306_WriteCommand>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4413      	add	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001d54:	21d3      	movs	r1, #211	; 0xd3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ff52 	bl	8001c00 <ssd1306_WriteCommand>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001d66:	2100      	movs	r1, #0
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff49 	bl	8001c00 <ssd1306_WriteCommand>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4413      	add	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001d78:	21d5      	movs	r1, #213	; 0xd5
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ff40 	bl	8001c00 <ssd1306_WriteCommand>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001d8a:	21f0      	movs	r1, #240	; 0xf0
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff37 	bl	8001c00 <ssd1306_WriteCommand>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001d9c:	21d9      	movs	r1, #217	; 0xd9
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ff2e 	bl	8001c00 <ssd1306_WriteCommand>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001dae:	2122      	movs	r1, #34	; 0x22
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff25 	bl	8001c00 <ssd1306_WriteCommand>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001dc0:	21da      	movs	r1, #218	; 0xda
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ff1c 	bl	8001c00 <ssd1306_WriteCommand>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001dd2:	2112      	movs	r1, #18
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff13 	bl	8001c00 <ssd1306_WriteCommand>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001de4:	21db      	movs	r1, #219	; 0xdb
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff0a 	bl	8001c00 <ssd1306_WriteCommand>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001df6:	2120      	movs	r1, #32
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff01 	bl	8001c00 <ssd1306_WriteCommand>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4413      	add	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001e08:	218d      	movs	r1, #141	; 0x8d
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fef8 	bl	8001c00 <ssd1306_WriteCommand>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001e1a:	2114      	movs	r1, #20
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff feef 	bl	8001c00 <ssd1306_WriteCommand>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4413      	add	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001e2c:	21af      	movs	r1, #175	; 0xaf
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fee6 	bl	8001c00 <ssd1306_WriteCommand>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <ssd1306_Init+0x218>
        return 1;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e013      	b.n	8001e70 <ssd1306_Init+0x240>
    }

    ssd1306_Fill(Black);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f000 f817 	bl	8001e7c <ssd1306_Fill>
    ssd1306_AdjustBrightness(hi2c, 0x7F);
 8001e4e:	217f      	movs	r1, #127	; 0x7f
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fadd 	bl	8002410 <ssd1306_AdjustBrightness>
    ssd1306_UpdateScreen(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f834 	bl	8001ec4 <ssd1306_UpdateScreen>

    SSD1306.CurrentX = 0;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <ssd1306_Init+0x248>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <ssd1306_Init+0x248>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <ssd1306_Init+0x248>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	715a      	strb	r2, [r3, #5]

    return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000758 	.word	0x20000758

08001e7c <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	e00d      	b.n	8001ea8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <ssd1306_Fill+0x1a>
 8001e92:	2100      	movs	r1, #0
 8001e94:	e000      	b.n	8001e98 <ssd1306_Fill+0x1c>
 8001e96:	21ff      	movs	r1, #255	; 0xff
 8001e98:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <ssd1306_Fill+0x44>)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	460a      	mov	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eae:	d3ed      	bcc.n	8001e8c <ssd1306_Fill+0x10>
    }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000358 	.word	0x20000358

08001ec4 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af04      	add	r7, sp, #16
 8001eca:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e020      	b.n	8001f14 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	3b50      	subs	r3, #80	; 0x50
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fe90 	bl	8001c00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fe8c 	bl	8001c00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001ee8:	2110      	movs	r1, #16
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fe88 	bl	8001c00 <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	01db      	lsls	r3, r3, #7
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <ssd1306_UpdateScreen+0x60>)
 8001ef6:	4413      	add	r3, r2
 8001ef8:	2264      	movs	r2, #100	; 0x64
 8001efa:	9202      	str	r2, [sp, #8]
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	9201      	str	r2, [sp, #4]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2301      	movs	r3, #1
 8001f04:	2240      	movs	r2, #64	; 0x40
 8001f06:	2178      	movs	r1, #120	; 0x78
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f002 f87f 	bl	800400c <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	3301      	adds	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	2b07      	cmp	r3, #7
 8001f18:	d9db      	bls.n	8001ed2 <ssd1306_UpdateScreen+0xe>
    }
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000358 	.word	0x20000358

08001f28 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b08f      	sub	sp, #60	; 0x3c
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
    ssd1306_Select(hi2c, k);
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fa93 	bl	8002460 <ssd1306_Select>
    ssd1306_Fill(Black);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff ff9e 	bl	8001e7c <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8001f40:	4b9d      	ldr	r3, [pc, #628]	; (80021b8 <ssd1306_WriteKnob+0x290>)
 8001f42:	f107 0418 	add.w	r4, r7, #24
 8001f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	7e1b      	ldrb	r3, [r3, #24]
 8001f50:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f54:	4a99      	ldr	r2, [pc, #612]	; (80021bc <ssd1306_WriteKnob+0x294>)
 8001f56:	2103      	movs	r1, #3
 8001f58:	f00e f8a2 	bl	80100a0 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	7e5b      	ldrb	r3, [r3, #25]
 8001f60:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001f64:	4a96      	ldr	r2, [pc, #600]	; (80021c0 <ssd1306_WriteKnob+0x298>)
 8001f66:	2104      	movs	r1, #4
 8001f68:	f00e f89a 	bl	80100a0 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8001f6c:	f107 0318 	add.w	r3, r7, #24
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe f93f 	bl	80001f4 <strlen>
 8001f76:	4604      	mov	r4, r0
 8001f78:	68b8      	ldr	r0, [r7, #8]
 8001f7a:	f000 faa9 	bl	80024d0 <update_init_indicator>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f107 0018 	add.w	r0, r7, #24
 8001f84:	4a8f      	ldr	r2, [pc, #572]	; (80021c4 <ssd1306_WriteKnob+0x29c>)
 8001f86:	4621      	mov	r1, r4
 8001f88:	f00e f88a 	bl	80100a0 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) KnobMap(k, k->value, k->max_range));
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	7ed9      	ldrb	r1, [r3, #27]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	7f5b      	ldrb	r3, [r3, #29]
 8001f94:	461a      	mov	r2, r3
 8001f96:	68b8      	ldr	r0, [r7, #8]
 8001f98:	f7ff f82a 	bl	8000ff0 <KnobMap>
 8001f9c:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8001f9e:	f107 0014 	add.w	r0, r7, #20
 8001fa2:	4a87      	ldr	r2, [pc, #540]	; (80021c0 <ssd1306_WriteKnob+0x298>)
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	f00e f87b 	bl	80100a0 <sniprintf>

    ssd1306_SetCursor(0, 0);
 8001faa:	2100      	movs	r1, #0
 8001fac:	2000      	movs	r0, #0
 8001fae:	f000 fa17 	bl	80023e0 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8001fb2:	4a85      	ldr	r2, [pc, #532]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 8001fb4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001fb8:	2301      	movs	r3, #1
 8001fba:	ca06      	ldmia	r2, {r1, r2}
 8001fbc:	f000 f9ea 	bl	8002394 <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 8001fc0:	4b81      	ldr	r3, [pc, #516]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 8001fc2:	785b      	ldrb	r3, [r3, #1]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	4619      	mov	r1, r3
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f000 fa08 	bl	80023e0 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8001fd0:	4a7d      	ldr	r2, [pc, #500]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 8001fd2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	ca06      	ldmia	r2, {r1, r2}
 8001fda:	f000 f9db 	bl	8002394 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe f906 	bl	80001f4 <strlen>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4a77      	ldr	r2, [pc, #476]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	b2d8      	uxtb	r0, r3
 8001ffa:	4b73      	ldr	r3, [pc, #460]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	3301      	adds	r3, #1
 8002000:	0fda      	lsrs	r2, r3, #31
 8002002:	4413      	add	r3, r2
 8002004:	105b      	asrs	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	f000 f9e9 	bl	80023e0 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 800200e:	4a6e      	ldr	r2, [pc, #440]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 8002010:	f107 0018 	add.w	r0, r7, #24
 8002014:	2301      	movs	r3, #1
 8002016:	ca06      	ldmia	r2, {r1, r2}
 8002018:	f000 f9bc 	bl	8002394 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 800201c:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	f1c3 0320 	rsb	r3, r3, #32
 8002024:	b2db      	uxtb	r3, r3
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b2d8      	uxtb	r0, r3
 800202e:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	3301      	adds	r3, #1
 8002034:	0fda      	lsrs	r2, r3, #31
 8002036:	4413      	add	r3, r2
 8002038:	105b      	asrs	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4619      	mov	r1, r3
 800203e:	f000 f9cf 	bl	80023e0 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8002042:	4a61      	ldr	r2, [pc, #388]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 8002044:	f107 0014 	add.w	r0, r7, #20
 8002048:	2301      	movs	r3, #1
 800204a:	ca06      	ldmia	r2, {r1, r2}
 800204c:	f000 f9a2 	bl	8002394 <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002056:	e013      	b.n	8002080 <ssd1306_WriteKnob+0x158>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 8002058:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <ssd1306_WriteKnob+0x2a4>)
 800205a:	885b      	ldrh	r3, [r3, #2]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b5a      	ldr	r3, [pc, #360]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 8002060:	785b      	ldrb	r3, [r3, #1]
 8002062:	4413      	add	r3, r2
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3304      	adds	r3, #4
 8002068:	b2d9      	uxtb	r1, r3
 800206a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800206e:	2201      	movs	r2, #1
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f8af 	bl	80021d4 <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8002076:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800207a:	3301      	adds	r3, #1
 800207c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002080:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002084:	2b00      	cmp	r3, #0
 8002086:	dae7      	bge.n	8002058 <ssd1306_WriteKnob+0x130>
    }

    uint8_t len_label = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    uint8_t x = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t y = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 800209a:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <ssd1306_WriteKnob+0x2a0>)
 800209c:	785b      	ldrb	r3, [r3, #1]
 800209e:	f1c3 0320 	rsb	r3, r3, #32
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    // Draw main label
    len_label = strlen(k->label);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3302      	adds	r3, #2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f8a0 	bl	80001f4 <strlen>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 80020ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80020be:	4a44      	ldr	r2, [pc, #272]	; (80021d0 <ssd1306_WriteKnob+0x2a8>)
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80020ca:	0fda      	lsrs	r2, r3, #31
 80020cc:	4413      	add	r3, r2
 80020ce:	105b      	asrs	r3, r3, #1
 80020d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 80020d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80020e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <ssd1306_WriteKnob+0x2a8>)
 80020ea:	785b      	ldrb	r3, [r3, #1]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002100:	edc7 7a01 	vstr	s15, [r7, #4]
 8002104:	793b      	ldrb	r3, [r7, #4]
 8002106:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    ssd1306_SetCursor(x, y);
 800210a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800210e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f963 	bl	80023e0 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1c98      	adds	r0, r3, #2
 800211e:	4a2c      	ldr	r2, [pc, #176]	; (80021d0 <ssd1306_WriteKnob+0x2a8>)
 8002120:	2301      	movs	r3, #1
 8002122:	ca06      	ldmia	r2, {r1, r2}
 8002124:	f000 f936 	bl	8002394 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	7f1b      	ldrb	r3, [r3, #28]
 800212c:	b25b      	sxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	db02      	blt.n	8002138 <ssd1306_WriteKnob+0x210>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	7edb      	ldrb	r3, [r3, #27]
 8002136:	e000      	b.n	800213a <ssd1306_WriteKnob+0x212>
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    len_label = strlen(k->sub_labels[sl_index]);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	6959      	ldr	r1, [r3, #20]
 8002142:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002146:	4613      	mov	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	440b      	add	r3, r1
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f850 	bl	80001f4 <strlen>
 8002154:	4603      	mov	r3, r0
 8002156:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 800215a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <ssd1306_WriteKnob+0x2a8>)
 8002160:	7812      	ldrb	r2, [r2, #0]
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800216a:	0fda      	lsrs	r2, r3, #31
 800216c:	4413      	add	r3, r2
 800216e:	105b      	asrs	r3, r3, #1
 8002170:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <ssd1306_WriteKnob+0x2a8>)
 8002176:	785b      	ldrb	r3, [r3, #1]
 8002178:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800217c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    ssd1306_SetCursor(x, y);
 8002180:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002184:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f928 	bl	80023e0 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	6959      	ldr	r1, [r3, #20]
 8002194:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002198:	4613      	mov	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	18c8      	adds	r0, r1, r3
 80021a0:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <ssd1306_WriteKnob+0x2a8>)
 80021a2:	2301      	movs	r3, #1
 80021a4:	ca06      	ldmia	r2, {r1, r2}
 80021a6:	f000 f8f5 	bl	8002394 <ssd1306_WriteString>

    ssd1306_UpdateScreen(hi2c);
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff fe8a 	bl	8001ec4 <ssd1306_UpdateScreen>
}
 80021b0:	bf00      	nop
 80021b2:	373c      	adds	r7, #60	; 0x3c
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	08012c94 	.word	0x08012c94
 80021bc:	08012c80 	.word	0x08012c80
 80021c0:	08012c88 	.word	0x08012c88
 80021c4:	08012c90 	.word	0x08012c90
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000758 	.word	0x20000758
 80021d0:	20000008 	.word	0x20000008

080021d4 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
 80021de:	460b      	mov	r3, r1
 80021e0:	71bb      	strb	r3, [r7, #6]
 80021e2:	4613      	mov	r3, r2
 80021e4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	db48      	blt.n	8002280 <ssd1306_DrawPixel+0xac>
 80021ee:	79bb      	ldrb	r3, [r7, #6]
 80021f0:	2b3f      	cmp	r3, #63	; 0x3f
 80021f2:	d845      	bhi.n	8002280 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <ssd1306_DrawPixel+0xb8>)
 80021f6:	791b      	ldrb	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 80021fc:	797b      	ldrb	r3, [r7, #5]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	bf0c      	ite	eq
 8002202:	2301      	moveq	r3, #1
 8002204:	2300      	movne	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 800220a:	797b      	ldrb	r3, [r7, #5]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d11a      	bne.n	8002246 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002210:	79fa      	ldrb	r2, [r7, #7]
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	08db      	lsrs	r3, r3, #3
 8002216:	b2d8      	uxtb	r0, r3
 8002218:	4603      	mov	r3, r0
 800221a:	01db      	lsls	r3, r3, #7
 800221c:	4413      	add	r3, r2
 800221e:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <ssd1306_DrawPixel+0xbc>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	b25a      	sxtb	r2, r3
 8002224:	79bb      	ldrb	r3, [r7, #6]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	b25b      	sxtb	r3, r3
 8002232:	4313      	orrs	r3, r2
 8002234:	b259      	sxtb	r1, r3
 8002236:	79fa      	ldrb	r2, [r7, #7]
 8002238:	4603      	mov	r3, r0
 800223a:	01db      	lsls	r3, r3, #7
 800223c:	4413      	add	r3, r2
 800223e:	b2c9      	uxtb	r1, r1
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <ssd1306_DrawPixel+0xbc>)
 8002242:	54d1      	strb	r1, [r2, r3]
 8002244:	e01d      	b.n	8002282 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002246:	79fa      	ldrb	r2, [r7, #7]
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	08db      	lsrs	r3, r3, #3
 800224c:	b2d8      	uxtb	r0, r3
 800224e:	4603      	mov	r3, r0
 8002250:	01db      	lsls	r3, r3, #7
 8002252:	4413      	add	r3, r2
 8002254:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <ssd1306_DrawPixel+0xbc>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	b25a      	sxtb	r2, r3
 800225a:	79bb      	ldrb	r3, [r7, #6]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	b25b      	sxtb	r3, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	b25b      	sxtb	r3, r3
 800226c:	4013      	ands	r3, r2
 800226e:	b259      	sxtb	r1, r3
 8002270:	79fa      	ldrb	r2, [r7, #7]
 8002272:	4603      	mov	r3, r0
 8002274:	01db      	lsls	r3, r3, #7
 8002276:	4413      	add	r3, r2
 8002278:	b2c9      	uxtb	r1, r1
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <ssd1306_DrawPixel+0xbc>)
 800227c:	54d1      	strb	r1, [r2, r3]
 800227e:	e000      	b.n	8002282 <ssd1306_DrawPixel+0xae>
        return;
 8002280:	bf00      	nop
    }
}
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	20000758 	.word	0x20000758
 8002290:	20000358 	.word	0x20000358

08002294 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	4604      	mov	r4, r0
 800229c:	1d38      	adds	r0, r7, #4
 800229e:	e880 0006 	stmia.w	r0, {r1, r2}
 80022a2:	461a      	mov	r2, r3
 80022a4:	4623      	mov	r3, r4
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	4613      	mov	r3, r2
 80022aa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80022ac:	4b38      	ldr	r3, [pc, #224]	; (8002390 <ssd1306_WriteChar+0xfc>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	793b      	ldrb	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	2b7f      	cmp	r3, #127	; 0x7f
 80022b8:	dc06      	bgt.n	80022c8 <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <ssd1306_WriteChar+0xfc>)
 80022bc:	885b      	ldrh	r3, [r3, #2]
 80022be:	461a      	mov	r2, r3
 80022c0:	797b      	ldrb	r3, [r7, #5]
 80022c2:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80022c4:	2b3f      	cmp	r3, #63	; 0x3f
 80022c6:	dd01      	ble.n	80022cc <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e05d      	b.n	8002388 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	e04c      	b.n	800236c <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	3b20      	subs	r3, #32
 80022d8:	7979      	ldrb	r1, [r7, #5]
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4619      	mov	r1, r3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	440b      	add	r3, r1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	e034      	b.n	800235c <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d012      	beq.n	8002328 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002302:	4b23      	ldr	r3, [pc, #140]	; (8002390 <ssd1306_WriteChar+0xfc>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4413      	add	r3, r2
 800230e:	b2d8      	uxtb	r0, r3
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <ssd1306_WriteChar+0xfc>)
 8002312:	885b      	ldrh	r3, [r3, #2]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4413      	add	r3, r2
 800231c:	b2db      	uxtb	r3, r3
 800231e:	7bba      	ldrb	r2, [r7, #14]
 8002320:	4619      	mov	r1, r3
 8002322:	f7ff ff57 	bl	80021d4 <ssd1306_DrawPixel>
 8002326:	e016      	b.n	8002356 <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <ssd1306_WriteChar+0xfc>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4413      	add	r3, r2
 8002334:	b2d8      	uxtb	r0, r3
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <ssd1306_WriteChar+0xfc>)
 8002338:	885b      	ldrh	r3, [r3, #2]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4413      	add	r3, r2
 8002342:	b2d9      	uxtb	r1, r3
 8002344:	7bbb      	ldrb	r3, [r7, #14]
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	f7ff ff3f 	bl	80021d4 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	3301      	adds	r3, #1
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	793b      	ldrb	r3, [r7, #4]
 800235e:	461a      	mov	r2, r3
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	4293      	cmp	r3, r2
 8002364:	d3c5      	bcc.n	80022f2 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3301      	adds	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	797b      	ldrb	r3, [r7, #5]
 800236e:	461a      	mov	r2, r3
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	4293      	cmp	r3, r2
 8002374:	d3ad      	bcc.n	80022d2 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <ssd1306_WriteChar+0xfc>)
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	793b      	ldrb	r3, [r7, #4]
 800237c:	b29b      	uxth	r3, r3
 800237e:	4413      	add	r3, r2
 8002380:	b29a      	uxth	r2, r3
 8002382:	4b03      	ldr	r3, [pc, #12]	; (8002390 <ssd1306_WriteChar+0xfc>)
 8002384:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3724      	adds	r7, #36	; 0x24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	20000758 	.word	0x20000758

08002394 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	1d38      	adds	r0, r7, #4
 800239e:	e880 0006 	stmia.w	r0, {r1, r2}
 80023a2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80023a4:	e012      	b.n	80023cc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	7818      	ldrb	r0, [r3, #0]
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	1d3a      	adds	r2, r7, #4
 80023ae:	ca06      	ldmia	r2, {r1, r2}
 80023b0:	f7ff ff70 	bl	8002294 <ssd1306_WriteChar>
 80023b4:	4603      	mov	r3, r0
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d002      	beq.n	80023c6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	e008      	b.n	80023d8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3301      	adds	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e8      	bne.n	80023a6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	781b      	ldrb	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	460a      	mov	r2, r1
 80023ea:	71fb      	strb	r3, [r7, #7]
 80023ec:	4613      	mov	r3, r2
 80023ee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <ssd1306_SetCursor+0x2c>)
 80023f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80023f8:	79bb      	ldrb	r3, [r7, #6]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <ssd1306_SetCursor+0x2c>)
 80023fe:	805a      	strh	r2, [r3, #2]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	20000758 	.word	0x20000758

08002410 <ssd1306_AdjustBrightness>:

// Adjust brightness
void ssd1306_AdjustBrightness(I2C_HandleTypeDef *hi2c, uint8_t brightness) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af04      	add	r7, sp, #16
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
    uint8_t contrast_cmd = 0x81;
 800241c:	2381      	movs	r3, #129	; 0x81
 800241e:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast_level = brightness;
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &contrast_cmd, 1, 10);
 8002424:	230a      	movs	r3, #10
 8002426:	9302      	str	r3, [sp, #8]
 8002428:	2301      	movs	r3, #1
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	f107 030f 	add.w	r3, r7, #15
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2301      	movs	r3, #1
 8002434:	2200      	movs	r2, #0
 8002436:	2178      	movs	r1, #120	; 0x78
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f001 fde7 	bl	800400c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &contrast_level, 1, 10);
 800243e:	230a      	movs	r3, #10
 8002440:	9302      	str	r3, [sp, #8]
 8002442:	2301      	movs	r3, #1
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	f107 030e 	add.w	r3, r7, #14
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2301      	movs	r3, #1
 800244e:	2200      	movs	r2, #0
 8002450:	2178      	movs	r1, #120	; 0x78
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f001 fdda 	bl	800400c <HAL_I2C_Mem_Write>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <ssd1306_Select>:

// Select a display
void ssd1306_Select(I2C_HandleTypeDef *hi2c, Knob *k) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
    i2c_Select(hi2c, I2C_MUX_MASTER_ADDR, k->row);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	21e2      	movs	r1, #226	; 0xe2
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f80b 	bl	800248e <i2c_Select>
    i2c_Select(hi2c, I2C_MUX_SLAVE_ADDR, k->col);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	785b      	ldrb	r3, [r3, #1]
 800247c:	461a      	mov	r2, r3
 800247e:	21e0      	movs	r1, #224	; 0xe0
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f804 	bl	800248e <i2c_Select>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(I2C_HandleTypeDef *hi2c, uint8_t mux_addr, uint8_t i) {
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af02      	add	r7, sp, #8
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	70fb      	strb	r3, [r7, #3]
 800249a:	4613      	mov	r3, r2
 800249c:	70bb      	strb	r3, [r7, #2]
    if (i > 7) return;
 800249e:	78bb      	ldrb	r3, [r7, #2]
 80024a0:	2b07      	cmp	r3, #7
 80024a2:	d810      	bhi.n	80024c6 <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 80024a4:	78bb      	ldrb	r3, [r7, #2]
 80024a6:	2201      	movs	r2, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(hi2c, mux_addr, temp, 1, 100);
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	b299      	uxth	r1, r3
 80024b4:	f107 020c 	add.w	r2, r7, #12
 80024b8:	2364      	movs	r3, #100	; 0x64
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2301      	movs	r3, #1
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f001 fca6 	bl	8003e10 <HAL_I2C_Master_Transmit>
 80024c4:	e000      	b.n	80024c8 <i2c_Select+0x3a>
    if (i > 7) return;
 80024c6:	bf00      	nop
}
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    int8_t init_diff = KnobMap(k, k->init_value, MIDI_MAX) - KnobMap(k, k->value, MIDI_MAX);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7e9b      	ldrb	r3, [r3, #26]
 80024dc:	227f      	movs	r2, #127	; 0x7f
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fe fd85 	bl	8000ff0 <KnobMap>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461c      	mov	r4, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7edb      	ldrb	r3, [r3, #27]
 80024ee:	227f      	movs	r2, #127	; 0x7f
 80024f0:	4619      	mov	r1, r3
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fd7c 	bl	8000ff0 <KnobMap>
 80024f8:	4603      	mov	r3, r0
 80024fa:	1ae3      	subs	r3, r4, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 8002500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002504:	2b00      	cmp	r3, #0
 8002506:	bfb8      	it	lt
 8002508:	425b      	neglt	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002514:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002600 <update_init_indicator+0x130>
 8002518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800251c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002604 <update_init_indicator+0x134>
 8002520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002528:	edc7 7a00 	vstr	s15, [r7]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 8002530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <update_init_indicator+0x6c>
 8002538:	4b33      	ldr	r3, [pc, #204]	; (8002608 <update_init_indicator+0x138>)
 800253a:	e05c      	b.n	80025f6 <update_init_indicator+0x126>

    if (init_pct < 15) {
 800253c:	7bbb      	ldrb	r3, [r7, #14]
 800253e:	2b0e      	cmp	r3, #14
 8002540:	d807      	bhi.n	8002552 <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	dd01      	ble.n	800254e <update_init_indicator+0x7e>
 800254a:	4b30      	ldr	r3, [pc, #192]	; (800260c <update_init_indicator+0x13c>)
 800254c:	e053      	b.n	80025f6 <update_init_indicator+0x126>
        else return "        <      ";
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <update_init_indicator+0x140>)
 8002550:	e051      	b.n	80025f6 <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 8002552:	7bbb      	ldrb	r3, [r7, #14]
 8002554:	2b0e      	cmp	r3, #14
 8002556:	d90a      	bls.n	800256e <update_init_indicator+0x9e>
 8002558:	7bbb      	ldrb	r3, [r7, #14]
 800255a:	2b1d      	cmp	r3, #29
 800255c:	d807      	bhi.n	800256e <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	dd01      	ble.n	800256a <update_init_indicator+0x9a>
 8002566:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <update_init_indicator+0x144>)
 8002568:	e045      	b.n	80025f6 <update_init_indicator+0x126>
        else return "        <<     ";
 800256a:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <update_init_indicator+0x148>)
 800256c:	e043      	b.n	80025f6 <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 800256e:	7bbb      	ldrb	r3, [r7, #14]
 8002570:	2b1d      	cmp	r3, #29
 8002572:	d90a      	bls.n	800258a <update_init_indicator+0xba>
 8002574:	7bbb      	ldrb	r3, [r7, #14]
 8002576:	2b2c      	cmp	r3, #44	; 0x2c
 8002578:	d807      	bhi.n	800258a <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	2b00      	cmp	r3, #0
 8002580:	dd01      	ble.n	8002586 <update_init_indicator+0xb6>
 8002582:	4b26      	ldr	r3, [pc, #152]	; (800261c <update_init_indicator+0x14c>)
 8002584:	e037      	b.n	80025f6 <update_init_indicator+0x126>
        else return "        <<<    ";
 8002586:	4b26      	ldr	r3, [pc, #152]	; (8002620 <update_init_indicator+0x150>)
 8002588:	e035      	b.n	80025f6 <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 800258a:	7bbb      	ldrb	r3, [r7, #14]
 800258c:	2b2c      	cmp	r3, #44	; 0x2c
 800258e:	d90a      	bls.n	80025a6 <update_init_indicator+0xd6>
 8002590:	7bbb      	ldrb	r3, [r7, #14]
 8002592:	2b3c      	cmp	r3, #60	; 0x3c
 8002594:	d807      	bhi.n	80025a6 <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	dd01      	ble.n	80025a2 <update_init_indicator+0xd2>
 800259e:	4b21      	ldr	r3, [pc, #132]	; (8002624 <update_init_indicator+0x154>)
 80025a0:	e029      	b.n	80025f6 <update_init_indicator+0x126>
        else return "        <<<<   ";
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <update_init_indicator+0x158>)
 80025a4:	e027      	b.n	80025f6 <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 80025a6:	7bbb      	ldrb	r3, [r7, #14]
 80025a8:	2b3c      	cmp	r3, #60	; 0x3c
 80025aa:	d90a      	bls.n	80025c2 <update_init_indicator+0xf2>
 80025ac:	7bbb      	ldrb	r3, [r7, #14]
 80025ae:	2b4c      	cmp	r3, #76	; 0x4c
 80025b0:	d807      	bhi.n	80025c2 <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 80025b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	dd01      	ble.n	80025be <update_init_indicator+0xee>
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <update_init_indicator+0x15c>)
 80025bc:	e01b      	b.n	80025f6 <update_init_indicator+0x126>
        else return "        <<<<<  ";
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <update_init_indicator+0x160>)
 80025c0:	e019      	b.n	80025f6 <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 80025c2:	7bbb      	ldrb	r3, [r7, #14]
 80025c4:	2b4c      	cmp	r3, #76	; 0x4c
 80025c6:	d90a      	bls.n	80025de <update_init_indicator+0x10e>
 80025c8:	7bbb      	ldrb	r3, [r7, #14]
 80025ca:	2b5c      	cmp	r3, #92	; 0x5c
 80025cc:	d807      	bhi.n	80025de <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	dd01      	ble.n	80025da <update_init_indicator+0x10a>
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <update_init_indicator+0x164>)
 80025d8:	e00d      	b.n	80025f6 <update_init_indicator+0x126>
        else return "        <<<<<< ";
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <update_init_indicator+0x168>)
 80025dc:	e00b      	b.n	80025f6 <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 80025de:	7bbb      	ldrb	r3, [r7, #14]
 80025e0:	2b5c      	cmp	r3, #92	; 0x5c
 80025e2:	d907      	bls.n	80025f4 <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 80025e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	dd01      	ble.n	80025f0 <update_init_indicator+0x120>
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <update_init_indicator+0x16c>)
 80025ee:	e002      	b.n	80025f6 <update_init_indicator+0x126>
        else return "        <<<<<<<";
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <update_init_indicator+0x170>)
 80025f2:	e000      	b.n	80025f6 <update_init_indicator+0x126>
    } else {
        return " ";
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <update_init_indicator+0x174>)
    }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}
 80025fe:	bf00      	nop
 8002600:	42fe0000 	.word	0x42fe0000
 8002604:	42c80000 	.word	0x42c80000
 8002608:	08012c94 	.word	0x08012c94
 800260c:	08012ca4 	.word	0x08012ca4
 8002610:	08012cb4 	.word	0x08012cb4
 8002614:	08012cc4 	.word	0x08012cc4
 8002618:	08012cd4 	.word	0x08012cd4
 800261c:	08012ce4 	.word	0x08012ce4
 8002620:	08012cf4 	.word	0x08012cf4
 8002624:	08012d04 	.word	0x08012d04
 8002628:	08012d14 	.word	0x08012d14
 800262c:	08012d24 	.word	0x08012d24
 8002630:	08012d34 	.word	0x08012d34
 8002634:	08012d44 	.word	0x08012d44
 8002638:	08012d54 	.word	0x08012d54
 800263c:	08012d64 	.word	0x08012d64
 8002640:	08012d74 	.word	0x08012d74
 8002644:	08012d84 	.word	0x08012d84

08002648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_MspInit+0x4c>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <HAL_MspInit+0x4c>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <HAL_MspInit+0x4c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_MspInit+0x4c>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_MspInit+0x4c>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_MspInit+0x4c>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800

08002698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a17      	ldr	r2, [pc, #92]	; (8002714 <HAL_ADC_MspInit+0x7c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d127      	bne.n	800270a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4b16      	ldr	r3, [pc, #88]	; (8002718 <HAL_ADC_MspInit+0x80>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a15      	ldr	r2, [pc, #84]	; (8002718 <HAL_ADC_MspInit+0x80>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <HAL_ADC_MspInit+0x80>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_ADC_MspInit+0x80>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <HAL_ADC_MspInit+0x80>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <HAL_ADC_MspInit+0x80>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80026f2:	230f      	movs	r3, #15
 80026f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026f6:	2303      	movs	r3, #3
 80026f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	4805      	ldr	r0, [pc, #20]	; (800271c <HAL_ADC_MspInit+0x84>)
 8002706:	f001 f86f 	bl	80037e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	; 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40012000 	.word	0x40012000
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000

08002720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <HAL_I2C_MspInit+0x84>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d12b      	bne.n	800279a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800275e:	23c0      	movs	r3, #192	; 0xc0
 8002760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002762:	2312      	movs	r3, #18
 8002764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002766:	2301      	movs	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800276e:	2304      	movs	r3, #4
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	4619      	mov	r1, r3
 8002778:	480c      	ldr	r0, [pc, #48]	; (80027ac <HAL_I2C_MspInit+0x8c>)
 800277a:	f001 f835 	bl	80037e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 8002788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800279a:	bf00      	nop
 800279c:	3728      	adds	r7, #40	; 0x28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40005400 	.word	0x40005400
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020400 	.word	0x40020400

080027b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <HAL_RTC_MspInit+0x24>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d102      	bne.n	80027c8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RTC_MspInit+0x28>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40002800 	.word	0x40002800
 80027d8:	42470e3c 	.word	0x42470e3c

080027dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <HAL_SD_MspInit+0xc4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d14b      	bne.n	8002896 <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_SD_MspInit+0xc8>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_SD_MspInit+0xc8>)
 8002808:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <HAL_SD_MspInit+0xc8>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_SD_MspInit+0xc8>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a20      	ldr	r2, [pc, #128]	; (80028a4 <HAL_SD_MspInit+0xc8>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <HAL_SD_MspInit+0xc8>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_SD_MspInit+0xc8>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_SD_MspInit+0xc8>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_SD_MspInit+0xc8>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002852:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002860:	2303      	movs	r3, #3
 8002862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002864:	230c      	movs	r3, #12
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	480e      	ldr	r0, [pc, #56]	; (80028a8 <HAL_SD_MspInit+0xcc>)
 8002870:	f000 ffba 	bl	80037e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8002874:	f248 0330 	movw	r3, #32816	; 0x8030
 8002878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002886:	230c      	movs	r3, #12
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	4806      	ldr	r0, [pc, #24]	; (80028ac <HAL_SD_MspInit+0xd0>)
 8002892:	f000 ffa9 	bl	80037e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	3728      	adds	r7, #40	; 0x28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40020000 	.word	0x40020000
 80028ac:	40020400 	.word	0x40020400

080028b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 80028b4:	e7fe      	b.n	80028b4 <NMI_Handler+0x4>

080028b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ba:	e7fe      	b.n	80028ba <HardFault_Handler+0x4>

080028bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <MemManage_Handler+0x4>

080028c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <BusFault_Handler+0x4>

080028c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <UsageFault_Handler+0x4>

080028ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	e034      	b.n	800296e <SysTick_Handler+0x76>
        GPIO_TypeDef *t = (i == NUM_BUTTONS - 1) ? GPIO_PORT_BUTTON_6 : GPIO_PORT_BUTTONS_1TO5;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d101      	bne.n	800290e <SysTick_Handler+0x16>
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <SysTick_Handler+0x88>)
 800290c:	e000      	b.n	8002910 <SysTick_Handler+0x18>
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <SysTick_Handler+0x8c>)
 8002910:	60bb      	str	r3, [r7, #8]
        uint8_t reading = HAL_GPIO_ReadPin(t, btnPins[i]);
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <SysTick_Handler+0x90>)
 8002916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800291a:	4619      	mov	r1, r3
 800291c:	68b8      	ldr	r0, [r7, #8]
 800291e:	f001 f8e7 	bl	8003af0 <HAL_GPIO_ReadPin>
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]

        if (reading == btnStatesLast[i] && reading != btnStates[i]) {
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	4a18      	ldr	r2, [pc, #96]	; (800298c <SysTick_Handler+0x94>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	79fa      	ldrb	r2, [r7, #7]
 800292e:	429a      	cmp	r2, r3
 8002930:	d116      	bne.n	8002960 <SysTick_Handler+0x68>
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	4a16      	ldr	r2, [pc, #88]	; (8002990 <SysTick_Handler+0x98>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	79fa      	ldrb	r2, [r7, #7]
 800293a:	429a      	cmp	r2, r3
 800293c:	d010      	beq.n	8002960 <SysTick_Handler+0x68>
            btnStates[i] = reading;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	4913      	ldr	r1, [pc, #76]	; (8002990 <SysTick_Handler+0x98>)
 8002942:	79fa      	ldrb	r2, [r7, #7]
 8002944:	54ca      	strb	r2, [r1, r3]

            if (btnStates[i] == GPIO_PIN_RESET) {
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <SysTick_Handler+0x98>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d107      	bne.n	8002960 <SysTick_Handler+0x68>
                if (i == NUM_BUTTONS - 1) {
                    //SD_Toggle();
                }
                HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	4a10      	ldr	r2, [pc, #64]	; (8002994 <SysTick_Handler+0x9c>)
 8002954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002958:	4619      	mov	r1, r3
 800295a:	480f      	ldr	r0, [pc, #60]	; (8002998 <SysTick_Handler+0xa0>)
 800295c:	f001 f8f9 	bl	8003b52 <HAL_GPIO_TogglePin>
            }
        }

        btnStatesLast[i] = reading;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	490a      	ldr	r1, [pc, #40]	; (800298c <SysTick_Handler+0x94>)
 8002964:	79fa      	ldrb	r2, [r7, #7]
 8002966:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	3301      	adds	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	2b05      	cmp	r3, #5
 8002972:	d9c7      	bls.n	8002904 <SysTick_Handler+0xc>
    }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002974:	f000 f9f0 	bl	8002d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40020800 	.word	0x40020800
 8002984:	40020000 	.word	0x40020000
 8002988:	20000030 	.word	0x20000030
 800298c:	20000028 	.word	0x20000028
 8002990:	20000020 	.word	0x20000020
 8002994:	2000003c 	.word	0x2000003c
 8002998:	40020400 	.word	0x40020400

0800299c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <OTG_FS_IRQHandler+0x10>)
 80029a2:	f002 f81c 	bl	80049de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20003000 	.word	0x20003000

080029b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
	return 1;
 80029b4:	2301      	movs	r3, #1
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <_kill>:

int _kill(int pid, int sig)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029ca:	f00c ffc1 	bl	800f950 <__errno>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2216      	movs	r2, #22
 80029d2:	601a      	str	r2, [r3, #0]
	return -1;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_exit>:

void _exit (int status)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ffe7 	bl	80029c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029f2:	e7fe      	b.n	80029f2 <_exit+0x12>

080029f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	e00a      	b.n	8002a1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a06:	f3af 8000 	nop.w
 8002a0a:	4601      	mov	r1, r0
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	60ba      	str	r2, [r7, #8]
 8002a12:	b2ca      	uxtb	r2, r1
 8002a14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	dbf0      	blt.n	8002a06 <_read+0x12>
	}

return len;
 8002a24:	687b      	ldr	r3, [r7, #4]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e009      	b.n	8002a54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	60ba      	str	r2, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3301      	adds	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	dbf1      	blt.n	8002a40 <_write+0x12>
	}
	return len;
 8002a5c:	687b      	ldr	r3, [r7, #4]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <_close>:

int _close(int file)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <_isatty>:

int _isatty(int file)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
	return 1;
 8002aa6:	2301      	movs	r3, #1
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
	return 0;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <_sbrk+0x5c>)
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <_sbrk+0x60>)
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <_sbrk+0x64>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <_sbrk+0x64>)
 8002aee:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <_sbrk+0x68>)
 8002af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <_sbrk+0x64>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d207      	bcs.n	8002b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b00:	f00c ff26 	bl	800f950 <__errno>
 8002b04:	4603      	mov	r3, r0
 8002b06:	220c      	movs	r2, #12
 8002b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0e:	e009      	b.n	8002b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <_sbrk+0x64>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <_sbrk+0x64>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <_sbrk+0x64>)
 8002b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b22:	68fb      	ldr	r3, [r7, #12]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20020000 	.word	0x20020000
 8002b30:	00000400 	.word	0x00000400
 8002b34:	20000760 	.word	0x20000760
 8002b38:	20003418 	.word	0x20003418

08002b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <SystemInit+0x20>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <SystemInit+0x20>)
 8002b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	2302      	movs	r3, #2
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	2302      	movs	r3, #2
 8002b78:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002b7a:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <SystemCoreClockUpdate+0xec>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d011      	beq.n	8002bae <SystemCoreClockUpdate+0x4e>
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d844      	bhi.n	8002c1a <SystemCoreClockUpdate+0xba>
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <SystemCoreClockUpdate+0x3e>
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d004      	beq.n	8002ba6 <SystemCoreClockUpdate+0x46>
 8002b9c:	e03d      	b.n	8002c1a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <SystemCoreClockUpdate+0xf0>)
 8002ba0:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <SystemCoreClockUpdate+0xf4>)
 8002ba2:	601a      	str	r2, [r3, #0]
      break;
 8002ba4:	e03d      	b.n	8002c22 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002ba6:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <SystemCoreClockUpdate+0xf0>)
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <SystemCoreClockUpdate+0xf8>)
 8002baa:	601a      	str	r2, [r3, #0]
      break;
 8002bac:	e039      	b.n	8002c22 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002bae:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <SystemCoreClockUpdate+0xec>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0d9b      	lsrs	r3, r3, #22
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bba:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <SystemCoreClockUpdate+0xec>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002bca:	4a23      	ldr	r2, [pc, #140]	; (8002c58 <SystemCoreClockUpdate+0xf8>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <SystemCoreClockUpdate+0xec>)
 8002bd4:	6852      	ldr	r2, [r2, #4]
 8002bd6:	0992      	lsrs	r2, r2, #6
 8002bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e00b      	b.n	8002bfc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002be4:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <SystemCoreClockUpdate+0xf4>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <SystemCoreClockUpdate+0xec>)
 8002bee:	6852      	ldr	r2, [r2, #4]
 8002bf0:	0992      	lsrs	r2, r2, #6
 8002bf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <SystemCoreClockUpdate+0xec>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	3301      	adds	r3, #1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <SystemCoreClockUpdate+0xf0>)
 8002c16:	6013      	str	r3, [r2, #0]
      break;
 8002c18:	e003      	b.n	8002c22 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <SystemCoreClockUpdate+0xf0>)
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <SystemCoreClockUpdate+0xf4>)
 8002c1e:	601a      	str	r2, [r3, #0]
      break;
 8002c20:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <SystemCoreClockUpdate+0xec>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	; (8002c5c <SystemCoreClockUpdate+0xfc>)
 8002c2e:	5cd3      	ldrb	r3, [r2, r3]
 8002c30:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <SystemCoreClockUpdate+0xf0>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <SystemCoreClockUpdate+0xf0>)
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	20000048 	.word	0x20000048
 8002c54:	00f42400 	.word	0x00f42400
 8002c58:	017d7840 	.word	0x017d7840
 8002c5c:	08014138 	.word	0x08014138

08002c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c64:	480d      	ldr	r0, [pc, #52]	; (8002c9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c66:	490e      	ldr	r1, [pc, #56]	; (8002ca0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c68:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c6c:	e002      	b.n	8002c74 <LoopCopyDataInit>

08002c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c72:	3304      	adds	r3, #4

08002c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c78:	d3f9      	bcc.n	8002c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c7c:	4c0b      	ldr	r4, [pc, #44]	; (8002cac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c80:	e001      	b.n	8002c86 <LoopFillZerobss>

08002c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c84:	3204      	adds	r2, #4

08002c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c88:	d3fb      	bcc.n	8002c82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c8a:	f7ff ff57 	bl	8002b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c8e:	f00d f81d 	bl	800fccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c92:	f7fe fb99 	bl	80013c8 <main>
  bx  lr    
 8002c96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca0:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8002ca4:	080149ec 	.word	0x080149ec
  ldr r2, =_sbss
 8002ca8:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8002cac:	20003418 	.word	0x20003418

08002cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb0:	e7fe      	b.n	8002cb0 <ADC_IRQHandler>
	...

08002cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <HAL_Init+0x40>)
 8002cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_Init+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_Init+0x40>)
 8002cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_Init+0x40>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <HAL_Init+0x40>)
 8002cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cdc:	2003      	movs	r0, #3
 8002cde:	f000 fd41 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f000 f808 	bl	8002cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce8:	f7ff fcae 	bl	8002648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023c00 	.word	0x40023c00

08002cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_InitTick+0x54>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x58>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fd59 	bl	80037ce <HAL_SYSTICK_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00e      	b.n	8002d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b0f      	cmp	r3, #15
 8002d2a:	d80a      	bhi.n	8002d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f000 fd21 	bl	800377a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d38:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <HAL_InitTick+0x5c>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e000      	b.n	8002d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000048 	.word	0x20000048
 8002d50:	20000050 	.word	0x20000050
 8002d54:	2000004c 	.word	0x2000004c

08002d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x20>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x24>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_IncTick+0x24>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000050 	.word	0x20000050
 8002d7c:	200026c0 	.word	0x200026c0

08002d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_GetTick+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	200026c0 	.word	0x200026c0

08002d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da0:	f7ff ffee 	bl	8002d80 <HAL_GetTick>
 8002da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d005      	beq.n	8002dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_Delay+0x44>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dbe:	bf00      	nop
 8002dc0:	f7ff ffde 	bl	8002d80 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d8f7      	bhi.n	8002dc0 <HAL_Delay+0x28>
  {
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000050 	.word	0x20000050

08002de0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e033      	b.n	8002e5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff fc4a 	bl	8002698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e26:	f023 0302 	bic.w	r3, r3, #2
 8002e2a:	f043 0202 	orr.w	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 faca 	bl	80033cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	f043 0201 	orr.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e4e:	e001      	b.n	8002e54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_Start+0x1a>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e097      	b.n	8002fb2 <HAL_ADC_Start+0x14a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d018      	beq.n	8002eca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ea8:	4b45      	ldr	r3, [pc, #276]	; (8002fc0 <HAL_ADC_Start+0x158>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a45      	ldr	r2, [pc, #276]	; (8002fc4 <HAL_ADC_Start+0x15c>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	0c9a      	lsrs	r2, r3, #18
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ebc:	e002      	b.n	8002ec4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f9      	bne.n	8002ebe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d15f      	bne.n	8002f98 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f16:	d106      	bne.n	8002f26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f023 0206 	bic.w	r2, r3, #6
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	645a      	str	r2, [r3, #68]	; 0x44
 8002f24:	e002      	b.n	8002f2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f34:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_ADC_Start+0x160>)
 8002f36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f40:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d129      	bne.n	8002fb0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	e020      	b.n	8002fb0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <HAL_ADC_Start+0x164>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d11b      	bne.n	8002fb0 <HAL_ADC_Start+0x148>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d114      	bne.n	8002fb0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	e00b      	b.n	8002fb0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f043 0210 	orr.w	r2, r3, #16
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000048 	.word	0x20000048
 8002fc4:	431bde83 	.word	0x431bde83
 8002fc8:	40012300 	.word	0x40012300
 8002fcc:	40012000 	.word	0x40012000

08002fd0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_Stop+0x16>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e021      	b.n	800302a <HAL_ADC_Stop+0x5a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d113      	bne.n	800307c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800305e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003062:	d10b      	bne.n	800307c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e063      	b.n	8003144 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800307c:	f7ff fe80 	bl	8002d80 <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003082:	e021      	b.n	80030c8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d01d      	beq.n	80030c8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <HAL_ADC_PollForConversion+0x6c>
 8003092:	f7ff fe75 	bl	8002d80 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d212      	bcs.n	80030c8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d00b      	beq.n	80030c8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f043 0204 	orr.w	r2, r3, #4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e03d      	b.n	8003144 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d1d6      	bne.n	8003084 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f06f 0212 	mvn.w	r2, #18
 80030de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d123      	bne.n	8003142 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d11f      	bne.n	8003142 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800310c:	2b00      	cmp	r3, #0
 800310e:	d006      	beq.n	800311e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800311a:	2b00      	cmp	r3, #0
 800311c:	d111      	bne.n	8003142 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x1c>
 8003180:	2302      	movs	r3, #2
 8003182:	e113      	b.n	80033ac <HAL_ADC_ConfigChannel+0x244>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b09      	cmp	r3, #9
 8003192:	d925      	bls.n	80031e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68d9      	ldr	r1, [r3, #12]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	3b1e      	subs	r3, #30
 80031aa:	2207      	movs	r2, #7
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43da      	mvns	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	400a      	ands	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68d9      	ldr	r1, [r3, #12]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	4603      	mov	r3, r0
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4403      	add	r3, r0
 80031d2:	3b1e      	subs	r3, #30
 80031d4:	409a      	lsls	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	e022      	b.n	8003226 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	2207      	movs	r2, #7
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	400a      	ands	r2, r1
 8003202:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6919      	ldr	r1, [r3, #16]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	4618      	mov	r0, r3
 8003216:	4603      	mov	r3, r0
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4403      	add	r3, r0
 800321c:	409a      	lsls	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b06      	cmp	r3, #6
 800322c:	d824      	bhi.n	8003278 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	3b05      	subs	r3, #5
 8003240:	221f      	movs	r2, #31
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	400a      	ands	r2, r1
 800324e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	4618      	mov	r0, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	3b05      	subs	r3, #5
 800326a:	fa00 f203 	lsl.w	r2, r0, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	635a      	str	r2, [r3, #52]	; 0x34
 8003276:	e04c      	b.n	8003312 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d824      	bhi.n	80032ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	3b23      	subs	r3, #35	; 0x23
 8003292:	221f      	movs	r2, #31
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43da      	mvns	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	400a      	ands	r2, r1
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	3b23      	subs	r3, #35	; 0x23
 80032bc:	fa00 f203 	lsl.w	r2, r0, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
 80032c8:	e023      	b.n	8003312 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	3b41      	subs	r3, #65	; 0x41
 80032dc:	221f      	movs	r2, #31
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	400a      	ands	r2, r1
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	4618      	mov	r0, r3
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	3b41      	subs	r3, #65	; 0x41
 8003306:	fa00 f203 	lsl.w	r2, r0, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003312:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <HAL_ADC_ConfigChannel+0x250>)
 8003314:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a28      	ldr	r2, [pc, #160]	; (80033bc <HAL_ADC_ConfigChannel+0x254>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10f      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x1d8>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b12      	cmp	r3, #18
 8003326:	d10b      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <HAL_ADC_ConfigChannel+0x254>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d12b      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x23a>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1c      	ldr	r2, [pc, #112]	; (80033c0 <HAL_ADC_ConfigChannel+0x258>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <HAL_ADC_ConfigChannel+0x1f4>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b11      	cmp	r3, #17
 800335a:	d122      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a11      	ldr	r2, [pc, #68]	; (80033c0 <HAL_ADC_ConfigChannel+0x258>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d111      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_ADC_ConfigChannel+0x25c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_ADC_ConfigChannel+0x260>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	0c9a      	lsrs	r2, r3, #18
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003394:	e002      	b.n	800339c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	3b01      	subs	r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f9      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	40012300 	.word	0x40012300
 80033bc:	40012000 	.word	0x40012000
 80033c0:	10000012 	.word	0x10000012
 80033c4:	20000048 	.word	0x20000048
 80033c8:	431bde83 	.word	0x431bde83

080033cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033d4:	4b79      	ldr	r3, [pc, #484]	; (80035bc <ADC_Init+0x1f0>)
 80033d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003400:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	021a      	lsls	r2, r3, #8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003446:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6899      	ldr	r1, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	4a58      	ldr	r2, [pc, #352]	; (80035c0 <ADC_Init+0x1f4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d022      	beq.n	80034aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003472:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6899      	ldr	r1, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6899      	ldr	r1, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	e00f      	b.n	80034ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0202 	bic.w	r2, r2, #2
 80034d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7e1b      	ldrb	r3, [r3, #24]
 80034e4:	005a      	lsls	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01b      	beq.n	8003530 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003506:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003516:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	3b01      	subs	r3, #1
 8003524:	035a      	lsls	r2, r3, #13
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	e007      	b.n	8003540 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800353e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	3b01      	subs	r3, #1
 800355c:	051a      	lsls	r2, r3, #20
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6899      	ldr	r1, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003582:	025a      	lsls	r2, r3, #9
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6899      	ldr	r1, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	029a      	lsls	r2, r3, #10
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	609a      	str	r2, [r3, #8]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	40012300 	.word	0x40012300
 80035c0:	0f000001 	.word	0x0f000001

080035c4 <__NVIC_SetPriorityGrouping>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035e0:	4013      	ands	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f6:	4a04      	ldr	r2, [pc, #16]	; (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	60d3      	str	r3, [r2, #12]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_GetPriorityGrouping>:
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <__NVIC_GetPriorityGrouping+0x18>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	f003 0307 	and.w	r3, r3, #7
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_EnableIRQ>:
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db0b      	blt.n	8003652 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4907      	ldr	r1, [pc, #28]	; (8003660 <__NVIC_EnableIRQ+0x38>)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2001      	movs	r0, #1
 800364a:	fa00 f202 	lsl.w	r2, r0, r2
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e100 	.word	0xe000e100

08003664 <__NVIC_SetPriority>:
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	; (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	; (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	4313      	orrs	r3, r2
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <SysTick_Config>:
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003730:	d301      	bcc.n	8003736 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003732:	2301      	movs	r3, #1
 8003734:	e00f      	b.n	8003756 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <SysTick_Config+0x40>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373e:	210f      	movs	r1, #15
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f7ff ff8e 	bl	8003664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <SysTick_Config+0x40>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374e:	4b04      	ldr	r3, [pc, #16]	; (8003760 <SysTick_Config+0x40>)
 8003750:	2207      	movs	r2, #7
 8003752:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	e000e010 	.word	0xe000e010

08003764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff29 	bl	80035c4 <__NVIC_SetPriorityGrouping>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	4603      	mov	r3, r0
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800378c:	f7ff ff3e 	bl	800360c <__NVIC_GetPriorityGrouping>
 8003790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff8e 	bl	80036b8 <NVIC_EncodePriority>
 800379c:	4602      	mov	r2, r0
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff5d 	bl	8003664 <__NVIC_SetPriority>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4603      	mov	r3, r0
 80037ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff31 	bl	8003628 <__NVIC_EnableIRQ>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ffa2 	bl	8003720 <SysTick_Config>
 80037dc:	4603      	mov	r3, r0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e159      	b.n	8003ab8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003804:	2201      	movs	r2, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	429a      	cmp	r2, r3
 800381e:	f040 8148 	bne.w	8003ab2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d005      	beq.n	800383a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003836:	2b02      	cmp	r3, #2
 8003838:	d130      	bne.n	800389c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	2203      	movs	r2, #3
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003870:	2201      	movs	r2, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 0201 	and.w	r2, r3, #1
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d017      	beq.n	80038d8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d123      	bne.n	800392c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	08da      	lsrs	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3208      	adds	r2, #8
 80038ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	220f      	movs	r2, #15
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	08da      	lsrs	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3208      	adds	r2, #8
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0203 	and.w	r2, r3, #3
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a2 	beq.w	8003ab2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b57      	ldr	r3, [pc, #348]	; (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	4a56      	ldr	r2, [pc, #344]	; (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800397c:	6453      	str	r3, [r2, #68]	; 0x44
 800397e:	4b54      	ldr	r3, [pc, #336]	; (8003ad0 <HAL_GPIO_Init+0x2e8>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800398a:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_GPIO_Init+0x2ec>)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a49      	ldr	r2, [pc, #292]	; (8003ad8 <HAL_GPIO_Init+0x2f0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d019      	beq.n	80039ea <HAL_GPIO_Init+0x202>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a48      	ldr	r2, [pc, #288]	; (8003adc <HAL_GPIO_Init+0x2f4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_Init+0x1fe>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a47      	ldr	r2, [pc, #284]	; (8003ae0 <HAL_GPIO_Init+0x2f8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00d      	beq.n	80039e2 <HAL_GPIO_Init+0x1fa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a46      	ldr	r2, [pc, #280]	; (8003ae4 <HAL_GPIO_Init+0x2fc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_GPIO_Init+0x1f6>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a45      	ldr	r2, [pc, #276]	; (8003ae8 <HAL_GPIO_Init+0x300>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_GPIO_Init+0x1f2>
 80039d6:	2304      	movs	r3, #4
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039da:	2307      	movs	r3, #7
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x204>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039fc:	4935      	ldr	r1, [pc, #212]	; (8003ad4 <HAL_GPIO_Init+0x2ec>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a0a:	4b38      	ldr	r3, [pc, #224]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a2e:	4a2f      	ldr	r2, [pc, #188]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a58:	4a24      	ldr	r2, [pc, #144]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a5e:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a82:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a88:	4b18      	ldr	r3, [pc, #96]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aac:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_GPIO_Init+0x304>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f aea2 	bls.w	8003804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40013c00 	.word	0x40013c00

08003af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e001      	b.n	8003b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	807b      	strh	r3, [r7, #2]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b30:	787b      	ldrb	r3, [r7, #1]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b36:	887a      	ldrh	r2, [r7, #2]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b3c:	e003      	b.n	8003b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b3e:	887b      	ldrh	r3, [r7, #2]
 8003b40:	041a      	lsls	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	619a      	str	r2, [r3, #24]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b64:	887a      	ldrh	r2, [r7, #2]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	041a      	lsls	r2, r3, #16
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	43d9      	mvns	r1, r3
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	400b      	ands	r3, r1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	619a      	str	r2, [r3, #24]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e12b      	b.n	8003df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fe fdb6 	bl	8002720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2224      	movs	r2, #36	; 0x24
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bec:	f002 fb4a 	bl	8006284 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a81      	ldr	r2, [pc, #516]	; (8003dfc <HAL_I2C_Init+0x274>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d807      	bhi.n	8003c0c <HAL_I2C_Init+0x84>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a80      	ldr	r2, [pc, #512]	; (8003e00 <HAL_I2C_Init+0x278>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	bf94      	ite	ls
 8003c04:	2301      	movls	r3, #1
 8003c06:	2300      	movhi	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e006      	b.n	8003c1a <HAL_I2C_Init+0x92>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a7d      	ldr	r2, [pc, #500]	; (8003e04 <HAL_I2C_Init+0x27c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	bf94      	ite	ls
 8003c14:	2301      	movls	r3, #1
 8003c16:	2300      	movhi	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0e7      	b.n	8003df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a78      	ldr	r2, [pc, #480]	; (8003e08 <HAL_I2C_Init+0x280>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	0c9b      	lsrs	r3, r3, #18
 8003c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4a6a      	ldr	r2, [pc, #424]	; (8003dfc <HAL_I2C_Init+0x274>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d802      	bhi.n	8003c5c <HAL_I2C_Init+0xd4>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	e009      	b.n	8003c70 <HAL_I2C_Init+0xe8>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	4a69      	ldr	r2, [pc, #420]	; (8003e0c <HAL_I2C_Init+0x284>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	3301      	adds	r3, #1
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	495c      	ldr	r1, [pc, #368]	; (8003dfc <HAL_I2C_Init+0x274>)
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	d819      	bhi.n	8003cc4 <HAL_I2C_Init+0x13c>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e59      	subs	r1, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9e:	1c59      	adds	r1, r3, #1
 8003ca0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_I2C_Init+0x138>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1e59      	subs	r1, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbe:	e051      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	e04f      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d111      	bne.n	8003cf0 <HAL_I2C_Init+0x168>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1e58      	subs	r0, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	440b      	add	r3, r1
 8003cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e012      	b.n	8003d16 <HAL_I2C_Init+0x18e>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e58      	subs	r0, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	0099      	lsls	r1, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_I2C_Init+0x196>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e022      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10e      	bne.n	8003d44 <HAL_I2C_Init+0x1bc>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1e58      	subs	r0, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	440b      	add	r3, r1
 8003d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d42:	e00f      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e58      	subs	r0, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	0099      	lsls	r1, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	6809      	ldr	r1, [r1, #0]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6911      	ldr	r1, [r2, #16]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	4311      	orrs	r1, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	000186a0 	.word	0x000186a0
 8003e00:	001e847f 	.word	0x001e847f
 8003e04:	003d08ff 	.word	0x003d08ff
 8003e08:	431bde83 	.word	0x431bde83
 8003e0c:	10624dd3 	.word	0x10624dd3

08003e10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	817b      	strh	r3, [r7, #10]
 8003e20:	4613      	mov	r3, r2
 8003e22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e24:	f7fe ffac 	bl	8002d80 <HAL_GetTick>
 8003e28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	f040 80e0 	bne.w	8003ff8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2319      	movs	r3, #25
 8003e3e:	2201      	movs	r2, #1
 8003e40:	4970      	ldr	r1, [pc, #448]	; (8004004 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 faf4 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e0d3      	b.n	8003ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_I2C_Master_Transmit+0x50>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0cc      	b.n	8003ffa <HAL_I2C_Master_Transmit+0x1ea>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d007      	beq.n	8003e86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0201 	orr.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2221      	movs	r2, #33	; 0x21
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	893a      	ldrh	r2, [r7, #8]
 8003eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a50      	ldr	r2, [pc, #320]	; (8004008 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ec8:	8979      	ldrh	r1, [r7, #10]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	6a3a      	ldr	r2, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f996 	bl	8004200 <I2C_MasterRequestWrite>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e08d      	b.n	8003ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ef4:	e066      	b.n	8003fc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	6a39      	ldr	r1, [r7, #32]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fb6e 	bl	80045dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d107      	bne.n	8003f1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e06b      	b.n	8003ffa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	781a      	ldrb	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d11b      	bne.n	8003f98 <HAL_I2C_Master_Transmit+0x188>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d017      	beq.n	8003f98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	6a39      	ldr	r1, [r7, #32]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fb5e 	bl	800465e <I2C_WaitOnBTFFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d107      	bne.n	8003fc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e01a      	b.n	8003ffa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d194      	bne.n	8003ef6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e000      	b.n	8003ffa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	00100002 	.word	0x00100002
 8004008:	ffff0000 	.word	0xffff0000

0800400c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4603      	mov	r3, r0
 800401c:	817b      	strh	r3, [r7, #10]
 800401e:	460b      	mov	r3, r1
 8004020:	813b      	strh	r3, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004026:	f7fe feab 	bl	8002d80 <HAL_GetTick>
 800402a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b20      	cmp	r3, #32
 8004036:	f040 80d9 	bne.w	80041ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	2319      	movs	r3, #25
 8004040:	2201      	movs	r2, #1
 8004042:	496d      	ldr	r1, [pc, #436]	; (80041f8 <HAL_I2C_Mem_Write+0x1ec>)
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f9f3 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
 8004052:	e0cc      	b.n	80041ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_I2C_Mem_Write+0x56>
 800405e:	2302      	movs	r3, #2
 8004060:	e0c5      	b.n	80041ee <HAL_I2C_Mem_Write+0x1e2>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d007      	beq.n	8004088 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004096:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2221      	movs	r2, #33	; 0x21
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2240      	movs	r2, #64	; 0x40
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4a4d      	ldr	r2, [pc, #308]	; (80041fc <HAL_I2C_Mem_Write+0x1f0>)
 80040c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040ca:	88f8      	ldrh	r0, [r7, #6]
 80040cc:	893a      	ldrh	r2, [r7, #8]
 80040ce:	8979      	ldrh	r1, [r7, #10]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	4603      	mov	r3, r0
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f912 	bl	8004304 <I2C_RequestMemoryWrite>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d052      	beq.n	800418c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e081      	b.n	80041ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fa74 	bl	80045dc <I2C_WaitOnTXEFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d107      	bne.n	8004112 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e06b      	b.n	80041ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b04      	cmp	r3, #4
 8004152:	d11b      	bne.n	800418c <HAL_I2C_Mem_Write+0x180>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	2b00      	cmp	r3, #0
 800415a:	d017      	beq.n	800418c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1aa      	bne.n	80040ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fa60 	bl	800465e <I2C_WaitOnBTFFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d107      	bne.n	80041bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e016      	b.n	80041ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	e000      	b.n	80041ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
  }
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	00100002 	.word	0x00100002
 80041fc:	ffff0000 	.word	0xffff0000

08004200 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d006      	beq.n	800422a <I2C_MasterRequestWrite+0x2a>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d003      	beq.n	800422a <I2C_MasterRequestWrite+0x2a>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004228:	d108      	bne.n	800423c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e00b      	b.n	8004254 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	2b12      	cmp	r3, #18
 8004242:	d107      	bne.n	8004254 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004252:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f8e5 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427a:	d103      	bne.n	8004284 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e035      	b.n	80042f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004290:	d108      	bne.n	80042a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004292:	897b      	ldrh	r3, [r7, #10]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	e01b      	b.n	80042dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042a4:	897b      	ldrh	r3, [r7, #10]
 80042a6:	11db      	asrs	r3, r3, #7
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 0306 	and.w	r3, r3, #6
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f063 030f 	orn	r3, r3, #15
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	490e      	ldr	r1, [pc, #56]	; (80042fc <I2C_MasterRequestWrite+0xfc>)
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f90b 	bl	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e010      	b.n	80042f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042d2:	897b      	ldrh	r3, [r7, #10]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4907      	ldr	r1, [pc, #28]	; (8004300 <I2C_MasterRequestWrite+0x100>)
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f8fb 	bl	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	00010008 	.word	0x00010008
 8004300:	00010002 	.word	0x00010002

08004304 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	461a      	mov	r2, r3
 8004312:	4603      	mov	r3, r0
 8004314:	817b      	strh	r3, [r7, #10]
 8004316:	460b      	mov	r3, r1
 8004318:	813b      	strh	r3, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800432c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	2200      	movs	r2, #0
 8004336:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f878 	bl	8004430 <I2C_WaitOnFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004354:	d103      	bne.n	800435e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e05f      	b.n	8004422 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004362:	897b      	ldrh	r3, [r7, #10]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004370:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	6a3a      	ldr	r2, [r7, #32]
 8004376:	492d      	ldr	r1, [pc, #180]	; (800442c <I2C_RequestMemoryWrite+0x128>)
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f8b0 	bl	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e04c      	b.n	8004422 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800439e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a0:	6a39      	ldr	r1, [r7, #32]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f91a 	bl	80045dc <I2C_WaitOnTXEFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d107      	bne.n	80043c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e02b      	b.n	8004422 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d105      	bne.n	80043dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043d0:	893b      	ldrh	r3, [r7, #8]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	611a      	str	r2, [r3, #16]
 80043da:	e021      	b.n	8004420 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043dc:	893b      	ldrh	r3, [r7, #8]
 80043de:	0a1b      	lsrs	r3, r3, #8
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ec:	6a39      	ldr	r1, [r7, #32]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f8f4 	bl	80045dc <I2C_WaitOnTXEFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d107      	bne.n	8004412 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004410:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e005      	b.n	8004422 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004416:	893b      	ldrh	r3, [r7, #8]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	00010002 	.word	0x00010002

08004430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004440:	e025      	b.n	800448e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d021      	beq.n	800448e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444a:	f7fe fc99 	bl	8002d80 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d116      	bne.n	800448e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e023      	b.n	80044d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d10d      	bne.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4013      	ands	r3, r2
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bf0c      	ite	eq
 80044aa:	2301      	moveq	r3, #1
 80044ac:	2300      	movne	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	e00c      	b.n	80044ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	43da      	mvns	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bf0c      	ite	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	2300      	movne	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d0b6      	beq.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ec:	e051      	b.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fc:	d123      	bne.n	8004546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004516:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f043 0204 	orr.w	r2, r3, #4
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e046      	b.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d021      	beq.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454e:	f7fe fc17 	bl	8002d80 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	d302      	bcc.n	8004564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d116      	bne.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e020      	b.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10c      	bne.n	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bf14      	ite	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	2300      	moveq	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	e00b      	b.n	80045ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	43da      	mvns	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4013      	ands	r3, r2
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d18d      	bne.n	80044ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e8:	e02d      	b.n	8004646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f878 	bl	80046e0 <I2C_IsAcknowledgeFailed>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e02d      	b.n	8004656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d021      	beq.n	8004646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004602:	f7fe fbbd 	bl	8002d80 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	429a      	cmp	r2, r3
 8004610:	d302      	bcc.n	8004618 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d116      	bne.n	8004646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e007      	b.n	8004656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d1ca      	bne.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800466a:	e02d      	b.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f837 	bl	80046e0 <I2C_IsAcknowledgeFailed>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e02d      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d021      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004684:	f7fe fb7c 	bl	8002d80 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	429a      	cmp	r2, r3
 8004692:	d302      	bcc.n	800469a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d116      	bne.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e007      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d1ca      	bne.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f6:	d11b      	bne.n	8004730 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004700:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	f043 0204 	orr.w	r2, r3, #4
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800473e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004740:	b08f      	sub	sp, #60	; 0x3c
 8004742:	af0a      	add	r7, sp, #40	; 0x28
 8004744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e10f      	b.n	8004970 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f009 fd5e 	bl	800e22c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2203      	movs	r2, #3
 8004774:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f003 ff73 	bl	800867a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	687e      	ldr	r6, [r7, #4]
 800479c:	466d      	mov	r5, sp
 800479e:	f106 0410 	add.w	r4, r6, #16
 80047a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80047b2:	1d33      	adds	r3, r6, #4
 80047b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047b6:	6838      	ldr	r0, [r7, #0]
 80047b8:	f003 fe4a 	bl	8008450 <USB_CoreInit>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e0d0      	b.n	8004970 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f003 ff61 	bl	800869c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e04a      	b.n	8004876 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	333d      	adds	r3, #61	; 0x3d
 80047f0:	2201      	movs	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047f4:	7bfa      	ldrb	r2, [r7, #15]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	333c      	adds	r3, #60	; 0x3c
 8004804:	7bfa      	ldrb	r2, [r7, #15]
 8004806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	b298      	uxth	r0, r3
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	3342      	adds	r3, #66	; 0x42
 800481c:	4602      	mov	r2, r0
 800481e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004820:	7bfa      	ldrb	r2, [r7, #15]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	333f      	adds	r3, #63	; 0x3f
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	3344      	adds	r3, #68	; 0x44
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004848:	7bfa      	ldrb	r2, [r7, #15]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	3348      	adds	r3, #72	; 0x48
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800485c:	7bfa      	ldrb	r2, [r7, #15]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	3350      	adds	r3, #80	; 0x50
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	3301      	adds	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	7bfa      	ldrb	r2, [r7, #15]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	d3af      	bcc.n	80047e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	e044      	b.n	8004910 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004886:	7bfa      	ldrb	r2, [r7, #15]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800489c:	7bfa      	ldrb	r2, [r7, #15]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048b2:	7bfa      	ldrb	r2, [r7, #15]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048de:	7bfa      	ldrb	r2, [r7, #15]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	3301      	adds	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
 8004910:	7bfa      	ldrb	r2, [r7, #15]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	429a      	cmp	r2, r3
 8004918:	d3b5      	bcc.n	8004886 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	687e      	ldr	r6, [r7, #4]
 8004922:	466d      	mov	r5, sp
 8004924:	f106 0410 	add.w	r4, r6, #16
 8004928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800492a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800492c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800492e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004930:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004934:	e885 0003 	stmia.w	r5, {r0, r1}
 8004938:	1d33      	adds	r3, r6, #4
 800493a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800493c:	6838      	ldr	r0, [r7, #0]
 800493e:	f003 fed7 	bl	80086f0 <USB_DevInit>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e00d      	b.n	8004970 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f004 ff1f 	bl	80097ac <USB_DevDisconnect>

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004978 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_PCD_Start+0x1c>
 8004990:	2302      	movs	r3, #2
 8004992:	e020      	b.n	80049d6 <HAL_PCD_Start+0x5e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d109      	bne.n	80049b8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d005      	beq.n	80049b8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f003 fe4b 	bl	8008658 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f004 fecf 	bl	800976a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80049de:	b590      	push	{r4, r7, lr}
 80049e0:	b08d      	sub	sp, #52	; 0x34
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f004 ff8d 	bl	8009914 <USB_GetMode>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 839d 	bne.w	800513c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f004 fef1 	bl	80097ee <USB_ReadInterrupts>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 8393 	beq.w	800513a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f004 fee8 	bl	80097ee <USB_ReadInterrupts>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d107      	bne.n	8004a38 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f002 0202 	and.w	r2, r2, #2
 8004a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f004 fed6 	bl	80097ee <USB_ReadInterrupts>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d161      	bne.n	8004b10 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0210 	bic.w	r2, r2, #16
 8004a5a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f003 020f 	and.w	r2, r3, #15
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	3304      	adds	r3, #4
 8004a7a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	0c5b      	lsrs	r3, r3, #17
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d124      	bne.n	8004ad2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d035      	beq.n	8004b00 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	6a38      	ldr	r0, [r7, #32]
 8004aa8:	f004 fd3c 	bl	8009524 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ab8:	441a      	add	r2, r3
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aca:	441a      	add	r2, r3
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	619a      	str	r2, [r3, #24]
 8004ad0:	e016      	b.n	8004b00 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	0c5b      	lsrs	r3, r3, #17
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	2b06      	cmp	r3, #6
 8004adc:	d110      	bne.n	8004b00 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6a38      	ldr	r0, [r7, #32]
 8004aea:	f004 fd1b 	bl	8009524 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004afa:	441a      	add	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0210 	orr.w	r2, r2, #16
 8004b0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f004 fe6a 	bl	80097ee <USB_ReadInterrupts>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b24:	d16e      	bne.n	8004c04 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f004 fe70 	bl	8009814 <USB_ReadDevAllOutEpInterrupt>
 8004b34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004b36:	e062      	b.n	8004bfe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d057      	beq.n	8004bf2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f004 fe95 	bl	800987c <USB_ReadDevOutEPInterrupt>
 8004b52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fdb0 	bl	80056d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2308      	movs	r3, #8
 8004b92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 feaa 	bl	80058f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	461a      	mov	r2, r3
 8004bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bf0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d199      	bne.n	8004b38 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f004 fdf0 	bl	80097ee <USB_ReadInterrupts>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c18:	f040 80c0 	bne.w	8004d9c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f004 fe11 	bl	8009848 <USB_ReadDevAllInEpInterrupt>
 8004c26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004c2c:	e0b2      	b.n	8004d94 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80a7 	beq.w	8004d88 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f004 fe37 	bl	80098b8 <USB_ReadDevInEPInterrupt>
 8004c4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d057      	beq.n	8004d06 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	43db      	mvns	r3, r3
 8004c70:	69f9      	ldr	r1, [r7, #28]
 8004c72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c76:	4013      	ands	r3, r2
 8004c78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	461a      	mov	r2, r3
 8004c88:	2301      	movs	r3, #1
 8004c8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d132      	bne.n	8004cfa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3348      	adds	r3, #72	; 0x48
 8004ca4:	6819      	ldr	r1, [r3, #0]
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004caa:	4613      	mov	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4403      	add	r3, r0
 8004cb4:	3344      	adds	r3, #68	; 0x44
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4419      	add	r1, r3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4403      	add	r3, r0
 8004cc8:	3348      	adds	r3, #72	; 0x48
 8004cca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d113      	bne.n	8004cfa <HAL_PCD_IRQHandler+0x31c>
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3350      	adds	r3, #80	; 0x50
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d108      	bne.n	8004cfa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	f004 fe3f 	bl	8009978 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f009 fb14 	bl	800e32e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2308      	movs	r3, #8
 8004d20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2310      	movs	r3, #16
 8004d3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	461a      	mov	r2, r3
 8004d56:	2340      	movs	r3, #64	; 0x40
 8004d58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	461a      	mov	r2, r3
 8004d72:	2302      	movs	r3, #2
 8004d74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fc1b 	bl	80055be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f47f af49 	bne.w	8004c2e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f004 fd24 	bl	80097ee <USB_ReadInterrupts>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004db0:	d122      	bne.n	8004df8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d108      	bne.n	8004de2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004dd8:	2100      	movs	r1, #0
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fe26 	bl	8005a2c <HAL_PCDEx_LPM_Callback>
 8004de0:	e002      	b.n	8004de8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f009 fb10 	bl	800e408 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f004 fcf6 	bl	80097ee <USB_ReadInterrupts>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0c:	d112      	bne.n	8004e34 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d102      	bne.n	8004e24 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f009 facc 	bl	800e3bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004e32:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f004 fcd8 	bl	80097ee <USB_ReadInterrupts>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e48:	f040 80c7 	bne.w	8004fda <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2110      	movs	r1, #16
 8004e66:	4618      	mov	r0, r3
 8004e68:	f003 fda6 	bl	80089b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e70:	e056      	b.n	8004f20 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ea4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ec4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ed8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ef8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d3a3      	bcc.n	8004e72 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f38:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004f3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d016      	beq.n	8004f74 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f56:	f043 030b 	orr.w	r3, r3, #11
 8004f5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f6c:	f043 030b 	orr.w	r3, r3, #11
 8004f70:	6453      	str	r3, [r2, #68]	; 0x44
 8004f72:	e015      	b.n	8004fa0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f86:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004f8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f9a:	f043 030b 	orr.w	r3, r3, #11
 8004f9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004fb2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f004 fcd7 	bl	8009978 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695a      	ldr	r2, [r3, #20]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f004 fc05 	bl	80097ee <USB_ReadInterrupts>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fee:	d124      	bne.n	800503a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f004 fc9b 	bl	8009930 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f003 fd3b 	bl	8008a7a <USB_GetDevSpeed>
 8005004:	4603      	mov	r3, r0
 8005006:	461a      	mov	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681c      	ldr	r4, [r3, #0]
 8005010:	f001 f92c 	bl	800626c <HAL_RCC_GetHCLKFreq>
 8005014:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	4620      	mov	r0, r4
 8005020:	f003 fa78 	bl	8008514 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f009 f9aa 	bl	800e37e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005038:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f004 fbd5 	bl	80097ee <USB_ReadInterrupts>
 8005044:	4603      	mov	r3, r0
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b08      	cmp	r3, #8
 800504c:	d10a      	bne.n	8005064 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f009 f987 	bl	800e362 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f002 0208 	and.w	r2, r2, #8
 8005062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f004 fbc0 	bl	80097ee <USB_ReadInterrupts>
 800506e:	4603      	mov	r3, r0
 8005070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005078:	d10f      	bne.n	800509a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	b2db      	uxtb	r3, r3
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f009 f9df 	bl	800e448 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f004 fba5 	bl	80097ee <USB_ReadInterrupts>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ae:	d10f      	bne.n	80050d0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f009 f9b2 	bl	800e424 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80050ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f004 fb8a 	bl	80097ee <USB_ReadInterrupts>
 80050da:	4603      	mov	r3, r0
 80050dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e4:	d10a      	bne.n	80050fc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f009 f9c0 	bl	800e46c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f004 fb74 	bl	80097ee <USB_ReadInterrupts>
 8005106:	4603      	mov	r3, r0
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b04      	cmp	r3, #4
 800510e:	d115      	bne.n	800513c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f009 f9b0 	bl	800e488 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6859      	ldr	r1, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
 8005138:	e000      	b.n	800513c <HAL_PCD_IRQHandler+0x75e>
      return;
 800513a:	bf00      	nop
    }
  }
}
 800513c:	3734      	adds	r7, #52	; 0x34
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}

08005142 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_PCD_SetAddress+0x1a>
 8005158:	2302      	movs	r3, #2
 800515a:	e013      	b.n	8005184 <HAL_PCD_SetAddress+0x42>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	78fa      	ldrb	r2, [r7, #3]
 8005172:	4611      	mov	r1, r2
 8005174:	4618      	mov	r0, r3
 8005176:	f004 fad2 	bl	800971e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	4608      	mov	r0, r1
 8005196:	4611      	mov	r1, r2
 8005198:	461a      	mov	r2, r3
 800519a:	4603      	mov	r3, r0
 800519c:	70fb      	strb	r3, [r7, #3]
 800519e:	460b      	mov	r3, r1
 80051a0:	803b      	strh	r3, [r7, #0]
 80051a2:	4613      	mov	r3, r2
 80051a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	da0f      	bge.n	80051d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	f003 020f 	and.w	r2, r3, #15
 80051b8:	4613      	mov	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	3338      	adds	r3, #56	; 0x38
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	3304      	adds	r3, #4
 80051c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	705a      	strb	r2, [r3, #1]
 80051d0:	e00f      	b.n	80051f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	4413      	add	r3, r2
 80051e8:	3304      	adds	r3, #4
 80051ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051fe:	883a      	ldrh	r2, [r7, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	78ba      	ldrb	r2, [r7, #2]
 8005208:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800521c:	78bb      	ldrb	r3, [r7, #2]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d102      	bne.n	8005228 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_PCD_EP_Open+0xaa>
 8005232:	2302      	movs	r3, #2
 8005234:	e00e      	b.n	8005254 <HAL_PCD_EP_Open+0xc8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	4618      	mov	r0, r3
 8005246:	f003 fc3d 	bl	8008ac4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005252:	7afb      	ldrb	r3, [r7, #11]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800526c:	2b00      	cmp	r3, #0
 800526e:	da0f      	bge.n	8005290 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	f003 020f 	and.w	r2, r3, #15
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	3338      	adds	r3, #56	; 0x38
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4413      	add	r3, r2
 8005284:	3304      	adds	r3, #4
 8005286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	705a      	strb	r2, [r3, #1]
 800528e:	e00f      	b.n	80052b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	4613      	mov	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	3304      	adds	r3, #4
 80052a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_PCD_EP_Close+0x6e>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e00e      	b.n	80052e8 <HAL_PCD_EP_Close+0x8c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	4618      	mov	r0, r3
 80052da:	f003 fc7b 	bl	8008bd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	460b      	mov	r3, r1
 80052fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005300:	7afb      	ldrb	r3, [r7, #11]
 8005302:	f003 020f 	and.w	r2, r3, #15
 8005306:	4613      	mov	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	1a9b      	subs	r3, r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	3304      	adds	r3, #4
 8005318:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2200      	movs	r2, #0
 800532a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2200      	movs	r2, #0
 8005330:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005332:	7afb      	ldrb	r3, [r7, #11]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	b2da      	uxtb	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d102      	bne.n	800534c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800534c:	7afb      	ldrb	r3, [r7, #11]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	6979      	ldr	r1, [r7, #20]
 8005364:	f003 ff56 	bl	8009214 <USB_EP0StartXfer>
 8005368:	e008      	b.n	800537c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	f003 fd08 	bl	8008d8c <USB_EPStartXfer>
  }

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	f003 020f 	and.w	r2, r3, #15
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80053a8:	681b      	ldr	r3, [r3, #0]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	460b      	mov	r3, r1
 80053c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053c6:	7afb      	ldrb	r3, [r7, #11]
 80053c8:	f003 020f 	and.w	r2, r3, #15
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	3338      	adds	r3, #56	; 0x38
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	3304      	adds	r3, #4
 80053dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2200      	movs	r2, #0
 80053ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2201      	movs	r2, #1
 80053f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053f6:	7afb      	ldrb	r3, [r7, #11]
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d102      	bne.n	8005410 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	461a      	mov	r2, r3
 8005426:	6979      	ldr	r1, [r7, #20]
 8005428:	f003 fef4 	bl	8009214 <USB_EP0StartXfer>
 800542c:	e008      	b.n	8005440 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	f003 fca6 	bl	8008d8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	f003 020f 	and.w	r2, r3, #15
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d901      	bls.n	8005468 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e050      	b.n	800550a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800546c:	2b00      	cmp	r3, #0
 800546e:	da0f      	bge.n	8005490 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	f003 020f 	and.w	r2, r3, #15
 8005476:	4613      	mov	r3, r2
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	3338      	adds	r3, #56	; 0x38
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4413      	add	r3, r2
 8005484:	3304      	adds	r3, #4
 8005486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	705a      	strb	r2, [r3, #1]
 800548e:	e00d      	b.n	80054ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005490:	78fa      	ldrb	r2, [r7, #3]
 8005492:	4613      	mov	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	3304      	adds	r3, #4
 80054a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_PCD_EP_SetStall+0x82>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e01e      	b.n	800550a <HAL_PCD_EP_SetStall+0xc0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	4618      	mov	r0, r3
 80054dc:	f004 f84b 	bl	8009576 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	b2d9      	uxtb	r1, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054fa:	461a      	mov	r2, r3
 80054fc:	f004 fa3c 	bl	8009978 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	f003 020f 	and.w	r2, r3, #15
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	d901      	bls.n	8005530 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e042      	b.n	80055b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005534:	2b00      	cmp	r3, #0
 8005536:	da0f      	bge.n	8005558 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	4613      	mov	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	3338      	adds	r3, #56	; 0x38
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4413      	add	r3, r2
 800554c:	3304      	adds	r3, #4
 800554e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	705a      	strb	r2, [r3, #1]
 8005556:	e00f      	b.n	8005578 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	f003 020f 	and.w	r2, r3, #15
 800555e:	4613      	mov	r3, r2
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	3304      	adds	r3, #4
 8005570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_PCD_EP_ClrStall+0x86>
 8005594:	2302      	movs	r3, #2
 8005596:	e00e      	b.n	80055b6 <HAL_PCD_EP_ClrStall+0xa4>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68f9      	ldr	r1, [r7, #12]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f004 f853 	bl	8009652 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b08a      	sub	sp, #40	; 0x28
 80055c2:	af02      	add	r7, sp, #8
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	3338      	adds	r3, #56	; 0x38
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4413      	add	r3, r2
 80055e2:	3304      	adds	r3, #4
 80055e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d901      	bls.n	80055f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e06c      	b.n	80056d0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	429a      	cmp	r2, r3
 800560a:	d902      	bls.n	8005612 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3303      	adds	r3, #3
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800561a:	e02b      	b.n	8005674 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	429a      	cmp	r2, r3
 8005630:	d902      	bls.n	8005638 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	3303      	adds	r3, #3
 800563c:	089b      	lsrs	r3, r3, #2
 800563e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	68d9      	ldr	r1, [r3, #12]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	b2da      	uxtb	r2, r3
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005650:	b2db      	uxtb	r3, r3
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	4603      	mov	r3, r0
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	f003 ff2f 	bl	80094ba <USB_WritePacket>

    ep->xfer_buff  += len;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	441a      	add	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	441a      	add	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	b29b      	uxth	r3, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	429a      	cmp	r2, r3
 8005688:	d809      	bhi.n	800569e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005692:	429a      	cmp	r2, r3
 8005694:	d203      	bcs.n	800569e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1be      	bne.n	800561c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d811      	bhi.n	80056ce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	2201      	movs	r2, #1
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	6939      	ldr	r1, [r7, #16]
 80056c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ca:	4013      	ands	r3, r2
 80056cc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	333c      	adds	r3, #60	; 0x3c
 80056f0:	3304      	adds	r3, #4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b01      	cmp	r3, #1
 800570c:	f040 80a0 	bne.w	8005850 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d015      	beq.n	8005746 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4a72      	ldr	r2, [pc, #456]	; (80058e8 <PCD_EP_OutXfrComplete_int+0x210>)
 800571e:	4293      	cmp	r3, r2
 8005720:	f240 80dd 	bls.w	80058de <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80d7 	beq.w	80058de <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	461a      	mov	r2, r3
 800573e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005742:	6093      	str	r3, [r2, #8]
 8005744:	e0cb      	b.n	80058de <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d009      	beq.n	8005764 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575c:	461a      	mov	r2, r3
 800575e:	2320      	movs	r3, #32
 8005760:	6093      	str	r3, [r2, #8]
 8005762:	e0bc      	b.n	80058de <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	f040 80b7 	bne.w	80058de <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a5d      	ldr	r2, [pc, #372]	; (80058e8 <PCD_EP_OutXfrComplete_int+0x210>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d90f      	bls.n	8005798 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	461a      	mov	r2, r3
 8005790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005794:	6093      	str	r3, [r2, #8]
 8005796:	e0a2      	b.n	80058de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80057aa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	0159      	lsls	r1, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	440b      	add	r3, r1
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80057be:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	4613      	mov	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4403      	add	r3, r0
 80057ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80057d2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	4613      	mov	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80057e6:	6819      	ldr	r1, [r3, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	4613      	mov	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	1a9b      	subs	r3, r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4403      	add	r3, r0
 80057f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4419      	add	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	4613      	mov	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4403      	add	r3, r0
 800580c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005810:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d114      	bne.n	8005842 <PCD_EP_OutXfrComplete_int+0x16a>
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d108      	bne.n	8005842 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800583a:	461a      	mov	r2, r3
 800583c:	2101      	movs	r1, #1
 800583e:	f004 f89b 	bl	8009978 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	4619      	mov	r1, r3
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f008 fd55 	bl	800e2f8 <HAL_PCD_DataOutStageCallback>
 800584e:	e046      	b.n	80058de <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a26      	ldr	r2, [pc, #152]	; (80058ec <PCD_EP_OutXfrComplete_int+0x214>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d124      	bne.n	80058a2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	461a      	mov	r2, r3
 8005870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005874:	6093      	str	r3, [r2, #8]
 8005876:	e032      	b.n	80058de <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588e:	461a      	mov	r2, r3
 8005890:	2320      	movs	r3, #32
 8005892:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f008 fd2c 	bl	800e2f8 <HAL_PCD_DataOutStageCallback>
 80058a0:	e01d      	b.n	80058de <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d114      	bne.n	80058d2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	1a9b      	subs	r3, r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d108      	bne.n	80058d2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058ca:	461a      	mov	r2, r3
 80058cc:	2100      	movs	r1, #0
 80058ce:	f004 f853 	bl	8009978 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f008 fd0d 	bl	800e2f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	4f54300a 	.word	0x4f54300a
 80058ec:	4f54310a 	.word	0x4f54310a

080058f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	333c      	adds	r3, #60	; 0x3c
 8005908:	3304      	adds	r3, #4
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a15      	ldr	r2, [pc, #84]	; (8005978 <PCD_EP_OutSetupPacket_int+0x88>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d90e      	bls.n	8005944 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800592c:	2b00      	cmp	r3, #0
 800592e:	d009      	beq.n	8005944 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	461a      	mov	r2, r3
 800593e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005942:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f008 fcc5 	bl	800e2d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a0a      	ldr	r2, [pc, #40]	; (8005978 <PCD_EP_OutSetupPacket_int+0x88>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d90c      	bls.n	800596c <PCD_EP_OutSetupPacket_int+0x7c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d108      	bne.n	800596c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005964:	461a      	mov	r2, r3
 8005966:	2101      	movs	r1, #1
 8005968:	f004 f806 	bl	8009978 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	4f54300a 	.word	0x4f54300a

0800597c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
 8005988:	4613      	mov	r3, r2
 800598a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d107      	bne.n	80059aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800599a:	883b      	ldrh	r3, [r7, #0]
 800599c:	0419      	lsls	r1, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28
 80059a8:	e028      	b.n	80059fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	4413      	add	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]
 80059bc:	e00d      	b.n	80059da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	3340      	adds	r3, #64	; 0x40
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	0c1b      	lsrs	r3, r3, #16
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4413      	add	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	3301      	adds	r3, #1
 80059d8:	73fb      	strb	r3, [r7, #15]
 80059da:	7bfa      	ldrb	r2, [r7, #15]
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	3b01      	subs	r3, #1
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d3ec      	bcc.n	80059be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059e4:	883b      	ldrh	r3, [r7, #0]
 80059e6:	0418      	lsls	r0, r3, #16
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6819      	ldr	r1, [r3, #0]
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	4302      	orrs	r2, r0
 80059f4:	3340      	adds	r3, #64	; 0x40
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	460b      	mov	r3, r1
 8005a14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	887a      	ldrh	r2, [r7, #2]
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e264      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d075      	beq.n	8005b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a62:	4ba3      	ldr	r3, [pc, #652]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 030c 	and.w	r3, r3, #12
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d00c      	beq.n	8005a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a6e:	4ba0      	ldr	r3, [pc, #640]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d112      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a7a:	4b9d      	ldr	r3, [pc, #628]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a86:	d10b      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a88:	4b99      	ldr	r3, [pc, #612]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d05b      	beq.n	8005b4c <HAL_RCC_OscConfig+0x108>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d157      	bne.n	8005b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e23f      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa8:	d106      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x74>
 8005aaa:	4b91      	ldr	r3, [pc, #580]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a90      	ldr	r2, [pc, #576]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e01d      	b.n	8005af4 <HAL_RCC_OscConfig+0xb0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ac0:	d10c      	bne.n	8005adc <HAL_RCC_OscConfig+0x98>
 8005ac2:	4b8b      	ldr	r3, [pc, #556]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a8a      	ldr	r2, [pc, #552]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	4b88      	ldr	r3, [pc, #544]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a87      	ldr	r2, [pc, #540]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e00b      	b.n	8005af4 <HAL_RCC_OscConfig+0xb0>
 8005adc:	4b84      	ldr	r3, [pc, #528]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a83      	ldr	r2, [pc, #524]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	4b81      	ldr	r3, [pc, #516]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a80      	ldr	r2, [pc, #512]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d013      	beq.n	8005b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fd f940 	bl	8002d80 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b04:	f7fd f93c 	bl	8002d80 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b64      	cmp	r3, #100	; 0x64
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e204      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b16:	4b76      	ldr	r3, [pc, #472]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0f0      	beq.n	8005b04 <HAL_RCC_OscConfig+0xc0>
 8005b22:	e014      	b.n	8005b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b24:	f7fd f92c 	bl	8002d80 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b2c:	f7fd f928 	bl	8002d80 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b64      	cmp	r3, #100	; 0x64
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e1f0      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3e:	4b6c      	ldr	r3, [pc, #432]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0xe8>
 8005b4a:	e000      	b.n	8005b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d063      	beq.n	8005c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b5a:	4b65      	ldr	r3, [pc, #404]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b66:	4b62      	ldr	r3, [pc, #392]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d11c      	bne.n	8005bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b72:	4b5f      	ldr	r3, [pc, #380]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d116      	bne.n	8005bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7e:	4b5c      	ldr	r3, [pc, #368]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <HAL_RCC_OscConfig+0x152>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d001      	beq.n	8005b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e1c4      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b96:	4b56      	ldr	r3, [pc, #344]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4952      	ldr	r1, [pc, #328]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005baa:	e03a      	b.n	8005c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d020      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bb4:	4b4f      	ldr	r3, [pc, #316]	; (8005cf4 <HAL_RCC_OscConfig+0x2b0>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bba:	f7fd f8e1 	bl	8002d80 <HAL_GetTick>
 8005bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc0:	e008      	b.n	8005bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc2:	f7fd f8dd 	bl	8002d80 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e1a5      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd4:	4b46      	ldr	r3, [pc, #280]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0f0      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be0:	4b43      	ldr	r3, [pc, #268]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4940      	ldr	r1, [pc, #256]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]
 8005bf4:	e015      	b.n	8005c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bf6:	4b3f      	ldr	r3, [pc, #252]	; (8005cf4 <HAL_RCC_OscConfig+0x2b0>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fd f8c0 	bl	8002d80 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c04:	f7fd f8bc 	bl	8002d80 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e184      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c16:	4b36      	ldr	r3, [pc, #216]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f0      	bne.n	8005c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d030      	beq.n	8005c90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d016      	beq.n	8005c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c36:	4b30      	ldr	r3, [pc, #192]	; (8005cf8 <HAL_RCC_OscConfig+0x2b4>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3c:	f7fd f8a0 	bl	8002d80 <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c44:	f7fd f89c 	bl	8002d80 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e164      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c56:	4b26      	ldr	r3, [pc, #152]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0f0      	beq.n	8005c44 <HAL_RCC_OscConfig+0x200>
 8005c62:	e015      	b.n	8005c90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c64:	4b24      	ldr	r3, [pc, #144]	; (8005cf8 <HAL_RCC_OscConfig+0x2b4>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6a:	f7fd f889 	bl	8002d80 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c72:	f7fd f885 	bl	8002d80 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e14d      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c84:	4b1a      	ldr	r3, [pc, #104]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1f0      	bne.n	8005c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80a0 	beq.w	8005dde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ca2:	4b13      	ldr	r3, [pc, #76]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10f      	bne.n	8005cce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	4a0e      	ldr	r2, [pc, #56]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <HAL_RCC_OscConfig+0x2ac>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cce:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <HAL_RCC_OscConfig+0x2b8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d121      	bne.n	8005d1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cda:	4b08      	ldr	r3, [pc, #32]	; (8005cfc <HAL_RCC_OscConfig+0x2b8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a07      	ldr	r2, [pc, #28]	; (8005cfc <HAL_RCC_OscConfig+0x2b8>)
 8005ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ce6:	f7fd f84b 	bl	8002d80 <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cec:	e011      	b.n	8005d12 <HAL_RCC_OscConfig+0x2ce>
 8005cee:	bf00      	nop
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	42470000 	.word	0x42470000
 8005cf8:	42470e80 	.word	0x42470e80
 8005cfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d00:	f7fd f83e 	bl	8002d80 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e106      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d12:	4b85      	ldr	r3, [pc, #532]	; (8005f28 <HAL_RCC_OscConfig+0x4e4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d106      	bne.n	8005d34 <HAL_RCC_OscConfig+0x2f0>
 8005d26:	4b81      	ldr	r3, [pc, #516]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2a:	4a80      	ldr	r2, [pc, #512]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	6713      	str	r3, [r2, #112]	; 0x70
 8005d32:	e01c      	b.n	8005d6e <HAL_RCC_OscConfig+0x32a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d10c      	bne.n	8005d56 <HAL_RCC_OscConfig+0x312>
 8005d3c:	4b7b      	ldr	r3, [pc, #492]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d40:	4a7a      	ldr	r2, [pc, #488]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d42:	f043 0304 	orr.w	r3, r3, #4
 8005d46:	6713      	str	r3, [r2, #112]	; 0x70
 8005d48:	4b78      	ldr	r3, [pc, #480]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4c:	4a77      	ldr	r2, [pc, #476]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	6713      	str	r3, [r2, #112]	; 0x70
 8005d54:	e00b      	b.n	8005d6e <HAL_RCC_OscConfig+0x32a>
 8005d56:	4b75      	ldr	r3, [pc, #468]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	4a74      	ldr	r2, [pc, #464]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	6713      	str	r3, [r2, #112]	; 0x70
 8005d62:	4b72      	ldr	r3, [pc, #456]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d66:	4a71      	ldr	r2, [pc, #452]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d68:	f023 0304 	bic.w	r3, r3, #4
 8005d6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d015      	beq.n	8005da2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d76:	f7fd f803 	bl	8002d80 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d7e:	f7fc ffff 	bl	8002d80 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e0c5      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d94:	4b65      	ldr	r3, [pc, #404]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0ee      	beq.n	8005d7e <HAL_RCC_OscConfig+0x33a>
 8005da0:	e014      	b.n	8005dcc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da2:	f7fc ffed 	bl	8002d80 <HAL_GetTick>
 8005da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da8:	e00a      	b.n	8005dc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005daa:	f7fc ffe9 	bl	8002d80 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e0af      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc0:	4b5a      	ldr	r3, [pc, #360]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ee      	bne.n	8005daa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d105      	bne.n	8005dde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd2:	4b56      	ldr	r3, [pc, #344]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	4a55      	ldr	r2, [pc, #340]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 809b 	beq.w	8005f1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005de8:	4b50      	ldr	r3, [pc, #320]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 030c 	and.w	r3, r3, #12
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d05c      	beq.n	8005eae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d141      	bne.n	8005e80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfc:	4b4c      	ldr	r3, [pc, #304]	; (8005f30 <HAL_RCC_OscConfig+0x4ec>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e02:	f7fc ffbd 	bl	8002d80 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e0a:	f7fc ffb9 	bl	8002d80 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e081      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1c:	4b43      	ldr	r3, [pc, #268]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f0      	bne.n	8005e0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	019b      	lsls	r3, r3, #6
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	3b01      	subs	r3, #1
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	061b      	lsls	r3, r3, #24
 8005e4c:	4937      	ldr	r1, [pc, #220]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e52:	4b37      	ldr	r3, [pc, #220]	; (8005f30 <HAL_RCC_OscConfig+0x4ec>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fc ff92 	bl	8002d80 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fc ff8e 	bl	8002d80 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e056      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e72:	4b2e      	ldr	r3, [pc, #184]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x41c>
 8005e7e:	e04e      	b.n	8005f1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e80:	4b2b      	ldr	r3, [pc, #172]	; (8005f30 <HAL_RCC_OscConfig+0x4ec>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e86:	f7fc ff7b 	bl	8002d80 <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e8e:	f7fc ff77 	bl	8002d80 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e03f      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea0:	4b22      	ldr	r3, [pc, #136]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f0      	bne.n	8005e8e <HAL_RCC_OscConfig+0x44a>
 8005eac:	e037      	b.n	8005f1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e032      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005eba:	4b1c      	ldr	r3, [pc, #112]	; (8005f2c <HAL_RCC_OscConfig+0x4e8>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d028      	beq.n	8005f1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d121      	bne.n	8005f1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d11a      	bne.n	8005f1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005eea:	4013      	ands	r3, r2
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ef0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d111      	bne.n	8005f1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	3b01      	subs	r3, #1
 8005f04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d107      	bne.n	8005f1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d001      	beq.n	8005f1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40007000 	.word	0x40007000
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	42470060 	.word	0x42470060

08005f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0cc      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f48:	4b68      	ldr	r3, [pc, #416]	; (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d90c      	bls.n	8005f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f56:	4b65      	ldr	r3, [pc, #404]	; (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5e:	4b63      	ldr	r3, [pc, #396]	; (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d001      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0b8      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d020      	beq.n	8005fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f88:	4b59      	ldr	r3, [pc, #356]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4a58      	ldr	r2, [pc, #352]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fa0:	4b53      	ldr	r3, [pc, #332]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	4a52      	ldr	r2, [pc, #328]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fac:	4b50      	ldr	r3, [pc, #320]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	494d      	ldr	r1, [pc, #308]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d044      	beq.n	8006054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d107      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd2:	4b47      	ldr	r3, [pc, #284]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d119      	bne.n	8006012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e07f      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d107      	bne.n	8006002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff2:	4b3f      	ldr	r3, [pc, #252]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e06f      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006002:	4b3b      	ldr	r3, [pc, #236]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e067      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006012:	4b37      	ldr	r3, [pc, #220]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f023 0203 	bic.w	r2, r3, #3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	4934      	ldr	r1, [pc, #208]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006020:	4313      	orrs	r3, r2
 8006022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006024:	f7fc feac 	bl	8002d80 <HAL_GetTick>
 8006028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602a:	e00a      	b.n	8006042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800602c:	f7fc fea8 	bl	8002d80 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	; 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e04f      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006042:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 020c 	and.w	r2, r3, #12
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	429a      	cmp	r2, r3
 8006052:	d1eb      	bne.n	800602c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006054:	4b25      	ldr	r3, [pc, #148]	; (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d20c      	bcs.n	800607c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006062:	4b22      	ldr	r3, [pc, #136]	; (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800606a:	4b20      	ldr	r3, [pc, #128]	; (80060ec <HAL_RCC_ClockConfig+0x1b8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d001      	beq.n	800607c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e032      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006088:	4b19      	ldr	r3, [pc, #100]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	4916      	ldr	r1, [pc, #88]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006096:	4313      	orrs	r3, r2
 8006098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060a6:	4b12      	ldr	r3, [pc, #72]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	490e      	ldr	r1, [pc, #56]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060ba:	f000 f821 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 80060be:	4602      	mov	r2, r0
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	490a      	ldr	r1, [pc, #40]	; (80060f4 <HAL_RCC_ClockConfig+0x1c0>)
 80060cc:	5ccb      	ldrb	r3, [r1, r3]
 80060ce:	fa22 f303 	lsr.w	r3, r2, r3
 80060d2:	4a09      	ldr	r2, [pc, #36]	; (80060f8 <HAL_RCC_ClockConfig+0x1c4>)
 80060d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <HAL_RCC_ClockConfig+0x1c8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fc fe0c 	bl	8002cf8 <HAL_InitTick>

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	40023c00 	.word	0x40023c00
 80060f0:	40023800 	.word	0x40023800
 80060f4:	08014138 	.word	0x08014138
 80060f8:	20000048 	.word	0x20000048
 80060fc:	2000004c 	.word	0x2000004c

08006100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006100:	b5b0      	push	{r4, r5, r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006106:	2100      	movs	r1, #0
 8006108:	6079      	str	r1, [r7, #4]
 800610a:	2100      	movs	r1, #0
 800610c:	60f9      	str	r1, [r7, #12]
 800610e:	2100      	movs	r1, #0
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006112:	2100      	movs	r1, #0
 8006114:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006116:	4952      	ldr	r1, [pc, #328]	; (8006260 <HAL_RCC_GetSysClockFreq+0x160>)
 8006118:	6889      	ldr	r1, [r1, #8]
 800611a:	f001 010c 	and.w	r1, r1, #12
 800611e:	2908      	cmp	r1, #8
 8006120:	d00d      	beq.n	800613e <HAL_RCC_GetSysClockFreq+0x3e>
 8006122:	2908      	cmp	r1, #8
 8006124:	f200 8094 	bhi.w	8006250 <HAL_RCC_GetSysClockFreq+0x150>
 8006128:	2900      	cmp	r1, #0
 800612a:	d002      	beq.n	8006132 <HAL_RCC_GetSysClockFreq+0x32>
 800612c:	2904      	cmp	r1, #4
 800612e:	d003      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0x38>
 8006130:	e08e      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006132:	4b4c      	ldr	r3, [pc, #304]	; (8006264 <HAL_RCC_GetSysClockFreq+0x164>)
 8006134:	60bb      	str	r3, [r7, #8]
       break;
 8006136:	e08e      	b.n	8006256 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006138:	4b4b      	ldr	r3, [pc, #300]	; (8006268 <HAL_RCC_GetSysClockFreq+0x168>)
 800613a:	60bb      	str	r3, [r7, #8]
      break;
 800613c:	e08b      	b.n	8006256 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800613e:	4948      	ldr	r1, [pc, #288]	; (8006260 <HAL_RCC_GetSysClockFreq+0x160>)
 8006140:	6849      	ldr	r1, [r1, #4]
 8006142:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006146:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006148:	4945      	ldr	r1, [pc, #276]	; (8006260 <HAL_RCC_GetSysClockFreq+0x160>)
 800614a:	6849      	ldr	r1, [r1, #4]
 800614c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006150:	2900      	cmp	r1, #0
 8006152:	d024      	beq.n	800619e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006154:	4942      	ldr	r1, [pc, #264]	; (8006260 <HAL_RCC_GetSysClockFreq+0x160>)
 8006156:	6849      	ldr	r1, [r1, #4]
 8006158:	0989      	lsrs	r1, r1, #6
 800615a:	4608      	mov	r0, r1
 800615c:	f04f 0100 	mov.w	r1, #0
 8006160:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006164:	f04f 0500 	mov.w	r5, #0
 8006168:	ea00 0204 	and.w	r2, r0, r4
 800616c:	ea01 0305 	and.w	r3, r1, r5
 8006170:	493d      	ldr	r1, [pc, #244]	; (8006268 <HAL_RCC_GetSysClockFreq+0x168>)
 8006172:	fb01 f003 	mul.w	r0, r1, r3
 8006176:	2100      	movs	r1, #0
 8006178:	fb01 f102 	mul.w	r1, r1, r2
 800617c:	1844      	adds	r4, r0, r1
 800617e:	493a      	ldr	r1, [pc, #232]	; (8006268 <HAL_RCC_GetSysClockFreq+0x168>)
 8006180:	fba2 0101 	umull	r0, r1, r2, r1
 8006184:	1863      	adds	r3, r4, r1
 8006186:	4619      	mov	r1, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	461a      	mov	r2, r3
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	f7fa fd7c 	bl	8000c8c <__aeabi_uldivmod>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4613      	mov	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e04a      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800619e:	4b30      	ldr	r3, [pc, #192]	; (8006260 <HAL_RCC_GetSysClockFreq+0x160>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	099b      	lsrs	r3, r3, #6
 80061a4:	461a      	mov	r2, r3
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061ae:	f04f 0100 	mov.w	r1, #0
 80061b2:	ea02 0400 	and.w	r4, r2, r0
 80061b6:	ea03 0501 	and.w	r5, r3, r1
 80061ba:	4620      	mov	r0, r4
 80061bc:	4629      	mov	r1, r5
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	014b      	lsls	r3, r1, #5
 80061c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061cc:	0142      	lsls	r2, r0, #5
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	1b00      	subs	r0, r0, r4
 80061d4:	eb61 0105 	sbc.w	r1, r1, r5
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	018b      	lsls	r3, r1, #6
 80061e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061e6:	0182      	lsls	r2, r0, #6
 80061e8:	1a12      	subs	r2, r2, r0
 80061ea:	eb63 0301 	sbc.w	r3, r3, r1
 80061ee:	f04f 0000 	mov.w	r0, #0
 80061f2:	f04f 0100 	mov.w	r1, #0
 80061f6:	00d9      	lsls	r1, r3, #3
 80061f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061fc:	00d0      	lsls	r0, r2, #3
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	1912      	adds	r2, r2, r4
 8006204:	eb45 0303 	adc.w	r3, r5, r3
 8006208:	f04f 0000 	mov.w	r0, #0
 800620c:	f04f 0100 	mov.w	r1, #0
 8006210:	0299      	lsls	r1, r3, #10
 8006212:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006216:	0290      	lsls	r0, r2, #10
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4610      	mov	r0, r2
 800621e:	4619      	mov	r1, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	461a      	mov	r2, r3
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	f7fa fd30 	bl	8000c8c <__aeabi_uldivmod>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4613      	mov	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <HAL_RCC_GetSysClockFreq+0x160>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	0c1b      	lsrs	r3, r3, #16
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	3301      	adds	r3, #1
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	fbb2 f3f3 	udiv	r3, r2, r3
 800624c:	60bb      	str	r3, [r7, #8]
      break;
 800624e:	e002      	b.n	8006256 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <HAL_RCC_GetSysClockFreq+0x164>)
 8006252:	60bb      	str	r3, [r7, #8]
      break;
 8006254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006256:	68bb      	ldr	r3, [r7, #8]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bdb0      	pop	{r4, r5, r7, pc}
 8006260:	40023800 	.word	0x40023800
 8006264:	00f42400 	.word	0x00f42400
 8006268:	017d7840 	.word	0x017d7840

0800626c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006270:	4b03      	ldr	r3, [pc, #12]	; (8006280 <HAL_RCC_GetHCLKFreq+0x14>)
 8006272:	681b      	ldr	r3, [r3, #0]
}
 8006274:	4618      	mov	r0, r3
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000048 	.word	0x20000048

08006284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006288:	f7ff fff0 	bl	800626c <HAL_RCC_GetHCLKFreq>
 800628c:	4602      	mov	r2, r0
 800628e:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	0a9b      	lsrs	r3, r3, #10
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	4903      	ldr	r1, [pc, #12]	; (80062a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800629a:	5ccb      	ldrb	r3, [r1, r3]
 800629c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40023800 	.word	0x40023800
 80062a8:	08014148 	.word	0x08014148

080062ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d105      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d038      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062d4:	4b68      	ldr	r3, [pc, #416]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062da:	f7fc fd51 	bl	8002d80 <HAL_GetTick>
 80062de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062e0:	e008      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062e2:	f7fc fd4d 	bl	8002d80 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e0bd      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062f4:	4b61      	ldr	r3, [pc, #388]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f0      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	019b      	lsls	r3, r3, #6
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	071b      	lsls	r3, r3, #28
 8006312:	495a      	ldr	r1, [pc, #360]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800631a:	4b57      	ldr	r3, [pc, #348]	; (8006478 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800631c:	2201      	movs	r2, #1
 800631e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006320:	f7fc fd2e 	bl	8002d80 <HAL_GetTick>
 8006324:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006326:	e008      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006328:	f7fc fd2a 	bl	8002d80 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e09a      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800633a:	4b50      	ldr	r3, [pc, #320]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 8083 	beq.w	800645a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	4b48      	ldr	r3, [pc, #288]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	4a47      	ldr	r2, [pc, #284]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800635e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006362:	6413      	str	r3, [r2, #64]	; 0x40
 8006364:	4b45      	ldr	r3, [pc, #276]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006370:	4b43      	ldr	r3, [pc, #268]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a42      	ldr	r2, [pc, #264]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800637a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800637c:	f7fc fd00 	bl	8002d80 <HAL_GetTick>
 8006380:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006384:	f7fc fcfc 	bl	8002d80 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e06c      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006396:	4b3a      	ldr	r3, [pc, #232]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0f0      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063a2:	4b36      	ldr	r3, [pc, #216]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063aa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d02f      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d028      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063c0:	4b2e      	ldr	r3, [pc, #184]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063ca:	4b2e      	ldr	r3, [pc, #184]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063d0:	4b2c      	ldr	r3, [pc, #176]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063d6:	4a29      	ldr	r2, [pc, #164]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063dc:	4b27      	ldr	r3, [pc, #156]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d114      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80063e8:	f7fc fcca 	bl	8002d80 <HAL_GetTick>
 80063ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ee:	e00a      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063f0:	f7fc fcc6 	bl	8002d80 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e034      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006406:	4b1d      	ldr	r3, [pc, #116]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0ee      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800641e:	d10d      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006420:	4b16      	ldr	r3, [pc, #88]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006434:	4911      	ldr	r1, [pc, #68]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006436:	4313      	orrs	r3, r2
 8006438:	608b      	str	r3, [r1, #8]
 800643a:	e005      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800643c:	4b0f      	ldr	r3, [pc, #60]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	4a0e      	ldr	r2, [pc, #56]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006442:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006446:	6093      	str	r3, [r2, #8]
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800644a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006454:	4909      	ldr	r1, [pc, #36]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006456:	4313      	orrs	r3, r2
 8006458:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	7d1a      	ldrb	r2, [r3, #20]
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800646c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	42470068 	.word	0x42470068
 800647c:	40023800 	.word	0x40023800
 8006480:	40007000 	.word	0x40007000
 8006484:	42470e40 	.word	0x42470e40
 8006488:	424711e0 	.word	0x424711e0

0800648c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e083      	b.n	80065a6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	7f5b      	ldrb	r3, [r3, #29]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d105      	bne.n	80064b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fc f97e 	bl	80027b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	22ca      	movs	r2, #202	; 0xca
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2253      	movs	r2, #83	; 0x53
 80064c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f897 	bl	80065fe <RTC_EnterInitMode>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	22ff      	movs	r2, #255	; 0xff
 80064dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2204      	movs	r2, #4
 80064e2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e05e      	b.n	80065a6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6899      	ldr	r1, [r3, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	68d2      	ldr	r2, [r2, #12]
 8006522:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6919      	ldr	r1, [r3, #16]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	041a      	lsls	r2, r3, #16
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006546:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10e      	bne.n	8006574 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f829 	bl	80065ae <HAL_RTC_WaitForSynchro>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d008      	beq.n	8006574 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	22ff      	movs	r2, #255	; 0xff
 8006568:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2204      	movs	r2, #4
 800656e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e018      	b.n	80065a6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006582:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	22ff      	movs	r2, #255	; 0xff
 800659c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80065a4:	2300      	movs	r3, #0
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065ca:	f7fc fbd9 	bl	8002d80 <HAL_GetTick>
 80065ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80065d0:	e009      	b.n	80065e6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80065d2:	f7fc fbd5 	bl	8002d80 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065e0:	d901      	bls.n	80065e6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e007      	b.n	80065f6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0ee      	beq.n	80065d2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d119      	bne.n	800664c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f04f 32ff 	mov.w	r2, #4294967295
 8006620:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006622:	f7fc fbad 	bl	8002d80 <HAL_GetTick>
 8006626:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006628:	e009      	b.n	800663e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800662a:	f7fc fba9 	bl	8002d80 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006638:	d901      	bls.n	800663e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e007      	b.n	800664e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0ee      	beq.n	800662a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e022      	b.n	80066ae <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fc f8ae 	bl	80027dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2203      	movs	r2, #3
 8006684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f815 	bl	80066b8 <HAL_SD_InitCard>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e00a      	b.n	80066ae <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80066b8:	b5b0      	push	{r4, r5, r7, lr}
 80066ba:	b08e      	sub	sp, #56	; 0x38
 80066bc:	af04      	add	r7, sp, #16
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80066d4:	2376      	movs	r3, #118	; 0x76
 80066d6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681d      	ldr	r5, [r3, #0]
 80066dc:	466c      	mov	r4, sp
 80066de:	f107 0314 	add.w	r3, r7, #20
 80066e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066ea:	f107 0308 	add.w	r3, r7, #8
 80066ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066f0:	4628      	mov	r0, r5
 80066f2:	f001 f938 	bl	8007966 <SDIO_Init>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80066fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e04c      	b.n	80067a2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006708:	4b28      	ldr	r3, [pc, #160]	; (80067ac <HAL_SD_InitCard+0xf4>)
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f001 f970 	bl	80079f8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006718:	4b24      	ldr	r3, [pc, #144]	; (80067ac <HAL_SD_InitCard+0xf4>)
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 ff02 	bl	8007528 <SD_PowerON>
 8006724:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e02e      	b.n	80067a2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fe23 	bl	8007390 <SD_InitCard>
 800674a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00b      	beq.n	800676a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e01b      	b.n	80067a2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006772:	4618      	mov	r0, r3
 8006774:	f001 f9d3 	bl	8007b1e <SDMMC_CmdBlockLength>
 8006778:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00f      	beq.n	80067a0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <HAL_SD_InitCard+0xf8>)
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3728      	adds	r7, #40	; 0x28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bdb0      	pop	{r4, r5, r7, pc}
 80067aa:	bf00      	nop
 80067ac:	422580a0 	.word	0x422580a0
 80067b0:	004005ff 	.word	0x004005ff

080067b4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b092      	sub	sp, #72	; 0x48
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80067c2:	f7fc fadd 	bl	8002d80 <HAL_GetTick>
 80067c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d107      	bne.n	80067e6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e1bd      	b.n	8006b62 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	f040 81b0 	bne.w	8006b54 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	441a      	add	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006804:	429a      	cmp	r2, r3
 8006806:	d907      	bls.n	8006818 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e1a4      	b.n	8006b62 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2203      	movs	r2, #3
 800681c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2200      	movs	r2, #0
 8006826:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682c:	2b01      	cmp	r3, #1
 800682e:	d002      	beq.n	8006836 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	025b      	lsls	r3, r3, #9
 8006834:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006836:	f04f 33ff 	mov.w	r3, #4294967295
 800683a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	025b      	lsls	r3, r3, #9
 8006840:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006842:	2390      	movs	r3, #144	; 0x90
 8006844:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006846:	2302      	movs	r3, #2
 8006848:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800684a:	2300      	movs	r3, #0
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800684e:	2301      	movs	r3, #1
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f107 0214 	add.w	r2, r7, #20
 800685a:	4611      	mov	r1, r2
 800685c:	4618      	mov	r0, r3
 800685e:	f001 f932 	bl	8007ac6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d90a      	bls.n	800687e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2202      	movs	r2, #2
 800686c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006874:	4618      	mov	r0, r3
 8006876:	f001 f996 	bl	8007ba6 <SDMMC_CmdReadMultiBlock>
 800687a:	6478      	str	r0, [r7, #68]	; 0x44
 800687c:	e009      	b.n	8006892 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800688a:	4618      	mov	r0, r3
 800688c:	f001 f969 	bl	8007b62 <SDMMC_CmdReadSingleBlock>
 8006890:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006894:	2b00      	cmp	r3, #0
 8006896:	d012      	beq.n	80068be <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a7a      	ldr	r2, [pc, #488]	; (8006a88 <HAL_SD_ReadBlocks+0x2d4>)
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a6:	431a      	orrs	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e151      	b.n	8006b62 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80068c2:	e061      	b.n	8006988 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d03c      	beq.n	800694c <HAL_SD_ReadBlocks+0x198>
 80068d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d039      	beq.n	800694c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80068d8:	2300      	movs	r3, #0
 80068da:	643b      	str	r3, [r7, #64]	; 0x40
 80068dc:	e033      	b.n	8006946 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 f86a 	bl	80079bc <SDIO_ReadFIFO>
 80068e8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	3301      	adds	r3, #1
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80068f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fa:	3b01      	subs	r3, #1
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	0a1b      	lsrs	r3, r3, #8
 8006902:	b2da      	uxtb	r2, r3
 8006904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006906:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	3301      	adds	r3, #1
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800690e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006910:	3b01      	subs	r3, #1
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	b2da      	uxtb	r2, r3
 800691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800691e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006920:	3301      	adds	r3, #1
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006926:	3b01      	subs	r3, #1
 8006928:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	0e1b      	lsrs	r3, r3, #24
 800692e:	b2da      	uxtb	r2, r3
 8006930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006932:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006936:	3301      	adds	r3, #1
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800693a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693c:	3b01      	subs	r3, #1
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006942:	3301      	adds	r3, #1
 8006944:	643b      	str	r3, [r7, #64]	; 0x40
 8006946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006948:	2b07      	cmp	r3, #7
 800694a:	d9c8      	bls.n	80068de <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800694c:	f7fc fa18 	bl	8002d80 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006958:	429a      	cmp	r2, r3
 800695a:	d902      	bls.n	8006962 <HAL_SD_ReadBlocks+0x1ae>
 800695c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695e:	2b00      	cmp	r3, #0
 8006960:	d112      	bne.n	8006988 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a48      	ldr	r2, [pc, #288]	; (8006a88 <HAL_SD_ReadBlocks+0x2d4>)
 8006968:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e0ec      	b.n	8006b62 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800698e:	f240 332a 	movw	r3, #810	; 0x32a
 8006992:	4013      	ands	r3, r2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d095      	beq.n	80068c4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d022      	beq.n	80069ec <HAL_SD_ReadBlocks+0x238>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d91f      	bls.n	80069ec <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d01b      	beq.n	80069ec <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 f95b 	bl	8007c74 <SDMMC_CmdStopTransfer>
 80069be:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80069c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d012      	beq.n	80069ec <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a2f      	ldr	r2, [pc, #188]	; (8006a88 <HAL_SD_ReadBlocks+0x2d4>)
 80069cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d4:	431a      	orrs	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0ba      	b.n	8006b62 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d012      	beq.n	8006a20 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a22      	ldr	r2, [pc, #136]	; (8006a88 <HAL_SD_ReadBlocks+0x2d4>)
 8006a00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	f043 0208 	orr.w	r2, r3, #8
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0a0      	b.n	8006b62 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d012      	beq.n	8006a54 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a15      	ldr	r2, [pc, #84]	; (8006a88 <HAL_SD_ReadBlocks+0x2d4>)
 8006a34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	f043 0202 	orr.w	r2, r3, #2
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e086      	b.n	8006b62 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d063      	beq.n	8006b2a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <HAL_SD_ReadBlocks+0x2d4>)
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	f043 0220 	orr.w	r2, r3, #32
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e06c      	b.n	8006b62 <HAL_SD_ReadBlocks+0x3ae>
 8006a88:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 ff93 	bl	80079bc <SDIO_ReadFIFO>
 8006a96:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	0a1b      	lsrs	r3, r3, #8
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab8:	3301      	adds	r3, #1
 8006aba:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	0c1b      	lsrs	r3, r3, #16
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ace:	3301      	adds	r3, #1
 8006ad0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	0e1b      	lsrs	r3, r3, #24
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aea:	3b01      	subs	r3, #1
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006aee:	f7fc f947 	bl	8002d80 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d902      	bls.n	8006b04 <HAL_SD_ReadBlocks+0x350>
 8006afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d112      	bne.n	8006b2a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a18      	ldr	r2, [pc, #96]	; (8006b6c <HAL_SD_ReadBlocks+0x3b8>)
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e01b      	b.n	8006b62 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <HAL_SD_ReadBlocks+0x38a>
 8006b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1a6      	bne.n	8006a8c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b46:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e006      	b.n	8006b62 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
  }
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3748      	adds	r7, #72	; 0x48
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	004005ff 	.word	0x004005ff

08006b70 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b092      	sub	sp, #72	; 0x48
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b7e:	f7fc f8ff 	bl	8002d80 <HAL_GetTick>
 8006b82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d107      	bne.n	8006ba2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e166      	b.n	8006e70 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	f040 8159 	bne.w	8006e62 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	441a      	add	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d907      	bls.n	8006bd4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e14d      	b.n	8006e70 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2200      	movs	r2, #0
 8006be2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d002      	beq.n	8006bf2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	025b      	lsls	r3, r3, #9
 8006bf0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	025b      	lsls	r3, r3, #9
 8006bfc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006bfe:	2390      	movs	r3, #144	; 0x90
 8006c00:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f107 0218 	add.w	r2, r7, #24
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 ff54 	bl	8007ac6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d90a      	bls.n	8006c3a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fffc 	bl	8007c2e <SDMMC_CmdWriteMultiBlock>
 8006c36:	6478      	str	r0, [r7, #68]	; 0x44
 8006c38:	e009      	b.n	8006c4e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 ffcf 	bl	8007bea <SDMMC_CmdWriteSingleBlock>
 8006c4c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d012      	beq.n	8006c7a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a87      	ldr	r2, [pc, #540]	; (8006e78 <HAL_SD_WriteBlocks+0x308>)
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c62:	431a      	orrs	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e0fa      	b.n	8006e70 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006c7e:	e065      	b.n	8006d4c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d040      	beq.n	8006d10 <HAL_SD_WriteBlocks+0x1a0>
 8006c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d03d      	beq.n	8006d10 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006c94:	2300      	movs	r3, #0
 8006c96:	643b      	str	r3, [r7, #64]	; 0x40
 8006c98:	e037      	b.n	8006d0a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	021a      	lsls	r2, r3, #8
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cba:	3301      	adds	r3, #1
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	041a      	lsls	r2, r3, #16
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	061a      	lsls	r2, r3, #24
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	3301      	adds	r3, #1
 8006cec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f107 0214 	add.w	r2, r7, #20
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fe69 	bl	80079d6 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d06:	3301      	adds	r3, #1
 8006d08:	643b      	str	r3, [r7, #64]	; 0x40
 8006d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0c:	2b07      	cmp	r3, #7
 8006d0e:	d9c4      	bls.n	8006c9a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006d10:	f7fc f836 	bl	8002d80 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d902      	bls.n	8006d26 <HAL_SD_WriteBlocks+0x1b6>
 8006d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d112      	bne.n	8006d4c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a53      	ldr	r2, [pc, #332]	; (8006e78 <HAL_SD_WriteBlocks+0x308>)
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d34:	431a      	orrs	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e091      	b.n	8006e70 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d52:	f240 331a 	movw	r3, #794	; 0x31a
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d091      	beq.n	8006c80 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d022      	beq.n	8006db0 <HAL_SD_WriteBlocks+0x240>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d91f      	bls.n	8006db0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d01b      	beq.n	8006db0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 ff79 	bl	8007c74 <SDMMC_CmdStopTransfer>
 8006d82:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d012      	beq.n	8006db0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a3a      	ldr	r2, [pc, #232]	; (8006e78 <HAL_SD_WriteBlocks+0x308>)
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e05f      	b.n	8006e70 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	f003 0308 	and.w	r3, r3, #8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d012      	beq.n	8006de4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2d      	ldr	r2, [pc, #180]	; (8006e78 <HAL_SD_WriteBlocks+0x308>)
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	f043 0208 	orr.w	r2, r3, #8
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e045      	b.n	8006e70 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d012      	beq.n	8006e18 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a20      	ldr	r2, [pc, #128]	; (8006e78 <HAL_SD_WriteBlocks+0x308>)
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	f043 0202 	orr.w	r2, r3, #2
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e02b      	b.n	8006e70 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d012      	beq.n	8006e4c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a13      	ldr	r2, [pc, #76]	; (8006e78 <HAL_SD_WriteBlocks+0x308>)
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	f043 0210 	orr.w	r2, r3, #16
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e011      	b.n	8006e70 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e54:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	e006      	b.n	8006e70 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
  }
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3748      	adds	r7, #72	; 0x48
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	004005ff 	.word	0x004005ff

08006e7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e8a:	0f9b      	lsrs	r3, r3, #30
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e96:	0e9b      	lsrs	r3, r3, #26
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ea8:	0e1b      	lsrs	r3, r3, #24
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eba:	0c1b      	lsrs	r3, r3, #16
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec6:	0a1b      	lsrs	r3, r3, #8
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006edc:	0d1b      	lsrs	r3, r3, #20
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ee8:	0c1b      	lsrs	r3, r3, #16
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006efa:	0bdb      	lsrs	r3, r3, #15
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f0c:	0b9b      	lsrs	r3, r3, #14
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f1e:	0b5b      	lsrs	r3, r3, #13
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f30:	0b1b      	lsrs	r3, r3, #12
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2200      	movs	r2, #0
 8006f42:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d163      	bne.n	8007014 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f50:	009a      	lsls	r2, r3, #2
 8006f52:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f56:	4013      	ands	r3, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006f5c:	0f92      	lsrs	r2, r2, #30
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f68:	0edb      	lsrs	r3, r3, #27
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f7a:	0e1b      	lsrs	r3, r3, #24
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8c:	0d5b      	lsrs	r3, r3, #21
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f9e:	0c9b      	lsrs	r3, r3, #18
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb0:	0bdb      	lsrs	r3, r3, #15
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	7e1b      	ldrb	r3, [r3, #24]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	3302      	adds	r3, #2
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006fde:	fb02 f203 	mul.w	r2, r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	7a1b      	ldrb	r3, [r3, #8]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	409a      	lsls	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007000:	0a52      	lsrs	r2, r2, #9
 8007002:	fb02 f203 	mul.w	r2, r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007010:	661a      	str	r2, [r3, #96]	; 0x60
 8007012:	e031      	b.n	8007078 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007018:	2b01      	cmp	r3, #1
 800701a:	d11d      	bne.n	8007058 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007020:	041b      	lsls	r3, r3, #16
 8007022:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702a:	0c1b      	lsrs	r3, r3, #16
 800702c:	431a      	orrs	r2, r3
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	3301      	adds	r3, #1
 8007038:	029a      	lsls	r2, r3, #10
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800704c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	661a      	str	r2, [r3, #96]	; 0x60
 8007056:	e00f      	b.n	8007078 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a58      	ldr	r2, [pc, #352]	; (80071c0 <HAL_SD_GetCardCSD+0x344>)
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e09d      	b.n	80071b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800707c:	0b9b      	lsrs	r3, r3, #14
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	b2da      	uxtb	r2, r3
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800708e:	09db      	lsrs	r3, r3, #7
 8007090:	b2db      	uxtb	r3, r3
 8007092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007096:	b2da      	uxtb	r2, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	0fdb      	lsrs	r3, r3, #31
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070bc:	0f5b      	lsrs	r3, r3, #29
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	f003 0303 	and.w	r3, r3, #3
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ce:	0e9b      	lsrs	r3, r3, #26
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e0:	0d9b      	lsrs	r3, r3, #22
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	0d5b      	lsrs	r3, r3, #21
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710e:	0c1b      	lsrs	r3, r3, #16
 8007110:	b2db      	uxtb	r3, r3
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	b2da      	uxtb	r2, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007122:	0bdb      	lsrs	r3, r3, #15
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	b2da      	uxtb	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007136:	0b9b      	lsrs	r3, r3, #14
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	b2da      	uxtb	r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714a:	0b5b      	lsrs	r3, r3, #13
 800714c:	b2db      	uxtb	r3, r3
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	b2da      	uxtb	r2, r3
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715e:	0b1b      	lsrs	r3, r3, #12
 8007160:	b2db      	uxtb	r3, r3
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	b2da      	uxtb	r2, r3
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007172:	0a9b      	lsrs	r3, r3, #10
 8007174:	b2db      	uxtb	r3, r3
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	b2da      	uxtb	r2, r3
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007186:	0a1b      	lsrs	r3, r3, #8
 8007188:	b2db      	uxtb	r3, r3
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	b2da      	uxtb	r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	b2db      	uxtb	r3, r3
 800719e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	004005ff 	.word	0x004005ff

080071c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800721c:	b5b0      	push	{r4, r5, r7, lr}
 800721e:	b08e      	sub	sp, #56	; 0x38
 8007220:	af04      	add	r7, sp, #16
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2203      	movs	r2, #3
 8007230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007238:	2b03      	cmp	r3, #3
 800723a:	d02e      	beq.n	800729a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007242:	d106      	bne.n	8007252 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	639a      	str	r2, [r3, #56]	; 0x38
 8007250:	e029      	b.n	80072a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007258:	d10a      	bne.n	8007270 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa1a 	bl	8007694 <SD_WideBus_Enable>
 8007260:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	639a      	str	r2, [r3, #56]	; 0x38
 800726e:	e01a      	b.n	80072a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa57 	bl	800772a <SD_WideBus_Disable>
 800727c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
 800728a:	e00c      	b.n	80072a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007290:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	639a      	str	r2, [r3, #56]	; 0x38
 8007298:	e005      	b.n	80072a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00b      	beq.n	80072c6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a26      	ldr	r2, [pc, #152]	; (800734c <HAL_SD_ConfigWideBusOperation+0x130>)
 80072b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072c4:	e01f      	b.n	8007306 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681d      	ldr	r5, [r3, #0]
 80072ec:	466c      	mov	r4, sp
 80072ee:	f107 0314 	add.w	r3, r7, #20
 80072f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80072f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072fa:	f107 0308 	add.w	r3, r7, #8
 80072fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007300:	4628      	mov	r0, r5
 8007302:	f000 fb30 	bl	8007966 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fc05 	bl	8007b1e <SDMMC_CmdBlockLength>
 8007314:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0a      	ldr	r2, [pc, #40]	; (800734c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007322:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800733e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007342:	4618      	mov	r0, r3
 8007344:	3728      	adds	r7, #40	; 0x28
 8007346:	46bd      	mov	sp, r7
 8007348:	bdb0      	pop	{r4, r5, r7, pc}
 800734a:	bf00      	nop
 800734c:	004005ff 	.word	0x004005ff

08007350 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800735c:	f107 030c 	add.w	r3, r7, #12
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f96e 	bl	8007644 <SD_SendStatus>
 8007368:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	0a5b      	lsrs	r3, r3, #9
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007386:	693b      	ldr	r3, [r7, #16]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007390:	b5b0      	push	{r4, r5, r7, lr}
 8007392:	b094      	sub	sp, #80	; 0x50
 8007394:	af04      	add	r7, sp, #16
 8007396:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007398:	2301      	movs	r3, #1
 800739a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 fb38 	bl	8007a16 <SDIO_GetPowerState>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80073b0:	e0b6      	b.n	8007520 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d02f      	beq.n	800741a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fd62 	bl	8007e88 <SDMMC_CmdSendCID>
 80073c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80073cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ce:	e0a7      	b.n	8007520 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fb62 	bl	8007aa0 <SDIO_GetResponse>
 80073dc:	4602      	mov	r2, r0
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2104      	movs	r1, #4
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 fb59 	bl	8007aa0 <SDIO_GetResponse>
 80073ee:	4602      	mov	r2, r0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2108      	movs	r1, #8
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fb50 	bl	8007aa0 <SDIO_GetResponse>
 8007400:	4602      	mov	r2, r0
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	210c      	movs	r1, #12
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fb47 	bl	8007aa0 <SDIO_GetResponse>
 8007412:	4602      	mov	r2, r0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741e:	2b03      	cmp	r3, #3
 8007420:	d00d      	beq.n	800743e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f107 020e 	add.w	r2, r7, #14
 800742a:	4611      	mov	r1, r2
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fd68 	bl	8007f02 <SDMMC_CmdSetRelAdd>
 8007432:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <SD_InitCard+0xae>
    {
      return errorstate;
 800743a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743c:	e070      	b.n	8007520 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007442:	2b03      	cmp	r3, #3
 8007444:	d036      	beq.n	80074b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007446:	89fb      	ldrh	r3, [r7, #14]
 8007448:	461a      	mov	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007456:	041b      	lsls	r3, r3, #16
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f000 fd32 	bl	8007ec4 <SDMMC_CmdSendCSD>
 8007460:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746a:	e059      	b.n	8007520 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2100      	movs	r1, #0
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fb14 	bl	8007aa0 <SDIO_GetResponse>
 8007478:	4602      	mov	r2, r0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2104      	movs	r1, #4
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fb0b 	bl	8007aa0 <SDIO_GetResponse>
 800748a:	4602      	mov	r2, r0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2108      	movs	r1, #8
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fb02 	bl	8007aa0 <SDIO_GetResponse>
 800749c:	4602      	mov	r2, r0
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	210c      	movs	r1, #12
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 faf9 	bl	8007aa0 <SDIO_GetResponse>
 80074ae:	4602      	mov	r2, r0
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2104      	movs	r1, #4
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 faf0 	bl	8007aa0 <SDIO_GetResponse>
 80074c0:	4603      	mov	r3, r0
 80074c2:	0d1a      	lsrs	r2, r3, #20
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80074c8:	f107 0310 	add.w	r3, r7, #16
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff fcd4 	bl	8006e7c <HAL_SD_GetCardCSD>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074de:	e01f      	b.n	8007520 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6819      	ldr	r1, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e8:	041b      	lsls	r3, r3, #16
 80074ea:	461a      	mov	r2, r3
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	4608      	mov	r0, r1
 80074f2:	f000 fbe1 	bl	8007cb8 <SDMMC_CmdSelDesel>
 80074f6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80074f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <SD_InitCard+0x172>
  {
    return errorstate;
 80074fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007500:	e00e      	b.n	8007520 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681d      	ldr	r5, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	466c      	mov	r4, sp
 800750a:	f103 0210 	add.w	r2, r3, #16
 800750e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007514:	3304      	adds	r3, #4
 8007516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007518:	4628      	mov	r0, r5
 800751a:	f000 fa24 	bl	8007966 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3740      	adds	r7, #64	; 0x40
 8007524:	46bd      	mov	sp, r7
 8007526:	bdb0      	pop	{r4, r5, r7, pc}

08007528 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	2300      	movs	r3, #0
 800753a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fbdc 	bl	8007cfe <SDMMC_CmdGoIdleState>
 8007546:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <SD_PowerON+0x2a>
  {
    return errorstate;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	e072      	b.n	8007638 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fbef 	bl	8007d3a <SDMMC_CmdOperCond>
 800755c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00d      	beq.n	8007580 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fbc5 	bl	8007cfe <SDMMC_CmdGoIdleState>
 8007574:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d004      	beq.n	8007586 <SD_PowerON+0x5e>
    {
      return errorstate;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	e05b      	b.n	8007638 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800758a:	2b01      	cmp	r3, #1
 800758c:	d137      	bne.n	80075fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2100      	movs	r1, #0
 8007594:	4618      	mov	r0, r3
 8007596:	f000 fbef 	bl	8007d78 <SDMMC_CmdAppCommand>
 800759a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d02d      	beq.n	80075fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075a6:	e047      	b.n	8007638 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2100      	movs	r1, #0
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 fbe2 	bl	8007d78 <SDMMC_CmdAppCommand>
 80075b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	e03b      	b.n	8007638 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	491e      	ldr	r1, [pc, #120]	; (8007640 <SD_PowerON+0x118>)
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fbf8 	bl	8007dbc <SDMMC_CmdAppOperCommand>
 80075cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075d8:	e02e      	b.n	8007638 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2100      	movs	r1, #0
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fa5d 	bl	8007aa0 <SDIO_GetResponse>
 80075e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	0fdb      	lsrs	r3, r3, #31
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <SD_PowerON+0xcc>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <SD_PowerON+0xce>
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]

    count++;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007604:	4293      	cmp	r3, r2
 8007606:	d802      	bhi.n	800760e <SD_PowerON+0xe6>
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0cc      	beq.n	80075a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007614:	4293      	cmp	r3, r2
 8007616:	d902      	bls.n	800761e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800761c:	e00c      	b.n	8007638 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	645a      	str	r2, [r3, #68]	; 0x44
 800762e:	e002      	b.n	8007636 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	c1100000 	.word	0xc1100000

08007644 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007658:	e018      	b.n	800768c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f000 fc6c 	bl	8007f44 <SDMMC_CmdSendStatus>
 800766c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	e009      	b.n	800768c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2100      	movs	r1, #0
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fa0e 	bl	8007aa0 <SDIO_GetResponse>
 8007684:	4602      	mov	r2, r0
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	2300      	movs	r3, #0
 80076a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2100      	movs	r1, #0
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 f9f8 	bl	8007aa0 <SDIO_GetResponse>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ba:	d102      	bne.n	80076c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80076bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076c0:	e02f      	b.n	8007722 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80076c2:	f107 030c 	add.w	r3, r7, #12
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f879 	bl	80077c0 <SD_FindSCR>
 80076ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	e023      	b.n	8007722 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01c      	beq.n	800771e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ec:	041b      	lsls	r3, r3, #16
 80076ee:	4619      	mov	r1, r3
 80076f0:	4610      	mov	r0, r2
 80076f2:	f000 fb41 	bl	8007d78 <SDMMC_CmdAppCommand>
 80076f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	e00f      	b.n	8007722 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2102      	movs	r1, #2
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fb7a 	bl	8007e02 <SDMMC_CmdBusWidth>
 800770e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	e003      	b.n	8007722 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800771a:	2300      	movs	r3, #0
 800771c:	e001      	b.n	8007722 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800771e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b086      	sub	sp, #24
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2100      	movs	r1, #0
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f9ad 	bl	8007aa0 <SDIO_GetResponse>
 8007746:	4603      	mov	r3, r0
 8007748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800774c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007750:	d102      	bne.n	8007758 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007752:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007756:	e02f      	b.n	80077b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007758:	f107 030c 	add.w	r3, r7, #12
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f82e 	bl	80077c0 <SD_FindSCR>
 8007764:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	e023      	b.n	80077b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d01c      	beq.n	80077b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007782:	041b      	lsls	r3, r3, #16
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f000 faf6 	bl	8007d78 <SDMMC_CmdAppCommand>
 800778c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	e00f      	b.n	80077b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fb2f 	bl	8007e02 <SDMMC_CmdBusWidth>
 80077a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	e003      	b.n	80077b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80077b0:	2300      	movs	r3, #0
 80077b2:	e001      	b.n	80077b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b08f      	sub	sp, #60	; 0x3c
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80077ca:	f7fb fad9 	bl	8002d80 <HAL_GetTick>
 80077ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80077d4:	2300      	movs	r3, #0
 80077d6:	60bb      	str	r3, [r7, #8]
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2108      	movs	r1, #8
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 f999 	bl	8007b1e <SDMMC_CmdBlockLength>
 80077ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	e0b2      	b.n	800795e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007800:	041b      	lsls	r3, r3, #16
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f000 fab7 	bl	8007d78 <SDMMC_CmdAppCommand>
 800780a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	e0a3      	b.n	800795e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007816:	f04f 33ff 	mov.w	r3, #4294967295
 800781a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800781c:	2308      	movs	r3, #8
 800781e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007820:	2330      	movs	r3, #48	; 0x30
 8007822:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007824:	2302      	movs	r3, #2
 8007826:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007828:	2300      	movs	r3, #0
 800782a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800782c:	2301      	movs	r3, #1
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f107 0210 	add.w	r2, r7, #16
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f000 f943 	bl	8007ac6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fafe 	bl	8007e46 <SDMMC_CmdSendSCR>
 800784a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	d02a      	beq.n	80078a8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	e083      	b.n	800795e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00f      	beq.n	8007884 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6819      	ldr	r1, [r3, #0]
 8007868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	f107 0208 	add.w	r2, r7, #8
 8007870:	18d4      	adds	r4, r2, r3
 8007872:	4608      	mov	r0, r1
 8007874:	f000 f8a2 	bl	80079bc <SDIO_ReadFIFO>
 8007878:	4603      	mov	r3, r0
 800787a:	6023      	str	r3, [r4, #0]
      index++;
 800787c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787e:	3301      	adds	r3, #1
 8007880:	637b      	str	r3, [r7, #52]	; 0x34
 8007882:	e006      	b.n	8007892 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d012      	beq.n	80078b8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007892:	f7fb fa75 	bl	8002d80 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a0:	d102      	bne.n	80078a8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80078a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078a6:	e05a      	b.n	800795e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ae:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0cf      	beq.n	8007856 <SD_FindSCR+0x96>
 80078b6:	e000      	b.n	80078ba <SD_FindSCR+0xfa>
      break;
 80078b8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d005      	beq.n	80078d4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2208      	movs	r2, #8
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80078d0:	2308      	movs	r3, #8
 80078d2:	e044      	b.n	800795e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d005      	beq.n	80078ee <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2202      	movs	r2, #2
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80078ea:	2302      	movs	r3, #2
 80078ec:	e037      	b.n	800795e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f4:	f003 0320 	and.w	r3, r3, #32
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2220      	movs	r2, #32
 8007902:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007904:	2320      	movs	r3, #32
 8007906:	e02a      	b.n	800795e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007910:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	061a      	lsls	r2, r3, #24
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	021b      	lsls	r3, r3, #8
 800791a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800791e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	0a1b      	lsrs	r3, r3, #8
 8007924:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007928:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	0e1b      	lsrs	r3, r3, #24
 800792e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	601a      	str	r2, [r3, #0]
    scr++;
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	3304      	adds	r3, #4
 8007938:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	061a      	lsls	r2, r3, #24
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007946:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	0a1b      	lsrs	r3, r3, #8
 800794c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007950:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	0e1b      	lsrs	r3, r3, #24
 8007956:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	373c      	adds	r7, #60	; 0x3c
 8007962:	46bd      	mov	sp, r7
 8007964:	bd90      	pop	{r4, r7, pc}

08007966 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007966:	b084      	sub	sp, #16
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	f107 001c 	add.w	r0, r7, #28
 8007974:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800797c:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800797e:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007980:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007984:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007986:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007988:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800798c:	431a      	orrs	r2, r3
             Init.ClockDiv
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007990:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4313      	orrs	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80079a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	b004      	add	sp, #16
 80079ba:	4770      	bx	lr

080079bc <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2203      	movs	r2, #3
 8007a04:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007a06:	2002      	movs	r0, #2
 8007a08:	f7fb f9c6 	bl	8002d98 <HAL_Delay>
  
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0303 	and.w	r3, r3, #3
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a50:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007a56:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007a5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007a6c:	f023 030f 	bic.w	r3, r3, #15
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	b2db      	uxtb	r3, r3
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3314      	adds	r3, #20
 8007aae:	461a      	mov	r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
}  
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007aec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007af2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007af8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0

}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b088      	sub	sp, #32
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007b2c:	2310      	movs	r3, #16
 8007b2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b30:	2340      	movs	r3, #64	; 0x40
 8007b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b34:	2300      	movs	r3, #0
 8007b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b3e:	f107 0308 	add.w	r3, r7, #8
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff ff74 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4e:	2110      	movs	r1, #16
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fa45 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b58:	69fb      	ldr	r3, [r7, #28]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3720      	adds	r7, #32
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b088      	sub	sp, #32
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007b70:	2311      	movs	r3, #17
 8007b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b74:	2340      	movs	r3, #64	; 0x40
 8007b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b82:	f107 0308 	add.w	r3, r7, #8
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff ff52 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b92:	2111      	movs	r1, #17
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fa23 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b088      	sub	sp, #32
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007bb4:	2312      	movs	r3, #18
 8007bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bc6:	f107 0308 	add.w	r3, r7, #8
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff ff30 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bd6:	2112      	movs	r1, #18
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fa01 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007be0:	69fb      	ldr	r3, [r7, #28]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3720      	adds	r7, #32
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b088      	sub	sp, #32
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007bf8:	2318      	movs	r3, #24
 8007bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bfc:	2340      	movs	r3, #64	; 0x40
 8007bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c00:	2300      	movs	r3, #0
 8007c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c0a:	f107 0308 	add.w	r3, r7, #8
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff ff0e 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c1a:	2118      	movs	r1, #24
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f9df 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007c22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c24:	69fb      	ldr	r3, [r7, #28]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3720      	adds	r7, #32
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b088      	sub	sp, #32
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007c3c:	2319      	movs	r3, #25
 8007c3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c40:	2340      	movs	r3, #64	; 0x40
 8007c42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c4e:	f107 0308 	add.w	r3, r7, #8
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff feec 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5e:	2119      	movs	r1, #25
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f9bd 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007c66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c68:	69fb      	ldr	r3, [r7, #28]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3720      	adds	r7, #32
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007c80:	230c      	movs	r3, #12
 8007c82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c84:	2340      	movs	r3, #64	; 0x40
 8007c86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c92:	f107 0308 	add.w	r3, r7, #8
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff feca 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007c9e:	4a05      	ldr	r2, [pc, #20]	; (8007cb4 <SDMMC_CmdStopTransfer+0x40>)
 8007ca0:	210c      	movs	r1, #12
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f99c 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007caa:	69fb      	ldr	r3, [r7, #28]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3720      	adds	r7, #32
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	05f5e100 	.word	0x05f5e100

08007cb8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08a      	sub	sp, #40	; 0x28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007cc8:	2307      	movs	r3, #7
 8007cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ccc:	2340      	movs	r3, #64	; 0x40
 8007cce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cda:	f107 0310 	add.w	r3, r7, #16
 8007cde:	4619      	mov	r1, r3
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff fea6 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cea:	2107      	movs	r1, #7
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f977 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007cf2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3728      	adds	r7, #40	; 0x28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b088      	sub	sp, #32
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d12:	2300      	movs	r3, #0
 8007d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d1c:	f107 0308 	add.w	r3, r7, #8
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fe85 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f92d 	bl	8007f88 <SDMMC_GetCmdError>
 8007d2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d30:	69fb      	ldr	r3, [r7, #28]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3720      	adds	r7, #32
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b088      	sub	sp, #32
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007d42:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007d48:	2308      	movs	r3, #8
 8007d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d5a:	f107 0308 	add.w	r3, r7, #8
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff fe66 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fb24 	bl	80083b4 <SDMMC_GetCmdResp7>
 8007d6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d6e:	69fb      	ldr	r3, [r7, #28]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3720      	adds	r7, #32
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007d86:	2337      	movs	r3, #55	; 0x37
 8007d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d8a:	2340      	movs	r3, #64	; 0x40
 8007d8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d98:	f107 0308 	add.w	r3, r7, #8
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff fe47 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da8:	2137      	movs	r1, #55	; 0x37
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f918 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007db0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007db2:	69fb      	ldr	r3, [r7, #28]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3720      	adds	r7, #32
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007dd2:	2329      	movs	r3, #41	; 0x29
 8007dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dd6:	2340      	movs	r3, #64	; 0x40
 8007dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007de2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff fe21 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fa2b 	bl	800824c <SDMMC_GetCmdResp3>
 8007df6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007df8:	69fb      	ldr	r3, [r7, #28]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3720      	adds	r7, #32
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b088      	sub	sp, #32
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007e10:	2306      	movs	r3, #6
 8007e12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e14:	2340      	movs	r3, #64	; 0x40
 8007e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e22:	f107 0308 	add.w	r3, r7, #8
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff fe02 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e32:	2106      	movs	r1, #6
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f8d3 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007e3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3720      	adds	r7, #32
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b088      	sub	sp, #32
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007e52:	2333      	movs	r3, #51	; 0x33
 8007e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e56:	2340      	movs	r3, #64	; 0x40
 8007e58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e64:	f107 0308 	add.w	r3, r7, #8
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff fde1 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e74:	2133      	movs	r1, #51	; 0x33
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f8b2 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007e7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3720      	adds	r7, #32
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007e94:	2302      	movs	r3, #2
 8007e96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007e98:	23c0      	movs	r3, #192	; 0xc0
 8007e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ea4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ea6:	f107 0308 	add.w	r3, r7, #8
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff fdc0 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f982 	bl	80081bc <SDMMC_GetCmdResp2>
 8007eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007eba:	69fb      	ldr	r3, [r7, #28]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3720      	adds	r7, #32
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007ed2:	2309      	movs	r3, #9
 8007ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007ed6:	23c0      	movs	r3, #192	; 0xc0
 8007ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ee4:	f107 0308 	add.w	r3, r7, #8
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff fda1 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f963 	bl	80081bc <SDMMC_GetCmdResp2>
 8007ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b088      	sub	sp, #32
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007f10:	2303      	movs	r3, #3
 8007f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f14:	2340      	movs	r3, #64	; 0x40
 8007f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f22:	f107 0308 	add.w	r3, r7, #8
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff fd82 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	2103      	movs	r1, #3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9c8 	bl	80082c8 <SDMMC_GetCmdResp6>
 8007f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007f52:	230d      	movs	r3, #13
 8007f54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f56:	2340      	movs	r3, #64	; 0x40
 8007f58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f64:	f107 0308 	add.w	r3, r7, #8
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff fd61 	bl	8007a32 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f74:	210d      	movs	r1, #13
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f832 	bl	8007fe0 <SDMMC_GetCmdResp1>
 8007f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f7e:	69fb      	ldr	r3, [r7, #28]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f90:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <SDMMC_GetCmdError+0x50>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a11      	ldr	r2, [pc, #68]	; (8007fdc <SDMMC_GetCmdError+0x54>)
 8007f96:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9a:	0a5b      	lsrs	r3, r3, #9
 8007f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa0:	fb02 f303 	mul.w	r3, r2, r3
 8007fa4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	1e5a      	subs	r2, r3, #1
 8007faa:	60fa      	str	r2, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fb4:	e009      	b.n	8007fca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0f1      	beq.n	8007fa6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	22c5      	movs	r2, #197	; 0xc5
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	20000048 	.word	0x20000048
 8007fdc:	10624dd3 	.word	0x10624dd3

08007fe0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007fee:	4b70      	ldr	r3, [pc, #448]	; (80081b0 <SDMMC_GetCmdResp1+0x1d0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a70      	ldr	r2, [pc, #448]	; (80081b4 <SDMMC_GetCmdResp1+0x1d4>)
 8007ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff8:	0a5a      	lsrs	r2, r3, #9
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	fb02 f303 	mul.w	r3, r2, r3
 8008000:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	1e5a      	subs	r2, r3, #1
 8008006:	61fa      	str	r2, [r7, #28]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d102      	bne.n	8008012 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800800c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008010:	e0c9      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008016:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0ef      	beq.n	8008002 <SDMMC_GetCmdResp1+0x22>
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1ea      	bne.n	8008002 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2204      	movs	r2, #4
 800803c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800803e:	2304      	movs	r3, #4
 8008040:	e0b1      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008054:	2301      	movs	r3, #1
 8008056:	e0a6      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	22c5      	movs	r2, #197	; 0xc5
 800805c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7ff fd11 	bl	8007a86 <SDIO_GetCommandResponse>
 8008064:	4603      	mov	r3, r0
 8008066:	461a      	mov	r2, r3
 8008068:	7afb      	ldrb	r3, [r7, #11]
 800806a:	4293      	cmp	r3, r2
 800806c:	d001      	beq.n	8008072 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800806e:	2301      	movs	r3, #1
 8008070:	e099      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008072:	2100      	movs	r1, #0
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f7ff fd13 	bl	8007aa0 <SDIO_GetResponse>
 800807a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	4b4e      	ldr	r3, [pc, #312]	; (80081b8 <SDMMC_GetCmdResp1+0x1d8>)
 8008080:	4013      	ands	r3, r2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008086:	2300      	movs	r3, #0
 8008088:	e08d      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	da02      	bge.n	8008096 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008094:	e087      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80080a0:	2340      	movs	r3, #64	; 0x40
 80080a2:	e080      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80080ae:	2380      	movs	r3, #128	; 0x80
 80080b0:	e079      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80080bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080c0:	e071      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80080cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080d0:	e069      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80080dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080e0:	e061      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80080ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080f0:	e059      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80080fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008100:	e051      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800810c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008110:	e049      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800811c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008120:	e041      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800812c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008130:	e039      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800813c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008140:	e031      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800814c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008150:	e029      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800815c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008160:	e021      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800816c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008170:	e019      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800817c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008180:	e011      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800818c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008190:	e009      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800819c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80081a0:	e001      	b.n	80081a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80081a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3720      	adds	r7, #32
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000048 	.word	0x20000048
 80081b4:	10624dd3 	.word	0x10624dd3
 80081b8:	fdffe008 	.word	0xfdffe008

080081bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081c4:	4b1f      	ldr	r3, [pc, #124]	; (8008244 <SDMMC_GetCmdResp2+0x88>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1f      	ldr	r2, [pc, #124]	; (8008248 <SDMMC_GetCmdResp2+0x8c>)
 80081ca:	fba2 2303 	umull	r2, r3, r2, r3
 80081ce:	0a5b      	lsrs	r3, r3, #9
 80081d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081d4:	fb02 f303 	mul.w	r3, r2, r3
 80081d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	1e5a      	subs	r2, r3, #1
 80081de:	60fa      	str	r2, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d102      	bne.n	80081ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081e8:	e026      	b.n	8008238 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0ef      	beq.n	80081da <SDMMC_GetCmdResp2+0x1e>
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1ea      	bne.n	80081da <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2204      	movs	r2, #4
 8008214:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008216:	2304      	movs	r3, #4
 8008218:	e00e      	b.n	8008238 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800822c:	2301      	movs	r3, #1
 800822e:	e003      	b.n	8008238 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	22c5      	movs	r2, #197	; 0xc5
 8008234:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	20000048 	.word	0x20000048
 8008248:	10624dd3 	.word	0x10624dd3

0800824c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008254:	4b1a      	ldr	r3, [pc, #104]	; (80082c0 <SDMMC_GetCmdResp3+0x74>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a1a      	ldr	r2, [pc, #104]	; (80082c4 <SDMMC_GetCmdResp3+0x78>)
 800825a:	fba2 2303 	umull	r2, r3, r2, r3
 800825e:	0a5b      	lsrs	r3, r3, #9
 8008260:	f241 3288 	movw	r2, #5000	; 0x1388
 8008264:	fb02 f303 	mul.w	r3, r2, r3
 8008268:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	1e5a      	subs	r2, r3, #1
 800826e:	60fa      	str	r2, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d102      	bne.n	800827a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008274:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008278:	e01b      	b.n	80082b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0ef      	beq.n	800826a <SDMMC_GetCmdResp3+0x1e>
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1ea      	bne.n	800826a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2204      	movs	r2, #4
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082a6:	2304      	movs	r3, #4
 80082a8:	e003      	b.n	80082b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	22c5      	movs	r2, #197	; 0xc5
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20000048 	.word	0x20000048
 80082c4:	10624dd3 	.word	0x10624dd3

080082c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	460b      	mov	r3, r1
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082d6:	4b35      	ldr	r3, [pc, #212]	; (80083ac <SDMMC_GetCmdResp6+0xe4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a35      	ldr	r2, [pc, #212]	; (80083b0 <SDMMC_GetCmdResp6+0xe8>)
 80082dc:	fba2 2303 	umull	r2, r3, r2, r3
 80082e0:	0a5b      	lsrs	r3, r3, #9
 80082e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e6:	fb02 f303 	mul.w	r3, r2, r3
 80082ea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	1e5a      	subs	r2, r3, #1
 80082f0:	61fa      	str	r2, [r7, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d102      	bne.n	80082fc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082fa:	e052      	b.n	80083a2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008300:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0ef      	beq.n	80082ec <SDMMC_GetCmdResp6+0x24>
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1ea      	bne.n	80082ec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d004      	beq.n	800832c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2204      	movs	r2, #4
 8008326:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008328:	2304      	movs	r3, #4
 800832a:	e03a      	b.n	80083a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d004      	beq.n	8008342 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800833e:	2301      	movs	r3, #1
 8008340:	e02f      	b.n	80083a2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f7ff fb9f 	bl	8007a86 <SDIO_GetCommandResponse>
 8008348:	4603      	mov	r3, r0
 800834a:	461a      	mov	r2, r3
 800834c:	7afb      	ldrb	r3, [r7, #11]
 800834e:	4293      	cmp	r3, r2
 8008350:	d001      	beq.n	8008356 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008352:	2301      	movs	r3, #1
 8008354:	e025      	b.n	80083a2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	22c5      	movs	r2, #197	; 0xc5
 800835a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800835c:	2100      	movs	r1, #0
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7ff fb9e 	bl	8007aa0 <SDIO_GetResponse>
 8008364:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d106      	bne.n	800837e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	b29a      	uxth	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800837a:	2300      	movs	r3, #0
 800837c:	e011      	b.n	80083a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800838c:	e009      	b.n	80083a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800839c:	e001      	b.n	80083a2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800839e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3720      	adds	r7, #32
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000048 	.word	0x20000048
 80083b0:	10624dd3 	.word	0x10624dd3

080083b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083bc:	4b22      	ldr	r3, [pc, #136]	; (8008448 <SDMMC_GetCmdResp7+0x94>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a22      	ldr	r2, [pc, #136]	; (800844c <SDMMC_GetCmdResp7+0x98>)
 80083c2:	fba2 2303 	umull	r2, r3, r2, r3
 80083c6:	0a5b      	lsrs	r3, r3, #9
 80083c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083cc:	fb02 f303 	mul.w	r3, r2, r3
 80083d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	1e5a      	subs	r2, r3, #1
 80083d6:	60fa      	str	r2, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083e0:	e02c      	b.n	800843c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d0ef      	beq.n	80083d2 <SDMMC_GetCmdResp7+0x1e>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1ea      	bne.n	80083d2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2204      	movs	r2, #4
 800840c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800840e:	2304      	movs	r3, #4
 8008410:	e014      	b.n	800843c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008424:	2301      	movs	r3, #1
 8008426:	e009      	b.n	800843c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2240      	movs	r2, #64	; 0x40
 8008438:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800843a:	2300      	movs	r3, #0
  
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	20000048 	.word	0x20000048
 800844c:	10624dd3 	.word	0x10624dd3

08008450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008450:	b084      	sub	sp, #16
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	f107 001c 	add.w	r0, r7, #28
 800845e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	2b01      	cmp	r3, #1
 8008466:	d122      	bne.n	80084ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800847c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008492:	2b01      	cmp	r3, #1
 8008494:	d105      	bne.n	80084a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fac6 	bl	8009a34 <USB_CoreReset>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]
 80084ac:	e01a      	b.n	80084e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 faba 	bl	8009a34 <USB_CoreReset>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d106      	bne.n	80084d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	639a      	str	r2, [r3, #56]	; 0x38
 80084d6:	e005      	b.n	80084e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d10b      	bne.n	8008502 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f043 0206 	orr.w	r2, r3, #6
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f043 0220 	orr.w	r2, r3, #32
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008502:	7bfb      	ldrb	r3, [r7, #15]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800850e:	b004      	add	sp, #16
 8008510:	4770      	bx	lr
	...

08008514 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	2b02      	cmp	r3, #2
 8008526:	d165      	bne.n	80085f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4a41      	ldr	r2, [pc, #260]	; (8008630 <USB_SetTurnaroundTime+0x11c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d906      	bls.n	800853e <USB_SetTurnaroundTime+0x2a>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4a40      	ldr	r2, [pc, #256]	; (8008634 <USB_SetTurnaroundTime+0x120>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d202      	bcs.n	800853e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008538:	230f      	movs	r3, #15
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	e062      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4a3c      	ldr	r2, [pc, #240]	; (8008634 <USB_SetTurnaroundTime+0x120>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d306      	bcc.n	8008554 <USB_SetTurnaroundTime+0x40>
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	4a3b      	ldr	r2, [pc, #236]	; (8008638 <USB_SetTurnaroundTime+0x124>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d202      	bcs.n	8008554 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800854e:	230e      	movs	r3, #14
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	e057      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4a38      	ldr	r2, [pc, #224]	; (8008638 <USB_SetTurnaroundTime+0x124>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d306      	bcc.n	800856a <USB_SetTurnaroundTime+0x56>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4a37      	ldr	r2, [pc, #220]	; (800863c <USB_SetTurnaroundTime+0x128>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d202      	bcs.n	800856a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008564:	230d      	movs	r3, #13
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	e04c      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4a33      	ldr	r2, [pc, #204]	; (800863c <USB_SetTurnaroundTime+0x128>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d306      	bcc.n	8008580 <USB_SetTurnaroundTime+0x6c>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4a32      	ldr	r2, [pc, #200]	; (8008640 <USB_SetTurnaroundTime+0x12c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d802      	bhi.n	8008580 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800857a:	230c      	movs	r3, #12
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	e041      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4a2f      	ldr	r2, [pc, #188]	; (8008640 <USB_SetTurnaroundTime+0x12c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d906      	bls.n	8008596 <USB_SetTurnaroundTime+0x82>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4a2e      	ldr	r2, [pc, #184]	; (8008644 <USB_SetTurnaroundTime+0x130>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d802      	bhi.n	8008596 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008590:	230b      	movs	r3, #11
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e036      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4a2a      	ldr	r2, [pc, #168]	; (8008644 <USB_SetTurnaroundTime+0x130>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d906      	bls.n	80085ac <USB_SetTurnaroundTime+0x98>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4a29      	ldr	r2, [pc, #164]	; (8008648 <USB_SetTurnaroundTime+0x134>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d802      	bhi.n	80085ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085a6:	230a      	movs	r3, #10
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	e02b      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4a26      	ldr	r2, [pc, #152]	; (8008648 <USB_SetTurnaroundTime+0x134>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d906      	bls.n	80085c2 <USB_SetTurnaroundTime+0xae>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	4a25      	ldr	r2, [pc, #148]	; (800864c <USB_SetTurnaroundTime+0x138>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d202      	bcs.n	80085c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80085bc:	2309      	movs	r3, #9
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e020      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4a21      	ldr	r2, [pc, #132]	; (800864c <USB_SetTurnaroundTime+0x138>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d306      	bcc.n	80085d8 <USB_SetTurnaroundTime+0xc4>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4a20      	ldr	r2, [pc, #128]	; (8008650 <USB_SetTurnaroundTime+0x13c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d802      	bhi.n	80085d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085d2:	2308      	movs	r3, #8
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	e015      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4a1d      	ldr	r2, [pc, #116]	; (8008650 <USB_SetTurnaroundTime+0x13c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d906      	bls.n	80085ee <USB_SetTurnaroundTime+0xda>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4a1c      	ldr	r2, [pc, #112]	; (8008654 <USB_SetTurnaroundTime+0x140>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d202      	bcs.n	80085ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085e8:	2307      	movs	r3, #7
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	e00a      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80085ee:	2306      	movs	r3, #6
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	e007      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d102      	bne.n	8008600 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80085fa:	2309      	movs	r3, #9
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e001      	b.n	8008604 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008600:	2309      	movs	r3, #9
 8008602:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	029b      	lsls	r3, r3, #10
 8008618:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800861c:	431a      	orrs	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	371c      	adds	r7, #28
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	00d8acbf 	.word	0x00d8acbf
 8008634:	00e4e1c0 	.word	0x00e4e1c0
 8008638:	00f42400 	.word	0x00f42400
 800863c:	01067380 	.word	0x01067380
 8008640:	011a499f 	.word	0x011a499f
 8008644:	01312cff 	.word	0x01312cff
 8008648:	014ca43f 	.word	0x014ca43f
 800864c:	016e3600 	.word	0x016e3600
 8008650:	01a6ab1f 	.word	0x01a6ab1f
 8008654:	01e84800 	.word	0x01e84800

08008658 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f043 0201 	orr.w	r2, r3, #1
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f023 0201 	bic.w	r2, r3, #1
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d106      	bne.n	80086c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60da      	str	r2, [r3, #12]
 80086c6:	e00b      	b.n	80086e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60da      	str	r2, [r3, #12]
 80086da:	e001      	b.n	80086e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e003      	b.n	80086e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80086e0:	2032      	movs	r0, #50	; 0x32
 80086e2:	f7fa fb59 	bl	8002d98 <HAL_Delay>

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086f0:	b084      	sub	sp, #16
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b086      	sub	sp, #24
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80086fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800870a:	2300      	movs	r3, #0
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	e009      	b.n	8008724 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	3340      	adds	r3, #64	; 0x40
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	2200      	movs	r2, #0
 800871c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	3301      	adds	r3, #1
 8008722:	613b      	str	r3, [r7, #16]
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	2b0e      	cmp	r3, #14
 8008728:	d9f2      	bls.n	8008710 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800872a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d11c      	bne.n	800876a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800873e:	f043 0302 	orr.w	r3, r3, #2
 8008742:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
 8008768:	e00b      	b.n	8008782 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008788:	461a      	mov	r2, r3
 800878a:	2300      	movs	r3, #0
 800878c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008794:	4619      	mov	r1, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879c:	461a      	mov	r2, r3
 800879e:	680b      	ldr	r3, [r1, #0]
 80087a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d10c      	bne.n	80087c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d104      	bne.n	80087b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087ae:	2100      	movs	r1, #0
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f949 	bl	8008a48 <USB_SetDevSpeed>
 80087b6:	e008      	b.n	80087ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087b8:	2101      	movs	r1, #1
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f944 	bl	8008a48 <USB_SetDevSpeed>
 80087c0:	e003      	b.n	80087ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087c2:	2103      	movs	r1, #3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f93f 	bl	8008a48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087ca:	2110      	movs	r1, #16
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f8f3 	bl	80089b8 <USB_FlushTxFifo>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f911 	bl	8008a04 <USB_FlushRxFifo>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f2:	461a      	mov	r2, r3
 80087f4:	2300      	movs	r3, #0
 80087f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fe:	461a      	mov	r2, r3
 8008800:	2300      	movs	r3, #0
 8008802:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800880a:	461a      	mov	r2, r3
 800880c:	2300      	movs	r3, #0
 800880e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008810:	2300      	movs	r3, #0
 8008812:	613b      	str	r3, [r7, #16]
 8008814:	e043      	b.n	800889e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800882c:	d118      	bne.n	8008860 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10a      	bne.n	800884a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008840:	461a      	mov	r2, r3
 8008842:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	e013      	b.n	8008872 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	4413      	add	r3, r2
 8008852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008856:	461a      	mov	r2, r3
 8008858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	e008      	b.n	8008872 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800886c:	461a      	mov	r2, r3
 800886e:	2300      	movs	r3, #0
 8008870:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887e:	461a      	mov	r2, r3
 8008880:	2300      	movs	r3, #0
 8008882:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008890:	461a      	mov	r2, r3
 8008892:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008896:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	3301      	adds	r3, #1
 800889c:	613b      	str	r3, [r7, #16]
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d3b7      	bcc.n	8008816 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088a6:	2300      	movs	r3, #0
 80088a8:	613b      	str	r3, [r7, #16]
 80088aa:	e043      	b.n	8008934 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c2:	d118      	bne.n	80088f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d6:	461a      	mov	r2, r3
 80088d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	e013      	b.n	8008908 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ec:	461a      	mov	r2, r3
 80088ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	e008      	b.n	8008908 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008902:	461a      	mov	r2, r3
 8008904:	2300      	movs	r3, #0
 8008906:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008914:	461a      	mov	r2, r3
 8008916:	2300      	movs	r3, #0
 8008918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008926:	461a      	mov	r2, r3
 8008928:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800892c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	3301      	adds	r3, #1
 8008932:	613b      	str	r3, [r7, #16]
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	429a      	cmp	r2, r3
 800893a:	d3b7      	bcc.n	80088ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800894a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800894e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800895c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	2b00      	cmp	r3, #0
 8008962:	d105      	bne.n	8008970 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	f043 0210 	orr.w	r2, r3, #16
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699a      	ldr	r2, [r3, #24]
 8008974:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <USB_DevInit+0x2c4>)
 8008976:	4313      	orrs	r3, r2
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800897c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	f043 0208 	orr.w	r2, r3, #8
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800898e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008990:	2b01      	cmp	r3, #1
 8008992:	d107      	bne.n	80089a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800899c:	f043 0304 	orr.w	r3, r3, #4
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089b0:	b004      	add	sp, #16
 80089b2:	4770      	bx	lr
 80089b4:	803c3800 	.word	0x803c3800

080089b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	019b      	lsls	r3, r3, #6
 80089ca:	f043 0220 	orr.w	r2, r3, #32
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3301      	adds	r3, #1
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4a09      	ldr	r2, [pc, #36]	; (8008a00 <USB_FlushTxFifo+0x48>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d901      	bls.n	80089e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e006      	b.n	80089f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	f003 0320 	and.w	r3, r3, #32
 80089ec:	2b20      	cmp	r3, #32
 80089ee:	d0f0      	beq.n	80089d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	00030d40 	.word	0x00030d40

08008a04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2210      	movs	r2, #16
 8008a14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4a09      	ldr	r2, [pc, #36]	; (8008a44 <USB_FlushRxFifo+0x40>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d901      	bls.n	8008a28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e006      	b.n	8008a36 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	2b10      	cmp	r3, #16
 8008a32:	d0f0      	beq.n	8008a16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	00030d40 	.word	0x00030d40

08008a48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	78fb      	ldrb	r3, [r7, #3]
 8008a62:	68f9      	ldr	r1, [r7, #12]
 8008a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b087      	sub	sp, #28
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f003 0306 	and.w	r3, r3, #6
 8008a92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d102      	bne.n	8008aa0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75fb      	strb	r3, [r7, #23]
 8008a9e:	e00a      	b.n	8008ab6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d002      	beq.n	8008aac <USB_GetDevSpeed+0x32>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b06      	cmp	r3, #6
 8008aaa:	d102      	bne.n	8008ab2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008aac:	2302      	movs	r3, #2
 8008aae:	75fb      	strb	r3, [r7, #23]
 8008ab0:	e001      	b.n	8008ab6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ab2:	230f      	movs	r3, #15
 8008ab4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	371c      	adds	r7, #28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	785b      	ldrb	r3, [r3, #1]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d13a      	bne.n	8008b56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae6:	69da      	ldr	r2, [r3, #28]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	f003 030f 	and.w	r3, r3, #15
 8008af0:	2101      	movs	r1, #1
 8008af2:	fa01 f303 	lsl.w	r3, r1, r3
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	68f9      	ldr	r1, [r7, #12]
 8008afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008afe:	4313      	orrs	r3, r2
 8008b00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d155      	bne.n	8008bc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	78db      	ldrb	r3, [r3, #3]
 8008b32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	059b      	lsls	r3, r3, #22
 8008b3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	0151      	lsls	r1, r2, #5
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	440a      	add	r2, r1
 8008b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	e036      	b.n	8008bc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5c:	69da      	ldr	r2, [r3, #28]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	f003 030f 	and.w	r3, r3, #15
 8008b66:	2101      	movs	r1, #1
 8008b68:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6c:	041b      	lsls	r3, r3, #16
 8008b6e:	68f9      	ldr	r1, [r7, #12]
 8008b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b74:	4313      	orrs	r3, r2
 8008b76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d11a      	bne.n	8008bc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	78db      	ldrb	r3, [r3, #3]
 8008ba8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008baa:	430b      	orrs	r3, r1
 8008bac:	4313      	orrs	r3, r2
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	785b      	ldrb	r3, [r3, #1]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d161      	bne.n	8008cb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c06:	d11f      	bne.n	8008c48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	0151      	lsls	r1, r2, #5
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	440a      	add	r2, r1
 8008c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	f003 030f 	and.w	r3, r3, #15
 8008c58:	2101      	movs	r1, #1
 8008c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	43db      	mvns	r3, r3
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c68:	4013      	ands	r3, r2
 8008c6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c72:	69da      	ldr	r2, [r3, #28]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	f003 030f 	and.w	r3, r3, #15
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	43db      	mvns	r3, r3
 8008c86:	68f9      	ldr	r1, [r7, #12]
 8008c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	0159      	lsls	r1, r3, #5
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	440b      	add	r3, r1
 8008ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008caa:	4619      	mov	r1, r3
 8008cac:	4b35      	ldr	r3, [pc, #212]	; (8008d84 <USB_DeactivateEndpoint+0x1b0>)
 8008cae:	4013      	ands	r3, r2
 8008cb0:	600b      	str	r3, [r1, #0]
 8008cb2:	e060      	b.n	8008d76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cca:	d11f      	bne.n	8008d0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	0151      	lsls	r1, r2, #5
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	440a      	add	r2, r1
 8008d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d22:	041b      	lsls	r3, r3, #16
 8008d24:	43db      	mvns	r3, r3
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d36:	69da      	ldr	r2, [r3, #28]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	f003 030f 	and.w	r3, r3, #15
 8008d40:	2101      	movs	r1, #1
 8008d42:	fa01 f303 	lsl.w	r3, r1, r3
 8008d46:	041b      	lsls	r3, r3, #16
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	68f9      	ldr	r1, [r7, #12]
 8008d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d50:	4013      	ands	r3, r2
 8008d52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	0159      	lsls	r1, r3, #5
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	440b      	add	r3, r1
 8008d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <USB_DeactivateEndpoint+0x1b4>)
 8008d72:	4013      	ands	r3, r2
 8008d74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	ec337800 	.word	0xec337800
 8008d88:	eff37800 	.word	0xeff37800

08008d8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08a      	sub	sp, #40	; 0x28
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	785b      	ldrb	r3, [r3, #1]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	f040 815c 	bne.w	8009066 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d132      	bne.n	8008e1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	69fa      	ldr	r2, [r7, #28]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008dd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008dd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	0151      	lsls	r1, r2, #5
 8008dec:	69fa      	ldr	r2, [r7, #28]
 8008dee:	440a      	add	r2, r1
 8008df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008df8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	0151      	lsls	r1, r2, #5
 8008e0c:	69fa      	ldr	r2, [r7, #28]
 8008e0e:	440a      	add	r2, r1
 8008e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e14:	0cdb      	lsrs	r3, r3, #19
 8008e16:	04db      	lsls	r3, r3, #19
 8008e18:	6113      	str	r3, [r2, #16]
 8008e1a:	e074      	b.n	8008f06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	0151      	lsls	r1, r2, #5
 8008e2e:	69fa      	ldr	r2, [r7, #28]
 8008e30:	440a      	add	r2, r1
 8008e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e36:	0cdb      	lsrs	r3, r3, #19
 8008e38:	04db      	lsls	r3, r3, #19
 8008e3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6c:	691a      	ldr	r2, [r3, #16]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6959      	ldr	r1, [r3, #20]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	440b      	add	r3, r1
 8008e78:	1e59      	subs	r1, r3, #1
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e82:	04d9      	lsls	r1, r3, #19
 8008e84:	4b9d      	ldr	r3, [pc, #628]	; (80090fc <USB_EPStartXfer+0x370>)
 8008e86:	400b      	ands	r3, r1
 8008e88:	69b9      	ldr	r1, [r7, #24]
 8008e8a:	0148      	lsls	r0, r1, #5
 8008e8c:	69f9      	ldr	r1, [r7, #28]
 8008e8e:	4401      	add	r1, r0
 8008e90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e94:	4313      	orrs	r3, r2
 8008e96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea4:	691a      	ldr	r2, [r3, #16]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eae:	69b9      	ldr	r1, [r7, #24]
 8008eb0:	0148      	lsls	r0, r1, #5
 8008eb2:	69f9      	ldr	r1, [r7, #28]
 8008eb4:	4401      	add	r1, r0
 8008eb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	78db      	ldrb	r3, [r3, #3]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d11f      	bne.n	8008f06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ee0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008ee4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	0151      	lsls	r1, r2, #5
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	440a      	add	r2, r1
 8008efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d14b      	bne.n	8008fa4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d009      	beq.n	8008f28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	461a      	mov	r2, r3
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	78db      	ldrb	r3, [r3, #3]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d128      	bne.n	8008f82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d110      	bne.n	8008f62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	0151      	lsls	r1, r2, #5
 8008f52:	69fa      	ldr	r2, [r7, #28]
 8008f54:	440a      	add	r2, r1
 8008f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	e00f      	b.n	8008f82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	0151      	lsls	r1, r2, #5
 8008f74:	69fa      	ldr	r2, [r7, #28]
 8008f76:	440a      	add	r2, r1
 8008f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	0151      	lsls	r1, r2, #5
 8008f94:	69fa      	ldr	r2, [r7, #28]
 8008f96:	440a      	add	r2, r1
 8008f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	e12f      	b.n	8009204 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	0151      	lsls	r1, r2, #5
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	440a      	add	r2, r1
 8008fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	78db      	ldrb	r3, [r3, #3]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d015      	beq.n	8008ff8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8117 	beq.w	8009204 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	f003 030f 	and.w	r3, r3, #15
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fec:	69f9      	ldr	r1, [r7, #28]
 8008fee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	634b      	str	r3, [r1, #52]	; 0x34
 8008ff6:	e105      	b.n	8009204 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009004:	2b00      	cmp	r3, #0
 8009006:	d110      	bne.n	800902a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	440a      	add	r2, r1
 800901e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009022:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009026:	6013      	str	r3, [r2, #0]
 8009028:	e00f      	b.n	800904a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	440a      	add	r2, r1
 8009040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009048:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	68d9      	ldr	r1, [r3, #12]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	781a      	ldrb	r2, [r3, #0]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	b298      	uxth	r0, r3
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	4603      	mov	r3, r0
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fa2b 	bl	80094ba <USB_WritePacket>
 8009064:	e0ce      	b.n	8009204 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	0151      	lsls	r1, r2, #5
 8009078:	69fa      	ldr	r2, [r7, #28]
 800907a:	440a      	add	r2, r1
 800907c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009080:	0cdb      	lsrs	r3, r3, #19
 8009082:	04db      	lsls	r3, r3, #19
 8009084:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	69fa      	ldr	r2, [r7, #28]
 800909a:	440a      	add	r2, r1
 800909c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d126      	bne.n	8009100 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090be:	691a      	ldr	r2, [r3, #16]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090c8:	69b9      	ldr	r1, [r7, #24]
 80090ca:	0148      	lsls	r0, r1, #5
 80090cc:	69f9      	ldr	r1, [r7, #28]
 80090ce:	4401      	add	r1, r0
 80090d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090d4:	4313      	orrs	r3, r2
 80090d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	0151      	lsls	r1, r2, #5
 80090ea:	69fa      	ldr	r2, [r7, #28]
 80090ec:	440a      	add	r2, r1
 80090ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090f6:	6113      	str	r3, [r2, #16]
 80090f8:	e036      	b.n	8009168 <USB_EPStartXfer+0x3dc>
 80090fa:	bf00      	nop
 80090fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	695a      	ldr	r2, [r3, #20]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	4413      	add	r3, r2
 800910a:	1e5a      	subs	r2, r3, #1
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	fbb2 f3f3 	udiv	r3, r2, r3
 8009114:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009122:	691a      	ldr	r2, [r3, #16]
 8009124:	8afb      	ldrh	r3, [r7, #22]
 8009126:	04d9      	lsls	r1, r3, #19
 8009128:	4b39      	ldr	r3, [pc, #228]	; (8009210 <USB_EPStartXfer+0x484>)
 800912a:	400b      	ands	r3, r1
 800912c:	69b9      	ldr	r1, [r7, #24]
 800912e:	0148      	lsls	r0, r1, #5
 8009130:	69f9      	ldr	r1, [r7, #28]
 8009132:	4401      	add	r1, r0
 8009134:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009138:	4313      	orrs	r3, r2
 800913a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009148:	691a      	ldr	r2, [r3, #16]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	8af9      	ldrh	r1, [r7, #22]
 8009150:	fb01 f303 	mul.w	r3, r1, r3
 8009154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009158:	69b9      	ldr	r1, [r7, #24]
 800915a:	0148      	lsls	r0, r1, #5
 800915c:	69f9      	ldr	r1, [r7, #28]
 800915e:	4401      	add	r1, r0
 8009160:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009164:	4313      	orrs	r3, r2
 8009166:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d10d      	bne.n	800918a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d009      	beq.n	800918a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	68d9      	ldr	r1, [r3, #12]
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009186:	460a      	mov	r2, r1
 8009188:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	78db      	ldrb	r3, [r3, #3]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d128      	bne.n	80091e4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d110      	bne.n	80091c4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	0151      	lsls	r1, r2, #5
 80091b4:	69fa      	ldr	r2, [r7, #28]
 80091b6:	440a      	add	r2, r1
 80091b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	e00f      	b.n	80091e4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	0151      	lsls	r1, r2, #5
 80091d6:	69fa      	ldr	r2, [r7, #28]
 80091d8:	440a      	add	r2, r1
 80091da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	0151      	lsls	r1, r2, #5
 80091f6:	69fa      	ldr	r2, [r7, #28]
 80091f8:	440a      	add	r2, r1
 80091fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009202:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3720      	adds	r7, #32
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	1ff80000 	.word	0x1ff80000

08009214 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	785b      	ldrb	r3, [r3, #1]
 8009230:	2b01      	cmp	r3, #1
 8009232:	f040 80cd 	bne.w	80093d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d132      	bne.n	80092a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	015a      	lsls	r2, r3, #5
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	4413      	add	r3, r2
 8009246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	0151      	lsls	r1, r2, #5
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	440a      	add	r2, r1
 8009254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009258:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800925c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	0151      	lsls	r1, r2, #5
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	440a      	add	r2, r1
 8009278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800927c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009280:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	4413      	add	r3, r2
 800928a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	0151      	lsls	r1, r2, #5
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	440a      	add	r2, r1
 8009298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800929c:	0cdb      	lsrs	r3, r3, #19
 800929e:	04db      	lsls	r3, r3, #19
 80092a0:	6113      	str	r3, [r2, #16]
 80092a2:	e04e      	b.n	8009342 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	0151      	lsls	r1, r2, #5
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	440a      	add	r2, r1
 80092ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092be:	0cdb      	lsrs	r3, r3, #19
 80092c0:	04db      	lsls	r3, r3, #19
 80092c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	0151      	lsls	r1, r2, #5
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	440a      	add	r2, r1
 80092da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	695a      	ldr	r2, [r3, #20]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d903      	bls.n	80092fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	0151      	lsls	r1, r2, #5
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	440a      	add	r2, r1
 8009312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800931a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009328:	691a      	ldr	r2, [r3, #16]
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009332:	6939      	ldr	r1, [r7, #16]
 8009334:	0148      	lsls	r0, r1, #5
 8009336:	6979      	ldr	r1, [r7, #20]
 8009338:	4401      	add	r1, r0
 800933a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800933e:	4313      	orrs	r3, r2
 8009340:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009342:	79fb      	ldrb	r3, [r7, #7]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d11e      	bne.n	8009386 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d009      	beq.n	8009364 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935c:	461a      	mov	r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	0151      	lsls	r1, r2, #5
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	440a      	add	r2, r1
 800937a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800937e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	e092      	b.n	80094ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	4413      	add	r3, r2
 800938e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	0151      	lsls	r1, r2, #5
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	440a      	add	r2, r1
 800939c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d07e      	beq.n	80094ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	2101      	movs	r1, #1
 80093c0:	fa01 f303 	lsl.w	r3, r1, r3
 80093c4:	6979      	ldr	r1, [r7, #20]
 80093c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093ca:	4313      	orrs	r3, r2
 80093cc:	634b      	str	r3, [r1, #52]	; 0x34
 80093ce:	e06d      	b.n	80094ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	0151      	lsls	r1, r2, #5
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	440a      	add	r2, r1
 80093e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ea:	0cdb      	lsrs	r3, r3, #19
 80093ec:	04db      	lsls	r3, r3, #19
 80093ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	0151      	lsls	r1, r2, #5
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	440a      	add	r2, r1
 8009406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800940a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800940e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009412:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	0151      	lsls	r1, r2, #5
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	440a      	add	r2, r1
 800943a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800943e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009442:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009450:	691a      	ldr	r2, [r3, #16]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800945a:	6939      	ldr	r1, [r7, #16]
 800945c:	0148      	lsls	r0, r1, #5
 800945e:	6979      	ldr	r1, [r7, #20]
 8009460:	4401      	add	r1, r0
 8009462:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009466:	4313      	orrs	r3, r2
 8009468:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d10d      	bne.n	800948c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d009      	beq.n	800948c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	68d9      	ldr	r1, [r3, #12]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	4413      	add	r3, r2
 8009484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009488:	460a      	mov	r2, r1
 800948a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	0151      	lsls	r1, r2, #5
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	440a      	add	r2, r1
 80094a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b089      	sub	sp, #36	; 0x24
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	4611      	mov	r1, r2
 80094c6:	461a      	mov	r2, r3
 80094c8:	460b      	mov	r3, r1
 80094ca:	71fb      	strb	r3, [r7, #7]
 80094cc:	4613      	mov	r3, r2
 80094ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80094d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d11a      	bne.n	8009516 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094e0:	88bb      	ldrh	r3, [r7, #4]
 80094e2:	3303      	adds	r3, #3
 80094e4:	089b      	lsrs	r3, r3, #2
 80094e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094e8:	2300      	movs	r3, #0
 80094ea:	61bb      	str	r3, [r7, #24]
 80094ec:	e00f      	b.n	800950e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	031a      	lsls	r2, r3, #12
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094fa:	461a      	mov	r2, r3
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	3304      	adds	r3, #4
 8009506:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	3301      	adds	r3, #1
 800950c:	61bb      	str	r3, [r7, #24]
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	429a      	cmp	r2, r3
 8009514:	d3eb      	bcc.n	80094ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3724      	adds	r7, #36	; 0x24
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009524:	b480      	push	{r7}
 8009526:	b089      	sub	sp, #36	; 0x24
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	4613      	mov	r3, r2
 8009530:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800953a:	88fb      	ldrh	r3, [r7, #6]
 800953c:	3303      	adds	r3, #3
 800953e:	089b      	lsrs	r3, r3, #2
 8009540:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009542:	2300      	movs	r3, #0
 8009544:	61bb      	str	r3, [r7, #24]
 8009546:	e00b      	b.n	8009560 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	601a      	str	r2, [r3, #0]
    pDest++;
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	3304      	adds	r3, #4
 8009558:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	3301      	adds	r3, #1
 800955e:	61bb      	str	r3, [r7, #24]
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	429a      	cmp	r2, r3
 8009566:	d3ef      	bcc.n	8009548 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009568:	69fb      	ldr	r3, [r7, #28]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3724      	adds	r7, #36	; 0x24
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009576:	b480      	push	{r7}
 8009578:	b085      	sub	sp, #20
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	785b      	ldrb	r3, [r3, #1]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d12c      	bne.n	80095ec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	db12      	blt.n	80095ca <USB_EPSetStall+0x54>
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00f      	beq.n	80095ca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	0151      	lsls	r1, r2, #5
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	440a      	add	r2, r1
 80095c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095c8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	0151      	lsls	r1, r2, #5
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	440a      	add	r2, r1
 80095e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	e02b      	b.n	8009644 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	db12      	blt.n	8009624 <USB_EPSetStall+0xae>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00f      	beq.n	8009624 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	440a      	add	r2, r1
 800961a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800961e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009622:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	0151      	lsls	r1, r2, #5
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	440a      	add	r2, r1
 800963a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800963e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009652:	b480      	push	{r7}
 8009654:	b085      	sub	sp, #20
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d128      	bne.n	80096c0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	0151      	lsls	r1, r2, #5
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	440a      	add	r2, r1
 8009684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009688:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800968c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	78db      	ldrb	r3, [r3, #3]
 8009692:	2b03      	cmp	r3, #3
 8009694:	d003      	beq.n	800969e <USB_EPClearStall+0x4c>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	78db      	ldrb	r3, [r3, #3]
 800969a:	2b02      	cmp	r3, #2
 800969c:	d138      	bne.n	8009710 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	0151      	lsls	r1, r2, #5
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	440a      	add	r2, r1
 80096b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096bc:	6013      	str	r3, [r2, #0]
 80096be:	e027      	b.n	8009710 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	0151      	lsls	r1, r2, #5
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	440a      	add	r2, r1
 80096d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	78db      	ldrb	r3, [r3, #3]
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	d003      	beq.n	80096f0 <USB_EPClearStall+0x9e>
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	78db      	ldrb	r3, [r3, #3]
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d10f      	bne.n	8009710 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	0151      	lsls	r1, r2, #5
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	440a      	add	r2, r1
 8009706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800970a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800970e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800971e:	b480      	push	{r7}
 8009720:	b085      	sub	sp, #20
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	460b      	mov	r3, r1
 8009728:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800973c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009740:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	78fb      	ldrb	r3, [r7, #3]
 800974c:	011b      	lsls	r3, r3, #4
 800974e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009752:	68f9      	ldr	r1, [r7, #12]
 8009754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009758:	4313      	orrs	r3, r2
 800975a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800976a:	b480      	push	{r7}
 800976c:	b085      	sub	sp, #20
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009784:	f023 0303 	bic.w	r3, r3, #3
 8009788:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009798:	f023 0302 	bic.w	r3, r3, #2
 800979c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80097c6:	f023 0303 	bic.w	r3, r3, #3
 80097ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097da:	f043 0302 	orr.w	r3, r3, #2
 80097de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b085      	sub	sp, #20
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4013      	ands	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009806:	68fb      	ldr	r3, [r7, #12]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	4013      	ands	r3, r2
 8009836:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	0c1b      	lsrs	r3, r3, #16
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	4013      	ands	r3, r2
 800986a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	b29b      	uxth	r3, r3
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	4013      	ands	r3, r2
 80098a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098aa:	68bb      	ldr	r3, [r7, #8]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80098dc:	78fb      	ldrb	r3, [r7, #3]
 80098de:	f003 030f 	and.w	r3, r3, #15
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	fa22 f303 	lsr.w	r3, r2, r3
 80098e8:	01db      	lsls	r3, r3, #7
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	4013      	ands	r3, r2
 8009904:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009906:	68bb      	ldr	r3, [r7, #8]
}
 8009908:	4618      	mov	r0, r3
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	f003 0301 	and.w	r3, r3, #1
}
 8009924:	4618      	mov	r0, r3
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800994a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800994e:	f023 0307 	bic.w	r3, r3, #7
 8009952:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009966:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
	...

08009978 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	460b      	mov	r3, r1
 8009982:	607a      	str	r2, [r7, #4]
 8009984:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	333c      	adds	r3, #60	; 0x3c
 800998e:	3304      	adds	r3, #4
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	4a26      	ldr	r2, [pc, #152]	; (8009a30 <USB_EP0_OutStart+0xb8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d90a      	bls.n	80099b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099ac:	d101      	bne.n	80099b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	e037      	b.n	8009a22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	461a      	mov	r2, r3
 80099ba:	2300      	movs	r3, #0
 80099bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e0:	f043 0318 	orr.w	r3, r3, #24
 80099e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80099f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80099fa:	7afb      	ldrb	r3, [r7, #11]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d10f      	bne.n	8009a20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a06:	461a      	mov	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009a1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	4f54300a 	.word	0x4f54300a

08009a34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	3301      	adds	r3, #1
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4a13      	ldr	r2, [pc, #76]	; (8009a98 <USB_CoreReset+0x64>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d901      	bls.n	8009a52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e01b      	b.n	8009a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	daf2      	bge.n	8009a40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	f043 0201 	orr.w	r2, r3, #1
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4a09      	ldr	r2, [pc, #36]	; (8009a98 <USB_CoreReset+0x64>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d901      	bls.n	8009a7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e006      	b.n	8009a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d0f0      	beq.n	8009a6a <USB_CoreReset+0x36>

  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	00030d40 	.word	0x00030d40

08009a9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009aa0:	4904      	ldr	r1, [pc, #16]	; (8009ab4 <MX_FATFS_Init+0x18>)
 8009aa2:	4805      	ldr	r0, [pc, #20]	; (8009ab8 <MX_FATFS_Init+0x1c>)
 8009aa4:	f004 f95a 	bl	800dd5c <FATFS_LinkDriver>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	461a      	mov	r2, r3
 8009aac:	4b03      	ldr	r3, [pc, #12]	; (8009abc <MX_FATFS_Init+0x20>)
 8009aae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ab0:	bf00      	nop
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	200026c8 	.word	0x200026c8
 8009ab8:	08014150 	.word	0x08014150
 8009abc:	200026c4 	.word	0x200026c4

08009ac0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009ac4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009ada:	f000 f879 	bl	8009bd0 <BSP_SD_IsDetected>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d001      	beq.n	8009ae8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e012      	b.n	8009b0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009ae8:	480b      	ldr	r0, [pc, #44]	; (8009b18 <BSP_SD_Init+0x48>)
 8009aea:	f7fc fdb4 	bl	8006656 <HAL_SD_Init>
 8009aee:	4603      	mov	r3, r0
 8009af0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009af2:	79fb      	ldrb	r3, [r7, #7]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d109      	bne.n	8009b0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009afc:	4806      	ldr	r0, [pc, #24]	; (8009b18 <BSP_SD_Init+0x48>)
 8009afe:	f7fd fb8d 	bl	800721c <HAL_SD_ConfigWideBusOperation>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	2000263c 	.word	0x2000263c

08009b1c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af02      	add	r7, sp, #8
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	68f9      	ldr	r1, [r7, #12]
 8009b38:	4806      	ldr	r0, [pc, #24]	; (8009b54 <BSP_SD_ReadBlocks+0x38>)
 8009b3a:	f7fc fe3b 	bl	80067b4 <HAL_SD_ReadBlocks>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	2000263c 	.word	0x2000263c

08009b58 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af02      	add	r7, sp, #8
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	68f9      	ldr	r1, [r7, #12]
 8009b74:	4806      	ldr	r0, [pc, #24]	; (8009b90 <BSP_SD_WriteBlocks+0x38>)
 8009b76:	f7fc fffb 	bl	8006b70 <HAL_SD_WriteBlocks>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	2000263c 	.word	0x2000263c

08009b94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009b98:	4805      	ldr	r0, [pc, #20]	; (8009bb0 <BSP_SD_GetCardState+0x1c>)
 8009b9a:	f7fd fbd9 	bl	8007350 <HAL_SD_GetCardState>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	bf14      	ite	ne
 8009ba4:	2301      	movne	r3, #1
 8009ba6:	2300      	moveq	r3, #0
 8009ba8:	b2db      	uxtb	r3, r3
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	2000263c 	.word	0x2000263c

08009bb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	4803      	ldr	r0, [pc, #12]	; (8009bcc <BSP_SD_GetCardInfo+0x18>)
 8009bc0:	f7fd fb00 	bl	80071c4 <HAL_SD_GetCardInfo>
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	2000263c 	.word	0x2000263c

08009bd0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009bda:	f000 f80b 	bl	8009bf4 <BSP_PlatformIsDetected>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009be4:	2300      	movs	r3, #0
 8009be6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	b2db      	uxtb	r3, r3
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009c02:	4807      	ldr	r0, [pc, #28]	; (8009c20 <BSP_PlatformIsDetected+0x2c>)
 8009c04:	f7f9 ff74 	bl	8003af0 <HAL_GPIO_ReadPin>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
 8009c12:	2301      	movs	r3, #1
 8009c14:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */
    return status;
 8009c16:	79fb      	ldrb	r3, [r7, #7]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	40020800 	.word	0x40020800

08009c24 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009c2e:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <SD_CheckStatus+0x38>)
 8009c30:	2201      	movs	r2, #1
 8009c32:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009c34:	f7ff ffae 	bl	8009b94 <BSP_SD_GetCardState>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d107      	bne.n	8009c4e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009c3e:	4b07      	ldr	r3, [pc, #28]	; (8009c5c <SD_CheckStatus+0x38>)
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	f023 0301 	bic.w	r3, r3, #1
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	4b04      	ldr	r3, [pc, #16]	; (8009c5c <SD_CheckStatus+0x38>)
 8009c4c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009c4e:	4b03      	ldr	r3, [pc, #12]	; (8009c5c <SD_CheckStatus+0x38>)
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	b2db      	uxtb	r3, r3
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20000051 	.word	0x20000051

08009c60 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009c6a:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <SD_initialize+0x38>)
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009c70:	f7ff ff2e 	bl	8009ad0 <BSP_SD_Init>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d107      	bne.n	8009c8a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7ff ffd1 	bl	8009c24 <SD_CheckStatus>
 8009c82:	4603      	mov	r3, r0
 8009c84:	461a      	mov	r2, r3
 8009c86:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <SD_initialize+0x38>)
 8009c88:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009c8a:	4b03      	ldr	r3, [pc, #12]	; (8009c98 <SD_initialize+0x38>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	b2db      	uxtb	r3, r3
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	20000051 	.word	0x20000051

08009c9c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009ca6:	79fb      	ldrb	r3, [r7, #7]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff ffbb 	bl	8009c24 <SD_CheckStatus>
 8009cae:	4603      	mov	r3, r0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	6879      	ldr	r1, [r7, #4]
 8009cd4:	68b8      	ldr	r0, [r7, #8]
 8009cd6:	f7ff ff21 	bl	8009b1c <BSP_SD_ReadBlocks>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d107      	bne.n	8009cf0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009ce0:	bf00      	nop
 8009ce2:	f7ff ff57 	bl	8009b94 <BSP_SD_GetCardState>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1fa      	bne.n	8009ce2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
 8009d06:	4603      	mov	r3, r0
 8009d08:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	6879      	ldr	r1, [r7, #4]
 8009d16:	68b8      	ldr	r0, [r7, #8]
 8009d18:	f7ff ff1e 	bl	8009b58 <BSP_SD_WriteBlocks>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d107      	bne.n	8009d32 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009d22:	bf00      	nop
 8009d24:	f7ff ff36 	bl	8009b94 <BSP_SD_GetCardState>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1fa      	bne.n	8009d24 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08c      	sub	sp, #48	; 0x30
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	603a      	str	r2, [r7, #0]
 8009d46:	71fb      	strb	r3, [r7, #7]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d52:	4b25      	ldr	r3, [pc, #148]	; (8009de8 <SD_ioctl+0xac>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f003 0301 	and.w	r3, r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <SD_ioctl+0x28>
 8009d60:	2303      	movs	r3, #3
 8009d62:	e03c      	b.n	8009dde <SD_ioctl+0xa2>

  switch (cmd)
 8009d64:	79bb      	ldrb	r3, [r7, #6]
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d834      	bhi.n	8009dd4 <SD_ioctl+0x98>
 8009d6a:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <SD_ioctl+0x34>)
 8009d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d70:	08009d81 	.word	0x08009d81
 8009d74:	08009d89 	.word	0x08009d89
 8009d78:	08009da1 	.word	0x08009da1
 8009d7c:	08009dbb 	.word	0x08009dbb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d86:	e028      	b.n	8009dda <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d88:	f107 030c 	add.w	r3, r7, #12
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff ff11 	bl	8009bb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d9e:	e01c      	b.n	8009dda <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009da0:	f107 030c 	add.w	r3, r7, #12
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7ff ff05 	bl	8009bb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009db8:	e00f      	b.n	8009dda <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009dba:	f107 030c 	add.w	r3, r7, #12
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff fef8 	bl	8009bb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	0a5a      	lsrs	r2, r3, #9
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009dd2:	e002      	b.n	8009dda <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009dd4:	2304      	movs	r3, #4
 8009dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3730      	adds	r7, #48	; 0x30
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	20000051 	.word	0x20000051

08009dec <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 8009df8:	2044      	movs	r0, #68	; 0x44
 8009dfa:	f004 fcdd 	bl	800e7b8 <USBD_static_malloc>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e016      	b.n	8009e42 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e1a:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 8009e1c:	2340      	movs	r3, #64	; 0x40
 8009e1e:	2202      	movs	r2, #2
 8009e20:	2181      	movs	r1, #129	; 0x81
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f004 fba5 	bl	800e572 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	2101      	movs	r1, #1
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f004 fb9f 	bl	800e572 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8009e34:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 8009e36:	2340      	movs	r3, #64	; 0x40
 8009e38:	2101      	movs	r1, #1
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f004 fc88 	bl	800e750 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8009e40:	2300      	movs	r3, #0
  }
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	460b      	mov	r3, r1
 8009e54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 8009e56:	2181      	movs	r1, #129	; 0x81
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f004 fbb0 	bl	800e5be <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 8009e5e:	2101      	movs	r1, #1
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f004 fbac 	bl	800e5be <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d007      	beq.n	8009e96 <USBD_Midi_Setup+0x26>
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	d10b      	bne.n	8009ea2 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 f937 	bl	800b100 <USBD_CtlError>
      return USBD_FAIL;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e006      	b.n	8009ea4 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 f931 	bl	800b100 <USBD_CtlError>
      return USBD_FAIL;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e000      	b.n	8009ea4 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2265      	movs	r2, #101	; 0x65
 8009eb8:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 8009eba:	4b03      	ldr	r3, [pc, #12]	; (8009ec8 <USBD_Midi_GetCfgDesc+0x1c>)
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr
 8009ec8:	2000008c 	.word	0x2000008c

08009ecc <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b083      	sub	sp, #12
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f6e:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 8009f70:	78fb      	ldrb	r3, [r7, #3]
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f004 fc0c 	bl	800e792 <USBD_LL_GetRxDataSize>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8009f84:	2300      	movs	r3, #0
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	e00c      	b.n	8009fa4 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68f9      	ldr	r1, [r7, #12]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	440a      	add	r2, r1
 8009f98:	2104      	movs	r1, #4
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d3ed      	bcc.n	8009f8a <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 8009fae:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 8009fb0:	2340      	movs	r3, #64	; 0x40
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f004 fbcb 	bl	800e750 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	220a      	movs	r2, #10
 8009fd0:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 8009fd2:	4b03      	ldr	r3, [pc, #12]	; (8009fe0 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	200000f4 	.word	0x200000f4

08009fe4 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d005      	beq.n	800a004 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a004:	7bfb      	ldrb	r3, [r7, #15]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b086      	sub	sp, #24
 800a016:	af00      	add	r7, sp, #0
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	60b9      	str	r1, [r7, #8]
 800a01c:	4613      	mov	r3, r2
 800a01e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a026:	2303      	movs	r3, #3
 800a028:	e01f      	b.n	800a06a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	79fa      	ldrb	r2, [r7, #7]
 800a05c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f004 fa20 	bl	800e4a4 <USBD_LL_Init>
 800a064:	4603      	mov	r3, r0
 800a066:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a068:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a086:	2303      	movs	r3, #3
 800a088:	e016      	b.n	800a0b8 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	f107 020e 	add.w	r2, r7, #14
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	4798      	blx	r3
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f004 fa37 	bl	800e53c <USBD_LL_Start>
 800a0ce:	4603      	mov	r3, r0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b084      	sub	sp, #16
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a104:	2b00      	cmp	r3, #0
 800a106:	d009      	beq.n	800a11c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	4611      	mov	r1, r2
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	4798      	blx	r3
 800a118:	4603      	mov	r3, r0
 800a11a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d007      	beq.n	800a14c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	78fa      	ldrb	r2, [r7, #3]
 800a146:	4611      	mov	r1, r2
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	4798      	blx	r3
  }

  return USBD_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 ff8f 	bl	800b08c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2201      	movs	r2, #1
 800a172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a17c:	461a      	mov	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a18a:	f003 031f 	and.w	r3, r3, #31
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d01a      	beq.n	800a1c8 <USBD_LL_SetupStage+0x72>
 800a192:	2b02      	cmp	r3, #2
 800a194:	d822      	bhi.n	800a1dc <USBD_LL_SetupStage+0x86>
 800a196:	2b00      	cmp	r3, #0
 800a198:	d002      	beq.n	800a1a0 <USBD_LL_SetupStage+0x4a>
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d00a      	beq.n	800a1b4 <USBD_LL_SetupStage+0x5e>
 800a19e:	e01d      	b.n	800a1dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fa61 	bl	800a670 <USBD_StdDevReq>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b2:	e020      	b.n	800a1f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fac5 	bl	800a74c <USBD_StdItfReq>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c6:	e016      	b.n	800a1f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fb04 	bl	800a7de <USBD_StdEPReq>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1da:	e00c      	b.n	800a1f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f004 fa06 	bl	800e5fc <USBD_LL_StallEP>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1f4:	bf00      	nop
  }

  return ret;
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	460b      	mov	r3, r1
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a20e:	7afb      	ldrb	r3, [r7, #11]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d138      	bne.n	800a286 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a21a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a222:	2b03      	cmp	r3, #3
 800a224:	d14a      	bne.n	800a2bc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d913      	bls.n	800a25a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	689a      	ldr	r2, [r3, #8]
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	1ad2      	subs	r2, r2, r3
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	4293      	cmp	r3, r2
 800a24a:	bf28      	it	cs
 800a24c:	4613      	movcs	r3, r2
 800a24e:	461a      	mov	r2, r3
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 fff1 	bl	800b23a <USBD_CtlContinueRx>
 800a258:	e030      	b.n	800a2bc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b03      	cmp	r3, #3
 800a264:	d10b      	bne.n	800a27e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d005      	beq.n	800a27e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 ffec 	bl	800b25c <USBD_CtlSendStatus>
 800a284:	e01a      	b.n	800a2bc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d114      	bne.n	800a2bc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00e      	beq.n	800a2bc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	7afa      	ldrb	r2, [r7, #11]
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	4798      	blx	r3
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ba:	e000      	b.n	800a2be <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3718      	adds	r7, #24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b086      	sub	sp, #24
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	607a      	str	r2, [r7, #4]
 800a2d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a2d4:	7afb      	ldrb	r3, [r7, #11]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d16b      	bne.n	800a3b2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3314      	adds	r3, #20
 800a2de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d156      	bne.n	800a398 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	689a      	ldr	r2, [r3, #8]
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d914      	bls.n	800a320 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	689a      	ldr	r2, [r3, #8]
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	1ad2      	subs	r2, r2, r3
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	461a      	mov	r2, r3
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f000 ff83 	bl	800b218 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a312:	2300      	movs	r3, #0
 800a314:	2200      	movs	r2, #0
 800a316:	2100      	movs	r1, #0
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f004 fa19 	bl	800e750 <USBD_LL_PrepareReceive>
 800a31e:	e03b      	b.n	800a398 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	68da      	ldr	r2, [r3, #12]
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d11c      	bne.n	800a366 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a334:	429a      	cmp	r2, r3
 800a336:	d316      	bcc.n	800a366 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a342:	429a      	cmp	r2, r3
 800a344:	d20f      	bcs.n	800a366 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a346:	2200      	movs	r2, #0
 800a348:	2100      	movs	r1, #0
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f000 ff64 	bl	800b218 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a358:	2300      	movs	r3, #0
 800a35a:	2200      	movs	r2, #0
 800a35c:	2100      	movs	r1, #0
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f004 f9f6 	bl	800e750 <USBD_LL_PrepareReceive>
 800a364:	e018      	b.n	800a398 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d10b      	bne.n	800a38a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d005      	beq.n	800a38a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a38a:	2180      	movs	r1, #128	; 0x80
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f004 f935 	bl	800e5fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 ff75 	bl	800b282 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d122      	bne.n	800a3e8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f7ff fe98 	bl	800a0d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a3b0:	e01a      	b.n	800a3e8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d114      	bne.n	800a3e8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00e      	beq.n	800a3e8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	7afa      	ldrb	r2, [r7, #11]
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	4798      	blx	r3
 800a3da:	4603      	mov	r3, r0
 800a3dc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	e000      	b.n	800a3ea <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a422:	2303      	movs	r3, #3
 800a424:	e02f      	b.n	800a486 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00f      	beq.n	800a450 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d009      	beq.n	800a450 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	6852      	ldr	r2, [r2, #4]
 800a448:	b2d2      	uxtb	r2, r2
 800a44a:	4611      	mov	r1, r2
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a450:	2340      	movs	r3, #64	; 0x40
 800a452:	2200      	movs	r2, #0
 800a454:	2100      	movs	r1, #0
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f004 f88b 	bl	800e572 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2240      	movs	r2, #64	; 0x40
 800a468:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a46c:	2340      	movs	r3, #64	; 0x40
 800a46e:	2200      	movs	r2, #0
 800a470:	2180      	movs	r1, #128	; 0x80
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f004 f87d 	bl	800e572 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2240      	movs	r2, #64	; 0x40
 800a482:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	460b      	mov	r3, r1
 800a498:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	78fa      	ldrb	r2, [r7, #3]
 800a49e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2204      	movs	r2, #4
 800a4c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	d106      	bne.n	800a4fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b082      	sub	sp, #8
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e012      	b.n	800a546 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b03      	cmp	r3, #3
 800a52a:	d10b      	bne.n	800a544 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a532:	69db      	ldr	r3, [r3, #28]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d005      	beq.n	800a544 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a53e:	69db      	ldr	r3, [r3, #28]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a564:	2303      	movs	r3, #3
 800a566:	e014      	b.n	800a592 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	2b03      	cmp	r3, #3
 800a572:	d10d      	bne.n	800a590 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d007      	beq.n	800a590 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	78fa      	ldrb	r2, [r7, #3]
 800a58a:	4611      	mov	r1, r2
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e014      	b.n	800a5de <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d10d      	bne.n	800a5dc <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d007      	beq.n	800a5dc <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	78fa      	ldrb	r2, [r7, #3]
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b083      	sub	sp, #12
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a612:	2b00      	cmp	r3, #0
 800a614:	d009      	beq.n	800a62a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	6852      	ldr	r2, [r2, #4]
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	4611      	mov	r1, r2
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
  }

  return USBD_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	3301      	adds	r3, #1
 800a64a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a652:	8a3b      	ldrh	r3, [r7, #16]
 800a654:	021b      	lsls	r3, r3, #8
 800a656:	b21a      	sxth	r2, r3
 800a658:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	b21b      	sxth	r3, r3
 800a660:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a662:	89fb      	ldrh	r3, [r7, #14]
}
 800a664:	4618      	mov	r0, r3
 800a666:	371c      	adds	r7, #28
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a686:	2b40      	cmp	r3, #64	; 0x40
 800a688:	d005      	beq.n	800a696 <USBD_StdDevReq+0x26>
 800a68a:	2b40      	cmp	r3, #64	; 0x40
 800a68c:	d853      	bhi.n	800a736 <USBD_StdDevReq+0xc6>
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00b      	beq.n	800a6aa <USBD_StdDevReq+0x3a>
 800a692:	2b20      	cmp	r3, #32
 800a694:	d14f      	bne.n	800a736 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	4798      	blx	r3
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6a8:	e04a      	b.n	800a740 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	785b      	ldrb	r3, [r3, #1]
 800a6ae:	2b09      	cmp	r3, #9
 800a6b0:	d83b      	bhi.n	800a72a <USBD_StdDevReq+0xba>
 800a6b2:	a201      	add	r2, pc, #4	; (adr r2, 800a6b8 <USBD_StdDevReq+0x48>)
 800a6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b8:	0800a70d 	.word	0x0800a70d
 800a6bc:	0800a721 	.word	0x0800a721
 800a6c0:	0800a72b 	.word	0x0800a72b
 800a6c4:	0800a717 	.word	0x0800a717
 800a6c8:	0800a72b 	.word	0x0800a72b
 800a6cc:	0800a6eb 	.word	0x0800a6eb
 800a6d0:	0800a6e1 	.word	0x0800a6e1
 800a6d4:	0800a72b 	.word	0x0800a72b
 800a6d8:	0800a703 	.word	0x0800a703
 800a6dc:	0800a6f5 	.word	0x0800a6f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f9de 	bl	800aaa4 <USBD_GetDescriptor>
          break;
 800a6e8:	e024      	b.n	800a734 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fb43 	bl	800ad78 <USBD_SetAddress>
          break;
 800a6f2:	e01f      	b.n	800a734 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fb82 	bl	800ae00 <USBD_SetConfig>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	73fb      	strb	r3, [r7, #15]
          break;
 800a700:	e018      	b.n	800a734 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fc21 	bl	800af4c <USBD_GetConfig>
          break;
 800a70a:	e013      	b.n	800a734 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fc52 	bl	800afb8 <USBD_GetStatus>
          break;
 800a714:	e00e      	b.n	800a734 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fc81 	bl	800b020 <USBD_SetFeature>
          break;
 800a71e:	e009      	b.n	800a734 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fc90 	bl	800b048 <USBD_ClrFeature>
          break;
 800a728:	e004      	b.n	800a734 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fce7 	bl	800b100 <USBD_CtlError>
          break;
 800a732:	bf00      	nop
      }
      break;
 800a734:	e004      	b.n	800a740 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fce1 	bl	800b100 <USBD_CtlError>
      break;
 800a73e:	bf00      	nop
  }

  return ret;
 800a740:	7bfb      	ldrb	r3, [r7, #15]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop

0800a74c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a762:	2b40      	cmp	r3, #64	; 0x40
 800a764:	d005      	beq.n	800a772 <USBD_StdItfReq+0x26>
 800a766:	2b40      	cmp	r3, #64	; 0x40
 800a768:	d82f      	bhi.n	800a7ca <USBD_StdItfReq+0x7e>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d001      	beq.n	800a772 <USBD_StdItfReq+0x26>
 800a76e:	2b20      	cmp	r3, #32
 800a770:	d12b      	bne.n	800a7ca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	3b01      	subs	r3, #1
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d81d      	bhi.n	800a7bc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	889b      	ldrh	r3, [r3, #4]
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b01      	cmp	r3, #1
 800a788:	d813      	bhi.n	800a7b2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	4798      	blx	r3
 800a798:	4603      	mov	r3, r0
 800a79a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	88db      	ldrh	r3, [r3, #6]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d110      	bne.n	800a7c6 <USBD_StdItfReq+0x7a>
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10d      	bne.n	800a7c6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fd56 	bl	800b25c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a7b0:	e009      	b.n	800a7c6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fca3 	bl	800b100 <USBD_CtlError>
          break;
 800a7ba:	e004      	b.n	800a7c6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fc9e 	bl	800b100 <USBD_CtlError>
          break;
 800a7c4:	e000      	b.n	800a7c8 <USBD_StdItfReq+0x7c>
          break;
 800a7c6:	bf00      	nop
      }
      break;
 800a7c8:	e004      	b.n	800a7d4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fc97 	bl	800b100 <USBD_CtlError>
      break;
 800a7d2:	bf00      	nop
  }

  return ret;
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	889b      	ldrh	r3, [r3, #4]
 800a7f0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7fa:	2b40      	cmp	r3, #64	; 0x40
 800a7fc:	d007      	beq.n	800a80e <USBD_StdEPReq+0x30>
 800a7fe:	2b40      	cmp	r3, #64	; 0x40
 800a800:	f200 8145 	bhi.w	800aa8e <USBD_StdEPReq+0x2b0>
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00c      	beq.n	800a822 <USBD_StdEPReq+0x44>
 800a808:	2b20      	cmp	r3, #32
 800a80a:	f040 8140 	bne.w	800aa8e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	4798      	blx	r3
 800a81c:	4603      	mov	r3, r0
 800a81e:	73fb      	strb	r3, [r7, #15]
      break;
 800a820:	e13a      	b.n	800aa98 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	2b03      	cmp	r3, #3
 800a828:	d007      	beq.n	800a83a <USBD_StdEPReq+0x5c>
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	f300 8129 	bgt.w	800aa82 <USBD_StdEPReq+0x2a4>
 800a830:	2b00      	cmp	r3, #0
 800a832:	d07f      	beq.n	800a934 <USBD_StdEPReq+0x156>
 800a834:	2b01      	cmp	r3, #1
 800a836:	d03c      	beq.n	800a8b2 <USBD_StdEPReq+0xd4>
 800a838:	e123      	b.n	800aa82 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b02      	cmp	r3, #2
 800a844:	d002      	beq.n	800a84c <USBD_StdEPReq+0x6e>
 800a846:	2b03      	cmp	r3, #3
 800a848:	d016      	beq.n	800a878 <USBD_StdEPReq+0x9a>
 800a84a:	e02c      	b.n	800a8a6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00d      	beq.n	800a86e <USBD_StdEPReq+0x90>
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	2b80      	cmp	r3, #128	; 0x80
 800a856:	d00a      	beq.n	800a86e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f003 fecd 	bl	800e5fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a862:	2180      	movs	r1, #128	; 0x80
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f003 fec9 	bl	800e5fc <USBD_LL_StallEP>
 800a86a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a86c:	e020      	b.n	800a8b0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fc45 	bl	800b100 <USBD_CtlError>
              break;
 800a876:	e01b      	b.n	800a8b0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	885b      	ldrh	r3, [r3, #2]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10e      	bne.n	800a89e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00b      	beq.n	800a89e <USBD_StdEPReq+0xc0>
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b80      	cmp	r3, #128	; 0x80
 800a88a:	d008      	beq.n	800a89e <USBD_StdEPReq+0xc0>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	88db      	ldrh	r3, [r3, #6]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d104      	bne.n	800a89e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f003 feaf 	bl	800e5fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fcdc 	bl	800b25c <USBD_CtlSendStatus>

              break;
 800a8a4:	e004      	b.n	800a8b0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fc29 	bl	800b100 <USBD_CtlError>
              break;
 800a8ae:	bf00      	nop
          }
          break;
 800a8b0:	e0ec      	b.n	800aa8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d002      	beq.n	800a8c4 <USBD_StdEPReq+0xe6>
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d016      	beq.n	800a8f0 <USBD_StdEPReq+0x112>
 800a8c2:	e030      	b.n	800a926 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00d      	beq.n	800a8e6 <USBD_StdEPReq+0x108>
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
 800a8cc:	2b80      	cmp	r3, #128	; 0x80
 800a8ce:	d00a      	beq.n	800a8e6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f003 fe91 	bl	800e5fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8da:	2180      	movs	r1, #128	; 0x80
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f003 fe8d 	bl	800e5fc <USBD_LL_StallEP>
 800a8e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8e4:	e025      	b.n	800a932 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fc09 	bl	800b100 <USBD_CtlError>
              break;
 800a8ee:	e020      	b.n	800a932 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	885b      	ldrh	r3, [r3, #2]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d11b      	bne.n	800a930 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f003 fe97 	bl	800e63a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fca5 	bl	800b25c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	4798      	blx	r3
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a924:	e004      	b.n	800a930 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fbe9 	bl	800b100 <USBD_CtlError>
              break;
 800a92e:	e000      	b.n	800a932 <USBD_StdEPReq+0x154>
              break;
 800a930:	bf00      	nop
          }
          break;
 800a932:	e0ab      	b.n	800aa8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d002      	beq.n	800a946 <USBD_StdEPReq+0x168>
 800a940:	2b03      	cmp	r3, #3
 800a942:	d032      	beq.n	800a9aa <USBD_StdEPReq+0x1cc>
 800a944:	e097      	b.n	800aa76 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <USBD_StdEPReq+0x17e>
 800a94c:	7bbb      	ldrb	r3, [r7, #14]
 800a94e:	2b80      	cmp	r3, #128	; 0x80
 800a950:	d004      	beq.n	800a95c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fbd3 	bl	800b100 <USBD_CtlError>
                break;
 800a95a:	e091      	b.n	800aa80 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a95c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a960:	2b00      	cmp	r3, #0
 800a962:	da0b      	bge.n	800a97c <USBD_StdEPReq+0x19e>
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	3310      	adds	r3, #16
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	4413      	add	r3, r2
 800a978:	3304      	adds	r3, #4
 800a97a:	e00b      	b.n	800a994 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	4413      	add	r3, r2
 800a992:	3304      	adds	r3, #4
 800a994:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	2200      	movs	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fc1d 	bl	800b1e2 <USBD_CtlSendData>
              break;
 800a9a8:	e06a      	b.n	800aa80 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a9aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	da11      	bge.n	800a9d6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
 800a9b4:	f003 020f 	and.w	r2, r3, #15
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4413      	add	r3, r2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	440b      	add	r3, r1
 800a9c4:	3324      	adds	r3, #36	; 0x24
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d117      	bne.n	800a9fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fb96 	bl	800b100 <USBD_CtlError>
                  break;
 800a9d4:	e054      	b.n	800aa80 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	f003 020f 	and.w	r2, r3, #15
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	440b      	add	r3, r1
 800a9e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d104      	bne.n	800a9fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fb83 	bl	800b100 <USBD_CtlError>
                  break;
 800a9fa:	e041      	b.n	800aa80 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	da0b      	bge.n	800aa1c <USBD_StdEPReq+0x23e>
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	4413      	add	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	3310      	adds	r3, #16
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	4413      	add	r3, r2
 800aa18:	3304      	adds	r3, #4
 800aa1a:	e00b      	b.n	800aa34 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa22:	4613      	mov	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	4413      	add	r3, r2
 800aa32:	3304      	adds	r3, #4
 800aa34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <USBD_StdEPReq+0x264>
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
 800aa3e:	2b80      	cmp	r3, #128	; 0x80
 800aa40:	d103      	bne.n	800aa4a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	2200      	movs	r2, #0
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	e00e      	b.n	800aa68 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f003 fe12 	bl	800e678 <USBD_LL_IsStallEP>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	e002      	b.n	800aa68 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fbb7 	bl	800b1e2 <USBD_CtlSendData>
              break;
 800aa74:	e004      	b.n	800aa80 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fb41 	bl	800b100 <USBD_CtlError>
              break;
 800aa7e:	bf00      	nop
          }
          break;
 800aa80:	e004      	b.n	800aa8c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fb3b 	bl	800b100 <USBD_CtlError>
          break;
 800aa8a:	bf00      	nop
      }
      break;
 800aa8c:	e004      	b.n	800aa98 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fb35 	bl	800b100 <USBD_CtlError>
      break;
 800aa96:	bf00      	nop
  }

  return ret;
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aab6:	2300      	movs	r3, #0
 800aab8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	885b      	ldrh	r3, [r3, #2]
 800aabe:	0a1b      	lsrs	r3, r3, #8
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	3b01      	subs	r3, #1
 800aac4:	2b06      	cmp	r3, #6
 800aac6:	f200 8128 	bhi.w	800ad1a <USBD_GetDescriptor+0x276>
 800aaca:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <USBD_GetDescriptor+0x2c>)
 800aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad0:	0800aaed 	.word	0x0800aaed
 800aad4:	0800ab05 	.word	0x0800ab05
 800aad8:	0800ab45 	.word	0x0800ab45
 800aadc:	0800ad1b 	.word	0x0800ad1b
 800aae0:	0800ad1b 	.word	0x0800ad1b
 800aae4:	0800acbb 	.word	0x0800acbb
 800aae8:	0800ace7 	.word	0x0800ace7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	7c12      	ldrb	r2, [r2, #16]
 800aaf8:	f107 0108 	add.w	r1, r7, #8
 800aafc:	4610      	mov	r0, r2
 800aafe:	4798      	blx	r3
 800ab00:	60f8      	str	r0, [r7, #12]
      break;
 800ab02:	e112      	b.n	800ad2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7c1b      	ldrb	r3, [r3, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10d      	bne.n	800ab28 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab14:	f107 0208 	add.w	r2, r7, #8
 800ab18:	4610      	mov	r0, r2
 800ab1a:	4798      	blx	r3
 800ab1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3301      	adds	r3, #1
 800ab22:	2202      	movs	r2, #2
 800ab24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab26:	e100      	b.n	800ad2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	f107 0208 	add.w	r2, r7, #8
 800ab34:	4610      	mov	r0, r2
 800ab36:	4798      	blx	r3
 800ab38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	2202      	movs	r2, #2
 800ab40:	701a      	strb	r2, [r3, #0]
      break;
 800ab42:	e0f2      	b.n	800ad2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	885b      	ldrh	r3, [r3, #2]
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b05      	cmp	r3, #5
 800ab4c:	f200 80ac 	bhi.w	800aca8 <USBD_GetDescriptor+0x204>
 800ab50:	a201      	add	r2, pc, #4	; (adr r2, 800ab58 <USBD_GetDescriptor+0xb4>)
 800ab52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab56:	bf00      	nop
 800ab58:	0800ab71 	.word	0x0800ab71
 800ab5c:	0800aba5 	.word	0x0800aba5
 800ab60:	0800abd9 	.word	0x0800abd9
 800ab64:	0800ac0d 	.word	0x0800ac0d
 800ab68:	0800ac41 	.word	0x0800ac41
 800ab6c:	0800ac75 	.word	0x0800ac75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00b      	beq.n	800ab94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	7c12      	ldrb	r2, [r2, #16]
 800ab88:	f107 0108 	add.w	r1, r7, #8
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
 800ab90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab92:	e091      	b.n	800acb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fab2 	bl	800b100 <USBD_CtlError>
            err++;
 800ab9c:	7afb      	ldrb	r3, [r7, #11]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	72fb      	strb	r3, [r7, #11]
          break;
 800aba2:	e089      	b.n	800acb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00b      	beq.n	800abc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	7c12      	ldrb	r2, [r2, #16]
 800abbc:	f107 0108 	add.w	r1, r7, #8
 800abc0:	4610      	mov	r0, r2
 800abc2:	4798      	blx	r3
 800abc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abc6:	e077      	b.n	800acb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abc8:	6839      	ldr	r1, [r7, #0]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fa98 	bl	800b100 <USBD_CtlError>
            err++;
 800abd0:	7afb      	ldrb	r3, [r7, #11]
 800abd2:	3301      	adds	r3, #1
 800abd4:	72fb      	strb	r3, [r7, #11]
          break;
 800abd6:	e06f      	b.n	800acb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	7c12      	ldrb	r2, [r2, #16]
 800abf0:	f107 0108 	add.w	r1, r7, #8
 800abf4:	4610      	mov	r0, r2
 800abf6:	4798      	blx	r3
 800abf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abfa:	e05d      	b.n	800acb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa7e 	bl	800b100 <USBD_CtlError>
            err++;
 800ac04:	7afb      	ldrb	r3, [r7, #11]
 800ac06:	3301      	adds	r3, #1
 800ac08:	72fb      	strb	r3, [r7, #11]
          break;
 800ac0a:	e055      	b.n	800acb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00b      	beq.n	800ac30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	7c12      	ldrb	r2, [r2, #16]
 800ac24:	f107 0108 	add.w	r1, r7, #8
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
 800ac2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac2e:	e043      	b.n	800acb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fa64 	bl	800b100 <USBD_CtlError>
            err++;
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac3e:	e03b      	b.n	800acb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00b      	beq.n	800ac64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	7c12      	ldrb	r2, [r2, #16]
 800ac58:	f107 0108 	add.w	r1, r7, #8
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4798      	blx	r3
 800ac60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac62:	e029      	b.n	800acb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fa4a 	bl	800b100 <USBD_CtlError>
            err++;
 800ac6c:	7afb      	ldrb	r3, [r7, #11]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	72fb      	strb	r3, [r7, #11]
          break;
 800ac72:	e021      	b.n	800acb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00b      	beq.n	800ac98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	7c12      	ldrb	r2, [r2, #16]
 800ac8c:	f107 0108 	add.w	r1, r7, #8
 800ac90:	4610      	mov	r0, r2
 800ac92:	4798      	blx	r3
 800ac94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac96:	e00f      	b.n	800acb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fa30 	bl	800b100 <USBD_CtlError>
            err++;
 800aca0:	7afb      	ldrb	r3, [r7, #11]
 800aca2:	3301      	adds	r3, #1
 800aca4:	72fb      	strb	r3, [r7, #11]
          break;
 800aca6:	e007      	b.n	800acb8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fa28 	bl	800b100 <USBD_CtlError>
          err++;
 800acb0:	7afb      	ldrb	r3, [r7, #11]
 800acb2:	3301      	adds	r3, #1
 800acb4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800acb6:	bf00      	nop
      }
      break;
 800acb8:	e037      	b.n	800ad2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	7c1b      	ldrb	r3, [r3, #16]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d109      	bne.n	800acd6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acca:	f107 0208 	add.w	r2, r7, #8
 800acce:	4610      	mov	r0, r2
 800acd0:	4798      	blx	r3
 800acd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acd4:	e029      	b.n	800ad2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fa11 	bl	800b100 <USBD_CtlError>
        err++;
 800acde:	7afb      	ldrb	r3, [r7, #11]
 800ace0:	3301      	adds	r3, #1
 800ace2:	72fb      	strb	r3, [r7, #11]
      break;
 800ace4:	e021      	b.n	800ad2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	7c1b      	ldrb	r3, [r3, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10d      	bne.n	800ad0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf6:	f107 0208 	add.w	r2, r7, #8
 800acfa:	4610      	mov	r0, r2
 800acfc:	4798      	blx	r3
 800acfe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3301      	adds	r3, #1
 800ad04:	2207      	movs	r2, #7
 800ad06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad08:	e00f      	b.n	800ad2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f9f7 	bl	800b100 <USBD_CtlError>
        err++;
 800ad12:	7afb      	ldrb	r3, [r7, #11]
 800ad14:	3301      	adds	r3, #1
 800ad16:	72fb      	strb	r3, [r7, #11]
      break;
 800ad18:	e007      	b.n	800ad2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f9ef 	bl	800b100 <USBD_CtlError>
      err++;
 800ad22:	7afb      	ldrb	r3, [r7, #11]
 800ad24:	3301      	adds	r3, #1
 800ad26:	72fb      	strb	r3, [r7, #11]
      break;
 800ad28:	bf00      	nop
  }

  if (err != 0U)
 800ad2a:	7afb      	ldrb	r3, [r7, #11]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d11e      	bne.n	800ad6e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	88db      	ldrh	r3, [r3, #6]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d016      	beq.n	800ad66 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ad38:	893b      	ldrh	r3, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00e      	beq.n	800ad5c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	88da      	ldrh	r2, [r3, #6]
 800ad42:	893b      	ldrh	r3, [r7, #8]
 800ad44:	4293      	cmp	r3, r2
 800ad46:	bf28      	it	cs
 800ad48:	4613      	movcs	r3, r2
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad4e:	893b      	ldrh	r3, [r7, #8]
 800ad50:	461a      	mov	r2, r3
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fa44 	bl	800b1e2 <USBD_CtlSendData>
 800ad5a:	e009      	b.n	800ad70 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f9ce 	bl	800b100 <USBD_CtlError>
 800ad64:	e004      	b.n	800ad70 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa78 	bl	800b25c <USBD_CtlSendStatus>
 800ad6c:	e000      	b.n	800ad70 <USBD_GetDescriptor+0x2cc>
    return;
 800ad6e:	bf00      	nop
  }
}
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop

0800ad78 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	889b      	ldrh	r3, [r3, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d131      	bne.n	800adee <USBD_SetAddress+0x76>
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	88db      	ldrh	r3, [r3, #6]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d12d      	bne.n	800adee <USBD_SetAddress+0x76>
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	885b      	ldrh	r3, [r3, #2]
 800ad96:	2b7f      	cmp	r3, #127	; 0x7f
 800ad98:	d829      	bhi.n	800adee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	885b      	ldrh	r3, [r3, #2]
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ada4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d104      	bne.n	800adbc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f9a3 	bl	800b100 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adba:	e01d      	b.n	800adf8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	7bfa      	ldrb	r2, [r7, #15]
 800adc0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f003 fc81 	bl	800e6d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fa44 	bl	800b25c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d004      	beq.n	800ade4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2202      	movs	r2, #2
 800adde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ade2:	e009      	b.n	800adf8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adec:	e004      	b.n	800adf8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f985 	bl	800b100 <USBD_CtlError>
  }
}
 800adf6:	bf00      	nop
 800adf8:	bf00      	nop
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	885b      	ldrh	r3, [r3, #2]
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	4b4c      	ldr	r3, [pc, #304]	; (800af48 <USBD_SetConfig+0x148>)
 800ae16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae18:	4b4b      	ldr	r3, [pc, #300]	; (800af48 <USBD_SetConfig+0x148>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d905      	bls.n	800ae2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f96c 	bl	800b100 <USBD_CtlError>
    return USBD_FAIL;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e088      	b.n	800af3e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d002      	beq.n	800ae3e <USBD_SetConfig+0x3e>
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d025      	beq.n	800ae88 <USBD_SetConfig+0x88>
 800ae3c:	e071      	b.n	800af22 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae3e:	4b42      	ldr	r3, [pc, #264]	; (800af48 <USBD_SetConfig+0x148>)
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d01c      	beq.n	800ae80 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ae46:	4b40      	ldr	r3, [pc, #256]	; (800af48 <USBD_SetConfig+0x148>)
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae50:	4b3d      	ldr	r3, [pc, #244]	; (800af48 <USBD_SetConfig+0x148>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7ff f949 	bl	800a0ee <USBD_SetClassConfig>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d004      	beq.n	800ae70 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f949 	bl	800b100 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae6e:	e065      	b.n	800af3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f9f3 	bl	800b25c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2203      	movs	r2, #3
 800ae7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae7e:	e05d      	b.n	800af3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f9eb 	bl	800b25c <USBD_CtlSendStatus>
      break;
 800ae86:	e059      	b.n	800af3c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae88:	4b2f      	ldr	r3, [pc, #188]	; (800af48 <USBD_SetConfig+0x148>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d112      	bne.n	800aeb6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2202      	movs	r2, #2
 800ae94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ae98:	4b2b      	ldr	r3, [pc, #172]	; (800af48 <USBD_SetConfig+0x148>)
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aea2:	4b29      	ldr	r3, [pc, #164]	; (800af48 <USBD_SetConfig+0x148>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff f93c 	bl	800a126 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f9d4 	bl	800b25c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aeb4:	e042      	b.n	800af3c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800aeb6:	4b24      	ldr	r3, [pc, #144]	; (800af48 <USBD_SetConfig+0x148>)
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d02a      	beq.n	800af1a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff f92a 	bl	800a126 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aed2:	4b1d      	ldr	r3, [pc, #116]	; (800af48 <USBD_SetConfig+0x148>)
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	461a      	mov	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aedc:	4b1a      	ldr	r3, [pc, #104]	; (800af48 <USBD_SetConfig+0x148>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff f903 	bl	800a0ee <USBD_SetClassConfig>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00f      	beq.n	800af12 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f903 	bl	800b100 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	4619      	mov	r1, r3
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff f90f 	bl	800a126 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af10:	e014      	b.n	800af3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f9a2 	bl	800b25c <USBD_CtlSendStatus>
      break;
 800af18:	e010      	b.n	800af3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f99e 	bl	800b25c <USBD_CtlSendStatus>
      break;
 800af20:	e00c      	b.n	800af3c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f8eb 	bl	800b100 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af2a:	4b07      	ldr	r3, [pc, #28]	; (800af48 <USBD_SetConfig+0x148>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff f8f8 	bl	800a126 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af36:	2303      	movs	r3, #3
 800af38:	73fb      	strb	r3, [r7, #15]
      break;
 800af3a:	bf00      	nop
  }

  return ret;
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20000764 	.word	0x20000764

0800af4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	88db      	ldrh	r3, [r3, #6]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d004      	beq.n	800af68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f8cd 	bl	800b100 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af66:	e023      	b.n	800afb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b02      	cmp	r3, #2
 800af72:	dc02      	bgt.n	800af7a <USBD_GetConfig+0x2e>
 800af74:	2b00      	cmp	r3, #0
 800af76:	dc03      	bgt.n	800af80 <USBD_GetConfig+0x34>
 800af78:	e015      	b.n	800afa6 <USBD_GetConfig+0x5a>
 800af7a:	2b03      	cmp	r3, #3
 800af7c:	d00b      	beq.n	800af96 <USBD_GetConfig+0x4a>
 800af7e:	e012      	b.n	800afa6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3308      	adds	r3, #8
 800af8a:	2201      	movs	r2, #1
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f927 	bl	800b1e2 <USBD_CtlSendData>
        break;
 800af94:	e00c      	b.n	800afb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3304      	adds	r3, #4
 800af9a:	2201      	movs	r2, #1
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f91f 	bl	800b1e2 <USBD_CtlSendData>
        break;
 800afa4:	e004      	b.n	800afb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f8a9 	bl	800b100 <USBD_CtlError>
        break;
 800afae:	bf00      	nop
}
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	3b01      	subs	r3, #1
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d81e      	bhi.n	800b00e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	88db      	ldrh	r3, [r3, #6]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d004      	beq.n	800afe2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f890 	bl	800b100 <USBD_CtlError>
        break;
 800afe0:	e01a      	b.n	800b018 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d005      	beq.n	800affe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f043 0202 	orr.w	r2, r3, #2
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	330c      	adds	r3, #12
 800b002:	2202      	movs	r2, #2
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f8eb 	bl	800b1e2 <USBD_CtlSendData>
      break;
 800b00c:	e004      	b.n	800b018 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f875 	bl	800b100 <USBD_CtlError>
      break;
 800b016:	bf00      	nop
  }
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	885b      	ldrh	r3, [r3, #2]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d106      	bne.n	800b040 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f90e 	bl	800b25c <USBD_CtlSendStatus>
  }
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	3b01      	subs	r3, #1
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d80b      	bhi.n	800b078 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	885b      	ldrh	r3, [r3, #2]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d10c      	bne.n	800b082 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f8f3 	bl	800b25c <USBD_CtlSendStatus>
      }
      break;
 800b076:	e004      	b.n	800b082 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f840 	bl	800b100 <USBD_CtlError>
      break;
 800b080:	e000      	b.n	800b084 <USBD_ClrFeature+0x3c>
      break;
 800b082:	bf00      	nop
  }
}
 800b084:	bf00      	nop
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	781a      	ldrb	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	781a      	ldrb	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f7ff fabc 	bl	800a634 <SWAPBYTE>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	461a      	mov	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f7ff faaf 	bl	800a634 <SWAPBYTE>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	461a      	mov	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f7ff faa2 	bl	800a634 <SWAPBYTE>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	80da      	strh	r2, [r3, #6]
}
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b10a:	2180      	movs	r1, #128	; 0x80
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f003 fa75 	bl	800e5fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b112:	2100      	movs	r1, #0
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f003 fa71 	bl	800e5fc <USBD_LL_StallEP>
}
 800b11a:	bf00      	nop
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b086      	sub	sp, #24
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	60b9      	str	r1, [r7, #8]
 800b12c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b12e:	2300      	movs	r3, #0
 800b130:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d036      	beq.n	800b1a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b13c:	6938      	ldr	r0, [r7, #16]
 800b13e:	f000 f836 	bl	800b1ae <USBD_GetLen>
 800b142:	4603      	mov	r3, r0
 800b144:	3301      	adds	r3, #1
 800b146:	b29b      	uxth	r3, r3
 800b148:	005b      	lsls	r3, r3, #1
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	4413      	add	r3, r2
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	7812      	ldrb	r2, [r2, #0]
 800b15a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	3301      	adds	r3, #1
 800b160:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b162:	7dfb      	ldrb	r3, [r7, #23]
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	4413      	add	r3, r2
 800b168:	2203      	movs	r2, #3
 800b16a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	3301      	adds	r3, #1
 800b170:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b172:	e013      	b.n	800b19c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b174:	7dfb      	ldrb	r3, [r7, #23]
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	4413      	add	r3, r2
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	7812      	ldrb	r2, [r2, #0]
 800b17e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	3301      	adds	r3, #1
 800b184:	613b      	str	r3, [r7, #16]
    idx++;
 800b186:	7dfb      	ldrb	r3, [r7, #23]
 800b188:	3301      	adds	r3, #1
 800b18a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	4413      	add	r3, r2
 800b192:	2200      	movs	r2, #0
 800b194:	701a      	strb	r2, [r3, #0]
    idx++;
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	3301      	adds	r3, #1
 800b19a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1e7      	bne.n	800b174 <USBD_GetString+0x52>
 800b1a4:	e000      	b.n	800b1a8 <USBD_GetString+0x86>
    return;
 800b1a6:	bf00      	nop
  }
}
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b1be:	e005      	b.n	800b1cc <USBD_GetLen+0x1e>
  {
    len++;
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1f5      	bne.n	800b1c0 <USBD_GetLen+0x12>
  }

  return len;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	2100      	movs	r1, #0
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f003 fa80 	bl	800e70e <USBD_LL_Transmit>

  return USBD_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	2100      	movs	r1, #0
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f003 fa6f 	bl	800e70e <USBD_LL_Transmit>

  return USBD_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	60b9      	str	r1, [r7, #8]
 800b244:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	2100      	movs	r1, #0
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f003 fa7f 	bl	800e750 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3710      	adds	r7, #16
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2204      	movs	r2, #4
 800b268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b26c:	2300      	movs	r3, #0
 800b26e:	2200      	movs	r2, #0
 800b270:	2100      	movs	r1, #0
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f003 fa4b 	bl	800e70e <USBD_LL_Transmit>

  return USBD_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b082      	sub	sp, #8
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2205      	movs	r2, #5
 800b28e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b292:	2300      	movs	r3, #0
 800b294:	2200      	movs	r2, #0
 800b296:	2100      	movs	r1, #0
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f003 fa59 	bl	800e750 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b2b2:	79fb      	ldrb	r3, [r7, #7]
 800b2b4:	4a08      	ldr	r2, [pc, #32]	; (800b2d8 <disk_status+0x30>)
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	79fa      	ldrb	r2, [r7, #7]
 800b2c0:	4905      	ldr	r1, [pc, #20]	; (800b2d8 <disk_status+0x30>)
 800b2c2:	440a      	add	r2, r1
 800b2c4:	7a12      	ldrb	r2, [r2, #8]
 800b2c6:	4610      	mov	r0, r2
 800b2c8:	4798      	blx	r3
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20000990 	.word	0x20000990

0800b2dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b2ea:	79fb      	ldrb	r3, [r7, #7]
 800b2ec:	4a0d      	ldr	r2, [pc, #52]	; (800b324 <disk_initialize+0x48>)
 800b2ee:	5cd3      	ldrb	r3, [r2, r3]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d111      	bne.n	800b318 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b2f4:	79fb      	ldrb	r3, [r7, #7]
 800b2f6:	4a0b      	ldr	r2, [pc, #44]	; (800b324 <disk_initialize+0x48>)
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	4a09      	ldr	r2, [pc, #36]	; (800b324 <disk_initialize+0x48>)
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	79fa      	ldrb	r2, [r7, #7]
 800b30a:	4906      	ldr	r1, [pc, #24]	; (800b324 <disk_initialize+0x48>)
 800b30c:	440a      	add	r2, r1
 800b30e:	7a12      	ldrb	r2, [r2, #8]
 800b310:	4610      	mov	r0, r2
 800b312:	4798      	blx	r3
 800b314:	4603      	mov	r3, r0
 800b316:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b318:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000990 	.word	0x20000990

0800b328 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b328:	b590      	push	{r4, r7, lr}
 800b32a:	b087      	sub	sp, #28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	607a      	str	r2, [r7, #4]
 800b332:	603b      	str	r3, [r7, #0]
 800b334:	4603      	mov	r3, r0
 800b336:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b338:	7bfb      	ldrb	r3, [r7, #15]
 800b33a:	4a0a      	ldr	r2, [pc, #40]	; (800b364 <disk_read+0x3c>)
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4413      	add	r3, r2
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	689c      	ldr	r4, [r3, #8]
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	4a07      	ldr	r2, [pc, #28]	; (800b364 <disk_read+0x3c>)
 800b348:	4413      	add	r3, r2
 800b34a:	7a18      	ldrb	r0, [r3, #8]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	47a0      	blx	r4
 800b354:	4603      	mov	r3, r0
 800b356:	75fb      	strb	r3, [r7, #23]
  return res;
 800b358:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	371c      	adds	r7, #28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd90      	pop	{r4, r7, pc}
 800b362:	bf00      	nop
 800b364:	20000990 	.word	0x20000990

0800b368 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b368:	b590      	push	{r4, r7, lr}
 800b36a:	b087      	sub	sp, #28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60b9      	str	r1, [r7, #8]
 800b370:	607a      	str	r2, [r7, #4]
 800b372:	603b      	str	r3, [r7, #0]
 800b374:	4603      	mov	r3, r0
 800b376:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	4a0a      	ldr	r2, [pc, #40]	; (800b3a4 <disk_write+0x3c>)
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	68dc      	ldr	r4, [r3, #12]
 800b384:	7bfb      	ldrb	r3, [r7, #15]
 800b386:	4a07      	ldr	r2, [pc, #28]	; (800b3a4 <disk_write+0x3c>)
 800b388:	4413      	add	r3, r2
 800b38a:	7a18      	ldrb	r0, [r3, #8]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	68b9      	ldr	r1, [r7, #8]
 800b392:	47a0      	blx	r4
 800b394:	4603      	mov	r3, r0
 800b396:	75fb      	strb	r3, [r7, #23]
  return res;
 800b398:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	371c      	adds	r7, #28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd90      	pop	{r4, r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000990 	.word	0x20000990

0800b3a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	603a      	str	r2, [r7, #0]
 800b3b2:	71fb      	strb	r3, [r7, #7]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b3b8:	79fb      	ldrb	r3, [r7, #7]
 800b3ba:	4a09      	ldr	r2, [pc, #36]	; (800b3e0 <disk_ioctl+0x38>)
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	79fa      	ldrb	r2, [r7, #7]
 800b3c6:	4906      	ldr	r1, [pc, #24]	; (800b3e0 <disk_ioctl+0x38>)
 800b3c8:	440a      	add	r2, r1
 800b3ca:	7a10      	ldrb	r0, [r2, #8]
 800b3cc:	79b9      	ldrb	r1, [r7, #6]
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	4798      	blx	r3
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	73fb      	strb	r3, [r7, #15]
  return res;
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	20000990 	.word	0x20000990

0800b3e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b3f4:	89fb      	ldrh	r3, [r7, #14]
 800b3f6:	021b      	lsls	r3, r3, #8
 800b3f8:	b21a      	sxth	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	b21b      	sxth	r3, r3
 800b400:	4313      	orrs	r3, r2
 800b402:	b21b      	sxth	r3, r3
 800b404:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b406:	89fb      	ldrh	r3, [r7, #14]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3303      	adds	r3, #3
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	021b      	lsls	r3, r3, #8
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	3202      	adds	r2, #2
 800b42c:	7812      	ldrb	r2, [r2, #0]
 800b42e:	4313      	orrs	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	3201      	adds	r2, #1
 800b43a:	7812      	ldrb	r2, [r2, #0]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	021b      	lsls	r3, r3, #8
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	7812      	ldrb	r2, [r2, #0]
 800b448:	4313      	orrs	r3, r2
 800b44a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b44c:	68fb      	ldr	r3, [r7, #12]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	460b      	mov	r3, r1
 800b464:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	607a      	str	r2, [r7, #4]
 800b46c:	887a      	ldrh	r2, [r7, #2]
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	701a      	strb	r2, [r3, #0]
 800b472:	887b      	ldrh	r3, [r7, #2]
 800b474:	0a1b      	lsrs	r3, r3, #8
 800b476:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	1c5a      	adds	r2, r3, #1
 800b47c:	607a      	str	r2, [r7, #4]
 800b47e:	887a      	ldrh	r2, [r7, #2]
 800b480:	b2d2      	uxtb	r2, r2
 800b482:	701a      	strb	r2, [r3, #0]
}
 800b484:	bf00      	nop
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	b2d2      	uxtb	r2, r2
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	0a1b      	lsrs	r3, r3, #8
 800b4aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	607a      	str	r2, [r7, #4]
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	b2d2      	uxtb	r2, r2
 800b4b6:	701a      	strb	r2, [r3, #0]
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	0a1b      	lsrs	r3, r3, #8
 800b4bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	607a      	str	r2, [r7, #4]
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	b2d2      	uxtb	r2, r2
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	0a1b      	lsrs	r3, r3, #8
 800b4ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	607a      	str	r2, [r7, #4]
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	b2d2      	uxtb	r2, r2
 800b4da:	701a      	strb	r2, [r3, #0]
}
 800b4dc:	bf00      	nop
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b4e8:	b480      	push	{r7}
 800b4ea:	b087      	sub	sp, #28
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00d      	beq.n	800b51e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	1c53      	adds	r3, r2, #1
 800b506:	613b      	str	r3, [r7, #16]
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	1c59      	adds	r1, r3, #1
 800b50c:	6179      	str	r1, [r7, #20]
 800b50e:	7812      	ldrb	r2, [r2, #0]
 800b510:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	3b01      	subs	r3, #1
 800b516:	607b      	str	r3, [r7, #4]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1f1      	bne.n	800b502 <mem_cpy+0x1a>
	}
}
 800b51e:	bf00      	nop
 800b520:	371c      	adds	r7, #28
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b52a:	b480      	push	{r7}
 800b52c:	b087      	sub	sp, #28
 800b52e:	af00      	add	r7, sp, #0
 800b530:	60f8      	str	r0, [r7, #12]
 800b532:	60b9      	str	r1, [r7, #8]
 800b534:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	1c5a      	adds	r2, r3, #1
 800b53e:	617a      	str	r2, [r7, #20]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	b2d2      	uxtb	r2, r2
 800b544:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	3b01      	subs	r3, #1
 800b54a:	607b      	str	r3, [r7, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1f3      	bne.n	800b53a <mem_set+0x10>
}
 800b552:	bf00      	nop
 800b554:	bf00      	nop
 800b556:	371c      	adds	r7, #28
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b560:	b480      	push	{r7}
 800b562:	b089      	sub	sp, #36	; 0x24
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	61fb      	str	r3, [r7, #28]
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b574:	2300      	movs	r3, #0
 800b576:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	1c5a      	adds	r2, r3, #1
 800b57c:	61fa      	str	r2, [r7, #28]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	4619      	mov	r1, r3
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	61ba      	str	r2, [r7, #24]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	1acb      	subs	r3, r1, r3
 800b58c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	3b01      	subs	r3, #1
 800b592:	607b      	str	r3, [r7, #4]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <mem_cmp+0x40>
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d0eb      	beq.n	800b578 <mem_cmp+0x18>

	return r;
 800b5a0:	697b      	ldr	r3, [r7, #20]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3724      	adds	r7, #36	; 0x24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b5b8:	e002      	b.n	800b5c0 <chk_chr+0x12>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	607b      	str	r3, [r7, #4]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d005      	beq.n	800b5d4 <chk_chr+0x26>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d1f2      	bne.n	800b5ba <chk_chr+0xc>
	return *str;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60bb      	str	r3, [r7, #8]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	60fb      	str	r3, [r7, #12]
 800b5f6:	e029      	b.n	800b64c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b5f8:	4a27      	ldr	r2, [pc, #156]	; (800b698 <chk_lock+0xb4>)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	011b      	lsls	r3, r3, #4
 800b5fe:	4413      	add	r3, r2
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d01d      	beq.n	800b642 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b606:	4a24      	ldr	r2, [pc, #144]	; (800b698 <chk_lock+0xb4>)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	011b      	lsls	r3, r3, #4
 800b60c:	4413      	add	r3, r2
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	429a      	cmp	r2, r3
 800b616:	d116      	bne.n	800b646 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b618:	4a1f      	ldr	r2, [pc, #124]	; (800b698 <chk_lock+0xb4>)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	011b      	lsls	r3, r3, #4
 800b61e:	4413      	add	r3, r2
 800b620:	3304      	adds	r3, #4
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b628:	429a      	cmp	r2, r3
 800b62a:	d10c      	bne.n	800b646 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b62c:	4a1a      	ldr	r2, [pc, #104]	; (800b698 <chk_lock+0xb4>)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	011b      	lsls	r3, r3, #4
 800b632:	4413      	add	r3, r2
 800b634:	3308      	adds	r3, #8
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d102      	bne.n	800b646 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b640:	e007      	b.n	800b652 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b642:	2301      	movs	r3, #1
 800b644:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3301      	adds	r3, #1
 800b64a:	60fb      	str	r3, [r7, #12]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d9d2      	bls.n	800b5f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b02      	cmp	r3, #2
 800b656:	d109      	bne.n	800b66c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d102      	bne.n	800b664 <chk_lock+0x80>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b02      	cmp	r3, #2
 800b662:	d101      	bne.n	800b668 <chk_lock+0x84>
 800b664:	2300      	movs	r3, #0
 800b666:	e010      	b.n	800b68a <chk_lock+0xa6>
 800b668:	2312      	movs	r3, #18
 800b66a:	e00e      	b.n	800b68a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d108      	bne.n	800b684 <chk_lock+0xa0>
 800b672:	4a09      	ldr	r2, [pc, #36]	; (800b698 <chk_lock+0xb4>)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	011b      	lsls	r3, r3, #4
 800b678:	4413      	add	r3, r2
 800b67a:	330c      	adds	r3, #12
 800b67c:	881b      	ldrh	r3, [r3, #0]
 800b67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b682:	d101      	bne.n	800b688 <chk_lock+0xa4>
 800b684:	2310      	movs	r3, #16
 800b686:	e000      	b.n	800b68a <chk_lock+0xa6>
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	20000770 	.word	0x20000770

0800b69c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	607b      	str	r3, [r7, #4]
 800b6a6:	e002      	b.n	800b6ae <enq_lock+0x12>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	607b      	str	r3, [r7, #4]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d806      	bhi.n	800b6c2 <enq_lock+0x26>
 800b6b4:	4a09      	ldr	r2, [pc, #36]	; (800b6dc <enq_lock+0x40>)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	011b      	lsls	r3, r3, #4
 800b6ba:	4413      	add	r3, r2
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1f2      	bne.n	800b6a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	bf14      	ite	ne
 800b6c8:	2301      	movne	r3, #1
 800b6ca:	2300      	moveq	r3, #0
 800b6cc:	b2db      	uxtb	r3, r3
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	20000770 	.word	0x20000770

0800b6e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60fb      	str	r3, [r7, #12]
 800b6ee:	e01f      	b.n	800b730 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b6f0:	4a41      	ldr	r2, [pc, #260]	; (800b7f8 <inc_lock+0x118>)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	011b      	lsls	r3, r3, #4
 800b6f6:	4413      	add	r3, r2
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d113      	bne.n	800b72a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b702:	4a3d      	ldr	r2, [pc, #244]	; (800b7f8 <inc_lock+0x118>)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	011b      	lsls	r3, r3, #4
 800b708:	4413      	add	r3, r2
 800b70a:	3304      	adds	r3, #4
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b712:	429a      	cmp	r2, r3
 800b714:	d109      	bne.n	800b72a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b716:	4a38      	ldr	r2, [pc, #224]	; (800b7f8 <inc_lock+0x118>)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	011b      	lsls	r3, r3, #4
 800b71c:	4413      	add	r3, r2
 800b71e:	3308      	adds	r3, #8
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b726:	429a      	cmp	r2, r3
 800b728:	d006      	beq.n	800b738 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3301      	adds	r3, #1
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d9dc      	bls.n	800b6f0 <inc_lock+0x10>
 800b736:	e000      	b.n	800b73a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b738:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d132      	bne.n	800b7a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b740:	2300      	movs	r3, #0
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	e002      	b.n	800b74c <inc_lock+0x6c>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	3301      	adds	r3, #1
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d806      	bhi.n	800b760 <inc_lock+0x80>
 800b752:	4a29      	ldr	r2, [pc, #164]	; (800b7f8 <inc_lock+0x118>)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	011b      	lsls	r3, r3, #4
 800b758:	4413      	add	r3, r2
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1f2      	bne.n	800b746 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2b02      	cmp	r3, #2
 800b764:	d101      	bne.n	800b76a <inc_lock+0x8a>
 800b766:	2300      	movs	r3, #0
 800b768:	e040      	b.n	800b7ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	4922      	ldr	r1, [pc, #136]	; (800b7f8 <inc_lock+0x118>)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	011b      	lsls	r3, r3, #4
 800b774:	440b      	add	r3, r1
 800b776:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	689a      	ldr	r2, [r3, #8]
 800b77c:	491e      	ldr	r1, [pc, #120]	; (800b7f8 <inc_lock+0x118>)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	011b      	lsls	r3, r3, #4
 800b782:	440b      	add	r3, r1
 800b784:	3304      	adds	r3, #4
 800b786:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	695a      	ldr	r2, [r3, #20]
 800b78c:	491a      	ldr	r1, [pc, #104]	; (800b7f8 <inc_lock+0x118>)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	011b      	lsls	r3, r3, #4
 800b792:	440b      	add	r3, r1
 800b794:	3308      	adds	r3, #8
 800b796:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b798:	4a17      	ldr	r2, [pc, #92]	; (800b7f8 <inc_lock+0x118>)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	011b      	lsls	r3, r3, #4
 800b79e:	4413      	add	r3, r2
 800b7a0:	330c      	adds	r3, #12
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d009      	beq.n	800b7c0 <inc_lock+0xe0>
 800b7ac:	4a12      	ldr	r2, [pc, #72]	; (800b7f8 <inc_lock+0x118>)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	011b      	lsls	r3, r3, #4
 800b7b2:	4413      	add	r3, r2
 800b7b4:	330c      	adds	r3, #12
 800b7b6:	881b      	ldrh	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <inc_lock+0xe0>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	e015      	b.n	800b7ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d108      	bne.n	800b7d8 <inc_lock+0xf8>
 800b7c6:	4a0c      	ldr	r2, [pc, #48]	; (800b7f8 <inc_lock+0x118>)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	4413      	add	r3, r2
 800b7ce:	330c      	adds	r3, #12
 800b7d0:	881b      	ldrh	r3, [r3, #0]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	e001      	b.n	800b7dc <inc_lock+0xfc>
 800b7d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7dc:	4906      	ldr	r1, [pc, #24]	; (800b7f8 <inc_lock+0x118>)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	011b      	lsls	r3, r3, #4
 800b7e2:	440b      	add	r3, r1
 800b7e4:	330c      	adds	r3, #12
 800b7e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	3301      	adds	r3, #1
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3714      	adds	r7, #20
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr
 800b7f8:	20000770 	.word	0x20000770

0800b7fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	3b01      	subs	r3, #1
 800b808:	607b      	str	r3, [r7, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d825      	bhi.n	800b85c <dec_lock+0x60>
		n = Files[i].ctr;
 800b810:	4a17      	ldr	r2, [pc, #92]	; (800b870 <dec_lock+0x74>)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	011b      	lsls	r3, r3, #4
 800b816:	4413      	add	r3, r2
 800b818:	330c      	adds	r3, #12
 800b81a:	881b      	ldrh	r3, [r3, #0]
 800b81c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b81e:	89fb      	ldrh	r3, [r7, #14]
 800b820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b824:	d101      	bne.n	800b82a <dec_lock+0x2e>
 800b826:	2300      	movs	r3, #0
 800b828:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b82a:	89fb      	ldrh	r3, [r7, #14]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <dec_lock+0x3a>
 800b830:	89fb      	ldrh	r3, [r7, #14]
 800b832:	3b01      	subs	r3, #1
 800b834:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b836:	4a0e      	ldr	r2, [pc, #56]	; (800b870 <dec_lock+0x74>)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	011b      	lsls	r3, r3, #4
 800b83c:	4413      	add	r3, r2
 800b83e:	330c      	adds	r3, #12
 800b840:	89fa      	ldrh	r2, [r7, #14]
 800b842:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b844:	89fb      	ldrh	r3, [r7, #14]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d105      	bne.n	800b856 <dec_lock+0x5a>
 800b84a:	4a09      	ldr	r2, [pc, #36]	; (800b870 <dec_lock+0x74>)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	011b      	lsls	r3, r3, #4
 800b850:	4413      	add	r3, r2
 800b852:	2200      	movs	r2, #0
 800b854:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	737b      	strb	r3, [r7, #13]
 800b85a:	e001      	b.n	800b860 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b85c:	2302      	movs	r3, #2
 800b85e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b860:	7b7b      	ldrb	r3, [r7, #13]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3714      	adds	r7, #20
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	20000770 	.word	0x20000770

0800b874 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	e010      	b.n	800b8a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b882:	4a0d      	ldr	r2, [pc, #52]	; (800b8b8 <clear_lock+0x44>)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	011b      	lsls	r3, r3, #4
 800b888:	4413      	add	r3, r2
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d105      	bne.n	800b89e <clear_lock+0x2a>
 800b892:	4a09      	ldr	r2, [pc, #36]	; (800b8b8 <clear_lock+0x44>)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	011b      	lsls	r3, r3, #4
 800b898:	4413      	add	r3, r2
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	60fb      	str	r3, [r7, #12]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d9eb      	bls.n	800b882 <clear_lock+0xe>
	}
}
 800b8aa:	bf00      	nop
 800b8ac:	bf00      	nop
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	20000770 	.word	0x20000770

0800b8bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	78db      	ldrb	r3, [r3, #3]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d034      	beq.n	800b93a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	7858      	ldrb	r0, [r3, #1]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	f7ff fd40 	bl	800b368 <disk_write>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	73fb      	strb	r3, [r7, #15]
 800b8f2:	e022      	b.n	800b93a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	1ad2      	subs	r2, r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	429a      	cmp	r2, r3
 800b908:	d217      	bcs.n	800b93a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	789b      	ldrb	r3, [r3, #2]
 800b90e:	613b      	str	r3, [r7, #16]
 800b910:	e010      	b.n	800b934 <sync_window+0x78>
					wsect += fs->fsize;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	69db      	ldr	r3, [r3, #28]
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	4413      	add	r3, r2
 800b91a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	7858      	ldrb	r0, [r3, #1]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b926:	2301      	movs	r3, #1
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	f7ff fd1d 	bl	800b368 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	3b01      	subs	r3, #1
 800b932:	613b      	str	r3, [r7, #16]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d8eb      	bhi.n	800b912 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3718      	adds	r7, #24
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d01b      	beq.n	800b994 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7ff ffad 	bl	800b8bc <sync_window>
 800b962:	4603      	mov	r3, r0
 800b964:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b966:	7bfb      	ldrb	r3, [r7, #15]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d113      	bne.n	800b994 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	7858      	ldrb	r0, [r3, #1]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b976:	2301      	movs	r3, #1
 800b978:	683a      	ldr	r2, [r7, #0]
 800b97a:	f7ff fcd5 	bl	800b328 <disk_read>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d004      	beq.n	800b98e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b984:	f04f 33ff 	mov.w	r3, #4294967295
 800b988:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
	...

0800b9a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7ff ff87 	bl	800b8bc <sync_window>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d158      	bne.n	800ba6a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	d148      	bne.n	800ba52 <sync_fs+0xb2>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	791b      	ldrb	r3, [r3, #4]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d144      	bne.n	800ba52 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	3334      	adds	r3, #52	; 0x34
 800b9cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff fda9 	bl	800b52a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	3334      	adds	r3, #52	; 0x34
 800b9dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b9e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7ff fd38 	bl	800b45a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3334      	adds	r3, #52	; 0x34
 800b9ee:	4921      	ldr	r1, [pc, #132]	; (800ba74 <sync_fs+0xd4>)
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7ff fd4d 	bl	800b490 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	3334      	adds	r3, #52	; 0x34
 800b9fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b9fe:	491e      	ldr	r1, [pc, #120]	; (800ba78 <sync_fs+0xd8>)
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7ff fd45 	bl	800b490 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	3334      	adds	r3, #52	; 0x34
 800ba0a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	4619      	mov	r1, r3
 800ba14:	4610      	mov	r0, r2
 800ba16:	f7ff fd3b 	bl	800b490 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	3334      	adds	r3, #52	; 0x34
 800ba1e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	4619      	mov	r1, r3
 800ba28:	4610      	mov	r0, r2
 800ba2a:	f7ff fd31 	bl	800b490 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a1b      	ldr	r3, [r3, #32]
 800ba32:	1c5a      	adds	r2, r3, #1
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	7858      	ldrb	r0, [r3, #1]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba46:	2301      	movs	r3, #1
 800ba48:	f7ff fc8e 	bl	800b368 <disk_write>
			fs->fsi_flag = 0;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	785b      	ldrb	r3, [r3, #1]
 800ba56:	2200      	movs	r2, #0
 800ba58:	2100      	movs	r1, #0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff fca4 	bl	800b3a8 <disk_ioctl>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <sync_fs+0xca>
 800ba66:	2301      	movs	r3, #1
 800ba68:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ba6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	41615252 	.word	0x41615252
 800ba78:	61417272 	.word	0x61417272

0800ba7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	3b02      	subs	r3, #2
 800ba8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	3b02      	subs	r3, #2
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d301      	bcc.n	800ba9c <clust2sect+0x20>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e008      	b.n	800baae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	895b      	ldrh	r3, [r3, #10]
 800baa0:	461a      	mov	r2, r3
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	fb03 f202 	mul.w	r2, r3, r2
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baac:	4413      	add	r3, r2
}
 800baae:	4618      	mov	r0, r3
 800bab0:	370c      	adds	r7, #12
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b086      	sub	sp, #24
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d904      	bls.n	800bada <get_fat+0x20>
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d302      	bcc.n	800bae0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bada:	2301      	movs	r3, #1
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	e08f      	b.n	800bc00 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bae0:	f04f 33ff 	mov.w	r3, #4294967295
 800bae4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	2b03      	cmp	r3, #3
 800baec:	d062      	beq.n	800bbb4 <get_fat+0xfa>
 800baee:	2b03      	cmp	r3, #3
 800baf0:	dc7c      	bgt.n	800bbec <get_fat+0x132>
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d002      	beq.n	800bafc <get_fat+0x42>
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	d042      	beq.n	800bb80 <get_fat+0xc6>
 800bafa:	e077      	b.n	800bbec <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	085b      	lsrs	r3, r3, #1
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	4413      	add	r3, r2
 800bb08:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	0a5b      	lsrs	r3, r3, #9
 800bb12:	4413      	add	r3, r2
 800bb14:	4619      	mov	r1, r3
 800bb16:	6938      	ldr	r0, [r7, #16]
 800bb18:	f7ff ff14 	bl	800b944 <move_window>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d167      	bne.n	800bbf2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	1c5a      	adds	r2, r3, #1
 800bb26:	60fa      	str	r2, [r7, #12]
 800bb28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	0a5b      	lsrs	r3, r3, #9
 800bb3e:	4413      	add	r3, r2
 800bb40:	4619      	mov	r1, r3
 800bb42:	6938      	ldr	r0, [r7, #16]
 800bb44:	f7ff fefe 	bl	800b944 <move_window>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d153      	bne.n	800bbf6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	4413      	add	r3, r2
 800bb58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	461a      	mov	r2, r3
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <get_fat+0xbc>
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	091b      	lsrs	r3, r3, #4
 800bb74:	e002      	b.n	800bb7c <get_fat+0xc2>
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb7c:	617b      	str	r3, [r7, #20]
			break;
 800bb7e:	e03f      	b.n	800bc00 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	0a1b      	lsrs	r3, r3, #8
 800bb88:	4413      	add	r3, r2
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6938      	ldr	r0, [r7, #16]
 800bb8e:	f7ff fed9 	bl	800b944 <move_window>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d130      	bne.n	800bbfa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	005b      	lsls	r3, r3, #1
 800bba2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bba6:	4413      	add	r3, r2
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7ff fc1b 	bl	800b3e4 <ld_word>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	617b      	str	r3, [r7, #20]
			break;
 800bbb2:	e025      	b.n	800bc00 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	09db      	lsrs	r3, r3, #7
 800bbbc:	4413      	add	r3, r2
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6938      	ldr	r0, [r7, #16]
 800bbc2:	f7ff febf 	bl	800b944 <move_window>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d118      	bne.n	800bbfe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bbda:	4413      	add	r3, r2
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7ff fc19 	bl	800b414 <ld_dword>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bbe8:	617b      	str	r3, [r7, #20]
			break;
 800bbea:	e009      	b.n	800bc00 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bbec:	2301      	movs	r3, #1
 800bbee:	617b      	str	r3, [r7, #20]
 800bbf0:	e006      	b.n	800bc00 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbf2:	bf00      	nop
 800bbf4:	e004      	b.n	800bc00 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbf6:	bf00      	nop
 800bbf8:	e002      	b.n	800bc00 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbfa:	bf00      	nop
 800bbfc:	e000      	b.n	800bc00 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbfe:	bf00      	nop
		}
	}

	return val;
 800bc00:	697b      	ldr	r3, [r7, #20]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bc0a:	b590      	push	{r4, r7, lr}
 800bc0c:	b089      	sub	sp, #36	; 0x24
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	60f8      	str	r0, [r7, #12]
 800bc12:	60b9      	str	r1, [r7, #8]
 800bc14:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bc16:	2302      	movs	r3, #2
 800bc18:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	f240 80d2 	bls.w	800bdc6 <put_fat+0x1bc>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	68ba      	ldr	r2, [r7, #8]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	f080 80cc 	bcs.w	800bdc6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	f000 8096 	beq.w	800bd64 <put_fat+0x15a>
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	f300 80cd 	bgt.w	800bdd8 <put_fat+0x1ce>
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d002      	beq.n	800bc48 <put_fat+0x3e>
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d06e      	beq.n	800bd24 <put_fat+0x11a>
 800bc46:	e0c7      	b.n	800bdd8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	61bb      	str	r3, [r7, #24]
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	085b      	lsrs	r3, r3, #1
 800bc50:	69ba      	ldr	r2, [r7, #24]
 800bc52:	4413      	add	r3, r2
 800bc54:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	0a5b      	lsrs	r3, r3, #9
 800bc5e:	4413      	add	r3, r2
 800bc60:	4619      	mov	r1, r3
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f7ff fe6e 	bl	800b944 <move_window>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc6c:	7ffb      	ldrb	r3, [r7, #31]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f040 80ab 	bne.w	800bdca <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	1c59      	adds	r1, r3, #1
 800bc7e:	61b9      	str	r1, [r7, #24]
 800bc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc84:	4413      	add	r3, r2
 800bc86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f003 0301 	and.w	r3, r3, #1
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00d      	beq.n	800bcae <put_fat+0xa4>
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	b25b      	sxtb	r3, r3
 800bc98:	f003 030f 	and.w	r3, r3, #15
 800bc9c:	b25a      	sxtb	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	011b      	lsls	r3, r3, #4
 800bca4:	b25b      	sxtb	r3, r3
 800bca6:	4313      	orrs	r3, r2
 800bca8:	b25b      	sxtb	r3, r3
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	e001      	b.n	800bcb2 <put_fat+0xa8>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	0a5b      	lsrs	r3, r3, #9
 800bcc4:	4413      	add	r3, r2
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f7ff fe3b 	bl	800b944 <move_window>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcd2:	7ffb      	ldrb	r3, [r7, #31]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d17a      	bne.n	800bdce <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce4:	4413      	add	r3, r2
 800bce6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f003 0301 	and.w	r3, r3, #1
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <put_fat+0xf0>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	091b      	lsrs	r3, r3, #4
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	e00e      	b.n	800bd18 <put_fat+0x10e>
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	b25b      	sxtb	r3, r3
 800bd00:	f023 030f 	bic.w	r3, r3, #15
 800bd04:	b25a      	sxtb	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	0a1b      	lsrs	r3, r3, #8
 800bd0a:	b25b      	sxtb	r3, r3
 800bd0c:	f003 030f 	and.w	r3, r3, #15
 800bd10:	b25b      	sxtb	r3, r3
 800bd12:	4313      	orrs	r3, r2
 800bd14:	b25b      	sxtb	r3, r3
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	70da      	strb	r2, [r3, #3]
			break;
 800bd22:	e059      	b.n	800bdd8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	0a1b      	lsrs	r3, r3, #8
 800bd2c:	4413      	add	r3, r2
 800bd2e:	4619      	mov	r1, r3
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f7ff fe07 	bl	800b944 <move_window>
 800bd36:	4603      	mov	r3, r0
 800bd38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd3a:	7ffb      	ldrb	r3, [r7, #31]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d148      	bne.n	800bdd2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	005b      	lsls	r3, r3, #1
 800bd4a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bd4e:	4413      	add	r3, r2
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	b292      	uxth	r2, r2
 800bd54:	4611      	mov	r1, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7ff fb7f 	bl	800b45a <st_word>
			fs->wflag = 1;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	70da      	strb	r2, [r3, #3]
			break;
 800bd62:	e039      	b.n	800bdd8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	09db      	lsrs	r3, r3, #7
 800bd6c:	4413      	add	r3, r2
 800bd6e:	4619      	mov	r1, r3
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f7ff fde7 	bl	800b944 <move_window>
 800bd76:	4603      	mov	r3, r0
 800bd78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd7a:	7ffb      	ldrb	r3, [r7, #31]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d12a      	bne.n	800bdd6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bd94:	4413      	add	r3, r2
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7ff fb3c 	bl	800b414 <ld_dword>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bda2:	4323      	orrs	r3, r4
 800bda4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bdb4:	4413      	add	r3, r2
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fb69 	bl	800b490 <st_dword>
			fs->wflag = 1;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	70da      	strb	r2, [r3, #3]
			break;
 800bdc4:	e008      	b.n	800bdd8 <put_fat+0x1ce>
		}
	}
 800bdc6:	bf00      	nop
 800bdc8:	e006      	b.n	800bdd8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bdca:	bf00      	nop
 800bdcc:	e004      	b.n	800bdd8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bdce:	bf00      	nop
 800bdd0:	e002      	b.n	800bdd8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bdd2:	bf00      	nop
 800bdd4:	e000      	b.n	800bdd8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800bdd6:	bf00      	nop
	return res;
 800bdd8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3724      	adds	r7, #36	; 0x24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd90      	pop	{r4, r7, pc}

0800bde2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b088      	sub	sp, #32
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	60f8      	str	r0, [r7, #12]
 800bdea:	60b9      	str	r1, [r7, #8]
 800bdec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d904      	bls.n	800be08 <remove_chain+0x26>
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	429a      	cmp	r2, r3
 800be06:	d301      	bcc.n	800be0c <remove_chain+0x2a>
 800be08:	2302      	movs	r3, #2
 800be0a:	e04b      	b.n	800bea4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00c      	beq.n	800be2c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800be12:	f04f 32ff 	mov.w	r2, #4294967295
 800be16:	6879      	ldr	r1, [r7, #4]
 800be18:	69b8      	ldr	r0, [r7, #24]
 800be1a:	f7ff fef6 	bl	800bc0a <put_fat>
 800be1e:	4603      	mov	r3, r0
 800be20:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800be22:	7ffb      	ldrb	r3, [r7, #31]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <remove_chain+0x4a>
 800be28:	7ffb      	ldrb	r3, [r7, #31]
 800be2a:	e03b      	b.n	800bea4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800be2c:	68b9      	ldr	r1, [r7, #8]
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f7ff fe43 	bl	800baba <get_fat>
 800be34:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d031      	beq.n	800bea0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d101      	bne.n	800be46 <remove_chain+0x64>
 800be42:	2302      	movs	r3, #2
 800be44:	e02e      	b.n	800bea4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4c:	d101      	bne.n	800be52 <remove_chain+0x70>
 800be4e:	2301      	movs	r3, #1
 800be50:	e028      	b.n	800bea4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800be52:	2200      	movs	r2, #0
 800be54:	68b9      	ldr	r1, [r7, #8]
 800be56:	69b8      	ldr	r0, [r7, #24]
 800be58:	f7ff fed7 	bl	800bc0a <put_fat>
 800be5c:	4603      	mov	r3, r0
 800be5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800be60:	7ffb      	ldrb	r3, [r7, #31]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <remove_chain+0x88>
 800be66:	7ffb      	ldrb	r3, [r7, #31]
 800be68:	e01c      	b.n	800bea4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	695a      	ldr	r2, [r3, #20]
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	3b02      	subs	r3, #2
 800be74:	429a      	cmp	r2, r3
 800be76:	d20b      	bcs.n	800be90 <remove_chain+0xae>
			fs->free_clst++;
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	1c5a      	adds	r2, r3, #1
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	791b      	ldrb	r3, [r3, #4]
 800be86:	f043 0301 	orr.w	r3, r3, #1
 800be8a:	b2da      	uxtb	r2, r3
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d3c6      	bcc.n	800be2c <remove_chain+0x4a>
 800be9e:	e000      	b.n	800bea2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bea0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3720      	adds	r7, #32
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b088      	sub	sp, #32
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10d      	bne.n	800bede <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d004      	beq.n	800bed8 <create_chain+0x2c>
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	69ba      	ldr	r2, [r7, #24]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d31b      	bcc.n	800bf10 <create_chain+0x64>
 800bed8:	2301      	movs	r3, #1
 800beda:	61bb      	str	r3, [r7, #24]
 800bedc:	e018      	b.n	800bf10 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7ff fdea 	bl	800baba <get_fat>
 800bee6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d801      	bhi.n	800bef2 <create_chain+0x46>
 800beee:	2301      	movs	r3, #1
 800bef0:	e070      	b.n	800bfd4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef8:	d101      	bne.n	800befe <create_chain+0x52>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	e06a      	b.n	800bfd4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d201      	bcs.n	800bf0c <create_chain+0x60>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	e063      	b.n	800bfd4 <create_chain+0x128>
		scl = clst;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	3301      	adds	r3, #1
 800bf18:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	69fa      	ldr	r2, [r7, #28]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d307      	bcc.n	800bf34 <create_chain+0x88>
				ncl = 2;
 800bf24:	2302      	movs	r3, #2
 800bf26:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bf28:	69fa      	ldr	r2, [r7, #28]
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d901      	bls.n	800bf34 <create_chain+0x88>
 800bf30:	2300      	movs	r3, #0
 800bf32:	e04f      	b.n	800bfd4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bf34:	69f9      	ldr	r1, [r7, #28]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7ff fdbf 	bl	800baba <get_fat>
 800bf3c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00e      	beq.n	800bf62 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d003      	beq.n	800bf52 <create_chain+0xa6>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf50:	d101      	bne.n	800bf56 <create_chain+0xaa>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	e03e      	b.n	800bfd4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bf56:	69fa      	ldr	r2, [r7, #28]
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d1da      	bne.n	800bf14 <create_chain+0x68>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e038      	b.n	800bfd4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bf62:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bf64:	f04f 32ff 	mov.w	r2, #4294967295
 800bf68:	69f9      	ldr	r1, [r7, #28]
 800bf6a:	6938      	ldr	r0, [r7, #16]
 800bf6c:	f7ff fe4d 	bl	800bc0a <put_fat>
 800bf70:	4603      	mov	r3, r0
 800bf72:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d109      	bne.n	800bf8e <create_chain+0xe2>
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d006      	beq.n	800bf8e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bf80:	69fa      	ldr	r2, [r7, #28]
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6938      	ldr	r0, [r7, #16]
 800bf86:	f7ff fe40 	bl	800bc0a <put_fat>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d116      	bne.n	800bfc2 <create_chain+0x116>
		fs->last_clst = ncl;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	69fa      	ldr	r2, [r7, #28]
 800bf98:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	695a      	ldr	r2, [r3, #20]
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	3b02      	subs	r3, #2
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d804      	bhi.n	800bfb2 <create_chain+0x106>
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	695b      	ldr	r3, [r3, #20]
 800bfac:	1e5a      	subs	r2, r3, #1
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	791b      	ldrb	r3, [r3, #4]
 800bfb6:	f043 0301 	orr.w	r3, r3, #1
 800bfba:	b2da      	uxtb	r2, r3
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	711a      	strb	r2, [r3, #4]
 800bfc0:	e007      	b.n	800bfd2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bfc2:	7dfb      	ldrb	r3, [r7, #23]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d102      	bne.n	800bfce <create_chain+0x122>
 800bfc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfcc:	e000      	b.n	800bfd0 <create_chain+0x124>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bfd2:	69fb      	ldr	r3, [r7, #28]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3720      	adds	r7, #32
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b087      	sub	sp, #28
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff0:	3304      	adds	r3, #4
 800bff2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	0a5b      	lsrs	r3, r3, #9
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	8952      	ldrh	r2, [r2, #10]
 800bffc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c000:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	1d1a      	adds	r2, r3, #4
 800c006:	613a      	str	r2, [r7, #16]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <clmt_clust+0x3a>
 800c012:	2300      	movs	r3, #0
 800c014:	e010      	b.n	800c038 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d307      	bcc.n	800c02e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	617b      	str	r3, [r7, #20]
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	3304      	adds	r3, #4
 800c02a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c02c:	e7e9      	b.n	800c002 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c02e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	4413      	add	r3, r2
}
 800c038:	4618      	mov	r0, r3
 800c03a:	371c      	adds	r7, #28
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c05a:	d204      	bcs.n	800c066 <dir_sdi+0x22>
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	f003 031f 	and.w	r3, r3, #31
 800c062:	2b00      	cmp	r3, #0
 800c064:	d001      	beq.n	800c06a <dir_sdi+0x26>
		return FR_INT_ERR;
 800c066:	2302      	movs	r3, #2
 800c068:	e063      	b.n	800c132 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d106      	bne.n	800c08a <dir_sdi+0x46>
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	2b02      	cmp	r3, #2
 800c082:	d902      	bls.n	800c08a <dir_sdi+0x46>
		clst = fs->dirbase;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c088:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10c      	bne.n	800c0aa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	095b      	lsrs	r3, r3, #5
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	8912      	ldrh	r2, [r2, #8]
 800c098:	4293      	cmp	r3, r2
 800c09a:	d301      	bcc.n	800c0a0 <dir_sdi+0x5c>
 800c09c:	2302      	movs	r3, #2
 800c09e:	e048      	b.n	800c132 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	61da      	str	r2, [r3, #28]
 800c0a8:	e029      	b.n	800c0fe <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	895b      	ldrh	r3, [r3, #10]
 800c0ae:	025b      	lsls	r3, r3, #9
 800c0b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0b2:	e019      	b.n	800c0e8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6979      	ldr	r1, [r7, #20]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff fcfe 	bl	800baba <get_fat>
 800c0be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c6:	d101      	bne.n	800c0cc <dir_sdi+0x88>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e032      	b.n	800c132 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d904      	bls.n	800c0dc <dir_sdi+0x98>
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d301      	bcc.n	800c0e0 <dir_sdi+0x9c>
 800c0dc:	2302      	movs	r3, #2
 800c0de:	e028      	b.n	800c132 <dir_sdi+0xee>
			ofs -= csz;
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d2e1      	bcs.n	800c0b4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c0f0:	6979      	ldr	r1, [r7, #20]
 800c0f2:	6938      	ldr	r0, [r7, #16]
 800c0f4:	f7ff fcc2 	bl	800ba7c <clust2sect>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	69db      	ldr	r3, [r3, #28]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <dir_sdi+0xcc>
 800c10c:	2302      	movs	r3, #2
 800c10e:	e010      	b.n	800c132 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	69da      	ldr	r2, [r3, #28]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	0a5b      	lsrs	r3, r3, #9
 800c118:	441a      	add	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c12a:	441a      	add	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b086      	sub	sp, #24
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	695b      	ldr	r3, [r3, #20]
 800c14e:	3320      	adds	r3, #32
 800c150:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d003      	beq.n	800c162 <dir_next+0x28>
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c160:	d301      	bcc.n	800c166 <dir_next+0x2c>
 800c162:	2304      	movs	r3, #4
 800c164:	e0aa      	b.n	800c2bc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f040 8098 	bne.w	800c2a2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d10b      	bne.n	800c19c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	095b      	lsrs	r3, r3, #5
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	8912      	ldrh	r2, [r2, #8]
 800c18c:	4293      	cmp	r3, r2
 800c18e:	f0c0 8088 	bcc.w	800c2a2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	61da      	str	r2, [r3, #28]
 800c198:	2304      	movs	r3, #4
 800c19a:	e08f      	b.n	800c2bc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	0a5b      	lsrs	r3, r3, #9
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	8952      	ldrh	r2, [r2, #10]
 800c1a4:	3a01      	subs	r2, #1
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d17a      	bne.n	800c2a2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	f7ff fc80 	bl	800baba <get_fat>
 800c1ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d801      	bhi.n	800c1c6 <dir_next+0x8c>
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	e07a      	b.n	800c2bc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1cc:	d101      	bne.n	800c1d2 <dir_next+0x98>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e074      	b.n	800c2bc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d358      	bcc.n	800c28e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d104      	bne.n	800c1ec <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	61da      	str	r2, [r3, #28]
 800c1e8:	2304      	movs	r3, #4
 800c1ea:	e067      	b.n	800c2bc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	f7ff fe59 	bl	800beac <create_chain>
 800c1fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <dir_next+0xcc>
 800c202:	2307      	movs	r3, #7
 800c204:	e05a      	b.n	800c2bc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d101      	bne.n	800c210 <dir_next+0xd6>
 800c20c:	2302      	movs	r3, #2
 800c20e:	e055      	b.n	800c2bc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c216:	d101      	bne.n	800c21c <dir_next+0xe2>
 800c218:	2301      	movs	r3, #1
 800c21a:	e04f      	b.n	800c2bc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7ff fb4d 	bl	800b8bc <sync_window>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <dir_next+0xf2>
 800c228:	2301      	movs	r3, #1
 800c22a:	e047      	b.n	800c2bc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3334      	adds	r3, #52	; 0x34
 800c230:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c234:	2100      	movs	r1, #0
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff f977 	bl	800b52a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c23c:	2300      	movs	r3, #0
 800c23e:	613b      	str	r3, [r7, #16]
 800c240:	6979      	ldr	r1, [r7, #20]
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f7ff fc1a 	bl	800ba7c <clust2sect>
 800c248:	4602      	mov	r2, r0
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	631a      	str	r2, [r3, #48]	; 0x30
 800c24e:	e012      	b.n	800c276 <dir_next+0x13c>
						fs->wflag = 1;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2201      	movs	r2, #1
 800c254:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f7ff fb30 	bl	800b8bc <sync_window>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d001      	beq.n	800c266 <dir_next+0x12c>
 800c262:	2301      	movs	r3, #1
 800c264:	e02a      	b.n	800c2bc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	3301      	adds	r3, #1
 800c26a:	613b      	str	r3, [r7, #16]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c270:	1c5a      	adds	r2, r3, #1
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	631a      	str	r2, [r3, #48]	; 0x30
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	895b      	ldrh	r3, [r3, #10]
 800c27a:	461a      	mov	r2, r3
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	4293      	cmp	r3, r2
 800c280:	d3e6      	bcc.n	800c250 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	1ad2      	subs	r2, r2, r3
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	697a      	ldr	r2, [r7, #20]
 800c292:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c294:	6979      	ldr	r1, [r7, #20]
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f7ff fbf0 	bl	800ba7c <clust2sect>
 800c29c:	4602      	mov	r2, r0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2b4:	441a      	add	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3718      	adds	r7, #24
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7ff feb4 	bl	800c044 <dir_sdi>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2e0:	7dfb      	ldrb	r3, [r7, #23]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d12b      	bne.n	800c33e <dir_alloc+0x7a>
		n = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f7ff fb27 	bl	800b944 <move_window>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c2fa:	7dfb      	ldrb	r3, [r7, #23]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d11d      	bne.n	800c33c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a1b      	ldr	r3, [r3, #32]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	2be5      	cmp	r3, #229	; 0xe5
 800c308:	d004      	beq.n	800c314 <dir_alloc+0x50>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d107      	bne.n	800c324 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	3301      	adds	r3, #1
 800c318:	613b      	str	r3, [r7, #16]
 800c31a:	693a      	ldr	r2, [r7, #16]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d102      	bne.n	800c328 <dir_alloc+0x64>
 800c322:	e00c      	b.n	800c33e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c324:	2300      	movs	r3, #0
 800c326:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c328:	2101      	movs	r1, #1
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7ff ff05 	bl	800c13a <dir_next>
 800c330:	4603      	mov	r3, r0
 800c332:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c334:	7dfb      	ldrb	r3, [r7, #23]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d0d7      	beq.n	800c2ea <dir_alloc+0x26>
 800c33a:	e000      	b.n	800c33e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c33c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c33e:	7dfb      	ldrb	r3, [r7, #23]
 800c340:	2b04      	cmp	r3, #4
 800c342:	d101      	bne.n	800c348 <dir_alloc+0x84>
 800c344:	2307      	movs	r3, #7
 800c346:	75fb      	strb	r3, [r7, #23]
	return res;
 800c348:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3718      	adds	r7, #24
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	331a      	adds	r3, #26
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff f83f 	bl	800b3e4 <ld_word>
 800c366:	4603      	mov	r3, r0
 800c368:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	2b03      	cmp	r3, #3
 800c370:	d109      	bne.n	800c386 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	3314      	adds	r3, #20
 800c376:	4618      	mov	r0, r3
 800c378:	f7ff f834 	bl	800b3e4 <ld_word>
 800c37c:	4603      	mov	r3, r0
 800c37e:	041b      	lsls	r3, r3, #16
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	4313      	orrs	r3, r2
 800c384:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c386:	68fb      	ldr	r3, [r7, #12]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	331a      	adds	r3, #26
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	b292      	uxth	r2, r2
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff f857 	bl	800b45a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	2b03      	cmp	r3, #3
 800c3b2:	d109      	bne.n	800c3c8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	f103 0214 	add.w	r2, r3, #20
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	0c1b      	lsrs	r3, r3, #16
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	f7ff f849 	bl	800b45a <st_word>
	}
}
 800c3c8:	bf00      	nop
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c3d0:	b590      	push	{r4, r7, lr}
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	331a      	adds	r3, #26
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff f800 	bl	800b3e4 <ld_word>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <cmp_lfn+0x1e>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	e059      	b.n	800c4a2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3f6:	1e5a      	subs	r2, r3, #1
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4413      	add	r3, r2
 800c402:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c404:	2301      	movs	r3, #1
 800c406:	81fb      	strh	r3, [r7, #14]
 800c408:	2300      	movs	r3, #0
 800c40a:	613b      	str	r3, [r7, #16]
 800c40c:	e033      	b.n	800c476 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c40e:	4a27      	ldr	r2, [pc, #156]	; (800c4ac <cmp_lfn+0xdc>)
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	4413      	add	r3, r2
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	4413      	add	r3, r2
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fe ffe1 	bl	800b3e4 <ld_word>
 800c422:	4603      	mov	r3, r0
 800c424:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c426:	89fb      	ldrh	r3, [r7, #14]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01a      	beq.n	800c462 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	2bfe      	cmp	r3, #254	; 0xfe
 800c430:	d812      	bhi.n	800c458 <cmp_lfn+0x88>
 800c432:	89bb      	ldrh	r3, [r7, #12]
 800c434:	4618      	mov	r0, r3
 800c436:	f001 fcdd 	bl	800ddf4 <ff_wtoupper>
 800c43a:	4603      	mov	r3, r0
 800c43c:	461c      	mov	r4, r3
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	1c5a      	adds	r2, r3, #1
 800c442:	617a      	str	r2, [r7, #20]
 800c444:	005b      	lsls	r3, r3, #1
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	4413      	add	r3, r2
 800c44a:	881b      	ldrh	r3, [r3, #0]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f001 fcd1 	bl	800ddf4 <ff_wtoupper>
 800c452:	4603      	mov	r3, r0
 800c454:	429c      	cmp	r4, r3
 800c456:	d001      	beq.n	800c45c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c458:	2300      	movs	r3, #0
 800c45a:	e022      	b.n	800c4a2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c45c:	89bb      	ldrh	r3, [r7, #12]
 800c45e:	81fb      	strh	r3, [r7, #14]
 800c460:	e006      	b.n	800c470 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c462:	89bb      	ldrh	r3, [r7, #12]
 800c464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c468:	4293      	cmp	r3, r2
 800c46a:	d001      	beq.n	800c470 <cmp_lfn+0xa0>
 800c46c:	2300      	movs	r3, #0
 800c46e:	e018      	b.n	800c4a2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	3301      	adds	r3, #1
 800c474:	613b      	str	r3, [r7, #16]
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	2b0c      	cmp	r3, #12
 800c47a:	d9c8      	bls.n	800c40e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00b      	beq.n	800c4a0 <cmp_lfn+0xd0>
 800c488:	89fb      	ldrh	r3, [r7, #14]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d008      	beq.n	800c4a0 <cmp_lfn+0xd0>
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	005b      	lsls	r3, r3, #1
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	4413      	add	r3, r2
 800c496:	881b      	ldrh	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <cmp_lfn+0xd0>
 800c49c:	2300      	movs	r3, #0
 800c49e:	e000      	b.n	800c4a2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c4a0:	2301      	movs	r3, #1
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	371c      	adds	r7, #28
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd90      	pop	{r4, r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	080141e4 	.word	0x080141e4

0800c4b0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b088      	sub	sp, #32
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	4611      	mov	r1, r2
 800c4bc:	461a      	mov	r2, r3
 800c4be:	460b      	mov	r3, r1
 800c4c0:	71fb      	strb	r3, [r7, #7]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	330d      	adds	r3, #13
 800c4ca:	79ba      	ldrb	r2, [r7, #6]
 800c4cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	330b      	adds	r3, #11
 800c4d2:	220f      	movs	r2, #15
 800c4d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	330c      	adds	r3, #12
 800c4da:	2200      	movs	r2, #0
 800c4dc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	331a      	adds	r3, #26
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fe ffb8 	bl	800b45a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	1e5a      	subs	r2, r3, #1
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	005b      	lsls	r3, r3, #1
 800c4f2:	4413      	add	r3, r2
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	4413      	add	r3, r2
 800c4f8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	82fb      	strh	r3, [r7, #22]
 800c4fe:	2300      	movs	r3, #0
 800c500:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c502:	8afb      	ldrh	r3, [r7, #22]
 800c504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c508:	4293      	cmp	r3, r2
 800c50a:	d007      	beq.n	800c51c <put_lfn+0x6c>
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	1c5a      	adds	r2, r3, #1
 800c510:	61fa      	str	r2, [r7, #28]
 800c512:	005b      	lsls	r3, r3, #1
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	4413      	add	r3, r2
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c51c:	4a17      	ldr	r2, [pc, #92]	; (800c57c <put_lfn+0xcc>)
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	4413      	add	r3, r2
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	461a      	mov	r2, r3
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	4413      	add	r3, r2
 800c52a:	8afa      	ldrh	r2, [r7, #22]
 800c52c:	4611      	mov	r1, r2
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fe ff93 	bl	800b45a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c534:	8afb      	ldrh	r3, [r7, #22]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d102      	bne.n	800c540 <put_lfn+0x90>
 800c53a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c53e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	3301      	adds	r3, #1
 800c544:	61bb      	str	r3, [r7, #24]
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	2b0c      	cmp	r3, #12
 800c54a:	d9da      	bls.n	800c502 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c54c:	8afb      	ldrh	r3, [r7, #22]
 800c54e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c552:	4293      	cmp	r3, r2
 800c554:	d006      	beq.n	800c564 <put_lfn+0xb4>
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	4413      	add	r3, r2
 800c55e:	881b      	ldrh	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d103      	bne.n	800c56c <put_lfn+0xbc>
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c56a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	79fa      	ldrb	r2, [r7, #7]
 800c570:	701a      	strb	r2, [r3, #0]
}
 800c572:	bf00      	nop
 800c574:	3720      	adds	r7, #32
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	080141e4 	.word	0x080141e4

0800c580 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08c      	sub	sp, #48	; 0x30
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	607a      	str	r2, [r7, #4]
 800c58c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c58e:	220b      	movs	r2, #11
 800c590:	68b9      	ldr	r1, [r7, #8]
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7fe ffa8 	bl	800b4e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	2b05      	cmp	r3, #5
 800c59c:	d92b      	bls.n	800c5f6 <gen_numname+0x76>
		sr = seq;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c5a2:	e022      	b.n	800c5ea <gen_numname+0x6a>
			wc = *lfn++;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	1c9a      	adds	r2, r3, #2
 800c5a8:	607a      	str	r2, [r7, #4]
 800c5aa:	881b      	ldrh	r3, [r3, #0]
 800c5ac:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5b2:	e017      	b.n	800c5e4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	005a      	lsls	r2, r3, #1
 800c5b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	4413      	add	r3, r2
 800c5c0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c5c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c5c4:	085b      	lsrs	r3, r3, #1
 800c5c6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d005      	beq.n	800c5de <gen_numname+0x5e>
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c5d8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c5dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	2b0f      	cmp	r3, #15
 800c5e8:	d9e4      	bls.n	800c5b4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1d8      	bne.n	800c5a4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c5f6:	2307      	movs	r3, #7
 800c5f8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	f003 030f 	and.w	r3, r3, #15
 800c602:	b2db      	uxtb	r3, r3
 800c604:	3330      	adds	r3, #48	; 0x30
 800c606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c60a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c60e:	2b39      	cmp	r3, #57	; 0x39
 800c610:	d904      	bls.n	800c61c <gen_numname+0x9c>
 800c612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c616:	3307      	adds	r3, #7
 800c618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61e:	1e5a      	subs	r2, r3, #1
 800c620:	62ba      	str	r2, [r7, #40]	; 0x28
 800c622:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c626:	4413      	add	r3, r2
 800c628:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c62c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	091b      	lsrs	r3, r3, #4
 800c634:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1de      	bne.n	800c5fa <gen_numname+0x7a>
	ns[i] = '~';
 800c63c:	f107 0214 	add.w	r2, r7, #20
 800c640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c642:	4413      	add	r3, r2
 800c644:	227e      	movs	r2, #126	; 0x7e
 800c646:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c648:	2300      	movs	r3, #0
 800c64a:	627b      	str	r3, [r7, #36]	; 0x24
 800c64c:	e002      	b.n	800c654 <gen_numname+0xd4>
 800c64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c650:	3301      	adds	r3, #1
 800c652:	627b      	str	r3, [r7, #36]	; 0x24
 800c654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c658:	429a      	cmp	r2, r3
 800c65a:	d205      	bcs.n	800c668 <gen_numname+0xe8>
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c660:	4413      	add	r3, r2
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b20      	cmp	r3, #32
 800c666:	d1f2      	bne.n	800c64e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66a:	2b07      	cmp	r3, #7
 800c66c:	d808      	bhi.n	800c680 <gen_numname+0x100>
 800c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c670:	1c5a      	adds	r2, r3, #1
 800c672:	62ba      	str	r2, [r7, #40]	; 0x28
 800c674:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c678:	4413      	add	r3, r2
 800c67a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c67e:	e000      	b.n	800c682 <gen_numname+0x102>
 800c680:	2120      	movs	r1, #32
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	627a      	str	r2, [r7, #36]	; 0x24
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	4413      	add	r3, r2
 800c68c:	460a      	mov	r2, r1
 800c68e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	2b07      	cmp	r3, #7
 800c694:	d9e8      	bls.n	800c668 <gen_numname+0xe8>
}
 800c696:	bf00      	nop
 800c698:	bf00      	nop
 800c69a:	3730      	adds	r7, #48	; 0x30
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c6ac:	230b      	movs	r3, #11
 800c6ae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c6b0:	7bfb      	ldrb	r3, [r7, #15]
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	0852      	lsrs	r2, r2, #1
 800c6b6:	01db      	lsls	r3, r3, #7
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	b2da      	uxtb	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	1c59      	adds	r1, r3, #1
 800c6c0:	6079      	str	r1, [r7, #4]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	60bb      	str	r3, [r7, #8]
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1ed      	bne.n	800c6b0 <sum_sfn+0x10>
	return sum;
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b086      	sub	sp, #24
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7ff fca6 	bl	800c044 <dir_sdi>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c6fc:	7dfb      	ldrb	r3, [r7, #23]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <dir_find+0x24>
 800c702:	7dfb      	ldrb	r3, [r7, #23]
 800c704:	e0a9      	b.n	800c85a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c706:	23ff      	movs	r3, #255	; 0xff
 800c708:	753b      	strb	r3, [r7, #20]
 800c70a:	7d3b      	ldrb	r3, [r7, #20]
 800c70c:	757b      	strb	r3, [r7, #21]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f04f 32ff 	mov.w	r2, #4294967295
 800c714:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	69db      	ldr	r3, [r3, #28]
 800c71a:	4619      	mov	r1, r3
 800c71c:	6938      	ldr	r0, [r7, #16]
 800c71e:	f7ff f911 	bl	800b944 <move_window>
 800c722:	4603      	mov	r3, r0
 800c724:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c726:	7dfb      	ldrb	r3, [r7, #23]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f040 8090 	bne.w	800c84e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c736:	7dbb      	ldrb	r3, [r7, #22]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d102      	bne.n	800c742 <dir_find+0x60>
 800c73c:	2304      	movs	r3, #4
 800c73e:	75fb      	strb	r3, [r7, #23]
 800c740:	e08a      	b.n	800c858 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	330b      	adds	r3, #11
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c74e:	73fb      	strb	r3, [r7, #15]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	7bfa      	ldrb	r2, [r7, #15]
 800c754:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c756:	7dbb      	ldrb	r3, [r7, #22]
 800c758:	2be5      	cmp	r3, #229	; 0xe5
 800c75a:	d007      	beq.n	800c76c <dir_find+0x8a>
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
 800c75e:	f003 0308 	and.w	r3, r3, #8
 800c762:	2b00      	cmp	r3, #0
 800c764:	d009      	beq.n	800c77a <dir_find+0x98>
 800c766:	7bfb      	ldrb	r3, [r7, #15]
 800c768:	2b0f      	cmp	r3, #15
 800c76a:	d006      	beq.n	800c77a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c76c:	23ff      	movs	r3, #255	; 0xff
 800c76e:	757b      	strb	r3, [r7, #21]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f04f 32ff 	mov.w	r2, #4294967295
 800c776:	631a      	str	r2, [r3, #48]	; 0x30
 800c778:	e05e      	b.n	800c838 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c77a:	7bfb      	ldrb	r3, [r7, #15]
 800c77c:	2b0f      	cmp	r3, #15
 800c77e:	d136      	bne.n	800c7ee <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d154      	bne.n	800c838 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c78e:	7dbb      	ldrb	r3, [r7, #22]
 800c790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00d      	beq.n	800c7b4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a1b      	ldr	r3, [r3, #32]
 800c79c:	7b5b      	ldrb	r3, [r3, #13]
 800c79e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c7a0:	7dbb      	ldrb	r3, [r7, #22]
 800c7a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7a6:	75bb      	strb	r3, [r7, #22]
 800c7a8:	7dbb      	ldrb	r3, [r7, #22]
 800c7aa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	695a      	ldr	r2, [r3, #20]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c7b4:	7dba      	ldrb	r2, [r7, #22]
 800c7b6:	7d7b      	ldrb	r3, [r7, #21]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d115      	bne.n	800c7e8 <dir_find+0x106>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a1b      	ldr	r3, [r3, #32]
 800c7c0:	330d      	adds	r3, #13
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	7d3a      	ldrb	r2, [r7, #20]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d10e      	bne.n	800c7e8 <dir_find+0x106>
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	68da      	ldr	r2, [r3, #12]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	f7ff fdfb 	bl	800c3d0 <cmp_lfn>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <dir_find+0x106>
 800c7e0:	7d7b      	ldrb	r3, [r7, #21]
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	e000      	b.n	800c7ea <dir_find+0x108>
 800c7e8:	23ff      	movs	r3, #255	; 0xff
 800c7ea:	757b      	strb	r3, [r7, #21]
 800c7ec:	e024      	b.n	800c838 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c7ee:	7d7b      	ldrb	r3, [r7, #21]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d109      	bne.n	800c808 <dir_find+0x126>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a1b      	ldr	r3, [r3, #32]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7ff ff51 	bl	800c6a0 <sum_sfn>
 800c7fe:	4603      	mov	r3, r0
 800c800:	461a      	mov	r2, r3
 800c802:	7d3b      	ldrb	r3, [r7, #20]
 800c804:	4293      	cmp	r3, r2
 800c806:	d024      	beq.n	800c852 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c80e:	f003 0301 	and.w	r3, r3, #1
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10a      	bne.n	800c82c <dir_find+0x14a>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a18      	ldr	r0, [r3, #32]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	3324      	adds	r3, #36	; 0x24
 800c81e:	220b      	movs	r2, #11
 800c820:	4619      	mov	r1, r3
 800c822:	f7fe fe9d 	bl	800b560 <mem_cmp>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d014      	beq.n	800c856 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c82c:	23ff      	movs	r3, #255	; 0xff
 800c82e:	757b      	strb	r3, [r7, #21]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f04f 32ff 	mov.w	r2, #4294967295
 800c836:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c838:	2100      	movs	r1, #0
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7ff fc7d 	bl	800c13a <dir_next>
 800c840:	4603      	mov	r3, r0
 800c842:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c844:	7dfb      	ldrb	r3, [r7, #23]
 800c846:	2b00      	cmp	r3, #0
 800c848:	f43f af65 	beq.w	800c716 <dir_find+0x34>
 800c84c:	e004      	b.n	800c858 <dir_find+0x176>
		if (res != FR_OK) break;
 800c84e:	bf00      	nop
 800c850:	e002      	b.n	800c858 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c852:	bf00      	nop
 800c854:	e000      	b.n	800c858 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c856:	bf00      	nop

	return res;
 800c858:	7dfb      	ldrb	r3, [r7, #23]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3718      	adds	r7, #24
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
	...

0800c864 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b08c      	sub	sp, #48	; 0x30
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c878:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <dir_register+0x20>
 800c880:	2306      	movs	r3, #6
 800c882:	e0e0      	b.n	800ca46 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c884:	2300      	movs	r3, #0
 800c886:	627b      	str	r3, [r7, #36]	; 0x24
 800c888:	e002      	b.n	800c890 <dir_register+0x2c>
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	3301      	adds	r3, #1
 800c88e:	627b      	str	r3, [r7, #36]	; 0x24
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	68da      	ldr	r2, [r3, #12]
 800c894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c896:	005b      	lsls	r3, r3, #1
 800c898:	4413      	add	r3, r2
 800c89a:	881b      	ldrh	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1f4      	bne.n	800c88a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c8a6:	f107 030c 	add.w	r3, r7, #12
 800c8aa:	220c      	movs	r2, #12
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe fe1b 	bl	800b4e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c8b2:	7dfb      	ldrb	r3, [r7, #23]
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d032      	beq.n	800c922 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2240      	movs	r2, #64	; 0x40
 800c8c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8c8:	e016      	b.n	800c8f8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	68da      	ldr	r2, [r3, #12]
 800c8d4:	f107 010c 	add.w	r1, r7, #12
 800c8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8da:	f7ff fe51 	bl	800c580 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f7ff feff 	bl	800c6e2 <dir_find>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c8ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d106      	bne.n	800c900 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fa:	2b63      	cmp	r3, #99	; 0x63
 800c8fc:	d9e5      	bls.n	800c8ca <dir_register+0x66>
 800c8fe:	e000      	b.n	800c902 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c900:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c904:	2b64      	cmp	r3, #100	; 0x64
 800c906:	d101      	bne.n	800c90c <dir_register+0xa8>
 800c908:	2307      	movs	r3, #7
 800c90a:	e09c      	b.n	800ca46 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c90c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c910:	2b04      	cmp	r3, #4
 800c912:	d002      	beq.n	800c91a <dir_register+0xb6>
 800c914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c918:	e095      	b.n	800ca46 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c91a:	7dfa      	ldrb	r2, [r7, #23]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c922:	7dfb      	ldrb	r3, [r7, #23]
 800c924:	f003 0302 	and.w	r3, r3, #2
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d007      	beq.n	800c93c <dir_register+0xd8>
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	330c      	adds	r3, #12
 800c930:	4a47      	ldr	r2, [pc, #284]	; (800ca50 <dir_register+0x1ec>)
 800c932:	fba2 2303 	umull	r2, r3, r2, r3
 800c936:	089b      	lsrs	r3, r3, #2
 800c938:	3301      	adds	r3, #1
 800c93a:	e000      	b.n	800c93e <dir_register+0xda>
 800c93c:	2301      	movs	r3, #1
 800c93e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c940:	6a39      	ldr	r1, [r7, #32]
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7ff fcbe 	bl	800c2c4 <dir_alloc>
 800c948:	4603      	mov	r3, r0
 800c94a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c94e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c952:	2b00      	cmp	r3, #0
 800c954:	d148      	bne.n	800c9e8 <dir_register+0x184>
 800c956:	6a3b      	ldr	r3, [r7, #32]
 800c958:	3b01      	subs	r3, #1
 800c95a:	623b      	str	r3, [r7, #32]
 800c95c:	6a3b      	ldr	r3, [r7, #32]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d042      	beq.n	800c9e8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	695a      	ldr	r2, [r3, #20]
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	015b      	lsls	r3, r3, #5
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	4619      	mov	r1, r3
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7ff fb68 	bl	800c044 <dir_sdi>
 800c974:	4603      	mov	r3, r0
 800c976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c97a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d132      	bne.n	800c9e8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	3324      	adds	r3, #36	; 0x24
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff fe8a 	bl	800c6a0 <sum_sfn>
 800c98c:	4603      	mov	r3, r0
 800c98e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	69db      	ldr	r3, [r3, #28]
 800c994:	4619      	mov	r1, r3
 800c996:	69f8      	ldr	r0, [r7, #28]
 800c998:	f7fe ffd4 	bl	800b944 <move_window>
 800c99c:	4603      	mov	r3, r0
 800c99e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c9a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d11d      	bne.n	800c9e6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	68d8      	ldr	r0, [r3, #12]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a19      	ldr	r1, [r3, #32]
 800c9b2:	6a3b      	ldr	r3, [r7, #32]
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	7efb      	ldrb	r3, [r7, #27]
 800c9b8:	f7ff fd7a 	bl	800c4b0 <put_lfn>
				fs->wflag = 1;
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c9c2:	2100      	movs	r1, #0
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7ff fbb8 	bl	800c13a <dir_next>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c9d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d107      	bne.n	800c9e8 <dir_register+0x184>
 800c9d8:	6a3b      	ldr	r3, [r7, #32]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	623b      	str	r3, [r7, #32]
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1d5      	bne.n	800c990 <dir_register+0x12c>
 800c9e4:	e000      	b.n	800c9e8 <dir_register+0x184>
				if (res != FR_OK) break;
 800c9e6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c9e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d128      	bne.n	800ca42 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	69db      	ldr	r3, [r3, #28]
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	69f8      	ldr	r0, [r7, #28]
 800c9f8:	f7fe ffa4 	bl	800b944 <move_window>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ca02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d11b      	bne.n	800ca42 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a1b      	ldr	r3, [r3, #32]
 800ca0e:	2220      	movs	r2, #32
 800ca10:	2100      	movs	r1, #0
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fe fd89 	bl	800b52a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a18      	ldr	r0, [r3, #32]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	3324      	adds	r3, #36	; 0x24
 800ca20:	220b      	movs	r2, #11
 800ca22:	4619      	mov	r1, r3
 800ca24:	f7fe fd60 	bl	800b4e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	330c      	adds	r3, #12
 800ca34:	f002 0218 	and.w	r2, r2, #24
 800ca38:	b2d2      	uxtb	r2, r2
 800ca3a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ca42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3730      	adds	r7, #48	; 0x30
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	4ec4ec4f 	.word	0x4ec4ec4f

0800ca54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08a      	sub	sp, #40	; 0x28
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	613b      	str	r3, [r7, #16]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	60fb      	str	r3, [r7, #12]
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	617b      	str	r3, [r7, #20]
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	1c5a      	adds	r2, r3, #1
 800ca78:	61ba      	str	r2, [r7, #24]
 800ca7a:	693a      	ldr	r2, [r7, #16]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ca82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca84:	2b1f      	cmp	r3, #31
 800ca86:	d940      	bls.n	800cb0a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ca88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca8a:	2b2f      	cmp	r3, #47	; 0x2f
 800ca8c:	d006      	beq.n	800ca9c <create_name+0x48>
 800ca8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca90:	2b5c      	cmp	r3, #92	; 0x5c
 800ca92:	d110      	bne.n	800cab6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ca94:	e002      	b.n	800ca9c <create_name+0x48>
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	61bb      	str	r3, [r7, #24]
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	4413      	add	r3, r2
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b2f      	cmp	r3, #47	; 0x2f
 800caa6:	d0f6      	beq.n	800ca96 <create_name+0x42>
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	4413      	add	r3, r2
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	2b5c      	cmp	r3, #92	; 0x5c
 800cab2:	d0f0      	beq.n	800ca96 <create_name+0x42>
			break;
 800cab4:	e02a      	b.n	800cb0c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	2bfe      	cmp	r3, #254	; 0xfe
 800caba:	d901      	bls.n	800cac0 <create_name+0x6c>
 800cabc:	2306      	movs	r3, #6
 800cabe:	e177      	b.n	800cdb0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cac8:	2101      	movs	r1, #1
 800caca:	4618      	mov	r0, r3
 800cacc:	f001 f956 	bl	800dd7c <ff_convert>
 800cad0:	4603      	mov	r3, r0
 800cad2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <create_name+0x8a>
 800cada:	2306      	movs	r3, #6
 800cadc:	e168      	b.n	800cdb0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cae0:	2b7f      	cmp	r3, #127	; 0x7f
 800cae2:	d809      	bhi.n	800caf8 <create_name+0xa4>
 800cae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cae6:	4619      	mov	r1, r3
 800cae8:	48b3      	ldr	r0, [pc, #716]	; (800cdb8 <create_name+0x364>)
 800caea:	f7fe fd60 	bl	800b5ae <chk_chr>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <create_name+0xa4>
 800caf4:	2306      	movs	r3, #6
 800caf6:	e15b      	b.n	800cdb0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	1c5a      	adds	r2, r3, #1
 800cafc:	617a      	str	r2, [r7, #20]
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	4413      	add	r3, r2
 800cb04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb06:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cb08:	e7b4      	b.n	800ca74 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cb0a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cb0c:	693a      	ldr	r2, [r7, #16]
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	441a      	add	r2, r3
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cb16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb18:	2b1f      	cmp	r3, #31
 800cb1a:	d801      	bhi.n	800cb20 <create_name+0xcc>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	e000      	b.n	800cb22 <create_name+0xce>
 800cb20:	2300      	movs	r3, #0
 800cb22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cb26:	e011      	b.n	800cb4c <create_name+0xf8>
		w = lfn[di - 1];
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	005b      	lsls	r3, r3, #1
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	4413      	add	r3, r2
 800cb36:	881b      	ldrh	r3, [r3, #0]
 800cb38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cb3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb3c:	2b20      	cmp	r3, #32
 800cb3e:	d002      	beq.n	800cb46 <create_name+0xf2>
 800cb40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb42:	2b2e      	cmp	r3, #46	; 0x2e
 800cb44:	d106      	bne.n	800cb54 <create_name+0x100>
		di--;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1ea      	bne.n	800cb28 <create_name+0xd4>
 800cb52:	e000      	b.n	800cb56 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cb54:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	2200      	movs	r2, #0
 800cb60:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d101      	bne.n	800cb6c <create_name+0x118>
 800cb68:	2306      	movs	r3, #6
 800cb6a:	e121      	b.n	800cdb0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3324      	adds	r3, #36	; 0x24
 800cb70:	220b      	movs	r2, #11
 800cb72:	2120      	movs	r1, #32
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fe fcd8 	bl	800b52a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	61bb      	str	r3, [r7, #24]
 800cb7e:	e002      	b.n	800cb86 <create_name+0x132>
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	3301      	adds	r3, #1
 800cb84:	61bb      	str	r3, [r7, #24]
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	2b20      	cmp	r3, #32
 800cb92:	d0f5      	beq.n	800cb80 <create_name+0x12c>
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	881b      	ldrh	r3, [r3, #0]
 800cb9e:	2b2e      	cmp	r3, #46	; 0x2e
 800cba0:	d0ee      	beq.n	800cb80 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d009      	beq.n	800cbbc <create_name+0x168>
 800cba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbac:	f043 0303 	orr.w	r3, r3, #3
 800cbb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cbb4:	e002      	b.n	800cbbc <create_name+0x168>
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	617b      	str	r3, [r7, #20]
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d009      	beq.n	800cbd6 <create_name+0x182>
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	4413      	add	r3, r2
 800cbd0:	881b      	ldrh	r3, [r3, #0]
 800cbd2:	2b2e      	cmp	r3, #46	; 0x2e
 800cbd4:	d1ef      	bne.n	800cbb6 <create_name+0x162>

	i = b = 0; ni = 8;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cbdc:	2300      	movs	r3, #0
 800cbde:	623b      	str	r3, [r7, #32]
 800cbe0:	2308      	movs	r3, #8
 800cbe2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	1c5a      	adds	r2, r3, #1
 800cbe8:	61ba      	str	r2, [r7, #24]
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	4413      	add	r3, r2
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cbf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f000 8090 	beq.w	800cd1c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cbfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbfe:	2b20      	cmp	r3, #32
 800cc00:	d006      	beq.n	800cc10 <create_name+0x1bc>
 800cc02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc04:	2b2e      	cmp	r3, #46	; 0x2e
 800cc06:	d10a      	bne.n	800cc1e <create_name+0x1ca>
 800cc08:	69ba      	ldr	r2, [r7, #24]
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d006      	beq.n	800cc1e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cc10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc14:	f043 0303 	orr.w	r3, r3, #3
 800cc18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc1c:	e07d      	b.n	800cd1a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cc1e:	6a3a      	ldr	r2, [r7, #32]
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d203      	bcs.n	800cc2e <create_name+0x1da>
 800cc26:	69ba      	ldr	r2, [r7, #24]
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d123      	bne.n	800cc76 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	2b0b      	cmp	r3, #11
 800cc32:	d106      	bne.n	800cc42 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cc34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc38:	f043 0303 	orr.w	r3, r3, #3
 800cc3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc40:	e06f      	b.n	800cd22 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cc42:	69ba      	ldr	r2, [r7, #24]
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d005      	beq.n	800cc56 <create_name+0x202>
 800cc4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc4e:	f043 0303 	orr.w	r3, r3, #3
 800cc52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d860      	bhi.n	800cd20 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	61bb      	str	r3, [r7, #24]
 800cc62:	2308      	movs	r3, #8
 800cc64:	623b      	str	r3, [r7, #32]
 800cc66:	230b      	movs	r3, #11
 800cc68:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cc6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc74:	e051      	b.n	800cd1a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cc76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc78:	2b7f      	cmp	r3, #127	; 0x7f
 800cc7a:	d914      	bls.n	800cca6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cc7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc7e:	2100      	movs	r1, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	f001 f87b 	bl	800dd7c <ff_convert>
 800cc86:	4603      	mov	r3, r0
 800cc88:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cc8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d004      	beq.n	800cc9a <create_name+0x246>
 800cc90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc92:	3b80      	subs	r3, #128	; 0x80
 800cc94:	4a49      	ldr	r2, [pc, #292]	; (800cdbc <create_name+0x368>)
 800cc96:	5cd3      	ldrb	r3, [r2, r3]
 800cc98:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cc9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc9e:	f043 0302 	orr.w	r3, r3, #2
 800cca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d007      	beq.n	800ccbc <create_name+0x268>
 800ccac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccae:	4619      	mov	r1, r3
 800ccb0:	4843      	ldr	r0, [pc, #268]	; (800cdc0 <create_name+0x36c>)
 800ccb2:	f7fe fc7c 	bl	800b5ae <chk_chr>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d008      	beq.n	800ccce <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ccbc:	235f      	movs	r3, #95	; 0x5f
 800ccbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ccc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc4:	f043 0303 	orr.w	r3, r3, #3
 800ccc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cccc:	e01b      	b.n	800cd06 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ccce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccd0:	2b40      	cmp	r3, #64	; 0x40
 800ccd2:	d909      	bls.n	800cce8 <create_name+0x294>
 800ccd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccd6:	2b5a      	cmp	r3, #90	; 0x5a
 800ccd8:	d806      	bhi.n	800cce8 <create_name+0x294>
					b |= 2;
 800ccda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccde:	f043 0302 	orr.w	r3, r3, #2
 800cce2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cce6:	e00e      	b.n	800cd06 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccea:	2b60      	cmp	r3, #96	; 0x60
 800ccec:	d90b      	bls.n	800cd06 <create_name+0x2b2>
 800ccee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccf0:	2b7a      	cmp	r3, #122	; 0x7a
 800ccf2:	d808      	bhi.n	800cd06 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ccf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccf8:	f043 0301 	orr.w	r3, r3, #1
 800ccfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cd00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd02:	3b20      	subs	r3, #32
 800cd04:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cd06:	6a3b      	ldr	r3, [r7, #32]
 800cd08:	1c5a      	adds	r2, r3, #1
 800cd0a:	623a      	str	r2, [r7, #32]
 800cd0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd0e:	b2d1      	uxtb	r1, r2
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	4413      	add	r3, r2
 800cd14:	460a      	mov	r2, r1
 800cd16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800cd1a:	e763      	b.n	800cbe4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cd1c:	bf00      	nop
 800cd1e:	e000      	b.n	800cd22 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800cd20:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cd28:	2be5      	cmp	r3, #229	; 0xe5
 800cd2a:	d103      	bne.n	800cd34 <create_name+0x2e0>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2205      	movs	r2, #5
 800cd30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	2b08      	cmp	r3, #8
 800cd38:	d104      	bne.n	800cd44 <create_name+0x2f0>
 800cd3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cd44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd48:	f003 030c 	and.w	r3, r3, #12
 800cd4c:	2b0c      	cmp	r3, #12
 800cd4e:	d005      	beq.n	800cd5c <create_name+0x308>
 800cd50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd54:	f003 0303 	and.w	r3, r3, #3
 800cd58:	2b03      	cmp	r3, #3
 800cd5a:	d105      	bne.n	800cd68 <create_name+0x314>
 800cd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd60:	f043 0302 	orr.w	r3, r3, #2
 800cd64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cd68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd6c:	f003 0302 	and.w	r3, r3, #2
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d117      	bne.n	800cda4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cd74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd78:	f003 0303 	and.w	r3, r3, #3
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d105      	bne.n	800cd8c <create_name+0x338>
 800cd80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd84:	f043 0310 	orr.w	r3, r3, #16
 800cd88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cd8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd90:	f003 030c 	and.w	r3, r3, #12
 800cd94:	2b04      	cmp	r3, #4
 800cd96:	d105      	bne.n	800cda4 <create_name+0x350>
 800cd98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd9c:	f043 0308 	orr.w	r3, r3, #8
 800cda0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cdaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800cdae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3728      	adds	r7, #40	; 0x28
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	08012d88 	.word	0x08012d88
 800cdbc:	08014164 	.word	0x08014164
 800cdc0:	08012d94 	.word	0x08012d94

0800cdc4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b086      	sub	sp, #24
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cdd8:	e002      	b.n	800cde0 <follow_path+0x1c>
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	3301      	adds	r3, #1
 800cdde:	603b      	str	r3, [r7, #0]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b2f      	cmp	r3, #47	; 0x2f
 800cde6:	d0f8      	beq.n	800cdda <follow_path+0x16>
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b5c      	cmp	r3, #92	; 0x5c
 800cdee:	d0f4      	beq.n	800cdda <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	2b1f      	cmp	r3, #31
 800cdfc:	d80a      	bhi.n	800ce14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2280      	movs	r2, #128	; 0x80
 800ce02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ce06:	2100      	movs	r1, #0
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff f91b 	bl	800c044 <dir_sdi>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	75fb      	strb	r3, [r7, #23]
 800ce12:	e043      	b.n	800ce9c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce14:	463b      	mov	r3, r7
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fe1b 	bl	800ca54 <create_name>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d134      	bne.n	800ce92 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7ff fc5a 	bl	800c6e2 <dir_find>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ce3a:	7dfb      	ldrb	r3, [r7, #23]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00a      	beq.n	800ce56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ce40:	7dfb      	ldrb	r3, [r7, #23]
 800ce42:	2b04      	cmp	r3, #4
 800ce44:	d127      	bne.n	800ce96 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ce46:	7afb      	ldrb	r3, [r7, #11]
 800ce48:	f003 0304 	and.w	r3, r3, #4
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d122      	bne.n	800ce96 <follow_path+0xd2>
 800ce50:	2305      	movs	r3, #5
 800ce52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ce54:	e01f      	b.n	800ce96 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce56:	7afb      	ldrb	r3, [r7, #11]
 800ce58:	f003 0304 	and.w	r3, r3, #4
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d11c      	bne.n	800ce9a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	799b      	ldrb	r3, [r3, #6]
 800ce64:	f003 0310 	and.w	r3, r3, #16
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ce6c:	2305      	movs	r3, #5
 800ce6e:	75fb      	strb	r3, [r7, #23]
 800ce70:	e014      	b.n	800ce9c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	695b      	ldr	r3, [r3, #20]
 800ce7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce80:	4413      	add	r3, r2
 800ce82:	4619      	mov	r1, r3
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fa64 	bl	800c352 <ld_clust>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce90:	e7c0      	b.n	800ce14 <follow_path+0x50>
			if (res != FR_OK) break;
 800ce92:	bf00      	nop
 800ce94:	e002      	b.n	800ce9c <follow_path+0xd8>
				break;
 800ce96:	bf00      	nop
 800ce98:	e000      	b.n	800ce9c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce9a:	bf00      	nop
			}
		}
	}

	return res;
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3718      	adds	r7, #24
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cea6:	b480      	push	{r7}
 800cea8:	b087      	sub	sp, #28
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ceae:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d031      	beq.n	800cf20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	617b      	str	r3, [r7, #20]
 800cec2:	e002      	b.n	800ceca <get_ldnumber+0x24>
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	3301      	adds	r3, #1
 800cec8:	617b      	str	r3, [r7, #20]
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	2b1f      	cmp	r3, #31
 800ced0:	d903      	bls.n	800ceda <get_ldnumber+0x34>
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	2b3a      	cmp	r3, #58	; 0x3a
 800ced8:	d1f4      	bne.n	800cec4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b3a      	cmp	r3, #58	; 0x3a
 800cee0:	d11c      	bne.n	800cf1c <get_ldnumber+0x76>
			tp = *path;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	1c5a      	adds	r2, r3, #1
 800ceec:	60fa      	str	r2, [r7, #12]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	3b30      	subs	r3, #48	; 0x30
 800cef2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	2b09      	cmp	r3, #9
 800cef8:	d80e      	bhi.n	800cf18 <get_ldnumber+0x72>
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d10a      	bne.n	800cf18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d107      	bne.n	800cf18 <get_ldnumber+0x72>
					vol = (int)i;
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	617b      	str	r3, [r7, #20]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	697a      	ldr	r2, [r7, #20]
 800cf16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	e002      	b.n	800cf22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cf20:	693b      	ldr	r3, [r7, #16]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
	...

0800cf30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	70da      	strb	r2, [r3, #3]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f04f 32ff 	mov.w	r2, #4294967295
 800cf46:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7fe fcfa 	bl	800b944 <move_window>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d001      	beq.n	800cf5a <check_fs+0x2a>
 800cf56:	2304      	movs	r3, #4
 800cf58:	e038      	b.n	800cfcc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	3334      	adds	r3, #52	; 0x34
 800cf5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe fa3e 	bl	800b3e4 <ld_word>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d001      	beq.n	800cf78 <check_fs+0x48>
 800cf74:	2303      	movs	r3, #3
 800cf76:	e029      	b.n	800cfcc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf7e:	2be9      	cmp	r3, #233	; 0xe9
 800cf80:	d009      	beq.n	800cf96 <check_fs+0x66>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf88:	2beb      	cmp	r3, #235	; 0xeb
 800cf8a:	d11e      	bne.n	800cfca <check_fs+0x9a>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800cf92:	2b90      	cmp	r3, #144	; 0x90
 800cf94:	d119      	bne.n	800cfca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	3334      	adds	r3, #52	; 0x34
 800cf9a:	3336      	adds	r3, #54	; 0x36
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7fe fa39 	bl	800b414 <ld_dword>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cfa8:	4a0a      	ldr	r2, [pc, #40]	; (800cfd4 <check_fs+0xa4>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d101      	bne.n	800cfb2 <check_fs+0x82>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	e00c      	b.n	800cfcc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	3334      	adds	r3, #52	; 0x34
 800cfb6:	3352      	adds	r3, #82	; 0x52
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fe fa2b 	bl	800b414 <ld_dword>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	4a05      	ldr	r2, [pc, #20]	; (800cfd8 <check_fs+0xa8>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d101      	bne.n	800cfca <check_fs+0x9a>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	e000      	b.n	800cfcc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cfca:	2302      	movs	r3, #2
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	00544146 	.word	0x00544146
 800cfd8:	33544146 	.word	0x33544146

0800cfdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b096      	sub	sp, #88	; 0x58
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2200      	movs	r2, #0
 800cfee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f7ff ff58 	bl	800cea6 <get_ldnumber>
 800cff6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	da01      	bge.n	800d002 <find_volume+0x26>
 800cffe:	230b      	movs	r3, #11
 800d000:	e231      	b.n	800d466 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d002:	4aa8      	ldr	r2, [pc, #672]	; (800d2a4 <find_volume+0x2c8>)
 800d004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d00a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d101      	bne.n	800d016 <find_volume+0x3a>
 800d012:	230c      	movs	r3, #12
 800d014:	e227      	b.n	800d466 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d01a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d01c:	79fb      	ldrb	r3, [r7, #7]
 800d01e:	f023 0301 	bic.w	r3, r3, #1
 800d022:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d01a      	beq.n	800d062 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02e:	785b      	ldrb	r3, [r3, #1]
 800d030:	4618      	mov	r0, r3
 800d032:	f7fe f939 	bl	800b2a8 <disk_status>
 800d036:	4603      	mov	r3, r0
 800d038:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d03c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10c      	bne.n	800d062 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d048:	79fb      	ldrb	r3, [r7, #7]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d007      	beq.n	800d05e <find_volume+0x82>
 800d04e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d052:	f003 0304 	and.w	r3, r3, #4
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d05a:	230a      	movs	r3, #10
 800d05c:	e203      	b.n	800d466 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800d05e:	2300      	movs	r3, #0
 800d060:	e201      	b.n	800d466 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	2200      	movs	r2, #0
 800d066:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	785b      	ldrb	r3, [r3, #1]
 800d074:	4618      	mov	r0, r3
 800d076:	f7fe f931 	bl	800b2dc <disk_initialize>
 800d07a:	4603      	mov	r3, r0
 800d07c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d084:	f003 0301 	and.w	r3, r3, #1
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d001      	beq.n	800d090 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d08c:	2303      	movs	r3, #3
 800d08e:	e1ea      	b.n	800d466 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d007      	beq.n	800d0a6 <find_volume+0xca>
 800d096:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d09a:	f003 0304 	and.w	r3, r3, #4
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d0a2:	230a      	movs	r3, #10
 800d0a4:	e1df      	b.n	800d466 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d0aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0ae:	f7ff ff3f 	bl	800cf30 <check_fs>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d0b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d14b      	bne.n	800d158 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	643b      	str	r3, [r7, #64]	; 0x40
 800d0c4:	e01f      	b.n	800d106 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d0cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ce:	011b      	lsls	r3, r3, #4
 800d0d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d0d4:	4413      	add	r3, r2
 800d0d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	3304      	adds	r3, #4
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d006      	beq.n	800d0f0 <find_volume+0x114>
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	3308      	adds	r3, #8
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7fe f994 	bl	800b414 <ld_dword>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	e000      	b.n	800d0f2 <find_volume+0x116>
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d0fa:	440b      	add	r3, r1
 800d0fc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d102:	3301      	adds	r3, #1
 800d104:	643b      	str	r3, [r7, #64]	; 0x40
 800d106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d9dc      	bls.n	800d0c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d10c:	2300      	movs	r3, #0
 800d10e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d112:	2b00      	cmp	r3, #0
 800d114:	d002      	beq.n	800d11c <find_volume+0x140>
 800d116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d118:	3b01      	subs	r3, #1
 800d11a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d11c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d124:	4413      	add	r3, r2
 800d126:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d12a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d005      	beq.n	800d13e <find_volume+0x162>
 800d132:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d136:	f7ff fefb 	bl	800cf30 <check_fs>
 800d13a:	4603      	mov	r3, r0
 800d13c:	e000      	b.n	800d140 <find_volume+0x164>
 800d13e:	2303      	movs	r3, #3
 800d140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d905      	bls.n	800d158 <find_volume+0x17c>
 800d14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d14e:	3301      	adds	r3, #1
 800d150:	643b      	str	r3, [r7, #64]	; 0x40
 800d152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d154:	2b03      	cmp	r3, #3
 800d156:	d9e1      	bls.n	800d11c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d15c:	2b04      	cmp	r3, #4
 800d15e:	d101      	bne.n	800d164 <find_volume+0x188>
 800d160:	2301      	movs	r3, #1
 800d162:	e180      	b.n	800d466 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d901      	bls.n	800d170 <find_volume+0x194>
 800d16c:	230d      	movs	r3, #13
 800d16e:	e17a      	b.n	800d466 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d172:	3334      	adds	r3, #52	; 0x34
 800d174:	330b      	adds	r3, #11
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe f934 	bl	800b3e4 <ld_word>
 800d17c:	4603      	mov	r3, r0
 800d17e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d182:	d001      	beq.n	800d188 <find_volume+0x1ac>
 800d184:	230d      	movs	r3, #13
 800d186:	e16e      	b.n	800d466 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18a:	3334      	adds	r3, #52	; 0x34
 800d18c:	3316      	adds	r3, #22
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe f928 	bl	800b3e4 <ld_word>
 800d194:	4603      	mov	r3, r0
 800d196:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d106      	bne.n	800d1ac <find_volume+0x1d0>
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	3334      	adds	r3, #52	; 0x34
 800d1a2:	3324      	adds	r3, #36	; 0x24
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe f935 	bl	800b414 <ld_dword>
 800d1aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1b0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	789b      	ldrb	r3, [r3, #2]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d005      	beq.n	800d1d0 <find_volume+0x1f4>
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	789b      	ldrb	r3, [r3, #2]
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d001      	beq.n	800d1d0 <find_volume+0x1f4>
 800d1cc:	230d      	movs	r3, #13
 800d1ce:	e14a      	b.n	800d466 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	789b      	ldrb	r3, [r3, #2]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d8:	fb02 f303 	mul.w	r3, r2, r3
 800d1dc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ec:	895b      	ldrh	r3, [r3, #10]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d008      	beq.n	800d204 <find_volume+0x228>
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f4:	895b      	ldrh	r3, [r3, #10]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fa:	895b      	ldrh	r3, [r3, #10]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	4013      	ands	r3, r2
 800d200:	2b00      	cmp	r3, #0
 800d202:	d001      	beq.n	800d208 <find_volume+0x22c>
 800d204:	230d      	movs	r3, #13
 800d206:	e12e      	b.n	800d466 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20a:	3334      	adds	r3, #52	; 0x34
 800d20c:	3311      	adds	r3, #17
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe f8e8 	bl	800b3e4 <ld_word>
 800d214:	4603      	mov	r3, r0
 800d216:	461a      	mov	r2, r3
 800d218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	891b      	ldrh	r3, [r3, #8]
 800d220:	f003 030f 	and.w	r3, r3, #15
 800d224:	b29b      	uxth	r3, r3
 800d226:	2b00      	cmp	r3, #0
 800d228:	d001      	beq.n	800d22e <find_volume+0x252>
 800d22a:	230d      	movs	r3, #13
 800d22c:	e11b      	b.n	800d466 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d230:	3334      	adds	r3, #52	; 0x34
 800d232:	3313      	adds	r3, #19
 800d234:	4618      	mov	r0, r3
 800d236:	f7fe f8d5 	bl	800b3e4 <ld_word>
 800d23a:	4603      	mov	r3, r0
 800d23c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d23e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d240:	2b00      	cmp	r3, #0
 800d242:	d106      	bne.n	800d252 <find_volume+0x276>
 800d244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d246:	3334      	adds	r3, #52	; 0x34
 800d248:	3320      	adds	r3, #32
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe f8e2 	bl	800b414 <ld_dword>
 800d250:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d254:	3334      	adds	r3, #52	; 0x34
 800d256:	330e      	adds	r3, #14
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fe f8c3 	bl	800b3e4 <ld_word>
 800d25e:	4603      	mov	r3, r0
 800d260:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d262:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d264:	2b00      	cmp	r3, #0
 800d266:	d101      	bne.n	800d26c <find_volume+0x290>
 800d268:	230d      	movs	r3, #13
 800d26a:	e0fc      	b.n	800d466 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d26c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d26e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d270:	4413      	add	r3, r2
 800d272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d274:	8912      	ldrh	r2, [r2, #8]
 800d276:	0912      	lsrs	r2, r2, #4
 800d278:	b292      	uxth	r2, r2
 800d27a:	4413      	add	r3, r2
 800d27c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d27e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d282:	429a      	cmp	r2, r3
 800d284:	d201      	bcs.n	800d28a <find_volume+0x2ae>
 800d286:	230d      	movs	r3, #13
 800d288:	e0ed      	b.n	800d466 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d28a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d292:	8952      	ldrh	r2, [r2, #10]
 800d294:	fbb3 f3f2 	udiv	r3, r3, r2
 800d298:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d103      	bne.n	800d2a8 <find_volume+0x2cc>
 800d2a0:	230d      	movs	r3, #13
 800d2a2:	e0e0      	b.n	800d466 <find_volume+0x48a>
 800d2a4:	20000768 	.word	0x20000768
		fmt = FS_FAT32;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d802      	bhi.n	800d2be <find_volume+0x2e2>
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d802      	bhi.n	800d2ce <find_volume+0x2f2>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	1c9a      	adds	r2, r3, #2
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2da:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d2dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2e0:	441a      	add	r2, r3
 800d2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d2e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	441a      	add	r2, r3
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ee:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d2f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2f4:	2b03      	cmp	r3, #3
 800d2f6:	d11e      	bne.n	800d336 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fa:	3334      	adds	r3, #52	; 0x34
 800d2fc:	332a      	adds	r3, #42	; 0x2a
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fe f870 	bl	800b3e4 <ld_word>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <find_volume+0x332>
 800d30a:	230d      	movs	r3, #13
 800d30c:	e0ab      	b.n	800d466 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	891b      	ldrh	r3, [r3, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d001      	beq.n	800d31a <find_volume+0x33e>
 800d316:	230d      	movs	r3, #13
 800d318:	e0a5      	b.n	800d466 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31c:	3334      	adds	r3, #52	; 0x34
 800d31e:	332c      	adds	r3, #44	; 0x2c
 800d320:	4618      	mov	r0, r3
 800d322:	f7fe f877 	bl	800b414 <ld_dword>
 800d326:	4602      	mov	r2, r0
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32e:	699b      	ldr	r3, [r3, #24]
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	647b      	str	r3, [r7, #68]	; 0x44
 800d334:	e01f      	b.n	800d376 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d338:	891b      	ldrh	r3, [r3, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d101      	bne.n	800d342 <find_volume+0x366>
 800d33e:	230d      	movs	r3, #13
 800d340:	e091      	b.n	800d466 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d348:	441a      	add	r2, r3
 800d34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d34e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d352:	2b02      	cmp	r3, #2
 800d354:	d103      	bne.n	800d35e <find_volume+0x382>
 800d356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d358:	699b      	ldr	r3, [r3, #24]
 800d35a:	005b      	lsls	r3, r3, #1
 800d35c:	e00a      	b.n	800d374 <find_volume+0x398>
 800d35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d360:	699a      	ldr	r2, [r3, #24]
 800d362:	4613      	mov	r3, r2
 800d364:	005b      	lsls	r3, r3, #1
 800d366:	4413      	add	r3, r2
 800d368:	085a      	lsrs	r2, r3, #1
 800d36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36c:	699b      	ldr	r3, [r3, #24]
 800d36e:	f003 0301 	and.w	r3, r3, #1
 800d372:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d374:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d378:	69da      	ldr	r2, [r3, #28]
 800d37a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d37c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d380:	0a5b      	lsrs	r3, r3, #9
 800d382:	429a      	cmp	r2, r3
 800d384:	d201      	bcs.n	800d38a <find_volume+0x3ae>
 800d386:	230d      	movs	r3, #13
 800d388:	e06d      	b.n	800d466 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38c:	f04f 32ff 	mov.w	r2, #4294967295
 800d390:	615a      	str	r2, [r3, #20]
 800d392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d394:	695a      	ldr	r2, [r3, #20]
 800d396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d398:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39c:	2280      	movs	r2, #128	; 0x80
 800d39e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d3a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3a4:	2b03      	cmp	r3, #3
 800d3a6:	d149      	bne.n	800d43c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3aa:	3334      	adds	r3, #52	; 0x34
 800d3ac:	3330      	adds	r3, #48	; 0x30
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fe f818 	bl	800b3e4 <ld_word>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d140      	bne.n	800d43c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3bc:	3301      	adds	r3, #1
 800d3be:	4619      	mov	r1, r3
 800d3c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3c2:	f7fe fabf 	bl	800b944 <move_window>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d137      	bne.n	800d43c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d4:	3334      	adds	r3, #52	; 0x34
 800d3d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe f802 	bl	800b3e4 <ld_word>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d127      	bne.n	800d43c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	3334      	adds	r3, #52	; 0x34
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fe f80f 	bl	800b414 <ld_dword>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	4a1d      	ldr	r2, [pc, #116]	; (800d470 <find_volume+0x494>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d11e      	bne.n	800d43c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d400:	3334      	adds	r3, #52	; 0x34
 800d402:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d406:	4618      	mov	r0, r3
 800d408:	f7fe f804 	bl	800b414 <ld_dword>
 800d40c:	4603      	mov	r3, r0
 800d40e:	4a19      	ldr	r2, [pc, #100]	; (800d474 <find_volume+0x498>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d113      	bne.n	800d43c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d416:	3334      	adds	r3, #52	; 0x34
 800d418:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fd fff9 	bl	800b414 <ld_dword>
 800d422:	4602      	mov	r2, r0
 800d424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d426:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42a:	3334      	adds	r3, #52	; 0x34
 800d42c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d430:	4618      	mov	r0, r3
 800d432:	f7fd ffef 	bl	800b414 <ld_dword>
 800d436:	4602      	mov	r2, r0
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d442:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d444:	4b0c      	ldr	r3, [pc, #48]	; (800d478 <find_volume+0x49c>)
 800d446:	881b      	ldrh	r3, [r3, #0]
 800d448:	3301      	adds	r3, #1
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	4b0a      	ldr	r3, [pc, #40]	; (800d478 <find_volume+0x49c>)
 800d44e:	801a      	strh	r2, [r3, #0]
 800d450:	4b09      	ldr	r3, [pc, #36]	; (800d478 <find_volume+0x49c>)
 800d452:	881a      	ldrh	r2, [r3, #0]
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45a:	4a08      	ldr	r2, [pc, #32]	; (800d47c <find_volume+0x4a0>)
 800d45c:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d45e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d460:	f7fe fa08 	bl	800b874 <clear_lock>
#endif
	return FR_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3758      	adds	r7, #88	; 0x58
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	41615252 	.word	0x41615252
 800d474:	61417272 	.word	0x61417272
 800d478:	2000076c 	.word	0x2000076c
 800d47c:	20000790 	.word	0x20000790

0800d480 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d48a:	2309      	movs	r3, #9
 800d48c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d01c      	beq.n	800d4ce <validate+0x4e>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d018      	beq.n	800d4ce <validate+0x4e>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d013      	beq.n	800d4ce <validate+0x4e>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	889a      	ldrh	r2, [r3, #4]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	88db      	ldrh	r3, [r3, #6]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d10c      	bne.n	800d4ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	785b      	ldrb	r3, [r3, #1]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fd fef4 	bl	800b2a8 <disk_status>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	f003 0301 	and.w	r3, r3, #1
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d101      	bne.n	800d4ce <validate+0x4e>
			res = FR_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d4ce:	7bfb      	ldrb	r3, [r7, #15]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d102      	bne.n	800d4da <validate+0x5a>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	e000      	b.n	800d4dc <validate+0x5c>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	6013      	str	r3, [r2, #0]
	return res;
 800d4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
	...

0800d4ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b088      	sub	sp, #32
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d4fe:	f107 0310 	add.w	r3, r7, #16
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff fccf 	bl	800cea6 <get_ldnumber>
 800d508:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	da01      	bge.n	800d514 <f_mount+0x28>
 800d510:	230b      	movs	r3, #11
 800d512:	e02b      	b.n	800d56c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d514:	4a17      	ldr	r2, [pc, #92]	; (800d574 <f_mount+0x88>)
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d51c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d51e:	69bb      	ldr	r3, [r7, #24]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d005      	beq.n	800d530 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d524:	69b8      	ldr	r0, [r7, #24]
 800d526:	f7fe f9a5 	bl	800b874 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	2200      	movs	r2, #0
 800d52e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d002      	beq.n	800d53c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	490d      	ldr	r1, [pc, #52]	; (800d574 <f_mount+0x88>)
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <f_mount+0x66>
 800d54c:	79fb      	ldrb	r3, [r7, #7]
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d001      	beq.n	800d556 <f_mount+0x6a>
 800d552:	2300      	movs	r3, #0
 800d554:	e00a      	b.n	800d56c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d556:	f107 010c 	add.w	r1, r7, #12
 800d55a:	f107 0308 	add.w	r3, r7, #8
 800d55e:	2200      	movs	r2, #0
 800d560:	4618      	mov	r0, r3
 800d562:	f7ff fd3b 	bl	800cfdc <find_volume>
 800d566:	4603      	mov	r3, r0
 800d568:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3720      	adds	r7, #32
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	20000768 	.word	0x20000768

0800d578 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b09a      	sub	sp, #104	; 0x68
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	4613      	mov	r3, r2
 800d584:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <f_open+0x18>
 800d58c:	2309      	movs	r3, #9
 800d58e:	e1ad      	b.n	800d8ec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d590:	79fb      	ldrb	r3, [r7, #7]
 800d592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d596:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d598:	79fa      	ldrb	r2, [r7, #7]
 800d59a:	f107 0114 	add.w	r1, r7, #20
 800d59e:	f107 0308 	add.w	r3, r7, #8
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff fd1a 	bl	800cfdc <find_volume>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d5ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	f040 8191 	bne.w	800d8da <f_open+0x362>
		dj.obj.fs = fs;
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	f107 0318 	add.w	r3, r7, #24
 800d5c2:	4611      	mov	r1, r2
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7ff fbfd 	bl	800cdc4 <follow_path>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d5d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d11a      	bne.n	800d60e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d5d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d5dc:	b25b      	sxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	da03      	bge.n	800d5ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800d5e2:	2306      	movs	r3, #6
 800d5e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d5e8:	e011      	b.n	800d60e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d5ea:	79fb      	ldrb	r3, [r7, #7]
 800d5ec:	f023 0301 	bic.w	r3, r3, #1
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	bf14      	ite	ne
 800d5f4:	2301      	movne	r3, #1
 800d5f6:	2300      	moveq	r3, #0
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	f107 0318 	add.w	r3, r7, #24
 800d600:	4611      	mov	r1, r2
 800d602:	4618      	mov	r0, r3
 800d604:	f7fd ffee 	bl	800b5e4 <chk_lock>
 800d608:	4603      	mov	r3, r0
 800d60a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d60e:	79fb      	ldrb	r3, [r7, #7]
 800d610:	f003 031c 	and.w	r3, r3, #28
 800d614:	2b00      	cmp	r3, #0
 800d616:	d07f      	beq.n	800d718 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d618:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d017      	beq.n	800d650 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d620:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d624:	2b04      	cmp	r3, #4
 800d626:	d10e      	bne.n	800d646 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d628:	f7fe f838 	bl	800b69c <enq_lock>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d006      	beq.n	800d640 <f_open+0xc8>
 800d632:	f107 0318 	add.w	r3, r7, #24
 800d636:	4618      	mov	r0, r3
 800d638:	f7ff f914 	bl	800c864 <dir_register>
 800d63c:	4603      	mov	r3, r0
 800d63e:	e000      	b.n	800d642 <f_open+0xca>
 800d640:	2312      	movs	r3, #18
 800d642:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d646:	79fb      	ldrb	r3, [r7, #7]
 800d648:	f043 0308 	orr.w	r3, r3, #8
 800d64c:	71fb      	strb	r3, [r7, #7]
 800d64e:	e010      	b.n	800d672 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d650:	7fbb      	ldrb	r3, [r7, #30]
 800d652:	f003 0311 	and.w	r3, r3, #17
 800d656:	2b00      	cmp	r3, #0
 800d658:	d003      	beq.n	800d662 <f_open+0xea>
					res = FR_DENIED;
 800d65a:	2307      	movs	r3, #7
 800d65c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d660:	e007      	b.n	800d672 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d662:	79fb      	ldrb	r3, [r7, #7]
 800d664:	f003 0304 	and.w	r3, r3, #4
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <f_open+0xfa>
 800d66c:	2308      	movs	r3, #8
 800d66e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d672:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d676:	2b00      	cmp	r3, #0
 800d678:	d168      	bne.n	800d74c <f_open+0x1d4>
 800d67a:	79fb      	ldrb	r3, [r7, #7]
 800d67c:	f003 0308 	and.w	r3, r3, #8
 800d680:	2b00      	cmp	r3, #0
 800d682:	d063      	beq.n	800d74c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d684:	f7fc fa1c 	bl	8009ac0 <get_fattime>
 800d688:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68c:	330e      	adds	r3, #14
 800d68e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d690:	4618      	mov	r0, r3
 800d692:	f7fd fefd 	bl	800b490 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d698:	3316      	adds	r3, #22
 800d69a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fd fef7 	bl	800b490 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a4:	330b      	adds	r3, #11
 800d6a6:	2220      	movs	r2, #32
 800d6a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe fe4e 	bl	800c352 <ld_clust>
 800d6b6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6bc:	2200      	movs	r2, #0
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fe fe66 	bl	800c390 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c6:	331c      	adds	r3, #28
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fd fee0 	bl	800b490 <st_dword>
					fs->wflag = 1;
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d6d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d037      	beq.n	800d74c <f_open+0x1d4>
						dw = fs->winsect;
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d6e2:	f107 0318 	add.w	r3, r7, #24
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe fb79 	bl	800bde2 <remove_chain>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d6f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d126      	bne.n	800d74c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d702:	4618      	mov	r0, r3
 800d704:	f7fe f91e 	bl	800b944 <move_window>
 800d708:	4603      	mov	r3, r0
 800d70a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d712:	3a01      	subs	r2, #1
 800d714:	611a      	str	r2, [r3, #16]
 800d716:	e019      	b.n	800d74c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d718:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d115      	bne.n	800d74c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d720:	7fbb      	ldrb	r3, [r7, #30]
 800d722:	f003 0310 	and.w	r3, r3, #16
 800d726:	2b00      	cmp	r3, #0
 800d728:	d003      	beq.n	800d732 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d72a:	2304      	movs	r3, #4
 800d72c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d730:	e00c      	b.n	800d74c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d732:	79fb      	ldrb	r3, [r7, #7]
 800d734:	f003 0302 	and.w	r3, r3, #2
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d007      	beq.n	800d74c <f_open+0x1d4>
 800d73c:	7fbb      	ldrb	r3, [r7, #30]
 800d73e:	f003 0301 	and.w	r3, r3, #1
 800d742:	2b00      	cmp	r3, #0
 800d744:	d002      	beq.n	800d74c <f_open+0x1d4>
						res = FR_DENIED;
 800d746:	2307      	movs	r3, #7
 800d748:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d74c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d750:	2b00      	cmp	r3, #0
 800d752:	d128      	bne.n	800d7a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d754:	79fb      	ldrb	r3, [r7, #7]
 800d756:	f003 0308 	and.w	r3, r3, #8
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d003      	beq.n	800d766 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d75e:	79fb      	ldrb	r3, [r7, #7]
 800d760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d764:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d76e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d774:	79fb      	ldrb	r3, [r7, #7]
 800d776:	f023 0301 	bic.w	r3, r3, #1
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bf14      	ite	ne
 800d77e:	2301      	movne	r3, #1
 800d780:	2300      	moveq	r3, #0
 800d782:	b2db      	uxtb	r3, r3
 800d784:	461a      	mov	r2, r3
 800d786:	f107 0318 	add.w	r3, r7, #24
 800d78a:	4611      	mov	r1, r2
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fd ffa7 	bl	800b6e0 <inc_lock>
 800d792:	4602      	mov	r2, r0
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d102      	bne.n	800d7a6 <f_open+0x22e>
 800d7a0:	2302      	movs	r3, #2
 800d7a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d7a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f040 8095 	bne.w	800d8da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fe fdcb 	bl	800c352 <ld_clust>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c4:	331c      	adds	r3, #28
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fd fe24 	bl	800b414 <ld_dword>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d7d8:	697a      	ldr	r2, [r7, #20]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	88da      	ldrh	r2, [r3, #6]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	79fa      	ldrb	r2, [r7, #7]
 800d7ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	3330      	adds	r3, #48	; 0x30
 800d802:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d806:	2100      	movs	r1, #0
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fd fe8e 	bl	800b52a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d80e:	79fb      	ldrb	r3, [r7, #7]
 800d810:	f003 0320 	and.w	r3, r3, #32
 800d814:	2b00      	cmp	r3, #0
 800d816:	d060      	beq.n	800d8da <f_open+0x362>
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d05c      	beq.n	800d8da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	68da      	ldr	r2, [r3, #12]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	895b      	ldrh	r3, [r3, #10]
 800d82c:	025b      	lsls	r3, r3, #9
 800d82e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d83c:	e016      	b.n	800d86c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d842:	4618      	mov	r0, r3
 800d844:	f7fe f939 	bl	800baba <get_fat>
 800d848:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d84a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d802      	bhi.n	800d856 <f_open+0x2de>
 800d850:	2302      	movs	r3, #2
 800d852:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d85c:	d102      	bne.n	800d864 <f_open+0x2ec>
 800d85e:	2301      	movs	r3, #1
 800d860:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d86c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d870:	2b00      	cmp	r3, #0
 800d872:	d103      	bne.n	800d87c <f_open+0x304>
 800d874:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d878:	429a      	cmp	r2, r3
 800d87a:	d8e0      	bhi.n	800d83e <f_open+0x2c6>
				}
				fp->clust = clst;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d880:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d882:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d886:	2b00      	cmp	r3, #0
 800d888:	d127      	bne.n	800d8da <f_open+0x362>
 800d88a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d88c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d890:	2b00      	cmp	r3, #0
 800d892:	d022      	beq.n	800d8da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fe f8ef 	bl	800ba7c <clust2sect>
 800d89e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d103      	bne.n	800d8ae <f_open+0x336>
						res = FR_INT_ERR;
 800d8a6:	2302      	movs	r3, #2
 800d8a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d8ac:	e015      	b.n	800d8da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d8ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8b0:	0a5a      	lsrs	r2, r3, #9
 800d8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8b4:	441a      	add	r2, r3
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	7858      	ldrb	r0, [r3, #1]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6a1a      	ldr	r2, [r3, #32]
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	f7fd fd2d 	bl	800b328 <disk_read>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <f_open+0x362>
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d8da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d002      	beq.n	800d8e8 <f_open+0x370>
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d8e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3768      	adds	r7, #104	; 0x68
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08e      	sub	sp, #56	; 0x38
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	2200      	movs	r2, #0
 800d90a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f107 0214 	add.w	r2, r7, #20
 800d912:	4611      	mov	r1, r2
 800d914:	4618      	mov	r0, r3
 800d916:	f7ff fdb3 	bl	800d480 <validate>
 800d91a:	4603      	mov	r3, r0
 800d91c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d920:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d924:	2b00      	cmp	r3, #0
 800d926:	d107      	bne.n	800d938 <f_read+0x44>
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	7d5b      	ldrb	r3, [r3, #21]
 800d92c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d930:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d934:	2b00      	cmp	r3, #0
 800d936:	d002      	beq.n	800d93e <f_read+0x4a>
 800d938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d93c:	e115      	b.n	800db6a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	7d1b      	ldrb	r3, [r3, #20]
 800d942:	f003 0301 	and.w	r3, r3, #1
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <f_read+0x5a>
 800d94a:	2307      	movs	r3, #7
 800d94c:	e10d      	b.n	800db6a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	68da      	ldr	r2, [r3, #12]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	1ad3      	subs	r3, r2, r3
 800d958:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	6a3b      	ldr	r3, [r7, #32]
 800d95e:	429a      	cmp	r2, r3
 800d960:	f240 80fe 	bls.w	800db60 <f_read+0x26c>
 800d964:	6a3b      	ldr	r3, [r7, #32]
 800d966:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d968:	e0fa      	b.n	800db60 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	699b      	ldr	r3, [r3, #24]
 800d96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d972:	2b00      	cmp	r3, #0
 800d974:	f040 80c6 	bne.w	800db04 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	0a5b      	lsrs	r3, r3, #9
 800d97e:	697a      	ldr	r2, [r7, #20]
 800d980:	8952      	ldrh	r2, [r2, #10]
 800d982:	3a01      	subs	r2, #1
 800d984:	4013      	ands	r3, r2
 800d986:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d12f      	bne.n	800d9ee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	699b      	ldr	r3, [r3, #24]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d103      	bne.n	800d99e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	633b      	str	r3, [r7, #48]	; 0x30
 800d99c:	e013      	b.n	800d9c6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d007      	beq.n	800d9b6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f7fe fb15 	bl	800bfdc <clmt_clust>
 800d9b2:	6338      	str	r0, [r7, #48]	; 0x30
 800d9b4:	e007      	b.n	800d9c6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	69db      	ldr	r3, [r3, #28]
 800d9bc:	4619      	mov	r1, r3
 800d9be:	4610      	mov	r0, r2
 800d9c0:	f7fe f87b 	bl	800baba <get_fat>
 800d9c4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d804      	bhi.n	800d9d6 <f_read+0xe2>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2202      	movs	r2, #2
 800d9d0:	755a      	strb	r2, [r3, #21]
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	e0c9      	b.n	800db6a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9dc:	d104      	bne.n	800d9e8 <f_read+0xf4>
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	755a      	strb	r2, [r3, #21]
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e0c0      	b.n	800db6a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	69db      	ldr	r3, [r3, #28]
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	4610      	mov	r0, r2
 800d9f8:	f7fe f840 	bl	800ba7c <clust2sect>
 800d9fc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d104      	bne.n	800da0e <f_read+0x11a>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2202      	movs	r2, #2
 800da08:	755a      	strb	r2, [r3, #21]
 800da0a:	2302      	movs	r3, #2
 800da0c:	e0ad      	b.n	800db6a <f_read+0x276>
			sect += csect;
 800da0e:	69ba      	ldr	r2, [r7, #24]
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	4413      	add	r3, r2
 800da14:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	0a5b      	lsrs	r3, r3, #9
 800da1a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d039      	beq.n	800da96 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800da22:	69fa      	ldr	r2, [r7, #28]
 800da24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da26:	4413      	add	r3, r2
 800da28:	697a      	ldr	r2, [r7, #20]
 800da2a:	8952      	ldrh	r2, [r2, #10]
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d905      	bls.n	800da3c <f_read+0x148>
					cc = fs->csize - csect;
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	895b      	ldrh	r3, [r3, #10]
 800da34:	461a      	mov	r2, r3
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	7858      	ldrb	r0, [r3, #1]
 800da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da42:	69ba      	ldr	r2, [r7, #24]
 800da44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da46:	f7fd fc6f 	bl	800b328 <disk_read>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d004      	beq.n	800da5a <f_read+0x166>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2201      	movs	r2, #1
 800da54:	755a      	strb	r2, [r3, #21]
 800da56:	2301      	movs	r3, #1
 800da58:	e087      	b.n	800db6a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	7d1b      	ldrb	r3, [r3, #20]
 800da5e:	b25b      	sxtb	r3, r3
 800da60:	2b00      	cmp	r3, #0
 800da62:	da14      	bge.n	800da8e <f_read+0x19a>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6a1a      	ldr	r2, [r3, #32]
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da6e:	429a      	cmp	r2, r3
 800da70:	d90d      	bls.n	800da8e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6a1a      	ldr	r2, [r3, #32]
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	1ad3      	subs	r3, r2, r3
 800da7a:	025b      	lsls	r3, r3, #9
 800da7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da7e:	18d0      	adds	r0, r2, r3
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	3330      	adds	r3, #48	; 0x30
 800da84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da88:	4619      	mov	r1, r3
 800da8a:	f7fd fd2d 	bl	800b4e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800da8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da90:	025b      	lsls	r3, r3, #9
 800da92:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800da94:	e050      	b.n	800db38 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6a1b      	ldr	r3, [r3, #32]
 800da9a:	69ba      	ldr	r2, [r7, #24]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d02e      	beq.n	800dafe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	7d1b      	ldrb	r3, [r3, #20]
 800daa4:	b25b      	sxtb	r3, r3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	da18      	bge.n	800dadc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	7858      	ldrb	r0, [r3, #1]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	6a1a      	ldr	r2, [r3, #32]
 800dab8:	2301      	movs	r3, #1
 800daba:	f7fd fc55 	bl	800b368 <disk_write>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d004      	beq.n	800dace <f_read+0x1da>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	755a      	strb	r2, [r3, #21]
 800daca:	2301      	movs	r3, #1
 800dacc:	e04d      	b.n	800db6a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	7d1b      	ldrb	r3, [r3, #20]
 800dad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	7858      	ldrb	r0, [r3, #1]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dae6:	2301      	movs	r3, #1
 800dae8:	69ba      	ldr	r2, [r7, #24]
 800daea:	f7fd fc1d 	bl	800b328 <disk_read>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d004      	beq.n	800dafe <f_read+0x20a>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2201      	movs	r2, #1
 800daf8:	755a      	strb	r2, [r3, #21]
 800dafa:	2301      	movs	r3, #1
 800dafc:	e035      	b.n	800db6a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	69ba      	ldr	r2, [r7, #24]
 800db02:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db0c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800db10:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800db12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	429a      	cmp	r2, r3
 800db18:	d901      	bls.n	800db1e <f_read+0x22a>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db2c:	4413      	add	r3, r2
 800db2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db30:	4619      	mov	r1, r3
 800db32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db34:	f7fd fcd8 	bl	800b4e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800db38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3c:	4413      	add	r3, r2
 800db3e:	627b      	str	r3, [r7, #36]	; 0x24
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	699a      	ldr	r2, [r3, #24]
 800db44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db46:	441a      	add	r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	619a      	str	r2, [r3, #24]
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db52:	441a      	add	r2, r3
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	601a      	str	r2, [r3, #0]
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	1ad3      	subs	r3, r2, r3
 800db5e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	f47f af01 	bne.w	800d96a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800db68:	2300      	movs	r3, #0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3738      	adds	r7, #56	; 0x38
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b086      	sub	sp, #24
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f107 0208 	add.w	r2, r7, #8
 800db80:	4611      	mov	r1, r2
 800db82:	4618      	mov	r0, r3
 800db84:	f7ff fc7c 	bl	800d480 <validate>
 800db88:	4603      	mov	r3, r0
 800db8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d168      	bne.n	800dc64 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	7d1b      	ldrb	r3, [r3, #20]
 800db96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d062      	beq.n	800dc64 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	7d1b      	ldrb	r3, [r3, #20]
 800dba2:	b25b      	sxtb	r3, r3
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	da15      	bge.n	800dbd4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	7858      	ldrb	r0, [r3, #1]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a1a      	ldr	r2, [r3, #32]
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	f7fd fbd6 	bl	800b368 <disk_write>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d001      	beq.n	800dbc6 <f_sync+0x54>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e04f      	b.n	800dc66 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	7d1b      	ldrb	r3, [r3, #20]
 800dbca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dbd4:	f7fb ff74 	bl	8009ac0 <get_fattime>
 800dbd8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	f7fd feae 	bl	800b944 <move_window>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dbec:	7dfb      	ldrb	r3, [r7, #23]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d138      	bne.n	800dc64 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	330b      	adds	r3, #11
 800dbfc:	781a      	ldrb	r2, [r3, #0]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	330b      	adds	r3, #11
 800dc02:	f042 0220 	orr.w	r2, r2, #32
 800dc06:	b2d2      	uxtb	r2, r2
 800dc08:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6818      	ldr	r0, [r3, #0]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	689b      	ldr	r3, [r3, #8]
 800dc12:	461a      	mov	r2, r3
 800dc14:	68f9      	ldr	r1, [r7, #12]
 800dc16:	f7fe fbbb 	bl	800c390 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f103 021c 	add.w	r2, r3, #28
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	4619      	mov	r1, r3
 800dc26:	4610      	mov	r0, r2
 800dc28:	f7fd fc32 	bl	800b490 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	3316      	adds	r3, #22
 800dc30:	6939      	ldr	r1, [r7, #16]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fd fc2c 	bl	800b490 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	3312      	adds	r3, #18
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fd fc0b 	bl	800b45a <st_word>
					fs->wflag = 1;
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	2201      	movs	r2, #1
 800dc48:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fd fea7 	bl	800b9a0 <sync_fs>
 800dc52:	4603      	mov	r3, r0
 800dc54:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	7d1b      	ldrb	r3, [r3, #20]
 800dc5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b084      	sub	sp, #16
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7ff ff7b 	bl	800db72 <f_sync>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d118      	bne.n	800dcb8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f107 0208 	add.w	r2, r7, #8
 800dc8c:	4611      	mov	r1, r2
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff fbf6 	bl	800d480 <validate>
 800dc94:	4603      	mov	r3, r0
 800dc96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dc98:	7bfb      	ldrb	r3, [r7, #15]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d10c      	bne.n	800dcb8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	691b      	ldr	r3, [r3, #16]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fd fdaa 	bl	800b7fc <dec_lock>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dcac:	7bfb      	ldrb	r3, [r7, #15]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d102      	bne.n	800dcb8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
	...

0800dcc4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b087      	sub	sp, #28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dcda:	4b1f      	ldr	r3, [pc, #124]	; (800dd58 <FATFS_LinkDriverEx+0x94>)
 800dcdc:	7a5b      	ldrb	r3, [r3, #9]
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d131      	bne.n	800dd48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dce4:	4b1c      	ldr	r3, [pc, #112]	; (800dd58 <FATFS_LinkDriverEx+0x94>)
 800dce6:	7a5b      	ldrb	r3, [r3, #9]
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	461a      	mov	r2, r3
 800dcec:	4b1a      	ldr	r3, [pc, #104]	; (800dd58 <FATFS_LinkDriverEx+0x94>)
 800dcee:	2100      	movs	r1, #0
 800dcf0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dcf2:	4b19      	ldr	r3, [pc, #100]	; (800dd58 <FATFS_LinkDriverEx+0x94>)
 800dcf4:	7a5b      	ldrb	r3, [r3, #9]
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	4a17      	ldr	r2, [pc, #92]	; (800dd58 <FATFS_LinkDriverEx+0x94>)
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	4413      	add	r3, r2
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dd02:	4b15      	ldr	r3, [pc, #84]	; (800dd58 <FATFS_LinkDriverEx+0x94>)
 800dd04:	7a5b      	ldrb	r3, [r3, #9]
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	461a      	mov	r2, r3
 800dd0a:	4b13      	ldr	r3, [pc, #76]	; (800dd58 <FATFS_LinkDriverEx+0x94>)
 800dd0c:	4413      	add	r3, r2
 800dd0e:	79fa      	ldrb	r2, [r7, #7]
 800dd10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd12:	4b11      	ldr	r3, [pc, #68]	; (800dd58 <FATFS_LinkDriverEx+0x94>)
 800dd14:	7a5b      	ldrb	r3, [r3, #9]
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	1c5a      	adds	r2, r3, #1
 800dd1a:	b2d1      	uxtb	r1, r2
 800dd1c:	4a0e      	ldr	r2, [pc, #56]	; (800dd58 <FATFS_LinkDriverEx+0x94>)
 800dd1e:	7251      	strb	r1, [r2, #9]
 800dd20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd22:	7dbb      	ldrb	r3, [r7, #22]
 800dd24:	3330      	adds	r3, #48	; 0x30
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	223a      	movs	r2, #58	; 0x3a
 800dd32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	3302      	adds	r3, #2
 800dd38:	222f      	movs	r2, #47	; 0x2f
 800dd3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	3303      	adds	r3, #3
 800dd40:	2200      	movs	r2, #0
 800dd42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd44:	2300      	movs	r3, #0
 800dd46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dd48:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	371c      	adds	r7, #28
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	20000990 	.word	0x20000990

0800dd5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd66:	2200      	movs	r2, #0
 800dd68:	6839      	ldr	r1, [r7, #0]
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7ff ffaa 	bl	800dcc4 <FATFS_LinkDriverEx>
 800dd70:	4603      	mov	r3, r0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
	...

0800dd7c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b085      	sub	sp, #20
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	4603      	mov	r3, r0
 800dd84:	6039      	str	r1, [r7, #0]
 800dd86:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dd88:	88fb      	ldrh	r3, [r7, #6]
 800dd8a:	2b7f      	cmp	r3, #127	; 0x7f
 800dd8c:	d802      	bhi.n	800dd94 <ff_convert+0x18>
		c = chr;
 800dd8e:	88fb      	ldrh	r3, [r7, #6]
 800dd90:	81fb      	strh	r3, [r7, #14]
 800dd92:	e025      	b.n	800dde0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00b      	beq.n	800ddb2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dd9a:	88fb      	ldrh	r3, [r7, #6]
 800dd9c:	2bff      	cmp	r3, #255	; 0xff
 800dd9e:	d805      	bhi.n	800ddac <ff_convert+0x30>
 800dda0:	88fb      	ldrh	r3, [r7, #6]
 800dda2:	3b80      	subs	r3, #128	; 0x80
 800dda4:	4a12      	ldr	r2, [pc, #72]	; (800ddf0 <ff_convert+0x74>)
 800dda6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddaa:	e000      	b.n	800ddae <ff_convert+0x32>
 800ddac:	2300      	movs	r3, #0
 800ddae:	81fb      	strh	r3, [r7, #14]
 800ddb0:	e016      	b.n	800dde0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	81fb      	strh	r3, [r7, #14]
 800ddb6:	e009      	b.n	800ddcc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ddb8:	89fb      	ldrh	r3, [r7, #14]
 800ddba:	4a0d      	ldr	r2, [pc, #52]	; (800ddf0 <ff_convert+0x74>)
 800ddbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddc0:	88fa      	ldrh	r2, [r7, #6]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d006      	beq.n	800ddd4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ddc6:	89fb      	ldrh	r3, [r7, #14]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	81fb      	strh	r3, [r7, #14]
 800ddcc:	89fb      	ldrh	r3, [r7, #14]
 800ddce:	2b7f      	cmp	r3, #127	; 0x7f
 800ddd0:	d9f2      	bls.n	800ddb8 <ff_convert+0x3c>
 800ddd2:	e000      	b.n	800ddd6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ddd4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ddd6:	89fb      	ldrh	r3, [r7, #14]
 800ddd8:	3380      	adds	r3, #128	; 0x80
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dde0:	89fb      	ldrh	r3, [r7, #14]
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3714      	adds	r7, #20
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	080141f4 	.word	0x080141f4

0800ddf4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b087      	sub	sp, #28
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ddfe:	88fb      	ldrh	r3, [r7, #6]
 800de00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de04:	d201      	bcs.n	800de0a <ff_wtoupper+0x16>
 800de06:	4b3e      	ldr	r3, [pc, #248]	; (800df00 <ff_wtoupper+0x10c>)
 800de08:	e000      	b.n	800de0c <ff_wtoupper+0x18>
 800de0a:	4b3e      	ldr	r3, [pc, #248]	; (800df04 <ff_wtoupper+0x110>)
 800de0c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	1c9a      	adds	r2, r3, #2
 800de12:	617a      	str	r2, [r7, #20]
 800de14:	881b      	ldrh	r3, [r3, #0]
 800de16:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800de18:	8a7b      	ldrh	r3, [r7, #18]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d068      	beq.n	800def0 <ff_wtoupper+0xfc>
 800de1e:	88fa      	ldrh	r2, [r7, #6]
 800de20:	8a7b      	ldrh	r3, [r7, #18]
 800de22:	429a      	cmp	r2, r3
 800de24:	d364      	bcc.n	800def0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	1c9a      	adds	r2, r3, #2
 800de2a:	617a      	str	r2, [r7, #20]
 800de2c:	881b      	ldrh	r3, [r3, #0]
 800de2e:	823b      	strh	r3, [r7, #16]
 800de30:	8a3b      	ldrh	r3, [r7, #16]
 800de32:	0a1b      	lsrs	r3, r3, #8
 800de34:	81fb      	strh	r3, [r7, #14]
 800de36:	8a3b      	ldrh	r3, [r7, #16]
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800de3c:	88fa      	ldrh	r2, [r7, #6]
 800de3e:	8a79      	ldrh	r1, [r7, #18]
 800de40:	8a3b      	ldrh	r3, [r7, #16]
 800de42:	440b      	add	r3, r1
 800de44:	429a      	cmp	r2, r3
 800de46:	da49      	bge.n	800dedc <ff_wtoupper+0xe8>
			switch (cmd) {
 800de48:	89fb      	ldrh	r3, [r7, #14]
 800de4a:	2b08      	cmp	r3, #8
 800de4c:	d84f      	bhi.n	800deee <ff_wtoupper+0xfa>
 800de4e:	a201      	add	r2, pc, #4	; (adr r2, 800de54 <ff_wtoupper+0x60>)
 800de50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de54:	0800de79 	.word	0x0800de79
 800de58:	0800de8b 	.word	0x0800de8b
 800de5c:	0800dea1 	.word	0x0800dea1
 800de60:	0800dea9 	.word	0x0800dea9
 800de64:	0800deb1 	.word	0x0800deb1
 800de68:	0800deb9 	.word	0x0800deb9
 800de6c:	0800dec1 	.word	0x0800dec1
 800de70:	0800dec9 	.word	0x0800dec9
 800de74:	0800ded1 	.word	0x0800ded1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800de78:	88fa      	ldrh	r2, [r7, #6]
 800de7a:	8a7b      	ldrh	r3, [r7, #18]
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	005b      	lsls	r3, r3, #1
 800de80:	697a      	ldr	r2, [r7, #20]
 800de82:	4413      	add	r3, r2
 800de84:	881b      	ldrh	r3, [r3, #0]
 800de86:	80fb      	strh	r3, [r7, #6]
 800de88:	e027      	b.n	800deda <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800de8a:	88fa      	ldrh	r2, [r7, #6]
 800de8c:	8a7b      	ldrh	r3, [r7, #18]
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	b29b      	uxth	r3, r3
 800de92:	f003 0301 	and.w	r3, r3, #1
 800de96:	b29b      	uxth	r3, r3
 800de98:	88fa      	ldrh	r2, [r7, #6]
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	80fb      	strh	r3, [r7, #6]
 800de9e:	e01c      	b.n	800deda <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dea0:	88fb      	ldrh	r3, [r7, #6]
 800dea2:	3b10      	subs	r3, #16
 800dea4:	80fb      	strh	r3, [r7, #6]
 800dea6:	e018      	b.n	800deda <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dea8:	88fb      	ldrh	r3, [r7, #6]
 800deaa:	3b20      	subs	r3, #32
 800deac:	80fb      	strh	r3, [r7, #6]
 800deae:	e014      	b.n	800deda <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800deb0:	88fb      	ldrh	r3, [r7, #6]
 800deb2:	3b30      	subs	r3, #48	; 0x30
 800deb4:	80fb      	strh	r3, [r7, #6]
 800deb6:	e010      	b.n	800deda <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800deb8:	88fb      	ldrh	r3, [r7, #6]
 800deba:	3b1a      	subs	r3, #26
 800debc:	80fb      	strh	r3, [r7, #6]
 800debe:	e00c      	b.n	800deda <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800dec0:	88fb      	ldrh	r3, [r7, #6]
 800dec2:	3308      	adds	r3, #8
 800dec4:	80fb      	strh	r3, [r7, #6]
 800dec6:	e008      	b.n	800deda <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dec8:	88fb      	ldrh	r3, [r7, #6]
 800deca:	3b50      	subs	r3, #80	; 0x50
 800decc:	80fb      	strh	r3, [r7, #6]
 800dece:	e004      	b.n	800deda <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ded0:	88fb      	ldrh	r3, [r7, #6]
 800ded2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ded6:	80fb      	strh	r3, [r7, #6]
 800ded8:	bf00      	nop
			}
			break;
 800deda:	e008      	b.n	800deee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dedc:	89fb      	ldrh	r3, [r7, #14]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d195      	bne.n	800de0e <ff_wtoupper+0x1a>
 800dee2:	8a3b      	ldrh	r3, [r7, #16]
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	697a      	ldr	r2, [r7, #20]
 800dee8:	4413      	add	r3, r2
 800deea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800deec:	e78f      	b.n	800de0e <ff_wtoupper+0x1a>
			break;
 800deee:	bf00      	nop
	}

	return chr;
 800def0:	88fb      	ldrh	r3, [r7, #6]
}
 800def2:	4618      	mov	r0, r3
 800def4:	371c      	adds	r7, #28
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	080142f4 	.word	0x080142f4
 800df04:	080144e8 	.word	0x080144e8

0800df08 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 800df08:	b580      	push	{r7, lr}
 800df0a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800df0c:	2200      	movs	r2, #0
 800df0e:	4912      	ldr	r1, [pc, #72]	; (800df58 <MX_USB_DEVICE_Init+0x50>)
 800df10:	4812      	ldr	r0, [pc, #72]	; (800df5c <MX_USB_DEVICE_Init+0x54>)
 800df12:	f7fc f87e 	bl	800a012 <USBD_Init>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d001      	beq.n	800df20 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800df1c:	f7f3 fd5a 	bl	80019d4 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 800df20:	490f      	ldr	r1, [pc, #60]	; (800df60 <MX_USB_DEVICE_Init+0x58>)
 800df22:	480e      	ldr	r0, [pc, #56]	; (800df5c <MX_USB_DEVICE_Init+0x54>)
 800df24:	f7fc f8a5 	bl	800a072 <USBD_RegisterClass>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d001      	beq.n	800df32 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800df2e:	f7f3 fd51 	bl	80019d4 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 800df32:	490c      	ldr	r1, [pc, #48]	; (800df64 <MX_USB_DEVICE_Init+0x5c>)
 800df34:	4809      	ldr	r0, [pc, #36]	; (800df5c <MX_USB_DEVICE_Init+0x54>)
 800df36:	f7fc f855 	bl	8009fe4 <USBD_Midi_RegisterInterface>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800df40:	f7f3 fd48 	bl	80019d4 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800df44:	4805      	ldr	r0, [pc, #20]	; (800df5c <MX_USB_DEVICE_Init+0x54>)
 800df46:	f7fc f8bb 	bl	800a0c0 <USBD_Start>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d001      	beq.n	800df54 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800df50:	f7f3 fd40 	bl	80019d4 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df54:	bf00      	nop
 800df56:	bd80      	pop	{r7, pc}
 800df58:	20000100 	.word	0x20000100
 800df5c:	20002b30 	.word	0x20002b30
 800df60:	20000054 	.word	0x20000054
 800df64:	20000150 	.word	0x20000150

0800df68 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	4603      	mov	r3, r0
 800df70:	71fb      	strb	r3, [r7, #7]
 800df72:	460b      	mov	r3, r1
 800df74:	71bb      	strb	r3, [r7, #6]
 800df76:	4613      	mov	r3, r2
 800df78:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 800df7a:	230b      	movs	r3, #11
 800df7c:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 800df7e:	79fb      	ldrb	r3, [r7, #7]
 800df80:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800df84:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 800df86:	7bfb      	ldrb	r3, [r7, #15]
 800df88:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 800df8a:	7bbb      	ldrb	r3, [r7, #14]
 800df8c:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 800df8e:	79bb      	ldrb	r3, [r7, #6]
 800df90:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 800df92:	797b      	ldrb	r3, [r7, #5]
 800df94:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 800df96:	f107 0208 	add.w	r2, r7, #8
 800df9a:	2304      	movs	r3, #4
 800df9c:	2181      	movs	r1, #129	; 0x81
 800df9e:	4810      	ldr	r0, [pc, #64]	; (800dfe0 <MX_USB_Send_Midi+0x78>)
 800dfa0:	f000 fbb5 	bl	800e70e <USBD_LL_Transmit>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b03      	cmp	r3, #3
 800dfa8:	d00a      	beq.n	800dfc0 <MX_USB_Send_Midi+0x58>
 800dfaa:	2b03      	cmp	r3, #3
 800dfac:	dc10      	bgt.n	800dfd0 <MX_USB_Send_Midi+0x68>
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d002      	beq.n	800dfb8 <MX_USB_Send_Midi+0x50>
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d008      	beq.n	800dfc8 <MX_USB_Send_Midi+0x60>
 800dfb6:	e00b      	b.n	800dfd0 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 800dfb8:	480a      	ldr	r0, [pc, #40]	; (800dfe4 <MX_USB_Send_Midi+0x7c>)
 800dfba:	f002 f851 	bl	8010060 <puts>
        break;
 800dfbe:	e00b      	b.n	800dfd8 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 800dfc0:	4809      	ldr	r0, [pc, #36]	; (800dfe8 <MX_USB_Send_Midi+0x80>)
 800dfc2:	f002 f84d 	bl	8010060 <puts>
        break;
 800dfc6:	e007      	b.n	800dfd8 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 800dfc8:	4808      	ldr	r0, [pc, #32]	; (800dfec <MX_USB_Send_Midi+0x84>)
 800dfca:	f002 f849 	bl	8010060 <puts>
        break;
 800dfce:	e003      	b.n	800dfd8 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 800dfd0:	4807      	ldr	r0, [pc, #28]	; (800dff0 <MX_USB_Send_Midi+0x88>)
 800dfd2:	f002 f845 	bl	8010060 <puts>
    }
}
 800dfd6:	bf00      	nop
 800dfd8:	bf00      	nop
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	20002b30 	.word	0x20002b30
 800dfe4:	08012dd0 	.word	0x08012dd0
 800dfe8:	08012dd4 	.word	0x08012dd4
 800dfec:	08012de4 	.word	0x08012de4
 800dff0:	08012df4 	.word	0x08012df4

0800dff4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	4603      	mov	r3, r0
 800dffc:	6039      	str	r1, [r7, #0]
 800dffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	2212      	movs	r2, #18
 800e004:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e006:	4b03      	ldr	r3, [pc, #12]	; (800e014 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	2000011c 	.word	0x2000011c

0800e018 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	4603      	mov	r3, r0
 800e020:	6039      	str	r1, [r7, #0]
 800e022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2204      	movs	r2, #4
 800e028:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e02a:	4b03      	ldr	r3, [pc, #12]	; (800e038 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	20000130 	.word	0x20000130

0800e03c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	4603      	mov	r3, r0
 800e044:	6039      	str	r1, [r7, #0]
 800e046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e048:	79fb      	ldrb	r3, [r7, #7]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d105      	bne.n	800e05a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e04e:	683a      	ldr	r2, [r7, #0]
 800e050:	4907      	ldr	r1, [pc, #28]	; (800e070 <USBD_FS_ProductStrDescriptor+0x34>)
 800e052:	4808      	ldr	r0, [pc, #32]	; (800e074 <USBD_FS_ProductStrDescriptor+0x38>)
 800e054:	f7fd f865 	bl	800b122 <USBD_GetString>
 800e058:	e004      	b.n	800e064 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e05a:	683a      	ldr	r2, [r7, #0]
 800e05c:	4904      	ldr	r1, [pc, #16]	; (800e070 <USBD_FS_ProductStrDescriptor+0x34>)
 800e05e:	4805      	ldr	r0, [pc, #20]	; (800e074 <USBD_FS_ProductStrDescriptor+0x38>)
 800e060:	f7fd f85f 	bl	800b122 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e064:	4b02      	ldr	r3, [pc, #8]	; (800e070 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e066:	4618      	mov	r0, r3
 800e068:	3708      	adds	r7, #8
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	20002e00 	.word	0x20002e00
 800e074:	08012e10 	.word	0x08012e10

0800e078 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	4603      	mov	r3, r0
 800e080:	6039      	str	r1, [r7, #0]
 800e082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e084:	683a      	ldr	r2, [r7, #0]
 800e086:	4904      	ldr	r1, [pc, #16]	; (800e098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e088:	4804      	ldr	r0, [pc, #16]	; (800e09c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e08a:	f7fd f84a 	bl	800b122 <USBD_GetString>
  return USBD_StrDesc;
 800e08e:	4b02      	ldr	r3, [pc, #8]	; (800e098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e090:	4618      	mov	r0, r3
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	20002e00 	.word	0x20002e00
 800e09c:	08012e24 	.word	0x08012e24

0800e0a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	6039      	str	r1, [r7, #0]
 800e0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	221a      	movs	r2, #26
 800e0b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e0b2:	f000 f843 	bl	800e13c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e0b6:	4b02      	ldr	r3, [pc, #8]	; (800e0c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	20000134 	.word	0x20000134

0800e0c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	6039      	str	r1, [r7, #0]
 800e0ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e0d0:	79fb      	ldrb	r3, [r7, #7]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d105      	bne.n	800e0e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e0d6:	683a      	ldr	r2, [r7, #0]
 800e0d8:	4907      	ldr	r1, [pc, #28]	; (800e0f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e0da:	4808      	ldr	r0, [pc, #32]	; (800e0fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800e0dc:	f7fd f821 	bl	800b122 <USBD_GetString>
 800e0e0:	e004      	b.n	800e0ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e0e2:	683a      	ldr	r2, [r7, #0]
 800e0e4:	4904      	ldr	r1, [pc, #16]	; (800e0f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e0e6:	4805      	ldr	r0, [pc, #20]	; (800e0fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800e0e8:	f7fd f81b 	bl	800b122 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0ec:	4b02      	ldr	r3, [pc, #8]	; (800e0f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20002e00 	.word	0x20002e00
 800e0fc:	08012e38 	.word	0x08012e38

0800e100 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	6039      	str	r1, [r7, #0]
 800e10a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e10c:	79fb      	ldrb	r3, [r7, #7]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d105      	bne.n	800e11e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e112:	683a      	ldr	r2, [r7, #0]
 800e114:	4907      	ldr	r1, [pc, #28]	; (800e134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e116:	4808      	ldr	r0, [pc, #32]	; (800e138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e118:	f7fd f803 	bl	800b122 <USBD_GetString>
 800e11c:	e004      	b.n	800e128 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e11e:	683a      	ldr	r2, [r7, #0]
 800e120:	4904      	ldr	r1, [pc, #16]	; (800e134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e122:	4805      	ldr	r0, [pc, #20]	; (800e138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e124:	f7fc fffd 	bl	800b122 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e128:	4b02      	ldr	r3, [pc, #8]	; (800e134 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	20002e00 	.word	0x20002e00
 800e138:	08012e48 	.word	0x08012e48

0800e13c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e142:	4b0f      	ldr	r3, [pc, #60]	; (800e180 <Get_SerialNum+0x44>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e148:	4b0e      	ldr	r3, [pc, #56]	; (800e184 <Get_SerialNum+0x48>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e14e:	4b0e      	ldr	r3, [pc, #56]	; (800e188 <Get_SerialNum+0x4c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4413      	add	r3, r2
 800e15a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d009      	beq.n	800e176 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e162:	2208      	movs	r2, #8
 800e164:	4909      	ldr	r1, [pc, #36]	; (800e18c <Get_SerialNum+0x50>)
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 f814 	bl	800e194 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e16c:	2204      	movs	r2, #4
 800e16e:	4908      	ldr	r1, [pc, #32]	; (800e190 <Get_SerialNum+0x54>)
 800e170:	68b8      	ldr	r0, [r7, #8]
 800e172:	f000 f80f 	bl	800e194 <IntToUnicode>
  }
}
 800e176:	bf00      	nop
 800e178:	3710      	adds	r7, #16
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	1fff7a10 	.word	0x1fff7a10
 800e184:	1fff7a14 	.word	0x1fff7a14
 800e188:	1fff7a18 	.word	0x1fff7a18
 800e18c:	20000136 	.word	0x20000136
 800e190:	20000146 	.word	0x20000146

0800e194 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e194:	b480      	push	{r7}
 800e196:	b087      	sub	sp, #28
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	75fb      	strb	r3, [r7, #23]
 800e1aa:	e027      	b.n	800e1fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	0f1b      	lsrs	r3, r3, #28
 800e1b0:	2b09      	cmp	r3, #9
 800e1b2:	d80b      	bhi.n	800e1cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	0f1b      	lsrs	r3, r3, #28
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	7dfb      	ldrb	r3, [r7, #23]
 800e1bc:	005b      	lsls	r3, r3, #1
 800e1be:	4619      	mov	r1, r3
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	440b      	add	r3, r1
 800e1c4:	3230      	adds	r2, #48	; 0x30
 800e1c6:	b2d2      	uxtb	r2, r2
 800e1c8:	701a      	strb	r2, [r3, #0]
 800e1ca:	e00a      	b.n	800e1e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	0f1b      	lsrs	r3, r3, #28
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	7dfb      	ldrb	r3, [r7, #23]
 800e1d4:	005b      	lsls	r3, r3, #1
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	440b      	add	r3, r1
 800e1dc:	3237      	adds	r2, #55	; 0x37
 800e1de:	b2d2      	uxtb	r2, r2
 800e1e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	011b      	lsls	r3, r3, #4
 800e1e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e1e8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ea:	005b      	lsls	r3, r3, #1
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	68ba      	ldr	r2, [r7, #8]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e1f6:	7dfb      	ldrb	r3, [r7, #23]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	75fb      	strb	r3, [r7, #23]
 800e1fc:	7dfa      	ldrb	r2, [r7, #23]
 800e1fe:	79fb      	ldrb	r3, [r7, #7]
 800e200:	429a      	cmp	r2, r3
 800e202:	d3d3      	bcc.n	800e1ac <IntToUnicode+0x18>
  }
}
 800e204:	bf00      	nop
 800e206:	bf00      	nop
 800e208:	371c      	adds	r7, #28
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 800e212:	b480      	push	{r7}
 800e214:	b083      	sub	sp, #12
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
 800e21a:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	370c      	adds	r7, #12
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr
	...

0800e22c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	; 0x28
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e234:	f107 0314 	add.w	r3, r7, #20
 800e238:	2200      	movs	r2, #0
 800e23a:	601a      	str	r2, [r3, #0]
 800e23c:	605a      	str	r2, [r3, #4]
 800e23e:	609a      	str	r2, [r3, #8]
 800e240:	60da      	str	r2, [r3, #12]
 800e242:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e24c:	d13a      	bne.n	800e2c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e24e:	2300      	movs	r3, #0
 800e250:	613b      	str	r3, [r7, #16]
 800e252:	4b1e      	ldr	r3, [pc, #120]	; (800e2cc <HAL_PCD_MspInit+0xa0>)
 800e254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e256:	4a1d      	ldr	r2, [pc, #116]	; (800e2cc <HAL_PCD_MspInit+0xa0>)
 800e258:	f043 0301 	orr.w	r3, r3, #1
 800e25c:	6313      	str	r3, [r2, #48]	; 0x30
 800e25e:	4b1b      	ldr	r3, [pc, #108]	; (800e2cc <HAL_PCD_MspInit+0xa0>)
 800e260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e262:	f003 0301 	and.w	r3, r3, #1
 800e266:	613b      	str	r3, [r7, #16]
 800e268:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800e26a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e26e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e270:	2302      	movs	r3, #2
 800e272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e274:	2300      	movs	r3, #0
 800e276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e278:	2300      	movs	r3, #0
 800e27a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e27c:	230a      	movs	r3, #10
 800e27e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e280:	f107 0314 	add.w	r3, r7, #20
 800e284:	4619      	mov	r1, r3
 800e286:	4812      	ldr	r0, [pc, #72]	; (800e2d0 <HAL_PCD_MspInit+0xa4>)
 800e288:	f7f5 faae 	bl	80037e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e28c:	4b0f      	ldr	r3, [pc, #60]	; (800e2cc <HAL_PCD_MspInit+0xa0>)
 800e28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e290:	4a0e      	ldr	r2, [pc, #56]	; (800e2cc <HAL_PCD_MspInit+0xa0>)
 800e292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e296:	6353      	str	r3, [r2, #52]	; 0x34
 800e298:	2300      	movs	r3, #0
 800e29a:	60fb      	str	r3, [r7, #12]
 800e29c:	4b0b      	ldr	r3, [pc, #44]	; (800e2cc <HAL_PCD_MspInit+0xa0>)
 800e29e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2a0:	4a0a      	ldr	r2, [pc, #40]	; (800e2cc <HAL_PCD_MspInit+0xa0>)
 800e2a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2a6:	6453      	str	r3, [r2, #68]	; 0x44
 800e2a8:	4b08      	ldr	r3, [pc, #32]	; (800e2cc <HAL_PCD_MspInit+0xa0>)
 800e2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2b0:	60fb      	str	r3, [r7, #12]
 800e2b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	2100      	movs	r1, #0
 800e2b8:	2043      	movs	r0, #67	; 0x43
 800e2ba:	f7f5 fa5e 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e2be:	2043      	movs	r0, #67	; 0x43
 800e2c0:	f7f5 fa77 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e2c4:	bf00      	nop
 800e2c6:	3728      	adds	r7, #40	; 0x28
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	40023800 	.word	0x40023800
 800e2d0:	40020000 	.word	0x40020000

0800e2d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f7fb ff33 	bl	800a156 <USBD_LL_SetupStage>
}
 800e2f0:	bf00      	nop
 800e2f2:	3708      	adds	r7, #8
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	460b      	mov	r3, r1
 800e302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e30a:	78fa      	ldrb	r2, [r7, #3]
 800e30c:	6879      	ldr	r1, [r7, #4]
 800e30e:	4613      	mov	r3, r2
 800e310:	00db      	lsls	r3, r3, #3
 800e312:	1a9b      	subs	r3, r3, r2
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	440b      	add	r3, r1
 800e318:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	78fb      	ldrb	r3, [r7, #3]
 800e320:	4619      	mov	r1, r3
 800e322:	f7fb ff6d 	bl	800a200 <USBD_LL_DataOutStage>
}
 800e326:	bf00      	nop
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b082      	sub	sp, #8
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	460b      	mov	r3, r1
 800e338:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e340:	78fa      	ldrb	r2, [r7, #3]
 800e342:	6879      	ldr	r1, [r7, #4]
 800e344:	4613      	mov	r3, r2
 800e346:	00db      	lsls	r3, r3, #3
 800e348:	1a9b      	subs	r3, r3, r2
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	440b      	add	r3, r1
 800e34e:	3348      	adds	r3, #72	; 0x48
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	78fb      	ldrb	r3, [r7, #3]
 800e354:	4619      	mov	r1, r3
 800e356:	f7fb ffb6 	bl	800a2c6 <USBD_LL_DataInStage>
}
 800e35a:	bf00      	nop
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b082      	sub	sp, #8
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e370:	4618      	mov	r0, r3
 800e372:	f7fc f8ca 	bl	800a50a <USBD_LL_SOF>
}
 800e376:	bf00      	nop
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}

0800e37e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b084      	sub	sp, #16
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e386:	2301      	movs	r3, #1
 800e388:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d001      	beq.n	800e396 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e392:	f7f3 fb1f 	bl	80019d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e39c:	7bfa      	ldrb	r2, [r7, #15]
 800e39e:	4611      	mov	r1, r2
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fc f874 	bl	800a48e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fc f820 	bl	800a3f2 <USBD_LL_Reset>
}
 800e3b2:	bf00      	nop
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
	...

0800e3bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fc f86f 	bl	800a4ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	6812      	ldr	r2, [r2, #0]
 800e3de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e3e2:	f043 0301 	orr.w	r3, r3, #1
 800e3e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6a1b      	ldr	r3, [r3, #32]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d005      	beq.n	800e3fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e3f0:	4b04      	ldr	r3, [pc, #16]	; (800e404 <HAL_PCD_SuspendCallback+0x48>)
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	4a03      	ldr	r2, [pc, #12]	; (800e404 <HAL_PCD_SuspendCallback+0x48>)
 800e3f6:	f043 0306 	orr.w	r3, r3, #6
 800e3fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e3fc:	bf00      	nop
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	e000ed00 	.word	0xe000ed00

0800e408 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e416:	4618      	mov	r0, r3
 800e418:	f7fc f85f 	bl	800a4da <USBD_LL_Resume>
}
 800e41c:	bf00      	nop
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	460b      	mov	r3, r1
 800e42e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e436:	78fa      	ldrb	r2, [r7, #3]
 800e438:	4611      	mov	r1, r2
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fc f8ad 	bl	800a59a <USBD_LL_IsoOUTIncomplete>
}
 800e440:	bf00      	nop
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	460b      	mov	r3, r1
 800e452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e45a:	78fa      	ldrb	r2, [r7, #3]
 800e45c:	4611      	mov	r1, r2
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fc f875 	bl	800a54e <USBD_LL_IsoINIncomplete>
}
 800e464:	bf00      	nop
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fc f8b3 	bl	800a5e6 <USBD_LL_DevConnected>
}
 800e480:	bf00      	nop
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e496:	4618      	mov	r0, r3
 800e498:	f7fc f8b0 	bl	800a5fc <USBD_LL_DevDisconnected>
}
 800e49c:	bf00      	nop
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d13c      	bne.n	800e52e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e4b4:	4a20      	ldr	r2, [pc, #128]	; (800e538 <USBD_LL_Init+0x94>)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4a1e      	ldr	r2, [pc, #120]	; (800e538 <USBD_LL_Init+0x94>)
 800e4c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e4c4:	4b1c      	ldr	r3, [pc, #112]	; (800e538 <USBD_LL_Init+0x94>)
 800e4c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e4ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e4cc:	4b1a      	ldr	r3, [pc, #104]	; (800e538 <USBD_LL_Init+0x94>)
 800e4ce:	2204      	movs	r2, #4
 800e4d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e4d2:	4b19      	ldr	r3, [pc, #100]	; (800e538 <USBD_LL_Init+0x94>)
 800e4d4:	2202      	movs	r2, #2
 800e4d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e4d8:	4b17      	ldr	r3, [pc, #92]	; (800e538 <USBD_LL_Init+0x94>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e4de:	4b16      	ldr	r3, [pc, #88]	; (800e538 <USBD_LL_Init+0x94>)
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e4e4:	4b14      	ldr	r3, [pc, #80]	; (800e538 <USBD_LL_Init+0x94>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e4ea:	4b13      	ldr	r3, [pc, #76]	; (800e538 <USBD_LL_Init+0x94>)
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e4f0:	4b11      	ldr	r3, [pc, #68]	; (800e538 <USBD_LL_Init+0x94>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e4f6:	4b10      	ldr	r3, [pc, #64]	; (800e538 <USBD_LL_Init+0x94>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e4fc:	4b0e      	ldr	r3, [pc, #56]	; (800e538 <USBD_LL_Init+0x94>)
 800e4fe:	2200      	movs	r2, #0
 800e500:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e502:	480d      	ldr	r0, [pc, #52]	; (800e538 <USBD_LL_Init+0x94>)
 800e504:	f7f6 f91b 	bl	800473e <HAL_PCD_Init>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e50e:	f7f3 fa61 	bl	80019d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e512:	2180      	movs	r1, #128	; 0x80
 800e514:	4808      	ldr	r0, [pc, #32]	; (800e538 <USBD_LL_Init+0x94>)
 800e516:	f7f7 fa78 	bl	8005a0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e51a:	2240      	movs	r2, #64	; 0x40
 800e51c:	2100      	movs	r1, #0
 800e51e:	4806      	ldr	r0, [pc, #24]	; (800e538 <USBD_LL_Init+0x94>)
 800e520:	f7f7 fa2c 	bl	800597c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e524:	2280      	movs	r2, #128	; 0x80
 800e526:	2101      	movs	r1, #1
 800e528:	4803      	ldr	r0, [pc, #12]	; (800e538 <USBD_LL_Init+0x94>)
 800e52a:	f7f7 fa27 	bl	800597c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e52e:	2300      	movs	r3, #0
}
 800e530:	4618      	mov	r0, r3
 800e532:	3708      	adds	r7, #8
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	20003000 	.word	0x20003000

0800e53c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e544:	2300      	movs	r3, #0
 800e546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e548:	2300      	movs	r3, #0
 800e54a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e552:	4618      	mov	r0, r3
 800e554:	f7f6 fa10 	bl	8004978 <HAL_PCD_Start>
 800e558:	4603      	mov	r3, r0
 800e55a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e55c:	7bfb      	ldrb	r3, [r7, #15]
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 f938 	bl	800e7d4 <USBD_Get_USB_Status>
 800e564:	4603      	mov	r3, r0
 800e566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e568:	7bbb      	ldrb	r3, [r7, #14]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b084      	sub	sp, #16
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
 800e57a:	4608      	mov	r0, r1
 800e57c:	4611      	mov	r1, r2
 800e57e:	461a      	mov	r2, r3
 800e580:	4603      	mov	r3, r0
 800e582:	70fb      	strb	r3, [r7, #3]
 800e584:	460b      	mov	r3, r1
 800e586:	70bb      	strb	r3, [r7, #2]
 800e588:	4613      	mov	r3, r2
 800e58a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e590:	2300      	movs	r3, #0
 800e592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e59a:	78bb      	ldrb	r3, [r7, #2]
 800e59c:	883a      	ldrh	r2, [r7, #0]
 800e59e:	78f9      	ldrb	r1, [r7, #3]
 800e5a0:	f7f6 fdf4 	bl	800518c <HAL_PCD_EP_Open>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5a8:	7bfb      	ldrb	r3, [r7, #15]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f000 f912 	bl	800e7d4 <USBD_Get_USB_Status>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b084      	sub	sp, #16
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e5d8:	78fa      	ldrb	r2, [r7, #3]
 800e5da:	4611      	mov	r1, r2
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7f6 fe3d 	bl	800525c <HAL_PCD_EP_Close>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5e6:	7bfb      	ldrb	r3, [r7, #15]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f000 f8f3 	bl	800e7d4 <USBD_Get_USB_Status>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3710      	adds	r7, #16
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	460b      	mov	r3, r1
 800e606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e608:	2300      	movs	r3, #0
 800e60a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e60c:	2300      	movs	r3, #0
 800e60e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e616:	78fa      	ldrb	r2, [r7, #3]
 800e618:	4611      	mov	r1, r2
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7f6 ff15 	bl	800544a <HAL_PCD_EP_SetStall>
 800e620:	4603      	mov	r3, r0
 800e622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e624:	7bfb      	ldrb	r3, [r7, #15]
 800e626:	4618      	mov	r0, r3
 800e628:	f000 f8d4 	bl	800e7d4 <USBD_Get_USB_Status>
 800e62c:	4603      	mov	r3, r0
 800e62e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e630:	7bbb      	ldrb	r3, [r7, #14]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b084      	sub	sp, #16
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
 800e642:	460b      	mov	r3, r1
 800e644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e64a:	2300      	movs	r3, #0
 800e64c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e654:	78fa      	ldrb	r2, [r7, #3]
 800e656:	4611      	mov	r1, r2
 800e658:	4618      	mov	r0, r3
 800e65a:	f7f6 ff5a 	bl	8005512 <HAL_PCD_EP_ClrStall>
 800e65e:	4603      	mov	r3, r0
 800e660:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e662:	7bfb      	ldrb	r3, [r7, #15]
 800e664:	4618      	mov	r0, r3
 800e666:	f000 f8b5 	bl	800e7d4 <USBD_Get_USB_Status>
 800e66a:	4603      	mov	r3, r0
 800e66c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e66e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	460b      	mov	r3, r1
 800e682:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e68a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e68c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e690:	2b00      	cmp	r3, #0
 800e692:	da0b      	bge.n	800e6ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e694:	78fb      	ldrb	r3, [r7, #3]
 800e696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e69a:	68f9      	ldr	r1, [r7, #12]
 800e69c:	4613      	mov	r3, r2
 800e69e:	00db      	lsls	r3, r3, #3
 800e6a0:	1a9b      	subs	r3, r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	440b      	add	r3, r1
 800e6a6:	333e      	adds	r3, #62	; 0x3e
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	e00b      	b.n	800e6c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e6ac:	78fb      	ldrb	r3, [r7, #3]
 800e6ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6b2:	68f9      	ldr	r1, [r7, #12]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	00db      	lsls	r3, r3, #3
 800e6b8:	1a9b      	subs	r3, r3, r2
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	440b      	add	r3, r1
 800e6be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e6c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	460b      	mov	r3, r1
 800e6da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6ea:	78fa      	ldrb	r2, [r7, #3]
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7f6 fd27 	bl	8005142 <HAL_PCD_SetAddress>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6f8:	7bfb      	ldrb	r3, [r7, #15]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 f86a 	bl	800e7d4 <USBD_Get_USB_Status>
 800e700:	4603      	mov	r3, r0
 800e702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e704:	7bbb      	ldrb	r3, [r7, #14]
}
 800e706:	4618      	mov	r0, r3
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b086      	sub	sp, #24
 800e712:	af00      	add	r7, sp, #0
 800e714:	60f8      	str	r0, [r7, #12]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]
 800e71a:	460b      	mov	r3, r1
 800e71c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e71e:	2300      	movs	r3, #0
 800e720:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e722:	2300      	movs	r3, #0
 800e724:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e72c:	7af9      	ldrb	r1, [r7, #11]
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	f7f6 fe40 	bl	80053b6 <HAL_PCD_EP_Transmit>
 800e736:	4603      	mov	r3, r0
 800e738:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e73a:	7dfb      	ldrb	r3, [r7, #23]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f000 f849 	bl	800e7d4 <USBD_Get_USB_Status>
 800e742:	4603      	mov	r3, r0
 800e744:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e746:	7dbb      	ldrb	r3, [r7, #22]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	607a      	str	r2, [r7, #4]
 800e75a:	603b      	str	r3, [r7, #0]
 800e75c:	460b      	mov	r3, r1
 800e75e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e76e:	7af9      	ldrb	r1, [r7, #11]
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	f7f6 fdbc 	bl	80052f0 <HAL_PCD_EP_Receive>
 800e778:	4603      	mov	r3, r0
 800e77a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e77c:	7dfb      	ldrb	r3, [r7, #23]
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 f828 	bl	800e7d4 <USBD_Get_USB_Status>
 800e784:	4603      	mov	r3, r0
 800e786:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e788:	7dbb      	ldrb	r3, [r7, #22]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3718      	adds	r7, #24
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e792:	b580      	push	{r7, lr}
 800e794:	b082      	sub	sp, #8
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
 800e79a:	460b      	mov	r3, r1
 800e79c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7a4:	78fa      	ldrb	r2, [r7, #3]
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7f6 fdec 	bl	8005386 <HAL_PCD_EP_GetRxCount>
 800e7ae:	4603      	mov	r3, r0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e7c0:	4b03      	ldr	r3, [pc, #12]	; (800e7d0 <USBD_static_malloc+0x18>)
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	370c      	adds	r7, #12
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop
 800e7d0:	2000099c 	.word	0x2000099c

0800e7d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	4603      	mov	r3, r0
 800e7dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e7e2:	79fb      	ldrb	r3, [r7, #7]
 800e7e4:	2b03      	cmp	r3, #3
 800e7e6:	d817      	bhi.n	800e818 <USBD_Get_USB_Status+0x44>
 800e7e8:	a201      	add	r2, pc, #4	; (adr r2, 800e7f0 <USBD_Get_USB_Status+0x1c>)
 800e7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ee:	bf00      	nop
 800e7f0:	0800e801 	.word	0x0800e801
 800e7f4:	0800e807 	.word	0x0800e807
 800e7f8:	0800e80d 	.word	0x0800e80d
 800e7fc:	0800e813 	.word	0x0800e813
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e800:	2300      	movs	r3, #0
 800e802:	73fb      	strb	r3, [r7, #15]
    break;
 800e804:	e00b      	b.n	800e81e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e806:	2303      	movs	r3, #3
 800e808:	73fb      	strb	r3, [r7, #15]
    break;
 800e80a:	e008      	b.n	800e81e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e80c:	2301      	movs	r3, #1
 800e80e:	73fb      	strb	r3, [r7, #15]
    break;
 800e810:	e005      	b.n	800e81e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e812:	2303      	movs	r3, #3
 800e814:	73fb      	strb	r3, [r7, #15]
    break;
 800e816:	e002      	b.n	800e81e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e818:	2303      	movs	r3, #3
 800e81a:	73fb      	strb	r3, [r7, #15]
    break;
 800e81c:	bf00      	nop
  }
  return usb_status;
 800e81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3714      	adds	r7, #20
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b085      	sub	sp, #20
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d002      	beq.n	800e842 <case_insensitive_strcmp+0x16>
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d101      	bne.n	800e846 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800e842:	2301      	movs	r3, #1
 800e844:	e056      	b.n	800e8f4 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d10d      	bne.n	800e86a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	e050      	b.n	800e8f4 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d101      	bne.n	800e85e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	e04a      	b.n	800e8f4 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3301      	adds	r3, #1
 800e862:	607b      	str	r3, [r7, #4]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	3301      	adds	r3, #1
 800e868:	603b      	str	r3, [r7, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	73fb      	strb	r3, [r7, #15]
 800e870:	7bfb      	ldrb	r3, [r7, #15]
 800e872:	3301      	adds	r3, #1
 800e874:	4a22      	ldr	r2, [pc, #136]	; (800e900 <case_insensitive_strcmp+0xd4>)
 800e876:	4413      	add	r3, r2
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	f003 0303 	and.w	r3, r3, #3
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d103      	bne.n	800e88a <case_insensitive_strcmp+0x5e>
 800e882:	7bfb      	ldrb	r3, [r7, #15]
 800e884:	f103 0220 	add.w	r2, r3, #32
 800e888:	e000      	b.n	800e88c <case_insensitive_strcmp+0x60>
 800e88a:	7bfa      	ldrb	r2, [r7, #15]
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	73bb      	strb	r3, [r7, #14]
 800e892:	7bbb      	ldrb	r3, [r7, #14]
 800e894:	3301      	adds	r3, #1
 800e896:	491a      	ldr	r1, [pc, #104]	; (800e900 <case_insensitive_strcmp+0xd4>)
 800e898:	440b      	add	r3, r1
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	f003 0303 	and.w	r3, r3, #3
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d102      	bne.n	800e8aa <case_insensitive_strcmp+0x7e>
 800e8a4:	7bbb      	ldrb	r3, [r7, #14]
 800e8a6:	3320      	adds	r3, #32
 800e8a8:	e000      	b.n	800e8ac <case_insensitive_strcmp+0x80>
 800e8aa:	7bbb      	ldrb	r3, [r7, #14]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d0d0      	beq.n	800e852 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	737b      	strb	r3, [r7, #13]
 800e8b6:	7b7b      	ldrb	r3, [r7, #13]
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	4a11      	ldr	r2, [pc, #68]	; (800e900 <case_insensitive_strcmp+0xd4>)
 800e8bc:	4413      	add	r3, r2
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	f003 0303 	and.w	r3, r3, #3
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d103      	bne.n	800e8d0 <case_insensitive_strcmp+0xa4>
 800e8c8:	7b7b      	ldrb	r3, [r7, #13]
 800e8ca:	f103 0220 	add.w	r2, r3, #32
 800e8ce:	e000      	b.n	800e8d2 <case_insensitive_strcmp+0xa6>
 800e8d0:	7b7a      	ldrb	r2, [r7, #13]
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	733b      	strb	r3, [r7, #12]
 800e8d8:	7b3b      	ldrb	r3, [r7, #12]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	4908      	ldr	r1, [pc, #32]	; (800e900 <case_insensitive_strcmp+0xd4>)
 800e8de:	440b      	add	r3, r1
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	f003 0303 	and.w	r3, r3, #3
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d102      	bne.n	800e8f0 <case_insensitive_strcmp+0xc4>
 800e8ea:	7b3b      	ldrb	r3, [r7, #12]
 800e8ec:	3320      	adds	r3, #32
 800e8ee:	e000      	b.n	800e8f2 <case_insensitive_strcmp+0xc6>
 800e8f0:	7b3b      	ldrb	r3, [r7, #12]
 800e8f2:	1ad3      	subs	r3, r2, r3
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	080145a4 	.word	0x080145a4

0800e904 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2028      	movs	r0, #40	; 0x28
 800e912:	4798      	blx	r3
 800e914:	60f8      	str	r0, [r7, #12]
    if (node)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d004      	beq.n	800e926 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800e91c:	2228      	movs	r2, #40	; 0x28
 800e91e:	2100      	movs	r1, #0
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f001 fa7d 	bl	800fe20 <memset>
    }

    return node;
 800e926:	68fb      	ldr	r3, [r7, #12]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3710      	adds	r7, #16
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800e938:	2300      	movs	r3, #0
 800e93a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800e93c:	e037      	b.n	800e9ae <cJSON_Delete+0x7e>
    {
        next = item->next;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d108      	bne.n	800e962 <cJSON_Delete+0x32>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d004      	beq.n	800e962 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7ff ffe7 	bl	800e930 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d109      	bne.n	800e982 <cJSON_Delete+0x52>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d005      	beq.n	800e982 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800e976:	4b12      	ldr	r3, [pc, #72]	; (800e9c0 <cJSON_Delete+0x90>)
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	6912      	ldr	r2, [r2, #16]
 800e97e:	4610      	mov	r0, r2
 800e980:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d109      	bne.n	800e9a2 <cJSON_Delete+0x72>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d005      	beq.n	800e9a2 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800e996:	4b0a      	ldr	r3, [pc, #40]	; (800e9c0 <cJSON_Delete+0x90>)
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	6a12      	ldr	r2, [r2, #32]
 800e99e:	4610      	mov	r0, r2
 800e9a0:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800e9a2:	4b07      	ldr	r3, [pc, #28]	; (800e9c0 <cJSON_Delete+0x90>)
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	4798      	blx	r3
        item = next;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d1c4      	bne.n	800e93e <cJSON_Delete+0xe>
    }
}
 800e9b4:	bf00      	nop
 800e9b6:	bf00      	nop
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	20000154 	.word	0x20000154

0800e9c4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800e9c8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr
 800e9d4:	0000      	movs	r0, r0
	...

0800e9d8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b098      	sub	sp, #96	; 0x60
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
    double number = 0;
 800e9e2:	f04f 0200 	mov.w	r2, #0
 800e9e6:	f04f 0300 	mov.w	r3, #0
 800e9ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800e9f2:	f7ff ffe7 	bl	800e9c4 <get_decimal_point>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d003      	beq.n	800ea0e <parse_number+0x36>
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d101      	bne.n	800ea12 <parse_number+0x3a>
    {
        return false;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	e0c6      	b.n	800eba0 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800ea12:	2300      	movs	r3, #0
 800ea14:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea16:	e063      	b.n	800eae0 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	6899      	ldr	r1, [r3, #8]
 800ea20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea22:	440b      	add	r3, r1
 800ea24:	4413      	add	r3, r2
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	2b45      	cmp	r3, #69	; 0x45
 800ea2a:	dc3d      	bgt.n	800eaa8 <parse_number+0xd0>
 800ea2c:	2b2b      	cmp	r3, #43	; 0x2b
 800ea2e:	db66      	blt.n	800eafe <parse_number+0x126>
 800ea30:	3b2b      	subs	r3, #43	; 0x2b
 800ea32:	2b1a      	cmp	r3, #26
 800ea34:	d863      	bhi.n	800eafe <parse_number+0x126>
 800ea36:	a201      	add	r2, pc, #4	; (adr r2, 800ea3c <parse_number+0x64>)
 800ea38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3c:	0800eaad 	.word	0x0800eaad
 800ea40:	0800eaff 	.word	0x0800eaff
 800ea44:	0800eaad 	.word	0x0800eaad
 800ea48:	0800eacb 	.word	0x0800eacb
 800ea4c:	0800eaff 	.word	0x0800eaff
 800ea50:	0800eaad 	.word	0x0800eaad
 800ea54:	0800eaad 	.word	0x0800eaad
 800ea58:	0800eaad 	.word	0x0800eaad
 800ea5c:	0800eaad 	.word	0x0800eaad
 800ea60:	0800eaad 	.word	0x0800eaad
 800ea64:	0800eaad 	.word	0x0800eaad
 800ea68:	0800eaad 	.word	0x0800eaad
 800ea6c:	0800eaad 	.word	0x0800eaad
 800ea70:	0800eaad 	.word	0x0800eaad
 800ea74:	0800eaad 	.word	0x0800eaad
 800ea78:	0800eaff 	.word	0x0800eaff
 800ea7c:	0800eaff 	.word	0x0800eaff
 800ea80:	0800eaff 	.word	0x0800eaff
 800ea84:	0800eaff 	.word	0x0800eaff
 800ea88:	0800eaff 	.word	0x0800eaff
 800ea8c:	0800eaff 	.word	0x0800eaff
 800ea90:	0800eaff 	.word	0x0800eaff
 800ea94:	0800eaff 	.word	0x0800eaff
 800ea98:	0800eaff 	.word	0x0800eaff
 800ea9c:	0800eaff 	.word	0x0800eaff
 800eaa0:	0800eaff 	.word	0x0800eaff
 800eaa4:	0800eaad 	.word	0x0800eaad
 800eaa8:	2b65      	cmp	r3, #101	; 0x65
 800eaaa:	d128      	bne.n	800eafe <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	6899      	ldr	r1, [r3, #8]
 800eab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eab6:	440b      	add	r3, r1
 800eab8:	4413      	add	r3, r2
 800eaba:	7819      	ldrb	r1, [r3, #0]
 800eabc:	f107 0208 	add.w	r2, r7, #8
 800eac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eac2:	4413      	add	r3, r2
 800eac4:	460a      	mov	r2, r1
 800eac6:	701a      	strb	r2, [r3, #0]
                break;
 800eac8:	e007      	b.n	800eada <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800eaca:	f107 0208 	add.w	r2, r7, #8
 800eace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ead0:	4413      	add	r3, r2
 800ead2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ead6:	701a      	strb	r2, [r3, #0]
                break;
 800ead8:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800eada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eadc:	3301      	adds	r3, #1
 800eade:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eae2:	2b3e      	cmp	r3, #62	; 0x3e
 800eae4:	d80d      	bhi.n	800eb02 <parse_number+0x12a>
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d00a      	beq.n	800eb02 <parse_number+0x12a>
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	689a      	ldr	r2, [r3, #8]
 800eaf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaf2:	441a      	add	r2, r3
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d38d      	bcc.n	800ea18 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800eafc:	e001      	b.n	800eb02 <parse_number+0x12a>
                goto loop_end;
 800eafe:	bf00      	nop
 800eb00:	e000      	b.n	800eb04 <parse_number+0x12c>
loop_end:
 800eb02:	bf00      	nop
    number_c_string[i] = '\0';
 800eb04:	f107 0208 	add.w	r2, r7, #8
 800eb08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb0a:	4413      	add	r3, r2
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800eb10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800eb14:	f107 0308 	add.w	r3, r7, #8
 800eb18:	4611      	mov	r1, r2
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f002 f972 	bl	8010e04 <strtod>
 800eb20:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800eb24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb26:	f107 0308 	add.w	r3, r7, #8
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d101      	bne.n	800eb32 <parse_number+0x15a>
    {
        return false; /* parse_error */
 800eb2e:	2300      	movs	r3, #0
 800eb30:	e036      	b.n	800eba0 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800eb32:	6879      	ldr	r1, [r7, #4]
 800eb34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800eb38:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800eb3c:	a31b      	add	r3, pc, #108	; (adr r3, 800ebac <parse_number+0x1d4>)
 800eb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800eb46:	f7f1 fff5 	bl	8000b34 <__aeabi_dcmpge>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d004      	beq.n	800eb5a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800eb56:	615a      	str	r2, [r3, #20]
 800eb58:	e015      	b.n	800eb86 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800eb5a:	f04f 0200 	mov.w	r2, #0
 800eb5e:	4b12      	ldr	r3, [pc, #72]	; (800eba8 <parse_number+0x1d0>)
 800eb60:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800eb64:	f7f1 ffdc 	bl	8000b20 <__aeabi_dcmple>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d004      	beq.n	800eb78 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb74:	615a      	str	r2, [r3, #20]
 800eb76:	e006      	b.n	800eb86 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 800eb78:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800eb7c:	f7f1 ffee 	bl	8000b5c <__aeabi_d2iz>
 800eb80:	4602      	mov	r2, r0
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2208      	movs	r2, #8
 800eb8a:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb92:	f107 0208 	add.w	r2, r7, #8
 800eb96:	1a8a      	subs	r2, r1, r2
 800eb98:	441a      	add	r2, r3
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	609a      	str	r2, [r3, #8]
    return true;
 800eb9e:	2301      	movs	r3, #1
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3760      	adds	r7, #96	; 0x60
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	c1e00000 	.word	0xc1e00000
 800ebac:	ffc00000 	.word	0xffc00000
 800ebb0:	41dfffff 	.word	0x41dfffff

0800ebb4 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	60bb      	str	r3, [r7, #8]
 800ebc8:	e04c      	b.n	800ec64 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	4413      	add	r3, r2
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	2b2f      	cmp	r3, #47	; 0x2f
 800ebd4:	d90f      	bls.n	800ebf6 <parse_hex4+0x42>
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	4413      	add	r3, r2
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	2b39      	cmp	r3, #57	; 0x39
 800ebe0:	d809      	bhi.n	800ebf6 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	461a      	mov	r2, r3
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	4413      	add	r3, r2
 800ebf0:	3b30      	subs	r3, #48	; 0x30
 800ebf2:	60fb      	str	r3, [r7, #12]
 800ebf4:	e02d      	b.n	800ec52 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	2b40      	cmp	r3, #64	; 0x40
 800ec00:	d90f      	bls.n	800ec22 <parse_hex4+0x6e>
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	4413      	add	r3, r2
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	2b46      	cmp	r3, #70	; 0x46
 800ec0c:	d809      	bhi.n	800ec22 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	4413      	add	r3, r2
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	3b37      	subs	r3, #55	; 0x37
 800ec1e:	60fb      	str	r3, [r7, #12]
 800ec20:	e017      	b.n	800ec52 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	4413      	add	r3, r2
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	2b60      	cmp	r3, #96	; 0x60
 800ec2c:	d90f      	bls.n	800ec4e <parse_hex4+0x9a>
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	4413      	add	r3, r2
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	2b66      	cmp	r3, #102	; 0x66
 800ec38:	d809      	bhi.n	800ec4e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	4413      	add	r3, r2
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	461a      	mov	r2, r3
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	4413      	add	r3, r2
 800ec48:	3b57      	subs	r3, #87	; 0x57
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	e001      	b.n	800ec52 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	e00c      	b.n	800ec6c <parse_hex4+0xb8>
        }

        if (i < 3)
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d802      	bhi.n	800ec5e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	011b      	lsls	r3, r3, #4
 800ec5c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	3301      	adds	r3, #1
 800ec62:	60bb      	str	r3, [r7, #8]
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	2b03      	cmp	r3, #3
 800ec68:	d9af      	bls.n	800ebca <parse_hex4+0x16>
        }
    }

    return h;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3714      	adds	r7, #20
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b08a      	sub	sp, #40	; 0x28
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800ec84:	2300      	movs	r3, #0
 800ec86:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800eca2:	2300      	movs	r3, #0
 800eca4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800eca8:	68ba      	ldr	r2, [r7, #8]
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	2b05      	cmp	r3, #5
 800ecb0:	f340 80b7 	ble.w	800ee22 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	3302      	adds	r3, #2
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7ff ff7b 	bl	800ebb4 <parse_hex4>
 800ecbe:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800ecc6:	d304      	bcc.n	800ecd2 <utf16_literal_to_utf8+0x5a>
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800ecce:	f0c0 80aa 	bcc.w	800ee26 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800ecd8:	d337      	bcc.n	800ed4a <utf16_literal_to_utf8+0xd2>
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800ece0:	d233      	bcs.n	800ed4a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	3306      	adds	r3, #6
 800ece6:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800ece8:	2300      	movs	r3, #0
 800ecea:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800ecec:	230c      	movs	r3, #12
 800ecee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800ecf2:	68ba      	ldr	r2, [r7, #8]
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	2b05      	cmp	r3, #5
 800ecfa:	f340 8096 	ble.w	800ee2a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	2b5c      	cmp	r3, #92	; 0x5c
 800ed04:	f040 8093 	bne.w	800ee2e <utf16_literal_to_utf8+0x1b6>
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	2b75      	cmp	r3, #117	; 0x75
 800ed10:	f040 808d 	bne.w	800ee2e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	3302      	adds	r3, #2
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7ff ff4b 	bl	800ebb4 <parse_hex4>
 800ed1e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800ed26:	f0c0 8084 	bcc.w	800ee32 <utf16_literal_to_utf8+0x1ba>
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800ed30:	d27f      	bcs.n	800ee32 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	029a      	lsls	r2, r3, #10
 800ed36:	4b43      	ldr	r3, [pc, #268]	; (800ee44 <utf16_literal_to_utf8+0x1cc>)
 800ed38:	4013      	ands	r3, r2
 800ed3a:	693a      	ldr	r2, [r7, #16]
 800ed3c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ed40:	4313      	orrs	r3, r2
 800ed42:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ed46:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800ed48:	e004      	b.n	800ed54 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800ed4a:	2306      	movs	r3, #6
 800ed4c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800ed54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed56:	2b7f      	cmp	r3, #127	; 0x7f
 800ed58:	d803      	bhi.n	800ed62 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ed60:	e01f      	b.n	800eda2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800ed62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed68:	d206      	bcs.n	800ed78 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800ed6a:	2302      	movs	r3, #2
 800ed6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800ed70:	23c0      	movs	r3, #192	; 0xc0
 800ed72:	f887 3020 	strb.w	r3, [r7, #32]
 800ed76:	e014      	b.n	800eda2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800ed78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed7e:	d206      	bcs.n	800ed8e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800ed80:	2303      	movs	r3, #3
 800ed82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800ed86:	23e0      	movs	r3, #224	; 0xe0
 800ed88:	f887 3020 	strb.w	r3, [r7, #32]
 800ed8c:	e009      	b.n	800eda2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed90:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800ed94:	d24f      	bcs.n	800ee36 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800ed96:	2304      	movs	r3, #4
 800ed98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800ed9c:	23f0      	movs	r3, #240	; 0xf0
 800ed9e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800eda2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eda6:	3b01      	subs	r3, #1
 800eda8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800edac:	e015      	b.n	800edda <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800edae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edb6:	b2da      	uxtb	r2, r3
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6819      	ldr	r1, [r3, #0]
 800edbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800edc0:	440b      	add	r3, r1
 800edc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800edc6:	b2d2      	uxtb	r2, r2
 800edc8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800edca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edcc:	099b      	lsrs	r3, r3, #6
 800edce:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800edd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800edd4:	3b01      	subs	r3, #1
 800edd6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800edda:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1e5      	bne.n	800edae <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800ede2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d909      	bls.n	800edfe <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800edea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edec:	b2d9      	uxtb	r1, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800edf6:	430a      	orrs	r2, r1
 800edf8:	b2d2      	uxtb	r2, r2
 800edfa:	701a      	strb	r2, [r3, #0]
 800edfc:	e007      	b.n	800ee0e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800edfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ee0a:	b2d2      	uxtb	r2, r2
 800ee0c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee16:	441a      	add	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800ee1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ee20:	e00b      	b.n	800ee3a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800ee22:	bf00      	nop
 800ee24:	e008      	b.n	800ee38 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800ee26:	bf00      	nop
 800ee28:	e006      	b.n	800ee38 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800ee2a:	bf00      	nop
 800ee2c:	e004      	b.n	800ee38 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800ee2e:	bf00      	nop
 800ee30:	e002      	b.n	800ee38 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800ee32:	bf00      	nop
 800ee34:	e000      	b.n	800ee38 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800ee36:	bf00      	nop

fail:
    return 0;
 800ee38:	2300      	movs	r3, #0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3728      	adds	r7, #40	; 0x28
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	000ffc00 	.word	0x000ffc00

0800ee48 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b08a      	sub	sp, #40	; 0x28
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	4413      	add	r3, r2
 800ee5e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	4413      	add	r3, r2
 800ee6c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800ee72:	2300      	movs	r3, #0
 800ee74:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	4413      	add	r3, r2
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	2b22      	cmp	r3, #34	; 0x22
 800ee84:	f040 8102 	bne.w	800f08c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800ee90:	e017      	b.n	800eec2 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800ee92:	6a3b      	ldr	r3, [r7, #32]
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	2b5c      	cmp	r3, #92	; 0x5c
 800ee98:	d110      	bne.n	800eebc <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800ee9a:	6a3b      	ldr	r3, [r7, #32]
 800ee9c:	1c5a      	adds	r2, r3, #1
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	461a      	mov	r2, r3
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	f080 80f0 	bcs.w	800f090 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	61bb      	str	r3, [r7, #24]
                input_end++;
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	3301      	adds	r3, #1
 800eeba:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800eebc:	6a3b      	ldr	r3, [r7, #32]
 800eebe:	3301      	adds	r3, #1
 800eec0:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	6a3a      	ldr	r2, [r7, #32]
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	461a      	mov	r2, r3
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d203      	bcs.n	800eedc <parse_string+0x94>
 800eed4:	6a3b      	ldr	r3, [r7, #32]
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	2b22      	cmp	r3, #34	; 0x22
 800eeda:	d1da      	bne.n	800ee92 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	6a3a      	ldr	r2, [r7, #32]
 800eee2:	1ad3      	subs	r3, r2, r3
 800eee4:	461a      	mov	r2, r3
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	f080 80d2 	bcs.w	800f094 <parse_string+0x24c>
 800eef0:	6a3b      	ldr	r3, [r7, #32]
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	2b22      	cmp	r3, #34	; 0x22
 800eef6:	f040 80cd 	bne.w	800f094 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	689b      	ldr	r3, [r3, #8]
 800ef02:	4413      	add	r3, r2
 800ef04:	6a3a      	ldr	r2, [r7, #32]
 800ef06:	1ad3      	subs	r3, r2, r3
 800ef08:	461a      	mov	r2, r3
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	1ad3      	subs	r3, r2, r3
 800ef0e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	691b      	ldr	r3, [r3, #16]
 800ef14:	693a      	ldr	r2, [r7, #16]
 800ef16:	3201      	adds	r2, #1
 800ef18:	4610      	mov	r0, r2
 800ef1a:	4798      	blx	r3
 800ef1c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	f000 80b9 	beq.w	800f098 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800ef2a:	e093      	b.n	800f054 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	2b5c      	cmp	r3, #92	; 0x5c
 800ef32:	d008      	beq.n	800ef46 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800ef34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef36:	1c53      	adds	r3, r2, #1
 800ef38:	627b      	str	r3, [r7, #36]	; 0x24
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	1c59      	adds	r1, r3, #1
 800ef3e:	60f9      	str	r1, [r7, #12]
 800ef40:	7812      	ldrb	r2, [r2, #0]
 800ef42:	701a      	strb	r2, [r3, #0]
 800ef44:	e086      	b.n	800f054 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800ef46:	2302      	movs	r3, #2
 800ef48:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800ef4a:	6a3a      	ldr	r2, [r7, #32]
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4e:	1ad3      	subs	r3, r2, r3
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f340 80a3 	ble.w	800f09c <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef58:	3301      	adds	r3, #1
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	2b75      	cmp	r3, #117	; 0x75
 800ef5e:	f300 809f 	bgt.w	800f0a0 <parse_string+0x258>
 800ef62:	2b5c      	cmp	r3, #92	; 0x5c
 800ef64:	da04      	bge.n	800ef70 <parse_string+0x128>
 800ef66:	2b22      	cmp	r3, #34	; 0x22
 800ef68:	d05c      	beq.n	800f024 <parse_string+0x1dc>
 800ef6a:	2b2f      	cmp	r3, #47	; 0x2f
 800ef6c:	d05a      	beq.n	800f024 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800ef6e:	e097      	b.n	800f0a0 <parse_string+0x258>
 800ef70:	3b5c      	subs	r3, #92	; 0x5c
 800ef72:	2b19      	cmp	r3, #25
 800ef74:	f200 8094 	bhi.w	800f0a0 <parse_string+0x258>
 800ef78:	a201      	add	r2, pc, #4	; (adr r2, 800ef80 <parse_string+0x138>)
 800ef7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef7e:	bf00      	nop
 800ef80:	0800f025 	.word	0x0800f025
 800ef84:	0800f0a1 	.word	0x0800f0a1
 800ef88:	0800f0a1 	.word	0x0800f0a1
 800ef8c:	0800f0a1 	.word	0x0800f0a1
 800ef90:	0800f0a1 	.word	0x0800f0a1
 800ef94:	0800f0a1 	.word	0x0800f0a1
 800ef98:	0800efe9 	.word	0x0800efe9
 800ef9c:	0800f0a1 	.word	0x0800f0a1
 800efa0:	0800f0a1 	.word	0x0800f0a1
 800efa4:	0800f0a1 	.word	0x0800f0a1
 800efa8:	0800eff5 	.word	0x0800eff5
 800efac:	0800f0a1 	.word	0x0800f0a1
 800efb0:	0800f0a1 	.word	0x0800f0a1
 800efb4:	0800f0a1 	.word	0x0800f0a1
 800efb8:	0800f0a1 	.word	0x0800f0a1
 800efbc:	0800f0a1 	.word	0x0800f0a1
 800efc0:	0800f0a1 	.word	0x0800f0a1
 800efc4:	0800f0a1 	.word	0x0800f0a1
 800efc8:	0800f001 	.word	0x0800f001
 800efcc:	0800f0a1 	.word	0x0800f0a1
 800efd0:	0800f0a1 	.word	0x0800f0a1
 800efd4:	0800f0a1 	.word	0x0800f0a1
 800efd8:	0800f00d 	.word	0x0800f00d
 800efdc:	0800f0a1 	.word	0x0800f0a1
 800efe0:	0800f019 	.word	0x0800f019
 800efe4:	0800f033 	.word	0x0800f033
                    *output_pointer++ = '\b';
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	1c5a      	adds	r2, r3, #1
 800efec:	60fa      	str	r2, [r7, #12]
 800efee:	2208      	movs	r2, #8
 800eff0:	701a      	strb	r2, [r3, #0]
                    break;
 800eff2:	e02b      	b.n	800f04c <parse_string+0x204>
                    *output_pointer++ = '\f';
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	1c5a      	adds	r2, r3, #1
 800eff8:	60fa      	str	r2, [r7, #12]
 800effa:	220c      	movs	r2, #12
 800effc:	701a      	strb	r2, [r3, #0]
                    break;
 800effe:	e025      	b.n	800f04c <parse_string+0x204>
                    *output_pointer++ = '\n';
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	1c5a      	adds	r2, r3, #1
 800f004:	60fa      	str	r2, [r7, #12]
 800f006:	220a      	movs	r2, #10
 800f008:	701a      	strb	r2, [r3, #0]
                    break;
 800f00a:	e01f      	b.n	800f04c <parse_string+0x204>
                    *output_pointer++ = '\r';
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	1c5a      	adds	r2, r3, #1
 800f010:	60fa      	str	r2, [r7, #12]
 800f012:	220d      	movs	r2, #13
 800f014:	701a      	strb	r2, [r3, #0]
                    break;
 800f016:	e019      	b.n	800f04c <parse_string+0x204>
                    *output_pointer++ = '\t';
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	1c5a      	adds	r2, r3, #1
 800f01c:	60fa      	str	r2, [r7, #12]
 800f01e:	2209      	movs	r2, #9
 800f020:	701a      	strb	r2, [r3, #0]
                    break;
 800f022:	e013      	b.n	800f04c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	1c5a      	adds	r2, r3, #1
 800f028:	60fa      	str	r2, [r7, #12]
 800f02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f02c:	7852      	ldrb	r2, [r2, #1]
 800f02e:	701a      	strb	r2, [r3, #0]
                    break;
 800f030:	e00c      	b.n	800f04c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800f032:	f107 030c 	add.w	r3, r7, #12
 800f036:	461a      	mov	r2, r3
 800f038:	6a39      	ldr	r1, [r7, #32]
 800f03a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f03c:	f7ff fe1c 	bl	800ec78 <utf16_literal_to_utf8>
 800f040:	4603      	mov	r3, r0
 800f042:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800f044:	7dfb      	ldrb	r3, [r7, #23]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d02c      	beq.n	800f0a4 <parse_string+0x25c>
                    break;
 800f04a:	bf00      	nop
            }
            input_pointer += sequence_length;
 800f04c:	7dfb      	ldrb	r3, [r7, #23]
 800f04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f050:	4413      	add	r3, r2
 800f052:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800f054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f056:	6a3b      	ldr	r3, [r7, #32]
 800f058:	429a      	cmp	r2, r3
 800f05a:	f4ff af67 	bcc.w	800ef2c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2200      	movs	r2, #0
 800f062:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2210      	movs	r2, #16
 800f068:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	69fa      	ldr	r2, [r7, #28]
 800f06e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	6a3a      	ldr	r2, [r7, #32]
 800f076:	1ad3      	subs	r3, r2, r3
 800f078:	461a      	mov	r2, r3
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	1c5a      	adds	r2, r3, #1
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	609a      	str	r2, [r3, #8]

    return true;
 800f088:	2301      	movs	r3, #1
 800f08a:	e01e      	b.n	800f0ca <parse_string+0x282>
        goto fail;
 800f08c:	bf00      	nop
 800f08e:	e00a      	b.n	800f0a6 <parse_string+0x25e>
                    goto fail;
 800f090:	bf00      	nop
 800f092:	e008      	b.n	800f0a6 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800f094:	bf00      	nop
 800f096:	e006      	b.n	800f0a6 <parse_string+0x25e>
            goto fail; /* allocation failure */
 800f098:	bf00      	nop
 800f09a:	e004      	b.n	800f0a6 <parse_string+0x25e>
                goto fail;
 800f09c:	bf00      	nop
 800f09e:	e002      	b.n	800f0a6 <parse_string+0x25e>
                    goto fail;
 800f0a0:	bf00      	nop
 800f0a2:	e000      	b.n	800f0a6 <parse_string+0x25e>
                        goto fail;
 800f0a4:	bf00      	nop

fail:
    if (output != NULL)
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d003      	beq.n	800f0b4 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	695b      	ldr	r3, [r3, #20]
 800f0b0:	69f8      	ldr	r0, [r7, #28]
 800f0b2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d006      	beq.n	800f0c8 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	609a      	str	r2, [r3, #8]
    }

    return false;
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3728      	adds	r7, #40	; 0x28
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop

0800f0d4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d003      	beq.n	800f0ea <buffer_skip_whitespace+0x16>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d101      	bne.n	800f0ee <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	e02c      	b.n	800f148 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d005      	beq.n	800f100 <buffer_skip_whitespace+0x2c>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	689a      	ldr	r2, [r3, #8]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d306      	bcc.n	800f10e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	e021      	b.n	800f148 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	1c5a      	adds	r2, r3, #1
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00d      	beq.n	800f130 <buffer_skip_whitespace+0x5c>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	689a      	ldr	r2, [r3, #8]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d207      	bcs.n	800f130 <buffer_skip_whitespace+0x5c>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	4413      	add	r3, r2
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	2b20      	cmp	r3, #32
 800f12e:	d9e9      	bls.n	800f104 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	689a      	ldr	r2, [r3, #8]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d104      	bne.n	800f146 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	689b      	ldr	r3, [r3, #8]
 800f140:	1e5a      	subs	r2, r3, #1
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800f146:	687b      	ldr	r3, [r7, #4]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	370c      	adds	r7, #12
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr

0800f154 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d007      	beq.n	800f172 <skip_utf8_bom+0x1e>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d003      	beq.n	800f172 <skip_utf8_bom+0x1e>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	689b      	ldr	r3, [r3, #8]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d001      	beq.n	800f176 <skip_utf8_bom+0x22>
    {
        return NULL;
 800f172:	2300      	movs	r3, #0
 800f174:	e01c      	b.n	800f1b0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d018      	beq.n	800f1ae <skip_utf8_bom+0x5a>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	689b      	ldr	r3, [r3, #8]
 800f180:	1d1a      	adds	r2, r3, #4
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	429a      	cmp	r2, r3
 800f188:	d211      	bcs.n	800f1ae <skip_utf8_bom+0x5a>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	689b      	ldr	r3, [r3, #8]
 800f192:	4413      	add	r3, r2
 800f194:	2203      	movs	r2, #3
 800f196:	4908      	ldr	r1, [pc, #32]	; (800f1b8 <skip_utf8_bom+0x64>)
 800f198:	4618      	mov	r0, r3
 800f19a:	f000 fff8 	bl	801018e <strncmp>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d104      	bne.n	800f1ae <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	1cda      	adds	r2, r3, #3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800f1ae:	687b      	ldr	r3, [r7, #4]
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3708      	adds	r7, #8
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	08012e8c 	.word	0x08012e8c

0800f1bc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b086      	sub	sp, #24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d101      	bne.n	800f1d2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	e00c      	b.n	800f1ec <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f7f1 f80e 	bl	80001f4 <strlen>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	3301      	adds	r3, #1
 800f1dc:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	6979      	ldr	r1, [r7, #20]
 800f1e4:	68f8      	ldr	r0, [r7, #12]
 800f1e6:	f000 f805 	bl	800f1f4 <cJSON_ParseWithLengthOpts>
 800f1ea:	4603      	mov	r3, r0
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3718      	adds	r7, #24
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b08e      	sub	sp, #56	; 0x38
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
 800f200:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800f202:	f107 0318 	add.w	r3, r7, #24
 800f206:	2200      	movs	r2, #0
 800f208:	601a      	str	r2, [r3, #0]
 800f20a:	605a      	str	r2, [r3, #4]
 800f20c:	609a      	str	r2, [r3, #8]
 800f20e:	60da      	str	r2, [r3, #12]
 800f210:	611a      	str	r2, [r3, #16]
 800f212:	615a      	str	r2, [r3, #20]
 800f214:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800f216:	2300      	movs	r3, #0
 800f218:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800f21a:	4b41      	ldr	r3, [pc, #260]	; (800f320 <cJSON_ParseWithLengthOpts+0x12c>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800f220:	4b3f      	ldr	r3, [pc, #252]	; (800f320 <cJSON_ParseWithLengthOpts+0x12c>)
 800f222:	2200      	movs	r2, #0
 800f224:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d042      	beq.n	800f2b2 <cJSON_ParseWithLengthOpts+0xbe>
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d03f      	beq.n	800f2b2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800f23a:	2300      	movs	r3, #0
 800f23c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800f23e:	4a39      	ldr	r2, [pc, #228]	; (800f324 <cJSON_ParseWithLengthOpts+0x130>)
 800f240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f244:	ca07      	ldmia	r2, {r0, r1, r2}
 800f246:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800f24a:	4836      	ldr	r0, [pc, #216]	; (800f324 <cJSON_ParseWithLengthOpts+0x130>)
 800f24c:	f7ff fb5a 	bl	800e904 <cJSON_New_Item>
 800f250:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800f252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f254:	2b00      	cmp	r3, #0
 800f256:	d02e      	beq.n	800f2b6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800f258:	f107 0318 	add.w	r3, r7, #24
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7ff ff79 	bl	800f154 <skip_utf8_bom>
 800f262:	4603      	mov	r3, r0
 800f264:	4618      	mov	r0, r3
 800f266:	f7ff ff35 	bl	800f0d4 <buffer_skip_whitespace>
 800f26a:	4603      	mov	r3, r0
 800f26c:	4619      	mov	r1, r3
 800f26e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f270:	f000 f868 	bl	800f344 <parse_value>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d01f      	beq.n	800f2ba <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00e      	beq.n	800f29e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800f280:	f107 0318 	add.w	r3, r7, #24
 800f284:	4618      	mov	r0, r3
 800f286:	f7ff ff25 	bl	800f0d4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800f28a:	6a3a      	ldr	r2, [r7, #32]
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d215      	bcs.n	800f2be <cJSON_ParseWithLengthOpts+0xca>
 800f292:	69ba      	ldr	r2, [r7, #24]
 800f294:	6a3b      	ldr	r3, [r7, #32]
 800f296:	4413      	add	r3, r2
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d10f      	bne.n	800f2be <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d004      	beq.n	800f2ae <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800f2a4:	69ba      	ldr	r2, [r7, #24]
 800f2a6:	6a3b      	ldr	r3, [r7, #32]
 800f2a8:	441a      	add	r2, r3
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	601a      	str	r2, [r3, #0]
    }

    return item;
 800f2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b0:	e031      	b.n	800f316 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800f2b2:	bf00      	nop
 800f2b4:	e004      	b.n	800f2c0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800f2b6:	bf00      	nop
 800f2b8:	e002      	b.n	800f2c0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800f2ba:	bf00      	nop
 800f2bc:	e000      	b.n	800f2c0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800f2be:	bf00      	nop

fail:
    if (item != NULL)
 800f2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d002      	beq.n	800f2cc <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800f2c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2c8:	f7ff fb32 	bl	800e930 <cJSON_Delete>
    }

    if (value != NULL)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d020      	beq.n	800f314 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800f2da:	6a3a      	ldr	r2, [r7, #32]
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d202      	bcs.n	800f2e8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800f2e2:	6a3b      	ldr	r3, [r7, #32]
 800f2e4:	617b      	str	r3, [r7, #20]
 800f2e6:	e005      	b.n	800f2f4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d002      	beq.n	800f2f4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d004      	beq.n	800f304 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800f2fa:	693a      	ldr	r2, [r7, #16]
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	441a      	add	r2, r3
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800f304:	4b06      	ldr	r3, [pc, #24]	; (800f320 <cJSON_ParseWithLengthOpts+0x12c>)
 800f306:	461a      	mov	r2, r3
 800f308:	f107 0310 	add.w	r3, r7, #16
 800f30c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f310:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3738      	adds	r7, #56	; 0x38
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	bf00      	nop
 800f320:	20002570 	.word	0x20002570
 800f324:	20000154 	.word	0x20000154

0800f328 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800f330:	2200      	movs	r2, #0
 800f332:	2100      	movs	r1, #0
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7ff ff41 	bl	800f1bc <cJSON_ParseWithOpts>
 800f33a:	4603      	mov	r3, r0
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3708      	adds	r7, #8
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d003      	beq.n	800f35c <parse_value+0x18>
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d101      	bne.n	800f360 <parse_value+0x1c>
    {
        return false; /* no input */
 800f35c:	2300      	movs	r3, #0
 800f35e:	e0d2      	b.n	800f506 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d01d      	beq.n	800f3a2 <parse_value+0x5e>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	1d1a      	adds	r2, r3, #4
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	429a      	cmp	r2, r3
 800f372:	d816      	bhi.n	800f3a2 <parse_value+0x5e>
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	4413      	add	r3, r2
 800f37e:	2204      	movs	r2, #4
 800f380:	4963      	ldr	r1, [pc, #396]	; (800f510 <parse_value+0x1cc>)
 800f382:	4618      	mov	r0, r3
 800f384:	f000 ff03 	bl	801018e <strncmp>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d109      	bne.n	800f3a2 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2204      	movs	r2, #4
 800f392:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	689b      	ldr	r3, [r3, #8]
 800f398:	1d1a      	adds	r2, r3, #4
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	609a      	str	r2, [r3, #8]
        return true;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	e0b1      	b.n	800f506 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d01d      	beq.n	800f3e4 <parse_value+0xa0>
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	1d5a      	adds	r2, r3, #5
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d816      	bhi.n	800f3e4 <parse_value+0xa0>
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	689b      	ldr	r3, [r3, #8]
 800f3be:	4413      	add	r3, r2
 800f3c0:	2205      	movs	r2, #5
 800f3c2:	4954      	ldr	r1, [pc, #336]	; (800f514 <parse_value+0x1d0>)
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f000 fee2 	bl	801018e <strncmp>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d109      	bne.n	800f3e4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	689b      	ldr	r3, [r3, #8]
 800f3da:	1d5a      	adds	r2, r3, #5
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	609a      	str	r2, [r3, #8]
        return true;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e090      	b.n	800f506 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d020      	beq.n	800f42c <parse_value+0xe8>
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	689b      	ldr	r3, [r3, #8]
 800f3ee:	1d1a      	adds	r2, r3, #4
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d819      	bhi.n	800f42c <parse_value+0xe8>
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	4413      	add	r3, r2
 800f402:	2204      	movs	r2, #4
 800f404:	4944      	ldr	r1, [pc, #272]	; (800f518 <parse_value+0x1d4>)
 800f406:	4618      	mov	r0, r3
 800f408:	f000 fec1 	bl	801018e <strncmp>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d10c      	bne.n	800f42c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2202      	movs	r2, #2
 800f416:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2201      	movs	r2, #1
 800f41c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	1d1a      	adds	r2, r3, #4
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	609a      	str	r2, [r3, #8]
        return true;
 800f428:	2301      	movs	r3, #1
 800f42a:	e06c      	b.n	800f506 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d013      	beq.n	800f45a <parse_value+0x116>
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	689a      	ldr	r2, [r3, #8]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d20d      	bcs.n	800f45a <parse_value+0x116>
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	689b      	ldr	r3, [r3, #8]
 800f446:	4413      	add	r3, r2
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	2b22      	cmp	r3, #34	; 0x22
 800f44c:	d105      	bne.n	800f45a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800f44e:	6839      	ldr	r1, [r7, #0]
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7ff fcf9 	bl	800ee48 <parse_string>
 800f456:	4603      	mov	r3, r0
 800f458:	e055      	b.n	800f506 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d023      	beq.n	800f4a8 <parse_value+0x164>
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	689a      	ldr	r2, [r3, #8]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d21d      	bcs.n	800f4a8 <parse_value+0x164>
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	689b      	ldr	r3, [r3, #8]
 800f474:	4413      	add	r3, r2
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	2b2d      	cmp	r3, #45	; 0x2d
 800f47a:	d00f      	beq.n	800f49c <parse_value+0x158>
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	4413      	add	r3, r2
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	2b2f      	cmp	r3, #47	; 0x2f
 800f48a:	d90d      	bls.n	800f4a8 <parse_value+0x164>
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	689b      	ldr	r3, [r3, #8]
 800f494:	4413      	add	r3, r2
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	2b39      	cmp	r3, #57	; 0x39
 800f49a:	d805      	bhi.n	800f4a8 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800f49c:	6839      	ldr	r1, [r7, #0]
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7ff fa9a 	bl	800e9d8 <parse_number>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	e02e      	b.n	800f506 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d013      	beq.n	800f4d6 <parse_value+0x192>
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	689a      	ldr	r2, [r3, #8]
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d20d      	bcs.n	800f4d6 <parse_value+0x192>
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	2b5b      	cmp	r3, #91	; 0x5b
 800f4c8:	d105      	bne.n	800f4d6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800f4ca:	6839      	ldr	r1, [r7, #0]
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 f825 	bl	800f51c <parse_array>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	e017      	b.n	800f506 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d013      	beq.n	800f504 <parse_value+0x1c0>
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	689a      	ldr	r2, [r3, #8]
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d20d      	bcs.n	800f504 <parse_value+0x1c0>
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	689b      	ldr	r3, [r3, #8]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	2b7b      	cmp	r3, #123	; 0x7b
 800f4f6:	d105      	bne.n	800f504 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800f4f8:	6839      	ldr	r1, [r7, #0]
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 f8d2 	bl	800f6a4 <parse_object>
 800f500:	4603      	mov	r3, r0
 800f502:	e000      	b.n	800f506 <parse_value+0x1c2>
    }

    return false;
 800f504:	2300      	movs	r3, #0
}
 800f506:	4618      	mov	r0, r3
 800f508:	3708      	adds	r7, #8
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	08012e64 	.word	0x08012e64
 800f514:	08012e90 	.word	0x08012e90
 800f518:	08012e98 	.word	0x08012e98

0800f51c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800f526:	2300      	movs	r3, #0
 800f528:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800f52a:	2300      	movs	r3, #0
 800f52c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f536:	d301      	bcc.n	800f53c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800f538:	2300      	movs	r3, #0
 800f53a:	e0af      	b.n	800f69c <parse_array+0x180>
    }
    input_buffer->depth++;
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	1c5a      	adds	r2, r3, #1
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	4413      	add	r3, r2
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	2b5b      	cmp	r3, #91	; 0x5b
 800f554:	f040 8094 	bne.w	800f680 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	689b      	ldr	r3, [r3, #8]
 800f55c:	1c5a      	adds	r2, r3, #1
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f562:	6838      	ldr	r0, [r7, #0]
 800f564:	f7ff fdb6 	bl	800f0d4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00d      	beq.n	800f58a <parse_array+0x6e>
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	689a      	ldr	r2, [r3, #8]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	429a      	cmp	r2, r3
 800f578:	d207      	bcs.n	800f58a <parse_array+0x6e>
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	4413      	add	r3, r2
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	2b5d      	cmp	r3, #93	; 0x5d
 800f588:	d061      	beq.n	800f64e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d005      	beq.n	800f59c <parse_array+0x80>
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	689a      	ldr	r2, [r3, #8]
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d305      	bcc.n	800f5a8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	1e5a      	subs	r2, r3, #1
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	609a      	str	r2, [r3, #8]
        goto fail;
 800f5a6:	e072      	b.n	800f68e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	1e5a      	subs	r2, r3, #1
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	3310      	adds	r3, #16
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7ff f9a4 	bl	800e904 <cJSON_New_Item>
 800f5bc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d05f      	beq.n	800f684 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d104      	bne.n	800f5d4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	617b      	str	r3, [r7, #20]
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	613b      	str	r3, [r7, #16]
 800f5d2:	e007      	b.n	800f5e4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	693a      	ldr	r2, [r7, #16]
 800f5de:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	1c5a      	adds	r2, r3, #1
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f5ee:	6838      	ldr	r0, [r7, #0]
 800f5f0:	f7ff fd70 	bl	800f0d4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800f5f4:	6839      	ldr	r1, [r7, #0]
 800f5f6:	6938      	ldr	r0, [r7, #16]
 800f5f8:	f7ff fea4 	bl	800f344 <parse_value>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d042      	beq.n	800f688 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800f602:	6838      	ldr	r0, [r7, #0]
 800f604:	f7ff fd66 	bl	800f0d4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00d      	beq.n	800f62a <parse_array+0x10e>
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	689a      	ldr	r2, [r3, #8]
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	429a      	cmp	r2, r3
 800f618:	d207      	bcs.n	800f62a <parse_array+0x10e>
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	689b      	ldr	r3, [r3, #8]
 800f622:	4413      	add	r3, r2
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	2b2c      	cmp	r3, #44	; 0x2c
 800f628:	d0c3      	beq.n	800f5b2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d02d      	beq.n	800f68c <parse_array+0x170>
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	689a      	ldr	r2, [r3, #8]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	429a      	cmp	r2, r3
 800f63a:	d227      	bcs.n	800f68c <parse_array+0x170>
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	4413      	add	r3, r2
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	2b5d      	cmp	r3, #93	; 0x5d
 800f64a:	d11f      	bne.n	800f68c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800f64c:	e000      	b.n	800f650 <parse_array+0x134>
        goto success;
 800f64e:	bf00      	nop
    input_buffer->depth--;
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	1e5a      	subs	r2, r3, #1
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d002      	beq.n	800f666 <parse_array+0x14a>
        head->prev = current_item;
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	693a      	ldr	r2, [r7, #16]
 800f664:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2220      	movs	r2, #32
 800f66a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	689b      	ldr	r3, [r3, #8]
 800f676:	1c5a      	adds	r2, r3, #1
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	609a      	str	r2, [r3, #8]

    return true;
 800f67c:	2301      	movs	r3, #1
 800f67e:	e00d      	b.n	800f69c <parse_array+0x180>
        goto fail;
 800f680:	bf00      	nop
 800f682:	e004      	b.n	800f68e <parse_array+0x172>
            goto fail; /* allocation failure */
 800f684:	bf00      	nop
 800f686:	e002      	b.n	800f68e <parse_array+0x172>
            goto fail; /* failed to parse value */
 800f688:	bf00      	nop
 800f68a:	e000      	b.n	800f68e <parse_array+0x172>
        goto fail; /* expected end of array */
 800f68c:	bf00      	nop

fail:
    if (head != NULL)
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d002      	beq.n	800f69a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800f694:	6978      	ldr	r0, [r7, #20]
 800f696:	f7ff f94b 	bl	800e930 <cJSON_Delete>
    }

    return false;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3718      	adds	r7, #24
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f6be:	d301      	bcc.n	800f6c4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	e0ea      	b.n	800f89a <parse_object+0x1f6>
    }
    input_buffer->depth++;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	1c5a      	adds	r2, r3, #1
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f000 80d0 	beq.w	800f876 <parse_object+0x1d2>
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	689a      	ldr	r2, [r3, #8]
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	f080 80c9 	bcs.w	800f876 <parse_object+0x1d2>
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	689b      	ldr	r3, [r3, #8]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	2b7b      	cmp	r3, #123	; 0x7b
 800f6f2:	f040 80c0 	bne.w	800f876 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	1c5a      	adds	r2, r3, #1
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f700:	6838      	ldr	r0, [r7, #0]
 800f702:	f7ff fce7 	bl	800f0d4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00e      	beq.n	800f72a <parse_object+0x86>
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	689a      	ldr	r2, [r3, #8]
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	429a      	cmp	r2, r3
 800f716:	d208      	bcs.n	800f72a <parse_object+0x86>
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	689b      	ldr	r3, [r3, #8]
 800f720:	4413      	add	r3, r2
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	2b7d      	cmp	r3, #125	; 0x7d
 800f726:	f000 808d 	beq.w	800f844 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d005      	beq.n	800f73c <parse_object+0x98>
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	689a      	ldr	r2, [r3, #8]
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d305      	bcc.n	800f748 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	1e5a      	subs	r2, r3, #1
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	609a      	str	r2, [r3, #8]
        goto fail;
 800f746:	e0a1      	b.n	800f88c <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	1e5a      	subs	r2, r3, #1
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	3310      	adds	r3, #16
 800f756:	4618      	mov	r0, r3
 800f758:	f7ff f8d4 	bl	800e904 <cJSON_New_Item>
 800f75c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 808a 	beq.w	800f87a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d104      	bne.n	800f776 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	617b      	str	r3, [r7, #20]
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	613b      	str	r3, [r7, #16]
 800f774:	e007      	b.n	800f786 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	689b      	ldr	r3, [r3, #8]
 800f78a:	1c5a      	adds	r2, r3, #1
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f790:	6838      	ldr	r0, [r7, #0]
 800f792:	f7ff fc9f 	bl	800f0d4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800f796:	6839      	ldr	r1, [r7, #0]
 800f798:	6938      	ldr	r0, [r7, #16]
 800f79a:	f7ff fb55 	bl	800ee48 <parse_string>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d06c      	beq.n	800f87e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800f7a4:	6838      	ldr	r0, [r7, #0]
 800f7a6:	f7ff fc95 	bl	800f0d4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	691a      	ldr	r2, [r3, #16]
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d061      	beq.n	800f882 <parse_object+0x1de>
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	689a      	ldr	r2, [r3, #8]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d25b      	bcs.n	800f882 <parse_object+0x1de>
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2b3a      	cmp	r3, #58	; 0x3a
 800f7d8:	d153      	bne.n	800f882 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	1c5a      	adds	r2, r3, #1
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f7e4:	6838      	ldr	r0, [r7, #0]
 800f7e6:	f7ff fc75 	bl	800f0d4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	6938      	ldr	r0, [r7, #16]
 800f7ee:	f7ff fda9 	bl	800f344 <parse_value>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d046      	beq.n	800f886 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800f7f8:	6838      	ldr	r0, [r7, #0]
 800f7fa:	f7ff fc6b 	bl	800f0d4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00d      	beq.n	800f820 <parse_object+0x17c>
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	689a      	ldr	r2, [r3, #8]
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d207      	bcs.n	800f820 <parse_object+0x17c>
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	689b      	ldr	r3, [r3, #8]
 800f818:	4413      	add	r3, r2
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	2b2c      	cmp	r3, #44	; 0x2c
 800f81e:	d098      	beq.n	800f752 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d031      	beq.n	800f88a <parse_object+0x1e6>
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	689a      	ldr	r2, [r3, #8]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d22b      	bcs.n	800f88a <parse_object+0x1e6>
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	681a      	ldr	r2, [r3, #0]
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	4413      	add	r3, r2
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	2b7d      	cmp	r3, #125	; 0x7d
 800f840:	d123      	bne.n	800f88a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 800f842:	e000      	b.n	800f846 <parse_object+0x1a2>
        goto success; /* empty object */
 800f844:	bf00      	nop
    input_buffer->depth--;
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	1e5a      	subs	r2, r3, #1
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d002      	beq.n	800f85c <parse_object+0x1b8>
        head->prev = current_item;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	693a      	ldr	r2, [r7, #16]
 800f85a:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2240      	movs	r2, #64	; 0x40
 800f860:	60da      	str	r2, [r3, #12]
    item->child = head;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	1c5a      	adds	r2, r3, #1
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	609a      	str	r2, [r3, #8]
    return true;
 800f872:	2301      	movs	r3, #1
 800f874:	e011      	b.n	800f89a <parse_object+0x1f6>
        goto fail; /* not an object */
 800f876:	bf00      	nop
 800f878:	e008      	b.n	800f88c <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800f87a:	bf00      	nop
 800f87c:	e006      	b.n	800f88c <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800f87e:	bf00      	nop
 800f880:	e004      	b.n	800f88c <parse_object+0x1e8>
            goto fail; /* invalid object */
 800f882:	bf00      	nop
 800f884:	e002      	b.n	800f88c <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800f886:	bf00      	nop
 800f888:	e000      	b.n	800f88c <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800f88a:	bf00      	nop

fail:
    if (head != NULL)
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d002      	beq.n	800f898 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800f892:	6978      	ldr	r0, [r7, #20]
 800f894:	f7ff f84c 	bl	800e930 <cJSON_Delete>
    }

    return false;
 800f898:	2300      	movs	r3, #0
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3718      	adds	r7, #24
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b086      	sub	sp, #24
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	60f8      	str	r0, [r7, #12]
 800f8aa:	60b9      	str	r1, [r7, #8]
 800f8ac:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d002      	beq.n	800f8be <get_object_item+0x1c>
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d101      	bne.n	800f8c2 <get_object_item+0x20>
    {
        return NULL;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	e033      	b.n	800f92a <get_object_item+0x88>
    }

    current_element = object->child;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d017      	beq.n	800f8fe <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800f8ce:	e002      	b.n	800f8d6 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d01c      	beq.n	800f916 <get_object_item+0x74>
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	6a1b      	ldr	r3, [r3, #32]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d018      	beq.n	800f916 <get_object_item+0x74>
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	6a1b      	ldr	r3, [r3, #32]
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	68b8      	ldr	r0, [r7, #8]
 800f8ec:	f7f0 fc78 	bl	80001e0 <strcmp>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1ec      	bne.n	800f8d0 <get_object_item+0x2e>
 800f8f6:	e00e      	b.n	800f916 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d008      	beq.n	800f916 <get_object_item+0x74>
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	6a1b      	ldr	r3, [r3, #32]
 800f908:	4619      	mov	r1, r3
 800f90a:	68b8      	ldr	r0, [r7, #8]
 800f90c:	f7fe ff8e 	bl	800e82c <case_insensitive_strcmp>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d1f0      	bne.n	800f8f8 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d003      	beq.n	800f924 <get_object_item+0x82>
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	6a1b      	ldr	r3, [r3, #32]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d101      	bne.n	800f928 <get_object_item+0x86>
        return NULL;
 800f924:	2300      	movs	r3, #0
 800f926:	e000      	b.n	800f92a <get_object_item+0x88>
    }

    return current_element;
 800f928:	697b      	ldr	r3, [r7, #20]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3718      	adds	r7, #24
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b082      	sub	sp, #8
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
 800f93a:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 800f93c:	2201      	movs	r2, #1
 800f93e:	6839      	ldr	r1, [r7, #0]
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7ff ffae 	bl	800f8a2 <get_object_item>
 800f946:	4603      	mov	r3, r0
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3708      	adds	r7, #8
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <__errno>:
 800f950:	4b01      	ldr	r3, [pc, #4]	; (800f958 <__errno+0x8>)
 800f952:	6818      	ldr	r0, [r3, #0]
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop
 800f958:	20000160 	.word	0x20000160

0800f95c <__sflush_r>:
 800f95c:	898a      	ldrh	r2, [r1, #12]
 800f95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f962:	4605      	mov	r5, r0
 800f964:	0710      	lsls	r0, r2, #28
 800f966:	460c      	mov	r4, r1
 800f968:	d458      	bmi.n	800fa1c <__sflush_r+0xc0>
 800f96a:	684b      	ldr	r3, [r1, #4]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	dc05      	bgt.n	800f97c <__sflush_r+0x20>
 800f970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f972:	2b00      	cmp	r3, #0
 800f974:	dc02      	bgt.n	800f97c <__sflush_r+0x20>
 800f976:	2000      	movs	r0, #0
 800f978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f97c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f97e:	2e00      	cmp	r6, #0
 800f980:	d0f9      	beq.n	800f976 <__sflush_r+0x1a>
 800f982:	2300      	movs	r3, #0
 800f984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f988:	682f      	ldr	r7, [r5, #0]
 800f98a:	602b      	str	r3, [r5, #0]
 800f98c:	d032      	beq.n	800f9f4 <__sflush_r+0x98>
 800f98e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f990:	89a3      	ldrh	r3, [r4, #12]
 800f992:	075a      	lsls	r2, r3, #29
 800f994:	d505      	bpl.n	800f9a2 <__sflush_r+0x46>
 800f996:	6863      	ldr	r3, [r4, #4]
 800f998:	1ac0      	subs	r0, r0, r3
 800f99a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f99c:	b10b      	cbz	r3, 800f9a2 <__sflush_r+0x46>
 800f99e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f9a0:	1ac0      	subs	r0, r0, r3
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9a8:	6a21      	ldr	r1, [r4, #32]
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	47b0      	blx	r6
 800f9ae:	1c43      	adds	r3, r0, #1
 800f9b0:	89a3      	ldrh	r3, [r4, #12]
 800f9b2:	d106      	bne.n	800f9c2 <__sflush_r+0x66>
 800f9b4:	6829      	ldr	r1, [r5, #0]
 800f9b6:	291d      	cmp	r1, #29
 800f9b8:	d82c      	bhi.n	800fa14 <__sflush_r+0xb8>
 800f9ba:	4a2a      	ldr	r2, [pc, #168]	; (800fa64 <__sflush_r+0x108>)
 800f9bc:	40ca      	lsrs	r2, r1
 800f9be:	07d6      	lsls	r6, r2, #31
 800f9c0:	d528      	bpl.n	800fa14 <__sflush_r+0xb8>
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	6062      	str	r2, [r4, #4]
 800f9c6:	04d9      	lsls	r1, r3, #19
 800f9c8:	6922      	ldr	r2, [r4, #16]
 800f9ca:	6022      	str	r2, [r4, #0]
 800f9cc:	d504      	bpl.n	800f9d8 <__sflush_r+0x7c>
 800f9ce:	1c42      	adds	r2, r0, #1
 800f9d0:	d101      	bne.n	800f9d6 <__sflush_r+0x7a>
 800f9d2:	682b      	ldr	r3, [r5, #0]
 800f9d4:	b903      	cbnz	r3, 800f9d8 <__sflush_r+0x7c>
 800f9d6:	6560      	str	r0, [r4, #84]	; 0x54
 800f9d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9da:	602f      	str	r7, [r5, #0]
 800f9dc:	2900      	cmp	r1, #0
 800f9de:	d0ca      	beq.n	800f976 <__sflush_r+0x1a>
 800f9e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9e4:	4299      	cmp	r1, r3
 800f9e6:	d002      	beq.n	800f9ee <__sflush_r+0x92>
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	f000 fa21 	bl	800fe30 <_free_r>
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	6360      	str	r0, [r4, #52]	; 0x34
 800f9f2:	e7c1      	b.n	800f978 <__sflush_r+0x1c>
 800f9f4:	6a21      	ldr	r1, [r4, #32]
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	47b0      	blx	r6
 800f9fc:	1c41      	adds	r1, r0, #1
 800f9fe:	d1c7      	bne.n	800f990 <__sflush_r+0x34>
 800fa00:	682b      	ldr	r3, [r5, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d0c4      	beq.n	800f990 <__sflush_r+0x34>
 800fa06:	2b1d      	cmp	r3, #29
 800fa08:	d001      	beq.n	800fa0e <__sflush_r+0xb2>
 800fa0a:	2b16      	cmp	r3, #22
 800fa0c:	d101      	bne.n	800fa12 <__sflush_r+0xb6>
 800fa0e:	602f      	str	r7, [r5, #0]
 800fa10:	e7b1      	b.n	800f976 <__sflush_r+0x1a>
 800fa12:	89a3      	ldrh	r3, [r4, #12]
 800fa14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa18:	81a3      	strh	r3, [r4, #12]
 800fa1a:	e7ad      	b.n	800f978 <__sflush_r+0x1c>
 800fa1c:	690f      	ldr	r7, [r1, #16]
 800fa1e:	2f00      	cmp	r7, #0
 800fa20:	d0a9      	beq.n	800f976 <__sflush_r+0x1a>
 800fa22:	0793      	lsls	r3, r2, #30
 800fa24:	680e      	ldr	r6, [r1, #0]
 800fa26:	bf08      	it	eq
 800fa28:	694b      	ldreq	r3, [r1, #20]
 800fa2a:	600f      	str	r7, [r1, #0]
 800fa2c:	bf18      	it	ne
 800fa2e:	2300      	movne	r3, #0
 800fa30:	eba6 0807 	sub.w	r8, r6, r7
 800fa34:	608b      	str	r3, [r1, #8]
 800fa36:	f1b8 0f00 	cmp.w	r8, #0
 800fa3a:	dd9c      	ble.n	800f976 <__sflush_r+0x1a>
 800fa3c:	6a21      	ldr	r1, [r4, #32]
 800fa3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa40:	4643      	mov	r3, r8
 800fa42:	463a      	mov	r2, r7
 800fa44:	4628      	mov	r0, r5
 800fa46:	47b0      	blx	r6
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	dc06      	bgt.n	800fa5a <__sflush_r+0xfe>
 800fa4c:	89a3      	ldrh	r3, [r4, #12]
 800fa4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa52:	81a3      	strh	r3, [r4, #12]
 800fa54:	f04f 30ff 	mov.w	r0, #4294967295
 800fa58:	e78e      	b.n	800f978 <__sflush_r+0x1c>
 800fa5a:	4407      	add	r7, r0
 800fa5c:	eba8 0800 	sub.w	r8, r8, r0
 800fa60:	e7e9      	b.n	800fa36 <__sflush_r+0xda>
 800fa62:	bf00      	nop
 800fa64:	20400001 	.word	0x20400001

0800fa68 <_fflush_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	690b      	ldr	r3, [r1, #16]
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	460c      	mov	r4, r1
 800fa70:	b913      	cbnz	r3, 800fa78 <_fflush_r+0x10>
 800fa72:	2500      	movs	r5, #0
 800fa74:	4628      	mov	r0, r5
 800fa76:	bd38      	pop	{r3, r4, r5, pc}
 800fa78:	b118      	cbz	r0, 800fa82 <_fflush_r+0x1a>
 800fa7a:	6983      	ldr	r3, [r0, #24]
 800fa7c:	b90b      	cbnz	r3, 800fa82 <_fflush_r+0x1a>
 800fa7e:	f000 f887 	bl	800fb90 <__sinit>
 800fa82:	4b14      	ldr	r3, [pc, #80]	; (800fad4 <_fflush_r+0x6c>)
 800fa84:	429c      	cmp	r4, r3
 800fa86:	d11b      	bne.n	800fac0 <_fflush_r+0x58>
 800fa88:	686c      	ldr	r4, [r5, #4]
 800fa8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d0ef      	beq.n	800fa72 <_fflush_r+0xa>
 800fa92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa94:	07d0      	lsls	r0, r2, #31
 800fa96:	d404      	bmi.n	800faa2 <_fflush_r+0x3a>
 800fa98:	0599      	lsls	r1, r3, #22
 800fa9a:	d402      	bmi.n	800faa2 <_fflush_r+0x3a>
 800fa9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa9e:	f000 f93a 	bl	800fd16 <__retarget_lock_acquire_recursive>
 800faa2:	4628      	mov	r0, r5
 800faa4:	4621      	mov	r1, r4
 800faa6:	f7ff ff59 	bl	800f95c <__sflush_r>
 800faaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800faac:	07da      	lsls	r2, r3, #31
 800faae:	4605      	mov	r5, r0
 800fab0:	d4e0      	bmi.n	800fa74 <_fflush_r+0xc>
 800fab2:	89a3      	ldrh	r3, [r4, #12]
 800fab4:	059b      	lsls	r3, r3, #22
 800fab6:	d4dd      	bmi.n	800fa74 <_fflush_r+0xc>
 800fab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800faba:	f000 f92d 	bl	800fd18 <__retarget_lock_release_recursive>
 800fabe:	e7d9      	b.n	800fa74 <_fflush_r+0xc>
 800fac0:	4b05      	ldr	r3, [pc, #20]	; (800fad8 <_fflush_r+0x70>)
 800fac2:	429c      	cmp	r4, r3
 800fac4:	d101      	bne.n	800faca <_fflush_r+0x62>
 800fac6:	68ac      	ldr	r4, [r5, #8]
 800fac8:	e7df      	b.n	800fa8a <_fflush_r+0x22>
 800faca:	4b04      	ldr	r3, [pc, #16]	; (800fadc <_fflush_r+0x74>)
 800facc:	429c      	cmp	r4, r3
 800face:	bf08      	it	eq
 800fad0:	68ec      	ldreq	r4, [r5, #12]
 800fad2:	e7da      	b.n	800fa8a <_fflush_r+0x22>
 800fad4:	080146c8 	.word	0x080146c8
 800fad8:	080146e8 	.word	0x080146e8
 800fadc:	080146a8 	.word	0x080146a8

0800fae0 <std>:
 800fae0:	2300      	movs	r3, #0
 800fae2:	b510      	push	{r4, lr}
 800fae4:	4604      	mov	r4, r0
 800fae6:	e9c0 3300 	strd	r3, r3, [r0]
 800faea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800faee:	6083      	str	r3, [r0, #8]
 800faf0:	8181      	strh	r1, [r0, #12]
 800faf2:	6643      	str	r3, [r0, #100]	; 0x64
 800faf4:	81c2      	strh	r2, [r0, #14]
 800faf6:	6183      	str	r3, [r0, #24]
 800faf8:	4619      	mov	r1, r3
 800fafa:	2208      	movs	r2, #8
 800fafc:	305c      	adds	r0, #92	; 0x5c
 800fafe:	f000 f98f 	bl	800fe20 <memset>
 800fb02:	4b05      	ldr	r3, [pc, #20]	; (800fb18 <std+0x38>)
 800fb04:	6263      	str	r3, [r4, #36]	; 0x24
 800fb06:	4b05      	ldr	r3, [pc, #20]	; (800fb1c <std+0x3c>)
 800fb08:	62a3      	str	r3, [r4, #40]	; 0x28
 800fb0a:	4b05      	ldr	r3, [pc, #20]	; (800fb20 <std+0x40>)
 800fb0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fb0e:	4b05      	ldr	r3, [pc, #20]	; (800fb24 <std+0x44>)
 800fb10:	6224      	str	r4, [r4, #32]
 800fb12:	6323      	str	r3, [r4, #48]	; 0x30
 800fb14:	bd10      	pop	{r4, pc}
 800fb16:	bf00      	nop
 800fb18:	08010109 	.word	0x08010109
 800fb1c:	0801012b 	.word	0x0801012b
 800fb20:	08010163 	.word	0x08010163
 800fb24:	08010187 	.word	0x08010187

0800fb28 <_cleanup_r>:
 800fb28:	4901      	ldr	r1, [pc, #4]	; (800fb30 <_cleanup_r+0x8>)
 800fb2a:	f000 b8af 	b.w	800fc8c <_fwalk_reent>
 800fb2e:	bf00      	nop
 800fb30:	0800fa69 	.word	0x0800fa69

0800fb34 <__sfmoreglue>:
 800fb34:	b570      	push	{r4, r5, r6, lr}
 800fb36:	1e4a      	subs	r2, r1, #1
 800fb38:	2568      	movs	r5, #104	; 0x68
 800fb3a:	4355      	muls	r5, r2
 800fb3c:	460e      	mov	r6, r1
 800fb3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fb42:	f000 f9c5 	bl	800fed0 <_malloc_r>
 800fb46:	4604      	mov	r4, r0
 800fb48:	b140      	cbz	r0, 800fb5c <__sfmoreglue+0x28>
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	e9c0 1600 	strd	r1, r6, [r0]
 800fb50:	300c      	adds	r0, #12
 800fb52:	60a0      	str	r0, [r4, #8]
 800fb54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fb58:	f000 f962 	bl	800fe20 <memset>
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	bd70      	pop	{r4, r5, r6, pc}

0800fb60 <__sfp_lock_acquire>:
 800fb60:	4801      	ldr	r0, [pc, #4]	; (800fb68 <__sfp_lock_acquire+0x8>)
 800fb62:	f000 b8d8 	b.w	800fd16 <__retarget_lock_acquire_recursive>
 800fb66:	bf00      	nop
 800fb68:	20003410 	.word	0x20003410

0800fb6c <__sfp_lock_release>:
 800fb6c:	4801      	ldr	r0, [pc, #4]	; (800fb74 <__sfp_lock_release+0x8>)
 800fb6e:	f000 b8d3 	b.w	800fd18 <__retarget_lock_release_recursive>
 800fb72:	bf00      	nop
 800fb74:	20003410 	.word	0x20003410

0800fb78 <__sinit_lock_acquire>:
 800fb78:	4801      	ldr	r0, [pc, #4]	; (800fb80 <__sinit_lock_acquire+0x8>)
 800fb7a:	f000 b8cc 	b.w	800fd16 <__retarget_lock_acquire_recursive>
 800fb7e:	bf00      	nop
 800fb80:	2000340b 	.word	0x2000340b

0800fb84 <__sinit_lock_release>:
 800fb84:	4801      	ldr	r0, [pc, #4]	; (800fb8c <__sinit_lock_release+0x8>)
 800fb86:	f000 b8c7 	b.w	800fd18 <__retarget_lock_release_recursive>
 800fb8a:	bf00      	nop
 800fb8c:	2000340b 	.word	0x2000340b

0800fb90 <__sinit>:
 800fb90:	b510      	push	{r4, lr}
 800fb92:	4604      	mov	r4, r0
 800fb94:	f7ff fff0 	bl	800fb78 <__sinit_lock_acquire>
 800fb98:	69a3      	ldr	r3, [r4, #24]
 800fb9a:	b11b      	cbz	r3, 800fba4 <__sinit+0x14>
 800fb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fba0:	f7ff bff0 	b.w	800fb84 <__sinit_lock_release>
 800fba4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fba8:	6523      	str	r3, [r4, #80]	; 0x50
 800fbaa:	4b13      	ldr	r3, [pc, #76]	; (800fbf8 <__sinit+0x68>)
 800fbac:	4a13      	ldr	r2, [pc, #76]	; (800fbfc <__sinit+0x6c>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800fbb2:	42a3      	cmp	r3, r4
 800fbb4:	bf04      	itt	eq
 800fbb6:	2301      	moveq	r3, #1
 800fbb8:	61a3      	streq	r3, [r4, #24]
 800fbba:	4620      	mov	r0, r4
 800fbbc:	f000 f820 	bl	800fc00 <__sfp>
 800fbc0:	6060      	str	r0, [r4, #4]
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f000 f81c 	bl	800fc00 <__sfp>
 800fbc8:	60a0      	str	r0, [r4, #8]
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f000 f818 	bl	800fc00 <__sfp>
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	60e0      	str	r0, [r4, #12]
 800fbd4:	2104      	movs	r1, #4
 800fbd6:	6860      	ldr	r0, [r4, #4]
 800fbd8:	f7ff ff82 	bl	800fae0 <std>
 800fbdc:	68a0      	ldr	r0, [r4, #8]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	2109      	movs	r1, #9
 800fbe2:	f7ff ff7d 	bl	800fae0 <std>
 800fbe6:	68e0      	ldr	r0, [r4, #12]
 800fbe8:	2202      	movs	r2, #2
 800fbea:	2112      	movs	r1, #18
 800fbec:	f7ff ff78 	bl	800fae0 <std>
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	61a3      	str	r3, [r4, #24]
 800fbf4:	e7d2      	b.n	800fb9c <__sinit+0xc>
 800fbf6:	bf00      	nop
 800fbf8:	08014708 	.word	0x08014708
 800fbfc:	0800fb29 	.word	0x0800fb29

0800fc00 <__sfp>:
 800fc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc02:	4607      	mov	r7, r0
 800fc04:	f7ff ffac 	bl	800fb60 <__sfp_lock_acquire>
 800fc08:	4b1e      	ldr	r3, [pc, #120]	; (800fc84 <__sfp+0x84>)
 800fc0a:	681e      	ldr	r6, [r3, #0]
 800fc0c:	69b3      	ldr	r3, [r6, #24]
 800fc0e:	b913      	cbnz	r3, 800fc16 <__sfp+0x16>
 800fc10:	4630      	mov	r0, r6
 800fc12:	f7ff ffbd 	bl	800fb90 <__sinit>
 800fc16:	3648      	adds	r6, #72	; 0x48
 800fc18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	d503      	bpl.n	800fc28 <__sfp+0x28>
 800fc20:	6833      	ldr	r3, [r6, #0]
 800fc22:	b30b      	cbz	r3, 800fc68 <__sfp+0x68>
 800fc24:	6836      	ldr	r6, [r6, #0]
 800fc26:	e7f7      	b.n	800fc18 <__sfp+0x18>
 800fc28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fc2c:	b9d5      	cbnz	r5, 800fc64 <__sfp+0x64>
 800fc2e:	4b16      	ldr	r3, [pc, #88]	; (800fc88 <__sfp+0x88>)
 800fc30:	60e3      	str	r3, [r4, #12]
 800fc32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fc36:	6665      	str	r5, [r4, #100]	; 0x64
 800fc38:	f000 f86c 	bl	800fd14 <__retarget_lock_init_recursive>
 800fc3c:	f7ff ff96 	bl	800fb6c <__sfp_lock_release>
 800fc40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fc44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fc48:	6025      	str	r5, [r4, #0]
 800fc4a:	61a5      	str	r5, [r4, #24]
 800fc4c:	2208      	movs	r2, #8
 800fc4e:	4629      	mov	r1, r5
 800fc50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fc54:	f000 f8e4 	bl	800fe20 <memset>
 800fc58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fc5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fc60:	4620      	mov	r0, r4
 800fc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc64:	3468      	adds	r4, #104	; 0x68
 800fc66:	e7d9      	b.n	800fc1c <__sfp+0x1c>
 800fc68:	2104      	movs	r1, #4
 800fc6a:	4638      	mov	r0, r7
 800fc6c:	f7ff ff62 	bl	800fb34 <__sfmoreglue>
 800fc70:	4604      	mov	r4, r0
 800fc72:	6030      	str	r0, [r6, #0]
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d1d5      	bne.n	800fc24 <__sfp+0x24>
 800fc78:	f7ff ff78 	bl	800fb6c <__sfp_lock_release>
 800fc7c:	230c      	movs	r3, #12
 800fc7e:	603b      	str	r3, [r7, #0]
 800fc80:	e7ee      	b.n	800fc60 <__sfp+0x60>
 800fc82:	bf00      	nop
 800fc84:	08014708 	.word	0x08014708
 800fc88:	ffff0001 	.word	0xffff0001

0800fc8c <_fwalk_reent>:
 800fc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc90:	4606      	mov	r6, r0
 800fc92:	4688      	mov	r8, r1
 800fc94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fc98:	2700      	movs	r7, #0
 800fc9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc9e:	f1b9 0901 	subs.w	r9, r9, #1
 800fca2:	d505      	bpl.n	800fcb0 <_fwalk_reent+0x24>
 800fca4:	6824      	ldr	r4, [r4, #0]
 800fca6:	2c00      	cmp	r4, #0
 800fca8:	d1f7      	bne.n	800fc9a <_fwalk_reent+0xe>
 800fcaa:	4638      	mov	r0, r7
 800fcac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcb0:	89ab      	ldrh	r3, [r5, #12]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d907      	bls.n	800fcc6 <_fwalk_reent+0x3a>
 800fcb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	d003      	beq.n	800fcc6 <_fwalk_reent+0x3a>
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	47c0      	blx	r8
 800fcc4:	4307      	orrs	r7, r0
 800fcc6:	3568      	adds	r5, #104	; 0x68
 800fcc8:	e7e9      	b.n	800fc9e <_fwalk_reent+0x12>
	...

0800fccc <__libc_init_array>:
 800fccc:	b570      	push	{r4, r5, r6, lr}
 800fcce:	4d0d      	ldr	r5, [pc, #52]	; (800fd04 <__libc_init_array+0x38>)
 800fcd0:	4c0d      	ldr	r4, [pc, #52]	; (800fd08 <__libc_init_array+0x3c>)
 800fcd2:	1b64      	subs	r4, r4, r5
 800fcd4:	10a4      	asrs	r4, r4, #2
 800fcd6:	2600      	movs	r6, #0
 800fcd8:	42a6      	cmp	r6, r4
 800fcda:	d109      	bne.n	800fcf0 <__libc_init_array+0x24>
 800fcdc:	4d0b      	ldr	r5, [pc, #44]	; (800fd0c <__libc_init_array+0x40>)
 800fcde:	4c0c      	ldr	r4, [pc, #48]	; (800fd10 <__libc_init_array+0x44>)
 800fce0:	f002 ff42 	bl	8012b68 <_init>
 800fce4:	1b64      	subs	r4, r4, r5
 800fce6:	10a4      	asrs	r4, r4, #2
 800fce8:	2600      	movs	r6, #0
 800fcea:	42a6      	cmp	r6, r4
 800fcec:	d105      	bne.n	800fcfa <__libc_init_array+0x2e>
 800fcee:	bd70      	pop	{r4, r5, r6, pc}
 800fcf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcf4:	4798      	blx	r3
 800fcf6:	3601      	adds	r6, #1
 800fcf8:	e7ee      	b.n	800fcd8 <__libc_init_array+0xc>
 800fcfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcfe:	4798      	blx	r3
 800fd00:	3601      	adds	r6, #1
 800fd02:	e7f2      	b.n	800fcea <__libc_init_array+0x1e>
 800fd04:	080149e4 	.word	0x080149e4
 800fd08:	080149e4 	.word	0x080149e4
 800fd0c:	080149e4 	.word	0x080149e4
 800fd10:	080149e8 	.word	0x080149e8

0800fd14 <__retarget_lock_init_recursive>:
 800fd14:	4770      	bx	lr

0800fd16 <__retarget_lock_acquire_recursive>:
 800fd16:	4770      	bx	lr

0800fd18 <__retarget_lock_release_recursive>:
 800fd18:	4770      	bx	lr

0800fd1a <__swhatbuf_r>:
 800fd1a:	b570      	push	{r4, r5, r6, lr}
 800fd1c:	460e      	mov	r6, r1
 800fd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd22:	2900      	cmp	r1, #0
 800fd24:	b096      	sub	sp, #88	; 0x58
 800fd26:	4614      	mov	r4, r2
 800fd28:	461d      	mov	r5, r3
 800fd2a:	da07      	bge.n	800fd3c <__swhatbuf_r+0x22>
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	602b      	str	r3, [r5, #0]
 800fd30:	89b3      	ldrh	r3, [r6, #12]
 800fd32:	061a      	lsls	r2, r3, #24
 800fd34:	d410      	bmi.n	800fd58 <__swhatbuf_r+0x3e>
 800fd36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd3a:	e00e      	b.n	800fd5a <__swhatbuf_r+0x40>
 800fd3c:	466a      	mov	r2, sp
 800fd3e:	f001 f94f 	bl	8010fe0 <_fstat_r>
 800fd42:	2800      	cmp	r0, #0
 800fd44:	dbf2      	blt.n	800fd2c <__swhatbuf_r+0x12>
 800fd46:	9a01      	ldr	r2, [sp, #4]
 800fd48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fd4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd50:	425a      	negs	r2, r3
 800fd52:	415a      	adcs	r2, r3
 800fd54:	602a      	str	r2, [r5, #0]
 800fd56:	e7ee      	b.n	800fd36 <__swhatbuf_r+0x1c>
 800fd58:	2340      	movs	r3, #64	; 0x40
 800fd5a:	2000      	movs	r0, #0
 800fd5c:	6023      	str	r3, [r4, #0]
 800fd5e:	b016      	add	sp, #88	; 0x58
 800fd60:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fd64 <__smakebuf_r>:
 800fd64:	898b      	ldrh	r3, [r1, #12]
 800fd66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd68:	079d      	lsls	r5, r3, #30
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	460c      	mov	r4, r1
 800fd6e:	d507      	bpl.n	800fd80 <__smakebuf_r+0x1c>
 800fd70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd74:	6023      	str	r3, [r4, #0]
 800fd76:	6123      	str	r3, [r4, #16]
 800fd78:	2301      	movs	r3, #1
 800fd7a:	6163      	str	r3, [r4, #20]
 800fd7c:	b002      	add	sp, #8
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
 800fd80:	ab01      	add	r3, sp, #4
 800fd82:	466a      	mov	r2, sp
 800fd84:	f7ff ffc9 	bl	800fd1a <__swhatbuf_r>
 800fd88:	9900      	ldr	r1, [sp, #0]
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	f000 f89f 	bl	800fed0 <_malloc_r>
 800fd92:	b948      	cbnz	r0, 800fda8 <__smakebuf_r+0x44>
 800fd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd98:	059a      	lsls	r2, r3, #22
 800fd9a:	d4ef      	bmi.n	800fd7c <__smakebuf_r+0x18>
 800fd9c:	f023 0303 	bic.w	r3, r3, #3
 800fda0:	f043 0302 	orr.w	r3, r3, #2
 800fda4:	81a3      	strh	r3, [r4, #12]
 800fda6:	e7e3      	b.n	800fd70 <__smakebuf_r+0xc>
 800fda8:	4b0d      	ldr	r3, [pc, #52]	; (800fde0 <__smakebuf_r+0x7c>)
 800fdaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800fdac:	89a3      	ldrh	r3, [r4, #12]
 800fdae:	6020      	str	r0, [r4, #0]
 800fdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdb4:	81a3      	strh	r3, [r4, #12]
 800fdb6:	9b00      	ldr	r3, [sp, #0]
 800fdb8:	6163      	str	r3, [r4, #20]
 800fdba:	9b01      	ldr	r3, [sp, #4]
 800fdbc:	6120      	str	r0, [r4, #16]
 800fdbe:	b15b      	cbz	r3, 800fdd8 <__smakebuf_r+0x74>
 800fdc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f001 fc8d 	bl	80116e4 <_isatty_r>
 800fdca:	b128      	cbz	r0, 800fdd8 <__smakebuf_r+0x74>
 800fdcc:	89a3      	ldrh	r3, [r4, #12]
 800fdce:	f023 0303 	bic.w	r3, r3, #3
 800fdd2:	f043 0301 	orr.w	r3, r3, #1
 800fdd6:	81a3      	strh	r3, [r4, #12]
 800fdd8:	89a0      	ldrh	r0, [r4, #12]
 800fdda:	4305      	orrs	r5, r0
 800fddc:	81a5      	strh	r5, [r4, #12]
 800fdde:	e7cd      	b.n	800fd7c <__smakebuf_r+0x18>
 800fde0:	0800fb29 	.word	0x0800fb29

0800fde4 <malloc>:
 800fde4:	4b02      	ldr	r3, [pc, #8]	; (800fdf0 <malloc+0xc>)
 800fde6:	4601      	mov	r1, r0
 800fde8:	6818      	ldr	r0, [r3, #0]
 800fdea:	f000 b871 	b.w	800fed0 <_malloc_r>
 800fdee:	bf00      	nop
 800fdf0:	20000160 	.word	0x20000160

0800fdf4 <free>:
 800fdf4:	4b02      	ldr	r3, [pc, #8]	; (800fe00 <free+0xc>)
 800fdf6:	4601      	mov	r1, r0
 800fdf8:	6818      	ldr	r0, [r3, #0]
 800fdfa:	f000 b819 	b.w	800fe30 <_free_r>
 800fdfe:	bf00      	nop
 800fe00:	20000160 	.word	0x20000160

0800fe04 <memcpy>:
 800fe04:	440a      	add	r2, r1
 800fe06:	4291      	cmp	r1, r2
 800fe08:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe0c:	d100      	bne.n	800fe10 <memcpy+0xc>
 800fe0e:	4770      	bx	lr
 800fe10:	b510      	push	{r4, lr}
 800fe12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe1a:	4291      	cmp	r1, r2
 800fe1c:	d1f9      	bne.n	800fe12 <memcpy+0xe>
 800fe1e:	bd10      	pop	{r4, pc}

0800fe20 <memset>:
 800fe20:	4402      	add	r2, r0
 800fe22:	4603      	mov	r3, r0
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d100      	bne.n	800fe2a <memset+0xa>
 800fe28:	4770      	bx	lr
 800fe2a:	f803 1b01 	strb.w	r1, [r3], #1
 800fe2e:	e7f9      	b.n	800fe24 <memset+0x4>

0800fe30 <_free_r>:
 800fe30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe32:	2900      	cmp	r1, #0
 800fe34:	d048      	beq.n	800fec8 <_free_r+0x98>
 800fe36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe3a:	9001      	str	r0, [sp, #4]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f1a1 0404 	sub.w	r4, r1, #4
 800fe42:	bfb8      	it	lt
 800fe44:	18e4      	addlt	r4, r4, r3
 800fe46:	f001 fc81 	bl	801174c <__malloc_lock>
 800fe4a:	4a20      	ldr	r2, [pc, #128]	; (800fecc <_free_r+0x9c>)
 800fe4c:	9801      	ldr	r0, [sp, #4]
 800fe4e:	6813      	ldr	r3, [r2, #0]
 800fe50:	4615      	mov	r5, r2
 800fe52:	b933      	cbnz	r3, 800fe62 <_free_r+0x32>
 800fe54:	6063      	str	r3, [r4, #4]
 800fe56:	6014      	str	r4, [r2, #0]
 800fe58:	b003      	add	sp, #12
 800fe5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe5e:	f001 bc7b 	b.w	8011758 <__malloc_unlock>
 800fe62:	42a3      	cmp	r3, r4
 800fe64:	d90b      	bls.n	800fe7e <_free_r+0x4e>
 800fe66:	6821      	ldr	r1, [r4, #0]
 800fe68:	1862      	adds	r2, r4, r1
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	bf04      	itt	eq
 800fe6e:	681a      	ldreq	r2, [r3, #0]
 800fe70:	685b      	ldreq	r3, [r3, #4]
 800fe72:	6063      	str	r3, [r4, #4]
 800fe74:	bf04      	itt	eq
 800fe76:	1852      	addeq	r2, r2, r1
 800fe78:	6022      	streq	r2, [r4, #0]
 800fe7a:	602c      	str	r4, [r5, #0]
 800fe7c:	e7ec      	b.n	800fe58 <_free_r+0x28>
 800fe7e:	461a      	mov	r2, r3
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	b10b      	cbz	r3, 800fe88 <_free_r+0x58>
 800fe84:	42a3      	cmp	r3, r4
 800fe86:	d9fa      	bls.n	800fe7e <_free_r+0x4e>
 800fe88:	6811      	ldr	r1, [r2, #0]
 800fe8a:	1855      	adds	r5, r2, r1
 800fe8c:	42a5      	cmp	r5, r4
 800fe8e:	d10b      	bne.n	800fea8 <_free_r+0x78>
 800fe90:	6824      	ldr	r4, [r4, #0]
 800fe92:	4421      	add	r1, r4
 800fe94:	1854      	adds	r4, r2, r1
 800fe96:	42a3      	cmp	r3, r4
 800fe98:	6011      	str	r1, [r2, #0]
 800fe9a:	d1dd      	bne.n	800fe58 <_free_r+0x28>
 800fe9c:	681c      	ldr	r4, [r3, #0]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	6053      	str	r3, [r2, #4]
 800fea2:	4421      	add	r1, r4
 800fea4:	6011      	str	r1, [r2, #0]
 800fea6:	e7d7      	b.n	800fe58 <_free_r+0x28>
 800fea8:	d902      	bls.n	800feb0 <_free_r+0x80>
 800feaa:	230c      	movs	r3, #12
 800feac:	6003      	str	r3, [r0, #0]
 800feae:	e7d3      	b.n	800fe58 <_free_r+0x28>
 800feb0:	6825      	ldr	r5, [r4, #0]
 800feb2:	1961      	adds	r1, r4, r5
 800feb4:	428b      	cmp	r3, r1
 800feb6:	bf04      	itt	eq
 800feb8:	6819      	ldreq	r1, [r3, #0]
 800feba:	685b      	ldreq	r3, [r3, #4]
 800febc:	6063      	str	r3, [r4, #4]
 800febe:	bf04      	itt	eq
 800fec0:	1949      	addeq	r1, r1, r5
 800fec2:	6021      	streq	r1, [r4, #0]
 800fec4:	6054      	str	r4, [r2, #4]
 800fec6:	e7c7      	b.n	800fe58 <_free_r+0x28>
 800fec8:	b003      	add	sp, #12
 800feca:	bd30      	pop	{r4, r5, pc}
 800fecc:	20002578 	.word	0x20002578

0800fed0 <_malloc_r>:
 800fed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed2:	1ccd      	adds	r5, r1, #3
 800fed4:	f025 0503 	bic.w	r5, r5, #3
 800fed8:	3508      	adds	r5, #8
 800feda:	2d0c      	cmp	r5, #12
 800fedc:	bf38      	it	cc
 800fede:	250c      	movcc	r5, #12
 800fee0:	2d00      	cmp	r5, #0
 800fee2:	4606      	mov	r6, r0
 800fee4:	db01      	blt.n	800feea <_malloc_r+0x1a>
 800fee6:	42a9      	cmp	r1, r5
 800fee8:	d903      	bls.n	800fef2 <_malloc_r+0x22>
 800feea:	230c      	movs	r3, #12
 800feec:	6033      	str	r3, [r6, #0]
 800feee:	2000      	movs	r0, #0
 800fef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fef2:	f001 fc2b 	bl	801174c <__malloc_lock>
 800fef6:	4921      	ldr	r1, [pc, #132]	; (800ff7c <_malloc_r+0xac>)
 800fef8:	680a      	ldr	r2, [r1, #0]
 800fefa:	4614      	mov	r4, r2
 800fefc:	b99c      	cbnz	r4, 800ff26 <_malloc_r+0x56>
 800fefe:	4f20      	ldr	r7, [pc, #128]	; (800ff80 <_malloc_r+0xb0>)
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	b923      	cbnz	r3, 800ff0e <_malloc_r+0x3e>
 800ff04:	4621      	mov	r1, r4
 800ff06:	4630      	mov	r0, r6
 800ff08:	f000 f8ba 	bl	8010080 <_sbrk_r>
 800ff0c:	6038      	str	r0, [r7, #0]
 800ff0e:	4629      	mov	r1, r5
 800ff10:	4630      	mov	r0, r6
 800ff12:	f000 f8b5 	bl	8010080 <_sbrk_r>
 800ff16:	1c43      	adds	r3, r0, #1
 800ff18:	d123      	bne.n	800ff62 <_malloc_r+0x92>
 800ff1a:	230c      	movs	r3, #12
 800ff1c:	6033      	str	r3, [r6, #0]
 800ff1e:	4630      	mov	r0, r6
 800ff20:	f001 fc1a 	bl	8011758 <__malloc_unlock>
 800ff24:	e7e3      	b.n	800feee <_malloc_r+0x1e>
 800ff26:	6823      	ldr	r3, [r4, #0]
 800ff28:	1b5b      	subs	r3, r3, r5
 800ff2a:	d417      	bmi.n	800ff5c <_malloc_r+0x8c>
 800ff2c:	2b0b      	cmp	r3, #11
 800ff2e:	d903      	bls.n	800ff38 <_malloc_r+0x68>
 800ff30:	6023      	str	r3, [r4, #0]
 800ff32:	441c      	add	r4, r3
 800ff34:	6025      	str	r5, [r4, #0]
 800ff36:	e004      	b.n	800ff42 <_malloc_r+0x72>
 800ff38:	6863      	ldr	r3, [r4, #4]
 800ff3a:	42a2      	cmp	r2, r4
 800ff3c:	bf0c      	ite	eq
 800ff3e:	600b      	streq	r3, [r1, #0]
 800ff40:	6053      	strne	r3, [r2, #4]
 800ff42:	4630      	mov	r0, r6
 800ff44:	f001 fc08 	bl	8011758 <__malloc_unlock>
 800ff48:	f104 000b 	add.w	r0, r4, #11
 800ff4c:	1d23      	adds	r3, r4, #4
 800ff4e:	f020 0007 	bic.w	r0, r0, #7
 800ff52:	1ac2      	subs	r2, r0, r3
 800ff54:	d0cc      	beq.n	800fef0 <_malloc_r+0x20>
 800ff56:	1a1b      	subs	r3, r3, r0
 800ff58:	50a3      	str	r3, [r4, r2]
 800ff5a:	e7c9      	b.n	800fef0 <_malloc_r+0x20>
 800ff5c:	4622      	mov	r2, r4
 800ff5e:	6864      	ldr	r4, [r4, #4]
 800ff60:	e7cc      	b.n	800fefc <_malloc_r+0x2c>
 800ff62:	1cc4      	adds	r4, r0, #3
 800ff64:	f024 0403 	bic.w	r4, r4, #3
 800ff68:	42a0      	cmp	r0, r4
 800ff6a:	d0e3      	beq.n	800ff34 <_malloc_r+0x64>
 800ff6c:	1a21      	subs	r1, r4, r0
 800ff6e:	4630      	mov	r0, r6
 800ff70:	f000 f886 	bl	8010080 <_sbrk_r>
 800ff74:	3001      	adds	r0, #1
 800ff76:	d1dd      	bne.n	800ff34 <_malloc_r+0x64>
 800ff78:	e7cf      	b.n	800ff1a <_malloc_r+0x4a>
 800ff7a:	bf00      	nop
 800ff7c:	20002578 	.word	0x20002578
 800ff80:	2000257c 	.word	0x2000257c

0800ff84 <_puts_r>:
 800ff84:	b570      	push	{r4, r5, r6, lr}
 800ff86:	460e      	mov	r6, r1
 800ff88:	4605      	mov	r5, r0
 800ff8a:	b118      	cbz	r0, 800ff94 <_puts_r+0x10>
 800ff8c:	6983      	ldr	r3, [r0, #24]
 800ff8e:	b90b      	cbnz	r3, 800ff94 <_puts_r+0x10>
 800ff90:	f7ff fdfe 	bl	800fb90 <__sinit>
 800ff94:	69ab      	ldr	r3, [r5, #24]
 800ff96:	68ac      	ldr	r4, [r5, #8]
 800ff98:	b913      	cbnz	r3, 800ffa0 <_puts_r+0x1c>
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	f7ff fdf8 	bl	800fb90 <__sinit>
 800ffa0:	4b2c      	ldr	r3, [pc, #176]	; (8010054 <_puts_r+0xd0>)
 800ffa2:	429c      	cmp	r4, r3
 800ffa4:	d120      	bne.n	800ffe8 <_puts_r+0x64>
 800ffa6:	686c      	ldr	r4, [r5, #4]
 800ffa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffaa:	07db      	lsls	r3, r3, #31
 800ffac:	d405      	bmi.n	800ffba <_puts_r+0x36>
 800ffae:	89a3      	ldrh	r3, [r4, #12]
 800ffb0:	0598      	lsls	r0, r3, #22
 800ffb2:	d402      	bmi.n	800ffba <_puts_r+0x36>
 800ffb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffb6:	f7ff feae 	bl	800fd16 <__retarget_lock_acquire_recursive>
 800ffba:	89a3      	ldrh	r3, [r4, #12]
 800ffbc:	0719      	lsls	r1, r3, #28
 800ffbe:	d51d      	bpl.n	800fffc <_puts_r+0x78>
 800ffc0:	6923      	ldr	r3, [r4, #16]
 800ffc2:	b1db      	cbz	r3, 800fffc <_puts_r+0x78>
 800ffc4:	3e01      	subs	r6, #1
 800ffc6:	68a3      	ldr	r3, [r4, #8]
 800ffc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ffcc:	3b01      	subs	r3, #1
 800ffce:	60a3      	str	r3, [r4, #8]
 800ffd0:	bb39      	cbnz	r1, 8010022 <_puts_r+0x9e>
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	da38      	bge.n	8010048 <_puts_r+0xc4>
 800ffd6:	4622      	mov	r2, r4
 800ffd8:	210a      	movs	r1, #10
 800ffda:	4628      	mov	r0, r5
 800ffdc:	f000 ff1e 	bl	8010e1c <__swbuf_r>
 800ffe0:	3001      	adds	r0, #1
 800ffe2:	d011      	beq.n	8010008 <_puts_r+0x84>
 800ffe4:	250a      	movs	r5, #10
 800ffe6:	e011      	b.n	801000c <_puts_r+0x88>
 800ffe8:	4b1b      	ldr	r3, [pc, #108]	; (8010058 <_puts_r+0xd4>)
 800ffea:	429c      	cmp	r4, r3
 800ffec:	d101      	bne.n	800fff2 <_puts_r+0x6e>
 800ffee:	68ac      	ldr	r4, [r5, #8]
 800fff0:	e7da      	b.n	800ffa8 <_puts_r+0x24>
 800fff2:	4b1a      	ldr	r3, [pc, #104]	; (801005c <_puts_r+0xd8>)
 800fff4:	429c      	cmp	r4, r3
 800fff6:	bf08      	it	eq
 800fff8:	68ec      	ldreq	r4, [r5, #12]
 800fffa:	e7d5      	b.n	800ffa8 <_puts_r+0x24>
 800fffc:	4621      	mov	r1, r4
 800fffe:	4628      	mov	r0, r5
 8010000:	f000 ff70 	bl	8010ee4 <__swsetup_r>
 8010004:	2800      	cmp	r0, #0
 8010006:	d0dd      	beq.n	800ffc4 <_puts_r+0x40>
 8010008:	f04f 35ff 	mov.w	r5, #4294967295
 801000c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801000e:	07da      	lsls	r2, r3, #31
 8010010:	d405      	bmi.n	801001e <_puts_r+0x9a>
 8010012:	89a3      	ldrh	r3, [r4, #12]
 8010014:	059b      	lsls	r3, r3, #22
 8010016:	d402      	bmi.n	801001e <_puts_r+0x9a>
 8010018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801001a:	f7ff fe7d 	bl	800fd18 <__retarget_lock_release_recursive>
 801001e:	4628      	mov	r0, r5
 8010020:	bd70      	pop	{r4, r5, r6, pc}
 8010022:	2b00      	cmp	r3, #0
 8010024:	da04      	bge.n	8010030 <_puts_r+0xac>
 8010026:	69a2      	ldr	r2, [r4, #24]
 8010028:	429a      	cmp	r2, r3
 801002a:	dc06      	bgt.n	801003a <_puts_r+0xb6>
 801002c:	290a      	cmp	r1, #10
 801002e:	d004      	beq.n	801003a <_puts_r+0xb6>
 8010030:	6823      	ldr	r3, [r4, #0]
 8010032:	1c5a      	adds	r2, r3, #1
 8010034:	6022      	str	r2, [r4, #0]
 8010036:	7019      	strb	r1, [r3, #0]
 8010038:	e7c5      	b.n	800ffc6 <_puts_r+0x42>
 801003a:	4622      	mov	r2, r4
 801003c:	4628      	mov	r0, r5
 801003e:	f000 feed 	bl	8010e1c <__swbuf_r>
 8010042:	3001      	adds	r0, #1
 8010044:	d1bf      	bne.n	800ffc6 <_puts_r+0x42>
 8010046:	e7df      	b.n	8010008 <_puts_r+0x84>
 8010048:	6823      	ldr	r3, [r4, #0]
 801004a:	250a      	movs	r5, #10
 801004c:	1c5a      	adds	r2, r3, #1
 801004e:	6022      	str	r2, [r4, #0]
 8010050:	701d      	strb	r5, [r3, #0]
 8010052:	e7db      	b.n	801000c <_puts_r+0x88>
 8010054:	080146c8 	.word	0x080146c8
 8010058:	080146e8 	.word	0x080146e8
 801005c:	080146a8 	.word	0x080146a8

08010060 <puts>:
 8010060:	4b02      	ldr	r3, [pc, #8]	; (801006c <puts+0xc>)
 8010062:	4601      	mov	r1, r0
 8010064:	6818      	ldr	r0, [r3, #0]
 8010066:	f7ff bf8d 	b.w	800ff84 <_puts_r>
 801006a:	bf00      	nop
 801006c:	20000160 	.word	0x20000160

08010070 <realloc>:
 8010070:	4b02      	ldr	r3, [pc, #8]	; (801007c <realloc+0xc>)
 8010072:	460a      	mov	r2, r1
 8010074:	4601      	mov	r1, r0
 8010076:	6818      	ldr	r0, [r3, #0]
 8010078:	f002 b83e 	b.w	80120f8 <_realloc_r>
 801007c:	20000160 	.word	0x20000160

08010080 <_sbrk_r>:
 8010080:	b538      	push	{r3, r4, r5, lr}
 8010082:	4d06      	ldr	r5, [pc, #24]	; (801009c <_sbrk_r+0x1c>)
 8010084:	2300      	movs	r3, #0
 8010086:	4604      	mov	r4, r0
 8010088:	4608      	mov	r0, r1
 801008a:	602b      	str	r3, [r5, #0]
 801008c:	f7f2 fd20 	bl	8002ad0 <_sbrk>
 8010090:	1c43      	adds	r3, r0, #1
 8010092:	d102      	bne.n	801009a <_sbrk_r+0x1a>
 8010094:	682b      	ldr	r3, [r5, #0]
 8010096:	b103      	cbz	r3, 801009a <_sbrk_r+0x1a>
 8010098:	6023      	str	r3, [r4, #0]
 801009a:	bd38      	pop	{r3, r4, r5, pc}
 801009c:	20003414 	.word	0x20003414

080100a0 <sniprintf>:
 80100a0:	b40c      	push	{r2, r3}
 80100a2:	b530      	push	{r4, r5, lr}
 80100a4:	4b17      	ldr	r3, [pc, #92]	; (8010104 <sniprintf+0x64>)
 80100a6:	1e0c      	subs	r4, r1, #0
 80100a8:	681d      	ldr	r5, [r3, #0]
 80100aa:	b09d      	sub	sp, #116	; 0x74
 80100ac:	da08      	bge.n	80100c0 <sniprintf+0x20>
 80100ae:	238b      	movs	r3, #139	; 0x8b
 80100b0:	602b      	str	r3, [r5, #0]
 80100b2:	f04f 30ff 	mov.w	r0, #4294967295
 80100b6:	b01d      	add	sp, #116	; 0x74
 80100b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100bc:	b002      	add	sp, #8
 80100be:	4770      	bx	lr
 80100c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80100c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80100c8:	bf14      	ite	ne
 80100ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80100ce:	4623      	moveq	r3, r4
 80100d0:	9304      	str	r3, [sp, #16]
 80100d2:	9307      	str	r3, [sp, #28]
 80100d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80100d8:	9002      	str	r0, [sp, #8]
 80100da:	9006      	str	r0, [sp, #24]
 80100dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80100e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80100e2:	ab21      	add	r3, sp, #132	; 0x84
 80100e4:	a902      	add	r1, sp, #8
 80100e6:	4628      	mov	r0, r5
 80100e8:	9301      	str	r3, [sp, #4]
 80100ea:	f002 f887 	bl	80121fc <_svfiprintf_r>
 80100ee:	1c43      	adds	r3, r0, #1
 80100f0:	bfbc      	itt	lt
 80100f2:	238b      	movlt	r3, #139	; 0x8b
 80100f4:	602b      	strlt	r3, [r5, #0]
 80100f6:	2c00      	cmp	r4, #0
 80100f8:	d0dd      	beq.n	80100b6 <sniprintf+0x16>
 80100fa:	9b02      	ldr	r3, [sp, #8]
 80100fc:	2200      	movs	r2, #0
 80100fe:	701a      	strb	r2, [r3, #0]
 8010100:	e7d9      	b.n	80100b6 <sniprintf+0x16>
 8010102:	bf00      	nop
 8010104:	20000160 	.word	0x20000160

08010108 <__sread>:
 8010108:	b510      	push	{r4, lr}
 801010a:	460c      	mov	r4, r1
 801010c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010110:	f002 fc62 	bl	80129d8 <_read_r>
 8010114:	2800      	cmp	r0, #0
 8010116:	bfab      	itete	ge
 8010118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801011a:	89a3      	ldrhlt	r3, [r4, #12]
 801011c:	181b      	addge	r3, r3, r0
 801011e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010122:	bfac      	ite	ge
 8010124:	6563      	strge	r3, [r4, #84]	; 0x54
 8010126:	81a3      	strhlt	r3, [r4, #12]
 8010128:	bd10      	pop	{r4, pc}

0801012a <__swrite>:
 801012a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801012e:	461f      	mov	r7, r3
 8010130:	898b      	ldrh	r3, [r1, #12]
 8010132:	05db      	lsls	r3, r3, #23
 8010134:	4605      	mov	r5, r0
 8010136:	460c      	mov	r4, r1
 8010138:	4616      	mov	r6, r2
 801013a:	d505      	bpl.n	8010148 <__swrite+0x1e>
 801013c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010140:	2302      	movs	r3, #2
 8010142:	2200      	movs	r2, #0
 8010144:	f001 fade 	bl	8011704 <_lseek_r>
 8010148:	89a3      	ldrh	r3, [r4, #12]
 801014a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801014e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010152:	81a3      	strh	r3, [r4, #12]
 8010154:	4632      	mov	r2, r6
 8010156:	463b      	mov	r3, r7
 8010158:	4628      	mov	r0, r5
 801015a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801015e:	f000 beaf 	b.w	8010ec0 <_write_r>

08010162 <__sseek>:
 8010162:	b510      	push	{r4, lr}
 8010164:	460c      	mov	r4, r1
 8010166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801016a:	f001 facb 	bl	8011704 <_lseek_r>
 801016e:	1c43      	adds	r3, r0, #1
 8010170:	89a3      	ldrh	r3, [r4, #12]
 8010172:	bf15      	itete	ne
 8010174:	6560      	strne	r0, [r4, #84]	; 0x54
 8010176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801017a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801017e:	81a3      	strheq	r3, [r4, #12]
 8010180:	bf18      	it	ne
 8010182:	81a3      	strhne	r3, [r4, #12]
 8010184:	bd10      	pop	{r4, pc}

08010186 <__sclose>:
 8010186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801018a:	f000 bf19 	b.w	8010fc0 <_close_r>

0801018e <strncmp>:
 801018e:	b510      	push	{r4, lr}
 8010190:	b16a      	cbz	r2, 80101ae <strncmp+0x20>
 8010192:	3901      	subs	r1, #1
 8010194:	1884      	adds	r4, r0, r2
 8010196:	f810 3b01 	ldrb.w	r3, [r0], #1
 801019a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801019e:	4293      	cmp	r3, r2
 80101a0:	d103      	bne.n	80101aa <strncmp+0x1c>
 80101a2:	42a0      	cmp	r0, r4
 80101a4:	d001      	beq.n	80101aa <strncmp+0x1c>
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d1f5      	bne.n	8010196 <strncmp+0x8>
 80101aa:	1a98      	subs	r0, r3, r2
 80101ac:	bd10      	pop	{r4, pc}
 80101ae:	4610      	mov	r0, r2
 80101b0:	e7fc      	b.n	80101ac <strncmp+0x1e>

080101b2 <sulp>:
 80101b2:	b570      	push	{r4, r5, r6, lr}
 80101b4:	4604      	mov	r4, r0
 80101b6:	460d      	mov	r5, r1
 80101b8:	ec45 4b10 	vmov	d0, r4, r5
 80101bc:	4616      	mov	r6, r2
 80101be:	f001 fe3d 	bl	8011e3c <__ulp>
 80101c2:	ec51 0b10 	vmov	r0, r1, d0
 80101c6:	b17e      	cbz	r6, 80101e8 <sulp+0x36>
 80101c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80101cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	dd09      	ble.n	80101e8 <sulp+0x36>
 80101d4:	051b      	lsls	r3, r3, #20
 80101d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80101da:	2400      	movs	r4, #0
 80101dc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80101e0:	4622      	mov	r2, r4
 80101e2:	462b      	mov	r3, r5
 80101e4:	f7f0 fa20 	bl	8000628 <__aeabi_dmul>
 80101e8:	bd70      	pop	{r4, r5, r6, pc}
 80101ea:	0000      	movs	r0, r0
 80101ec:	0000      	movs	r0, r0
	...

080101f0 <_strtod_l>:
 80101f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f4:	b0a3      	sub	sp, #140	; 0x8c
 80101f6:	461f      	mov	r7, r3
 80101f8:	2300      	movs	r3, #0
 80101fa:	931e      	str	r3, [sp, #120]	; 0x78
 80101fc:	4ba4      	ldr	r3, [pc, #656]	; (8010490 <_strtod_l+0x2a0>)
 80101fe:	9219      	str	r2, [sp, #100]	; 0x64
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	9307      	str	r3, [sp, #28]
 8010204:	4604      	mov	r4, r0
 8010206:	4618      	mov	r0, r3
 8010208:	4688      	mov	r8, r1
 801020a:	f7ef fff3 	bl	80001f4 <strlen>
 801020e:	f04f 0a00 	mov.w	sl, #0
 8010212:	4605      	mov	r5, r0
 8010214:	f04f 0b00 	mov.w	fp, #0
 8010218:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801021c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801021e:	781a      	ldrb	r2, [r3, #0]
 8010220:	2a2b      	cmp	r2, #43	; 0x2b
 8010222:	d04c      	beq.n	80102be <_strtod_l+0xce>
 8010224:	d839      	bhi.n	801029a <_strtod_l+0xaa>
 8010226:	2a0d      	cmp	r2, #13
 8010228:	d832      	bhi.n	8010290 <_strtod_l+0xa0>
 801022a:	2a08      	cmp	r2, #8
 801022c:	d832      	bhi.n	8010294 <_strtod_l+0xa4>
 801022e:	2a00      	cmp	r2, #0
 8010230:	d03c      	beq.n	80102ac <_strtod_l+0xbc>
 8010232:	2300      	movs	r3, #0
 8010234:	930e      	str	r3, [sp, #56]	; 0x38
 8010236:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010238:	7833      	ldrb	r3, [r6, #0]
 801023a:	2b30      	cmp	r3, #48	; 0x30
 801023c:	f040 80b4 	bne.w	80103a8 <_strtod_l+0x1b8>
 8010240:	7873      	ldrb	r3, [r6, #1]
 8010242:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010246:	2b58      	cmp	r3, #88	; 0x58
 8010248:	d16c      	bne.n	8010324 <_strtod_l+0x134>
 801024a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801024c:	9301      	str	r3, [sp, #4]
 801024e:	ab1e      	add	r3, sp, #120	; 0x78
 8010250:	9702      	str	r7, [sp, #8]
 8010252:	9300      	str	r3, [sp, #0]
 8010254:	4a8f      	ldr	r2, [pc, #572]	; (8010494 <_strtod_l+0x2a4>)
 8010256:	ab1f      	add	r3, sp, #124	; 0x7c
 8010258:	a91d      	add	r1, sp, #116	; 0x74
 801025a:	4620      	mov	r0, r4
 801025c:	f000 ff3a 	bl	80110d4 <__gethex>
 8010260:	f010 0707 	ands.w	r7, r0, #7
 8010264:	4605      	mov	r5, r0
 8010266:	d005      	beq.n	8010274 <_strtod_l+0x84>
 8010268:	2f06      	cmp	r7, #6
 801026a:	d12a      	bne.n	80102c2 <_strtod_l+0xd2>
 801026c:	3601      	adds	r6, #1
 801026e:	2300      	movs	r3, #0
 8010270:	961d      	str	r6, [sp, #116]	; 0x74
 8010272:	930e      	str	r3, [sp, #56]	; 0x38
 8010274:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010276:	2b00      	cmp	r3, #0
 8010278:	f040 8596 	bne.w	8010da8 <_strtod_l+0xbb8>
 801027c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801027e:	b1db      	cbz	r3, 80102b8 <_strtod_l+0xc8>
 8010280:	4652      	mov	r2, sl
 8010282:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010286:	ec43 2b10 	vmov	d0, r2, r3
 801028a:	b023      	add	sp, #140	; 0x8c
 801028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010290:	2a20      	cmp	r2, #32
 8010292:	d1ce      	bne.n	8010232 <_strtod_l+0x42>
 8010294:	3301      	adds	r3, #1
 8010296:	931d      	str	r3, [sp, #116]	; 0x74
 8010298:	e7c0      	b.n	801021c <_strtod_l+0x2c>
 801029a:	2a2d      	cmp	r2, #45	; 0x2d
 801029c:	d1c9      	bne.n	8010232 <_strtod_l+0x42>
 801029e:	2201      	movs	r2, #1
 80102a0:	920e      	str	r2, [sp, #56]	; 0x38
 80102a2:	1c5a      	adds	r2, r3, #1
 80102a4:	921d      	str	r2, [sp, #116]	; 0x74
 80102a6:	785b      	ldrb	r3, [r3, #1]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d1c4      	bne.n	8010236 <_strtod_l+0x46>
 80102ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80102ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f040 8576 	bne.w	8010da4 <_strtod_l+0xbb4>
 80102b8:	4652      	mov	r2, sl
 80102ba:	465b      	mov	r3, fp
 80102bc:	e7e3      	b.n	8010286 <_strtod_l+0x96>
 80102be:	2200      	movs	r2, #0
 80102c0:	e7ee      	b.n	80102a0 <_strtod_l+0xb0>
 80102c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80102c4:	b13a      	cbz	r2, 80102d6 <_strtod_l+0xe6>
 80102c6:	2135      	movs	r1, #53	; 0x35
 80102c8:	a820      	add	r0, sp, #128	; 0x80
 80102ca:	f001 fec2 	bl	8012052 <__copybits>
 80102ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80102d0:	4620      	mov	r0, r4
 80102d2:	f001 fa87 	bl	80117e4 <_Bfree>
 80102d6:	3f01      	subs	r7, #1
 80102d8:	2f05      	cmp	r7, #5
 80102da:	d807      	bhi.n	80102ec <_strtod_l+0xfc>
 80102dc:	e8df f007 	tbb	[pc, r7]
 80102e0:	1d180b0e 	.word	0x1d180b0e
 80102e4:	030e      	.short	0x030e
 80102e6:	f04f 0b00 	mov.w	fp, #0
 80102ea:	46da      	mov	sl, fp
 80102ec:	0728      	lsls	r0, r5, #28
 80102ee:	d5c1      	bpl.n	8010274 <_strtod_l+0x84>
 80102f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80102f4:	e7be      	b.n	8010274 <_strtod_l+0x84>
 80102f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80102fa:	e7f7      	b.n	80102ec <_strtod_l+0xfc>
 80102fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010300:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010302:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010306:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801030a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801030e:	e7ed      	b.n	80102ec <_strtod_l+0xfc>
 8010310:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010498 <_strtod_l+0x2a8>
 8010314:	f04f 0a00 	mov.w	sl, #0
 8010318:	e7e8      	b.n	80102ec <_strtod_l+0xfc>
 801031a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801031e:	f04f 3aff 	mov.w	sl, #4294967295
 8010322:	e7e3      	b.n	80102ec <_strtod_l+0xfc>
 8010324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010326:	1c5a      	adds	r2, r3, #1
 8010328:	921d      	str	r2, [sp, #116]	; 0x74
 801032a:	785b      	ldrb	r3, [r3, #1]
 801032c:	2b30      	cmp	r3, #48	; 0x30
 801032e:	d0f9      	beq.n	8010324 <_strtod_l+0x134>
 8010330:	2b00      	cmp	r3, #0
 8010332:	d09f      	beq.n	8010274 <_strtod_l+0x84>
 8010334:	2301      	movs	r3, #1
 8010336:	f04f 0900 	mov.w	r9, #0
 801033a:	9304      	str	r3, [sp, #16]
 801033c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801033e:	930a      	str	r3, [sp, #40]	; 0x28
 8010340:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010344:	464f      	mov	r7, r9
 8010346:	220a      	movs	r2, #10
 8010348:	981d      	ldr	r0, [sp, #116]	; 0x74
 801034a:	7806      	ldrb	r6, [r0, #0]
 801034c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010350:	b2d9      	uxtb	r1, r3
 8010352:	2909      	cmp	r1, #9
 8010354:	d92a      	bls.n	80103ac <_strtod_l+0x1bc>
 8010356:	9907      	ldr	r1, [sp, #28]
 8010358:	462a      	mov	r2, r5
 801035a:	f7ff ff18 	bl	801018e <strncmp>
 801035e:	b398      	cbz	r0, 80103c8 <_strtod_l+0x1d8>
 8010360:	2000      	movs	r0, #0
 8010362:	4633      	mov	r3, r6
 8010364:	463d      	mov	r5, r7
 8010366:	9007      	str	r0, [sp, #28]
 8010368:	4602      	mov	r2, r0
 801036a:	2b65      	cmp	r3, #101	; 0x65
 801036c:	d001      	beq.n	8010372 <_strtod_l+0x182>
 801036e:	2b45      	cmp	r3, #69	; 0x45
 8010370:	d118      	bne.n	80103a4 <_strtod_l+0x1b4>
 8010372:	b91d      	cbnz	r5, 801037c <_strtod_l+0x18c>
 8010374:	9b04      	ldr	r3, [sp, #16]
 8010376:	4303      	orrs	r3, r0
 8010378:	d098      	beq.n	80102ac <_strtod_l+0xbc>
 801037a:	2500      	movs	r5, #0
 801037c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010380:	f108 0301 	add.w	r3, r8, #1
 8010384:	931d      	str	r3, [sp, #116]	; 0x74
 8010386:	f898 3001 	ldrb.w	r3, [r8, #1]
 801038a:	2b2b      	cmp	r3, #43	; 0x2b
 801038c:	d075      	beq.n	801047a <_strtod_l+0x28a>
 801038e:	2b2d      	cmp	r3, #45	; 0x2d
 8010390:	d07b      	beq.n	801048a <_strtod_l+0x29a>
 8010392:	f04f 0c00 	mov.w	ip, #0
 8010396:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801039a:	2909      	cmp	r1, #9
 801039c:	f240 8082 	bls.w	80104a4 <_strtod_l+0x2b4>
 80103a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80103a4:	2600      	movs	r6, #0
 80103a6:	e09d      	b.n	80104e4 <_strtod_l+0x2f4>
 80103a8:	2300      	movs	r3, #0
 80103aa:	e7c4      	b.n	8010336 <_strtod_l+0x146>
 80103ac:	2f08      	cmp	r7, #8
 80103ae:	bfd8      	it	le
 80103b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80103b2:	f100 0001 	add.w	r0, r0, #1
 80103b6:	bfda      	itte	le
 80103b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80103bc:	9309      	strle	r3, [sp, #36]	; 0x24
 80103be:	fb02 3909 	mlagt	r9, r2, r9, r3
 80103c2:	3701      	adds	r7, #1
 80103c4:	901d      	str	r0, [sp, #116]	; 0x74
 80103c6:	e7bf      	b.n	8010348 <_strtod_l+0x158>
 80103c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80103ca:	195a      	adds	r2, r3, r5
 80103cc:	921d      	str	r2, [sp, #116]	; 0x74
 80103ce:	5d5b      	ldrb	r3, [r3, r5]
 80103d0:	2f00      	cmp	r7, #0
 80103d2:	d037      	beq.n	8010444 <_strtod_l+0x254>
 80103d4:	9007      	str	r0, [sp, #28]
 80103d6:	463d      	mov	r5, r7
 80103d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80103dc:	2a09      	cmp	r2, #9
 80103de:	d912      	bls.n	8010406 <_strtod_l+0x216>
 80103e0:	2201      	movs	r2, #1
 80103e2:	e7c2      	b.n	801036a <_strtod_l+0x17a>
 80103e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80103e6:	1c5a      	adds	r2, r3, #1
 80103e8:	921d      	str	r2, [sp, #116]	; 0x74
 80103ea:	785b      	ldrb	r3, [r3, #1]
 80103ec:	3001      	adds	r0, #1
 80103ee:	2b30      	cmp	r3, #48	; 0x30
 80103f0:	d0f8      	beq.n	80103e4 <_strtod_l+0x1f4>
 80103f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80103f6:	2a08      	cmp	r2, #8
 80103f8:	f200 84db 	bhi.w	8010db2 <_strtod_l+0xbc2>
 80103fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80103fe:	9007      	str	r0, [sp, #28]
 8010400:	2000      	movs	r0, #0
 8010402:	920a      	str	r2, [sp, #40]	; 0x28
 8010404:	4605      	mov	r5, r0
 8010406:	3b30      	subs	r3, #48	; 0x30
 8010408:	f100 0201 	add.w	r2, r0, #1
 801040c:	d014      	beq.n	8010438 <_strtod_l+0x248>
 801040e:	9907      	ldr	r1, [sp, #28]
 8010410:	4411      	add	r1, r2
 8010412:	9107      	str	r1, [sp, #28]
 8010414:	462a      	mov	r2, r5
 8010416:	eb00 0e05 	add.w	lr, r0, r5
 801041a:	210a      	movs	r1, #10
 801041c:	4572      	cmp	r2, lr
 801041e:	d113      	bne.n	8010448 <_strtod_l+0x258>
 8010420:	182a      	adds	r2, r5, r0
 8010422:	2a08      	cmp	r2, #8
 8010424:	f105 0501 	add.w	r5, r5, #1
 8010428:	4405      	add	r5, r0
 801042a:	dc1c      	bgt.n	8010466 <_strtod_l+0x276>
 801042c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801042e:	220a      	movs	r2, #10
 8010430:	fb02 3301 	mla	r3, r2, r1, r3
 8010434:	9309      	str	r3, [sp, #36]	; 0x24
 8010436:	2200      	movs	r2, #0
 8010438:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801043a:	1c59      	adds	r1, r3, #1
 801043c:	911d      	str	r1, [sp, #116]	; 0x74
 801043e:	785b      	ldrb	r3, [r3, #1]
 8010440:	4610      	mov	r0, r2
 8010442:	e7c9      	b.n	80103d8 <_strtod_l+0x1e8>
 8010444:	4638      	mov	r0, r7
 8010446:	e7d2      	b.n	80103ee <_strtod_l+0x1fe>
 8010448:	2a08      	cmp	r2, #8
 801044a:	dc04      	bgt.n	8010456 <_strtod_l+0x266>
 801044c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801044e:	434e      	muls	r6, r1
 8010450:	9609      	str	r6, [sp, #36]	; 0x24
 8010452:	3201      	adds	r2, #1
 8010454:	e7e2      	b.n	801041c <_strtod_l+0x22c>
 8010456:	f102 0c01 	add.w	ip, r2, #1
 801045a:	f1bc 0f10 	cmp.w	ip, #16
 801045e:	bfd8      	it	le
 8010460:	fb01 f909 	mulle.w	r9, r1, r9
 8010464:	e7f5      	b.n	8010452 <_strtod_l+0x262>
 8010466:	2d10      	cmp	r5, #16
 8010468:	bfdc      	itt	le
 801046a:	220a      	movle	r2, #10
 801046c:	fb02 3909 	mlale	r9, r2, r9, r3
 8010470:	e7e1      	b.n	8010436 <_strtod_l+0x246>
 8010472:	2300      	movs	r3, #0
 8010474:	9307      	str	r3, [sp, #28]
 8010476:	2201      	movs	r2, #1
 8010478:	e77c      	b.n	8010374 <_strtod_l+0x184>
 801047a:	f04f 0c00 	mov.w	ip, #0
 801047e:	f108 0302 	add.w	r3, r8, #2
 8010482:	931d      	str	r3, [sp, #116]	; 0x74
 8010484:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010488:	e785      	b.n	8010396 <_strtod_l+0x1a6>
 801048a:	f04f 0c01 	mov.w	ip, #1
 801048e:	e7f6      	b.n	801047e <_strtod_l+0x28e>
 8010490:	080147e4 	.word	0x080147e4
 8010494:	08014718 	.word	0x08014718
 8010498:	7ff00000 	.word	0x7ff00000
 801049c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801049e:	1c59      	adds	r1, r3, #1
 80104a0:	911d      	str	r1, [sp, #116]	; 0x74
 80104a2:	785b      	ldrb	r3, [r3, #1]
 80104a4:	2b30      	cmp	r3, #48	; 0x30
 80104a6:	d0f9      	beq.n	801049c <_strtod_l+0x2ac>
 80104a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80104ac:	2908      	cmp	r1, #8
 80104ae:	f63f af79 	bhi.w	80103a4 <_strtod_l+0x1b4>
 80104b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80104b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80104b8:	9308      	str	r3, [sp, #32]
 80104ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80104bc:	1c59      	adds	r1, r3, #1
 80104be:	911d      	str	r1, [sp, #116]	; 0x74
 80104c0:	785b      	ldrb	r3, [r3, #1]
 80104c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80104c6:	2e09      	cmp	r6, #9
 80104c8:	d937      	bls.n	801053a <_strtod_l+0x34a>
 80104ca:	9e08      	ldr	r6, [sp, #32]
 80104cc:	1b89      	subs	r1, r1, r6
 80104ce:	2908      	cmp	r1, #8
 80104d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80104d4:	dc02      	bgt.n	80104dc <_strtod_l+0x2ec>
 80104d6:	4576      	cmp	r6, lr
 80104d8:	bfa8      	it	ge
 80104da:	4676      	movge	r6, lr
 80104dc:	f1bc 0f00 	cmp.w	ip, #0
 80104e0:	d000      	beq.n	80104e4 <_strtod_l+0x2f4>
 80104e2:	4276      	negs	r6, r6
 80104e4:	2d00      	cmp	r5, #0
 80104e6:	d14f      	bne.n	8010588 <_strtod_l+0x398>
 80104e8:	9904      	ldr	r1, [sp, #16]
 80104ea:	4301      	orrs	r1, r0
 80104ec:	f47f aec2 	bne.w	8010274 <_strtod_l+0x84>
 80104f0:	2a00      	cmp	r2, #0
 80104f2:	f47f aedb 	bne.w	80102ac <_strtod_l+0xbc>
 80104f6:	2b69      	cmp	r3, #105	; 0x69
 80104f8:	d027      	beq.n	801054a <_strtod_l+0x35a>
 80104fa:	dc24      	bgt.n	8010546 <_strtod_l+0x356>
 80104fc:	2b49      	cmp	r3, #73	; 0x49
 80104fe:	d024      	beq.n	801054a <_strtod_l+0x35a>
 8010500:	2b4e      	cmp	r3, #78	; 0x4e
 8010502:	f47f aed3 	bne.w	80102ac <_strtod_l+0xbc>
 8010506:	499e      	ldr	r1, [pc, #632]	; (8010780 <_strtod_l+0x590>)
 8010508:	a81d      	add	r0, sp, #116	; 0x74
 801050a:	f001 f83b 	bl	8011584 <__match>
 801050e:	2800      	cmp	r0, #0
 8010510:	f43f aecc 	beq.w	80102ac <_strtod_l+0xbc>
 8010514:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	2b28      	cmp	r3, #40	; 0x28
 801051a:	d12d      	bne.n	8010578 <_strtod_l+0x388>
 801051c:	4999      	ldr	r1, [pc, #612]	; (8010784 <_strtod_l+0x594>)
 801051e:	aa20      	add	r2, sp, #128	; 0x80
 8010520:	a81d      	add	r0, sp, #116	; 0x74
 8010522:	f001 f843 	bl	80115ac <__hexnan>
 8010526:	2805      	cmp	r0, #5
 8010528:	d126      	bne.n	8010578 <_strtod_l+0x388>
 801052a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801052c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010530:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010534:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010538:	e69c      	b.n	8010274 <_strtod_l+0x84>
 801053a:	210a      	movs	r1, #10
 801053c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010540:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010544:	e7b9      	b.n	80104ba <_strtod_l+0x2ca>
 8010546:	2b6e      	cmp	r3, #110	; 0x6e
 8010548:	e7db      	b.n	8010502 <_strtod_l+0x312>
 801054a:	498f      	ldr	r1, [pc, #572]	; (8010788 <_strtod_l+0x598>)
 801054c:	a81d      	add	r0, sp, #116	; 0x74
 801054e:	f001 f819 	bl	8011584 <__match>
 8010552:	2800      	cmp	r0, #0
 8010554:	f43f aeaa 	beq.w	80102ac <_strtod_l+0xbc>
 8010558:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801055a:	498c      	ldr	r1, [pc, #560]	; (801078c <_strtod_l+0x59c>)
 801055c:	3b01      	subs	r3, #1
 801055e:	a81d      	add	r0, sp, #116	; 0x74
 8010560:	931d      	str	r3, [sp, #116]	; 0x74
 8010562:	f001 f80f 	bl	8011584 <__match>
 8010566:	b910      	cbnz	r0, 801056e <_strtod_l+0x37e>
 8010568:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801056a:	3301      	adds	r3, #1
 801056c:	931d      	str	r3, [sp, #116]	; 0x74
 801056e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801079c <_strtod_l+0x5ac>
 8010572:	f04f 0a00 	mov.w	sl, #0
 8010576:	e67d      	b.n	8010274 <_strtod_l+0x84>
 8010578:	4885      	ldr	r0, [pc, #532]	; (8010790 <_strtod_l+0x5a0>)
 801057a:	f002 fa41 	bl	8012a00 <nan>
 801057e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010582:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010586:	e675      	b.n	8010274 <_strtod_l+0x84>
 8010588:	9b07      	ldr	r3, [sp, #28]
 801058a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801058c:	1af3      	subs	r3, r6, r3
 801058e:	2f00      	cmp	r7, #0
 8010590:	bf08      	it	eq
 8010592:	462f      	moveq	r7, r5
 8010594:	2d10      	cmp	r5, #16
 8010596:	9308      	str	r3, [sp, #32]
 8010598:	46a8      	mov	r8, r5
 801059a:	bfa8      	it	ge
 801059c:	f04f 0810 	movge.w	r8, #16
 80105a0:	f7ef ffc8 	bl	8000534 <__aeabi_ui2d>
 80105a4:	2d09      	cmp	r5, #9
 80105a6:	4682      	mov	sl, r0
 80105a8:	468b      	mov	fp, r1
 80105aa:	dd13      	ble.n	80105d4 <_strtod_l+0x3e4>
 80105ac:	4b79      	ldr	r3, [pc, #484]	; (8010794 <_strtod_l+0x5a4>)
 80105ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80105b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80105b6:	f7f0 f837 	bl	8000628 <__aeabi_dmul>
 80105ba:	4682      	mov	sl, r0
 80105bc:	4648      	mov	r0, r9
 80105be:	468b      	mov	fp, r1
 80105c0:	f7ef ffb8 	bl	8000534 <__aeabi_ui2d>
 80105c4:	4602      	mov	r2, r0
 80105c6:	460b      	mov	r3, r1
 80105c8:	4650      	mov	r0, sl
 80105ca:	4659      	mov	r1, fp
 80105cc:	f7ef fe76 	bl	80002bc <__adddf3>
 80105d0:	4682      	mov	sl, r0
 80105d2:	468b      	mov	fp, r1
 80105d4:	2d0f      	cmp	r5, #15
 80105d6:	dc38      	bgt.n	801064a <_strtod_l+0x45a>
 80105d8:	9b08      	ldr	r3, [sp, #32]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f43f ae4a 	beq.w	8010274 <_strtod_l+0x84>
 80105e0:	dd24      	ble.n	801062c <_strtod_l+0x43c>
 80105e2:	2b16      	cmp	r3, #22
 80105e4:	dc0b      	bgt.n	80105fe <_strtod_l+0x40e>
 80105e6:	4d6b      	ldr	r5, [pc, #428]	; (8010794 <_strtod_l+0x5a4>)
 80105e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80105ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80105f0:	4652      	mov	r2, sl
 80105f2:	465b      	mov	r3, fp
 80105f4:	f7f0 f818 	bl	8000628 <__aeabi_dmul>
 80105f8:	4682      	mov	sl, r0
 80105fa:	468b      	mov	fp, r1
 80105fc:	e63a      	b.n	8010274 <_strtod_l+0x84>
 80105fe:	9a08      	ldr	r2, [sp, #32]
 8010600:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010604:	4293      	cmp	r3, r2
 8010606:	db20      	blt.n	801064a <_strtod_l+0x45a>
 8010608:	4c62      	ldr	r4, [pc, #392]	; (8010794 <_strtod_l+0x5a4>)
 801060a:	f1c5 050f 	rsb	r5, r5, #15
 801060e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010612:	4652      	mov	r2, sl
 8010614:	465b      	mov	r3, fp
 8010616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801061a:	f7f0 f805 	bl	8000628 <__aeabi_dmul>
 801061e:	9b08      	ldr	r3, [sp, #32]
 8010620:	1b5d      	subs	r5, r3, r5
 8010622:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010626:	e9d4 2300 	ldrd	r2, r3, [r4]
 801062a:	e7e3      	b.n	80105f4 <_strtod_l+0x404>
 801062c:	9b08      	ldr	r3, [sp, #32]
 801062e:	3316      	adds	r3, #22
 8010630:	db0b      	blt.n	801064a <_strtod_l+0x45a>
 8010632:	9b07      	ldr	r3, [sp, #28]
 8010634:	4a57      	ldr	r2, [pc, #348]	; (8010794 <_strtod_l+0x5a4>)
 8010636:	1b9e      	subs	r6, r3, r6
 8010638:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801063c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010640:	4650      	mov	r0, sl
 8010642:	4659      	mov	r1, fp
 8010644:	f7f0 f91a 	bl	800087c <__aeabi_ddiv>
 8010648:	e7d6      	b.n	80105f8 <_strtod_l+0x408>
 801064a:	9b08      	ldr	r3, [sp, #32]
 801064c:	eba5 0808 	sub.w	r8, r5, r8
 8010650:	4498      	add	r8, r3
 8010652:	f1b8 0f00 	cmp.w	r8, #0
 8010656:	dd71      	ble.n	801073c <_strtod_l+0x54c>
 8010658:	f018 030f 	ands.w	r3, r8, #15
 801065c:	d00a      	beq.n	8010674 <_strtod_l+0x484>
 801065e:	494d      	ldr	r1, [pc, #308]	; (8010794 <_strtod_l+0x5a4>)
 8010660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010664:	4652      	mov	r2, sl
 8010666:	465b      	mov	r3, fp
 8010668:	e9d1 0100 	ldrd	r0, r1, [r1]
 801066c:	f7ef ffdc 	bl	8000628 <__aeabi_dmul>
 8010670:	4682      	mov	sl, r0
 8010672:	468b      	mov	fp, r1
 8010674:	f038 080f 	bics.w	r8, r8, #15
 8010678:	d04d      	beq.n	8010716 <_strtod_l+0x526>
 801067a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801067e:	dd22      	ble.n	80106c6 <_strtod_l+0x4d6>
 8010680:	2500      	movs	r5, #0
 8010682:	462e      	mov	r6, r5
 8010684:	9509      	str	r5, [sp, #36]	; 0x24
 8010686:	9507      	str	r5, [sp, #28]
 8010688:	2322      	movs	r3, #34	; 0x22
 801068a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801079c <_strtod_l+0x5ac>
 801068e:	6023      	str	r3, [r4, #0]
 8010690:	f04f 0a00 	mov.w	sl, #0
 8010694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010696:	2b00      	cmp	r3, #0
 8010698:	f43f adec 	beq.w	8010274 <_strtod_l+0x84>
 801069c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801069e:	4620      	mov	r0, r4
 80106a0:	f001 f8a0 	bl	80117e4 <_Bfree>
 80106a4:	9907      	ldr	r1, [sp, #28]
 80106a6:	4620      	mov	r0, r4
 80106a8:	f001 f89c 	bl	80117e4 <_Bfree>
 80106ac:	4631      	mov	r1, r6
 80106ae:	4620      	mov	r0, r4
 80106b0:	f001 f898 	bl	80117e4 <_Bfree>
 80106b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106b6:	4620      	mov	r0, r4
 80106b8:	f001 f894 	bl	80117e4 <_Bfree>
 80106bc:	4629      	mov	r1, r5
 80106be:	4620      	mov	r0, r4
 80106c0:	f001 f890 	bl	80117e4 <_Bfree>
 80106c4:	e5d6      	b.n	8010274 <_strtod_l+0x84>
 80106c6:	2300      	movs	r3, #0
 80106c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80106cc:	4650      	mov	r0, sl
 80106ce:	4659      	mov	r1, fp
 80106d0:	4699      	mov	r9, r3
 80106d2:	f1b8 0f01 	cmp.w	r8, #1
 80106d6:	dc21      	bgt.n	801071c <_strtod_l+0x52c>
 80106d8:	b10b      	cbz	r3, 80106de <_strtod_l+0x4ee>
 80106da:	4682      	mov	sl, r0
 80106dc:	468b      	mov	fp, r1
 80106de:	4b2e      	ldr	r3, [pc, #184]	; (8010798 <_strtod_l+0x5a8>)
 80106e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80106e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80106e8:	4652      	mov	r2, sl
 80106ea:	465b      	mov	r3, fp
 80106ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 80106f0:	f7ef ff9a 	bl	8000628 <__aeabi_dmul>
 80106f4:	4b29      	ldr	r3, [pc, #164]	; (801079c <_strtod_l+0x5ac>)
 80106f6:	460a      	mov	r2, r1
 80106f8:	400b      	ands	r3, r1
 80106fa:	4929      	ldr	r1, [pc, #164]	; (80107a0 <_strtod_l+0x5b0>)
 80106fc:	428b      	cmp	r3, r1
 80106fe:	4682      	mov	sl, r0
 8010700:	d8be      	bhi.n	8010680 <_strtod_l+0x490>
 8010702:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010706:	428b      	cmp	r3, r1
 8010708:	bf86      	itte	hi
 801070a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80107a4 <_strtod_l+0x5b4>
 801070e:	f04f 3aff 	movhi.w	sl, #4294967295
 8010712:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010716:	2300      	movs	r3, #0
 8010718:	9304      	str	r3, [sp, #16]
 801071a:	e081      	b.n	8010820 <_strtod_l+0x630>
 801071c:	f018 0f01 	tst.w	r8, #1
 8010720:	d007      	beq.n	8010732 <_strtod_l+0x542>
 8010722:	4b1d      	ldr	r3, [pc, #116]	; (8010798 <_strtod_l+0x5a8>)
 8010724:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072c:	f7ef ff7c 	bl	8000628 <__aeabi_dmul>
 8010730:	2301      	movs	r3, #1
 8010732:	f109 0901 	add.w	r9, r9, #1
 8010736:	ea4f 0868 	mov.w	r8, r8, asr #1
 801073a:	e7ca      	b.n	80106d2 <_strtod_l+0x4e2>
 801073c:	d0eb      	beq.n	8010716 <_strtod_l+0x526>
 801073e:	f1c8 0800 	rsb	r8, r8, #0
 8010742:	f018 020f 	ands.w	r2, r8, #15
 8010746:	d00a      	beq.n	801075e <_strtod_l+0x56e>
 8010748:	4b12      	ldr	r3, [pc, #72]	; (8010794 <_strtod_l+0x5a4>)
 801074a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801074e:	4650      	mov	r0, sl
 8010750:	4659      	mov	r1, fp
 8010752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010756:	f7f0 f891 	bl	800087c <__aeabi_ddiv>
 801075a:	4682      	mov	sl, r0
 801075c:	468b      	mov	fp, r1
 801075e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010762:	d0d8      	beq.n	8010716 <_strtod_l+0x526>
 8010764:	f1b8 0f1f 	cmp.w	r8, #31
 8010768:	dd1e      	ble.n	80107a8 <_strtod_l+0x5b8>
 801076a:	2500      	movs	r5, #0
 801076c:	462e      	mov	r6, r5
 801076e:	9509      	str	r5, [sp, #36]	; 0x24
 8010770:	9507      	str	r5, [sp, #28]
 8010772:	2322      	movs	r3, #34	; 0x22
 8010774:	f04f 0a00 	mov.w	sl, #0
 8010778:	f04f 0b00 	mov.w	fp, #0
 801077c:	6023      	str	r3, [r4, #0]
 801077e:	e789      	b.n	8010694 <_strtod_l+0x4a4>
 8010780:	08014715 	.word	0x08014715
 8010784:	0801472c 	.word	0x0801472c
 8010788:	0801470c 	.word	0x0801470c
 801078c:	0801470f 	.word	0x0801470f
 8010790:	080149da 	.word	0x080149da
 8010794:	08014898 	.word	0x08014898
 8010798:	08014870 	.word	0x08014870
 801079c:	7ff00000 	.word	0x7ff00000
 80107a0:	7ca00000 	.word	0x7ca00000
 80107a4:	7fefffff 	.word	0x7fefffff
 80107a8:	f018 0310 	ands.w	r3, r8, #16
 80107ac:	bf18      	it	ne
 80107ae:	236a      	movne	r3, #106	; 0x6a
 80107b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010b68 <_strtod_l+0x978>
 80107b4:	9304      	str	r3, [sp, #16]
 80107b6:	4650      	mov	r0, sl
 80107b8:	4659      	mov	r1, fp
 80107ba:	2300      	movs	r3, #0
 80107bc:	f018 0f01 	tst.w	r8, #1
 80107c0:	d004      	beq.n	80107cc <_strtod_l+0x5dc>
 80107c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80107c6:	f7ef ff2f 	bl	8000628 <__aeabi_dmul>
 80107ca:	2301      	movs	r3, #1
 80107cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80107d0:	f109 0908 	add.w	r9, r9, #8
 80107d4:	d1f2      	bne.n	80107bc <_strtod_l+0x5cc>
 80107d6:	b10b      	cbz	r3, 80107dc <_strtod_l+0x5ec>
 80107d8:	4682      	mov	sl, r0
 80107da:	468b      	mov	fp, r1
 80107dc:	9b04      	ldr	r3, [sp, #16]
 80107de:	b1bb      	cbz	r3, 8010810 <_strtod_l+0x620>
 80107e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80107e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	4659      	mov	r1, fp
 80107ec:	dd10      	ble.n	8010810 <_strtod_l+0x620>
 80107ee:	2b1f      	cmp	r3, #31
 80107f0:	f340 8128 	ble.w	8010a44 <_strtod_l+0x854>
 80107f4:	2b34      	cmp	r3, #52	; 0x34
 80107f6:	bfde      	ittt	le
 80107f8:	3b20      	suble	r3, #32
 80107fa:	f04f 32ff 	movle.w	r2, #4294967295
 80107fe:	fa02 f303 	lslle.w	r3, r2, r3
 8010802:	f04f 0a00 	mov.w	sl, #0
 8010806:	bfcc      	ite	gt
 8010808:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801080c:	ea03 0b01 	andle.w	fp, r3, r1
 8010810:	2200      	movs	r2, #0
 8010812:	2300      	movs	r3, #0
 8010814:	4650      	mov	r0, sl
 8010816:	4659      	mov	r1, fp
 8010818:	f7f0 f96e 	bl	8000af8 <__aeabi_dcmpeq>
 801081c:	2800      	cmp	r0, #0
 801081e:	d1a4      	bne.n	801076a <_strtod_l+0x57a>
 8010820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010826:	462b      	mov	r3, r5
 8010828:	463a      	mov	r2, r7
 801082a:	4620      	mov	r0, r4
 801082c:	f001 f846 	bl	80118bc <__s2b>
 8010830:	9009      	str	r0, [sp, #36]	; 0x24
 8010832:	2800      	cmp	r0, #0
 8010834:	f43f af24 	beq.w	8010680 <_strtod_l+0x490>
 8010838:	9b07      	ldr	r3, [sp, #28]
 801083a:	1b9e      	subs	r6, r3, r6
 801083c:	9b08      	ldr	r3, [sp, #32]
 801083e:	2b00      	cmp	r3, #0
 8010840:	bfb4      	ite	lt
 8010842:	4633      	movlt	r3, r6
 8010844:	2300      	movge	r3, #0
 8010846:	9310      	str	r3, [sp, #64]	; 0x40
 8010848:	9b08      	ldr	r3, [sp, #32]
 801084a:	2500      	movs	r5, #0
 801084c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010850:	9318      	str	r3, [sp, #96]	; 0x60
 8010852:	462e      	mov	r6, r5
 8010854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010856:	4620      	mov	r0, r4
 8010858:	6859      	ldr	r1, [r3, #4]
 801085a:	f000 ff83 	bl	8011764 <_Balloc>
 801085e:	9007      	str	r0, [sp, #28]
 8010860:	2800      	cmp	r0, #0
 8010862:	f43f af11 	beq.w	8010688 <_strtod_l+0x498>
 8010866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010868:	691a      	ldr	r2, [r3, #16]
 801086a:	3202      	adds	r2, #2
 801086c:	f103 010c 	add.w	r1, r3, #12
 8010870:	0092      	lsls	r2, r2, #2
 8010872:	300c      	adds	r0, #12
 8010874:	f7ff fac6 	bl	800fe04 <memcpy>
 8010878:	ec4b ab10 	vmov	d0, sl, fp
 801087c:	aa20      	add	r2, sp, #128	; 0x80
 801087e:	a91f      	add	r1, sp, #124	; 0x7c
 8010880:	4620      	mov	r0, r4
 8010882:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010886:	f001 fb55 	bl	8011f34 <__d2b>
 801088a:	901e      	str	r0, [sp, #120]	; 0x78
 801088c:	2800      	cmp	r0, #0
 801088e:	f43f aefb 	beq.w	8010688 <_strtod_l+0x498>
 8010892:	2101      	movs	r1, #1
 8010894:	4620      	mov	r0, r4
 8010896:	f001 f8ab 	bl	80119f0 <__i2b>
 801089a:	4606      	mov	r6, r0
 801089c:	2800      	cmp	r0, #0
 801089e:	f43f aef3 	beq.w	8010688 <_strtod_l+0x498>
 80108a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80108a4:	9904      	ldr	r1, [sp, #16]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	bfab      	itete	ge
 80108aa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80108ac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80108ae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80108b0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80108b4:	bfac      	ite	ge
 80108b6:	eb03 0902 	addge.w	r9, r3, r2
 80108ba:	1ad7      	sublt	r7, r2, r3
 80108bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80108be:	eba3 0801 	sub.w	r8, r3, r1
 80108c2:	4490      	add	r8, r2
 80108c4:	4ba3      	ldr	r3, [pc, #652]	; (8010b54 <_strtod_l+0x964>)
 80108c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80108ca:	4598      	cmp	r8, r3
 80108cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80108d0:	f280 80cc 	bge.w	8010a6c <_strtod_l+0x87c>
 80108d4:	eba3 0308 	sub.w	r3, r3, r8
 80108d8:	2b1f      	cmp	r3, #31
 80108da:	eba2 0203 	sub.w	r2, r2, r3
 80108de:	f04f 0101 	mov.w	r1, #1
 80108e2:	f300 80b6 	bgt.w	8010a52 <_strtod_l+0x862>
 80108e6:	fa01 f303 	lsl.w	r3, r1, r3
 80108ea:	9311      	str	r3, [sp, #68]	; 0x44
 80108ec:	2300      	movs	r3, #0
 80108ee:	930c      	str	r3, [sp, #48]	; 0x30
 80108f0:	eb09 0802 	add.w	r8, r9, r2
 80108f4:	9b04      	ldr	r3, [sp, #16]
 80108f6:	45c1      	cmp	r9, r8
 80108f8:	4417      	add	r7, r2
 80108fa:	441f      	add	r7, r3
 80108fc:	464b      	mov	r3, r9
 80108fe:	bfa8      	it	ge
 8010900:	4643      	movge	r3, r8
 8010902:	42bb      	cmp	r3, r7
 8010904:	bfa8      	it	ge
 8010906:	463b      	movge	r3, r7
 8010908:	2b00      	cmp	r3, #0
 801090a:	bfc2      	ittt	gt
 801090c:	eba8 0803 	subgt.w	r8, r8, r3
 8010910:	1aff      	subgt	r7, r7, r3
 8010912:	eba9 0903 	subgt.w	r9, r9, r3
 8010916:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010918:	2b00      	cmp	r3, #0
 801091a:	dd17      	ble.n	801094c <_strtod_l+0x75c>
 801091c:	4631      	mov	r1, r6
 801091e:	461a      	mov	r2, r3
 8010920:	4620      	mov	r0, r4
 8010922:	f001 f921 	bl	8011b68 <__pow5mult>
 8010926:	4606      	mov	r6, r0
 8010928:	2800      	cmp	r0, #0
 801092a:	f43f aead 	beq.w	8010688 <_strtod_l+0x498>
 801092e:	4601      	mov	r1, r0
 8010930:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010932:	4620      	mov	r0, r4
 8010934:	f001 f872 	bl	8011a1c <__multiply>
 8010938:	900f      	str	r0, [sp, #60]	; 0x3c
 801093a:	2800      	cmp	r0, #0
 801093c:	f43f aea4 	beq.w	8010688 <_strtod_l+0x498>
 8010940:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010942:	4620      	mov	r0, r4
 8010944:	f000 ff4e 	bl	80117e4 <_Bfree>
 8010948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801094a:	931e      	str	r3, [sp, #120]	; 0x78
 801094c:	f1b8 0f00 	cmp.w	r8, #0
 8010950:	f300 8091 	bgt.w	8010a76 <_strtod_l+0x886>
 8010954:	9b08      	ldr	r3, [sp, #32]
 8010956:	2b00      	cmp	r3, #0
 8010958:	dd08      	ble.n	801096c <_strtod_l+0x77c>
 801095a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801095c:	9907      	ldr	r1, [sp, #28]
 801095e:	4620      	mov	r0, r4
 8010960:	f001 f902 	bl	8011b68 <__pow5mult>
 8010964:	9007      	str	r0, [sp, #28]
 8010966:	2800      	cmp	r0, #0
 8010968:	f43f ae8e 	beq.w	8010688 <_strtod_l+0x498>
 801096c:	2f00      	cmp	r7, #0
 801096e:	dd08      	ble.n	8010982 <_strtod_l+0x792>
 8010970:	9907      	ldr	r1, [sp, #28]
 8010972:	463a      	mov	r2, r7
 8010974:	4620      	mov	r0, r4
 8010976:	f001 f951 	bl	8011c1c <__lshift>
 801097a:	9007      	str	r0, [sp, #28]
 801097c:	2800      	cmp	r0, #0
 801097e:	f43f ae83 	beq.w	8010688 <_strtod_l+0x498>
 8010982:	f1b9 0f00 	cmp.w	r9, #0
 8010986:	dd08      	ble.n	801099a <_strtod_l+0x7aa>
 8010988:	4631      	mov	r1, r6
 801098a:	464a      	mov	r2, r9
 801098c:	4620      	mov	r0, r4
 801098e:	f001 f945 	bl	8011c1c <__lshift>
 8010992:	4606      	mov	r6, r0
 8010994:	2800      	cmp	r0, #0
 8010996:	f43f ae77 	beq.w	8010688 <_strtod_l+0x498>
 801099a:	9a07      	ldr	r2, [sp, #28]
 801099c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801099e:	4620      	mov	r0, r4
 80109a0:	f001 f9c4 	bl	8011d2c <__mdiff>
 80109a4:	4605      	mov	r5, r0
 80109a6:	2800      	cmp	r0, #0
 80109a8:	f43f ae6e 	beq.w	8010688 <_strtod_l+0x498>
 80109ac:	68c3      	ldr	r3, [r0, #12]
 80109ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80109b0:	2300      	movs	r3, #0
 80109b2:	60c3      	str	r3, [r0, #12]
 80109b4:	4631      	mov	r1, r6
 80109b6:	f001 f99d 	bl	8011cf4 <__mcmp>
 80109ba:	2800      	cmp	r0, #0
 80109bc:	da65      	bge.n	8010a8a <_strtod_l+0x89a>
 80109be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109c0:	ea53 030a 	orrs.w	r3, r3, sl
 80109c4:	f040 8087 	bne.w	8010ad6 <_strtod_l+0x8e6>
 80109c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	f040 8082 	bne.w	8010ad6 <_strtod_l+0x8e6>
 80109d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80109d6:	0d1b      	lsrs	r3, r3, #20
 80109d8:	051b      	lsls	r3, r3, #20
 80109da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80109de:	d97a      	bls.n	8010ad6 <_strtod_l+0x8e6>
 80109e0:	696b      	ldr	r3, [r5, #20]
 80109e2:	b913      	cbnz	r3, 80109ea <_strtod_l+0x7fa>
 80109e4:	692b      	ldr	r3, [r5, #16]
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	dd75      	ble.n	8010ad6 <_strtod_l+0x8e6>
 80109ea:	4629      	mov	r1, r5
 80109ec:	2201      	movs	r2, #1
 80109ee:	4620      	mov	r0, r4
 80109f0:	f001 f914 	bl	8011c1c <__lshift>
 80109f4:	4631      	mov	r1, r6
 80109f6:	4605      	mov	r5, r0
 80109f8:	f001 f97c 	bl	8011cf4 <__mcmp>
 80109fc:	2800      	cmp	r0, #0
 80109fe:	dd6a      	ble.n	8010ad6 <_strtod_l+0x8e6>
 8010a00:	9904      	ldr	r1, [sp, #16]
 8010a02:	4a55      	ldr	r2, [pc, #340]	; (8010b58 <_strtod_l+0x968>)
 8010a04:	465b      	mov	r3, fp
 8010a06:	2900      	cmp	r1, #0
 8010a08:	f000 8085 	beq.w	8010b16 <_strtod_l+0x926>
 8010a0c:	ea02 010b 	and.w	r1, r2, fp
 8010a10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010a14:	dc7f      	bgt.n	8010b16 <_strtod_l+0x926>
 8010a16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010a1a:	f77f aeaa 	ble.w	8010772 <_strtod_l+0x582>
 8010a1e:	4a4f      	ldr	r2, [pc, #316]	; (8010b5c <_strtod_l+0x96c>)
 8010a20:	2300      	movs	r3, #0
 8010a22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010a26:	4650      	mov	r0, sl
 8010a28:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8010a2c:	4659      	mov	r1, fp
 8010a2e:	f7ef fdfb 	bl	8000628 <__aeabi_dmul>
 8010a32:	460b      	mov	r3, r1
 8010a34:	4303      	orrs	r3, r0
 8010a36:	bf08      	it	eq
 8010a38:	2322      	moveq	r3, #34	; 0x22
 8010a3a:	4682      	mov	sl, r0
 8010a3c:	468b      	mov	fp, r1
 8010a3e:	bf08      	it	eq
 8010a40:	6023      	streq	r3, [r4, #0]
 8010a42:	e62b      	b.n	801069c <_strtod_l+0x4ac>
 8010a44:	f04f 32ff 	mov.w	r2, #4294967295
 8010a48:	fa02 f303 	lsl.w	r3, r2, r3
 8010a4c:	ea03 0a0a 	and.w	sl, r3, sl
 8010a50:	e6de      	b.n	8010810 <_strtod_l+0x620>
 8010a52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010a56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010a5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010a5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010a62:	fa01 f308 	lsl.w	r3, r1, r8
 8010a66:	930c      	str	r3, [sp, #48]	; 0x30
 8010a68:	9111      	str	r1, [sp, #68]	; 0x44
 8010a6a:	e741      	b.n	80108f0 <_strtod_l+0x700>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8010a70:	2301      	movs	r3, #1
 8010a72:	9311      	str	r3, [sp, #68]	; 0x44
 8010a74:	e73c      	b.n	80108f0 <_strtod_l+0x700>
 8010a76:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010a78:	4642      	mov	r2, r8
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	f001 f8ce 	bl	8011c1c <__lshift>
 8010a80:	901e      	str	r0, [sp, #120]	; 0x78
 8010a82:	2800      	cmp	r0, #0
 8010a84:	f47f af66 	bne.w	8010954 <_strtod_l+0x764>
 8010a88:	e5fe      	b.n	8010688 <_strtod_l+0x498>
 8010a8a:	465f      	mov	r7, fp
 8010a8c:	d16e      	bne.n	8010b6c <_strtod_l+0x97c>
 8010a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010a90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a94:	b342      	cbz	r2, 8010ae8 <_strtod_l+0x8f8>
 8010a96:	4a32      	ldr	r2, [pc, #200]	; (8010b60 <_strtod_l+0x970>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d128      	bne.n	8010aee <_strtod_l+0x8fe>
 8010a9c:	9b04      	ldr	r3, [sp, #16]
 8010a9e:	4650      	mov	r0, sl
 8010aa0:	b1eb      	cbz	r3, 8010ade <_strtod_l+0x8ee>
 8010aa2:	4a2d      	ldr	r2, [pc, #180]	; (8010b58 <_strtod_l+0x968>)
 8010aa4:	403a      	ands	r2, r7
 8010aa6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8010aae:	d819      	bhi.n	8010ae4 <_strtod_l+0x8f4>
 8010ab0:	0d12      	lsrs	r2, r2, #20
 8010ab2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8010aba:	4298      	cmp	r0, r3
 8010abc:	d117      	bne.n	8010aee <_strtod_l+0x8fe>
 8010abe:	4b29      	ldr	r3, [pc, #164]	; (8010b64 <_strtod_l+0x974>)
 8010ac0:	429f      	cmp	r7, r3
 8010ac2:	d102      	bne.n	8010aca <_strtod_l+0x8da>
 8010ac4:	3001      	adds	r0, #1
 8010ac6:	f43f addf 	beq.w	8010688 <_strtod_l+0x498>
 8010aca:	4b23      	ldr	r3, [pc, #140]	; (8010b58 <_strtod_l+0x968>)
 8010acc:	403b      	ands	r3, r7
 8010ace:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010ad2:	f04f 0a00 	mov.w	sl, #0
 8010ad6:	9b04      	ldr	r3, [sp, #16]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d1a0      	bne.n	8010a1e <_strtod_l+0x82e>
 8010adc:	e5de      	b.n	801069c <_strtod_l+0x4ac>
 8010ade:	f04f 33ff 	mov.w	r3, #4294967295
 8010ae2:	e7ea      	b.n	8010aba <_strtod_l+0x8ca>
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	e7e8      	b.n	8010aba <_strtod_l+0x8ca>
 8010ae8:	ea53 030a 	orrs.w	r3, r3, sl
 8010aec:	d088      	beq.n	8010a00 <_strtod_l+0x810>
 8010aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010af0:	b1db      	cbz	r3, 8010b2a <_strtod_l+0x93a>
 8010af2:	423b      	tst	r3, r7
 8010af4:	d0ef      	beq.n	8010ad6 <_strtod_l+0x8e6>
 8010af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010af8:	9a04      	ldr	r2, [sp, #16]
 8010afa:	4650      	mov	r0, sl
 8010afc:	4659      	mov	r1, fp
 8010afe:	b1c3      	cbz	r3, 8010b32 <_strtod_l+0x942>
 8010b00:	f7ff fb57 	bl	80101b2 <sulp>
 8010b04:	4602      	mov	r2, r0
 8010b06:	460b      	mov	r3, r1
 8010b08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010b0c:	f7ef fbd6 	bl	80002bc <__adddf3>
 8010b10:	4682      	mov	sl, r0
 8010b12:	468b      	mov	fp, r1
 8010b14:	e7df      	b.n	8010ad6 <_strtod_l+0x8e6>
 8010b16:	4013      	ands	r3, r2
 8010b18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010b1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010b20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010b24:	f04f 3aff 	mov.w	sl, #4294967295
 8010b28:	e7d5      	b.n	8010ad6 <_strtod_l+0x8e6>
 8010b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b2c:	ea13 0f0a 	tst.w	r3, sl
 8010b30:	e7e0      	b.n	8010af4 <_strtod_l+0x904>
 8010b32:	f7ff fb3e 	bl	80101b2 <sulp>
 8010b36:	4602      	mov	r2, r0
 8010b38:	460b      	mov	r3, r1
 8010b3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010b3e:	f7ef fbbb 	bl	80002b8 <__aeabi_dsub>
 8010b42:	2200      	movs	r2, #0
 8010b44:	2300      	movs	r3, #0
 8010b46:	4682      	mov	sl, r0
 8010b48:	468b      	mov	fp, r1
 8010b4a:	f7ef ffd5 	bl	8000af8 <__aeabi_dcmpeq>
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	d0c1      	beq.n	8010ad6 <_strtod_l+0x8e6>
 8010b52:	e60e      	b.n	8010772 <_strtod_l+0x582>
 8010b54:	fffffc02 	.word	0xfffffc02
 8010b58:	7ff00000 	.word	0x7ff00000
 8010b5c:	39500000 	.word	0x39500000
 8010b60:	000fffff 	.word	0x000fffff
 8010b64:	7fefffff 	.word	0x7fefffff
 8010b68:	08014740 	.word	0x08014740
 8010b6c:	4631      	mov	r1, r6
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f001 fa3c 	bl	8011fec <__ratio>
 8010b74:	ec59 8b10 	vmov	r8, r9, d0
 8010b78:	ee10 0a10 	vmov	r0, s0
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010b82:	4649      	mov	r1, r9
 8010b84:	f7ef ffcc 	bl	8000b20 <__aeabi_dcmple>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d07c      	beq.n	8010c86 <_strtod_l+0xa96>
 8010b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d04c      	beq.n	8010c2c <_strtod_l+0xa3c>
 8010b92:	4b95      	ldr	r3, [pc, #596]	; (8010de8 <_strtod_l+0xbf8>)
 8010b94:	2200      	movs	r2, #0
 8010b96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010b9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010de8 <_strtod_l+0xbf8>
 8010b9e:	f04f 0800 	mov.w	r8, #0
 8010ba2:	4b92      	ldr	r3, [pc, #584]	; (8010dec <_strtod_l+0xbfc>)
 8010ba4:	403b      	ands	r3, r7
 8010ba6:	9311      	str	r3, [sp, #68]	; 0x44
 8010ba8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010baa:	4b91      	ldr	r3, [pc, #580]	; (8010df0 <_strtod_l+0xc00>)
 8010bac:	429a      	cmp	r2, r3
 8010bae:	f040 80b2 	bne.w	8010d16 <_strtod_l+0xb26>
 8010bb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010bba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010bbe:	ec4b ab10 	vmov	d0, sl, fp
 8010bc2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010bc6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010bca:	f001 f937 	bl	8011e3c <__ulp>
 8010bce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010bd2:	ec53 2b10 	vmov	r2, r3, d0
 8010bd6:	f7ef fd27 	bl	8000628 <__aeabi_dmul>
 8010bda:	4652      	mov	r2, sl
 8010bdc:	465b      	mov	r3, fp
 8010bde:	f7ef fb6d 	bl	80002bc <__adddf3>
 8010be2:	460b      	mov	r3, r1
 8010be4:	4981      	ldr	r1, [pc, #516]	; (8010dec <_strtod_l+0xbfc>)
 8010be6:	4a83      	ldr	r2, [pc, #524]	; (8010df4 <_strtod_l+0xc04>)
 8010be8:	4019      	ands	r1, r3
 8010bea:	4291      	cmp	r1, r2
 8010bec:	4682      	mov	sl, r0
 8010bee:	d95e      	bls.n	8010cae <_strtod_l+0xabe>
 8010bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bf2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d103      	bne.n	8010c02 <_strtod_l+0xa12>
 8010bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	f43f ad43 	beq.w	8010688 <_strtod_l+0x498>
 8010c02:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010e00 <_strtod_l+0xc10>
 8010c06:	f04f 3aff 	mov.w	sl, #4294967295
 8010c0a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	f000 fde9 	bl	80117e4 <_Bfree>
 8010c12:	9907      	ldr	r1, [sp, #28]
 8010c14:	4620      	mov	r0, r4
 8010c16:	f000 fde5 	bl	80117e4 <_Bfree>
 8010c1a:	4631      	mov	r1, r6
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f000 fde1 	bl	80117e4 <_Bfree>
 8010c22:	4629      	mov	r1, r5
 8010c24:	4620      	mov	r0, r4
 8010c26:	f000 fddd 	bl	80117e4 <_Bfree>
 8010c2a:	e613      	b.n	8010854 <_strtod_l+0x664>
 8010c2c:	f1ba 0f00 	cmp.w	sl, #0
 8010c30:	d11b      	bne.n	8010c6a <_strtod_l+0xa7a>
 8010c32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c36:	b9f3      	cbnz	r3, 8010c76 <_strtod_l+0xa86>
 8010c38:	4b6b      	ldr	r3, [pc, #428]	; (8010de8 <_strtod_l+0xbf8>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	4640      	mov	r0, r8
 8010c3e:	4649      	mov	r1, r9
 8010c40:	f7ef ff64 	bl	8000b0c <__aeabi_dcmplt>
 8010c44:	b9d0      	cbnz	r0, 8010c7c <_strtod_l+0xa8c>
 8010c46:	4640      	mov	r0, r8
 8010c48:	4649      	mov	r1, r9
 8010c4a:	4b6b      	ldr	r3, [pc, #428]	; (8010df8 <_strtod_l+0xc08>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	f7ef fceb 	bl	8000628 <__aeabi_dmul>
 8010c52:	4680      	mov	r8, r0
 8010c54:	4689      	mov	r9, r1
 8010c56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010c5a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010c5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010c60:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010c64:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010c68:	e79b      	b.n	8010ba2 <_strtod_l+0x9b2>
 8010c6a:	f1ba 0f01 	cmp.w	sl, #1
 8010c6e:	d102      	bne.n	8010c76 <_strtod_l+0xa86>
 8010c70:	2f00      	cmp	r7, #0
 8010c72:	f43f ad7e 	beq.w	8010772 <_strtod_l+0x582>
 8010c76:	4b61      	ldr	r3, [pc, #388]	; (8010dfc <_strtod_l+0xc0c>)
 8010c78:	2200      	movs	r2, #0
 8010c7a:	e78c      	b.n	8010b96 <_strtod_l+0x9a6>
 8010c7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010df8 <_strtod_l+0xc08>
 8010c80:	f04f 0800 	mov.w	r8, #0
 8010c84:	e7e7      	b.n	8010c56 <_strtod_l+0xa66>
 8010c86:	4b5c      	ldr	r3, [pc, #368]	; (8010df8 <_strtod_l+0xc08>)
 8010c88:	4640      	mov	r0, r8
 8010c8a:	4649      	mov	r1, r9
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f7ef fccb 	bl	8000628 <__aeabi_dmul>
 8010c92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c94:	4680      	mov	r8, r0
 8010c96:	4689      	mov	r9, r1
 8010c98:	b933      	cbnz	r3, 8010ca8 <_strtod_l+0xab8>
 8010c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c9e:	9012      	str	r0, [sp, #72]	; 0x48
 8010ca0:	9313      	str	r3, [sp, #76]	; 0x4c
 8010ca2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010ca6:	e7dd      	b.n	8010c64 <_strtod_l+0xa74>
 8010ca8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8010cac:	e7f9      	b.n	8010ca2 <_strtod_l+0xab2>
 8010cae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010cb2:	9b04      	ldr	r3, [sp, #16]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d1a8      	bne.n	8010c0a <_strtod_l+0xa1a>
 8010cb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010cbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010cbe:	0d1b      	lsrs	r3, r3, #20
 8010cc0:	051b      	lsls	r3, r3, #20
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d1a1      	bne.n	8010c0a <_strtod_l+0xa1a>
 8010cc6:	4640      	mov	r0, r8
 8010cc8:	4649      	mov	r1, r9
 8010cca:	f7ef fff7 	bl	8000cbc <__aeabi_d2lz>
 8010cce:	f7ef fc7d 	bl	80005cc <__aeabi_l2d>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	4640      	mov	r0, r8
 8010cd8:	4649      	mov	r1, r9
 8010cda:	f7ef faed 	bl	80002b8 <__aeabi_dsub>
 8010cde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010ce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ce4:	ea43 030a 	orr.w	r3, r3, sl
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	4680      	mov	r8, r0
 8010cec:	4689      	mov	r9, r1
 8010cee:	d053      	beq.n	8010d98 <_strtod_l+0xba8>
 8010cf0:	a335      	add	r3, pc, #212	; (adr r3, 8010dc8 <_strtod_l+0xbd8>)
 8010cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf6:	f7ef ff09 	bl	8000b0c <__aeabi_dcmplt>
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	f47f acce 	bne.w	801069c <_strtod_l+0x4ac>
 8010d00:	a333      	add	r3, pc, #204	; (adr r3, 8010dd0 <_strtod_l+0xbe0>)
 8010d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d06:	4640      	mov	r0, r8
 8010d08:	4649      	mov	r1, r9
 8010d0a:	f7ef ff1d 	bl	8000b48 <__aeabi_dcmpgt>
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	f43f af7b 	beq.w	8010c0a <_strtod_l+0xa1a>
 8010d14:	e4c2      	b.n	801069c <_strtod_l+0x4ac>
 8010d16:	9b04      	ldr	r3, [sp, #16]
 8010d18:	b333      	cbz	r3, 8010d68 <_strtod_l+0xb78>
 8010d1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010d20:	d822      	bhi.n	8010d68 <_strtod_l+0xb78>
 8010d22:	a32d      	add	r3, pc, #180	; (adr r3, 8010dd8 <_strtod_l+0xbe8>)
 8010d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d28:	4640      	mov	r0, r8
 8010d2a:	4649      	mov	r1, r9
 8010d2c:	f7ef fef8 	bl	8000b20 <__aeabi_dcmple>
 8010d30:	b1a0      	cbz	r0, 8010d5c <_strtod_l+0xb6c>
 8010d32:	4649      	mov	r1, r9
 8010d34:	4640      	mov	r0, r8
 8010d36:	f7ef ff39 	bl	8000bac <__aeabi_d2uiz>
 8010d3a:	2801      	cmp	r0, #1
 8010d3c:	bf38      	it	cc
 8010d3e:	2001      	movcc	r0, #1
 8010d40:	f7ef fbf8 	bl	8000534 <__aeabi_ui2d>
 8010d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d46:	4680      	mov	r8, r0
 8010d48:	4689      	mov	r9, r1
 8010d4a:	bb13      	cbnz	r3, 8010d92 <_strtod_l+0xba2>
 8010d4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d50:	9014      	str	r0, [sp, #80]	; 0x50
 8010d52:	9315      	str	r3, [sp, #84]	; 0x54
 8010d54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010d58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010d60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010d64:	1a9b      	subs	r3, r3, r2
 8010d66:	930d      	str	r3, [sp, #52]	; 0x34
 8010d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d6c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010d70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010d74:	f001 f862 	bl	8011e3c <__ulp>
 8010d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d7c:	ec53 2b10 	vmov	r2, r3, d0
 8010d80:	f7ef fc52 	bl	8000628 <__aeabi_dmul>
 8010d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010d88:	f7ef fa98 	bl	80002bc <__adddf3>
 8010d8c:	4682      	mov	sl, r0
 8010d8e:	468b      	mov	fp, r1
 8010d90:	e78f      	b.n	8010cb2 <_strtod_l+0xac2>
 8010d92:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8010d96:	e7dd      	b.n	8010d54 <_strtod_l+0xb64>
 8010d98:	a311      	add	r3, pc, #68	; (adr r3, 8010de0 <_strtod_l+0xbf0>)
 8010d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d9e:	f7ef feb5 	bl	8000b0c <__aeabi_dcmplt>
 8010da2:	e7b4      	b.n	8010d0e <_strtod_l+0xb1e>
 8010da4:	2300      	movs	r3, #0
 8010da6:	930e      	str	r3, [sp, #56]	; 0x38
 8010da8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010daa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010dac:	6013      	str	r3, [r2, #0]
 8010dae:	f7ff ba65 	b.w	801027c <_strtod_l+0x8c>
 8010db2:	2b65      	cmp	r3, #101	; 0x65
 8010db4:	f43f ab5d 	beq.w	8010472 <_strtod_l+0x282>
 8010db8:	2b45      	cmp	r3, #69	; 0x45
 8010dba:	f43f ab5a 	beq.w	8010472 <_strtod_l+0x282>
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	f7ff bb92 	b.w	80104e8 <_strtod_l+0x2f8>
 8010dc4:	f3af 8000 	nop.w
 8010dc8:	94a03595 	.word	0x94a03595
 8010dcc:	3fdfffff 	.word	0x3fdfffff
 8010dd0:	35afe535 	.word	0x35afe535
 8010dd4:	3fe00000 	.word	0x3fe00000
 8010dd8:	ffc00000 	.word	0xffc00000
 8010ddc:	41dfffff 	.word	0x41dfffff
 8010de0:	94a03595 	.word	0x94a03595
 8010de4:	3fcfffff 	.word	0x3fcfffff
 8010de8:	3ff00000 	.word	0x3ff00000
 8010dec:	7ff00000 	.word	0x7ff00000
 8010df0:	7fe00000 	.word	0x7fe00000
 8010df4:	7c9fffff 	.word	0x7c9fffff
 8010df8:	3fe00000 	.word	0x3fe00000
 8010dfc:	bff00000 	.word	0xbff00000
 8010e00:	7fefffff 	.word	0x7fefffff

08010e04 <strtod>:
 8010e04:	460a      	mov	r2, r1
 8010e06:	4601      	mov	r1, r0
 8010e08:	4802      	ldr	r0, [pc, #8]	; (8010e14 <strtod+0x10>)
 8010e0a:	4b03      	ldr	r3, [pc, #12]	; (8010e18 <strtod+0x14>)
 8010e0c:	6800      	ldr	r0, [r0, #0]
 8010e0e:	f7ff b9ef 	b.w	80101f0 <_strtod_l>
 8010e12:	bf00      	nop
 8010e14:	20000160 	.word	0x20000160
 8010e18:	200001c8 	.word	0x200001c8

08010e1c <__swbuf_r>:
 8010e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e1e:	460e      	mov	r6, r1
 8010e20:	4614      	mov	r4, r2
 8010e22:	4605      	mov	r5, r0
 8010e24:	b118      	cbz	r0, 8010e2e <__swbuf_r+0x12>
 8010e26:	6983      	ldr	r3, [r0, #24]
 8010e28:	b90b      	cbnz	r3, 8010e2e <__swbuf_r+0x12>
 8010e2a:	f7fe feb1 	bl	800fb90 <__sinit>
 8010e2e:	4b21      	ldr	r3, [pc, #132]	; (8010eb4 <__swbuf_r+0x98>)
 8010e30:	429c      	cmp	r4, r3
 8010e32:	d12b      	bne.n	8010e8c <__swbuf_r+0x70>
 8010e34:	686c      	ldr	r4, [r5, #4]
 8010e36:	69a3      	ldr	r3, [r4, #24]
 8010e38:	60a3      	str	r3, [r4, #8]
 8010e3a:	89a3      	ldrh	r3, [r4, #12]
 8010e3c:	071a      	lsls	r2, r3, #28
 8010e3e:	d52f      	bpl.n	8010ea0 <__swbuf_r+0x84>
 8010e40:	6923      	ldr	r3, [r4, #16]
 8010e42:	b36b      	cbz	r3, 8010ea0 <__swbuf_r+0x84>
 8010e44:	6923      	ldr	r3, [r4, #16]
 8010e46:	6820      	ldr	r0, [r4, #0]
 8010e48:	1ac0      	subs	r0, r0, r3
 8010e4a:	6963      	ldr	r3, [r4, #20]
 8010e4c:	b2f6      	uxtb	r6, r6
 8010e4e:	4283      	cmp	r3, r0
 8010e50:	4637      	mov	r7, r6
 8010e52:	dc04      	bgt.n	8010e5e <__swbuf_r+0x42>
 8010e54:	4621      	mov	r1, r4
 8010e56:	4628      	mov	r0, r5
 8010e58:	f7fe fe06 	bl	800fa68 <_fflush_r>
 8010e5c:	bb30      	cbnz	r0, 8010eac <__swbuf_r+0x90>
 8010e5e:	68a3      	ldr	r3, [r4, #8]
 8010e60:	3b01      	subs	r3, #1
 8010e62:	60a3      	str	r3, [r4, #8]
 8010e64:	6823      	ldr	r3, [r4, #0]
 8010e66:	1c5a      	adds	r2, r3, #1
 8010e68:	6022      	str	r2, [r4, #0]
 8010e6a:	701e      	strb	r6, [r3, #0]
 8010e6c:	6963      	ldr	r3, [r4, #20]
 8010e6e:	3001      	adds	r0, #1
 8010e70:	4283      	cmp	r3, r0
 8010e72:	d004      	beq.n	8010e7e <__swbuf_r+0x62>
 8010e74:	89a3      	ldrh	r3, [r4, #12]
 8010e76:	07db      	lsls	r3, r3, #31
 8010e78:	d506      	bpl.n	8010e88 <__swbuf_r+0x6c>
 8010e7a:	2e0a      	cmp	r6, #10
 8010e7c:	d104      	bne.n	8010e88 <__swbuf_r+0x6c>
 8010e7e:	4621      	mov	r1, r4
 8010e80:	4628      	mov	r0, r5
 8010e82:	f7fe fdf1 	bl	800fa68 <_fflush_r>
 8010e86:	b988      	cbnz	r0, 8010eac <__swbuf_r+0x90>
 8010e88:	4638      	mov	r0, r7
 8010e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e8c:	4b0a      	ldr	r3, [pc, #40]	; (8010eb8 <__swbuf_r+0x9c>)
 8010e8e:	429c      	cmp	r4, r3
 8010e90:	d101      	bne.n	8010e96 <__swbuf_r+0x7a>
 8010e92:	68ac      	ldr	r4, [r5, #8]
 8010e94:	e7cf      	b.n	8010e36 <__swbuf_r+0x1a>
 8010e96:	4b09      	ldr	r3, [pc, #36]	; (8010ebc <__swbuf_r+0xa0>)
 8010e98:	429c      	cmp	r4, r3
 8010e9a:	bf08      	it	eq
 8010e9c:	68ec      	ldreq	r4, [r5, #12]
 8010e9e:	e7ca      	b.n	8010e36 <__swbuf_r+0x1a>
 8010ea0:	4621      	mov	r1, r4
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	f000 f81e 	bl	8010ee4 <__swsetup_r>
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	d0cb      	beq.n	8010e44 <__swbuf_r+0x28>
 8010eac:	f04f 37ff 	mov.w	r7, #4294967295
 8010eb0:	e7ea      	b.n	8010e88 <__swbuf_r+0x6c>
 8010eb2:	bf00      	nop
 8010eb4:	080146c8 	.word	0x080146c8
 8010eb8:	080146e8 	.word	0x080146e8
 8010ebc:	080146a8 	.word	0x080146a8

08010ec0 <_write_r>:
 8010ec0:	b538      	push	{r3, r4, r5, lr}
 8010ec2:	4d07      	ldr	r5, [pc, #28]	; (8010ee0 <_write_r+0x20>)
 8010ec4:	4604      	mov	r4, r0
 8010ec6:	4608      	mov	r0, r1
 8010ec8:	4611      	mov	r1, r2
 8010eca:	2200      	movs	r2, #0
 8010ecc:	602a      	str	r2, [r5, #0]
 8010ece:	461a      	mov	r2, r3
 8010ed0:	f7f1 fdad 	bl	8002a2e <_write>
 8010ed4:	1c43      	adds	r3, r0, #1
 8010ed6:	d102      	bne.n	8010ede <_write_r+0x1e>
 8010ed8:	682b      	ldr	r3, [r5, #0]
 8010eda:	b103      	cbz	r3, 8010ede <_write_r+0x1e>
 8010edc:	6023      	str	r3, [r4, #0]
 8010ede:	bd38      	pop	{r3, r4, r5, pc}
 8010ee0:	20003414 	.word	0x20003414

08010ee4 <__swsetup_r>:
 8010ee4:	4b32      	ldr	r3, [pc, #200]	; (8010fb0 <__swsetup_r+0xcc>)
 8010ee6:	b570      	push	{r4, r5, r6, lr}
 8010ee8:	681d      	ldr	r5, [r3, #0]
 8010eea:	4606      	mov	r6, r0
 8010eec:	460c      	mov	r4, r1
 8010eee:	b125      	cbz	r5, 8010efa <__swsetup_r+0x16>
 8010ef0:	69ab      	ldr	r3, [r5, #24]
 8010ef2:	b913      	cbnz	r3, 8010efa <__swsetup_r+0x16>
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	f7fe fe4b 	bl	800fb90 <__sinit>
 8010efa:	4b2e      	ldr	r3, [pc, #184]	; (8010fb4 <__swsetup_r+0xd0>)
 8010efc:	429c      	cmp	r4, r3
 8010efe:	d10f      	bne.n	8010f20 <__swsetup_r+0x3c>
 8010f00:	686c      	ldr	r4, [r5, #4]
 8010f02:	89a3      	ldrh	r3, [r4, #12]
 8010f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f08:	0719      	lsls	r1, r3, #28
 8010f0a:	d42c      	bmi.n	8010f66 <__swsetup_r+0x82>
 8010f0c:	06dd      	lsls	r5, r3, #27
 8010f0e:	d411      	bmi.n	8010f34 <__swsetup_r+0x50>
 8010f10:	2309      	movs	r3, #9
 8010f12:	6033      	str	r3, [r6, #0]
 8010f14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f18:	81a3      	strh	r3, [r4, #12]
 8010f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f1e:	e03e      	b.n	8010f9e <__swsetup_r+0xba>
 8010f20:	4b25      	ldr	r3, [pc, #148]	; (8010fb8 <__swsetup_r+0xd4>)
 8010f22:	429c      	cmp	r4, r3
 8010f24:	d101      	bne.n	8010f2a <__swsetup_r+0x46>
 8010f26:	68ac      	ldr	r4, [r5, #8]
 8010f28:	e7eb      	b.n	8010f02 <__swsetup_r+0x1e>
 8010f2a:	4b24      	ldr	r3, [pc, #144]	; (8010fbc <__swsetup_r+0xd8>)
 8010f2c:	429c      	cmp	r4, r3
 8010f2e:	bf08      	it	eq
 8010f30:	68ec      	ldreq	r4, [r5, #12]
 8010f32:	e7e6      	b.n	8010f02 <__swsetup_r+0x1e>
 8010f34:	0758      	lsls	r0, r3, #29
 8010f36:	d512      	bpl.n	8010f5e <__swsetup_r+0x7a>
 8010f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f3a:	b141      	cbz	r1, 8010f4e <__swsetup_r+0x6a>
 8010f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f40:	4299      	cmp	r1, r3
 8010f42:	d002      	beq.n	8010f4a <__swsetup_r+0x66>
 8010f44:	4630      	mov	r0, r6
 8010f46:	f7fe ff73 	bl	800fe30 <_free_r>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8010f4e:	89a3      	ldrh	r3, [r4, #12]
 8010f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f54:	81a3      	strh	r3, [r4, #12]
 8010f56:	2300      	movs	r3, #0
 8010f58:	6063      	str	r3, [r4, #4]
 8010f5a:	6923      	ldr	r3, [r4, #16]
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	89a3      	ldrh	r3, [r4, #12]
 8010f60:	f043 0308 	orr.w	r3, r3, #8
 8010f64:	81a3      	strh	r3, [r4, #12]
 8010f66:	6923      	ldr	r3, [r4, #16]
 8010f68:	b94b      	cbnz	r3, 8010f7e <__swsetup_r+0x9a>
 8010f6a:	89a3      	ldrh	r3, [r4, #12]
 8010f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f74:	d003      	beq.n	8010f7e <__swsetup_r+0x9a>
 8010f76:	4621      	mov	r1, r4
 8010f78:	4630      	mov	r0, r6
 8010f7a:	f7fe fef3 	bl	800fd64 <__smakebuf_r>
 8010f7e:	89a0      	ldrh	r0, [r4, #12]
 8010f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f84:	f010 0301 	ands.w	r3, r0, #1
 8010f88:	d00a      	beq.n	8010fa0 <__swsetup_r+0xbc>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	60a3      	str	r3, [r4, #8]
 8010f8e:	6963      	ldr	r3, [r4, #20]
 8010f90:	425b      	negs	r3, r3
 8010f92:	61a3      	str	r3, [r4, #24]
 8010f94:	6923      	ldr	r3, [r4, #16]
 8010f96:	b943      	cbnz	r3, 8010faa <__swsetup_r+0xc6>
 8010f98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010f9c:	d1ba      	bne.n	8010f14 <__swsetup_r+0x30>
 8010f9e:	bd70      	pop	{r4, r5, r6, pc}
 8010fa0:	0781      	lsls	r1, r0, #30
 8010fa2:	bf58      	it	pl
 8010fa4:	6963      	ldrpl	r3, [r4, #20]
 8010fa6:	60a3      	str	r3, [r4, #8]
 8010fa8:	e7f4      	b.n	8010f94 <__swsetup_r+0xb0>
 8010faa:	2000      	movs	r0, #0
 8010fac:	e7f7      	b.n	8010f9e <__swsetup_r+0xba>
 8010fae:	bf00      	nop
 8010fb0:	20000160 	.word	0x20000160
 8010fb4:	080146c8 	.word	0x080146c8
 8010fb8:	080146e8 	.word	0x080146e8
 8010fbc:	080146a8 	.word	0x080146a8

08010fc0 <_close_r>:
 8010fc0:	b538      	push	{r3, r4, r5, lr}
 8010fc2:	4d06      	ldr	r5, [pc, #24]	; (8010fdc <_close_r+0x1c>)
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	4608      	mov	r0, r1
 8010fca:	602b      	str	r3, [r5, #0]
 8010fcc:	f7f1 fd4b 	bl	8002a66 <_close>
 8010fd0:	1c43      	adds	r3, r0, #1
 8010fd2:	d102      	bne.n	8010fda <_close_r+0x1a>
 8010fd4:	682b      	ldr	r3, [r5, #0]
 8010fd6:	b103      	cbz	r3, 8010fda <_close_r+0x1a>
 8010fd8:	6023      	str	r3, [r4, #0]
 8010fda:	bd38      	pop	{r3, r4, r5, pc}
 8010fdc:	20003414 	.word	0x20003414

08010fe0 <_fstat_r>:
 8010fe0:	b538      	push	{r3, r4, r5, lr}
 8010fe2:	4d07      	ldr	r5, [pc, #28]	; (8011000 <_fstat_r+0x20>)
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	4608      	mov	r0, r1
 8010fea:	4611      	mov	r1, r2
 8010fec:	602b      	str	r3, [r5, #0]
 8010fee:	f7f1 fd46 	bl	8002a7e <_fstat>
 8010ff2:	1c43      	adds	r3, r0, #1
 8010ff4:	d102      	bne.n	8010ffc <_fstat_r+0x1c>
 8010ff6:	682b      	ldr	r3, [r5, #0]
 8010ff8:	b103      	cbz	r3, 8010ffc <_fstat_r+0x1c>
 8010ffa:	6023      	str	r3, [r4, #0]
 8010ffc:	bd38      	pop	{r3, r4, r5, pc}
 8010ffe:	bf00      	nop
 8011000:	20003414 	.word	0x20003414

08011004 <rshift>:
 8011004:	6903      	ldr	r3, [r0, #16]
 8011006:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801100a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801100e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011012:	f100 0414 	add.w	r4, r0, #20
 8011016:	dd45      	ble.n	80110a4 <rshift+0xa0>
 8011018:	f011 011f 	ands.w	r1, r1, #31
 801101c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011020:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011024:	d10c      	bne.n	8011040 <rshift+0x3c>
 8011026:	f100 0710 	add.w	r7, r0, #16
 801102a:	4629      	mov	r1, r5
 801102c:	42b1      	cmp	r1, r6
 801102e:	d334      	bcc.n	801109a <rshift+0x96>
 8011030:	1a9b      	subs	r3, r3, r2
 8011032:	009b      	lsls	r3, r3, #2
 8011034:	1eea      	subs	r2, r5, #3
 8011036:	4296      	cmp	r6, r2
 8011038:	bf38      	it	cc
 801103a:	2300      	movcc	r3, #0
 801103c:	4423      	add	r3, r4
 801103e:	e015      	b.n	801106c <rshift+0x68>
 8011040:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011044:	f1c1 0820 	rsb	r8, r1, #32
 8011048:	40cf      	lsrs	r7, r1
 801104a:	f105 0e04 	add.w	lr, r5, #4
 801104e:	46a1      	mov	r9, r4
 8011050:	4576      	cmp	r6, lr
 8011052:	46f4      	mov	ip, lr
 8011054:	d815      	bhi.n	8011082 <rshift+0x7e>
 8011056:	1a9b      	subs	r3, r3, r2
 8011058:	009a      	lsls	r2, r3, #2
 801105a:	3a04      	subs	r2, #4
 801105c:	3501      	adds	r5, #1
 801105e:	42ae      	cmp	r6, r5
 8011060:	bf38      	it	cc
 8011062:	2200      	movcc	r2, #0
 8011064:	18a3      	adds	r3, r4, r2
 8011066:	50a7      	str	r7, [r4, r2]
 8011068:	b107      	cbz	r7, 801106c <rshift+0x68>
 801106a:	3304      	adds	r3, #4
 801106c:	1b1a      	subs	r2, r3, r4
 801106e:	42a3      	cmp	r3, r4
 8011070:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011074:	bf08      	it	eq
 8011076:	2300      	moveq	r3, #0
 8011078:	6102      	str	r2, [r0, #16]
 801107a:	bf08      	it	eq
 801107c:	6143      	streq	r3, [r0, #20]
 801107e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011082:	f8dc c000 	ldr.w	ip, [ip]
 8011086:	fa0c fc08 	lsl.w	ip, ip, r8
 801108a:	ea4c 0707 	orr.w	r7, ip, r7
 801108e:	f849 7b04 	str.w	r7, [r9], #4
 8011092:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011096:	40cf      	lsrs	r7, r1
 8011098:	e7da      	b.n	8011050 <rshift+0x4c>
 801109a:	f851 cb04 	ldr.w	ip, [r1], #4
 801109e:	f847 cf04 	str.w	ip, [r7, #4]!
 80110a2:	e7c3      	b.n	801102c <rshift+0x28>
 80110a4:	4623      	mov	r3, r4
 80110a6:	e7e1      	b.n	801106c <rshift+0x68>

080110a8 <__hexdig_fun>:
 80110a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80110ac:	2b09      	cmp	r3, #9
 80110ae:	d802      	bhi.n	80110b6 <__hexdig_fun+0xe>
 80110b0:	3820      	subs	r0, #32
 80110b2:	b2c0      	uxtb	r0, r0
 80110b4:	4770      	bx	lr
 80110b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80110ba:	2b05      	cmp	r3, #5
 80110bc:	d801      	bhi.n	80110c2 <__hexdig_fun+0x1a>
 80110be:	3847      	subs	r0, #71	; 0x47
 80110c0:	e7f7      	b.n	80110b2 <__hexdig_fun+0xa>
 80110c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80110c6:	2b05      	cmp	r3, #5
 80110c8:	d801      	bhi.n	80110ce <__hexdig_fun+0x26>
 80110ca:	3827      	subs	r0, #39	; 0x27
 80110cc:	e7f1      	b.n	80110b2 <__hexdig_fun+0xa>
 80110ce:	2000      	movs	r0, #0
 80110d0:	4770      	bx	lr
	...

080110d4 <__gethex>:
 80110d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d8:	ed2d 8b02 	vpush	{d8}
 80110dc:	b089      	sub	sp, #36	; 0x24
 80110de:	ee08 0a10 	vmov	s16, r0
 80110e2:	9304      	str	r3, [sp, #16]
 80110e4:	4bbc      	ldr	r3, [pc, #752]	; (80113d8 <__gethex+0x304>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	9301      	str	r3, [sp, #4]
 80110ea:	4618      	mov	r0, r3
 80110ec:	468b      	mov	fp, r1
 80110ee:	4690      	mov	r8, r2
 80110f0:	f7ef f880 	bl	80001f4 <strlen>
 80110f4:	9b01      	ldr	r3, [sp, #4]
 80110f6:	f8db 2000 	ldr.w	r2, [fp]
 80110fa:	4403      	add	r3, r0
 80110fc:	4682      	mov	sl, r0
 80110fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011102:	9305      	str	r3, [sp, #20]
 8011104:	1c93      	adds	r3, r2, #2
 8011106:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801110a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801110e:	32fe      	adds	r2, #254	; 0xfe
 8011110:	18d1      	adds	r1, r2, r3
 8011112:	461f      	mov	r7, r3
 8011114:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011118:	9100      	str	r1, [sp, #0]
 801111a:	2830      	cmp	r0, #48	; 0x30
 801111c:	d0f8      	beq.n	8011110 <__gethex+0x3c>
 801111e:	f7ff ffc3 	bl	80110a8 <__hexdig_fun>
 8011122:	4604      	mov	r4, r0
 8011124:	2800      	cmp	r0, #0
 8011126:	d13a      	bne.n	801119e <__gethex+0xca>
 8011128:	9901      	ldr	r1, [sp, #4]
 801112a:	4652      	mov	r2, sl
 801112c:	4638      	mov	r0, r7
 801112e:	f7ff f82e 	bl	801018e <strncmp>
 8011132:	4605      	mov	r5, r0
 8011134:	2800      	cmp	r0, #0
 8011136:	d168      	bne.n	801120a <__gethex+0x136>
 8011138:	f817 000a 	ldrb.w	r0, [r7, sl]
 801113c:	eb07 060a 	add.w	r6, r7, sl
 8011140:	f7ff ffb2 	bl	80110a8 <__hexdig_fun>
 8011144:	2800      	cmp	r0, #0
 8011146:	d062      	beq.n	801120e <__gethex+0x13a>
 8011148:	4633      	mov	r3, r6
 801114a:	7818      	ldrb	r0, [r3, #0]
 801114c:	2830      	cmp	r0, #48	; 0x30
 801114e:	461f      	mov	r7, r3
 8011150:	f103 0301 	add.w	r3, r3, #1
 8011154:	d0f9      	beq.n	801114a <__gethex+0x76>
 8011156:	f7ff ffa7 	bl	80110a8 <__hexdig_fun>
 801115a:	2301      	movs	r3, #1
 801115c:	fab0 f480 	clz	r4, r0
 8011160:	0964      	lsrs	r4, r4, #5
 8011162:	4635      	mov	r5, r6
 8011164:	9300      	str	r3, [sp, #0]
 8011166:	463a      	mov	r2, r7
 8011168:	4616      	mov	r6, r2
 801116a:	3201      	adds	r2, #1
 801116c:	7830      	ldrb	r0, [r6, #0]
 801116e:	f7ff ff9b 	bl	80110a8 <__hexdig_fun>
 8011172:	2800      	cmp	r0, #0
 8011174:	d1f8      	bne.n	8011168 <__gethex+0x94>
 8011176:	9901      	ldr	r1, [sp, #4]
 8011178:	4652      	mov	r2, sl
 801117a:	4630      	mov	r0, r6
 801117c:	f7ff f807 	bl	801018e <strncmp>
 8011180:	b980      	cbnz	r0, 80111a4 <__gethex+0xd0>
 8011182:	b94d      	cbnz	r5, 8011198 <__gethex+0xc4>
 8011184:	eb06 050a 	add.w	r5, r6, sl
 8011188:	462a      	mov	r2, r5
 801118a:	4616      	mov	r6, r2
 801118c:	3201      	adds	r2, #1
 801118e:	7830      	ldrb	r0, [r6, #0]
 8011190:	f7ff ff8a 	bl	80110a8 <__hexdig_fun>
 8011194:	2800      	cmp	r0, #0
 8011196:	d1f8      	bne.n	801118a <__gethex+0xb6>
 8011198:	1bad      	subs	r5, r5, r6
 801119a:	00ad      	lsls	r5, r5, #2
 801119c:	e004      	b.n	80111a8 <__gethex+0xd4>
 801119e:	2400      	movs	r4, #0
 80111a0:	4625      	mov	r5, r4
 80111a2:	e7e0      	b.n	8011166 <__gethex+0x92>
 80111a4:	2d00      	cmp	r5, #0
 80111a6:	d1f7      	bne.n	8011198 <__gethex+0xc4>
 80111a8:	7833      	ldrb	r3, [r6, #0]
 80111aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80111ae:	2b50      	cmp	r3, #80	; 0x50
 80111b0:	d13b      	bne.n	801122a <__gethex+0x156>
 80111b2:	7873      	ldrb	r3, [r6, #1]
 80111b4:	2b2b      	cmp	r3, #43	; 0x2b
 80111b6:	d02c      	beq.n	8011212 <__gethex+0x13e>
 80111b8:	2b2d      	cmp	r3, #45	; 0x2d
 80111ba:	d02e      	beq.n	801121a <__gethex+0x146>
 80111bc:	1c71      	adds	r1, r6, #1
 80111be:	f04f 0900 	mov.w	r9, #0
 80111c2:	7808      	ldrb	r0, [r1, #0]
 80111c4:	f7ff ff70 	bl	80110a8 <__hexdig_fun>
 80111c8:	1e43      	subs	r3, r0, #1
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	2b18      	cmp	r3, #24
 80111ce:	d82c      	bhi.n	801122a <__gethex+0x156>
 80111d0:	f1a0 0210 	sub.w	r2, r0, #16
 80111d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80111d8:	f7ff ff66 	bl	80110a8 <__hexdig_fun>
 80111dc:	1e43      	subs	r3, r0, #1
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	2b18      	cmp	r3, #24
 80111e2:	d91d      	bls.n	8011220 <__gethex+0x14c>
 80111e4:	f1b9 0f00 	cmp.w	r9, #0
 80111e8:	d000      	beq.n	80111ec <__gethex+0x118>
 80111ea:	4252      	negs	r2, r2
 80111ec:	4415      	add	r5, r2
 80111ee:	f8cb 1000 	str.w	r1, [fp]
 80111f2:	b1e4      	cbz	r4, 801122e <__gethex+0x15a>
 80111f4:	9b00      	ldr	r3, [sp, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	bf14      	ite	ne
 80111fa:	2700      	movne	r7, #0
 80111fc:	2706      	moveq	r7, #6
 80111fe:	4638      	mov	r0, r7
 8011200:	b009      	add	sp, #36	; 0x24
 8011202:	ecbd 8b02 	vpop	{d8}
 8011206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801120a:	463e      	mov	r6, r7
 801120c:	4625      	mov	r5, r4
 801120e:	2401      	movs	r4, #1
 8011210:	e7ca      	b.n	80111a8 <__gethex+0xd4>
 8011212:	f04f 0900 	mov.w	r9, #0
 8011216:	1cb1      	adds	r1, r6, #2
 8011218:	e7d3      	b.n	80111c2 <__gethex+0xee>
 801121a:	f04f 0901 	mov.w	r9, #1
 801121e:	e7fa      	b.n	8011216 <__gethex+0x142>
 8011220:	230a      	movs	r3, #10
 8011222:	fb03 0202 	mla	r2, r3, r2, r0
 8011226:	3a10      	subs	r2, #16
 8011228:	e7d4      	b.n	80111d4 <__gethex+0x100>
 801122a:	4631      	mov	r1, r6
 801122c:	e7df      	b.n	80111ee <__gethex+0x11a>
 801122e:	1bf3      	subs	r3, r6, r7
 8011230:	3b01      	subs	r3, #1
 8011232:	4621      	mov	r1, r4
 8011234:	2b07      	cmp	r3, #7
 8011236:	dc0b      	bgt.n	8011250 <__gethex+0x17c>
 8011238:	ee18 0a10 	vmov	r0, s16
 801123c:	f000 fa92 	bl	8011764 <_Balloc>
 8011240:	4604      	mov	r4, r0
 8011242:	b940      	cbnz	r0, 8011256 <__gethex+0x182>
 8011244:	4b65      	ldr	r3, [pc, #404]	; (80113dc <__gethex+0x308>)
 8011246:	4602      	mov	r2, r0
 8011248:	21de      	movs	r1, #222	; 0xde
 801124a:	4865      	ldr	r0, [pc, #404]	; (80113e0 <__gethex+0x30c>)
 801124c:	f001 fbee 	bl	8012a2c <__assert_func>
 8011250:	3101      	adds	r1, #1
 8011252:	105b      	asrs	r3, r3, #1
 8011254:	e7ee      	b.n	8011234 <__gethex+0x160>
 8011256:	f100 0914 	add.w	r9, r0, #20
 801125a:	f04f 0b00 	mov.w	fp, #0
 801125e:	f1ca 0301 	rsb	r3, sl, #1
 8011262:	f8cd 9008 	str.w	r9, [sp, #8]
 8011266:	f8cd b000 	str.w	fp, [sp]
 801126a:	9306      	str	r3, [sp, #24]
 801126c:	42b7      	cmp	r7, r6
 801126e:	d340      	bcc.n	80112f2 <__gethex+0x21e>
 8011270:	9802      	ldr	r0, [sp, #8]
 8011272:	9b00      	ldr	r3, [sp, #0]
 8011274:	f840 3b04 	str.w	r3, [r0], #4
 8011278:	eba0 0009 	sub.w	r0, r0, r9
 801127c:	1080      	asrs	r0, r0, #2
 801127e:	0146      	lsls	r6, r0, #5
 8011280:	6120      	str	r0, [r4, #16]
 8011282:	4618      	mov	r0, r3
 8011284:	f000 fb64 	bl	8011950 <__hi0bits>
 8011288:	1a30      	subs	r0, r6, r0
 801128a:	f8d8 6000 	ldr.w	r6, [r8]
 801128e:	42b0      	cmp	r0, r6
 8011290:	dd63      	ble.n	801135a <__gethex+0x286>
 8011292:	1b87      	subs	r7, r0, r6
 8011294:	4639      	mov	r1, r7
 8011296:	4620      	mov	r0, r4
 8011298:	f000 fefe 	bl	8012098 <__any_on>
 801129c:	4682      	mov	sl, r0
 801129e:	b1a8      	cbz	r0, 80112cc <__gethex+0x1f8>
 80112a0:	1e7b      	subs	r3, r7, #1
 80112a2:	1159      	asrs	r1, r3, #5
 80112a4:	f003 021f 	and.w	r2, r3, #31
 80112a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80112ac:	f04f 0a01 	mov.w	sl, #1
 80112b0:	fa0a f202 	lsl.w	r2, sl, r2
 80112b4:	420a      	tst	r2, r1
 80112b6:	d009      	beq.n	80112cc <__gethex+0x1f8>
 80112b8:	4553      	cmp	r3, sl
 80112ba:	dd05      	ble.n	80112c8 <__gethex+0x1f4>
 80112bc:	1eb9      	subs	r1, r7, #2
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 feea 	bl	8012098 <__any_on>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	d145      	bne.n	8011354 <__gethex+0x280>
 80112c8:	f04f 0a02 	mov.w	sl, #2
 80112cc:	4639      	mov	r1, r7
 80112ce:	4620      	mov	r0, r4
 80112d0:	f7ff fe98 	bl	8011004 <rshift>
 80112d4:	443d      	add	r5, r7
 80112d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112da:	42ab      	cmp	r3, r5
 80112dc:	da4c      	bge.n	8011378 <__gethex+0x2a4>
 80112de:	ee18 0a10 	vmov	r0, s16
 80112e2:	4621      	mov	r1, r4
 80112e4:	f000 fa7e 	bl	80117e4 <_Bfree>
 80112e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80112ea:	2300      	movs	r3, #0
 80112ec:	6013      	str	r3, [r2, #0]
 80112ee:	27a3      	movs	r7, #163	; 0xa3
 80112f0:	e785      	b.n	80111fe <__gethex+0x12a>
 80112f2:	1e73      	subs	r3, r6, #1
 80112f4:	9a05      	ldr	r2, [sp, #20]
 80112f6:	9303      	str	r3, [sp, #12]
 80112f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d019      	beq.n	8011334 <__gethex+0x260>
 8011300:	f1bb 0f20 	cmp.w	fp, #32
 8011304:	d107      	bne.n	8011316 <__gethex+0x242>
 8011306:	9b02      	ldr	r3, [sp, #8]
 8011308:	9a00      	ldr	r2, [sp, #0]
 801130a:	f843 2b04 	str.w	r2, [r3], #4
 801130e:	9302      	str	r3, [sp, #8]
 8011310:	2300      	movs	r3, #0
 8011312:	9300      	str	r3, [sp, #0]
 8011314:	469b      	mov	fp, r3
 8011316:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801131a:	f7ff fec5 	bl	80110a8 <__hexdig_fun>
 801131e:	9b00      	ldr	r3, [sp, #0]
 8011320:	f000 000f 	and.w	r0, r0, #15
 8011324:	fa00 f00b 	lsl.w	r0, r0, fp
 8011328:	4303      	orrs	r3, r0
 801132a:	9300      	str	r3, [sp, #0]
 801132c:	f10b 0b04 	add.w	fp, fp, #4
 8011330:	9b03      	ldr	r3, [sp, #12]
 8011332:	e00d      	b.n	8011350 <__gethex+0x27c>
 8011334:	9b03      	ldr	r3, [sp, #12]
 8011336:	9a06      	ldr	r2, [sp, #24]
 8011338:	4413      	add	r3, r2
 801133a:	42bb      	cmp	r3, r7
 801133c:	d3e0      	bcc.n	8011300 <__gethex+0x22c>
 801133e:	4618      	mov	r0, r3
 8011340:	9901      	ldr	r1, [sp, #4]
 8011342:	9307      	str	r3, [sp, #28]
 8011344:	4652      	mov	r2, sl
 8011346:	f7fe ff22 	bl	801018e <strncmp>
 801134a:	9b07      	ldr	r3, [sp, #28]
 801134c:	2800      	cmp	r0, #0
 801134e:	d1d7      	bne.n	8011300 <__gethex+0x22c>
 8011350:	461e      	mov	r6, r3
 8011352:	e78b      	b.n	801126c <__gethex+0x198>
 8011354:	f04f 0a03 	mov.w	sl, #3
 8011358:	e7b8      	b.n	80112cc <__gethex+0x1f8>
 801135a:	da0a      	bge.n	8011372 <__gethex+0x29e>
 801135c:	1a37      	subs	r7, r6, r0
 801135e:	4621      	mov	r1, r4
 8011360:	ee18 0a10 	vmov	r0, s16
 8011364:	463a      	mov	r2, r7
 8011366:	f000 fc59 	bl	8011c1c <__lshift>
 801136a:	1bed      	subs	r5, r5, r7
 801136c:	4604      	mov	r4, r0
 801136e:	f100 0914 	add.w	r9, r0, #20
 8011372:	f04f 0a00 	mov.w	sl, #0
 8011376:	e7ae      	b.n	80112d6 <__gethex+0x202>
 8011378:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801137c:	42a8      	cmp	r0, r5
 801137e:	dd72      	ble.n	8011466 <__gethex+0x392>
 8011380:	1b45      	subs	r5, r0, r5
 8011382:	42ae      	cmp	r6, r5
 8011384:	dc36      	bgt.n	80113f4 <__gethex+0x320>
 8011386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801138a:	2b02      	cmp	r3, #2
 801138c:	d02a      	beq.n	80113e4 <__gethex+0x310>
 801138e:	2b03      	cmp	r3, #3
 8011390:	d02c      	beq.n	80113ec <__gethex+0x318>
 8011392:	2b01      	cmp	r3, #1
 8011394:	d115      	bne.n	80113c2 <__gethex+0x2ee>
 8011396:	42ae      	cmp	r6, r5
 8011398:	d113      	bne.n	80113c2 <__gethex+0x2ee>
 801139a:	2e01      	cmp	r6, #1
 801139c:	d10b      	bne.n	80113b6 <__gethex+0x2e2>
 801139e:	9a04      	ldr	r2, [sp, #16]
 80113a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80113a4:	6013      	str	r3, [r2, #0]
 80113a6:	2301      	movs	r3, #1
 80113a8:	6123      	str	r3, [r4, #16]
 80113aa:	f8c9 3000 	str.w	r3, [r9]
 80113ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80113b0:	2762      	movs	r7, #98	; 0x62
 80113b2:	601c      	str	r4, [r3, #0]
 80113b4:	e723      	b.n	80111fe <__gethex+0x12a>
 80113b6:	1e71      	subs	r1, r6, #1
 80113b8:	4620      	mov	r0, r4
 80113ba:	f000 fe6d 	bl	8012098 <__any_on>
 80113be:	2800      	cmp	r0, #0
 80113c0:	d1ed      	bne.n	801139e <__gethex+0x2ca>
 80113c2:	ee18 0a10 	vmov	r0, s16
 80113c6:	4621      	mov	r1, r4
 80113c8:	f000 fa0c 	bl	80117e4 <_Bfree>
 80113cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80113ce:	2300      	movs	r3, #0
 80113d0:	6013      	str	r3, [r2, #0]
 80113d2:	2750      	movs	r7, #80	; 0x50
 80113d4:	e713      	b.n	80111fe <__gethex+0x12a>
 80113d6:	bf00      	nop
 80113d8:	080147e4 	.word	0x080147e4
 80113dc:	08014768 	.word	0x08014768
 80113e0:	08014779 	.word	0x08014779
 80113e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d1eb      	bne.n	80113c2 <__gethex+0x2ee>
 80113ea:	e7d8      	b.n	801139e <__gethex+0x2ca>
 80113ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d1d5      	bne.n	801139e <__gethex+0x2ca>
 80113f2:	e7e6      	b.n	80113c2 <__gethex+0x2ee>
 80113f4:	1e6f      	subs	r7, r5, #1
 80113f6:	f1ba 0f00 	cmp.w	sl, #0
 80113fa:	d131      	bne.n	8011460 <__gethex+0x38c>
 80113fc:	b127      	cbz	r7, 8011408 <__gethex+0x334>
 80113fe:	4639      	mov	r1, r7
 8011400:	4620      	mov	r0, r4
 8011402:	f000 fe49 	bl	8012098 <__any_on>
 8011406:	4682      	mov	sl, r0
 8011408:	117b      	asrs	r3, r7, #5
 801140a:	2101      	movs	r1, #1
 801140c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011410:	f007 071f 	and.w	r7, r7, #31
 8011414:	fa01 f707 	lsl.w	r7, r1, r7
 8011418:	421f      	tst	r7, r3
 801141a:	4629      	mov	r1, r5
 801141c:	4620      	mov	r0, r4
 801141e:	bf18      	it	ne
 8011420:	f04a 0a02 	orrne.w	sl, sl, #2
 8011424:	1b76      	subs	r6, r6, r5
 8011426:	f7ff fded 	bl	8011004 <rshift>
 801142a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801142e:	2702      	movs	r7, #2
 8011430:	f1ba 0f00 	cmp.w	sl, #0
 8011434:	d048      	beq.n	80114c8 <__gethex+0x3f4>
 8011436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801143a:	2b02      	cmp	r3, #2
 801143c:	d015      	beq.n	801146a <__gethex+0x396>
 801143e:	2b03      	cmp	r3, #3
 8011440:	d017      	beq.n	8011472 <__gethex+0x39e>
 8011442:	2b01      	cmp	r3, #1
 8011444:	d109      	bne.n	801145a <__gethex+0x386>
 8011446:	f01a 0f02 	tst.w	sl, #2
 801144a:	d006      	beq.n	801145a <__gethex+0x386>
 801144c:	f8d9 0000 	ldr.w	r0, [r9]
 8011450:	ea4a 0a00 	orr.w	sl, sl, r0
 8011454:	f01a 0f01 	tst.w	sl, #1
 8011458:	d10e      	bne.n	8011478 <__gethex+0x3a4>
 801145a:	f047 0710 	orr.w	r7, r7, #16
 801145e:	e033      	b.n	80114c8 <__gethex+0x3f4>
 8011460:	f04f 0a01 	mov.w	sl, #1
 8011464:	e7d0      	b.n	8011408 <__gethex+0x334>
 8011466:	2701      	movs	r7, #1
 8011468:	e7e2      	b.n	8011430 <__gethex+0x35c>
 801146a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801146c:	f1c3 0301 	rsb	r3, r3, #1
 8011470:	9315      	str	r3, [sp, #84]	; 0x54
 8011472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011474:	2b00      	cmp	r3, #0
 8011476:	d0f0      	beq.n	801145a <__gethex+0x386>
 8011478:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801147c:	f104 0314 	add.w	r3, r4, #20
 8011480:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011484:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011488:	f04f 0c00 	mov.w	ip, #0
 801148c:	4618      	mov	r0, r3
 801148e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011492:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011496:	d01c      	beq.n	80114d2 <__gethex+0x3fe>
 8011498:	3201      	adds	r2, #1
 801149a:	6002      	str	r2, [r0, #0]
 801149c:	2f02      	cmp	r7, #2
 801149e:	f104 0314 	add.w	r3, r4, #20
 80114a2:	d13f      	bne.n	8011524 <__gethex+0x450>
 80114a4:	f8d8 2000 	ldr.w	r2, [r8]
 80114a8:	3a01      	subs	r2, #1
 80114aa:	42b2      	cmp	r2, r6
 80114ac:	d10a      	bne.n	80114c4 <__gethex+0x3f0>
 80114ae:	1171      	asrs	r1, r6, #5
 80114b0:	2201      	movs	r2, #1
 80114b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80114b6:	f006 061f 	and.w	r6, r6, #31
 80114ba:	fa02 f606 	lsl.w	r6, r2, r6
 80114be:	421e      	tst	r6, r3
 80114c0:	bf18      	it	ne
 80114c2:	4617      	movne	r7, r2
 80114c4:	f047 0720 	orr.w	r7, r7, #32
 80114c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114ca:	601c      	str	r4, [r3, #0]
 80114cc:	9b04      	ldr	r3, [sp, #16]
 80114ce:	601d      	str	r5, [r3, #0]
 80114d0:	e695      	b.n	80111fe <__gethex+0x12a>
 80114d2:	4299      	cmp	r1, r3
 80114d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80114d8:	d8d8      	bhi.n	801148c <__gethex+0x3b8>
 80114da:	68a3      	ldr	r3, [r4, #8]
 80114dc:	459b      	cmp	fp, r3
 80114de:	db19      	blt.n	8011514 <__gethex+0x440>
 80114e0:	6861      	ldr	r1, [r4, #4]
 80114e2:	ee18 0a10 	vmov	r0, s16
 80114e6:	3101      	adds	r1, #1
 80114e8:	f000 f93c 	bl	8011764 <_Balloc>
 80114ec:	4681      	mov	r9, r0
 80114ee:	b918      	cbnz	r0, 80114f8 <__gethex+0x424>
 80114f0:	4b1a      	ldr	r3, [pc, #104]	; (801155c <__gethex+0x488>)
 80114f2:	4602      	mov	r2, r0
 80114f4:	2184      	movs	r1, #132	; 0x84
 80114f6:	e6a8      	b.n	801124a <__gethex+0x176>
 80114f8:	6922      	ldr	r2, [r4, #16]
 80114fa:	3202      	adds	r2, #2
 80114fc:	f104 010c 	add.w	r1, r4, #12
 8011500:	0092      	lsls	r2, r2, #2
 8011502:	300c      	adds	r0, #12
 8011504:	f7fe fc7e 	bl	800fe04 <memcpy>
 8011508:	4621      	mov	r1, r4
 801150a:	ee18 0a10 	vmov	r0, s16
 801150e:	f000 f969 	bl	80117e4 <_Bfree>
 8011512:	464c      	mov	r4, r9
 8011514:	6923      	ldr	r3, [r4, #16]
 8011516:	1c5a      	adds	r2, r3, #1
 8011518:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801151c:	6122      	str	r2, [r4, #16]
 801151e:	2201      	movs	r2, #1
 8011520:	615a      	str	r2, [r3, #20]
 8011522:	e7bb      	b.n	801149c <__gethex+0x3c8>
 8011524:	6922      	ldr	r2, [r4, #16]
 8011526:	455a      	cmp	r2, fp
 8011528:	dd0b      	ble.n	8011542 <__gethex+0x46e>
 801152a:	2101      	movs	r1, #1
 801152c:	4620      	mov	r0, r4
 801152e:	f7ff fd69 	bl	8011004 <rshift>
 8011532:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011536:	3501      	adds	r5, #1
 8011538:	42ab      	cmp	r3, r5
 801153a:	f6ff aed0 	blt.w	80112de <__gethex+0x20a>
 801153e:	2701      	movs	r7, #1
 8011540:	e7c0      	b.n	80114c4 <__gethex+0x3f0>
 8011542:	f016 061f 	ands.w	r6, r6, #31
 8011546:	d0fa      	beq.n	801153e <__gethex+0x46a>
 8011548:	449a      	add	sl, r3
 801154a:	f1c6 0620 	rsb	r6, r6, #32
 801154e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011552:	f000 f9fd 	bl	8011950 <__hi0bits>
 8011556:	42b0      	cmp	r0, r6
 8011558:	dbe7      	blt.n	801152a <__gethex+0x456>
 801155a:	e7f0      	b.n	801153e <__gethex+0x46a>
 801155c:	08014768 	.word	0x08014768

08011560 <L_shift>:
 8011560:	f1c2 0208 	rsb	r2, r2, #8
 8011564:	0092      	lsls	r2, r2, #2
 8011566:	b570      	push	{r4, r5, r6, lr}
 8011568:	f1c2 0620 	rsb	r6, r2, #32
 801156c:	6843      	ldr	r3, [r0, #4]
 801156e:	6804      	ldr	r4, [r0, #0]
 8011570:	fa03 f506 	lsl.w	r5, r3, r6
 8011574:	432c      	orrs	r4, r5
 8011576:	40d3      	lsrs	r3, r2
 8011578:	6004      	str	r4, [r0, #0]
 801157a:	f840 3f04 	str.w	r3, [r0, #4]!
 801157e:	4288      	cmp	r0, r1
 8011580:	d3f4      	bcc.n	801156c <L_shift+0xc>
 8011582:	bd70      	pop	{r4, r5, r6, pc}

08011584 <__match>:
 8011584:	b530      	push	{r4, r5, lr}
 8011586:	6803      	ldr	r3, [r0, #0]
 8011588:	3301      	adds	r3, #1
 801158a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801158e:	b914      	cbnz	r4, 8011596 <__match+0x12>
 8011590:	6003      	str	r3, [r0, #0]
 8011592:	2001      	movs	r0, #1
 8011594:	bd30      	pop	{r4, r5, pc}
 8011596:	f813 2b01 	ldrb.w	r2, [r3], #1
 801159a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801159e:	2d19      	cmp	r5, #25
 80115a0:	bf98      	it	ls
 80115a2:	3220      	addls	r2, #32
 80115a4:	42a2      	cmp	r2, r4
 80115a6:	d0f0      	beq.n	801158a <__match+0x6>
 80115a8:	2000      	movs	r0, #0
 80115aa:	e7f3      	b.n	8011594 <__match+0x10>

080115ac <__hexnan>:
 80115ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b0:	680b      	ldr	r3, [r1, #0]
 80115b2:	6801      	ldr	r1, [r0, #0]
 80115b4:	115e      	asrs	r6, r3, #5
 80115b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80115ba:	f013 031f 	ands.w	r3, r3, #31
 80115be:	b087      	sub	sp, #28
 80115c0:	bf18      	it	ne
 80115c2:	3604      	addne	r6, #4
 80115c4:	2500      	movs	r5, #0
 80115c6:	1f37      	subs	r7, r6, #4
 80115c8:	4682      	mov	sl, r0
 80115ca:	4690      	mov	r8, r2
 80115cc:	9301      	str	r3, [sp, #4]
 80115ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80115d2:	46b9      	mov	r9, r7
 80115d4:	463c      	mov	r4, r7
 80115d6:	9502      	str	r5, [sp, #8]
 80115d8:	46ab      	mov	fp, r5
 80115da:	784a      	ldrb	r2, [r1, #1]
 80115dc:	1c4b      	adds	r3, r1, #1
 80115de:	9303      	str	r3, [sp, #12]
 80115e0:	b342      	cbz	r2, 8011634 <__hexnan+0x88>
 80115e2:	4610      	mov	r0, r2
 80115e4:	9105      	str	r1, [sp, #20]
 80115e6:	9204      	str	r2, [sp, #16]
 80115e8:	f7ff fd5e 	bl	80110a8 <__hexdig_fun>
 80115ec:	2800      	cmp	r0, #0
 80115ee:	d14f      	bne.n	8011690 <__hexnan+0xe4>
 80115f0:	9a04      	ldr	r2, [sp, #16]
 80115f2:	9905      	ldr	r1, [sp, #20]
 80115f4:	2a20      	cmp	r2, #32
 80115f6:	d818      	bhi.n	801162a <__hexnan+0x7e>
 80115f8:	9b02      	ldr	r3, [sp, #8]
 80115fa:	459b      	cmp	fp, r3
 80115fc:	dd13      	ble.n	8011626 <__hexnan+0x7a>
 80115fe:	454c      	cmp	r4, r9
 8011600:	d206      	bcs.n	8011610 <__hexnan+0x64>
 8011602:	2d07      	cmp	r5, #7
 8011604:	dc04      	bgt.n	8011610 <__hexnan+0x64>
 8011606:	462a      	mov	r2, r5
 8011608:	4649      	mov	r1, r9
 801160a:	4620      	mov	r0, r4
 801160c:	f7ff ffa8 	bl	8011560 <L_shift>
 8011610:	4544      	cmp	r4, r8
 8011612:	d950      	bls.n	80116b6 <__hexnan+0x10a>
 8011614:	2300      	movs	r3, #0
 8011616:	f1a4 0904 	sub.w	r9, r4, #4
 801161a:	f844 3c04 	str.w	r3, [r4, #-4]
 801161e:	f8cd b008 	str.w	fp, [sp, #8]
 8011622:	464c      	mov	r4, r9
 8011624:	461d      	mov	r5, r3
 8011626:	9903      	ldr	r1, [sp, #12]
 8011628:	e7d7      	b.n	80115da <__hexnan+0x2e>
 801162a:	2a29      	cmp	r2, #41	; 0x29
 801162c:	d156      	bne.n	80116dc <__hexnan+0x130>
 801162e:	3102      	adds	r1, #2
 8011630:	f8ca 1000 	str.w	r1, [sl]
 8011634:	f1bb 0f00 	cmp.w	fp, #0
 8011638:	d050      	beq.n	80116dc <__hexnan+0x130>
 801163a:	454c      	cmp	r4, r9
 801163c:	d206      	bcs.n	801164c <__hexnan+0xa0>
 801163e:	2d07      	cmp	r5, #7
 8011640:	dc04      	bgt.n	801164c <__hexnan+0xa0>
 8011642:	462a      	mov	r2, r5
 8011644:	4649      	mov	r1, r9
 8011646:	4620      	mov	r0, r4
 8011648:	f7ff ff8a 	bl	8011560 <L_shift>
 801164c:	4544      	cmp	r4, r8
 801164e:	d934      	bls.n	80116ba <__hexnan+0x10e>
 8011650:	f1a8 0204 	sub.w	r2, r8, #4
 8011654:	4623      	mov	r3, r4
 8011656:	f853 1b04 	ldr.w	r1, [r3], #4
 801165a:	f842 1f04 	str.w	r1, [r2, #4]!
 801165e:	429f      	cmp	r7, r3
 8011660:	d2f9      	bcs.n	8011656 <__hexnan+0xaa>
 8011662:	1b3b      	subs	r3, r7, r4
 8011664:	f023 0303 	bic.w	r3, r3, #3
 8011668:	3304      	adds	r3, #4
 801166a:	3401      	adds	r4, #1
 801166c:	3e03      	subs	r6, #3
 801166e:	42b4      	cmp	r4, r6
 8011670:	bf88      	it	hi
 8011672:	2304      	movhi	r3, #4
 8011674:	4443      	add	r3, r8
 8011676:	2200      	movs	r2, #0
 8011678:	f843 2b04 	str.w	r2, [r3], #4
 801167c:	429f      	cmp	r7, r3
 801167e:	d2fb      	bcs.n	8011678 <__hexnan+0xcc>
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	b91b      	cbnz	r3, 801168c <__hexnan+0xe0>
 8011684:	4547      	cmp	r7, r8
 8011686:	d127      	bne.n	80116d8 <__hexnan+0x12c>
 8011688:	2301      	movs	r3, #1
 801168a:	603b      	str	r3, [r7, #0]
 801168c:	2005      	movs	r0, #5
 801168e:	e026      	b.n	80116de <__hexnan+0x132>
 8011690:	3501      	adds	r5, #1
 8011692:	2d08      	cmp	r5, #8
 8011694:	f10b 0b01 	add.w	fp, fp, #1
 8011698:	dd06      	ble.n	80116a8 <__hexnan+0xfc>
 801169a:	4544      	cmp	r4, r8
 801169c:	d9c3      	bls.n	8011626 <__hexnan+0x7a>
 801169e:	2300      	movs	r3, #0
 80116a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80116a4:	2501      	movs	r5, #1
 80116a6:	3c04      	subs	r4, #4
 80116a8:	6822      	ldr	r2, [r4, #0]
 80116aa:	f000 000f 	and.w	r0, r0, #15
 80116ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80116b2:	6022      	str	r2, [r4, #0]
 80116b4:	e7b7      	b.n	8011626 <__hexnan+0x7a>
 80116b6:	2508      	movs	r5, #8
 80116b8:	e7b5      	b.n	8011626 <__hexnan+0x7a>
 80116ba:	9b01      	ldr	r3, [sp, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d0df      	beq.n	8011680 <__hexnan+0xd4>
 80116c0:	f04f 32ff 	mov.w	r2, #4294967295
 80116c4:	f1c3 0320 	rsb	r3, r3, #32
 80116c8:	fa22 f303 	lsr.w	r3, r2, r3
 80116cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80116d0:	401a      	ands	r2, r3
 80116d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80116d6:	e7d3      	b.n	8011680 <__hexnan+0xd4>
 80116d8:	3f04      	subs	r7, #4
 80116da:	e7d1      	b.n	8011680 <__hexnan+0xd4>
 80116dc:	2004      	movs	r0, #4
 80116de:	b007      	add	sp, #28
 80116e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080116e4 <_isatty_r>:
 80116e4:	b538      	push	{r3, r4, r5, lr}
 80116e6:	4d06      	ldr	r5, [pc, #24]	; (8011700 <_isatty_r+0x1c>)
 80116e8:	2300      	movs	r3, #0
 80116ea:	4604      	mov	r4, r0
 80116ec:	4608      	mov	r0, r1
 80116ee:	602b      	str	r3, [r5, #0]
 80116f0:	f7f1 f9d5 	bl	8002a9e <_isatty>
 80116f4:	1c43      	adds	r3, r0, #1
 80116f6:	d102      	bne.n	80116fe <_isatty_r+0x1a>
 80116f8:	682b      	ldr	r3, [r5, #0]
 80116fa:	b103      	cbz	r3, 80116fe <_isatty_r+0x1a>
 80116fc:	6023      	str	r3, [r4, #0]
 80116fe:	bd38      	pop	{r3, r4, r5, pc}
 8011700:	20003414 	.word	0x20003414

08011704 <_lseek_r>:
 8011704:	b538      	push	{r3, r4, r5, lr}
 8011706:	4d07      	ldr	r5, [pc, #28]	; (8011724 <_lseek_r+0x20>)
 8011708:	4604      	mov	r4, r0
 801170a:	4608      	mov	r0, r1
 801170c:	4611      	mov	r1, r2
 801170e:	2200      	movs	r2, #0
 8011710:	602a      	str	r2, [r5, #0]
 8011712:	461a      	mov	r2, r3
 8011714:	f7f1 f9ce 	bl	8002ab4 <_lseek>
 8011718:	1c43      	adds	r3, r0, #1
 801171a:	d102      	bne.n	8011722 <_lseek_r+0x1e>
 801171c:	682b      	ldr	r3, [r5, #0]
 801171e:	b103      	cbz	r3, 8011722 <_lseek_r+0x1e>
 8011720:	6023      	str	r3, [r4, #0]
 8011722:	bd38      	pop	{r3, r4, r5, pc}
 8011724:	20003414 	.word	0x20003414

08011728 <__ascii_mbtowc>:
 8011728:	b082      	sub	sp, #8
 801172a:	b901      	cbnz	r1, 801172e <__ascii_mbtowc+0x6>
 801172c:	a901      	add	r1, sp, #4
 801172e:	b142      	cbz	r2, 8011742 <__ascii_mbtowc+0x1a>
 8011730:	b14b      	cbz	r3, 8011746 <__ascii_mbtowc+0x1e>
 8011732:	7813      	ldrb	r3, [r2, #0]
 8011734:	600b      	str	r3, [r1, #0]
 8011736:	7812      	ldrb	r2, [r2, #0]
 8011738:	1e10      	subs	r0, r2, #0
 801173a:	bf18      	it	ne
 801173c:	2001      	movne	r0, #1
 801173e:	b002      	add	sp, #8
 8011740:	4770      	bx	lr
 8011742:	4610      	mov	r0, r2
 8011744:	e7fb      	b.n	801173e <__ascii_mbtowc+0x16>
 8011746:	f06f 0001 	mvn.w	r0, #1
 801174a:	e7f8      	b.n	801173e <__ascii_mbtowc+0x16>

0801174c <__malloc_lock>:
 801174c:	4801      	ldr	r0, [pc, #4]	; (8011754 <__malloc_lock+0x8>)
 801174e:	f7fe bae2 	b.w	800fd16 <__retarget_lock_acquire_recursive>
 8011752:	bf00      	nop
 8011754:	2000340c 	.word	0x2000340c

08011758 <__malloc_unlock>:
 8011758:	4801      	ldr	r0, [pc, #4]	; (8011760 <__malloc_unlock+0x8>)
 801175a:	f7fe badd 	b.w	800fd18 <__retarget_lock_release_recursive>
 801175e:	bf00      	nop
 8011760:	2000340c 	.word	0x2000340c

08011764 <_Balloc>:
 8011764:	b570      	push	{r4, r5, r6, lr}
 8011766:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011768:	4604      	mov	r4, r0
 801176a:	460d      	mov	r5, r1
 801176c:	b976      	cbnz	r6, 801178c <_Balloc+0x28>
 801176e:	2010      	movs	r0, #16
 8011770:	f7fe fb38 	bl	800fde4 <malloc>
 8011774:	4602      	mov	r2, r0
 8011776:	6260      	str	r0, [r4, #36]	; 0x24
 8011778:	b920      	cbnz	r0, 8011784 <_Balloc+0x20>
 801177a:	4b18      	ldr	r3, [pc, #96]	; (80117dc <_Balloc+0x78>)
 801177c:	4818      	ldr	r0, [pc, #96]	; (80117e0 <_Balloc+0x7c>)
 801177e:	2166      	movs	r1, #102	; 0x66
 8011780:	f001 f954 	bl	8012a2c <__assert_func>
 8011784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011788:	6006      	str	r6, [r0, #0]
 801178a:	60c6      	str	r6, [r0, #12]
 801178c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801178e:	68f3      	ldr	r3, [r6, #12]
 8011790:	b183      	cbz	r3, 80117b4 <_Balloc+0x50>
 8011792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011794:	68db      	ldr	r3, [r3, #12]
 8011796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801179a:	b9b8      	cbnz	r0, 80117cc <_Balloc+0x68>
 801179c:	2101      	movs	r1, #1
 801179e:	fa01 f605 	lsl.w	r6, r1, r5
 80117a2:	1d72      	adds	r2, r6, #5
 80117a4:	0092      	lsls	r2, r2, #2
 80117a6:	4620      	mov	r0, r4
 80117a8:	f000 fc97 	bl	80120da <_calloc_r>
 80117ac:	b160      	cbz	r0, 80117c8 <_Balloc+0x64>
 80117ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80117b2:	e00e      	b.n	80117d2 <_Balloc+0x6e>
 80117b4:	2221      	movs	r2, #33	; 0x21
 80117b6:	2104      	movs	r1, #4
 80117b8:	4620      	mov	r0, r4
 80117ba:	f000 fc8e 	bl	80120da <_calloc_r>
 80117be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117c0:	60f0      	str	r0, [r6, #12]
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1e4      	bne.n	8011792 <_Balloc+0x2e>
 80117c8:	2000      	movs	r0, #0
 80117ca:	bd70      	pop	{r4, r5, r6, pc}
 80117cc:	6802      	ldr	r2, [r0, #0]
 80117ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80117d2:	2300      	movs	r3, #0
 80117d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80117d8:	e7f7      	b.n	80117ca <_Balloc+0x66>
 80117da:	bf00      	nop
 80117dc:	080147f8 	.word	0x080147f8
 80117e0:	0801480f 	.word	0x0801480f

080117e4 <_Bfree>:
 80117e4:	b570      	push	{r4, r5, r6, lr}
 80117e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80117e8:	4605      	mov	r5, r0
 80117ea:	460c      	mov	r4, r1
 80117ec:	b976      	cbnz	r6, 801180c <_Bfree+0x28>
 80117ee:	2010      	movs	r0, #16
 80117f0:	f7fe faf8 	bl	800fde4 <malloc>
 80117f4:	4602      	mov	r2, r0
 80117f6:	6268      	str	r0, [r5, #36]	; 0x24
 80117f8:	b920      	cbnz	r0, 8011804 <_Bfree+0x20>
 80117fa:	4b09      	ldr	r3, [pc, #36]	; (8011820 <_Bfree+0x3c>)
 80117fc:	4809      	ldr	r0, [pc, #36]	; (8011824 <_Bfree+0x40>)
 80117fe:	218a      	movs	r1, #138	; 0x8a
 8011800:	f001 f914 	bl	8012a2c <__assert_func>
 8011804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011808:	6006      	str	r6, [r0, #0]
 801180a:	60c6      	str	r6, [r0, #12]
 801180c:	b13c      	cbz	r4, 801181e <_Bfree+0x3a>
 801180e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011810:	6862      	ldr	r2, [r4, #4]
 8011812:	68db      	ldr	r3, [r3, #12]
 8011814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011818:	6021      	str	r1, [r4, #0]
 801181a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801181e:	bd70      	pop	{r4, r5, r6, pc}
 8011820:	080147f8 	.word	0x080147f8
 8011824:	0801480f 	.word	0x0801480f

08011828 <__multadd>:
 8011828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801182c:	690e      	ldr	r6, [r1, #16]
 801182e:	4607      	mov	r7, r0
 8011830:	4698      	mov	r8, r3
 8011832:	460c      	mov	r4, r1
 8011834:	f101 0014 	add.w	r0, r1, #20
 8011838:	2300      	movs	r3, #0
 801183a:	6805      	ldr	r5, [r0, #0]
 801183c:	b2a9      	uxth	r1, r5
 801183e:	fb02 8101 	mla	r1, r2, r1, r8
 8011842:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011846:	0c2d      	lsrs	r5, r5, #16
 8011848:	fb02 c505 	mla	r5, r2, r5, ip
 801184c:	b289      	uxth	r1, r1
 801184e:	3301      	adds	r3, #1
 8011850:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011854:	429e      	cmp	r6, r3
 8011856:	f840 1b04 	str.w	r1, [r0], #4
 801185a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801185e:	dcec      	bgt.n	801183a <__multadd+0x12>
 8011860:	f1b8 0f00 	cmp.w	r8, #0
 8011864:	d022      	beq.n	80118ac <__multadd+0x84>
 8011866:	68a3      	ldr	r3, [r4, #8]
 8011868:	42b3      	cmp	r3, r6
 801186a:	dc19      	bgt.n	80118a0 <__multadd+0x78>
 801186c:	6861      	ldr	r1, [r4, #4]
 801186e:	4638      	mov	r0, r7
 8011870:	3101      	adds	r1, #1
 8011872:	f7ff ff77 	bl	8011764 <_Balloc>
 8011876:	4605      	mov	r5, r0
 8011878:	b928      	cbnz	r0, 8011886 <__multadd+0x5e>
 801187a:	4602      	mov	r2, r0
 801187c:	4b0d      	ldr	r3, [pc, #52]	; (80118b4 <__multadd+0x8c>)
 801187e:	480e      	ldr	r0, [pc, #56]	; (80118b8 <__multadd+0x90>)
 8011880:	21b5      	movs	r1, #181	; 0xb5
 8011882:	f001 f8d3 	bl	8012a2c <__assert_func>
 8011886:	6922      	ldr	r2, [r4, #16]
 8011888:	3202      	adds	r2, #2
 801188a:	f104 010c 	add.w	r1, r4, #12
 801188e:	0092      	lsls	r2, r2, #2
 8011890:	300c      	adds	r0, #12
 8011892:	f7fe fab7 	bl	800fe04 <memcpy>
 8011896:	4621      	mov	r1, r4
 8011898:	4638      	mov	r0, r7
 801189a:	f7ff ffa3 	bl	80117e4 <_Bfree>
 801189e:	462c      	mov	r4, r5
 80118a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80118a4:	3601      	adds	r6, #1
 80118a6:	f8c3 8014 	str.w	r8, [r3, #20]
 80118aa:	6126      	str	r6, [r4, #16]
 80118ac:	4620      	mov	r0, r4
 80118ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b2:	bf00      	nop
 80118b4:	08014768 	.word	0x08014768
 80118b8:	0801480f 	.word	0x0801480f

080118bc <__s2b>:
 80118bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118c0:	460c      	mov	r4, r1
 80118c2:	4615      	mov	r5, r2
 80118c4:	461f      	mov	r7, r3
 80118c6:	2209      	movs	r2, #9
 80118c8:	3308      	adds	r3, #8
 80118ca:	4606      	mov	r6, r0
 80118cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80118d0:	2100      	movs	r1, #0
 80118d2:	2201      	movs	r2, #1
 80118d4:	429a      	cmp	r2, r3
 80118d6:	db09      	blt.n	80118ec <__s2b+0x30>
 80118d8:	4630      	mov	r0, r6
 80118da:	f7ff ff43 	bl	8011764 <_Balloc>
 80118de:	b940      	cbnz	r0, 80118f2 <__s2b+0x36>
 80118e0:	4602      	mov	r2, r0
 80118e2:	4b19      	ldr	r3, [pc, #100]	; (8011948 <__s2b+0x8c>)
 80118e4:	4819      	ldr	r0, [pc, #100]	; (801194c <__s2b+0x90>)
 80118e6:	21ce      	movs	r1, #206	; 0xce
 80118e8:	f001 f8a0 	bl	8012a2c <__assert_func>
 80118ec:	0052      	lsls	r2, r2, #1
 80118ee:	3101      	adds	r1, #1
 80118f0:	e7f0      	b.n	80118d4 <__s2b+0x18>
 80118f2:	9b08      	ldr	r3, [sp, #32]
 80118f4:	6143      	str	r3, [r0, #20]
 80118f6:	2d09      	cmp	r5, #9
 80118f8:	f04f 0301 	mov.w	r3, #1
 80118fc:	6103      	str	r3, [r0, #16]
 80118fe:	dd16      	ble.n	801192e <__s2b+0x72>
 8011900:	f104 0909 	add.w	r9, r4, #9
 8011904:	46c8      	mov	r8, r9
 8011906:	442c      	add	r4, r5
 8011908:	f818 3b01 	ldrb.w	r3, [r8], #1
 801190c:	4601      	mov	r1, r0
 801190e:	3b30      	subs	r3, #48	; 0x30
 8011910:	220a      	movs	r2, #10
 8011912:	4630      	mov	r0, r6
 8011914:	f7ff ff88 	bl	8011828 <__multadd>
 8011918:	45a0      	cmp	r8, r4
 801191a:	d1f5      	bne.n	8011908 <__s2b+0x4c>
 801191c:	f1a5 0408 	sub.w	r4, r5, #8
 8011920:	444c      	add	r4, r9
 8011922:	1b2d      	subs	r5, r5, r4
 8011924:	1963      	adds	r3, r4, r5
 8011926:	42bb      	cmp	r3, r7
 8011928:	db04      	blt.n	8011934 <__s2b+0x78>
 801192a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801192e:	340a      	adds	r4, #10
 8011930:	2509      	movs	r5, #9
 8011932:	e7f6      	b.n	8011922 <__s2b+0x66>
 8011934:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011938:	4601      	mov	r1, r0
 801193a:	3b30      	subs	r3, #48	; 0x30
 801193c:	220a      	movs	r2, #10
 801193e:	4630      	mov	r0, r6
 8011940:	f7ff ff72 	bl	8011828 <__multadd>
 8011944:	e7ee      	b.n	8011924 <__s2b+0x68>
 8011946:	bf00      	nop
 8011948:	08014768 	.word	0x08014768
 801194c:	0801480f 	.word	0x0801480f

08011950 <__hi0bits>:
 8011950:	0c03      	lsrs	r3, r0, #16
 8011952:	041b      	lsls	r3, r3, #16
 8011954:	b9d3      	cbnz	r3, 801198c <__hi0bits+0x3c>
 8011956:	0400      	lsls	r0, r0, #16
 8011958:	2310      	movs	r3, #16
 801195a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801195e:	bf04      	itt	eq
 8011960:	0200      	lsleq	r0, r0, #8
 8011962:	3308      	addeq	r3, #8
 8011964:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011968:	bf04      	itt	eq
 801196a:	0100      	lsleq	r0, r0, #4
 801196c:	3304      	addeq	r3, #4
 801196e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011972:	bf04      	itt	eq
 8011974:	0080      	lsleq	r0, r0, #2
 8011976:	3302      	addeq	r3, #2
 8011978:	2800      	cmp	r0, #0
 801197a:	db05      	blt.n	8011988 <__hi0bits+0x38>
 801197c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011980:	f103 0301 	add.w	r3, r3, #1
 8011984:	bf08      	it	eq
 8011986:	2320      	moveq	r3, #32
 8011988:	4618      	mov	r0, r3
 801198a:	4770      	bx	lr
 801198c:	2300      	movs	r3, #0
 801198e:	e7e4      	b.n	801195a <__hi0bits+0xa>

08011990 <__lo0bits>:
 8011990:	6803      	ldr	r3, [r0, #0]
 8011992:	f013 0207 	ands.w	r2, r3, #7
 8011996:	4601      	mov	r1, r0
 8011998:	d00b      	beq.n	80119b2 <__lo0bits+0x22>
 801199a:	07da      	lsls	r2, r3, #31
 801199c:	d424      	bmi.n	80119e8 <__lo0bits+0x58>
 801199e:	0798      	lsls	r0, r3, #30
 80119a0:	bf49      	itett	mi
 80119a2:	085b      	lsrmi	r3, r3, #1
 80119a4:	089b      	lsrpl	r3, r3, #2
 80119a6:	2001      	movmi	r0, #1
 80119a8:	600b      	strmi	r3, [r1, #0]
 80119aa:	bf5c      	itt	pl
 80119ac:	600b      	strpl	r3, [r1, #0]
 80119ae:	2002      	movpl	r0, #2
 80119b0:	4770      	bx	lr
 80119b2:	b298      	uxth	r0, r3
 80119b4:	b9b0      	cbnz	r0, 80119e4 <__lo0bits+0x54>
 80119b6:	0c1b      	lsrs	r3, r3, #16
 80119b8:	2010      	movs	r0, #16
 80119ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80119be:	bf04      	itt	eq
 80119c0:	0a1b      	lsreq	r3, r3, #8
 80119c2:	3008      	addeq	r0, #8
 80119c4:	071a      	lsls	r2, r3, #28
 80119c6:	bf04      	itt	eq
 80119c8:	091b      	lsreq	r3, r3, #4
 80119ca:	3004      	addeq	r0, #4
 80119cc:	079a      	lsls	r2, r3, #30
 80119ce:	bf04      	itt	eq
 80119d0:	089b      	lsreq	r3, r3, #2
 80119d2:	3002      	addeq	r0, #2
 80119d4:	07da      	lsls	r2, r3, #31
 80119d6:	d403      	bmi.n	80119e0 <__lo0bits+0x50>
 80119d8:	085b      	lsrs	r3, r3, #1
 80119da:	f100 0001 	add.w	r0, r0, #1
 80119de:	d005      	beq.n	80119ec <__lo0bits+0x5c>
 80119e0:	600b      	str	r3, [r1, #0]
 80119e2:	4770      	bx	lr
 80119e4:	4610      	mov	r0, r2
 80119e6:	e7e8      	b.n	80119ba <__lo0bits+0x2a>
 80119e8:	2000      	movs	r0, #0
 80119ea:	4770      	bx	lr
 80119ec:	2020      	movs	r0, #32
 80119ee:	4770      	bx	lr

080119f0 <__i2b>:
 80119f0:	b510      	push	{r4, lr}
 80119f2:	460c      	mov	r4, r1
 80119f4:	2101      	movs	r1, #1
 80119f6:	f7ff feb5 	bl	8011764 <_Balloc>
 80119fa:	4602      	mov	r2, r0
 80119fc:	b928      	cbnz	r0, 8011a0a <__i2b+0x1a>
 80119fe:	4b05      	ldr	r3, [pc, #20]	; (8011a14 <__i2b+0x24>)
 8011a00:	4805      	ldr	r0, [pc, #20]	; (8011a18 <__i2b+0x28>)
 8011a02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011a06:	f001 f811 	bl	8012a2c <__assert_func>
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	6144      	str	r4, [r0, #20]
 8011a0e:	6103      	str	r3, [r0, #16]
 8011a10:	bd10      	pop	{r4, pc}
 8011a12:	bf00      	nop
 8011a14:	08014768 	.word	0x08014768
 8011a18:	0801480f 	.word	0x0801480f

08011a1c <__multiply>:
 8011a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a20:	4614      	mov	r4, r2
 8011a22:	690a      	ldr	r2, [r1, #16]
 8011a24:	6923      	ldr	r3, [r4, #16]
 8011a26:	429a      	cmp	r2, r3
 8011a28:	bfb8      	it	lt
 8011a2a:	460b      	movlt	r3, r1
 8011a2c:	460d      	mov	r5, r1
 8011a2e:	bfbc      	itt	lt
 8011a30:	4625      	movlt	r5, r4
 8011a32:	461c      	movlt	r4, r3
 8011a34:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011a38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011a3c:	68ab      	ldr	r3, [r5, #8]
 8011a3e:	6869      	ldr	r1, [r5, #4]
 8011a40:	eb0a 0709 	add.w	r7, sl, r9
 8011a44:	42bb      	cmp	r3, r7
 8011a46:	b085      	sub	sp, #20
 8011a48:	bfb8      	it	lt
 8011a4a:	3101      	addlt	r1, #1
 8011a4c:	f7ff fe8a 	bl	8011764 <_Balloc>
 8011a50:	b930      	cbnz	r0, 8011a60 <__multiply+0x44>
 8011a52:	4602      	mov	r2, r0
 8011a54:	4b42      	ldr	r3, [pc, #264]	; (8011b60 <__multiply+0x144>)
 8011a56:	4843      	ldr	r0, [pc, #268]	; (8011b64 <__multiply+0x148>)
 8011a58:	f240 115d 	movw	r1, #349	; 0x15d
 8011a5c:	f000 ffe6 	bl	8012a2c <__assert_func>
 8011a60:	f100 0614 	add.w	r6, r0, #20
 8011a64:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011a68:	4633      	mov	r3, r6
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	4543      	cmp	r3, r8
 8011a6e:	d31e      	bcc.n	8011aae <__multiply+0x92>
 8011a70:	f105 0c14 	add.w	ip, r5, #20
 8011a74:	f104 0314 	add.w	r3, r4, #20
 8011a78:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011a7c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011a80:	9202      	str	r2, [sp, #8]
 8011a82:	ebac 0205 	sub.w	r2, ip, r5
 8011a86:	3a15      	subs	r2, #21
 8011a88:	f022 0203 	bic.w	r2, r2, #3
 8011a8c:	3204      	adds	r2, #4
 8011a8e:	f105 0115 	add.w	r1, r5, #21
 8011a92:	458c      	cmp	ip, r1
 8011a94:	bf38      	it	cc
 8011a96:	2204      	movcc	r2, #4
 8011a98:	9201      	str	r2, [sp, #4]
 8011a9a:	9a02      	ldr	r2, [sp, #8]
 8011a9c:	9303      	str	r3, [sp, #12]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d808      	bhi.n	8011ab4 <__multiply+0x98>
 8011aa2:	2f00      	cmp	r7, #0
 8011aa4:	dc55      	bgt.n	8011b52 <__multiply+0x136>
 8011aa6:	6107      	str	r7, [r0, #16]
 8011aa8:	b005      	add	sp, #20
 8011aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aae:	f843 2b04 	str.w	r2, [r3], #4
 8011ab2:	e7db      	b.n	8011a6c <__multiply+0x50>
 8011ab4:	f8b3 a000 	ldrh.w	sl, [r3]
 8011ab8:	f1ba 0f00 	cmp.w	sl, #0
 8011abc:	d020      	beq.n	8011b00 <__multiply+0xe4>
 8011abe:	f105 0e14 	add.w	lr, r5, #20
 8011ac2:	46b1      	mov	r9, r6
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011aca:	f8d9 b000 	ldr.w	fp, [r9]
 8011ace:	b2a1      	uxth	r1, r4
 8011ad0:	fa1f fb8b 	uxth.w	fp, fp
 8011ad4:	fb0a b101 	mla	r1, sl, r1, fp
 8011ad8:	4411      	add	r1, r2
 8011ada:	f8d9 2000 	ldr.w	r2, [r9]
 8011ade:	0c24      	lsrs	r4, r4, #16
 8011ae0:	0c12      	lsrs	r2, r2, #16
 8011ae2:	fb0a 2404 	mla	r4, sl, r4, r2
 8011ae6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011aea:	b289      	uxth	r1, r1
 8011aec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011af0:	45f4      	cmp	ip, lr
 8011af2:	f849 1b04 	str.w	r1, [r9], #4
 8011af6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011afa:	d8e4      	bhi.n	8011ac6 <__multiply+0xaa>
 8011afc:	9901      	ldr	r1, [sp, #4]
 8011afe:	5072      	str	r2, [r6, r1]
 8011b00:	9a03      	ldr	r2, [sp, #12]
 8011b02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011b06:	3304      	adds	r3, #4
 8011b08:	f1b9 0f00 	cmp.w	r9, #0
 8011b0c:	d01f      	beq.n	8011b4e <__multiply+0x132>
 8011b0e:	6834      	ldr	r4, [r6, #0]
 8011b10:	f105 0114 	add.w	r1, r5, #20
 8011b14:	46b6      	mov	lr, r6
 8011b16:	f04f 0a00 	mov.w	sl, #0
 8011b1a:	880a      	ldrh	r2, [r1, #0]
 8011b1c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011b20:	fb09 b202 	mla	r2, r9, r2, fp
 8011b24:	4492      	add	sl, r2
 8011b26:	b2a4      	uxth	r4, r4
 8011b28:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011b2c:	f84e 4b04 	str.w	r4, [lr], #4
 8011b30:	f851 4b04 	ldr.w	r4, [r1], #4
 8011b34:	f8be 2000 	ldrh.w	r2, [lr]
 8011b38:	0c24      	lsrs	r4, r4, #16
 8011b3a:	fb09 2404 	mla	r4, r9, r4, r2
 8011b3e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011b42:	458c      	cmp	ip, r1
 8011b44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011b48:	d8e7      	bhi.n	8011b1a <__multiply+0xfe>
 8011b4a:	9a01      	ldr	r2, [sp, #4]
 8011b4c:	50b4      	str	r4, [r6, r2]
 8011b4e:	3604      	adds	r6, #4
 8011b50:	e7a3      	b.n	8011a9a <__multiply+0x7e>
 8011b52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d1a5      	bne.n	8011aa6 <__multiply+0x8a>
 8011b5a:	3f01      	subs	r7, #1
 8011b5c:	e7a1      	b.n	8011aa2 <__multiply+0x86>
 8011b5e:	bf00      	nop
 8011b60:	08014768 	.word	0x08014768
 8011b64:	0801480f 	.word	0x0801480f

08011b68 <__pow5mult>:
 8011b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b6c:	4615      	mov	r5, r2
 8011b6e:	f012 0203 	ands.w	r2, r2, #3
 8011b72:	4606      	mov	r6, r0
 8011b74:	460f      	mov	r7, r1
 8011b76:	d007      	beq.n	8011b88 <__pow5mult+0x20>
 8011b78:	4c25      	ldr	r4, [pc, #148]	; (8011c10 <__pow5mult+0xa8>)
 8011b7a:	3a01      	subs	r2, #1
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011b82:	f7ff fe51 	bl	8011828 <__multadd>
 8011b86:	4607      	mov	r7, r0
 8011b88:	10ad      	asrs	r5, r5, #2
 8011b8a:	d03d      	beq.n	8011c08 <__pow5mult+0xa0>
 8011b8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011b8e:	b97c      	cbnz	r4, 8011bb0 <__pow5mult+0x48>
 8011b90:	2010      	movs	r0, #16
 8011b92:	f7fe f927 	bl	800fde4 <malloc>
 8011b96:	4602      	mov	r2, r0
 8011b98:	6270      	str	r0, [r6, #36]	; 0x24
 8011b9a:	b928      	cbnz	r0, 8011ba8 <__pow5mult+0x40>
 8011b9c:	4b1d      	ldr	r3, [pc, #116]	; (8011c14 <__pow5mult+0xac>)
 8011b9e:	481e      	ldr	r0, [pc, #120]	; (8011c18 <__pow5mult+0xb0>)
 8011ba0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011ba4:	f000 ff42 	bl	8012a2c <__assert_func>
 8011ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011bac:	6004      	str	r4, [r0, #0]
 8011bae:	60c4      	str	r4, [r0, #12]
 8011bb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011bb8:	b94c      	cbnz	r4, 8011bce <__pow5mult+0x66>
 8011bba:	f240 2171 	movw	r1, #625	; 0x271
 8011bbe:	4630      	mov	r0, r6
 8011bc0:	f7ff ff16 	bl	80119f0 <__i2b>
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8011bca:	4604      	mov	r4, r0
 8011bcc:	6003      	str	r3, [r0, #0]
 8011bce:	f04f 0900 	mov.w	r9, #0
 8011bd2:	07eb      	lsls	r3, r5, #31
 8011bd4:	d50a      	bpl.n	8011bec <__pow5mult+0x84>
 8011bd6:	4639      	mov	r1, r7
 8011bd8:	4622      	mov	r2, r4
 8011bda:	4630      	mov	r0, r6
 8011bdc:	f7ff ff1e 	bl	8011a1c <__multiply>
 8011be0:	4639      	mov	r1, r7
 8011be2:	4680      	mov	r8, r0
 8011be4:	4630      	mov	r0, r6
 8011be6:	f7ff fdfd 	bl	80117e4 <_Bfree>
 8011bea:	4647      	mov	r7, r8
 8011bec:	106d      	asrs	r5, r5, #1
 8011bee:	d00b      	beq.n	8011c08 <__pow5mult+0xa0>
 8011bf0:	6820      	ldr	r0, [r4, #0]
 8011bf2:	b938      	cbnz	r0, 8011c04 <__pow5mult+0x9c>
 8011bf4:	4622      	mov	r2, r4
 8011bf6:	4621      	mov	r1, r4
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	f7ff ff0f 	bl	8011a1c <__multiply>
 8011bfe:	6020      	str	r0, [r4, #0]
 8011c00:	f8c0 9000 	str.w	r9, [r0]
 8011c04:	4604      	mov	r4, r0
 8011c06:	e7e4      	b.n	8011bd2 <__pow5mult+0x6a>
 8011c08:	4638      	mov	r0, r7
 8011c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c0e:	bf00      	nop
 8011c10:	08014960 	.word	0x08014960
 8011c14:	080147f8 	.word	0x080147f8
 8011c18:	0801480f 	.word	0x0801480f

08011c1c <__lshift>:
 8011c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c20:	460c      	mov	r4, r1
 8011c22:	6849      	ldr	r1, [r1, #4]
 8011c24:	6923      	ldr	r3, [r4, #16]
 8011c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011c2a:	68a3      	ldr	r3, [r4, #8]
 8011c2c:	4607      	mov	r7, r0
 8011c2e:	4691      	mov	r9, r2
 8011c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011c34:	f108 0601 	add.w	r6, r8, #1
 8011c38:	42b3      	cmp	r3, r6
 8011c3a:	db0b      	blt.n	8011c54 <__lshift+0x38>
 8011c3c:	4638      	mov	r0, r7
 8011c3e:	f7ff fd91 	bl	8011764 <_Balloc>
 8011c42:	4605      	mov	r5, r0
 8011c44:	b948      	cbnz	r0, 8011c5a <__lshift+0x3e>
 8011c46:	4602      	mov	r2, r0
 8011c48:	4b28      	ldr	r3, [pc, #160]	; (8011cec <__lshift+0xd0>)
 8011c4a:	4829      	ldr	r0, [pc, #164]	; (8011cf0 <__lshift+0xd4>)
 8011c4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011c50:	f000 feec 	bl	8012a2c <__assert_func>
 8011c54:	3101      	adds	r1, #1
 8011c56:	005b      	lsls	r3, r3, #1
 8011c58:	e7ee      	b.n	8011c38 <__lshift+0x1c>
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	f100 0114 	add.w	r1, r0, #20
 8011c60:	f100 0210 	add.w	r2, r0, #16
 8011c64:	4618      	mov	r0, r3
 8011c66:	4553      	cmp	r3, sl
 8011c68:	db33      	blt.n	8011cd2 <__lshift+0xb6>
 8011c6a:	6920      	ldr	r0, [r4, #16]
 8011c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011c70:	f104 0314 	add.w	r3, r4, #20
 8011c74:	f019 091f 	ands.w	r9, r9, #31
 8011c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011c80:	d02b      	beq.n	8011cda <__lshift+0xbe>
 8011c82:	f1c9 0e20 	rsb	lr, r9, #32
 8011c86:	468a      	mov	sl, r1
 8011c88:	2200      	movs	r2, #0
 8011c8a:	6818      	ldr	r0, [r3, #0]
 8011c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8011c90:	4302      	orrs	r2, r0
 8011c92:	f84a 2b04 	str.w	r2, [sl], #4
 8011c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c9a:	459c      	cmp	ip, r3
 8011c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011ca0:	d8f3      	bhi.n	8011c8a <__lshift+0x6e>
 8011ca2:	ebac 0304 	sub.w	r3, ip, r4
 8011ca6:	3b15      	subs	r3, #21
 8011ca8:	f023 0303 	bic.w	r3, r3, #3
 8011cac:	3304      	adds	r3, #4
 8011cae:	f104 0015 	add.w	r0, r4, #21
 8011cb2:	4584      	cmp	ip, r0
 8011cb4:	bf38      	it	cc
 8011cb6:	2304      	movcc	r3, #4
 8011cb8:	50ca      	str	r2, [r1, r3]
 8011cba:	b10a      	cbz	r2, 8011cc0 <__lshift+0xa4>
 8011cbc:	f108 0602 	add.w	r6, r8, #2
 8011cc0:	3e01      	subs	r6, #1
 8011cc2:	4638      	mov	r0, r7
 8011cc4:	612e      	str	r6, [r5, #16]
 8011cc6:	4621      	mov	r1, r4
 8011cc8:	f7ff fd8c 	bl	80117e4 <_Bfree>
 8011ccc:	4628      	mov	r0, r5
 8011cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	e7c5      	b.n	8011c66 <__lshift+0x4a>
 8011cda:	3904      	subs	r1, #4
 8011cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ce0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011ce4:	459c      	cmp	ip, r3
 8011ce6:	d8f9      	bhi.n	8011cdc <__lshift+0xc0>
 8011ce8:	e7ea      	b.n	8011cc0 <__lshift+0xa4>
 8011cea:	bf00      	nop
 8011cec:	08014768 	.word	0x08014768
 8011cf0:	0801480f 	.word	0x0801480f

08011cf4 <__mcmp>:
 8011cf4:	b530      	push	{r4, r5, lr}
 8011cf6:	6902      	ldr	r2, [r0, #16]
 8011cf8:	690c      	ldr	r4, [r1, #16]
 8011cfa:	1b12      	subs	r2, r2, r4
 8011cfc:	d10e      	bne.n	8011d1c <__mcmp+0x28>
 8011cfe:	f100 0314 	add.w	r3, r0, #20
 8011d02:	3114      	adds	r1, #20
 8011d04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011d08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011d0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011d10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011d14:	42a5      	cmp	r5, r4
 8011d16:	d003      	beq.n	8011d20 <__mcmp+0x2c>
 8011d18:	d305      	bcc.n	8011d26 <__mcmp+0x32>
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	bd30      	pop	{r4, r5, pc}
 8011d20:	4283      	cmp	r3, r0
 8011d22:	d3f3      	bcc.n	8011d0c <__mcmp+0x18>
 8011d24:	e7fa      	b.n	8011d1c <__mcmp+0x28>
 8011d26:	f04f 32ff 	mov.w	r2, #4294967295
 8011d2a:	e7f7      	b.n	8011d1c <__mcmp+0x28>

08011d2c <__mdiff>:
 8011d2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d30:	460c      	mov	r4, r1
 8011d32:	4606      	mov	r6, r0
 8011d34:	4611      	mov	r1, r2
 8011d36:	4620      	mov	r0, r4
 8011d38:	4617      	mov	r7, r2
 8011d3a:	f7ff ffdb 	bl	8011cf4 <__mcmp>
 8011d3e:	1e05      	subs	r5, r0, #0
 8011d40:	d110      	bne.n	8011d64 <__mdiff+0x38>
 8011d42:	4629      	mov	r1, r5
 8011d44:	4630      	mov	r0, r6
 8011d46:	f7ff fd0d 	bl	8011764 <_Balloc>
 8011d4a:	b930      	cbnz	r0, 8011d5a <__mdiff+0x2e>
 8011d4c:	4b39      	ldr	r3, [pc, #228]	; (8011e34 <__mdiff+0x108>)
 8011d4e:	4602      	mov	r2, r0
 8011d50:	f240 2132 	movw	r1, #562	; 0x232
 8011d54:	4838      	ldr	r0, [pc, #224]	; (8011e38 <__mdiff+0x10c>)
 8011d56:	f000 fe69 	bl	8012a2c <__assert_func>
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d64:	bfa4      	itt	ge
 8011d66:	463b      	movge	r3, r7
 8011d68:	4627      	movge	r7, r4
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	6879      	ldr	r1, [r7, #4]
 8011d6e:	bfa6      	itte	ge
 8011d70:	461c      	movge	r4, r3
 8011d72:	2500      	movge	r5, #0
 8011d74:	2501      	movlt	r5, #1
 8011d76:	f7ff fcf5 	bl	8011764 <_Balloc>
 8011d7a:	b920      	cbnz	r0, 8011d86 <__mdiff+0x5a>
 8011d7c:	4b2d      	ldr	r3, [pc, #180]	; (8011e34 <__mdiff+0x108>)
 8011d7e:	4602      	mov	r2, r0
 8011d80:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011d84:	e7e6      	b.n	8011d54 <__mdiff+0x28>
 8011d86:	693e      	ldr	r6, [r7, #16]
 8011d88:	60c5      	str	r5, [r0, #12]
 8011d8a:	6925      	ldr	r5, [r4, #16]
 8011d8c:	f107 0114 	add.w	r1, r7, #20
 8011d90:	f104 0914 	add.w	r9, r4, #20
 8011d94:	f100 0e14 	add.w	lr, r0, #20
 8011d98:	f107 0210 	add.w	r2, r7, #16
 8011d9c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011da0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011da4:	46f2      	mov	sl, lr
 8011da6:	2700      	movs	r7, #0
 8011da8:	f859 3b04 	ldr.w	r3, [r9], #4
 8011dac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011db0:	fa1f f883 	uxth.w	r8, r3
 8011db4:	fa17 f78b 	uxtah	r7, r7, fp
 8011db8:	0c1b      	lsrs	r3, r3, #16
 8011dba:	eba7 0808 	sub.w	r8, r7, r8
 8011dbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011dc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011dc6:	fa1f f888 	uxth.w	r8, r8
 8011dca:	141f      	asrs	r7, r3, #16
 8011dcc:	454d      	cmp	r5, r9
 8011dce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011dd2:	f84a 3b04 	str.w	r3, [sl], #4
 8011dd6:	d8e7      	bhi.n	8011da8 <__mdiff+0x7c>
 8011dd8:	1b2b      	subs	r3, r5, r4
 8011dda:	3b15      	subs	r3, #21
 8011ddc:	f023 0303 	bic.w	r3, r3, #3
 8011de0:	3304      	adds	r3, #4
 8011de2:	3415      	adds	r4, #21
 8011de4:	42a5      	cmp	r5, r4
 8011de6:	bf38      	it	cc
 8011de8:	2304      	movcc	r3, #4
 8011dea:	4419      	add	r1, r3
 8011dec:	4473      	add	r3, lr
 8011dee:	469e      	mov	lr, r3
 8011df0:	460d      	mov	r5, r1
 8011df2:	4565      	cmp	r5, ip
 8011df4:	d30e      	bcc.n	8011e14 <__mdiff+0xe8>
 8011df6:	f10c 0203 	add.w	r2, ip, #3
 8011dfa:	1a52      	subs	r2, r2, r1
 8011dfc:	f022 0203 	bic.w	r2, r2, #3
 8011e00:	3903      	subs	r1, #3
 8011e02:	458c      	cmp	ip, r1
 8011e04:	bf38      	it	cc
 8011e06:	2200      	movcc	r2, #0
 8011e08:	441a      	add	r2, r3
 8011e0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011e0e:	b17b      	cbz	r3, 8011e30 <__mdiff+0x104>
 8011e10:	6106      	str	r6, [r0, #16]
 8011e12:	e7a5      	b.n	8011d60 <__mdiff+0x34>
 8011e14:	f855 8b04 	ldr.w	r8, [r5], #4
 8011e18:	fa17 f488 	uxtah	r4, r7, r8
 8011e1c:	1422      	asrs	r2, r4, #16
 8011e1e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011e22:	b2a4      	uxth	r4, r4
 8011e24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011e28:	f84e 4b04 	str.w	r4, [lr], #4
 8011e2c:	1417      	asrs	r7, r2, #16
 8011e2e:	e7e0      	b.n	8011df2 <__mdiff+0xc6>
 8011e30:	3e01      	subs	r6, #1
 8011e32:	e7ea      	b.n	8011e0a <__mdiff+0xde>
 8011e34:	08014768 	.word	0x08014768
 8011e38:	0801480f 	.word	0x0801480f

08011e3c <__ulp>:
 8011e3c:	b082      	sub	sp, #8
 8011e3e:	ed8d 0b00 	vstr	d0, [sp]
 8011e42:	9b01      	ldr	r3, [sp, #4]
 8011e44:	4912      	ldr	r1, [pc, #72]	; (8011e90 <__ulp+0x54>)
 8011e46:	4019      	ands	r1, r3
 8011e48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011e4c:	2900      	cmp	r1, #0
 8011e4e:	dd05      	ble.n	8011e5c <__ulp+0x20>
 8011e50:	2200      	movs	r2, #0
 8011e52:	460b      	mov	r3, r1
 8011e54:	ec43 2b10 	vmov	d0, r2, r3
 8011e58:	b002      	add	sp, #8
 8011e5a:	4770      	bx	lr
 8011e5c:	4249      	negs	r1, r1
 8011e5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011e62:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011e66:	f04f 0200 	mov.w	r2, #0
 8011e6a:	f04f 0300 	mov.w	r3, #0
 8011e6e:	da04      	bge.n	8011e7a <__ulp+0x3e>
 8011e70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011e74:	fa41 f300 	asr.w	r3, r1, r0
 8011e78:	e7ec      	b.n	8011e54 <__ulp+0x18>
 8011e7a:	f1a0 0114 	sub.w	r1, r0, #20
 8011e7e:	291e      	cmp	r1, #30
 8011e80:	bfda      	itte	le
 8011e82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011e86:	fa20 f101 	lsrle.w	r1, r0, r1
 8011e8a:	2101      	movgt	r1, #1
 8011e8c:	460a      	mov	r2, r1
 8011e8e:	e7e1      	b.n	8011e54 <__ulp+0x18>
 8011e90:	7ff00000 	.word	0x7ff00000

08011e94 <__b2d>:
 8011e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e96:	6905      	ldr	r5, [r0, #16]
 8011e98:	f100 0714 	add.w	r7, r0, #20
 8011e9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011ea0:	1f2e      	subs	r6, r5, #4
 8011ea2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f7ff fd52 	bl	8011950 <__hi0bits>
 8011eac:	f1c0 0320 	rsb	r3, r0, #32
 8011eb0:	280a      	cmp	r0, #10
 8011eb2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011f30 <__b2d+0x9c>
 8011eb6:	600b      	str	r3, [r1, #0]
 8011eb8:	dc14      	bgt.n	8011ee4 <__b2d+0x50>
 8011eba:	f1c0 0e0b 	rsb	lr, r0, #11
 8011ebe:	fa24 f10e 	lsr.w	r1, r4, lr
 8011ec2:	42b7      	cmp	r7, r6
 8011ec4:	ea41 030c 	orr.w	r3, r1, ip
 8011ec8:	bf34      	ite	cc
 8011eca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011ece:	2100      	movcs	r1, #0
 8011ed0:	3015      	adds	r0, #21
 8011ed2:	fa04 f000 	lsl.w	r0, r4, r0
 8011ed6:	fa21 f10e 	lsr.w	r1, r1, lr
 8011eda:	ea40 0201 	orr.w	r2, r0, r1
 8011ede:	ec43 2b10 	vmov	d0, r2, r3
 8011ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ee4:	42b7      	cmp	r7, r6
 8011ee6:	bf3a      	itte	cc
 8011ee8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011eec:	f1a5 0608 	subcc.w	r6, r5, #8
 8011ef0:	2100      	movcs	r1, #0
 8011ef2:	380b      	subs	r0, #11
 8011ef4:	d017      	beq.n	8011f26 <__b2d+0x92>
 8011ef6:	f1c0 0c20 	rsb	ip, r0, #32
 8011efa:	fa04 f500 	lsl.w	r5, r4, r0
 8011efe:	42be      	cmp	r6, r7
 8011f00:	fa21 f40c 	lsr.w	r4, r1, ip
 8011f04:	ea45 0504 	orr.w	r5, r5, r4
 8011f08:	bf8c      	ite	hi
 8011f0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011f0e:	2400      	movls	r4, #0
 8011f10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011f14:	fa01 f000 	lsl.w	r0, r1, r0
 8011f18:	fa24 f40c 	lsr.w	r4, r4, ip
 8011f1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011f20:	ea40 0204 	orr.w	r2, r0, r4
 8011f24:	e7db      	b.n	8011ede <__b2d+0x4a>
 8011f26:	ea44 030c 	orr.w	r3, r4, ip
 8011f2a:	460a      	mov	r2, r1
 8011f2c:	e7d7      	b.n	8011ede <__b2d+0x4a>
 8011f2e:	bf00      	nop
 8011f30:	3ff00000 	.word	0x3ff00000

08011f34 <__d2b>:
 8011f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f38:	4689      	mov	r9, r1
 8011f3a:	2101      	movs	r1, #1
 8011f3c:	ec57 6b10 	vmov	r6, r7, d0
 8011f40:	4690      	mov	r8, r2
 8011f42:	f7ff fc0f 	bl	8011764 <_Balloc>
 8011f46:	4604      	mov	r4, r0
 8011f48:	b930      	cbnz	r0, 8011f58 <__d2b+0x24>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	4b25      	ldr	r3, [pc, #148]	; (8011fe4 <__d2b+0xb0>)
 8011f4e:	4826      	ldr	r0, [pc, #152]	; (8011fe8 <__d2b+0xb4>)
 8011f50:	f240 310a 	movw	r1, #778	; 0x30a
 8011f54:	f000 fd6a 	bl	8012a2c <__assert_func>
 8011f58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011f5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011f60:	bb35      	cbnz	r5, 8011fb0 <__d2b+0x7c>
 8011f62:	2e00      	cmp	r6, #0
 8011f64:	9301      	str	r3, [sp, #4]
 8011f66:	d028      	beq.n	8011fba <__d2b+0x86>
 8011f68:	4668      	mov	r0, sp
 8011f6a:	9600      	str	r6, [sp, #0]
 8011f6c:	f7ff fd10 	bl	8011990 <__lo0bits>
 8011f70:	9900      	ldr	r1, [sp, #0]
 8011f72:	b300      	cbz	r0, 8011fb6 <__d2b+0x82>
 8011f74:	9a01      	ldr	r2, [sp, #4]
 8011f76:	f1c0 0320 	rsb	r3, r0, #32
 8011f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f7e:	430b      	orrs	r3, r1
 8011f80:	40c2      	lsrs	r2, r0
 8011f82:	6163      	str	r3, [r4, #20]
 8011f84:	9201      	str	r2, [sp, #4]
 8011f86:	9b01      	ldr	r3, [sp, #4]
 8011f88:	61a3      	str	r3, [r4, #24]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	bf14      	ite	ne
 8011f8e:	2202      	movne	r2, #2
 8011f90:	2201      	moveq	r2, #1
 8011f92:	6122      	str	r2, [r4, #16]
 8011f94:	b1d5      	cbz	r5, 8011fcc <__d2b+0x98>
 8011f96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011f9a:	4405      	add	r5, r0
 8011f9c:	f8c9 5000 	str.w	r5, [r9]
 8011fa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011fa4:	f8c8 0000 	str.w	r0, [r8]
 8011fa8:	4620      	mov	r0, r4
 8011faa:	b003      	add	sp, #12
 8011fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011fb4:	e7d5      	b.n	8011f62 <__d2b+0x2e>
 8011fb6:	6161      	str	r1, [r4, #20]
 8011fb8:	e7e5      	b.n	8011f86 <__d2b+0x52>
 8011fba:	a801      	add	r0, sp, #4
 8011fbc:	f7ff fce8 	bl	8011990 <__lo0bits>
 8011fc0:	9b01      	ldr	r3, [sp, #4]
 8011fc2:	6163      	str	r3, [r4, #20]
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	6122      	str	r2, [r4, #16]
 8011fc8:	3020      	adds	r0, #32
 8011fca:	e7e3      	b.n	8011f94 <__d2b+0x60>
 8011fcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011fd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011fd4:	f8c9 0000 	str.w	r0, [r9]
 8011fd8:	6918      	ldr	r0, [r3, #16]
 8011fda:	f7ff fcb9 	bl	8011950 <__hi0bits>
 8011fde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011fe2:	e7df      	b.n	8011fa4 <__d2b+0x70>
 8011fe4:	08014768 	.word	0x08014768
 8011fe8:	0801480f 	.word	0x0801480f

08011fec <__ratio>:
 8011fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff0:	4688      	mov	r8, r1
 8011ff2:	4669      	mov	r1, sp
 8011ff4:	4681      	mov	r9, r0
 8011ff6:	f7ff ff4d 	bl	8011e94 <__b2d>
 8011ffa:	a901      	add	r1, sp, #4
 8011ffc:	4640      	mov	r0, r8
 8011ffe:	ec55 4b10 	vmov	r4, r5, d0
 8012002:	f7ff ff47 	bl	8011e94 <__b2d>
 8012006:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801200a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801200e:	eba3 0c02 	sub.w	ip, r3, r2
 8012012:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012016:	1a9b      	subs	r3, r3, r2
 8012018:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801201c:	ec51 0b10 	vmov	r0, r1, d0
 8012020:	2b00      	cmp	r3, #0
 8012022:	bfd6      	itet	le
 8012024:	460a      	movle	r2, r1
 8012026:	462a      	movgt	r2, r5
 8012028:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801202c:	468b      	mov	fp, r1
 801202e:	462f      	mov	r7, r5
 8012030:	bfd4      	ite	le
 8012032:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012036:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801203a:	4620      	mov	r0, r4
 801203c:	ee10 2a10 	vmov	r2, s0
 8012040:	465b      	mov	r3, fp
 8012042:	4639      	mov	r1, r7
 8012044:	f7ee fc1a 	bl	800087c <__aeabi_ddiv>
 8012048:	ec41 0b10 	vmov	d0, r0, r1
 801204c:	b003      	add	sp, #12
 801204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012052 <__copybits>:
 8012052:	3901      	subs	r1, #1
 8012054:	b570      	push	{r4, r5, r6, lr}
 8012056:	1149      	asrs	r1, r1, #5
 8012058:	6914      	ldr	r4, [r2, #16]
 801205a:	3101      	adds	r1, #1
 801205c:	f102 0314 	add.w	r3, r2, #20
 8012060:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012064:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012068:	1f05      	subs	r5, r0, #4
 801206a:	42a3      	cmp	r3, r4
 801206c:	d30c      	bcc.n	8012088 <__copybits+0x36>
 801206e:	1aa3      	subs	r3, r4, r2
 8012070:	3b11      	subs	r3, #17
 8012072:	f023 0303 	bic.w	r3, r3, #3
 8012076:	3211      	adds	r2, #17
 8012078:	42a2      	cmp	r2, r4
 801207a:	bf88      	it	hi
 801207c:	2300      	movhi	r3, #0
 801207e:	4418      	add	r0, r3
 8012080:	2300      	movs	r3, #0
 8012082:	4288      	cmp	r0, r1
 8012084:	d305      	bcc.n	8012092 <__copybits+0x40>
 8012086:	bd70      	pop	{r4, r5, r6, pc}
 8012088:	f853 6b04 	ldr.w	r6, [r3], #4
 801208c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012090:	e7eb      	b.n	801206a <__copybits+0x18>
 8012092:	f840 3b04 	str.w	r3, [r0], #4
 8012096:	e7f4      	b.n	8012082 <__copybits+0x30>

08012098 <__any_on>:
 8012098:	f100 0214 	add.w	r2, r0, #20
 801209c:	6900      	ldr	r0, [r0, #16]
 801209e:	114b      	asrs	r3, r1, #5
 80120a0:	4298      	cmp	r0, r3
 80120a2:	b510      	push	{r4, lr}
 80120a4:	db11      	blt.n	80120ca <__any_on+0x32>
 80120a6:	dd0a      	ble.n	80120be <__any_on+0x26>
 80120a8:	f011 011f 	ands.w	r1, r1, #31
 80120ac:	d007      	beq.n	80120be <__any_on+0x26>
 80120ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80120b2:	fa24 f001 	lsr.w	r0, r4, r1
 80120b6:	fa00 f101 	lsl.w	r1, r0, r1
 80120ba:	428c      	cmp	r4, r1
 80120bc:	d10b      	bne.n	80120d6 <__any_on+0x3e>
 80120be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d803      	bhi.n	80120ce <__any_on+0x36>
 80120c6:	2000      	movs	r0, #0
 80120c8:	bd10      	pop	{r4, pc}
 80120ca:	4603      	mov	r3, r0
 80120cc:	e7f7      	b.n	80120be <__any_on+0x26>
 80120ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80120d2:	2900      	cmp	r1, #0
 80120d4:	d0f5      	beq.n	80120c2 <__any_on+0x2a>
 80120d6:	2001      	movs	r0, #1
 80120d8:	e7f6      	b.n	80120c8 <__any_on+0x30>

080120da <_calloc_r>:
 80120da:	b513      	push	{r0, r1, r4, lr}
 80120dc:	434a      	muls	r2, r1
 80120de:	4611      	mov	r1, r2
 80120e0:	9201      	str	r2, [sp, #4]
 80120e2:	f7fd fef5 	bl	800fed0 <_malloc_r>
 80120e6:	4604      	mov	r4, r0
 80120e8:	b118      	cbz	r0, 80120f2 <_calloc_r+0x18>
 80120ea:	9a01      	ldr	r2, [sp, #4]
 80120ec:	2100      	movs	r1, #0
 80120ee:	f7fd fe97 	bl	800fe20 <memset>
 80120f2:	4620      	mov	r0, r4
 80120f4:	b002      	add	sp, #8
 80120f6:	bd10      	pop	{r4, pc}

080120f8 <_realloc_r>:
 80120f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120fa:	4607      	mov	r7, r0
 80120fc:	4614      	mov	r4, r2
 80120fe:	460e      	mov	r6, r1
 8012100:	b921      	cbnz	r1, 801210c <_realloc_r+0x14>
 8012102:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012106:	4611      	mov	r1, r2
 8012108:	f7fd bee2 	b.w	800fed0 <_malloc_r>
 801210c:	b922      	cbnz	r2, 8012118 <_realloc_r+0x20>
 801210e:	f7fd fe8f 	bl	800fe30 <_free_r>
 8012112:	4625      	mov	r5, r4
 8012114:	4628      	mov	r0, r5
 8012116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012118:	f000 fcd2 	bl	8012ac0 <_malloc_usable_size_r>
 801211c:	42a0      	cmp	r0, r4
 801211e:	d20f      	bcs.n	8012140 <_realloc_r+0x48>
 8012120:	4621      	mov	r1, r4
 8012122:	4638      	mov	r0, r7
 8012124:	f7fd fed4 	bl	800fed0 <_malloc_r>
 8012128:	4605      	mov	r5, r0
 801212a:	2800      	cmp	r0, #0
 801212c:	d0f2      	beq.n	8012114 <_realloc_r+0x1c>
 801212e:	4631      	mov	r1, r6
 8012130:	4622      	mov	r2, r4
 8012132:	f7fd fe67 	bl	800fe04 <memcpy>
 8012136:	4631      	mov	r1, r6
 8012138:	4638      	mov	r0, r7
 801213a:	f7fd fe79 	bl	800fe30 <_free_r>
 801213e:	e7e9      	b.n	8012114 <_realloc_r+0x1c>
 8012140:	4635      	mov	r5, r6
 8012142:	e7e7      	b.n	8012114 <_realloc_r+0x1c>

08012144 <__ssputs_r>:
 8012144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012148:	688e      	ldr	r6, [r1, #8]
 801214a:	429e      	cmp	r6, r3
 801214c:	4682      	mov	sl, r0
 801214e:	460c      	mov	r4, r1
 8012150:	4690      	mov	r8, r2
 8012152:	461f      	mov	r7, r3
 8012154:	d838      	bhi.n	80121c8 <__ssputs_r+0x84>
 8012156:	898a      	ldrh	r2, [r1, #12]
 8012158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801215c:	d032      	beq.n	80121c4 <__ssputs_r+0x80>
 801215e:	6825      	ldr	r5, [r4, #0]
 8012160:	6909      	ldr	r1, [r1, #16]
 8012162:	eba5 0901 	sub.w	r9, r5, r1
 8012166:	6965      	ldr	r5, [r4, #20]
 8012168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801216c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012170:	3301      	adds	r3, #1
 8012172:	444b      	add	r3, r9
 8012174:	106d      	asrs	r5, r5, #1
 8012176:	429d      	cmp	r5, r3
 8012178:	bf38      	it	cc
 801217a:	461d      	movcc	r5, r3
 801217c:	0553      	lsls	r3, r2, #21
 801217e:	d531      	bpl.n	80121e4 <__ssputs_r+0xa0>
 8012180:	4629      	mov	r1, r5
 8012182:	f7fd fea5 	bl	800fed0 <_malloc_r>
 8012186:	4606      	mov	r6, r0
 8012188:	b950      	cbnz	r0, 80121a0 <__ssputs_r+0x5c>
 801218a:	230c      	movs	r3, #12
 801218c:	f8ca 3000 	str.w	r3, [sl]
 8012190:	89a3      	ldrh	r3, [r4, #12]
 8012192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012196:	81a3      	strh	r3, [r4, #12]
 8012198:	f04f 30ff 	mov.w	r0, #4294967295
 801219c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121a0:	6921      	ldr	r1, [r4, #16]
 80121a2:	464a      	mov	r2, r9
 80121a4:	f7fd fe2e 	bl	800fe04 <memcpy>
 80121a8:	89a3      	ldrh	r3, [r4, #12]
 80121aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80121ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121b2:	81a3      	strh	r3, [r4, #12]
 80121b4:	6126      	str	r6, [r4, #16]
 80121b6:	6165      	str	r5, [r4, #20]
 80121b8:	444e      	add	r6, r9
 80121ba:	eba5 0509 	sub.w	r5, r5, r9
 80121be:	6026      	str	r6, [r4, #0]
 80121c0:	60a5      	str	r5, [r4, #8]
 80121c2:	463e      	mov	r6, r7
 80121c4:	42be      	cmp	r6, r7
 80121c6:	d900      	bls.n	80121ca <__ssputs_r+0x86>
 80121c8:	463e      	mov	r6, r7
 80121ca:	4632      	mov	r2, r6
 80121cc:	6820      	ldr	r0, [r4, #0]
 80121ce:	4641      	mov	r1, r8
 80121d0:	f000 fc5c 	bl	8012a8c <memmove>
 80121d4:	68a3      	ldr	r3, [r4, #8]
 80121d6:	6822      	ldr	r2, [r4, #0]
 80121d8:	1b9b      	subs	r3, r3, r6
 80121da:	4432      	add	r2, r6
 80121dc:	60a3      	str	r3, [r4, #8]
 80121de:	6022      	str	r2, [r4, #0]
 80121e0:	2000      	movs	r0, #0
 80121e2:	e7db      	b.n	801219c <__ssputs_r+0x58>
 80121e4:	462a      	mov	r2, r5
 80121e6:	f7ff ff87 	bl	80120f8 <_realloc_r>
 80121ea:	4606      	mov	r6, r0
 80121ec:	2800      	cmp	r0, #0
 80121ee:	d1e1      	bne.n	80121b4 <__ssputs_r+0x70>
 80121f0:	6921      	ldr	r1, [r4, #16]
 80121f2:	4650      	mov	r0, sl
 80121f4:	f7fd fe1c 	bl	800fe30 <_free_r>
 80121f8:	e7c7      	b.n	801218a <__ssputs_r+0x46>
	...

080121fc <_svfiprintf_r>:
 80121fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012200:	4698      	mov	r8, r3
 8012202:	898b      	ldrh	r3, [r1, #12]
 8012204:	061b      	lsls	r3, r3, #24
 8012206:	b09d      	sub	sp, #116	; 0x74
 8012208:	4607      	mov	r7, r0
 801220a:	460d      	mov	r5, r1
 801220c:	4614      	mov	r4, r2
 801220e:	d50e      	bpl.n	801222e <_svfiprintf_r+0x32>
 8012210:	690b      	ldr	r3, [r1, #16]
 8012212:	b963      	cbnz	r3, 801222e <_svfiprintf_r+0x32>
 8012214:	2140      	movs	r1, #64	; 0x40
 8012216:	f7fd fe5b 	bl	800fed0 <_malloc_r>
 801221a:	6028      	str	r0, [r5, #0]
 801221c:	6128      	str	r0, [r5, #16]
 801221e:	b920      	cbnz	r0, 801222a <_svfiprintf_r+0x2e>
 8012220:	230c      	movs	r3, #12
 8012222:	603b      	str	r3, [r7, #0]
 8012224:	f04f 30ff 	mov.w	r0, #4294967295
 8012228:	e0d1      	b.n	80123ce <_svfiprintf_r+0x1d2>
 801222a:	2340      	movs	r3, #64	; 0x40
 801222c:	616b      	str	r3, [r5, #20]
 801222e:	2300      	movs	r3, #0
 8012230:	9309      	str	r3, [sp, #36]	; 0x24
 8012232:	2320      	movs	r3, #32
 8012234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012238:	f8cd 800c 	str.w	r8, [sp, #12]
 801223c:	2330      	movs	r3, #48	; 0x30
 801223e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80123e8 <_svfiprintf_r+0x1ec>
 8012242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012246:	f04f 0901 	mov.w	r9, #1
 801224a:	4623      	mov	r3, r4
 801224c:	469a      	mov	sl, r3
 801224e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012252:	b10a      	cbz	r2, 8012258 <_svfiprintf_r+0x5c>
 8012254:	2a25      	cmp	r2, #37	; 0x25
 8012256:	d1f9      	bne.n	801224c <_svfiprintf_r+0x50>
 8012258:	ebba 0b04 	subs.w	fp, sl, r4
 801225c:	d00b      	beq.n	8012276 <_svfiprintf_r+0x7a>
 801225e:	465b      	mov	r3, fp
 8012260:	4622      	mov	r2, r4
 8012262:	4629      	mov	r1, r5
 8012264:	4638      	mov	r0, r7
 8012266:	f7ff ff6d 	bl	8012144 <__ssputs_r>
 801226a:	3001      	adds	r0, #1
 801226c:	f000 80aa 	beq.w	80123c4 <_svfiprintf_r+0x1c8>
 8012270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012272:	445a      	add	r2, fp
 8012274:	9209      	str	r2, [sp, #36]	; 0x24
 8012276:	f89a 3000 	ldrb.w	r3, [sl]
 801227a:	2b00      	cmp	r3, #0
 801227c:	f000 80a2 	beq.w	80123c4 <_svfiprintf_r+0x1c8>
 8012280:	2300      	movs	r3, #0
 8012282:	f04f 32ff 	mov.w	r2, #4294967295
 8012286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801228a:	f10a 0a01 	add.w	sl, sl, #1
 801228e:	9304      	str	r3, [sp, #16]
 8012290:	9307      	str	r3, [sp, #28]
 8012292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012296:	931a      	str	r3, [sp, #104]	; 0x68
 8012298:	4654      	mov	r4, sl
 801229a:	2205      	movs	r2, #5
 801229c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122a0:	4851      	ldr	r0, [pc, #324]	; (80123e8 <_svfiprintf_r+0x1ec>)
 80122a2:	f7ed ffb5 	bl	8000210 <memchr>
 80122a6:	9a04      	ldr	r2, [sp, #16]
 80122a8:	b9d8      	cbnz	r0, 80122e2 <_svfiprintf_r+0xe6>
 80122aa:	06d0      	lsls	r0, r2, #27
 80122ac:	bf44      	itt	mi
 80122ae:	2320      	movmi	r3, #32
 80122b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122b4:	0711      	lsls	r1, r2, #28
 80122b6:	bf44      	itt	mi
 80122b8:	232b      	movmi	r3, #43	; 0x2b
 80122ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122be:	f89a 3000 	ldrb.w	r3, [sl]
 80122c2:	2b2a      	cmp	r3, #42	; 0x2a
 80122c4:	d015      	beq.n	80122f2 <_svfiprintf_r+0xf6>
 80122c6:	9a07      	ldr	r2, [sp, #28]
 80122c8:	4654      	mov	r4, sl
 80122ca:	2000      	movs	r0, #0
 80122cc:	f04f 0c0a 	mov.w	ip, #10
 80122d0:	4621      	mov	r1, r4
 80122d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122d6:	3b30      	subs	r3, #48	; 0x30
 80122d8:	2b09      	cmp	r3, #9
 80122da:	d94e      	bls.n	801237a <_svfiprintf_r+0x17e>
 80122dc:	b1b0      	cbz	r0, 801230c <_svfiprintf_r+0x110>
 80122de:	9207      	str	r2, [sp, #28]
 80122e0:	e014      	b.n	801230c <_svfiprintf_r+0x110>
 80122e2:	eba0 0308 	sub.w	r3, r0, r8
 80122e6:	fa09 f303 	lsl.w	r3, r9, r3
 80122ea:	4313      	orrs	r3, r2
 80122ec:	9304      	str	r3, [sp, #16]
 80122ee:	46a2      	mov	sl, r4
 80122f0:	e7d2      	b.n	8012298 <_svfiprintf_r+0x9c>
 80122f2:	9b03      	ldr	r3, [sp, #12]
 80122f4:	1d19      	adds	r1, r3, #4
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	9103      	str	r1, [sp, #12]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	bfbb      	ittet	lt
 80122fe:	425b      	neglt	r3, r3
 8012300:	f042 0202 	orrlt.w	r2, r2, #2
 8012304:	9307      	strge	r3, [sp, #28]
 8012306:	9307      	strlt	r3, [sp, #28]
 8012308:	bfb8      	it	lt
 801230a:	9204      	strlt	r2, [sp, #16]
 801230c:	7823      	ldrb	r3, [r4, #0]
 801230e:	2b2e      	cmp	r3, #46	; 0x2e
 8012310:	d10c      	bne.n	801232c <_svfiprintf_r+0x130>
 8012312:	7863      	ldrb	r3, [r4, #1]
 8012314:	2b2a      	cmp	r3, #42	; 0x2a
 8012316:	d135      	bne.n	8012384 <_svfiprintf_r+0x188>
 8012318:	9b03      	ldr	r3, [sp, #12]
 801231a:	1d1a      	adds	r2, r3, #4
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	9203      	str	r2, [sp, #12]
 8012320:	2b00      	cmp	r3, #0
 8012322:	bfb8      	it	lt
 8012324:	f04f 33ff 	movlt.w	r3, #4294967295
 8012328:	3402      	adds	r4, #2
 801232a:	9305      	str	r3, [sp, #20]
 801232c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80123f8 <_svfiprintf_r+0x1fc>
 8012330:	7821      	ldrb	r1, [r4, #0]
 8012332:	2203      	movs	r2, #3
 8012334:	4650      	mov	r0, sl
 8012336:	f7ed ff6b 	bl	8000210 <memchr>
 801233a:	b140      	cbz	r0, 801234e <_svfiprintf_r+0x152>
 801233c:	2340      	movs	r3, #64	; 0x40
 801233e:	eba0 000a 	sub.w	r0, r0, sl
 8012342:	fa03 f000 	lsl.w	r0, r3, r0
 8012346:	9b04      	ldr	r3, [sp, #16]
 8012348:	4303      	orrs	r3, r0
 801234a:	3401      	adds	r4, #1
 801234c:	9304      	str	r3, [sp, #16]
 801234e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012352:	4826      	ldr	r0, [pc, #152]	; (80123ec <_svfiprintf_r+0x1f0>)
 8012354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012358:	2206      	movs	r2, #6
 801235a:	f7ed ff59 	bl	8000210 <memchr>
 801235e:	2800      	cmp	r0, #0
 8012360:	d038      	beq.n	80123d4 <_svfiprintf_r+0x1d8>
 8012362:	4b23      	ldr	r3, [pc, #140]	; (80123f0 <_svfiprintf_r+0x1f4>)
 8012364:	bb1b      	cbnz	r3, 80123ae <_svfiprintf_r+0x1b2>
 8012366:	9b03      	ldr	r3, [sp, #12]
 8012368:	3307      	adds	r3, #7
 801236a:	f023 0307 	bic.w	r3, r3, #7
 801236e:	3308      	adds	r3, #8
 8012370:	9303      	str	r3, [sp, #12]
 8012372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012374:	4433      	add	r3, r6
 8012376:	9309      	str	r3, [sp, #36]	; 0x24
 8012378:	e767      	b.n	801224a <_svfiprintf_r+0x4e>
 801237a:	fb0c 3202 	mla	r2, ip, r2, r3
 801237e:	460c      	mov	r4, r1
 8012380:	2001      	movs	r0, #1
 8012382:	e7a5      	b.n	80122d0 <_svfiprintf_r+0xd4>
 8012384:	2300      	movs	r3, #0
 8012386:	3401      	adds	r4, #1
 8012388:	9305      	str	r3, [sp, #20]
 801238a:	4619      	mov	r1, r3
 801238c:	f04f 0c0a 	mov.w	ip, #10
 8012390:	4620      	mov	r0, r4
 8012392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012396:	3a30      	subs	r2, #48	; 0x30
 8012398:	2a09      	cmp	r2, #9
 801239a:	d903      	bls.n	80123a4 <_svfiprintf_r+0x1a8>
 801239c:	2b00      	cmp	r3, #0
 801239e:	d0c5      	beq.n	801232c <_svfiprintf_r+0x130>
 80123a0:	9105      	str	r1, [sp, #20]
 80123a2:	e7c3      	b.n	801232c <_svfiprintf_r+0x130>
 80123a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80123a8:	4604      	mov	r4, r0
 80123aa:	2301      	movs	r3, #1
 80123ac:	e7f0      	b.n	8012390 <_svfiprintf_r+0x194>
 80123ae:	ab03      	add	r3, sp, #12
 80123b0:	9300      	str	r3, [sp, #0]
 80123b2:	462a      	mov	r2, r5
 80123b4:	4b0f      	ldr	r3, [pc, #60]	; (80123f4 <_svfiprintf_r+0x1f8>)
 80123b6:	a904      	add	r1, sp, #16
 80123b8:	4638      	mov	r0, r7
 80123ba:	f3af 8000 	nop.w
 80123be:	1c42      	adds	r2, r0, #1
 80123c0:	4606      	mov	r6, r0
 80123c2:	d1d6      	bne.n	8012372 <_svfiprintf_r+0x176>
 80123c4:	89ab      	ldrh	r3, [r5, #12]
 80123c6:	065b      	lsls	r3, r3, #25
 80123c8:	f53f af2c 	bmi.w	8012224 <_svfiprintf_r+0x28>
 80123cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123ce:	b01d      	add	sp, #116	; 0x74
 80123d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123d4:	ab03      	add	r3, sp, #12
 80123d6:	9300      	str	r3, [sp, #0]
 80123d8:	462a      	mov	r2, r5
 80123da:	4b06      	ldr	r3, [pc, #24]	; (80123f4 <_svfiprintf_r+0x1f8>)
 80123dc:	a904      	add	r1, sp, #16
 80123de:	4638      	mov	r0, r7
 80123e0:	f000 f9d4 	bl	801278c <_printf_i>
 80123e4:	e7eb      	b.n	80123be <_svfiprintf_r+0x1c2>
 80123e6:	bf00      	nop
 80123e8:	0801496c 	.word	0x0801496c
 80123ec:	08014976 	.word	0x08014976
 80123f0:	00000000 	.word	0x00000000
 80123f4:	08012145 	.word	0x08012145
 80123f8:	08014972 	.word	0x08014972

080123fc <__sfputc_r>:
 80123fc:	6893      	ldr	r3, [r2, #8]
 80123fe:	3b01      	subs	r3, #1
 8012400:	2b00      	cmp	r3, #0
 8012402:	b410      	push	{r4}
 8012404:	6093      	str	r3, [r2, #8]
 8012406:	da08      	bge.n	801241a <__sfputc_r+0x1e>
 8012408:	6994      	ldr	r4, [r2, #24]
 801240a:	42a3      	cmp	r3, r4
 801240c:	db01      	blt.n	8012412 <__sfputc_r+0x16>
 801240e:	290a      	cmp	r1, #10
 8012410:	d103      	bne.n	801241a <__sfputc_r+0x1e>
 8012412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012416:	f7fe bd01 	b.w	8010e1c <__swbuf_r>
 801241a:	6813      	ldr	r3, [r2, #0]
 801241c:	1c58      	adds	r0, r3, #1
 801241e:	6010      	str	r0, [r2, #0]
 8012420:	7019      	strb	r1, [r3, #0]
 8012422:	4608      	mov	r0, r1
 8012424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012428:	4770      	bx	lr

0801242a <__sfputs_r>:
 801242a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801242c:	4606      	mov	r6, r0
 801242e:	460f      	mov	r7, r1
 8012430:	4614      	mov	r4, r2
 8012432:	18d5      	adds	r5, r2, r3
 8012434:	42ac      	cmp	r4, r5
 8012436:	d101      	bne.n	801243c <__sfputs_r+0x12>
 8012438:	2000      	movs	r0, #0
 801243a:	e007      	b.n	801244c <__sfputs_r+0x22>
 801243c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012440:	463a      	mov	r2, r7
 8012442:	4630      	mov	r0, r6
 8012444:	f7ff ffda 	bl	80123fc <__sfputc_r>
 8012448:	1c43      	adds	r3, r0, #1
 801244a:	d1f3      	bne.n	8012434 <__sfputs_r+0xa>
 801244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012450 <_vfiprintf_r>:
 8012450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012454:	460d      	mov	r5, r1
 8012456:	b09d      	sub	sp, #116	; 0x74
 8012458:	4614      	mov	r4, r2
 801245a:	4698      	mov	r8, r3
 801245c:	4606      	mov	r6, r0
 801245e:	b118      	cbz	r0, 8012468 <_vfiprintf_r+0x18>
 8012460:	6983      	ldr	r3, [r0, #24]
 8012462:	b90b      	cbnz	r3, 8012468 <_vfiprintf_r+0x18>
 8012464:	f7fd fb94 	bl	800fb90 <__sinit>
 8012468:	4b89      	ldr	r3, [pc, #548]	; (8012690 <_vfiprintf_r+0x240>)
 801246a:	429d      	cmp	r5, r3
 801246c:	d11b      	bne.n	80124a6 <_vfiprintf_r+0x56>
 801246e:	6875      	ldr	r5, [r6, #4]
 8012470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012472:	07d9      	lsls	r1, r3, #31
 8012474:	d405      	bmi.n	8012482 <_vfiprintf_r+0x32>
 8012476:	89ab      	ldrh	r3, [r5, #12]
 8012478:	059a      	lsls	r2, r3, #22
 801247a:	d402      	bmi.n	8012482 <_vfiprintf_r+0x32>
 801247c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801247e:	f7fd fc4a 	bl	800fd16 <__retarget_lock_acquire_recursive>
 8012482:	89ab      	ldrh	r3, [r5, #12]
 8012484:	071b      	lsls	r3, r3, #28
 8012486:	d501      	bpl.n	801248c <_vfiprintf_r+0x3c>
 8012488:	692b      	ldr	r3, [r5, #16]
 801248a:	b9eb      	cbnz	r3, 80124c8 <_vfiprintf_r+0x78>
 801248c:	4629      	mov	r1, r5
 801248e:	4630      	mov	r0, r6
 8012490:	f7fe fd28 	bl	8010ee4 <__swsetup_r>
 8012494:	b1c0      	cbz	r0, 80124c8 <_vfiprintf_r+0x78>
 8012496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012498:	07dc      	lsls	r4, r3, #31
 801249a:	d50e      	bpl.n	80124ba <_vfiprintf_r+0x6a>
 801249c:	f04f 30ff 	mov.w	r0, #4294967295
 80124a0:	b01d      	add	sp, #116	; 0x74
 80124a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a6:	4b7b      	ldr	r3, [pc, #492]	; (8012694 <_vfiprintf_r+0x244>)
 80124a8:	429d      	cmp	r5, r3
 80124aa:	d101      	bne.n	80124b0 <_vfiprintf_r+0x60>
 80124ac:	68b5      	ldr	r5, [r6, #8]
 80124ae:	e7df      	b.n	8012470 <_vfiprintf_r+0x20>
 80124b0:	4b79      	ldr	r3, [pc, #484]	; (8012698 <_vfiprintf_r+0x248>)
 80124b2:	429d      	cmp	r5, r3
 80124b4:	bf08      	it	eq
 80124b6:	68f5      	ldreq	r5, [r6, #12]
 80124b8:	e7da      	b.n	8012470 <_vfiprintf_r+0x20>
 80124ba:	89ab      	ldrh	r3, [r5, #12]
 80124bc:	0598      	lsls	r0, r3, #22
 80124be:	d4ed      	bmi.n	801249c <_vfiprintf_r+0x4c>
 80124c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124c2:	f7fd fc29 	bl	800fd18 <__retarget_lock_release_recursive>
 80124c6:	e7e9      	b.n	801249c <_vfiprintf_r+0x4c>
 80124c8:	2300      	movs	r3, #0
 80124ca:	9309      	str	r3, [sp, #36]	; 0x24
 80124cc:	2320      	movs	r3, #32
 80124ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80124d6:	2330      	movs	r3, #48	; 0x30
 80124d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801269c <_vfiprintf_r+0x24c>
 80124dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124e0:	f04f 0901 	mov.w	r9, #1
 80124e4:	4623      	mov	r3, r4
 80124e6:	469a      	mov	sl, r3
 80124e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124ec:	b10a      	cbz	r2, 80124f2 <_vfiprintf_r+0xa2>
 80124ee:	2a25      	cmp	r2, #37	; 0x25
 80124f0:	d1f9      	bne.n	80124e6 <_vfiprintf_r+0x96>
 80124f2:	ebba 0b04 	subs.w	fp, sl, r4
 80124f6:	d00b      	beq.n	8012510 <_vfiprintf_r+0xc0>
 80124f8:	465b      	mov	r3, fp
 80124fa:	4622      	mov	r2, r4
 80124fc:	4629      	mov	r1, r5
 80124fe:	4630      	mov	r0, r6
 8012500:	f7ff ff93 	bl	801242a <__sfputs_r>
 8012504:	3001      	adds	r0, #1
 8012506:	f000 80aa 	beq.w	801265e <_vfiprintf_r+0x20e>
 801250a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801250c:	445a      	add	r2, fp
 801250e:	9209      	str	r2, [sp, #36]	; 0x24
 8012510:	f89a 3000 	ldrb.w	r3, [sl]
 8012514:	2b00      	cmp	r3, #0
 8012516:	f000 80a2 	beq.w	801265e <_vfiprintf_r+0x20e>
 801251a:	2300      	movs	r3, #0
 801251c:	f04f 32ff 	mov.w	r2, #4294967295
 8012520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012524:	f10a 0a01 	add.w	sl, sl, #1
 8012528:	9304      	str	r3, [sp, #16]
 801252a:	9307      	str	r3, [sp, #28]
 801252c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012530:	931a      	str	r3, [sp, #104]	; 0x68
 8012532:	4654      	mov	r4, sl
 8012534:	2205      	movs	r2, #5
 8012536:	f814 1b01 	ldrb.w	r1, [r4], #1
 801253a:	4858      	ldr	r0, [pc, #352]	; (801269c <_vfiprintf_r+0x24c>)
 801253c:	f7ed fe68 	bl	8000210 <memchr>
 8012540:	9a04      	ldr	r2, [sp, #16]
 8012542:	b9d8      	cbnz	r0, 801257c <_vfiprintf_r+0x12c>
 8012544:	06d1      	lsls	r1, r2, #27
 8012546:	bf44      	itt	mi
 8012548:	2320      	movmi	r3, #32
 801254a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801254e:	0713      	lsls	r3, r2, #28
 8012550:	bf44      	itt	mi
 8012552:	232b      	movmi	r3, #43	; 0x2b
 8012554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012558:	f89a 3000 	ldrb.w	r3, [sl]
 801255c:	2b2a      	cmp	r3, #42	; 0x2a
 801255e:	d015      	beq.n	801258c <_vfiprintf_r+0x13c>
 8012560:	9a07      	ldr	r2, [sp, #28]
 8012562:	4654      	mov	r4, sl
 8012564:	2000      	movs	r0, #0
 8012566:	f04f 0c0a 	mov.w	ip, #10
 801256a:	4621      	mov	r1, r4
 801256c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012570:	3b30      	subs	r3, #48	; 0x30
 8012572:	2b09      	cmp	r3, #9
 8012574:	d94e      	bls.n	8012614 <_vfiprintf_r+0x1c4>
 8012576:	b1b0      	cbz	r0, 80125a6 <_vfiprintf_r+0x156>
 8012578:	9207      	str	r2, [sp, #28]
 801257a:	e014      	b.n	80125a6 <_vfiprintf_r+0x156>
 801257c:	eba0 0308 	sub.w	r3, r0, r8
 8012580:	fa09 f303 	lsl.w	r3, r9, r3
 8012584:	4313      	orrs	r3, r2
 8012586:	9304      	str	r3, [sp, #16]
 8012588:	46a2      	mov	sl, r4
 801258a:	e7d2      	b.n	8012532 <_vfiprintf_r+0xe2>
 801258c:	9b03      	ldr	r3, [sp, #12]
 801258e:	1d19      	adds	r1, r3, #4
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	9103      	str	r1, [sp, #12]
 8012594:	2b00      	cmp	r3, #0
 8012596:	bfbb      	ittet	lt
 8012598:	425b      	neglt	r3, r3
 801259a:	f042 0202 	orrlt.w	r2, r2, #2
 801259e:	9307      	strge	r3, [sp, #28]
 80125a0:	9307      	strlt	r3, [sp, #28]
 80125a2:	bfb8      	it	lt
 80125a4:	9204      	strlt	r2, [sp, #16]
 80125a6:	7823      	ldrb	r3, [r4, #0]
 80125a8:	2b2e      	cmp	r3, #46	; 0x2e
 80125aa:	d10c      	bne.n	80125c6 <_vfiprintf_r+0x176>
 80125ac:	7863      	ldrb	r3, [r4, #1]
 80125ae:	2b2a      	cmp	r3, #42	; 0x2a
 80125b0:	d135      	bne.n	801261e <_vfiprintf_r+0x1ce>
 80125b2:	9b03      	ldr	r3, [sp, #12]
 80125b4:	1d1a      	adds	r2, r3, #4
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	9203      	str	r2, [sp, #12]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	bfb8      	it	lt
 80125be:	f04f 33ff 	movlt.w	r3, #4294967295
 80125c2:	3402      	adds	r4, #2
 80125c4:	9305      	str	r3, [sp, #20]
 80125c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80126ac <_vfiprintf_r+0x25c>
 80125ca:	7821      	ldrb	r1, [r4, #0]
 80125cc:	2203      	movs	r2, #3
 80125ce:	4650      	mov	r0, sl
 80125d0:	f7ed fe1e 	bl	8000210 <memchr>
 80125d4:	b140      	cbz	r0, 80125e8 <_vfiprintf_r+0x198>
 80125d6:	2340      	movs	r3, #64	; 0x40
 80125d8:	eba0 000a 	sub.w	r0, r0, sl
 80125dc:	fa03 f000 	lsl.w	r0, r3, r0
 80125e0:	9b04      	ldr	r3, [sp, #16]
 80125e2:	4303      	orrs	r3, r0
 80125e4:	3401      	adds	r4, #1
 80125e6:	9304      	str	r3, [sp, #16]
 80125e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125ec:	482c      	ldr	r0, [pc, #176]	; (80126a0 <_vfiprintf_r+0x250>)
 80125ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80125f2:	2206      	movs	r2, #6
 80125f4:	f7ed fe0c 	bl	8000210 <memchr>
 80125f8:	2800      	cmp	r0, #0
 80125fa:	d03f      	beq.n	801267c <_vfiprintf_r+0x22c>
 80125fc:	4b29      	ldr	r3, [pc, #164]	; (80126a4 <_vfiprintf_r+0x254>)
 80125fe:	bb1b      	cbnz	r3, 8012648 <_vfiprintf_r+0x1f8>
 8012600:	9b03      	ldr	r3, [sp, #12]
 8012602:	3307      	adds	r3, #7
 8012604:	f023 0307 	bic.w	r3, r3, #7
 8012608:	3308      	adds	r3, #8
 801260a:	9303      	str	r3, [sp, #12]
 801260c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801260e:	443b      	add	r3, r7
 8012610:	9309      	str	r3, [sp, #36]	; 0x24
 8012612:	e767      	b.n	80124e4 <_vfiprintf_r+0x94>
 8012614:	fb0c 3202 	mla	r2, ip, r2, r3
 8012618:	460c      	mov	r4, r1
 801261a:	2001      	movs	r0, #1
 801261c:	e7a5      	b.n	801256a <_vfiprintf_r+0x11a>
 801261e:	2300      	movs	r3, #0
 8012620:	3401      	adds	r4, #1
 8012622:	9305      	str	r3, [sp, #20]
 8012624:	4619      	mov	r1, r3
 8012626:	f04f 0c0a 	mov.w	ip, #10
 801262a:	4620      	mov	r0, r4
 801262c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012630:	3a30      	subs	r2, #48	; 0x30
 8012632:	2a09      	cmp	r2, #9
 8012634:	d903      	bls.n	801263e <_vfiprintf_r+0x1ee>
 8012636:	2b00      	cmp	r3, #0
 8012638:	d0c5      	beq.n	80125c6 <_vfiprintf_r+0x176>
 801263a:	9105      	str	r1, [sp, #20]
 801263c:	e7c3      	b.n	80125c6 <_vfiprintf_r+0x176>
 801263e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012642:	4604      	mov	r4, r0
 8012644:	2301      	movs	r3, #1
 8012646:	e7f0      	b.n	801262a <_vfiprintf_r+0x1da>
 8012648:	ab03      	add	r3, sp, #12
 801264a:	9300      	str	r3, [sp, #0]
 801264c:	462a      	mov	r2, r5
 801264e:	4b16      	ldr	r3, [pc, #88]	; (80126a8 <_vfiprintf_r+0x258>)
 8012650:	a904      	add	r1, sp, #16
 8012652:	4630      	mov	r0, r6
 8012654:	f3af 8000 	nop.w
 8012658:	4607      	mov	r7, r0
 801265a:	1c78      	adds	r0, r7, #1
 801265c:	d1d6      	bne.n	801260c <_vfiprintf_r+0x1bc>
 801265e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012660:	07d9      	lsls	r1, r3, #31
 8012662:	d405      	bmi.n	8012670 <_vfiprintf_r+0x220>
 8012664:	89ab      	ldrh	r3, [r5, #12]
 8012666:	059a      	lsls	r2, r3, #22
 8012668:	d402      	bmi.n	8012670 <_vfiprintf_r+0x220>
 801266a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801266c:	f7fd fb54 	bl	800fd18 <__retarget_lock_release_recursive>
 8012670:	89ab      	ldrh	r3, [r5, #12]
 8012672:	065b      	lsls	r3, r3, #25
 8012674:	f53f af12 	bmi.w	801249c <_vfiprintf_r+0x4c>
 8012678:	9809      	ldr	r0, [sp, #36]	; 0x24
 801267a:	e711      	b.n	80124a0 <_vfiprintf_r+0x50>
 801267c:	ab03      	add	r3, sp, #12
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	462a      	mov	r2, r5
 8012682:	4b09      	ldr	r3, [pc, #36]	; (80126a8 <_vfiprintf_r+0x258>)
 8012684:	a904      	add	r1, sp, #16
 8012686:	4630      	mov	r0, r6
 8012688:	f000 f880 	bl	801278c <_printf_i>
 801268c:	e7e4      	b.n	8012658 <_vfiprintf_r+0x208>
 801268e:	bf00      	nop
 8012690:	080146c8 	.word	0x080146c8
 8012694:	080146e8 	.word	0x080146e8
 8012698:	080146a8 	.word	0x080146a8
 801269c:	0801496c 	.word	0x0801496c
 80126a0:	08014976 	.word	0x08014976
 80126a4:	00000000 	.word	0x00000000
 80126a8:	0801242b 	.word	0x0801242b
 80126ac:	08014972 	.word	0x08014972

080126b0 <_printf_common>:
 80126b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126b4:	4616      	mov	r6, r2
 80126b6:	4699      	mov	r9, r3
 80126b8:	688a      	ldr	r2, [r1, #8]
 80126ba:	690b      	ldr	r3, [r1, #16]
 80126bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80126c0:	4293      	cmp	r3, r2
 80126c2:	bfb8      	it	lt
 80126c4:	4613      	movlt	r3, r2
 80126c6:	6033      	str	r3, [r6, #0]
 80126c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80126cc:	4607      	mov	r7, r0
 80126ce:	460c      	mov	r4, r1
 80126d0:	b10a      	cbz	r2, 80126d6 <_printf_common+0x26>
 80126d2:	3301      	adds	r3, #1
 80126d4:	6033      	str	r3, [r6, #0]
 80126d6:	6823      	ldr	r3, [r4, #0]
 80126d8:	0699      	lsls	r1, r3, #26
 80126da:	bf42      	ittt	mi
 80126dc:	6833      	ldrmi	r3, [r6, #0]
 80126de:	3302      	addmi	r3, #2
 80126e0:	6033      	strmi	r3, [r6, #0]
 80126e2:	6825      	ldr	r5, [r4, #0]
 80126e4:	f015 0506 	ands.w	r5, r5, #6
 80126e8:	d106      	bne.n	80126f8 <_printf_common+0x48>
 80126ea:	f104 0a19 	add.w	sl, r4, #25
 80126ee:	68e3      	ldr	r3, [r4, #12]
 80126f0:	6832      	ldr	r2, [r6, #0]
 80126f2:	1a9b      	subs	r3, r3, r2
 80126f4:	42ab      	cmp	r3, r5
 80126f6:	dc26      	bgt.n	8012746 <_printf_common+0x96>
 80126f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80126fc:	1e13      	subs	r3, r2, #0
 80126fe:	6822      	ldr	r2, [r4, #0]
 8012700:	bf18      	it	ne
 8012702:	2301      	movne	r3, #1
 8012704:	0692      	lsls	r2, r2, #26
 8012706:	d42b      	bmi.n	8012760 <_printf_common+0xb0>
 8012708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801270c:	4649      	mov	r1, r9
 801270e:	4638      	mov	r0, r7
 8012710:	47c0      	blx	r8
 8012712:	3001      	adds	r0, #1
 8012714:	d01e      	beq.n	8012754 <_printf_common+0xa4>
 8012716:	6823      	ldr	r3, [r4, #0]
 8012718:	68e5      	ldr	r5, [r4, #12]
 801271a:	6832      	ldr	r2, [r6, #0]
 801271c:	f003 0306 	and.w	r3, r3, #6
 8012720:	2b04      	cmp	r3, #4
 8012722:	bf08      	it	eq
 8012724:	1aad      	subeq	r5, r5, r2
 8012726:	68a3      	ldr	r3, [r4, #8]
 8012728:	6922      	ldr	r2, [r4, #16]
 801272a:	bf0c      	ite	eq
 801272c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012730:	2500      	movne	r5, #0
 8012732:	4293      	cmp	r3, r2
 8012734:	bfc4      	itt	gt
 8012736:	1a9b      	subgt	r3, r3, r2
 8012738:	18ed      	addgt	r5, r5, r3
 801273a:	2600      	movs	r6, #0
 801273c:	341a      	adds	r4, #26
 801273e:	42b5      	cmp	r5, r6
 8012740:	d11a      	bne.n	8012778 <_printf_common+0xc8>
 8012742:	2000      	movs	r0, #0
 8012744:	e008      	b.n	8012758 <_printf_common+0xa8>
 8012746:	2301      	movs	r3, #1
 8012748:	4652      	mov	r2, sl
 801274a:	4649      	mov	r1, r9
 801274c:	4638      	mov	r0, r7
 801274e:	47c0      	blx	r8
 8012750:	3001      	adds	r0, #1
 8012752:	d103      	bne.n	801275c <_printf_common+0xac>
 8012754:	f04f 30ff 	mov.w	r0, #4294967295
 8012758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801275c:	3501      	adds	r5, #1
 801275e:	e7c6      	b.n	80126ee <_printf_common+0x3e>
 8012760:	18e1      	adds	r1, r4, r3
 8012762:	1c5a      	adds	r2, r3, #1
 8012764:	2030      	movs	r0, #48	; 0x30
 8012766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801276a:	4422      	add	r2, r4
 801276c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012774:	3302      	adds	r3, #2
 8012776:	e7c7      	b.n	8012708 <_printf_common+0x58>
 8012778:	2301      	movs	r3, #1
 801277a:	4622      	mov	r2, r4
 801277c:	4649      	mov	r1, r9
 801277e:	4638      	mov	r0, r7
 8012780:	47c0      	blx	r8
 8012782:	3001      	adds	r0, #1
 8012784:	d0e6      	beq.n	8012754 <_printf_common+0xa4>
 8012786:	3601      	adds	r6, #1
 8012788:	e7d9      	b.n	801273e <_printf_common+0x8e>
	...

0801278c <_printf_i>:
 801278c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012790:	460c      	mov	r4, r1
 8012792:	4691      	mov	r9, r2
 8012794:	7e27      	ldrb	r7, [r4, #24]
 8012796:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012798:	2f78      	cmp	r7, #120	; 0x78
 801279a:	4680      	mov	r8, r0
 801279c:	469a      	mov	sl, r3
 801279e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80127a2:	d807      	bhi.n	80127b4 <_printf_i+0x28>
 80127a4:	2f62      	cmp	r7, #98	; 0x62
 80127a6:	d80a      	bhi.n	80127be <_printf_i+0x32>
 80127a8:	2f00      	cmp	r7, #0
 80127aa:	f000 80d8 	beq.w	801295e <_printf_i+0x1d2>
 80127ae:	2f58      	cmp	r7, #88	; 0x58
 80127b0:	f000 80a3 	beq.w	80128fa <_printf_i+0x16e>
 80127b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80127b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80127bc:	e03a      	b.n	8012834 <_printf_i+0xa8>
 80127be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80127c2:	2b15      	cmp	r3, #21
 80127c4:	d8f6      	bhi.n	80127b4 <_printf_i+0x28>
 80127c6:	a001      	add	r0, pc, #4	; (adr r0, 80127cc <_printf_i+0x40>)
 80127c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80127cc:	08012825 	.word	0x08012825
 80127d0:	08012839 	.word	0x08012839
 80127d4:	080127b5 	.word	0x080127b5
 80127d8:	080127b5 	.word	0x080127b5
 80127dc:	080127b5 	.word	0x080127b5
 80127e0:	080127b5 	.word	0x080127b5
 80127e4:	08012839 	.word	0x08012839
 80127e8:	080127b5 	.word	0x080127b5
 80127ec:	080127b5 	.word	0x080127b5
 80127f0:	080127b5 	.word	0x080127b5
 80127f4:	080127b5 	.word	0x080127b5
 80127f8:	08012945 	.word	0x08012945
 80127fc:	08012869 	.word	0x08012869
 8012800:	08012927 	.word	0x08012927
 8012804:	080127b5 	.word	0x080127b5
 8012808:	080127b5 	.word	0x080127b5
 801280c:	08012967 	.word	0x08012967
 8012810:	080127b5 	.word	0x080127b5
 8012814:	08012869 	.word	0x08012869
 8012818:	080127b5 	.word	0x080127b5
 801281c:	080127b5 	.word	0x080127b5
 8012820:	0801292f 	.word	0x0801292f
 8012824:	680b      	ldr	r3, [r1, #0]
 8012826:	1d1a      	adds	r2, r3, #4
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	600a      	str	r2, [r1, #0]
 801282c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012834:	2301      	movs	r3, #1
 8012836:	e0a3      	b.n	8012980 <_printf_i+0x1f4>
 8012838:	6825      	ldr	r5, [r4, #0]
 801283a:	6808      	ldr	r0, [r1, #0]
 801283c:	062e      	lsls	r6, r5, #24
 801283e:	f100 0304 	add.w	r3, r0, #4
 8012842:	d50a      	bpl.n	801285a <_printf_i+0xce>
 8012844:	6805      	ldr	r5, [r0, #0]
 8012846:	600b      	str	r3, [r1, #0]
 8012848:	2d00      	cmp	r5, #0
 801284a:	da03      	bge.n	8012854 <_printf_i+0xc8>
 801284c:	232d      	movs	r3, #45	; 0x2d
 801284e:	426d      	negs	r5, r5
 8012850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012854:	485e      	ldr	r0, [pc, #376]	; (80129d0 <_printf_i+0x244>)
 8012856:	230a      	movs	r3, #10
 8012858:	e019      	b.n	801288e <_printf_i+0x102>
 801285a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801285e:	6805      	ldr	r5, [r0, #0]
 8012860:	600b      	str	r3, [r1, #0]
 8012862:	bf18      	it	ne
 8012864:	b22d      	sxthne	r5, r5
 8012866:	e7ef      	b.n	8012848 <_printf_i+0xbc>
 8012868:	680b      	ldr	r3, [r1, #0]
 801286a:	6825      	ldr	r5, [r4, #0]
 801286c:	1d18      	adds	r0, r3, #4
 801286e:	6008      	str	r0, [r1, #0]
 8012870:	0628      	lsls	r0, r5, #24
 8012872:	d501      	bpl.n	8012878 <_printf_i+0xec>
 8012874:	681d      	ldr	r5, [r3, #0]
 8012876:	e002      	b.n	801287e <_printf_i+0xf2>
 8012878:	0669      	lsls	r1, r5, #25
 801287a:	d5fb      	bpl.n	8012874 <_printf_i+0xe8>
 801287c:	881d      	ldrh	r5, [r3, #0]
 801287e:	4854      	ldr	r0, [pc, #336]	; (80129d0 <_printf_i+0x244>)
 8012880:	2f6f      	cmp	r7, #111	; 0x6f
 8012882:	bf0c      	ite	eq
 8012884:	2308      	moveq	r3, #8
 8012886:	230a      	movne	r3, #10
 8012888:	2100      	movs	r1, #0
 801288a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801288e:	6866      	ldr	r6, [r4, #4]
 8012890:	60a6      	str	r6, [r4, #8]
 8012892:	2e00      	cmp	r6, #0
 8012894:	bfa2      	ittt	ge
 8012896:	6821      	ldrge	r1, [r4, #0]
 8012898:	f021 0104 	bicge.w	r1, r1, #4
 801289c:	6021      	strge	r1, [r4, #0]
 801289e:	b90d      	cbnz	r5, 80128a4 <_printf_i+0x118>
 80128a0:	2e00      	cmp	r6, #0
 80128a2:	d04d      	beq.n	8012940 <_printf_i+0x1b4>
 80128a4:	4616      	mov	r6, r2
 80128a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80128aa:	fb03 5711 	mls	r7, r3, r1, r5
 80128ae:	5dc7      	ldrb	r7, [r0, r7]
 80128b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80128b4:	462f      	mov	r7, r5
 80128b6:	42bb      	cmp	r3, r7
 80128b8:	460d      	mov	r5, r1
 80128ba:	d9f4      	bls.n	80128a6 <_printf_i+0x11a>
 80128bc:	2b08      	cmp	r3, #8
 80128be:	d10b      	bne.n	80128d8 <_printf_i+0x14c>
 80128c0:	6823      	ldr	r3, [r4, #0]
 80128c2:	07df      	lsls	r7, r3, #31
 80128c4:	d508      	bpl.n	80128d8 <_printf_i+0x14c>
 80128c6:	6923      	ldr	r3, [r4, #16]
 80128c8:	6861      	ldr	r1, [r4, #4]
 80128ca:	4299      	cmp	r1, r3
 80128cc:	bfde      	ittt	le
 80128ce:	2330      	movle	r3, #48	; 0x30
 80128d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80128d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80128d8:	1b92      	subs	r2, r2, r6
 80128da:	6122      	str	r2, [r4, #16]
 80128dc:	f8cd a000 	str.w	sl, [sp]
 80128e0:	464b      	mov	r3, r9
 80128e2:	aa03      	add	r2, sp, #12
 80128e4:	4621      	mov	r1, r4
 80128e6:	4640      	mov	r0, r8
 80128e8:	f7ff fee2 	bl	80126b0 <_printf_common>
 80128ec:	3001      	adds	r0, #1
 80128ee:	d14c      	bne.n	801298a <_printf_i+0x1fe>
 80128f0:	f04f 30ff 	mov.w	r0, #4294967295
 80128f4:	b004      	add	sp, #16
 80128f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128fa:	4835      	ldr	r0, [pc, #212]	; (80129d0 <_printf_i+0x244>)
 80128fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012900:	6823      	ldr	r3, [r4, #0]
 8012902:	680e      	ldr	r6, [r1, #0]
 8012904:	061f      	lsls	r7, r3, #24
 8012906:	f856 5b04 	ldr.w	r5, [r6], #4
 801290a:	600e      	str	r6, [r1, #0]
 801290c:	d514      	bpl.n	8012938 <_printf_i+0x1ac>
 801290e:	07d9      	lsls	r1, r3, #31
 8012910:	bf44      	itt	mi
 8012912:	f043 0320 	orrmi.w	r3, r3, #32
 8012916:	6023      	strmi	r3, [r4, #0]
 8012918:	b91d      	cbnz	r5, 8012922 <_printf_i+0x196>
 801291a:	6823      	ldr	r3, [r4, #0]
 801291c:	f023 0320 	bic.w	r3, r3, #32
 8012920:	6023      	str	r3, [r4, #0]
 8012922:	2310      	movs	r3, #16
 8012924:	e7b0      	b.n	8012888 <_printf_i+0xfc>
 8012926:	6823      	ldr	r3, [r4, #0]
 8012928:	f043 0320 	orr.w	r3, r3, #32
 801292c:	6023      	str	r3, [r4, #0]
 801292e:	2378      	movs	r3, #120	; 0x78
 8012930:	4828      	ldr	r0, [pc, #160]	; (80129d4 <_printf_i+0x248>)
 8012932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012936:	e7e3      	b.n	8012900 <_printf_i+0x174>
 8012938:	065e      	lsls	r6, r3, #25
 801293a:	bf48      	it	mi
 801293c:	b2ad      	uxthmi	r5, r5
 801293e:	e7e6      	b.n	801290e <_printf_i+0x182>
 8012940:	4616      	mov	r6, r2
 8012942:	e7bb      	b.n	80128bc <_printf_i+0x130>
 8012944:	680b      	ldr	r3, [r1, #0]
 8012946:	6826      	ldr	r6, [r4, #0]
 8012948:	6960      	ldr	r0, [r4, #20]
 801294a:	1d1d      	adds	r5, r3, #4
 801294c:	600d      	str	r5, [r1, #0]
 801294e:	0635      	lsls	r5, r6, #24
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	d501      	bpl.n	8012958 <_printf_i+0x1cc>
 8012954:	6018      	str	r0, [r3, #0]
 8012956:	e002      	b.n	801295e <_printf_i+0x1d2>
 8012958:	0671      	lsls	r1, r6, #25
 801295a:	d5fb      	bpl.n	8012954 <_printf_i+0x1c8>
 801295c:	8018      	strh	r0, [r3, #0]
 801295e:	2300      	movs	r3, #0
 8012960:	6123      	str	r3, [r4, #16]
 8012962:	4616      	mov	r6, r2
 8012964:	e7ba      	b.n	80128dc <_printf_i+0x150>
 8012966:	680b      	ldr	r3, [r1, #0]
 8012968:	1d1a      	adds	r2, r3, #4
 801296a:	600a      	str	r2, [r1, #0]
 801296c:	681e      	ldr	r6, [r3, #0]
 801296e:	6862      	ldr	r2, [r4, #4]
 8012970:	2100      	movs	r1, #0
 8012972:	4630      	mov	r0, r6
 8012974:	f7ed fc4c 	bl	8000210 <memchr>
 8012978:	b108      	cbz	r0, 801297e <_printf_i+0x1f2>
 801297a:	1b80      	subs	r0, r0, r6
 801297c:	6060      	str	r0, [r4, #4]
 801297e:	6863      	ldr	r3, [r4, #4]
 8012980:	6123      	str	r3, [r4, #16]
 8012982:	2300      	movs	r3, #0
 8012984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012988:	e7a8      	b.n	80128dc <_printf_i+0x150>
 801298a:	6923      	ldr	r3, [r4, #16]
 801298c:	4632      	mov	r2, r6
 801298e:	4649      	mov	r1, r9
 8012990:	4640      	mov	r0, r8
 8012992:	47d0      	blx	sl
 8012994:	3001      	adds	r0, #1
 8012996:	d0ab      	beq.n	80128f0 <_printf_i+0x164>
 8012998:	6823      	ldr	r3, [r4, #0]
 801299a:	079b      	lsls	r3, r3, #30
 801299c:	d413      	bmi.n	80129c6 <_printf_i+0x23a>
 801299e:	68e0      	ldr	r0, [r4, #12]
 80129a0:	9b03      	ldr	r3, [sp, #12]
 80129a2:	4298      	cmp	r0, r3
 80129a4:	bfb8      	it	lt
 80129a6:	4618      	movlt	r0, r3
 80129a8:	e7a4      	b.n	80128f4 <_printf_i+0x168>
 80129aa:	2301      	movs	r3, #1
 80129ac:	4632      	mov	r2, r6
 80129ae:	4649      	mov	r1, r9
 80129b0:	4640      	mov	r0, r8
 80129b2:	47d0      	blx	sl
 80129b4:	3001      	adds	r0, #1
 80129b6:	d09b      	beq.n	80128f0 <_printf_i+0x164>
 80129b8:	3501      	adds	r5, #1
 80129ba:	68e3      	ldr	r3, [r4, #12]
 80129bc:	9903      	ldr	r1, [sp, #12]
 80129be:	1a5b      	subs	r3, r3, r1
 80129c0:	42ab      	cmp	r3, r5
 80129c2:	dcf2      	bgt.n	80129aa <_printf_i+0x21e>
 80129c4:	e7eb      	b.n	801299e <_printf_i+0x212>
 80129c6:	2500      	movs	r5, #0
 80129c8:	f104 0619 	add.w	r6, r4, #25
 80129cc:	e7f5      	b.n	80129ba <_printf_i+0x22e>
 80129ce:	bf00      	nop
 80129d0:	0801497d 	.word	0x0801497d
 80129d4:	0801498e 	.word	0x0801498e

080129d8 <_read_r>:
 80129d8:	b538      	push	{r3, r4, r5, lr}
 80129da:	4d07      	ldr	r5, [pc, #28]	; (80129f8 <_read_r+0x20>)
 80129dc:	4604      	mov	r4, r0
 80129de:	4608      	mov	r0, r1
 80129e0:	4611      	mov	r1, r2
 80129e2:	2200      	movs	r2, #0
 80129e4:	602a      	str	r2, [r5, #0]
 80129e6:	461a      	mov	r2, r3
 80129e8:	f7f0 f804 	bl	80029f4 <_read>
 80129ec:	1c43      	adds	r3, r0, #1
 80129ee:	d102      	bne.n	80129f6 <_read_r+0x1e>
 80129f0:	682b      	ldr	r3, [r5, #0]
 80129f2:	b103      	cbz	r3, 80129f6 <_read_r+0x1e>
 80129f4:	6023      	str	r3, [r4, #0]
 80129f6:	bd38      	pop	{r3, r4, r5, pc}
 80129f8:	20003414 	.word	0x20003414
 80129fc:	00000000 	.word	0x00000000

08012a00 <nan>:
 8012a00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012a08 <nan+0x8>
 8012a04:	4770      	bx	lr
 8012a06:	bf00      	nop
 8012a08:	00000000 	.word	0x00000000
 8012a0c:	7ff80000 	.word	0x7ff80000

08012a10 <__ascii_wctomb>:
 8012a10:	b149      	cbz	r1, 8012a26 <__ascii_wctomb+0x16>
 8012a12:	2aff      	cmp	r2, #255	; 0xff
 8012a14:	bf85      	ittet	hi
 8012a16:	238a      	movhi	r3, #138	; 0x8a
 8012a18:	6003      	strhi	r3, [r0, #0]
 8012a1a:	700a      	strbls	r2, [r1, #0]
 8012a1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012a20:	bf98      	it	ls
 8012a22:	2001      	movls	r0, #1
 8012a24:	4770      	bx	lr
 8012a26:	4608      	mov	r0, r1
 8012a28:	4770      	bx	lr
	...

08012a2c <__assert_func>:
 8012a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a2e:	4614      	mov	r4, r2
 8012a30:	461a      	mov	r2, r3
 8012a32:	4b09      	ldr	r3, [pc, #36]	; (8012a58 <__assert_func+0x2c>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	4605      	mov	r5, r0
 8012a38:	68d8      	ldr	r0, [r3, #12]
 8012a3a:	b14c      	cbz	r4, 8012a50 <__assert_func+0x24>
 8012a3c:	4b07      	ldr	r3, [pc, #28]	; (8012a5c <__assert_func+0x30>)
 8012a3e:	9100      	str	r1, [sp, #0]
 8012a40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a44:	4906      	ldr	r1, [pc, #24]	; (8012a60 <__assert_func+0x34>)
 8012a46:	462b      	mov	r3, r5
 8012a48:	f000 f80e 	bl	8012a68 <fiprintf>
 8012a4c:	f000 f840 	bl	8012ad0 <abort>
 8012a50:	4b04      	ldr	r3, [pc, #16]	; (8012a64 <__assert_func+0x38>)
 8012a52:	461c      	mov	r4, r3
 8012a54:	e7f3      	b.n	8012a3e <__assert_func+0x12>
 8012a56:	bf00      	nop
 8012a58:	20000160 	.word	0x20000160
 8012a5c:	0801499f 	.word	0x0801499f
 8012a60:	080149ac 	.word	0x080149ac
 8012a64:	080149da 	.word	0x080149da

08012a68 <fiprintf>:
 8012a68:	b40e      	push	{r1, r2, r3}
 8012a6a:	b503      	push	{r0, r1, lr}
 8012a6c:	4601      	mov	r1, r0
 8012a6e:	ab03      	add	r3, sp, #12
 8012a70:	4805      	ldr	r0, [pc, #20]	; (8012a88 <fiprintf+0x20>)
 8012a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a76:	6800      	ldr	r0, [r0, #0]
 8012a78:	9301      	str	r3, [sp, #4]
 8012a7a:	f7ff fce9 	bl	8012450 <_vfiprintf_r>
 8012a7e:	b002      	add	sp, #8
 8012a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a84:	b003      	add	sp, #12
 8012a86:	4770      	bx	lr
 8012a88:	20000160 	.word	0x20000160

08012a8c <memmove>:
 8012a8c:	4288      	cmp	r0, r1
 8012a8e:	b510      	push	{r4, lr}
 8012a90:	eb01 0402 	add.w	r4, r1, r2
 8012a94:	d902      	bls.n	8012a9c <memmove+0x10>
 8012a96:	4284      	cmp	r4, r0
 8012a98:	4623      	mov	r3, r4
 8012a9a:	d807      	bhi.n	8012aac <memmove+0x20>
 8012a9c:	1e43      	subs	r3, r0, #1
 8012a9e:	42a1      	cmp	r1, r4
 8012aa0:	d008      	beq.n	8012ab4 <memmove+0x28>
 8012aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012aaa:	e7f8      	b.n	8012a9e <memmove+0x12>
 8012aac:	4402      	add	r2, r0
 8012aae:	4601      	mov	r1, r0
 8012ab0:	428a      	cmp	r2, r1
 8012ab2:	d100      	bne.n	8012ab6 <memmove+0x2a>
 8012ab4:	bd10      	pop	{r4, pc}
 8012ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012abe:	e7f7      	b.n	8012ab0 <memmove+0x24>

08012ac0 <_malloc_usable_size_r>:
 8012ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ac4:	1f18      	subs	r0, r3, #4
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	bfbc      	itt	lt
 8012aca:	580b      	ldrlt	r3, [r1, r0]
 8012acc:	18c0      	addlt	r0, r0, r3
 8012ace:	4770      	bx	lr

08012ad0 <abort>:
 8012ad0:	b508      	push	{r3, lr}
 8012ad2:	2006      	movs	r0, #6
 8012ad4:	f000 f82c 	bl	8012b30 <raise>
 8012ad8:	2001      	movs	r0, #1
 8012ada:	f7ef ff81 	bl	80029e0 <_exit>

08012ade <_raise_r>:
 8012ade:	291f      	cmp	r1, #31
 8012ae0:	b538      	push	{r3, r4, r5, lr}
 8012ae2:	4604      	mov	r4, r0
 8012ae4:	460d      	mov	r5, r1
 8012ae6:	d904      	bls.n	8012af2 <_raise_r+0x14>
 8012ae8:	2316      	movs	r3, #22
 8012aea:	6003      	str	r3, [r0, #0]
 8012aec:	f04f 30ff 	mov.w	r0, #4294967295
 8012af0:	bd38      	pop	{r3, r4, r5, pc}
 8012af2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012af4:	b112      	cbz	r2, 8012afc <_raise_r+0x1e>
 8012af6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012afa:	b94b      	cbnz	r3, 8012b10 <_raise_r+0x32>
 8012afc:	4620      	mov	r0, r4
 8012afe:	f000 f831 	bl	8012b64 <_getpid_r>
 8012b02:	462a      	mov	r2, r5
 8012b04:	4601      	mov	r1, r0
 8012b06:	4620      	mov	r0, r4
 8012b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b0c:	f000 b818 	b.w	8012b40 <_kill_r>
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d00a      	beq.n	8012b2a <_raise_r+0x4c>
 8012b14:	1c59      	adds	r1, r3, #1
 8012b16:	d103      	bne.n	8012b20 <_raise_r+0x42>
 8012b18:	2316      	movs	r3, #22
 8012b1a:	6003      	str	r3, [r0, #0]
 8012b1c:	2001      	movs	r0, #1
 8012b1e:	e7e7      	b.n	8012af0 <_raise_r+0x12>
 8012b20:	2400      	movs	r4, #0
 8012b22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012b26:	4628      	mov	r0, r5
 8012b28:	4798      	blx	r3
 8012b2a:	2000      	movs	r0, #0
 8012b2c:	e7e0      	b.n	8012af0 <_raise_r+0x12>
	...

08012b30 <raise>:
 8012b30:	4b02      	ldr	r3, [pc, #8]	; (8012b3c <raise+0xc>)
 8012b32:	4601      	mov	r1, r0
 8012b34:	6818      	ldr	r0, [r3, #0]
 8012b36:	f7ff bfd2 	b.w	8012ade <_raise_r>
 8012b3a:	bf00      	nop
 8012b3c:	20000160 	.word	0x20000160

08012b40 <_kill_r>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	4d07      	ldr	r5, [pc, #28]	; (8012b60 <_kill_r+0x20>)
 8012b44:	2300      	movs	r3, #0
 8012b46:	4604      	mov	r4, r0
 8012b48:	4608      	mov	r0, r1
 8012b4a:	4611      	mov	r1, r2
 8012b4c:	602b      	str	r3, [r5, #0]
 8012b4e:	f7ef ff37 	bl	80029c0 <_kill>
 8012b52:	1c43      	adds	r3, r0, #1
 8012b54:	d102      	bne.n	8012b5c <_kill_r+0x1c>
 8012b56:	682b      	ldr	r3, [r5, #0]
 8012b58:	b103      	cbz	r3, 8012b5c <_kill_r+0x1c>
 8012b5a:	6023      	str	r3, [r4, #0]
 8012b5c:	bd38      	pop	{r3, r4, r5, pc}
 8012b5e:	bf00      	nop
 8012b60:	20003414 	.word	0x20003414

08012b64 <_getpid_r>:
 8012b64:	f7ef bf24 	b.w	80029b0 <_getpid>

08012b68 <_init>:
 8012b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b6a:	bf00      	nop
 8012b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b6e:	bc08      	pop	{r3}
 8012b70:	469e      	mov	lr, r3
 8012b72:	4770      	bx	lr

08012b74 <_fini>:
 8012b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b76:	bf00      	nop
 8012b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b7a:	bc08      	pop	{r3}
 8012b7c:	469e      	mov	lr, r3
 8012b7e:	4770      	bx	lr
