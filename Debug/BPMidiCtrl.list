
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a790  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  0800a930  0800a930  0001a930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be78  0800be78  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800be78  0800be78  0001be78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be80  0800be80  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be80  0800be80  0001be80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be84  0800be84  0001be84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800be88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002adc  20000190  0800c018  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c6c  0800c018  00022c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c782  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040cc  00000000  00000000  0003c942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00040a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001cdaf  00000000  00000000  00041c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001951d  00000000  00000000  0005e9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a15a0  00000000  00000000  00077f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001194ac  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001078  00000000  00000000  00119500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054c8  00000000  00000000  0011a578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a918 	.word	0x0800a918

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	0800a918 	.word	0x0800a918

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <KnobMap>:
//uint8_t Knob_Map(Knob *k) {
//	return k->value * k->max_range / (k->max_values - 1);
//}

// Maps values from (0, max_values-1) to (0, m)
uint8_t KnobMap(Knob *k, uint8_t value, uint8_t m) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	78ba      	ldrb	r2, [r7, #2]
 8000f28:	fb02 f203 	mul.w	r2, r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7edb      	ldrb	r3, [r3, #27]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <adc_Averaged_Read>:
void ADC_Select(uint8_t channel);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t adc_Averaged_Read(uint8_t channel) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
    if (channel >= NUM_ADC_CHANNELS) return 1;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d901      	bls.n	8000f58 <adc_Averaged_Read+0x14>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e04c      	b.n	8000ff2 <adc_Averaged_Read+0xae>

    ADC_ChannelConfTypeDef sConfig = {0};
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
    sConfig.Channel = adcChannels[channel];
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4a24      	ldr	r2, [pc, #144]	; (8000ffc <adc_Averaged_Read+0xb8>)
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4820      	ldr	r0, [pc, #128]	; (8001000 <adc_Averaged_Read+0xbc>)
 8000f80:	f001 fd12 	bl	80029a8 <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <adc_Averaged_Read+0x4a>
        Error_Handler();
 8000f8a:	f000 fbd9 	bl	8001740 <Error_Handler>
    }

    for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	77fb      	strb	r3, [r7, #31]
 8000f92:	e016      	b.n	8000fc2 <adc_Averaged_Read+0x7e>
        HAL_ADC_Start(&hadc1);
 8000f94:	481a      	ldr	r0, [pc, #104]	; (8001000 <adc_Averaged_Read+0xbc>)
 8000f96:	f001 fb87 	bl	80026a8 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f9e:	4818      	ldr	r0, [pc, #96]	; (8001000 <adc_Averaged_Read+0xbc>)
 8000fa0:	f001 fc69 	bl	8002876 <HAL_ADC_PollForConversion>
        adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 8000fa4:	4816      	ldr	r0, [pc, #88]	; (8001000 <adc_Averaged_Read+0xbc>)
 8000fa6:	f001 fcf1 	bl	800298c <HAL_ADC_GetValue>
 8000faa:	4602      	mov	r2, r0
 8000fac:	7ffb      	ldrb	r3, [r7, #31]
 8000fae:	b291      	uxth	r1, r2
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <adc_Averaged_Read+0xc0>)
 8000fb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        HAL_ADC_Stop(&hadc1);
 8000fb6:	4812      	ldr	r0, [pc, #72]	; (8001000 <adc_Averaged_Read+0xbc>)
 8000fb8:	f001 fc2a 	bl	8002810 <HAL_ADC_Stop>
    for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8000fbc:	7ffb      	ldrb	r3, [r7, #31]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	77fb      	strb	r3, [r7, #31]
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	2b1f      	cmp	r3, #31
 8000fc6:	d9e5      	bls.n	8000f94 <adc_Averaged_Read+0x50>
    }

    uint16_t adc_sum = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	83bb      	strh	r3, [r7, #28]

    for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	76fb      	strb	r3, [r7, #27]
 8000fd0:	e009      	b.n	8000fe6 <adc_Averaged_Read+0xa2>
        adc_sum += adcBuf[i];
 8000fd2:	7efb      	ldrb	r3, [r7, #27]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <adc_Averaged_Read+0xc0>)
 8000fd6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fda:	8bbb      	ldrh	r3, [r7, #28]
 8000fdc:	4413      	add	r3, r2
 8000fde:	83bb      	strh	r3, [r7, #28]
    for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++)
 8000fe0:	7efb      	ldrb	r3, [r7, #27]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	76fb      	strb	r3, [r7, #27]
 8000fe6:	7efb      	ldrb	r3, [r7, #27]
 8000fe8:	2b1f      	cmp	r3, #31
 8000fea:	d9f2      	bls.n	8000fd2 <adc_Averaged_Read+0x8e>

    return adc_sum / NUM_ADC_SAMPLES;
 8000fec:	8bbb      	ldrh	r3, [r7, #28]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	b29b      	uxth	r3, r3
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000010 	.word	0x20000010
 8001000:	20002234 	.word	0x20002234
 8001004:	200001ac 	.word	0x200001ac

08001008 <MIDI_Send>:

void MIDI_Send(Knob *k, uint8_t value) {
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	MX_USB_Send_Midi(k->channel, k->cc, KnobMap(k, value, k->max_range));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7e1b      	ldrb	r3, [r3, #24]
 8001018:	461c      	mov	r4, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7e5b      	ldrb	r3, [r3, #25]
 800101e:	461d      	mov	r5, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7f1a      	ldrb	r2, [r3, #28]
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff73 	bl	8000f14 <KnobMap>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4629      	mov	r1, r5
 8001034:	4620      	mov	r0, r4
 8001036:	f007 ff7f 	bl	8008f38 <MX_USB_Send_Midi>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001044 <MIDI_Scale_And_Filter>:

uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
	float midi_scale_factor = 1.0 * (k->max_values) / UPPER_BOUND_ADC;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7edb      	ldrb	r3, [r3, #27]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa6d 	bl	8000534 <__aeabi_i2d>
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b45      	ldr	r3, [pc, #276]	; (8001174 <MIDI_Scale_And_Filter+0x130>)
 8001060:	f7ff fbfc 	bl	800085c <__aeabi_ddiv>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd86 	bl	8000b7c <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	60fb      	str	r3, [r7, #12]
	return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f7ff fa6f 	bl	8000558 <__aeabi_f2d>
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <MIDI_Scale_And_Filter+0x134>)
 8001080:	f7ff fac2 	bl	8000608 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4614      	mov	r4, r2
 800108a:	461d      	mov	r5, r3
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa50 	bl	8000534 <__aeabi_i2d>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4620      	mov	r0, r4
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff fab4 	bl	8000608 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4614      	mov	r4, r2
 80010a6:	461d      	mov	r5, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e9b      	ldrb	r3, [r3, #26]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa41 	bl	8000534 <__aeabi_i2d>
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <MIDI_Scale_And_Filter+0x134>)
 80010b8:	f7ff faa6 	bl	8000608 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4620      	mov	r0, r4
 80010c2:	4629      	mov	r1, r5
 80010c4:	f7ff f8ea 	bl	800029c <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4614      	mov	r4, r2
 80010ce:	461d      	mov	r5, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7f1b      	ldrb	r3, [r3, #28]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa2d 	bl	8000534 <__aeabi_i2d>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4620      	mov	r0, r4
 80010e0:	4629      	mov	r1, r5
 80010e2:	f7ff fd03 	bl	8000aec <__aeabi_dcmplt>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d032      	beq.n	8001152 <MIDI_Scale_And_Filter+0x10e>
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f7ff fa33 	bl	8000558 <__aeabi_f2d>
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MIDI_Scale_And_Filter+0x134>)
 80010f8:	f7ff fa86 	bl	8000608 <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4614      	mov	r4, r2
 8001102:	461d      	mov	r5, r3
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa14 	bl	8000534 <__aeabi_i2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4620      	mov	r0, r4
 8001112:	4629      	mov	r1, r5
 8001114:	f7ff fa78 	bl	8000608 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4614      	mov	r4, r2
 800111e:	461d      	mov	r5, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7e9b      	ldrb	r3, [r3, #26]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa05 	bl	8000534 <__aeabi_i2d>
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MIDI_Scale_And_Filter+0x134>)
 8001130:	f7ff fa6a 	bl	8000608 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4620      	mov	r0, r4
 800113a:	4629      	mov	r1, r5
 800113c:	f7ff f8ae 	bl	800029c <__adddf3>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fcf8 	bl	8000b3c <__aeabi_d2uiz>
 800114c:	4603      	mov	r3, r0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	e00c      	b.n	800116c <MIDI_Scale_And_Filter+0x128>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7f1b      	ldrb	r3, [r3, #28]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9ec 	bl	8000534 <__aeabi_i2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fcea 	bl	8000b3c <__aeabi_d2uiz>
 8001168:	4603      	mov	r3, r0
 800116a:	b2db      	uxtb	r3, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bdb0      	pop	{r4, r5, r7, pc}
 8001174:	406f4000 	.word	0x406f4000
 8001178:	3fe00000 	.word	0x3fe00000

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b0a3      	sub	sp, #140	; 0x8c
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Knob knobs[4] = {
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f008 fb69 	bl	8009860 <memset>
 800118e:	233f      	movs	r3, #63	; 0x3f
 8001190:	713b      	strb	r3, [r7, #4]
 8001192:	4aad      	ldr	r2, [pc, #692]	; (8001448 <main+0x2cc>)
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	6810      	ldr	r0, [r2, #0]
 8001198:	6018      	str	r0, [r3, #0]
 800119a:	8891      	ldrh	r1, [r2, #4]
 800119c:	7992      	ldrb	r2, [r2, #6]
 800119e:	8099      	strh	r1, [r3, #4]
 80011a0:	719a      	strb	r2, [r3, #6]
 80011a2:	f107 030e 	add.w	r3, r7, #14
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	2311      	movs	r3, #17
 80011ae:	777b      	strb	r3, [r7, #29]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	77fb      	strb	r3, [r7, #31]
 80011b4:	237f      	movs	r3, #127	; 0x7f
 80011b6:	f887 3020 	strb.w	r3, [r7, #32]
 80011ba:	2301      	movs	r3, #1
 80011bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80011c0:	237f      	movs	r3, #127	; 0x7f
 80011c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011c6:	2301      	movs	r3, #1
 80011c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011cc:	4b9f      	ldr	r3, [pc, #636]	; (800144c <main+0x2d0>)
 80011ce:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80011d2:	cb03      	ldmia	r3!, {r0, r1}
 80011d4:	6010      	str	r0, [r2, #0]
 80011d6:	6051      	str	r1, [r2, #4]
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	8113      	strh	r3, [r2, #8]
 80011dc:	f107 0331 	add.w	r3, r7, #49	; 0x31
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	711a      	strb	r2, [r3, #4]
 80011e6:	2301      	movs	r3, #1
 80011e8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80011ec:	2312      	movs	r3, #18
 80011ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80011f8:	237f      	movs	r3, #127	; 0x7f
 80011fa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80011fe:	2303      	movs	r3, #3
 8001200:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001204:	2301      	movs	r3, #1
 8001206:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800120a:	4a91      	ldr	r2, [pc, #580]	; (8001450 <main+0x2d4>)
 800120c:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8001210:	6810      	ldr	r0, [r2, #0]
 8001212:	6018      	str	r0, [r3, #0]
 8001214:	8892      	ldrh	r2, [r2, #4]
 8001216:	809a      	strh	r2, [r3, #4]
 8001218:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	721a      	strb	r2, [r3, #8]
 8001224:	2302      	movs	r3, #2
 8001226:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800122a:	2313      	movs	r3, #19
 800122c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001236:	237f      	movs	r3, #127	; 0x7f
 8001238:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800123c:	2304      	movs	r3, #4
 800123e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001242:	2301      	movs	r3, #1
 8001244:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001248:	2301      	movs	r3, #1
 800124a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800124e:	4a81      	ldr	r2, [pc, #516]	; (8001454 <main+0x2d8>)
 8001250:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8001254:	6810      	ldr	r0, [r2, #0]
 8001256:	6018      	str	r0, [r3, #0]
 8001258:	8892      	ldrh	r2, [r2, #4]
 800125a:	809a      	strh	r2, [r3, #4]
 800125c:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	721a      	strb	r2, [r3, #8]
 8001268:	2303      	movs	r3, #3
 800126a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 800126e:	2314      	movs	r3, #20
 8001270:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800127a:	237f      	movs	r3, #127	; 0x7f
 800127c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
		strncpy(knobs[i].sub_labels[9], "Pulse7", MAX_LABEL_CHARS);
		strncpy(knobs[i].sub_labels[10], "Pulse8", MAX_LABEL_CHARS);
		strncpy(knobs[i].sub_labels[11], "Pulse9", MAX_LABEL_CHARS);
	}*/

    knobs[0].sub_labels = malloc(sizeof(*knobs[0].sub_labels));
 8001280:	200f      	movs	r0, #15
 8001282:	f008 fae5 	bl	8009850 <malloc>
 8001286:	4603      	mov	r3, r0
 8001288:	61bb      	str	r3, [r7, #24]
    strncpy(knobs[0].sub_labels[0], "Filter 1", MAX_LABEL_CHARS);
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	220e      	movs	r2, #14
 800128e:	4972      	ldr	r1, [pc, #456]	; (8001458 <main+0x2dc>)
 8001290:	4618      	mov	r0, r3
 8001292:	f008 fc51 	bl	8009b38 <strncpy>

    knobs[1].sub_labels = malloc(sizeof(*knobs[1].sub_labels));
 8001296:	200f      	movs	r0, #15
 8001298:	f008 fada 	bl	8009850 <malloc>
 800129c:	4603      	mov	r3, r0
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
    strncpy(knobs[1].sub_labels[0], "Filter 2", MAX_LABEL_CHARS);
 80012a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012a2:	220e      	movs	r2, #14
 80012a4:	496d      	ldr	r1, [pc, #436]	; (800145c <main+0x2e0>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 fc46 	bl	8009b38 <strncpy>

    knobs[2].sub_labels = malloc(sizeof(*knobs[2].sub_labels));
 80012ac:	200f      	movs	r0, #15
 80012ae:	f008 facf 	bl	8009850 <malloc>
 80012b2:	4603      	mov	r3, r0
 80012b4:	65bb      	str	r3, [r7, #88]	; 0x58
    strncpy(knobs[2].sub_labels[0], "Filter 3", MAX_LABEL_CHARS);
 80012b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012b8:	220e      	movs	r2, #14
 80012ba:	4969      	ldr	r1, [pc, #420]	; (8001460 <main+0x2e4>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f008 fc3b 	bl	8009b38 <strncpy>

    knobs[3].sub_labels = malloc(sizeof(*knobs[3].sub_labels));
 80012c2:	200f      	movs	r0, #15
 80012c4:	f008 fac4 	bl	8009850 <malloc>
 80012c8:	4603      	mov	r3, r0
 80012ca:	67bb      	str	r3, [r7, #120]	; 0x78
    strncpy(knobs[3].sub_labels[0], "Filter 4", MAX_LABEL_CHARS);
 80012cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012ce:	220e      	movs	r2, #14
 80012d0:	4964      	ldr	r1, [pc, #400]	; (8001464 <main+0x2e8>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f008 fc30 	bl	8009b38 <strncpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f001 f90c 	bl	80024f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f8ca 	bl	8001474 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 80012e0:	f000 f9b2 	bl	8001648 <MX_RTC_Init>
  MX_GPIO_Init();
 80012e4:	f000 f9f6 	bl	80016d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e8:	f000 f9d4 	bl	8001694 <MX_DMA_Init>
  MX_ADC1_Init();
 80012ec:	f000 f944 	bl	8001578 <MX_ADC1_Init>
  MX_I2C1_Init();
 80012f0:	f000 f97c 	bl	80015ec <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80012f4:	f007 fdf0 	bl	8008ed8 <MX_USB_DEVICE_Init>
  //MX_SDIO_SD_Init();
  /* USER CODE BEGIN 2 */
	// Init displays
	for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80012fe:	e017      	b.n	8001330 <main+0x1b4>
		ssd1306_Init(&hi2c1, &knobs[i]);
 8001300:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001304:	1d3a      	adds	r2, r7, #4
 8001306:	015b      	lsls	r3, r3, #5
 8001308:	4413      	add	r3, r2
 800130a:	4619      	mov	r1, r3
 800130c:	4856      	ldr	r0, [pc, #344]	; (8001468 <main+0x2ec>)
 800130e:	f000 fa33 	bl	8001778 <ssd1306_Init>
		ssd1306_WriteKnob(&hi2c1, &knobs[i], 0);
 8001312:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001316:	1d3a      	adds	r2, r7, #4
 8001318:	015b      	lsls	r3, r3, #5
 800131a:	4413      	add	r3, r2
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	4851      	ldr	r0, [pc, #324]	; (8001468 <main+0x2ec>)
 8001322:	f000 fba5 	bl	8001a70 <ssd1306_WriteKnob>
	for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001326:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800132a:	3301      	adds	r3, #1
 800132c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001330:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001334:	2b03      	cmp	r3, #3
 8001336:	d9e3      	bls.n	8001300 <main+0x184>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001338:	2300      	movs	r3, #0
 800133a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800133e:	e07c      	b.n	800143a <main+0x2be>
		    adcAveraged[i] = adc_Averaged_Read(i);
 8001340:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8001344:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fdfb 	bl	8000f44 <adc_Averaged_Read>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	4b46      	ldr	r3, [pc, #280]	; (800146c <main+0x2f0>)
 8001354:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

			uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcBuf[i]);
 8001358:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800135c:	1d3a      	adds	r2, r7, #4
 800135e:	015b      	lsls	r3, r3, #5
 8001360:	441a      	add	r2, r3
 8001362:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001366:	4942      	ldr	r1, [pc, #264]	; (8001470 <main+0x2f4>)
 8001368:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f7ff fe67 	bl	8001044 <MIDI_Scale_And_Filter>
 8001376:	4603      	mov	r3, r0
 8001378:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

			if (curr_MIDI_val != knobs[i].value) {
 800137c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001380:	015b      	lsls	r3, r3, #5
 8001382:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001386:	4413      	add	r3, r2
 8001388:	3b6a      	subs	r3, #106	; 0x6a
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8001390:	429a      	cmp	r2, r3
 8001392:	d04d      	beq.n	8001430 <main+0x2b4>
				knobs[i].value = curr_MIDI_val;
 8001394:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001398:	015b      	lsls	r3, r3, #5
 800139a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800139e:	4413      	add	r3, r2
 80013a0:	3b6a      	subs	r3, #106	; 0x6a
 80013a2:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80013a6:	701a      	strb	r2, [r3, #0]
				ssd1306_WriteKnob(&hi2c1, &knobs[i], adcAveraged[i]);
 80013a8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013ac:	1d3a      	adds	r2, r7, #4
 80013ae:	015b      	lsls	r3, r3, #5
 80013b0:	18d1      	adds	r1, r2, r3
 80013b2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013b6:	4a2d      	ldr	r2, [pc, #180]	; (800146c <main+0x2f0>)
 80013b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013bc:	461a      	mov	r2, r3
 80013be:	482a      	ldr	r0, [pc, #168]	; (8001468 <main+0x2ec>)
 80013c0:	f000 fb56 	bl	8001a70 <ssd1306_WriteKnob>
				if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 80013c4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013c8:	015b      	lsls	r3, r3, #5
 80013ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013ce:	4413      	add	r3, r2
 80013d0:	3b6a      	subs	r3, #106	; 0x6a
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013d8:	015b      	lsls	r3, r3, #5
 80013da:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80013de:	440b      	add	r3, r1
 80013e0:	3b84      	subs	r3, #132	; 0x84
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d108      	bne.n	80013fa <main+0x27e>
 80013e8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013ec:	015b      	lsls	r3, r3, #5
 80013ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013f2:	4413      	add	r3, r2
 80013f4:	3b67      	subs	r3, #103	; 0x67
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
				if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 80013fa:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013fe:	015b      	lsls	r3, r3, #5
 8001400:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001404:	4413      	add	r3, r2
 8001406:	3b67      	subs	r3, #103	; 0x67
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d110      	bne.n	8001430 <main+0x2b4>
 800140e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001412:	1d3a      	adds	r2, r7, #4
 8001414:	015b      	lsls	r3, r3, #5
 8001416:	441a      	add	r2, r3
 8001418:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800141c:	015b      	lsls	r3, r3, #5
 800141e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001422:	440b      	add	r3, r1
 8001424:	3b6a      	subs	r3, #106	; 0x6a
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f7ff fdec 	bl	8001008 <MIDI_Send>
		for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001430:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001434:	3301      	adds	r3, #1
 8001436:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800143a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800143e:	2b03      	cmp	r3, #3
 8001440:	f67f af7e 	bls.w	8001340 <main+0x1c4>
 8001444:	e778      	b.n	8001338 <main+0x1bc>
 8001446:	bf00      	nop
 8001448:	0800a960 	.word	0x0800a960
 800144c:	0800a970 	.word	0x0800a970
 8001450:	0800a980 	.word	0x0800a980
 8001454:	0800a990 	.word	0x0800a990
 8001458:	0800a930 	.word	0x0800a930
 800145c:	0800a93c 	.word	0x0800a93c
 8001460:	0800a948 	.word	0x0800a948
 8001464:	0800a954 	.word	0x0800a954
 8001468:	200021e0 	.word	0x200021e0
 800146c:	200001ec 	.word	0x200001ec
 8001470:	200001ac 	.word	0x200001ac

08001474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09a      	sub	sp, #104	; 0x68
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800147e:	2230      	movs	r2, #48	; 0x30
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f008 f9ec 	bl	8009860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <SystemClock_Config+0xfc>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <SystemClock_Config+0xfc>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <SystemClock_Config+0xfc>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <SystemClock_Config+0x100>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a29      	ldr	r2, [pc, #164]	; (8001574 <SystemClock_Config+0x100>)
 80014d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <SystemClock_Config+0x100>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80014e2:	2309      	movs	r3, #9
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014ec:	2301      	movs	r3, #1
 80014ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f0:	2302      	movs	r3, #2
 80014f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014fa:	2319      	movs	r3, #25
 80014fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014fe:	23c0      	movs	r3, #192	; 0xc0
 8001500:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001502:	2302      	movs	r3, #2
 8001504:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001506:	2304      	movs	r3, #4
 8001508:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800150e:	4618      	mov	r0, r3
 8001510:	f004 f956 	bl	80057c0 <HAL_RCC_OscConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800151a:	f000 f911 	bl	8001740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151e:	230f      	movs	r3, #15
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001522:	2302      	movs	r3, #2
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	2103      	movs	r1, #3
 800153a:	4618      	mov	r0, r3
 800153c:	f004 fbb8 	bl	8005cb0 <HAL_RCC_ClockConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001546:	f000 f8fb 	bl	8001740 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800154a:	2302      	movs	r3, #2
 800154c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800154e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001552:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4618      	mov	r0, r3
 800155a:	f004 fd65 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001564:	f000 f8ec 	bl	8001740 <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3768      	adds	r7, #104	; 0x68
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_ADC1_Init+0x68>)
 800157e:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <MX_ADC1_Init+0x6c>)
 8001580:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_ADC1_Init+0x68>)
 8001584:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_ADC1_Init+0x68>)
 800158c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001590:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_ADC1_Init+0x68>)
 8001594:	2201      	movs	r2, #1
 8001596:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_ADC1_Init+0x68>)
 800159a:	2201      	movs	r2, #1
 800159c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_ADC1_Init+0x68>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_ADC1_Init+0x68>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_ADC1_Init+0x68>)
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <MX_ADC1_Init+0x70>)
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_ADC1_Init+0x68>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_ADC1_Init+0x68>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_ADC1_Init+0x68>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_ADC1_Init+0x68>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_ADC1_Init+0x68>)
 80015ce:	f001 f827 	bl	8002620 <HAL_ADC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC1_Init+0x64>
  {
    Error_Handler();
 80015d8:	f000 f8b2 	bl	8001740 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20002234 	.word	0x20002234
 80015e4:	40012000 	.word	0x40012000
 80015e8:	0f000001 	.word	0x0f000001

080015ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_I2C1_Init+0x50>)
 80015f2:	4a13      	ldr	r2, [pc, #76]	; (8001640 <MX_I2C1_Init+0x54>)
 80015f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_I2C1_Init+0x50>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_I2C1_Init+0x58>)
 80015fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_I2C1_Init+0x50>)
 800160a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_I2C1_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_I2C1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_I2C1_Init+0x50>)
 800162a:	f002 f96b 	bl	8003904 <HAL_I2C_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001634:	f000 f884 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200021e0 	.word	0x200021e0
 8001640:	40005400 	.word	0x40005400
 8001644:	00061a80 	.word	0x00061a80

08001648 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_RTC_Init+0x44>)
 800164e:	4a10      	ldr	r2, [pc, #64]	; (8001690 <MX_RTC_Init+0x48>)
 8001650:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_RTC_Init+0x44>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_RTC_Init+0x44>)
 800165a:	227f      	movs	r2, #127	; 0x7f
 800165c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_RTC_Init+0x44>)
 8001660:	22ff      	movs	r2, #255	; 0xff
 8001662:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_RTC_Init+0x44>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <MX_RTC_Init+0x44>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_RTC_Init+0x44>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_RTC_Init+0x44>)
 8001678:	f004 fdc6 	bl	8006208 <HAL_RTC_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001682:	f000 f85d 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200022dc 	.word	0x200022dc
 8001690:	40002800 	.word	0x40002800

08001694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_DMA_Init+0x3c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <MX_DMA_Init+0x3c>)
 80016a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_DMA_Init+0x3c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2038      	movs	r0, #56	; 0x38
 80016bc:	f001 fc7d 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016c0:	2038      	movs	r0, #56	; 0x38
 80016c2:	f001 fc96 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_GPIO_Init+0x68>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <MX_GPIO_Init+0x68>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <MX_GPIO_Init+0x68>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <MX_GPIO_Init+0x68>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a0f      	ldr	r2, [pc, #60]	; (800173c <MX_GPIO_Init+0x68>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <MX_GPIO_Init+0x68>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_GPIO_Init+0x68>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <MX_GPIO_Init+0x68>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_GPIO_Init+0x68>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]

}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001748:	e7fe      	b.n	8001748 <Error_Handler+0x8>

0800174a <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af04      	add	r7, sp, #16
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001756:	230a      	movs	r3, #10
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	2301      	movs	r3, #1
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	1cfb      	adds	r3, r7, #3
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	2200      	movs	r2, #0
 8001766:	2178      	movs	r1, #120	; 0x78
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f002 fb0d 	bl	8003d88 <HAL_I2C_Mem_Write>
 800176e:	4603      	mov	r3, r0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001782:	2064      	movs	r0, #100	; 0x64
 8001784:	f000 ff28 	bl	80025d8 <HAL_Delay>
    int status = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(hi2c, k);
 800178c:	6839      	ldr	r1, [r7, #0]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fba0 	bl	8001ed4 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001794:	21ae      	movs	r1, #174	; 0xae
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffd7 	bl	800174a <ssd1306_WriteCommand>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80017a6:	2120      	movs	r1, #32
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffce 	bl	800174a <ssd1306_WriteCommand>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10); // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80017b8:	2110      	movs	r1, #16
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffc5 	bl	800174a <ssd1306_WriteCommand>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80017ca:	21b0      	movs	r1, #176	; 0xb0
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffbc 	bl	800174a <ssd1306_WriteCommand>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4413      	add	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80017dc:	21c8      	movs	r1, #200	; 0xc8
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffb3 	bl	800174a <ssd1306_WriteCommand>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80017ee:	2100      	movs	r1, #0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ffaa 	bl	800174a <ssd1306_WriteCommand>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001800:	2110      	movs	r1, #16
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa1 	bl	800174a <ssd1306_WriteCommand>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001812:	2140      	movs	r1, #64	; 0x40
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff98 	bl	800174a <ssd1306_WriteCommand>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001824:	2181      	movs	r1, #129	; 0x81
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff8f 	bl	800174a <ssd1306_WriteCommand>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff86 	bl	800174a <ssd1306_WriteCommand>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001848:	21a1      	movs	r1, #161	; 0xa1
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ff7d 	bl	800174a <ssd1306_WriteCommand>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 800185a:	21a6      	movs	r1, #166	; 0xa6
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff74 	bl	800174a <ssd1306_WriteCommand>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800186c:	21a8      	movs	r1, #168	; 0xa8
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff6b 	bl	800174a <ssd1306_WriteCommand>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 800187e:	213f      	movs	r1, #63	; 0x3f
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff62 	bl	800174a <ssd1306_WriteCommand>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001890:	21a4      	movs	r1, #164	; 0xa4
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff59 	bl	800174a <ssd1306_WriteCommand>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80018a2:	21d3      	movs	r1, #211	; 0xd3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff50 	bl	800174a <ssd1306_WriteCommand>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80018b4:	2100      	movs	r1, #0
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff47 	bl	800174a <ssd1306_WriteCommand>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80018c6:	21d5      	movs	r1, #213	; 0xd5
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff3e 	bl	800174a <ssd1306_WriteCommand>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4413      	add	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80018d8:	21f0      	movs	r1, #240	; 0xf0
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff35 	bl	800174a <ssd1306_WriteCommand>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80018ea:	21d9      	movs	r1, #217	; 0xd9
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff2c 	bl	800174a <ssd1306_WriteCommand>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4413      	add	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80018fc:	2122      	movs	r1, #34	; 0x22
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff23 	bl	800174a <ssd1306_WriteCommand>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 800190e:	21da      	movs	r1, #218	; 0xda
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff1a 	bl	800174a <ssd1306_WriteCommand>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4413      	add	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001920:	2112      	movs	r1, #18
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff11 	bl	800174a <ssd1306_WriteCommand>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001932:	21db      	movs	r1, #219	; 0xdb
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff08 	bl	800174a <ssd1306_WriteCommand>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001944:	2120      	movs	r1, #32
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff feff 	bl	800174a <ssd1306_WriteCommand>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001956:	218d      	movs	r1, #141	; 0x8d
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fef6 	bl	800174a <ssd1306_WriteCommand>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001968:	2114      	movs	r1, #20
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff feed 	bl	800174a <ssd1306_WriteCommand>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 800197a:	21af      	movs	r1, #175	; 0xaf
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fee4 	bl	800174a <ssd1306_WriteCommand>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <ssd1306_Init+0x21e>
        return 1;
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <ssd1306_Init+0x23e>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f814 	bl	80019c4 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f835 	bl	8001a0c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <ssd1306_Init+0x248>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <ssd1306_Init+0x248>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <ssd1306_Init+0x248>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	715a      	strb	r2, [r3, #5]

    return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200005f4 	.word	0x200005f4

080019c4 <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e00d      	b.n	80019f0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <ssd1306_Fill+0x1a>
 80019da:	2100      	movs	r1, #0
 80019dc:	e000      	b.n	80019e0 <ssd1306_Fill+0x1c>
 80019de:	21ff      	movs	r1, #255	; 0xff
 80019e0:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <ssd1306_Fill+0x44>)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	460a      	mov	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3301      	adds	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d3ed      	bcc.n	80019d4 <ssd1306_Fill+0x10>
    }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	200001f4 	.word	0x200001f4

08001a0c <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af04      	add	r7, sp, #16
 8001a12:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e020      	b.n	8001a5c <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3b50      	subs	r3, #80	; 0x50
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fe91 	bl	800174a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fe8d 	bl	800174a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001a30:	2110      	movs	r1, #16
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fe89 	bl	800174a <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	01db      	lsls	r3, r3, #7
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <ssd1306_UpdateScreen+0x60>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	2264      	movs	r2, #100	; 0x64
 8001a42:	9202      	str	r2, [sp, #8]
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	9201      	str	r2, [sp, #4]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2240      	movs	r2, #64	; 0x40
 8001a4e:	2178      	movs	r1, #120	; 0x78
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f002 f999 	bl	8003d88 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b07      	cmp	r3, #7
 8001a60:	d9db      	bls.n	8001a1a <ssd1306_UpdateScreen+0xe>
    }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200001f4 	.word	0x200001f4

08001a70 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(I2C_HandleTypeDef *hi2c, Knob *k, uint16_t adc) {
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b08d      	sub	sp, #52	; 0x34
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	80fb      	strh	r3, [r7, #6]
    ssd1306_Select(hi2c, k);
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fa27 	bl	8001ed4 <ssd1306_Select>
    ssd1306_Fill(Black);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff ff9c 	bl	80019c4 <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8001a8c:	4b7c      	ldr	r3, [pc, #496]	; (8001c80 <ssd1306_WriteKnob+0x210>)
 8001a8e:	f107 0414 	add.w	r4, r7, #20
 8001a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel + 1);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	7e1b      	ldrb	r3, [r3, #24]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001aa2:	4a78      	ldr	r2, [pc, #480]	; (8001c84 <ssd1306_WriteKnob+0x214>)
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	f008 f813 	bl	8009ad0 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	7e5b      	ldrb	r3, [r3, #25]
 8001aae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001ab2:	4a75      	ldr	r2, [pc, #468]	; (8001c88 <ssd1306_WriteKnob+0x218>)
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	f008 f80b 	bl	8009ad0 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fb8e 	bl	80001e0 <strlen>
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	68b8      	ldr	r0, [r7, #8]
 8001ac8:	f000 fa3c 	bl	8001f44 <update_init_indicator>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f107 0014 	add.w	r0, r7, #20
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <ssd1306_WriteKnob+0x21c>)
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f007 fffb 	bl	8009ad0 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) KnobMap(k, k->value, k->max_range));
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	7e99      	ldrb	r1, [r3, #26]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	7f1b      	ldrb	r3, [r3, #28]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68b8      	ldr	r0, [r7, #8]
 8001ae6:	f7ff fa15 	bl	8000f14 <KnobMap>
 8001aea:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8001aec:	f107 0010 	add.w	r0, r7, #16
 8001af0:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <ssd1306_WriteKnob+0x218>)
 8001af2:	2104      	movs	r1, #4
 8001af4:	f007 ffec 	bl	8009ad0 <sniprintf>

    ssd1306_SetCursor(0, 0);
 8001af8:	2100      	movs	r1, #0
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f9d2 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8001b00:	4a63      	ldr	r2, [pc, #396]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b02:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001b06:	2301      	movs	r3, #1
 8001b08:	ca06      	ldmia	r2, {r1, r2}
 8001b0a:	f000 f9a5 	bl	8001e58 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 8);
 8001b0e:	2108      	movs	r1, #8
 8001b10:	2000      	movs	r0, #0
 8001b12:	f000 f9c7 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8001b16:	4a5e      	ldr	r2, [pc, #376]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b18:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	ca06      	ldmia	r2, {r1, r2}
 8001b20:	f000 f99a 	bl	8001e58 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, 4);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fb59 	bl	80001e0 <strlen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a57      	ldr	r2, [pc, #348]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2104      	movs	r1, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f9ae 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8001b48:	4a51      	ldr	r2, [pc, #324]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b4a:	f107 0014 	add.w	r0, r7, #20
 8001b4e:	2301      	movs	r3, #1
 8001b50:	ca06      	ldmia	r2, {r1, r2}
 8001b52:	f000 f981 	bl	8001e58 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, 4);
 8001b56:	4b4e      	ldr	r3, [pc, #312]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	f1c3 0320 	rsb	r3, r3, #32
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2104      	movs	r1, #4
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f99a 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8001b70:	4a47      	ldr	r2, [pc, #284]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b72:	f107 0010 	add.w	r0, r7, #16
 8001b76:	2301      	movs	r3, #1
 8001b78:	ca06      	ldmia	r2, {r1, r2}
 8001b7a:	f000 f96d 	bl	8001e58 <ssd1306_WriteString>

    uint8_t len_label = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t x = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Draw main label
    len_label = strlen(k->label);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3303      	adds	r3, #3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fb26 	bl	80001e0 <strlen>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001b9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001b9e:	4a3d      	ldr	r2, [pc, #244]	; (8001c94 <ssd1306_WriteKnob+0x224>)
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001baa:	0fda      	lsrs	r2, r3, #31
 8001bac:	4413      	add	r3, r2
 8001bae:	105b      	asrs	r3, r3, #1
 8001bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (len_label % 2 != 0) x += 5;
 8001bb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <ssd1306_WriteKnob+0x15c>
 8001bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bc6:	3305      	adds	r3, #5
 8001bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ssd1306_SetCursor(x, 16);
 8001bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f966 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1cd8      	adds	r0, r3, #3
 8001bdc:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <ssd1306_WriteKnob+0x224>)
 8001bde:	2301      	movs	r3, #1
 8001be0:	ca06      	ldmia	r2, {r1, r2}
 8001be2:	f000 f939 	bl	8001e58 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < 128) ? k->value : 0;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	7edb      	ldrb	r3, [r3, #27]
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db02      	blt.n	8001bf6 <ssd1306_WriteKnob+0x186>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	7e9b      	ldrb	r3, [r3, #26]
 8001bf4:	e000      	b.n	8001bf8 <ssd1306_WriteKnob+0x188>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    len_label = strlen(k->sub_labels[sl_index]);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6959      	ldr	r1, [r3, #20]
 8001c00:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c04:	4613      	mov	r3, r2
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fae7 	bl	80001e0 <strlen>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001c18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <ssd1306_WriteKnob+0x224>)
 8001c1e:	7812      	ldrb	r2, [r2, #0]
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c28:	0fda      	lsrs	r2, r3, #31
 8001c2a:	4413      	add	r3, r2
 8001c2c:	105b      	asrs	r3, r3, #1
 8001c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (len_label % 2 != 0) x += 5;
 8001c32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <ssd1306_WriteKnob+0x1da>
 8001c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c44:	3305      	adds	r3, #5
 8001c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ssd1306_SetCursor(x, 40);
 8001c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c4e:	2128      	movs	r1, #40	; 0x28
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f927 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	6959      	ldr	r1, [r3, #20]
 8001c5a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c5e:	4613      	mov	r3, r2
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	18c8      	adds	r0, r1, r3
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <ssd1306_WriteKnob+0x224>)
 8001c68:	2301      	movs	r3, #1
 8001c6a:	ca06      	ldmia	r2, {r1, r2}
 8001c6c:	f000 f8f4 	bl	8001e58 <ssd1306_WriteString>

    ssd1306_UpdateScreen(hi2c);
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7ff fecb 	bl	8001a0c <ssd1306_UpdateScreen>
}
 8001c76:	bf00      	nop
 8001c78:	3734      	adds	r7, #52	; 0x34
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	0800a9b4 	.word	0x0800a9b4
 8001c84:	0800a9a0 	.word	0x0800a9a0
 8001c88:	0800a9a8 	.word	0x0800a9a8
 8001c8c:	0800a9b0 	.word	0x0800a9b0
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000008 	.word	0x20000008

08001c98 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	71bb      	strb	r3, [r7, #6]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db48      	blt.n	8001d44 <ssd1306_DrawPixel+0xac>
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	2b3f      	cmp	r3, #63	; 0x3f
 8001cb6:	d845      	bhi.n	8001d44 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <ssd1306_DrawPixel+0xb8>)
 8001cba:	791b      	ldrb	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8001cc0:	797b      	ldrb	r3, [r7, #5]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf0c      	ite	eq
 8001cc6:	2301      	moveq	r3, #1
 8001cc8:	2300      	movne	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 8001cce:	797b      	ldrb	r3, [r7, #5]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d11a      	bne.n	8001d0a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cd4:	79fa      	ldrb	r2, [r7, #7]
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	b2d8      	uxtb	r0, r3
 8001cdc:	4603      	mov	r3, r0
 8001cde:	01db      	lsls	r3, r3, #7
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <ssd1306_DrawPixel+0xbc>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	b25a      	sxtb	r2, r3
 8001ce8:	79bb      	ldrb	r3, [r7, #6]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	2101      	movs	r1, #1
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b259      	sxtb	r1, r3
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	4413      	add	r3, r2
 8001d02:	b2c9      	uxtb	r1, r1
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <ssd1306_DrawPixel+0xbc>)
 8001d06:	54d1      	strb	r1, [r2, r3]
 8001d08:	e01d      	b.n	8001d46 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d0a:	79fa      	ldrb	r2, [r7, #7]
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	b2d8      	uxtb	r0, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	01db      	lsls	r3, r3, #7
 8001d16:	4413      	add	r3, r2
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <ssd1306_DrawPixel+0xbc>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	b25a      	sxtb	r2, r3
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	4013      	ands	r3, r2
 8001d32:	b259      	sxtb	r1, r3
 8001d34:	79fa      	ldrb	r2, [r7, #7]
 8001d36:	4603      	mov	r3, r0
 8001d38:	01db      	lsls	r3, r3, #7
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b2c9      	uxtb	r1, r1
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <ssd1306_DrawPixel+0xbc>)
 8001d40:	54d1      	strb	r1, [r2, r3]
 8001d42:	e000      	b.n	8001d46 <ssd1306_DrawPixel+0xae>
        return;
 8001d44:	bf00      	nop
    }
}
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	200005f4 	.word	0x200005f4
 8001d54:	200001f4 	.word	0x200001f4

08001d58 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4604      	mov	r4, r0
 8001d60:	1d38      	adds	r0, r7, #4
 8001d62:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d66:	461a      	mov	r2, r3
 8001d68:	4623      	mov	r3, r4
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d70:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	793b      	ldrb	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d7c:	dc06      	bgt.n	8001d8c <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001d80:	885b      	ldrh	r3, [r3, #2]
 8001d82:	461a      	mov	r2, r3
 8001d84:	797b      	ldrb	r3, [r7, #5]
 8001d86:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d88:	2b3f      	cmp	r3, #63	; 0x3f
 8001d8a:	dd01      	ble.n	8001d90 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e05d      	b.n	8001e4c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	e04c      	b.n	8001e30 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	3b20      	subs	r3, #32
 8001d9c:	7979      	ldrb	r1, [r7, #5]
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	440b      	add	r3, r1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	e034      	b.n	8001e20 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b2d8      	uxtb	r0, r3
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001dd6:	885b      	ldrh	r3, [r3, #2]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	7bba      	ldrb	r2, [r7, #14]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7ff ff57 	bl	8001c98 <ssd1306_DrawPixel>
 8001dea:	e016      	b.n	8001e1a <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	b2d8      	uxtb	r0, r3
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001dfc:	885b      	ldrh	r3, [r3, #2]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	b2d9      	uxtb	r1, r3
 8001e08:	7bbb      	ldrb	r3, [r7, #14]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	f7ff ff3f 	bl	8001c98 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	793b      	ldrb	r3, [r7, #4]
 8001e22:	461a      	mov	r2, r3
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d3c5      	bcc.n	8001db6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	797b      	ldrb	r3, [r7, #5]
 8001e32:	461a      	mov	r2, r3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d3ad      	bcc.n	8001d96 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	793b      	ldrb	r3, [r7, #4]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001e48:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3724      	adds	r7, #36	; 0x24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd90      	pop	{r4, r7, pc}
 8001e54:	200005f4 	.word	0x200005f4

08001e58 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	1d38      	adds	r0, r7, #4
 8001e62:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e66:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001e68:	e012      	b.n	8001e90 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	7818      	ldrb	r0, [r3, #0]
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	1d3a      	adds	r2, r7, #4
 8001e72:	ca06      	ldmia	r2, {r1, r2}
 8001e74:	f7ff ff70 	bl	8001d58 <ssd1306_WriteChar>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d002      	beq.n	8001e8a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	e008      	b.n	8001e9c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e8      	bne.n	8001e6a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460a      	mov	r2, r1
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <ssd1306_SetCursor+0x2c>)
 8001eba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ebc:	79bb      	ldrb	r3, [r7, #6]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <ssd1306_SetCursor+0x2c>)
 8001ec2:	805a      	strh	r2, [r3, #2]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	200005f4 	.word	0x200005f4

08001ed4 <ssd1306_Select>:

// Select a display
void ssd1306_Select(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
    i2c_Select(hi2c, I2C_MUX_MASTER_ADDR, k->row);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	21e2      	movs	r1, #226	; 0xe2
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f80b 	bl	8001f02 <i2c_Select>
    i2c_Select(hi2c, I2C_MUX_SLAVE_ADDR, k->col);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	789b      	ldrb	r3, [r3, #2]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	21e0      	movs	r1, #224	; 0xe0
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f804 	bl	8001f02 <i2c_Select>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(I2C_HandleTypeDef *hi2c, uint8_t mux_addr, uint8_t i) {
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af02      	add	r7, sp, #8
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	70bb      	strb	r3, [r7, #2]
    if (i > 7) return;
 8001f12:	78bb      	ldrb	r3, [r7, #2]
 8001f14:	2b07      	cmp	r3, #7
 8001f16:	d810      	bhi.n	8001f3a <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 8001f18:	78bb      	ldrb	r3, [r7, #2]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(hi2c, mux_addr, temp, 1, 100);
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	b299      	uxth	r1, r3
 8001f28:	f107 020c 	add.w	r2, r7, #12
 8001f2c:	2364      	movs	r3, #100	; 0x64
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2301      	movs	r3, #1
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f001 fe2a 	bl	8003b8c <HAL_I2C_Master_Transmit>
 8001f38:	e000      	b.n	8001f3c <i2c_Select+0x3a>
    if (i > 7) return;
 8001f3a:	bf00      	nop
}
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
    int8_t init_diff = KnobMap(k, k->init_value, 127) - KnobMap(k, k->value, 127);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	227f      	movs	r2, #127	; 0x7f
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe ffdd 	bl	8000f14 <KnobMap>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461c      	mov	r4, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7e9b      	ldrb	r3, [r3, #26]
 8001f62:	227f      	movs	r2, #127	; 0x7f
 8001f64:	4619      	mov	r1, r3
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe ffd4 	bl	8000f14 <KnobMap>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	1ae3      	subs	r3, r4, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = (abs(init_diff) / 127.0f) * 100;
 8001f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bfb8      	it	lt
 8001f7c:	425b      	neglt	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f88:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002074 <update_init_indicator+0x130>
 8001f8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f90:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002078 <update_init_indicator+0x134>
 8001f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9c:	edc7 7a00 	vstr	s15, [r7]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 8001fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <update_init_indicator+0x6c>
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <update_init_indicator+0x138>)
 8001fae:	e05c      	b.n	800206a <update_init_indicator+0x126>

    if (init_pct < 15) {
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	2b0e      	cmp	r3, #14
 8001fb4:	d807      	bhi.n	8001fc6 <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	dd01      	ble.n	8001fc2 <update_init_indicator+0x7e>
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <update_init_indicator+0x13c>)
 8001fc0:	e053      	b.n	800206a <update_init_indicator+0x126>
        else return "        <      ";
 8001fc2:	4b30      	ldr	r3, [pc, #192]	; (8002084 <update_init_indicator+0x140>)
 8001fc4:	e051      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	2b0e      	cmp	r3, #14
 8001fca:	d90a      	bls.n	8001fe2 <update_init_indicator+0x9e>
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	2b1d      	cmp	r3, #29
 8001fd0:	d807      	bhi.n	8001fe2 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	dd01      	ble.n	8001fde <update_init_indicator+0x9a>
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <update_init_indicator+0x144>)
 8001fdc:	e045      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<     ";
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <update_init_indicator+0x148>)
 8001fe0:	e043      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 8001fe2:	7bbb      	ldrb	r3, [r7, #14]
 8001fe4:	2b1d      	cmp	r3, #29
 8001fe6:	d90a      	bls.n	8001ffe <update_init_indicator+0xba>
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	2b2c      	cmp	r3, #44	; 0x2c
 8001fec:	d807      	bhi.n	8001ffe <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	dd01      	ble.n	8001ffa <update_init_indicator+0xb6>
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <update_init_indicator+0x14c>)
 8001ff8:	e037      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<<    ";
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <update_init_indicator+0x150>)
 8001ffc:	e035      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	2b2c      	cmp	r3, #44	; 0x2c
 8002002:	d90a      	bls.n	800201a <update_init_indicator+0xd6>
 8002004:	7bbb      	ldrb	r3, [r7, #14]
 8002006:	2b3c      	cmp	r3, #60	; 0x3c
 8002008:	d807      	bhi.n	800201a <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	dd01      	ble.n	8002016 <update_init_indicator+0xd2>
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <update_init_indicator+0x154>)
 8002014:	e029      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<<<   ";
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <update_init_indicator+0x158>)
 8002018:	e027      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 800201a:	7bbb      	ldrb	r3, [r7, #14]
 800201c:	2b3c      	cmp	r3, #60	; 0x3c
 800201e:	d90a      	bls.n	8002036 <update_init_indicator+0xf2>
 8002020:	7bbb      	ldrb	r3, [r7, #14]
 8002022:	2b4c      	cmp	r3, #76	; 0x4c
 8002024:	d807      	bhi.n	8002036 <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	dd01      	ble.n	8002032 <update_init_indicator+0xee>
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <update_init_indicator+0x15c>)
 8002030:	e01b      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<<<<  ";
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <update_init_indicator+0x160>)
 8002034:	e019      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 8002036:	7bbb      	ldrb	r3, [r7, #14]
 8002038:	2b4c      	cmp	r3, #76	; 0x4c
 800203a:	d90a      	bls.n	8002052 <update_init_indicator+0x10e>
 800203c:	7bbb      	ldrb	r3, [r7, #14]
 800203e:	2b5c      	cmp	r3, #92	; 0x5c
 8002040:	d807      	bhi.n	8002052 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 8002042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002046:	2b00      	cmp	r3, #0
 8002048:	dd01      	ble.n	800204e <update_init_indicator+0x10a>
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <update_init_indicator+0x164>)
 800204c:	e00d      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<<<<< ";
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <update_init_indicator+0x168>)
 8002050:	e00b      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	2b5c      	cmp	r3, #92	; 0x5c
 8002056:	d907      	bls.n	8002068 <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 8002058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205c:	2b00      	cmp	r3, #0
 800205e:	dd01      	ble.n	8002064 <update_init_indicator+0x120>
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <update_init_indicator+0x16c>)
 8002062:	e002      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<<<<<<";
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <update_init_indicator+0x170>)
 8002066:	e000      	b.n	800206a <update_init_indicator+0x126>
    } else {
        return " ";
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <update_init_indicator+0x174>)
    }
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	bf00      	nop
 8002074:	42fe0000 	.word	0x42fe0000
 8002078:	42c80000 	.word	0x42c80000
 800207c:	0800a9b4 	.word	0x0800a9b4
 8002080:	0800a9c4 	.word	0x0800a9c4
 8002084:	0800a9d4 	.word	0x0800a9d4
 8002088:	0800a9e4 	.word	0x0800a9e4
 800208c:	0800a9f4 	.word	0x0800a9f4
 8002090:	0800aa04 	.word	0x0800aa04
 8002094:	0800aa14 	.word	0x0800aa14
 8002098:	0800aa24 	.word	0x0800aa24
 800209c:	0800aa34 	.word	0x0800aa34
 80020a0:	0800aa44 	.word	0x0800aa44
 80020a4:	0800aa54 	.word	0x0800aa54
 80020a8:	0800aa64 	.word	0x0800aa64
 80020ac:	0800aa74 	.word	0x0800aa74
 80020b0:	0800aa84 	.word	0x0800aa84
 80020b4:	0800aa94 	.word	0x0800aa94
 80020b8:	0800aaa4 	.word	0x0800aaa4

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <HAL_ADC_MspInit+0xdc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d157      	bne.n	80021de <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <HAL_ADC_MspInit+0xe0>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a2d      	ldr	r2, [pc, #180]	; (80021ec <HAL_ADC_MspInit+0xe0>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HAL_ADC_MspInit+0xe0>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_ADC_MspInit+0xe0>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a26      	ldr	r2, [pc, #152]	; (80021ec <HAL_ADC_MspInit+0xe0>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_ADC_MspInit+0xe0>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002166:	230f      	movs	r3, #15
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216a:	2303      	movs	r3, #3
 800216c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	481d      	ldr	r0, [pc, #116]	; (80021f0 <HAL_ADC_MspInit+0xe4>)
 800217a:	f001 fa3f 	bl	80035fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 8002180:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_ADC_MspInit+0xec>)
 8002182:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 8002198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 80021a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 80021a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 80021b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021bc:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 80021c4:	f000 ff30 	bl	8003028 <HAL_DMA_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80021ce:	f7ff fab7 	bl	8001740 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_ADC_MspInit+0xe8>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	; 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40012000 	.word	0x40012000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000
 80021f4:	2000227c 	.word	0x2000227c
 80021f8:	40026410 	.word	0x40026410

080021fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_I2C_MspInit+0x84>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d12b      	bne.n	8002276 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800223a:	23c0      	movs	r3, #192	; 0xc0
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223e:	2312      	movs	r3, #18
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002242:	2301      	movs	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800224a:	2304      	movs	r3, #4
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	480c      	ldr	r0, [pc, #48]	; (8002288 <HAL_I2C_MspInit+0x8c>)
 8002256:	f001 f9d1 	bl	80035fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_I2C_MspInit+0x88>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	; 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40005400 	.word	0x40005400
 8002284:	40023800 	.word	0x40023800
 8002288:	40020400 	.word	0x40020400

0800228c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <HAL_RTC_MspInit+0x24>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d102      	bne.n	80022a4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RTC_MspInit+0x28>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40002800 	.word	0x40002800
 80022b4:	42470e3c 	.word	0x42470e3c

080022b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <NMI_Handler+0x4>

080022be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <MemManage_Handler+0x4>

080022ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f000 f948 	bl	8002598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <DMA2_Stream0_IRQHandler+0x10>)
 8002312:	f000 ff37 	bl	8003184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000227c 	.word	0x2000227c

08002320 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <OTG_FS_IRQHandler+0x10>)
 8002326:	f002 fa18 	bl	800475a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20002854 	.word	0x20002854

08002334 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e00a      	b.n	800235c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002346:	f3af 8000 	nop.w
 800234a:	4601      	mov	r1, r0
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	b2ca      	uxtb	r2, r1
 8002354:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbf0      	blt.n	8002346 <_read+0x12>
	}

return len;
 8002364:	687b      	ldr	r3, [r7, #4]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e009      	b.n	8002394 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	429a      	cmp	r2, r3
 800239a:	dbf1      	blt.n	8002380 <_write+0x12>
	}
	return len;
 800239c:	687b      	ldr	r3, [r7, #4]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_close>:

int _close(int file)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
	return -1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ce:	605a      	str	r2, [r3, #4]
	return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_isatty>:

int _isatty(int file)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
	return 1;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <_sbrk+0x5c>)
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <_sbrk+0x60>)
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <_sbrk+0x64>)
 800242e:	4a12      	ldr	r2, [pc, #72]	; (8002478 <_sbrk+0x68>)
 8002430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	429a      	cmp	r2, r3
 800243e:	d207      	bcs.n	8002450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002440:	f007 f9dc 	bl	80097fc <__errno>
 8002444:	4603      	mov	r3, r0
 8002446:	220c      	movs	r2, #12
 8002448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	e009      	b.n	8002464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <_sbrk+0x64>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <_sbrk+0x64>)
 8002460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20020000 	.word	0x20020000
 8002470:	00000400 	.word	0x00000400
 8002474:	200005fc 	.word	0x200005fc
 8002478:	20002c70 	.word	0x20002c70

0800247c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <SystemInit+0x20>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <SystemInit+0x20>)
 8002488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800248c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024a4:	480d      	ldr	r0, [pc, #52]	; (80024dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024a6:	490e      	ldr	r1, [pc, #56]	; (80024e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024a8:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024bc:	4c0b      	ldr	r4, [pc, #44]	; (80024ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024ca:	f7ff ffd7 	bl	800247c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ce:	f007 f99b 	bl	8009808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d2:	f7fe fe53 	bl	800117c <main>
  bx  lr    
 80024d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80024e4:	0800be88 	.word	0x0800be88
  ldr r2, =_sbss
 80024e8:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80024ec:	20002c6c 	.word	0x20002c6c

080024f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC_IRQHandler>
	...

080024f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <HAL_Init+0x40>)
 80024fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <HAL_Init+0x40>)
 800250a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800250e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a07      	ldr	r2, [pc, #28]	; (8002534 <HAL_Init+0x40>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251c:	2003      	movs	r0, #3
 800251e:	f000 fd41 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002522:	2000      	movs	r0, #0
 8002524:	f000 f808 	bl	8002538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002528:	f7ff fdc8 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023c00 	.word	0x40023c00

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_InitTick+0x54>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_InitTick+0x58>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fd59 	bl	800300e <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00e      	b.n	8002584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d80a      	bhi.n	8002582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f000 fd21 	bl	8002fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <HAL_InitTick+0x5c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000020 	.word	0x20000020
 8002590:	20000028 	.word	0x20000028
 8002594:	20000024 	.word	0x20000024

08002598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_IncTick+0x20>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_IncTick+0x24>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_IncTick+0x24>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000028 	.word	0x20000028
 80025bc:	20002380 	.word	0x20002380

080025c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <HAL_GetTick+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20002380 	.word	0x20002380

080025d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff ffee 	bl	80025c0 <HAL_GetTick>
 80025e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d005      	beq.n	80025fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_Delay+0x44>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025fe:	bf00      	nop
 8002600:	f7ff ffde 	bl	80025c0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d8f7      	bhi.n	8002600 <HAL_Delay+0x28>
  {
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000028 	.word	0x20000028

08002620 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e033      	b.n	800269e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fd64 	bl	800210c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002666:	f023 0302 	bic.w	r3, r3, #2
 800266a:	f043 0202 	orr.w	r2, r3, #2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 faca 	bl	8002c0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f023 0303 	bic.w	r3, r3, #3
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
 800268e:	e001      	b.n	8002694 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_Start+0x1a>
 80026be:	2302      	movs	r3, #2
 80026c0:	e097      	b.n	80027f2 <HAL_ADC_Start+0x14a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d018      	beq.n	800270a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026e8:	4b45      	ldr	r3, [pc, #276]	; (8002800 <HAL_ADC_Start+0x158>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a45      	ldr	r2, [pc, #276]	; (8002804 <HAL_ADC_Start+0x15c>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9a      	lsrs	r2, r3, #18
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026fc:	e002      	b.n	8002704 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3b01      	subs	r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d15f      	bne.n	80027d8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002742:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002756:	d106      	bne.n	8002766 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	f023 0206 	bic.w	r2, r3, #6
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	645a      	str	r2, [r3, #68]	; 0x44
 8002764:	e002      	b.n	800276c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002774:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_ADC_Start+0x160>)
 8002776:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002780:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d129      	bne.n	80027f0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e020      	b.n	80027f0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a16      	ldr	r2, [pc, #88]	; (800280c <HAL_ADC_Start+0x164>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d11b      	bne.n	80027f0 <HAL_ADC_Start+0x148>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d114      	bne.n	80027f0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	e00b      	b.n	80027f0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000020 	.word	0x20000020
 8002804:	431bde83 	.word	0x431bde83
 8002808:	40012300 	.word	0x40012300
 800280c:	40012000 	.word	0x40012000

08002810 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_ADC_Stop+0x16>
 8002822:	2302      	movs	r3, #2
 8002824:	e021      	b.n	800286a <HAL_ADC_Stop+0x5a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002892:	d113      	bne.n	80028bc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800289e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a2:	d10b      	bne.n	80028bc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e063      	b.n	8002984 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80028bc:	f7ff fe80 	bl	80025c0 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028c2:	e021      	b.n	8002908 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d01d      	beq.n	8002908 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_ADC_PollForConversion+0x6c>
 80028d2:	f7ff fe75 	bl	80025c0 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d212      	bcs.n	8002908 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d00b      	beq.n	8002908 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f043 0204 	orr.w	r2, r3, #4
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e03d      	b.n	8002984 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d1d6      	bne.n	80028c4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f06f 0212 	mvn.w	r2, #18
 800291e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d123      	bne.n	8002982 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800293e:	2b00      	cmp	r3, #0
 8002940:	d11f      	bne.n	8002982 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800295a:	2b00      	cmp	r3, #0
 800295c:	d111      	bne.n	8002982 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1c>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e113      	b.n	8002bec <HAL_ADC_ConfigChannel+0x244>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b09      	cmp	r3, #9
 80029d2:	d925      	bls.n	8002a20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68d9      	ldr	r1, [r3, #12]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	3b1e      	subs	r3, #30
 80029ea:	2207      	movs	r2, #7
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43da      	mvns	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	400a      	ands	r2, r1
 80029f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68d9      	ldr	r1, [r3, #12]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4403      	add	r3, r0
 8002a12:	3b1e      	subs	r3, #30
 8002a14:	409a      	lsls	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	e022      	b.n	8002a66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6919      	ldr	r1, [r3, #16]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	2207      	movs	r2, #7
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	400a      	ands	r2, r1
 8002a42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6919      	ldr	r1, [r3, #16]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4403      	add	r3, r0
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d824      	bhi.n	8002ab8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3b05      	subs	r3, #5
 8002a80:	221f      	movs	r2, #31
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b05      	subs	r3, #5
 8002aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ab6:	e04c      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b0c      	cmp	r3, #12
 8002abe:	d824      	bhi.n	8002b0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b23      	subs	r3, #35	; 0x23
 8002ad2:	221f      	movs	r2, #31
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	400a      	ands	r2, r1
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	3b23      	subs	r3, #35	; 0x23
 8002afc:	fa00 f203 	lsl.w	r2, r0, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
 8002b08:	e023      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b41      	subs	r3, #65	; 0x41
 8002b1c:	221f      	movs	r2, #31
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	400a      	ands	r2, r1
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	3b41      	subs	r3, #65	; 0x41
 8002b46:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b52:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_ADC_ConfigChannel+0x250>)
 8002b54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <HAL_ADC_ConfigChannel+0x254>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d10f      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1d8>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b12      	cmp	r3, #18
 8002b66:	d10b      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <HAL_ADC_ConfigChannel+0x254>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12b      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x23a>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	; (8002c00 <HAL_ADC_ConfigChannel+0x258>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x1f4>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b11      	cmp	r3, #17
 8002b9a:	d122      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a11      	ldr	r2, [pc, #68]	; (8002c00 <HAL_ADC_ConfigChannel+0x258>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d111      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_ADC_ConfigChannel+0x25c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <HAL_ADC_ConfigChannel+0x260>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	0c9a      	lsrs	r2, r3, #18
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bd4:	e002      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f9      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40012300 	.word	0x40012300
 8002bfc:	40012000 	.word	0x40012000
 8002c00:	10000012 	.word	0x10000012
 8002c04:	20000020 	.word	0x20000020
 8002c08:	431bde83 	.word	0x431bde83

08002c0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c14:	4b79      	ldr	r3, [pc, #484]	; (8002dfc <ADC_Init+0x1f0>)
 8002c16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	021a      	lsls	r2, r3, #8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6899      	ldr	r1, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <ADC_Init+0x1f4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d022      	beq.n	8002cea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6899      	ldr	r1, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6899      	ldr	r1, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	e00f      	b.n	8002d0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0202 	bic.w	r2, r2, #2
 8002d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6899      	ldr	r1, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7e1b      	ldrb	r3, [r3, #24]
 8002d24:	005a      	lsls	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	3b01      	subs	r3, #1
 8002d64:	035a      	lsls	r2, r3, #13
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e007      	b.n	8002d80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	051a      	lsls	r2, r3, #20
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dc2:	025a      	lsls	r2, r3, #9
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	029a      	lsls	r2, r3, #10
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40012300 	.word	0x40012300
 8002e00:	0f000001 	.word	0x0f000001

08002e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e20:	4013      	ands	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e36:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	60d3      	str	r3, [r2, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e50:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <__NVIC_GetPriorityGrouping+0x18>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	f003 0307 	and.w	r3, r3, #7
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	db0b      	blt.n	8002e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	4907      	ldr	r1, [pc, #28]	; (8002ea0 <__NVIC_EnableIRQ+0x38>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	2001      	movs	r0, #1
 8002e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000e100 	.word	0xe000e100

08002ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	db0a      	blt.n	8002ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	490c      	ldr	r1, [pc, #48]	; (8002ef0 <__NVIC_SetPriority+0x4c>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ecc:	e00a      	b.n	8002ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4908      	ldr	r1, [pc, #32]	; (8002ef4 <__NVIC_SetPriority+0x50>)
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3b04      	subs	r3, #4
 8002edc:	0112      	lsls	r2, r2, #4
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	761a      	strb	r2, [r3, #24]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000e100 	.word	0xe000e100
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f1c3 0307 	rsb	r3, r3, #7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	bf28      	it	cs
 8002f16:	2304      	movcs	r3, #4
 8002f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d902      	bls.n	8002f28 <NVIC_EncodePriority+0x30>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3b03      	subs	r3, #3
 8002f26:	e000      	b.n	8002f2a <NVIC_EncodePriority+0x32>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f40:	f04f 31ff 	mov.w	r1, #4294967295
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43d9      	mvns	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	4313      	orrs	r3, r2
         );
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	; 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f70:	d301      	bcc.n	8002f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00f      	b.n	8002f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <SysTick_Config+0x40>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7e:	210f      	movs	r1, #15
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f7ff ff8e 	bl	8002ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <SysTick_Config+0x40>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8e:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <SysTick_Config+0x40>)
 8002f90:	2207      	movs	r2, #7
 8002f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000e010 	.word	0xe000e010

08002fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff29 	bl	8002e04 <__NVIC_SetPriorityGrouping>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fcc:	f7ff ff3e 	bl	8002e4c <__NVIC_GetPriorityGrouping>
 8002fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ff8e 	bl	8002ef8 <NVIC_EncodePriority>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff5d 	bl	8002ea4 <__NVIC_SetPriority>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff31 	bl	8002e68 <__NVIC_EnableIRQ>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffa2 	bl	8002f60 <SysTick_Config>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7ff fac4 	bl	80025c0 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e099      	b.n	8003178 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003064:	e00f      	b.n	8003086 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003066:	f7ff faab 	bl	80025c0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b05      	cmp	r3, #5
 8003072:	d908      	bls.n	8003086 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2203      	movs	r2, #3
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e078      	b.n	8003178 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e8      	bne.n	8003066 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4b38      	ldr	r3, [pc, #224]	; (8003180 <HAL_DMA_Init+0x158>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d107      	bne.n	80030f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	4313      	orrs	r3, r2
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0307 	bic.w	r3, r3, #7
 8003106:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b04      	cmp	r3, #4
 8003118:	d117      	bne.n	800314a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00e      	beq.n	800314a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9e9 	bl	8003504 <DMA_CheckFifoParam>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2240      	movs	r2, #64	; 0x40
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003146:	2301      	movs	r3, #1
 8003148:	e016      	b.n	8003178 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f9a0 	bl	8003498 <DMA_CalcBaseAndBitshift>
 8003158:	4603      	mov	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	223f      	movs	r2, #63	; 0x3f
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	f010803f 	.word	0xf010803f

08003184 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003190:	4b92      	ldr	r3, [pc, #584]	; (80033dc <HAL_DMA_IRQHandler+0x258>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a92      	ldr	r2, [pc, #584]	; (80033e0 <HAL_DMA_IRQHandler+0x25c>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0a9b      	lsrs	r3, r3, #10
 800319c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	2208      	movs	r2, #8
 80031b0:	409a      	lsls	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01a      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d013      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0204 	bic.w	r2, r2, #4
 80031d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	2208      	movs	r2, #8
 80031de:	409a      	lsls	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	2201      	movs	r2, #1
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d012      	beq.n	8003226 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	2201      	movs	r2, #1
 8003214:	409a      	lsls	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321e:	f043 0202 	orr.w	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	2204      	movs	r2, #4
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d012      	beq.n	800325c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00b      	beq.n	800325c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	2204      	movs	r2, #4
 800324a:	409a      	lsls	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	2210      	movs	r2, #16
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d043      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d03c      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	2210      	movs	r2, #16
 8003280:	409a      	lsls	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d018      	beq.n	80032c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d108      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d024      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
 80032b2:	e01f      	b.n	80032f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01b      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
 80032c4:	e016      	b.n	80032f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d107      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0208 	bic.w	r2, r2, #8
 80032e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	2220      	movs	r2, #32
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 808e 	beq.w	8003422 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8086 	beq.w	8003422 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331a:	2220      	movs	r2, #32
 800331c:	409a      	lsls	r2, r3
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b05      	cmp	r3, #5
 800332c:	d136      	bne.n	800339c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0216 	bic.w	r2, r2, #22
 800333c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800334c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <HAL_DMA_IRQHandler+0x1da>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0208 	bic.w	r2, r2, #8
 800336c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	223f      	movs	r2, #63	; 0x3f
 8003374:	409a      	lsls	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338e:	2b00      	cmp	r3, #0
 8003390:	d07d      	beq.n	800348e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
        }
        return;
 800339a:	e078      	b.n	800348e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01c      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d108      	bne.n	80033ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d030      	beq.n	8003422 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
 80033c8:	e02b      	b.n	8003422 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d027      	beq.n	8003422 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	4798      	blx	r3
 80033da:	e022      	b.n	8003422 <HAL_DMA_IRQHandler+0x29e>
 80033dc:	20000020 	.word	0x20000020
 80033e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0210 	bic.w	r2, r2, #16
 8003400:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	2b00      	cmp	r3, #0
 8003428:	d032      	beq.n	8003490 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d022      	beq.n	800347c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2205      	movs	r2, #5
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	3301      	adds	r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	429a      	cmp	r2, r3
 8003458:	d307      	bcc.n	800346a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f2      	bne.n	800344e <HAL_DMA_IRQHandler+0x2ca>
 8003468:	e000      	b.n	800346c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800346a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
 800348c:	e000      	b.n	8003490 <HAL_DMA_IRQHandler+0x30c>
        return;
 800348e:	bf00      	nop
    }
  }
}
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop

08003498 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	3b10      	subs	r3, #16
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <DMA_CalcBaseAndBitshift+0x64>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <DMA_CalcBaseAndBitshift+0x68>)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d909      	bls.n	80034da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	1d1a      	adds	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	659a      	str	r2, [r3, #88]	; 0x58
 80034d8:	e007      	b.n	80034ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	aaaaaaab 	.word	0xaaaaaaab
 8003500:	0800bdd8 	.word	0x0800bdd8

08003504 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11f      	bne.n	800355e <DMA_CheckFifoParam+0x5a>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d856      	bhi.n	80035d2 <DMA_CheckFifoParam+0xce>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <DMA_CheckFifoParam+0x28>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	0800353d 	.word	0x0800353d
 8003530:	0800354f 	.word	0x0800354f
 8003534:	0800353d 	.word	0x0800353d
 8003538:	080035d3 	.word	0x080035d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d046      	beq.n	80035d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354c:	e043      	b.n	80035d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003556:	d140      	bne.n	80035da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355c:	e03d      	b.n	80035da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003566:	d121      	bne.n	80035ac <DMA_CheckFifoParam+0xa8>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d837      	bhi.n	80035de <DMA_CheckFifoParam+0xda>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <DMA_CheckFifoParam+0x70>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003585 	.word	0x08003585
 8003578:	0800358b 	.word	0x0800358b
 800357c:	08003585 	.word	0x08003585
 8003580:	0800359d 	.word	0x0800359d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e030      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d025      	beq.n	80035e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359a:	e022      	b.n	80035e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035a4:	d11f      	bne.n	80035e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035aa:	e01c      	b.n	80035e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d903      	bls.n	80035ba <DMA_CheckFifoParam+0xb6>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d003      	beq.n	80035c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035b8:	e018      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
      break;
 80035be:	e015      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
      break;
 80035d0:	e00b      	b.n	80035ea <DMA_CheckFifoParam+0xe6>
      break;
 80035d2:	bf00      	nop
 80035d4:	e00a      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;
 80035d6:	bf00      	nop
 80035d8:	e008      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e006      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;
 80035de:	bf00      	nop
 80035e0:	e004      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e002      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;   
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <DMA_CheckFifoParam+0xe8>
      break;
 80035ea:	bf00      	nop
    }
  } 
  
  return status; 
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop

080035fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e159      	b.n	80038cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003618:	2201      	movs	r2, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	429a      	cmp	r2, r3
 8003632:	f040 8148 	bne.w	80038c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d005      	beq.n	800364e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364a:	2b02      	cmp	r3, #2
 800364c:	d130      	bne.n	80036b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	2203      	movs	r2, #3
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003684:	2201      	movs	r2, #1
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 0201 	and.w	r2, r3, #1
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d017      	beq.n	80036ec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2203      	movs	r2, #3
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d123      	bne.n	8003740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	08da      	lsrs	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3208      	adds	r2, #8
 8003700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	220f      	movs	r2, #15
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	08da      	lsrs	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3208      	adds	r2, #8
 800373a:	69b9      	ldr	r1, [r7, #24]
 800373c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0203 	and.w	r2, r3, #3
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a2 	beq.w	80038c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <HAL_GPIO_Init+0x2e8>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	4a56      	ldr	r2, [pc, #344]	; (80038e4 <HAL_GPIO_Init+0x2e8>)
 800378c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003790:	6453      	str	r3, [r2, #68]	; 0x44
 8003792:	4b54      	ldr	r3, [pc, #336]	; (80038e4 <HAL_GPIO_Init+0x2e8>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800379e:	4a52      	ldr	r2, [pc, #328]	; (80038e8 <HAL_GPIO_Init+0x2ec>)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	220f      	movs	r2, #15
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a49      	ldr	r2, [pc, #292]	; (80038ec <HAL_GPIO_Init+0x2f0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d019      	beq.n	80037fe <HAL_GPIO_Init+0x202>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a48      	ldr	r2, [pc, #288]	; (80038f0 <HAL_GPIO_Init+0x2f4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_GPIO_Init+0x1fe>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a47      	ldr	r2, [pc, #284]	; (80038f4 <HAL_GPIO_Init+0x2f8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00d      	beq.n	80037f6 <HAL_GPIO_Init+0x1fa>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a46      	ldr	r2, [pc, #280]	; (80038f8 <HAL_GPIO_Init+0x2fc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <HAL_GPIO_Init+0x1f6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a45      	ldr	r2, [pc, #276]	; (80038fc <HAL_GPIO_Init+0x300>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_GPIO_Init+0x1f2>
 80037ea:	2304      	movs	r3, #4
 80037ec:	e008      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037ee:	2307      	movs	r3, #7
 80037f0:	e006      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037f2:	2303      	movs	r3, #3
 80037f4:	e004      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e002      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_GPIO_Init+0x204>
 80037fe:	2300      	movs	r3, #0
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	f002 0203 	and.w	r2, r2, #3
 8003806:	0092      	lsls	r2, r2, #2
 8003808:	4093      	lsls	r3, r2
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003810:	4935      	ldr	r1, [pc, #212]	; (80038e8 <HAL_GPIO_Init+0x2ec>)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	3302      	adds	r3, #2
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <HAL_GPIO_Init+0x304>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003842:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <HAL_GPIO_Init+0x304>)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_GPIO_Init+0x304>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800386c:	4a24      	ldr	r2, [pc, #144]	; (8003900 <HAL_GPIO_Init+0x304>)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_GPIO_Init+0x304>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003896:	4a1a      	ldr	r2, [pc, #104]	; (8003900 <HAL_GPIO_Init+0x304>)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800389c:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_GPIO_Init+0x304>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038c0:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <HAL_GPIO_Init+0x304>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3301      	adds	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b0f      	cmp	r3, #15
 80038d0:	f67f aea2 	bls.w	8003618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3724      	adds	r7, #36	; 0x24
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40013800 	.word	0x40013800
 80038ec:	40020000 	.word	0x40020000
 80038f0:	40020400 	.word	0x40020400
 80038f4:	40020800 	.word	0x40020800
 80038f8:	40020c00 	.word	0x40020c00
 80038fc:	40021000 	.word	0x40021000
 8003900:	40013c00 	.word	0x40013c00

08003904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e12b      	b.n	8003b6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fe fc66 	bl	80021fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	; 0x24
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003968:	f002 fb4a 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 800396c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4a81      	ldr	r2, [pc, #516]	; (8003b78 <HAL_I2C_Init+0x274>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d807      	bhi.n	8003988 <HAL_I2C_Init+0x84>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a80      	ldr	r2, [pc, #512]	; (8003b7c <HAL_I2C_Init+0x278>)
 800397c:	4293      	cmp	r3, r2
 800397e:	bf94      	ite	ls
 8003980:	2301      	movls	r3, #1
 8003982:	2300      	movhi	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e006      	b.n	8003996 <HAL_I2C_Init+0x92>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a7d      	ldr	r2, [pc, #500]	; (8003b80 <HAL_I2C_Init+0x27c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	bf94      	ite	ls
 8003990:	2301      	movls	r3, #1
 8003992:	2300      	movhi	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e0e7      	b.n	8003b6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a78      	ldr	r2, [pc, #480]	; (8003b84 <HAL_I2C_Init+0x280>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	0c9b      	lsrs	r3, r3, #18
 80039a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4a6a      	ldr	r2, [pc, #424]	; (8003b78 <HAL_I2C_Init+0x274>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d802      	bhi.n	80039d8 <HAL_I2C_Init+0xd4>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3301      	adds	r3, #1
 80039d6:	e009      	b.n	80039ec <HAL_I2C_Init+0xe8>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	4a69      	ldr	r2, [pc, #420]	; (8003b88 <HAL_I2C_Init+0x284>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	3301      	adds	r3, #1
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	495c      	ldr	r1, [pc, #368]	; (8003b78 <HAL_I2C_Init+0x274>)
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	d819      	bhi.n	8003a40 <HAL_I2C_Init+0x13c>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e59      	subs	r1, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a1a:	1c59      	adds	r1, r3, #1
 8003a1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a20:	400b      	ands	r3, r1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_I2C_Init+0x138>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1e59      	subs	r1, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a34:	3301      	adds	r3, #1
 8003a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3a:	e051      	b.n	8003ae0 <HAL_I2C_Init+0x1dc>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	e04f      	b.n	8003ae0 <HAL_I2C_Init+0x1dc>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d111      	bne.n	8003a6c <HAL_I2C_Init+0x168>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1e58      	subs	r0, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	440b      	add	r3, r1
 8003a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e012      	b.n	8003a92 <HAL_I2C_Init+0x18e>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e58      	subs	r0, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	0099      	lsls	r1, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_Init+0x196>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e022      	b.n	8003ae0 <HAL_I2C_Init+0x1dc>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_I2C_Init+0x1bc>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1e58      	subs	r0, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6859      	ldr	r1, [r3, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	440b      	add	r3, r1
 8003ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003abe:	e00f      	b.n	8003ae0 <HAL_I2C_Init+0x1dc>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1e58      	subs	r0, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6859      	ldr	r1, [r3, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	0099      	lsls	r1, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	6809      	ldr	r1, [r1, #0]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6911      	ldr	r1, [r2, #16]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68d2      	ldr	r2, [r2, #12]
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	000186a0 	.word	0x000186a0
 8003b7c:	001e847f 	.word	0x001e847f
 8003b80:	003d08ff 	.word	0x003d08ff
 8003b84:	431bde83 	.word	0x431bde83
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	461a      	mov	r2, r3
 8003b98:	460b      	mov	r3, r1
 8003b9a:	817b      	strh	r3, [r7, #10]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ba0:	f7fe fd0e 	bl	80025c0 <HAL_GetTick>
 8003ba4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	f040 80e0 	bne.w	8003d74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2319      	movs	r3, #25
 8003bba:	2201      	movs	r2, #1
 8003bbc:	4970      	ldr	r1, [pc, #448]	; (8003d80 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 faf4 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e0d3      	b.n	8003d76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_I2C_Master_Transmit+0x50>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e0cc      	b.n	8003d76 <HAL_I2C_Master_Transmit+0x1ea>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d007      	beq.n	8003c02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2221      	movs	r2, #33	; 0x21
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	893a      	ldrh	r2, [r7, #8]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a50      	ldr	r2, [pc, #320]	; (8003d84 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c44:	8979      	ldrh	r1, [r7, #10]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	6a3a      	ldr	r2, [r7, #32]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f996 	bl	8003f7c <I2C_MasterRequestWrite>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e08d      	b.n	8003d76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c70:	e066      	b.n	8003d40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	6a39      	ldr	r1, [r7, #32]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fb6e 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00d      	beq.n	8003c9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d107      	bne.n	8003c9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e06b      	b.n	8003d76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	781a      	ldrb	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d11b      	bne.n	8003d14 <HAL_I2C_Master_Transmit+0x188>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d017      	beq.n	8003d14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	6a39      	ldr	r1, [r7, #32]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 fb5e 	bl	80043da <I2C_WaitOnBTFFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00d      	beq.n	8003d40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d107      	bne.n	8003d3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e01a      	b.n	8003d76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d194      	bne.n	8003c72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	00100002 	.word	0x00100002
 8003d84:	ffff0000 	.word	0xffff0000

08003d88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	461a      	mov	r2, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	817b      	strh	r3, [r7, #10]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	813b      	strh	r3, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003da2:	f7fe fc0d 	bl	80025c0 <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	f040 80d9 	bne.w	8003f68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	2319      	movs	r3, #25
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	496d      	ldr	r1, [pc, #436]	; (8003f74 <HAL_I2C_Mem_Write+0x1ec>)
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f9f3 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e0cc      	b.n	8003f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_I2C_Mem_Write+0x56>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e0c5      	b.n	8003f6a <HAL_I2C_Mem_Write+0x1e2>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d007      	beq.n	8003e04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2221      	movs	r2, #33	; 0x21
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2240      	movs	r2, #64	; 0x40
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a3a      	ldr	r2, [r7, #32]
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a4d      	ldr	r2, [pc, #308]	; (8003f78 <HAL_I2C_Mem_Write+0x1f0>)
 8003e44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e46:	88f8      	ldrh	r0, [r7, #6]
 8003e48:	893a      	ldrh	r2, [r7, #8]
 8003e4a:	8979      	ldrh	r1, [r7, #10]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	4603      	mov	r3, r0
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f912 	bl	8004080 <I2C_RequestMemoryWrite>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d052      	beq.n	8003f08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e081      	b.n	8003f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fa74 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00d      	beq.n	8003e92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d107      	bne.n	8003e8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e06b      	b.n	8003f6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d11b      	bne.n	8003f08 <HAL_I2C_Mem_Write+0x180>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d017      	beq.n	8003f08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1aa      	bne.n	8003e66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fa60 	bl	80043da <I2C_WaitOnBTFFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d107      	bne.n	8003f38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e016      	b.n	8003f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f68:	2302      	movs	r3, #2
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	00100002 	.word	0x00100002
 8003f78:	ffff0000 	.word	0xffff0000

08003f7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d006      	beq.n	8003fa6 <I2C_MasterRequestWrite+0x2a>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d003      	beq.n	8003fa6 <I2C_MasterRequestWrite+0x2a>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa4:	d108      	bne.n	8003fb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e00b      	b.n	8003fd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	2b12      	cmp	r3, #18
 8003fbe:	d107      	bne.n	8003fd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f8e5 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff6:	d103      	bne.n	8004000 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e035      	b.n	8004070 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400c:	d108      	bne.n	8004020 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800400e:	897b      	ldrh	r3, [r7, #10]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800401c:	611a      	str	r2, [r3, #16]
 800401e:	e01b      	b.n	8004058 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004020:	897b      	ldrh	r3, [r7, #10]
 8004022:	11db      	asrs	r3, r3, #7
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 0306 	and.w	r3, r3, #6
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f063 030f 	orn	r3, r3, #15
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	490e      	ldr	r1, [pc, #56]	; (8004078 <I2C_MasterRequestWrite+0xfc>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f90b 	bl	800425a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e010      	b.n	8004070 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4907      	ldr	r1, [pc, #28]	; (800407c <I2C_MasterRequestWrite+0x100>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f8fb 	bl	800425a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	00010008 	.word	0x00010008
 800407c:	00010002 	.word	0x00010002

08004080 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	4608      	mov	r0, r1
 800408a:	4611      	mov	r1, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4603      	mov	r3, r0
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	460b      	mov	r3, r1
 8004094:	813b      	strh	r3, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f878 	bl	80041ac <I2C_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00d      	beq.n	80040de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d0:	d103      	bne.n	80040da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e05f      	b.n	800419e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040de:	897b      	ldrh	r3, [r7, #10]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	492d      	ldr	r1, [pc, #180]	; (80041a8 <I2C_RequestMemoryWrite+0x128>)
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f8b0 	bl	800425a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e04c      	b.n	800419e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	6a39      	ldr	r1, [r7, #32]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f91a 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b04      	cmp	r3, #4
 8004130:	d107      	bne.n	8004142 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004140:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e02b      	b.n	800419e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d105      	bne.n	8004158 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800414c:	893b      	ldrh	r3, [r7, #8]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]
 8004156:	e021      	b.n	800419c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004158:	893b      	ldrh	r3, [r7, #8]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	b29b      	uxth	r3, r3
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	6a39      	ldr	r1, [r7, #32]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f8f4 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b04      	cmp	r3, #4
 800417c:	d107      	bne.n	800418e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e005      	b.n	800419e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004192:	893b      	ldrh	r3, [r7, #8]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	00010002 	.word	0x00010002

080041ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041bc:	e025      	b.n	800420a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d021      	beq.n	800420a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c6:	f7fe f9fb 	bl	80025c0 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d116      	bne.n	800420a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f043 0220 	orr.w	r2, r3, #32
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e023      	b.n	8004252 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	d10d      	bne.n	8004230 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	43da      	mvns	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf0c      	ite	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	2300      	movne	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	e00c      	b.n	800424a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	43da      	mvns	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d0b6      	beq.n	80041be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004268:	e051      	b.n	800430e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004278:	d123      	bne.n	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004288:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004292:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f043 0204 	orr.w	r2, r3, #4
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e046      	b.n	8004350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d021      	beq.n	800430e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ca:	f7fe f979 	bl	80025c0 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d302      	bcc.n	80042e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d116      	bne.n	800430e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f043 0220 	orr.w	r2, r3, #32
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e020      	b.n	8004350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d10c      	bne.n	8004332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4013      	ands	r3, r2
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf14      	ite	ne
 800432a:	2301      	movne	r3, #1
 800432c:	2300      	moveq	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e00b      	b.n	800434a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	43da      	mvns	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d18d      	bne.n	800426a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004364:	e02d      	b.n	80043c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f878 	bl	800445c <I2C_IsAcknowledgeFailed>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e02d      	b.n	80043d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d021      	beq.n	80043c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437e:	f7fe f91f 	bl	80025c0 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d116      	bne.n	80043c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e007      	b.n	80043d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	2b80      	cmp	r3, #128	; 0x80
 80043ce:	d1ca      	bne.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043e6:	e02d      	b.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f837 	bl	800445c <I2C_IsAcknowledgeFailed>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e02d      	b.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d021      	beq.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004400:	f7fe f8de 	bl	80025c0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	d302      	bcc.n	8004416 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d116      	bne.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e007      	b.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b04      	cmp	r3, #4
 8004450:	d1ca      	bne.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004472:	d11b      	bne.n	80044ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800447c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f043 0204 	orr.w	r2, r3, #4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044bc:	b08f      	sub	sp, #60	; 0x3c
 80044be:	af0a      	add	r7, sp, #40	; 0x28
 80044c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e10f      	b.n	80046ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f004 fe88 	bl	80091fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2203      	movs	r2, #3
 80044f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d102      	bne.n	8004506 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f002 f875 	bl	80065fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	687e      	ldr	r6, [r7, #4]
 8004518:	466d      	mov	r5, sp
 800451a:	f106 0410 	add.w	r4, r6, #16
 800451e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800452a:	e885 0003 	stmia.w	r5, {r0, r1}
 800452e:	1d33      	adds	r3, r6, #4
 8004530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004532:	6838      	ldr	r0, [r7, #0]
 8004534:	f001 ff4d 	bl	80063d2 <USB_CoreInit>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e0d0      	b.n	80046ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2100      	movs	r1, #0
 8004550:	4618      	mov	r0, r3
 8004552:	f002 f863 	bl	800661c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	e04a      	b.n	80045f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	333d      	adds	r3, #61	; 0x3d
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004570:	7bfa      	ldrb	r2, [r7, #15]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	333c      	adds	r3, #60	; 0x3c
 8004580:	7bfa      	ldrb	r2, [r7, #15]
 8004582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	b298      	uxth	r0, r3
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	3342      	adds	r3, #66	; 0x42
 8004598:	4602      	mov	r2, r0
 800459a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800459c:	7bfa      	ldrb	r2, [r7, #15]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	333f      	adds	r3, #63	; 0x3f
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3344      	adds	r3, #68	; 0x44
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	3348      	adds	r3, #72	; 0x48
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	3350      	adds	r3, #80	; 0x50
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	3301      	adds	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
 80045f2:	7bfa      	ldrb	r2, [r7, #15]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d3af      	bcc.n	800455c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]
 8004600:	e044      	b.n	800468c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800462a:	7bfa      	ldrb	r2, [r7, #15]
 800462c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800465a:	7bfa      	ldrb	r2, [r7, #15]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	3301      	adds	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	7bfa      	ldrb	r2, [r7, #15]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	429a      	cmp	r2, r3
 8004694:	d3b5      	bcc.n	8004602 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	687e      	ldr	r6, [r7, #4]
 800469e:	466d      	mov	r5, sp
 80046a0:	f106 0410 	add.w	r4, r6, #16
 80046a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80046b4:	1d33      	adds	r3, r6, #4
 80046b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046b8:	6838      	ldr	r0, [r7, #0]
 80046ba:	f001 ffd9 	bl	8006670 <USB_DevInit>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e00d      	b.n	80046ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f003 f821 	bl	800772c <USB_DevDisconnect>

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_PCD_Start+0x1c>
 800470c:	2302      	movs	r3, #2
 800470e:	e020      	b.n	8004752 <HAL_PCD_Start+0x5e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	2b01      	cmp	r3, #1
 800471e:	d109      	bne.n	8004734 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004724:	2b01      	cmp	r3, #1
 8004726:	d005      	beq.n	8004734 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f001 ff4d 	bl	80065d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f002 ffd1 	bl	80076ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800475a:	b590      	push	{r4, r7, lr}
 800475c:	b08d      	sub	sp, #52	; 0x34
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f003 f88f 	bl	8007894 <USB_GetMode>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 839d 	bne.w	8004eb8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f002 fff3 	bl	800776e <USB_ReadInterrupts>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8393 	beq.w	8004eb6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f002 ffea 	bl	800776e <USB_ReadInterrupts>
 800479a:	4603      	mov	r3, r0
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d107      	bne.n	80047b4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f002 0202 	and.w	r2, r2, #2
 80047b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f002 ffd8 	bl	800776e <USB_ReadInterrupts>
 80047be:	4603      	mov	r3, r0
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d161      	bne.n	800488c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0210 	bic.w	r2, r2, #16
 80047d6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f003 020f 	and.w	r2, r3, #15
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	3304      	adds	r3, #4
 80047f6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	0c5b      	lsrs	r3, r3, #17
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	2b02      	cmp	r3, #2
 8004802:	d124      	bne.n	800484e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d035      	beq.n	800487c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800481a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800481e:	b29b      	uxth	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	6a38      	ldr	r0, [r7, #32]
 8004824:	f002 fe3e 	bl	80074a4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004834:	441a      	add	r2, r3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004846:	441a      	add	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	619a      	str	r2, [r3, #24]
 800484c:	e016      	b.n	800487c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	0c5b      	lsrs	r3, r3, #17
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	2b06      	cmp	r3, #6
 8004858:	d110      	bne.n	800487c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004860:	2208      	movs	r2, #8
 8004862:	4619      	mov	r1, r3
 8004864:	6a38      	ldr	r0, [r7, #32]
 8004866:	f002 fe1d 	bl	80074a4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004876:	441a      	add	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0210 	orr.w	r2, r2, #16
 800488a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f002 ff6c 	bl	800776e <USB_ReadInterrupts>
 8004896:	4603      	mov	r3, r0
 8004898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048a0:	d16e      	bne.n	8004980 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f002 ff72 	bl	8007794 <USB_ReadDevAllOutEpInterrupt>
 80048b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80048b2:	e062      	b.n	800497a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d057      	beq.n	800496e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	4611      	mov	r1, r2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f002 ff97 	bl	80077fc <USB_ReadDevOutEPInterrupt>
 80048ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00c      	beq.n	80048f4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	461a      	mov	r2, r3
 80048e8:	2301      	movs	r3, #1
 80048ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fdb0 	bl	8005454 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00c      	beq.n	8004918 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	461a      	mov	r2, r3
 800490c:	2308      	movs	r3, #8
 800490e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 feaa 	bl	800566c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b00      	cmp	r3, #0
 8004920:	d008      	beq.n	8004934 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	2310      	movs	r3, #16
 8004932:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494a:	461a      	mov	r2, r3
 800494c:	2320      	movs	r3, #32
 800494e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	461a      	mov	r2, r3
 8004968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800496c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	3301      	adds	r3, #1
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	d199      	bne.n	80048b4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f002 fef2 	bl	800776e <USB_ReadInterrupts>
 800498a:	4603      	mov	r3, r0
 800498c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004990:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004994:	f040 80c0 	bne.w	8004b18 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f002 ff13 	bl	80077c8 <USB_ReadDevAllInEpInterrupt>
 80049a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80049a8:	e0b2      	b.n	8004b10 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80a7 	beq.w	8004b04 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f002 ff39 	bl	8007838 <USB_ReadDevInEPInterrupt>
 80049c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d057      	beq.n	8004a82 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	2201      	movs	r2, #1
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	69f9      	ldr	r1, [r7, #28]
 80049ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f2:	4013      	ands	r3, r2
 80049f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	461a      	mov	r2, r3
 8004a04:	2301      	movs	r3, #1
 8004a06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d132      	bne.n	8004a76 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3348      	adds	r3, #72	; 0x48
 8004a20:	6819      	ldr	r1, [r3, #0]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4403      	add	r3, r0
 8004a30:	3344      	adds	r3, #68	; 0x44
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4419      	add	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4403      	add	r3, r0
 8004a44:	3348      	adds	r3, #72	; 0x48
 8004a46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d113      	bne.n	8004a76 <HAL_PCD_IRQHandler+0x31c>
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a52:	4613      	mov	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3350      	adds	r3, #80	; 0x50
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d108      	bne.n	8004a76 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2101      	movs	r1, #1
 8004a72:	f002 ff41 	bl	80078f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f004 fc3e 	bl	80092fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2340      	movs	r3, #64	; 0x40
 8004ad4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	461a      	mov	r2, r3
 8004aee:	2302      	movs	r3, #2
 8004af0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fc1b 	bl	800533a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	3301      	adds	r3, #1
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f47f af49 	bne.w	80049aa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f002 fe26 	bl	800776e <USB_ReadInterrupts>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b2c:	d122      	bne.n	8004b74 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d108      	bne.n	8004b5e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b54:	2100      	movs	r1, #0
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fe26 	bl	80057a8 <HAL_PCDEx_LPM_Callback>
 8004b5c:	e002      	b.n	8004b64 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f004 fc3a 	bl	80093d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f002 fdf8 	bl	800776e <USB_ReadInterrupts>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b88:	d112      	bne.n	8004bb0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d102      	bne.n	8004ba0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f004 fbf6 	bl	800938c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004bae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f002 fdda 	bl	800776e <USB_ReadInterrupts>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	f040 80c7 	bne.w	8004d56 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	69fa      	ldr	r2, [r7, #28]
 8004bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2110      	movs	r1, #16
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fea8 	bl	8006938 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004be8:	2300      	movs	r3, #0
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bec:	e056      	b.n	8004c9c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c12:	0151      	lsls	r1, r2, #5
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	440a      	add	r2, r1
 8004c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c20:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c66:	0151      	lsls	r1, r2, #5
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	440a      	add	r2, r1
 8004c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	3301      	adds	r3, #1
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d3a3      	bcc.n	8004bee <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004cb8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd2:	f043 030b 	orr.w	r3, r3, #11
 8004cd6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ce8:	f043 030b 	orr.w	r3, r3, #11
 8004cec:	6453      	str	r3, [r2, #68]	; 0x44
 8004cee:	e015      	b.n	8004d1c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d02:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d16:	f043 030b 	orr.w	r3, r3, #11
 8004d1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d40:	461a      	mov	r2, r3
 8004d42:	f002 fdd9 	bl	80078f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f002 fd07 	bl	800776e <USB_ReadInterrupts>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6a:	d124      	bne.n	8004db6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f002 fd9d 	bl	80078b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 fe3d 	bl	80069fa <USB_GetDevSpeed>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681c      	ldr	r4, [r3, #0]
 8004d8c:	f001 f92c 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8004d90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f001 fb7a 	bl	8006494 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f004 fad4 	bl	800934e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f002 fcd7 	bl	800776e <USB_ReadInterrupts>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d10a      	bne.n	8004de0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f004 fab1 	bl	8009332 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f002 0208 	and.w	r2, r2, #8
 8004dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f002 fcc2 	bl	800776e <USB_ReadInterrupts>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df4:	d10f      	bne.n	8004e16 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f004 fb09 	bl	8009418 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f002 fca7 	bl	800776e <USB_ReadInterrupts>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e2a:	d10f      	bne.n	8004e4c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	4619      	mov	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f004 fadc 	bl	80093f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f002 fc8c 	bl	800776e <USB_ReadInterrupts>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e60:	d10a      	bne.n	8004e78 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f004 faea 	bl	800943c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f002 fc76 	bl	800776e <USB_ReadInterrupts>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d115      	bne.n	8004eb8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f004 fada 	bl	8009458 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
 8004eb4:	e000      	b.n	8004eb8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004eb6:	bf00      	nop
    }
  }
}
 8004eb8:	3734      	adds	r7, #52	; 0x34
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd90      	pop	{r4, r7, pc}

08004ebe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_PCD_SetAddress+0x1a>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e013      	b.n	8004f00 <HAL_PCD_SetAddress+0x42>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f002 fbd4 	bl	800769e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	4608      	mov	r0, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	70fb      	strb	r3, [r7, #3]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	803b      	strh	r3, [r7, #0]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da0f      	bge.n	8004f4e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	3338      	adds	r3, #56	; 0x38
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4413      	add	r3, r2
 8004f42:	3304      	adds	r3, #4
 8004f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	705a      	strb	r2, [r3, #1]
 8004f4c:	e00f      	b.n	8004f6e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	f003 020f 	and.w	r2, r3, #15
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	4413      	add	r3, r2
 8004f64:	3304      	adds	r3, #4
 8004f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f7a:	883a      	ldrh	r2, [r7, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	78ba      	ldrb	r2, [r7, #2]
 8004f84:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f98:	78bb      	ldrb	r3, [r7, #2]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d102      	bne.n	8004fa4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_PCD_EP_Open+0xaa>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e00e      	b.n	8004fd0 <HAL_PCD_EP_Open+0xc8>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68f9      	ldr	r1, [r7, #12]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 fd3f 	bl	8006a44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004fce:	7afb      	ldrb	r3, [r7, #11]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	da0f      	bge.n	800500c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	f003 020f 	and.w	r2, r3, #15
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	3338      	adds	r3, #56	; 0x38
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	4413      	add	r3, r2
 8005000:	3304      	adds	r3, #4
 8005002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	705a      	strb	r2, [r3, #1]
 800500a:	e00f      	b.n	800502c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	f003 020f 	and.w	r2, r3, #15
 8005012:	4613      	mov	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	4413      	add	r3, r2
 8005022:	3304      	adds	r3, #4
 8005024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_PCD_EP_Close+0x6e>
 8005042:	2302      	movs	r3, #2
 8005044:	e00e      	b.n	8005064 <HAL_PCD_EP_Close+0x8c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	4618      	mov	r0, r3
 8005056:	f001 fd7d 	bl	8006b54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	460b      	mov	r3, r1
 800507a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800507c:	7afb      	ldrb	r3, [r7, #11]
 800507e:	f003 020f 	and.w	r2, r3, #15
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	3304      	adds	r3, #4
 8005094:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2200      	movs	r2, #0
 80050a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2200      	movs	r2, #0
 80050ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ae:	7afb      	ldrb	r3, [r7, #11]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d102      	bne.n	80050c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050c8:	7afb      	ldrb	r3, [r7, #11]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	6979      	ldr	r1, [r7, #20]
 80050e0:	f002 f858 	bl	8007194 <USB_EP0StartXfer>
 80050e4:	e008      	b.n	80050f8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	6979      	ldr	r1, [r7, #20]
 80050f4:	f001 fe0a 	bl	8006d0c <USB_EPStartXfer>
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	f003 020f 	and.w	r2, r3, #15
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005124:	681b      	ldr	r3, [r3, #0]
}
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	460b      	mov	r3, r1
 8005140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005142:	7afb      	ldrb	r3, [r7, #11]
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	4613      	mov	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	3338      	adds	r3, #56	; 0x38
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	3304      	adds	r3, #4
 8005158:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2200      	movs	r2, #0
 800516a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2201      	movs	r2, #1
 8005170:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005172:	7afb      	ldrb	r3, [r7, #11]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	b2da      	uxtb	r2, r3
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d102      	bne.n	800518c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800518c:	7afb      	ldrb	r3, [r7, #11]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	6979      	ldr	r1, [r7, #20]
 80051a4:	f001 fff6 	bl	8007194 <USB_EP0StartXfer>
 80051a8:	e008      	b.n	80051bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	6979      	ldr	r1, [r7, #20]
 80051b8:	f001 fda8 	bl	8006d0c <USB_EPStartXfer>
  }

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	460b      	mov	r3, r1
 80051d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d901      	bls.n	80051e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e050      	b.n	8005286 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	da0f      	bge.n	800520c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	f003 020f 	and.w	r2, r3, #15
 80051f2:	4613      	mov	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	3338      	adds	r3, #56	; 0x38
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	4413      	add	r3, r2
 8005200:	3304      	adds	r3, #4
 8005202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	705a      	strb	r2, [r3, #1]
 800520a:	e00d      	b.n	8005228 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	4613      	mov	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4413      	add	r3, r2
 800521e:	3304      	adds	r3, #4
 8005220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_PCD_EP_SetStall+0x82>
 8005244:	2302      	movs	r3, #2
 8005246:	e01e      	b.n	8005286 <HAL_PCD_EP_SetStall+0xc0>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68f9      	ldr	r1, [r7, #12]
 8005256:	4618      	mov	r0, r3
 8005258:	f002 f94d 	bl	80074f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	b2d9      	uxtb	r1, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005276:	461a      	mov	r2, r3
 8005278:	f002 fb3e 	bl	80078f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	460b      	mov	r3, r1
 8005298:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	f003 020f 	and.w	r2, r3, #15
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d901      	bls.n	80052ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e042      	b.n	8005332 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da0f      	bge.n	80052d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	f003 020f 	and.w	r2, r3, #15
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	3338      	adds	r3, #56	; 0x38
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	4413      	add	r3, r2
 80052c8:	3304      	adds	r3, #4
 80052ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	705a      	strb	r2, [r3, #1]
 80052d2:	e00f      	b.n	80052f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	f003 020f 	and.w	r2, r3, #15
 80052da:	4613      	mov	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	3304      	adds	r3, #4
 80052ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_PCD_EP_ClrStall+0x86>
 8005310:	2302      	movs	r3, #2
 8005312:	e00e      	b.n	8005332 <HAL_PCD_EP_ClrStall+0xa4>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	4618      	mov	r0, r3
 8005324:	f002 f955 	bl	80075d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b08a      	sub	sp, #40	; 0x28
 800533e:	af02      	add	r7, sp, #8
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	3338      	adds	r3, #56	; 0x38
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	3304      	adds	r3, #4
 8005360:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	429a      	cmp	r2, r3
 800536c:	d901      	bls.n	8005372 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e06c      	b.n	800544c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	429a      	cmp	r2, r3
 8005386:	d902      	bls.n	800538e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	3303      	adds	r3, #3
 8005392:	089b      	lsrs	r3, r3, #2
 8005394:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005396:	e02b      	b.n	80053f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d902      	bls.n	80053b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	3303      	adds	r3, #3
 80053b8:	089b      	lsrs	r3, r3, #2
 80053ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68d9      	ldr	r1, [r3, #12]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	4603      	mov	r3, r0
 80053d2:	6978      	ldr	r0, [r7, #20]
 80053d4:	f002 f831 	bl	800743a <USB_WritePacket>

    ep->xfer_buff  += len;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	441a      	add	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	441a      	add	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	429a      	cmp	r2, r3
 8005404:	d809      	bhi.n	800541a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800540e:	429a      	cmp	r2, r3
 8005410:	d203      	bcs.n	800541a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1be      	bne.n	8005398 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	429a      	cmp	r2, r3
 8005424:	d811      	bhi.n	800544a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	2201      	movs	r2, #1
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	43db      	mvns	r3, r3
 8005440:	6939      	ldr	r1, [r7, #16]
 8005442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005446:	4013      	ands	r3, r2
 8005448:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	333c      	adds	r3, #60	; 0x3c
 800546c:	3304      	adds	r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b01      	cmp	r3, #1
 8005488:	f040 80a0 	bne.w	80055cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d015      	beq.n	80054c2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a72      	ldr	r2, [pc, #456]	; (8005664 <PCD_EP_OutXfrComplete_int+0x210>)
 800549a:	4293      	cmp	r3, r2
 800549c:	f240 80dd 	bls.w	800565a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80d7 	beq.w	800565a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	461a      	mov	r2, r3
 80054ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054be:	6093      	str	r3, [r2, #8]
 80054c0:	e0cb      	b.n	800565a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d8:	461a      	mov	r2, r3
 80054da:	2320      	movs	r3, #32
 80054dc:	6093      	str	r3, [r2, #8]
 80054de:	e0bc      	b.n	800565a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f040 80b7 	bne.w	800565a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a5d      	ldr	r2, [pc, #372]	; (8005664 <PCD_EP_OutXfrComplete_int+0x210>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d90f      	bls.n	8005514 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	461a      	mov	r2, r3
 800550c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005510:	6093      	str	r3, [r2, #8]
 8005512:	e0a2      	b.n	800565a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005526:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	0159      	lsls	r1, r3, #5
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	440b      	add	r3, r1
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800553a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4403      	add	r3, r0
 800554a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800554e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4403      	add	r3, r0
 8005572:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4419      	add	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	4613      	mov	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4403      	add	r3, r0
 8005588:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800558c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d114      	bne.n	80055be <PCD_EP_OutXfrComplete_int+0x16a>
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	4613      	mov	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d108      	bne.n	80055be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055b6:	461a      	mov	r2, r3
 80055b8:	2101      	movs	r1, #1
 80055ba:	f002 f99d 	bl	80078f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f003 fe7f 	bl	80092c8 <HAL_PCD_DataOutStageCallback>
 80055ca:	e046      	b.n	800565a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4a26      	ldr	r2, [pc, #152]	; (8005668 <PCD_EP_OutXfrComplete_int+0x214>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d124      	bne.n	800561e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	461a      	mov	r2, r3
 80055ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f0:	6093      	str	r3, [r2, #8]
 80055f2:	e032      	b.n	800565a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	461a      	mov	r2, r3
 800560c:	2320      	movs	r3, #32
 800560e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f003 fe56 	bl	80092c8 <HAL_PCD_DataOutStageCallback>
 800561c:	e01d      	b.n	800565a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d114      	bne.n	800564e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d108      	bne.n	800564e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005646:	461a      	mov	r2, r3
 8005648:	2100      	movs	r1, #0
 800564a:	f002 f955 	bl	80078f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f003 fe37 	bl	80092c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	4f54300a 	.word	0x4f54300a
 8005668:	4f54310a 	.word	0x4f54310a

0800566c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	333c      	adds	r3, #60	; 0x3c
 8005684:	3304      	adds	r3, #4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a15      	ldr	r2, [pc, #84]	; (80056f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d90e      	bls.n	80056c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	461a      	mov	r2, r3
 80056ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f003 fdef 	bl	80092a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d90c      	bls.n	80056e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d108      	bne.n	80056e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056e0:	461a      	mov	r2, r3
 80056e2:	2101      	movs	r1, #1
 80056e4:	f002 f908 	bl	80078f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	4f54300a 	.word	0x4f54300a

080056f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	70fb      	strb	r3, [r7, #3]
 8005704:	4613      	mov	r3, r2
 8005706:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d107      	bne.n	8005726 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005716:	883b      	ldrh	r3, [r7, #0]
 8005718:	0419      	lsls	r1, r3, #16
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	430a      	orrs	r2, r1
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
 8005724:	e028      	b.n	8005778 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4413      	add	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005734:	2300      	movs	r3, #0
 8005736:	73fb      	strb	r3, [r7, #15]
 8005738:	e00d      	b.n	8005756 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	3340      	adds	r3, #64	; 0x40
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4413      	add	r3, r2
 800574e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	3301      	adds	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
 8005756:	7bfa      	ldrb	r2, [r7, #15]
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	3b01      	subs	r3, #1
 800575c:	429a      	cmp	r2, r3
 800575e:	d3ec      	bcc.n	800573a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005760:	883b      	ldrh	r3, [r7, #0]
 8005762:	0418      	lsls	r0, r3, #16
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6819      	ldr	r1, [r3, #0]
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	3b01      	subs	r3, #1
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	4302      	orrs	r2, r0
 8005770:	3340      	adds	r3, #64	; 0x40
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	460b      	mov	r3, r1
 8005790:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	887a      	ldrh	r2, [r7, #2]
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e264      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d075      	beq.n	80058ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057de:	4ba3      	ldr	r3, [pc, #652]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 030c 	and.w	r3, r3, #12
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d00c      	beq.n	8005804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ea:	4ba0      	ldr	r3, [pc, #640]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d112      	bne.n	800581c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057f6:	4b9d      	ldr	r3, [pc, #628]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005802:	d10b      	bne.n	800581c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005804:	4b99      	ldr	r3, [pc, #612]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d05b      	beq.n	80058c8 <HAL_RCC_OscConfig+0x108>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d157      	bne.n	80058c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e23f      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005824:	d106      	bne.n	8005834 <HAL_RCC_OscConfig+0x74>
 8005826:	4b91      	ldr	r3, [pc, #580]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a90      	ldr	r2, [pc, #576]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 800582c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e01d      	b.n	8005870 <HAL_RCC_OscConfig+0xb0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800583c:	d10c      	bne.n	8005858 <HAL_RCC_OscConfig+0x98>
 800583e:	4b8b      	ldr	r3, [pc, #556]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a8a      	ldr	r2, [pc, #552]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	4b88      	ldr	r3, [pc, #544]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a87      	ldr	r2, [pc, #540]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	e00b      	b.n	8005870 <HAL_RCC_OscConfig+0xb0>
 8005858:	4b84      	ldr	r3, [pc, #528]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a83      	ldr	r2, [pc, #524]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 800585e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	4b81      	ldr	r3, [pc, #516]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a80      	ldr	r2, [pc, #512]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 800586a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d013      	beq.n	80058a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7fc fea2 	bl	80025c0 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005880:	f7fc fe9e 	bl	80025c0 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b64      	cmp	r3, #100	; 0x64
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e204      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005892:	4b76      	ldr	r3, [pc, #472]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f0      	beq.n	8005880 <HAL_RCC_OscConfig+0xc0>
 800589e:	e014      	b.n	80058ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fc fe8e 	bl	80025c0 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058a8:	f7fc fe8a 	bl	80025c0 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	; 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e1f0      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ba:	4b6c      	ldr	r3, [pc, #432]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0xe8>
 80058c6:	e000      	b.n	80058ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d063      	beq.n	800599e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058d6:	4b65      	ldr	r3, [pc, #404]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058e2:	4b62      	ldr	r3, [pc, #392]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d11c      	bne.n	8005928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ee:	4b5f      	ldr	r3, [pc, #380]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d116      	bne.n	8005928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058fa:	4b5c      	ldr	r3, [pc, #368]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_RCC_OscConfig+0x152>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d001      	beq.n	8005912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e1c4      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005912:	4b56      	ldr	r3, [pc, #344]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4952      	ldr	r1, [pc, #328]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005922:	4313      	orrs	r3, r2
 8005924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005926:	e03a      	b.n	800599e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d020      	beq.n	8005972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005930:	4b4f      	ldr	r3, [pc, #316]	; (8005a70 <HAL_RCC_OscConfig+0x2b0>)
 8005932:	2201      	movs	r2, #1
 8005934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005936:	f7fc fe43 	bl	80025c0 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800593e:	f7fc fe3f 	bl	80025c0 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e1a5      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005950:	4b46      	ldr	r3, [pc, #280]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595c:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	4940      	ldr	r1, [pc, #256]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 800596c:	4313      	orrs	r3, r2
 800596e:	600b      	str	r3, [r1, #0]
 8005970:	e015      	b.n	800599e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005972:	4b3f      	ldr	r3, [pc, #252]	; (8005a70 <HAL_RCC_OscConfig+0x2b0>)
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fc fe22 	bl	80025c0 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005980:	f7fc fe1e 	bl	80025c0 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e184      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005992:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1f0      	bne.n	8005980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d030      	beq.n	8005a0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d016      	beq.n	80059e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059b2:	4b30      	ldr	r3, [pc, #192]	; (8005a74 <HAL_RCC_OscConfig+0x2b4>)
 80059b4:	2201      	movs	r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b8:	f7fc fe02 	bl	80025c0 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059c0:	f7fc fdfe 	bl	80025c0 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e164      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d2:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 80059d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0f0      	beq.n	80059c0 <HAL_RCC_OscConfig+0x200>
 80059de:	e015      	b.n	8005a0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059e0:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <HAL_RCC_OscConfig+0x2b4>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e6:	f7fc fdeb 	bl	80025c0 <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ee:	f7fc fde7 	bl	80025c0 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e14d      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a00:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f0      	bne.n	80059ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80a0 	beq.w	8005b5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10f      	bne.n	8005a4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60bb      	str	r3, [r7, #8]
 8005a2e:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	4a0e      	ldr	r2, [pc, #56]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a38:	6413      	str	r3, [r2, #64]	; 0x40
 8005a3a:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <HAL_RCC_OscConfig+0x2ac>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a46:	2301      	movs	r3, #1
 8005a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <HAL_RCC_OscConfig+0x2b8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d121      	bne.n	8005a9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <HAL_RCC_OscConfig+0x2b8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a07      	ldr	r2, [pc, #28]	; (8005a78 <HAL_RCC_OscConfig+0x2b8>)
 8005a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a62:	f7fc fdad 	bl	80025c0 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a68:	e011      	b.n	8005a8e <HAL_RCC_OscConfig+0x2ce>
 8005a6a:	bf00      	nop
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	42470000 	.word	0x42470000
 8005a74:	42470e80 	.word	0x42470e80
 8005a78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7c:	f7fc fda0 	bl	80025c0 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e106      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a8e:	4b85      	ldr	r3, [pc, #532]	; (8005ca4 <HAL_RCC_OscConfig+0x4e4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d106      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x2f0>
 8005aa2:	4b81      	ldr	r3, [pc, #516]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	4a80      	ldr	r2, [pc, #512]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	6713      	str	r3, [r2, #112]	; 0x70
 8005aae:	e01c      	b.n	8005aea <HAL_RCC_OscConfig+0x32a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b05      	cmp	r3, #5
 8005ab6:	d10c      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x312>
 8005ab8:	4b7b      	ldr	r3, [pc, #492]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abc:	4a7a      	ldr	r2, [pc, #488]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005abe:	f043 0304 	orr.w	r3, r3, #4
 8005ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac4:	4b78      	ldr	r3, [pc, #480]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac8:	4a77      	ldr	r2, [pc, #476]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad0:	e00b      	b.n	8005aea <HAL_RCC_OscConfig+0x32a>
 8005ad2:	4b75      	ldr	r3, [pc, #468]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	4a74      	ldr	r2, [pc, #464]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ade:	4b72      	ldr	r3, [pc, #456]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	4a71      	ldr	r2, [pc, #452]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005ae4:	f023 0304 	bic.w	r3, r3, #4
 8005ae8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d015      	beq.n	8005b1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af2:	f7fc fd65 	bl	80025c0 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af8:	e00a      	b.n	8005b10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005afa:	f7fc fd61 	bl	80025c0 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e0c5      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b10:	4b65      	ldr	r3, [pc, #404]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0ee      	beq.n	8005afa <HAL_RCC_OscConfig+0x33a>
 8005b1c:	e014      	b.n	8005b48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b1e:	f7fc fd4f 	bl	80025c0 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b24:	e00a      	b.n	8005b3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b26:	f7fc fd4b 	bl	80025c0 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e0af      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b3c:	4b5a      	ldr	r3, [pc, #360]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1ee      	bne.n	8005b26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d105      	bne.n	8005b5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b4e:	4b56      	ldr	r3, [pc, #344]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	4a55      	ldr	r2, [pc, #340]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 809b 	beq.w	8005c9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b64:	4b50      	ldr	r3, [pc, #320]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 030c 	and.w	r3, r3, #12
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d05c      	beq.n	8005c2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d141      	bne.n	8005bfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b78:	4b4c      	ldr	r3, [pc, #304]	; (8005cac <HAL_RCC_OscConfig+0x4ec>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7e:	f7fc fd1f 	bl	80025c0 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b86:	f7fc fd1b 	bl	80025c0 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e081      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b98:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1f0      	bne.n	8005b86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	019b      	lsls	r3, r3, #6
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	061b      	lsls	r3, r3, #24
 8005bc8:	4937      	ldr	r1, [pc, #220]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bce:	4b37      	ldr	r3, [pc, #220]	; (8005cac <HAL_RCC_OscConfig+0x4ec>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd4:	f7fc fcf4 	bl	80025c0 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bdc:	f7fc fcf0 	bl	80025c0 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e056      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bee:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0x41c>
 8005bfa:	e04e      	b.n	8005c9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfc:	4b2b      	ldr	r3, [pc, #172]	; (8005cac <HAL_RCC_OscConfig+0x4ec>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c02:	f7fc fcdd 	bl	80025c0 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c0a:	f7fc fcd9 	bl	80025c0 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e03f      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1c:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f0      	bne.n	8005c0a <HAL_RCC_OscConfig+0x44a>
 8005c28:	e037      	b.n	8005c9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e032      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c36:	4b1c      	ldr	r3, [pc, #112]	; (8005ca8 <HAL_RCC_OscConfig+0x4e8>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d028      	beq.n	8005c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d121      	bne.n	8005c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d11a      	bne.n	8005c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c66:	4013      	ands	r3, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d111      	bne.n	8005c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d107      	bne.n	8005c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d001      	beq.n	8005c9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40007000 	.word	0x40007000
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	42470060 	.word	0x42470060

08005cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0cc      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cc4:	4b68      	ldr	r3, [pc, #416]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d90c      	bls.n	8005cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd2:	4b65      	ldr	r3, [pc, #404]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cda:	4b63      	ldr	r3, [pc, #396]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d001      	beq.n	8005cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0b8      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d020      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d04:	4b59      	ldr	r3, [pc, #356]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	4a58      	ldr	r2, [pc, #352]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d1c:	4b53      	ldr	r3, [pc, #332]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	4a52      	ldr	r2, [pc, #328]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d28:	4b50      	ldr	r3, [pc, #320]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	494d      	ldr	r1, [pc, #308]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d044      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4e:	4b47      	ldr	r3, [pc, #284]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d119      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e07f      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d003      	beq.n	8005d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6e:	4b3f      	ldr	r3, [pc, #252]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e06f      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d7e:	4b3b      	ldr	r3, [pc, #236]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e067      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d8e:	4b37      	ldr	r3, [pc, #220]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f023 0203 	bic.w	r2, r3, #3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	4934      	ldr	r1, [pc, #208]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005da0:	f7fc fc0e 	bl	80025c0 <HAL_GetTick>
 8005da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da6:	e00a      	b.n	8005dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da8:	f7fc fc0a 	bl	80025c0 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e04f      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dbe:	4b2b      	ldr	r3, [pc, #172]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 020c 	and.w	r2, r3, #12
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d1eb      	bne.n	8005da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dd0:	4b25      	ldr	r3, [pc, #148]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d20c      	bcs.n	8005df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dde:	4b22      	ldr	r3, [pc, #136]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de6:	4b20      	ldr	r3, [pc, #128]	; (8005e68 <HAL_RCC_ClockConfig+0x1b8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e032      	b.n	8005e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e04:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4916      	ldr	r1, [pc, #88]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	490e      	ldr	r1, [pc, #56]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e36:	f000 f821 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	091b      	lsrs	r3, r3, #4
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	490a      	ldr	r1, [pc, #40]	; (8005e70 <HAL_RCC_ClockConfig+0x1c0>)
 8005e48:	5ccb      	ldrb	r3, [r1, r3]
 8005e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4e:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <HAL_RCC_ClockConfig+0x1c8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fc fb6e 	bl	8002538 <HAL_InitTick>

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40023c00 	.word	0x40023c00
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	0800bdc0 	.word	0x0800bdc0
 8005e74:	20000020 	.word	0x20000020
 8005e78:	20000024 	.word	0x20000024

08005e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e7c:	b5b0      	push	{r4, r5, r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e82:	2100      	movs	r1, #0
 8005e84:	6079      	str	r1, [r7, #4]
 8005e86:	2100      	movs	r1, #0
 8005e88:	60f9      	str	r1, [r7, #12]
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e8e:	2100      	movs	r1, #0
 8005e90:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e92:	4952      	ldr	r1, [pc, #328]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8005e94:	6889      	ldr	r1, [r1, #8]
 8005e96:	f001 010c 	and.w	r1, r1, #12
 8005e9a:	2908      	cmp	r1, #8
 8005e9c:	d00d      	beq.n	8005eba <HAL_RCC_GetSysClockFreq+0x3e>
 8005e9e:	2908      	cmp	r1, #8
 8005ea0:	f200 8094 	bhi.w	8005fcc <HAL_RCC_GetSysClockFreq+0x150>
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_RCC_GetSysClockFreq+0x32>
 8005ea8:	2904      	cmp	r1, #4
 8005eaa:	d003      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x38>
 8005eac:	e08e      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eae:	4b4c      	ldr	r3, [pc, #304]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005eb0:	60bb      	str	r3, [r7, #8]
       break;
 8005eb2:	e08e      	b.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eb4:	4b4b      	ldr	r3, [pc, #300]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005eb6:	60bb      	str	r3, [r7, #8]
      break;
 8005eb8:	e08b      	b.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eba:	4948      	ldr	r1, [pc, #288]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8005ebc:	6849      	ldr	r1, [r1, #4]
 8005ebe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005ec2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ec4:	4945      	ldr	r1, [pc, #276]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8005ec6:	6849      	ldr	r1, [r1, #4]
 8005ec8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005ecc:	2900      	cmp	r1, #0
 8005ece:	d024      	beq.n	8005f1a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ed0:	4942      	ldr	r1, [pc, #264]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8005ed2:	6849      	ldr	r1, [r1, #4]
 8005ed4:	0989      	lsrs	r1, r1, #6
 8005ed6:	4608      	mov	r0, r1
 8005ed8:	f04f 0100 	mov.w	r1, #0
 8005edc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005ee0:	f04f 0500 	mov.w	r5, #0
 8005ee4:	ea00 0204 	and.w	r2, r0, r4
 8005ee8:	ea01 0305 	and.w	r3, r1, r5
 8005eec:	493d      	ldr	r1, [pc, #244]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005eee:	fb01 f003 	mul.w	r0, r1, r3
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	fb01 f102 	mul.w	r1, r1, r2
 8005ef8:	1844      	adds	r4, r0, r1
 8005efa:	493a      	ldr	r1, [pc, #232]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005efc:	fba2 0101 	umull	r0, r1, r2, r1
 8005f00:	1863      	adds	r3, r4, r1
 8005f02:	4619      	mov	r1, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	f7fa fe86 	bl	8000c1c <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4613      	mov	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	e04a      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f1a:	4b30      	ldr	r3, [pc, #192]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	099b      	lsrs	r3, r3, #6
 8005f20:	461a      	mov	r2, r3
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f2a:	f04f 0100 	mov.w	r1, #0
 8005f2e:	ea02 0400 	and.w	r4, r2, r0
 8005f32:	ea03 0501 	and.w	r5, r3, r1
 8005f36:	4620      	mov	r0, r4
 8005f38:	4629      	mov	r1, r5
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	014b      	lsls	r3, r1, #5
 8005f44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f48:	0142      	lsls	r2, r0, #5
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	1b00      	subs	r0, r0, r4
 8005f50:	eb61 0105 	sbc.w	r1, r1, r5
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	018b      	lsls	r3, r1, #6
 8005f5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f62:	0182      	lsls	r2, r0, #6
 8005f64:	1a12      	subs	r2, r2, r0
 8005f66:	eb63 0301 	sbc.w	r3, r3, r1
 8005f6a:	f04f 0000 	mov.w	r0, #0
 8005f6e:	f04f 0100 	mov.w	r1, #0
 8005f72:	00d9      	lsls	r1, r3, #3
 8005f74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f78:	00d0      	lsls	r0, r2, #3
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	1912      	adds	r2, r2, r4
 8005f80:	eb45 0303 	adc.w	r3, r5, r3
 8005f84:	f04f 0000 	mov.w	r0, #0
 8005f88:	f04f 0100 	mov.w	r1, #0
 8005f8c:	0299      	lsls	r1, r3, #10
 8005f8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f92:	0290      	lsls	r0, r2, #10
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	f7fa fe3a 	bl	8000c1c <__aeabi_uldivmod>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4613      	mov	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	0c1b      	lsrs	r3, r3, #16
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	3301      	adds	r3, #1
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	60bb      	str	r3, [r7, #8]
      break;
 8005fca:	e002      	b.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fcc:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005fce:	60bb      	str	r3, [r7, #8]
      break;
 8005fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bdb0      	pop	{r4, r5, r7, pc}
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	00f42400 	.word	0x00f42400
 8005fe4:	017d7840 	.word	0x017d7840

08005fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fec:	4b03      	ldr	r3, [pc, #12]	; (8005ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fee:	681b      	ldr	r3, [r3, #0]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000020 	.word	0x20000020

08006000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006004:	f7ff fff0 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b05      	ldr	r3, [pc, #20]	; (8006020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0a9b      	lsrs	r3, r3, #10
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4903      	ldr	r1, [pc, #12]	; (8006024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40023800 	.word	0x40023800
 8006024:	0800bdd0 	.word	0x0800bdd0

08006028 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800604c:	2b00      	cmp	r3, #0
 800604e:	d038      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006050:	4b68      	ldr	r3, [pc, #416]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006056:	f7fc fab3 	bl	80025c0 <HAL_GetTick>
 800605a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800605e:	f7fc faaf 	bl	80025c0 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e0bd      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006070:	4b61      	ldr	r3, [pc, #388]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f0      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	071b      	lsls	r3, r3, #28
 800608e:	495a      	ldr	r1, [pc, #360]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006096:	4b57      	ldr	r3, [pc, #348]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006098:	2201      	movs	r2, #1
 800609a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800609c:	f7fc fa90 	bl	80025c0 <HAL_GetTick>
 80060a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060a4:	f7fc fa8c 	bl	80025c0 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e09a      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060b6:	4b50      	ldr	r3, [pc, #320]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8083 	beq.w	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	4b48      	ldr	r3, [pc, #288]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	4a47      	ldr	r2, [pc, #284]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060de:	6413      	str	r3, [r2, #64]	; 0x40
 80060e0:	4b45      	ldr	r3, [pc, #276]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060ec:	4b43      	ldr	r3, [pc, #268]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a42      	ldr	r2, [pc, #264]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060f8:	f7fc fa62 	bl	80025c0 <HAL_GetTick>
 80060fc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006100:	f7fc fa5e 	bl	80025c0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e06c      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006112:	4b3a      	ldr	r3, [pc, #232]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800611e:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006126:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d02f      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	429a      	cmp	r2, r3
 800613a:	d028      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800613c:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006144:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006146:	4b2e      	ldr	r3, [pc, #184]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800614c:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006152:	4a29      	ldr	r2, [pc, #164]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006158:	4b27      	ldr	r3, [pc, #156]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b01      	cmp	r3, #1
 8006162:	d114      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006164:	f7fc fa2c 	bl	80025c0 <HAL_GetTick>
 8006168:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800616a:	e00a      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616c:	f7fc fa28 	bl	80025c0 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	f241 3288 	movw	r2, #5000	; 0x1388
 800617a:	4293      	cmp	r3, r2
 800617c:	d901      	bls.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e034      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0ee      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800619a:	d10d      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800619c:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b0:	4911      	ldr	r1, [pc, #68]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	608b      	str	r3, [r1, #8]
 80061b6:	e005      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80061b8:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4a0e      	ldr	r2, [pc, #56]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061c2:	6093      	str	r3, [r2, #8]
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d0:	4909      	ldr	r1, [pc, #36]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	7d1a      	ldrb	r2, [r3, #20]
 80061e6:	4b07      	ldr	r3, [pc, #28]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80061e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	42470068 	.word	0x42470068
 80061f8:	40023800 	.word	0x40023800
 80061fc:	40007000 	.word	0x40007000
 8006200:	42470e40 	.word	0x42470e40
 8006204:	424711e0 	.word	0x424711e0

08006208 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e083      	b.n	8006322 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	7f5b      	ldrb	r3, [r3, #29]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fc f82e 	bl	800228c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	22ca      	movs	r2, #202	; 0xca
 800623c:	625a      	str	r2, [r3, #36]	; 0x24
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2253      	movs	r2, #83	; 0x53
 8006244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f897 	bl	800637a <RTC_EnterInitMode>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	22ff      	movs	r2, #255	; 0xff
 8006258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2204      	movs	r2, #4
 800625e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e05e      	b.n	8006322 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6812      	ldr	r2, [r2, #0]
 800626e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006276:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6899      	ldr	r1, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68d2      	ldr	r2, [r2, #12]
 800629e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6919      	ldr	r1, [r3, #16]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	041a      	lsls	r2, r3, #16
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10e      	bne.n	80062f0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f829 	bl	800632a <HAL_RTC_WaitForSynchro>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	22ff      	movs	r2, #255	; 0xff
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2204      	movs	r2, #4
 80062ea:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e018      	b.n	8006322 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	22ff      	movs	r2, #255	; 0xff
 8006318:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006320:	2300      	movs	r3, #0
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006344:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006346:	f7fc f93b 	bl	80025c0 <HAL_GetTick>
 800634a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800634c:	e009      	b.n	8006362 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800634e:	f7fc f937 	bl	80025c0 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800635c:	d901      	bls.n	8006362 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e007      	b.n	8006372 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0ee      	beq.n	800634e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d119      	bne.n	80063c8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f04f 32ff 	mov.w	r2, #4294967295
 800639c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800639e:	f7fc f90f 	bl	80025c0 <HAL_GetTick>
 80063a2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80063a4:	e009      	b.n	80063ba <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063a6:	f7fc f90b 	bl	80025c0 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063b4:	d901      	bls.n	80063ba <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e007      	b.n	80063ca <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0ee      	beq.n	80063a6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063d2:	b084      	sub	sp, #16
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	f107 001c 	add.w	r0, r7, #28
 80063e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d122      	bne.n	8006430 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d105      	bne.n	8006424 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f001 fac5 	bl	80079b4 <USB_CoreReset>
 800642a:	4603      	mov	r3, r0
 800642c:	73fb      	strb	r3, [r7, #15]
 800642e:	e01a      	b.n	8006466 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fab9 	bl	80079b4 <USB_CoreReset>
 8006442:	4603      	mov	r3, r0
 8006444:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d106      	bne.n	800645a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
 8006458:	e005      	b.n	8006466 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	2b01      	cmp	r3, #1
 800646a:	d10b      	bne.n	8006484 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f043 0206 	orr.w	r2, r3, #6
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f043 0220 	orr.w	r2, r3, #32
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006484:	7bfb      	ldrb	r3, [r7, #15]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006490:	b004      	add	sp, #16
 8006492:	4770      	bx	lr

08006494 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	4613      	mov	r3, r2
 80064a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d165      	bne.n	8006574 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4a41      	ldr	r2, [pc, #260]	; (80065b0 <USB_SetTurnaroundTime+0x11c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d906      	bls.n	80064be <USB_SetTurnaroundTime+0x2a>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4a40      	ldr	r2, [pc, #256]	; (80065b4 <USB_SetTurnaroundTime+0x120>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d202      	bcs.n	80064be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064b8:	230f      	movs	r3, #15
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e062      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4a3c      	ldr	r2, [pc, #240]	; (80065b4 <USB_SetTurnaroundTime+0x120>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d306      	bcc.n	80064d4 <USB_SetTurnaroundTime+0x40>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	4a3b      	ldr	r2, [pc, #236]	; (80065b8 <USB_SetTurnaroundTime+0x124>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d202      	bcs.n	80064d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064ce:	230e      	movs	r3, #14
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	e057      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4a38      	ldr	r2, [pc, #224]	; (80065b8 <USB_SetTurnaroundTime+0x124>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d306      	bcc.n	80064ea <USB_SetTurnaroundTime+0x56>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4a37      	ldr	r2, [pc, #220]	; (80065bc <USB_SetTurnaroundTime+0x128>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d202      	bcs.n	80064ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80064e4:	230d      	movs	r3, #13
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e04c      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4a33      	ldr	r2, [pc, #204]	; (80065bc <USB_SetTurnaroundTime+0x128>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d306      	bcc.n	8006500 <USB_SetTurnaroundTime+0x6c>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	4a32      	ldr	r2, [pc, #200]	; (80065c0 <USB_SetTurnaroundTime+0x12c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d802      	bhi.n	8006500 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80064fa:	230c      	movs	r3, #12
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e041      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4a2f      	ldr	r2, [pc, #188]	; (80065c0 <USB_SetTurnaroundTime+0x12c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d906      	bls.n	8006516 <USB_SetTurnaroundTime+0x82>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4a2e      	ldr	r2, [pc, #184]	; (80065c4 <USB_SetTurnaroundTime+0x130>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d802      	bhi.n	8006516 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006510:	230b      	movs	r3, #11
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e036      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4a2a      	ldr	r2, [pc, #168]	; (80065c4 <USB_SetTurnaroundTime+0x130>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d906      	bls.n	800652c <USB_SetTurnaroundTime+0x98>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4a29      	ldr	r2, [pc, #164]	; (80065c8 <USB_SetTurnaroundTime+0x134>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d802      	bhi.n	800652c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006526:	230a      	movs	r3, #10
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	e02b      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4a26      	ldr	r2, [pc, #152]	; (80065c8 <USB_SetTurnaroundTime+0x134>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d906      	bls.n	8006542 <USB_SetTurnaroundTime+0xae>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4a25      	ldr	r2, [pc, #148]	; (80065cc <USB_SetTurnaroundTime+0x138>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d202      	bcs.n	8006542 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800653c:	2309      	movs	r3, #9
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e020      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4a21      	ldr	r2, [pc, #132]	; (80065cc <USB_SetTurnaroundTime+0x138>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d306      	bcc.n	8006558 <USB_SetTurnaroundTime+0xc4>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4a20      	ldr	r2, [pc, #128]	; (80065d0 <USB_SetTurnaroundTime+0x13c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d802      	bhi.n	8006558 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006552:	2308      	movs	r3, #8
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	e015      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <USB_SetTurnaroundTime+0x13c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d906      	bls.n	800656e <USB_SetTurnaroundTime+0xda>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <USB_SetTurnaroundTime+0x140>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d202      	bcs.n	800656e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006568:	2307      	movs	r3, #7
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e00a      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800656e:	2306      	movs	r3, #6
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	e007      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800657a:	2309      	movs	r3, #9
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	e001      	b.n	8006584 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006580:	2309      	movs	r3, #9
 8006582:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	029b      	lsls	r3, r3, #10
 8006598:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800659c:	431a      	orrs	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	00d8acbf 	.word	0x00d8acbf
 80065b4:	00e4e1c0 	.word	0x00e4e1c0
 80065b8:	00f42400 	.word	0x00f42400
 80065bc:	01067380 	.word	0x01067380
 80065c0:	011a499f 	.word	0x011a499f
 80065c4:	01312cff 	.word	0x01312cff
 80065c8:	014ca43f 	.word	0x014ca43f
 80065cc:	016e3600 	.word	0x016e3600
 80065d0:	01a6ab1f 	.word	0x01a6ab1f
 80065d4:	01e84800 	.word	0x01e84800

080065d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f043 0201 	orr.w	r2, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d106      	bne.n	8006648 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60da      	str	r2, [r3, #12]
 8006646:	e00b      	b.n	8006660 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60da      	str	r2, [r3, #12]
 800665a:	e001      	b.n	8006660 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e003      	b.n	8006668 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006660:	2032      	movs	r0, #50	; 0x32
 8006662:	f7fb ffb9 	bl	80025d8 <HAL_Delay>

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006670:	b084      	sub	sp, #16
 8006672:	b580      	push	{r7, lr}
 8006674:	b086      	sub	sp, #24
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800667e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800668a:	2300      	movs	r3, #0
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	e009      	b.n	80066a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3340      	adds	r3, #64	; 0x40
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	2200      	movs	r2, #0
 800669c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	3301      	adds	r3, #1
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b0e      	cmp	r3, #14
 80066a8:	d9f2      	bls.n	8006690 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11c      	bne.n	80066ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066be:	f043 0302 	orr.w	r3, r3, #2
 80066c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
 80066e8:	e00b      	b.n	8006702 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006708:	461a      	mov	r2, r3
 800670a:	2300      	movs	r3, #0
 800670c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006714:	4619      	mov	r1, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671c:	461a      	mov	r2, r3
 800671e:	680b      	ldr	r3, [r1, #0]
 8006720:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10c      	bne.n	8006742 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	2b00      	cmp	r3, #0
 800672c:	d104      	bne.n	8006738 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800672e:	2100      	movs	r1, #0
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f949 	bl	80069c8 <USB_SetDevSpeed>
 8006736:	e008      	b.n	800674a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006738:	2101      	movs	r1, #1
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f944 	bl	80069c8 <USB_SetDevSpeed>
 8006740:	e003      	b.n	800674a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006742:	2103      	movs	r1, #3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f93f 	bl	80069c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800674a:	2110      	movs	r1, #16
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f8f3 	bl	8006938 <USB_FlushTxFifo>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f911 	bl	8006984 <USB_FlushRxFifo>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006772:	461a      	mov	r2, r3
 8006774:	2300      	movs	r3, #0
 8006776:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	461a      	mov	r2, r3
 8006780:	2300      	movs	r3, #0
 8006782:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678a:	461a      	mov	r2, r3
 800678c:	2300      	movs	r3, #0
 800678e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	e043      	b.n	800681e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ac:	d118      	bne.n	80067e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c0:	461a      	mov	r2, r3
 80067c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	e013      	b.n	80067f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d6:	461a      	mov	r2, r3
 80067d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	e008      	b.n	80067f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ec:	461a      	mov	r2, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fe:	461a      	mov	r2, r3
 8006800:	2300      	movs	r3, #0
 8006802:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006810:	461a      	mov	r2, r3
 8006812:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006816:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	3301      	adds	r3, #1
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	429a      	cmp	r2, r3
 8006824:	d3b7      	bcc.n	8006796 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	e043      	b.n	80068b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800683e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006842:	d118      	bne.n	8006876 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006856:	461a      	mov	r2, r3
 8006858:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e013      	b.n	8006888 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	461a      	mov	r2, r3
 800686e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	e008      	b.n	8006888 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006882:	461a      	mov	r2, r3
 8006884:	2300      	movs	r3, #0
 8006886:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006894:	461a      	mov	r2, r3
 8006896:	2300      	movs	r3, #0
 8006898:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a6:	461a      	mov	r2, r3
 80068a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	3301      	adds	r3, #1
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d3b7      	bcc.n	800682c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d105      	bne.n	80068f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f043 0210 	orr.w	r2, r3, #16
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <USB_DevInit+0x2c4>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f043 0208 	orr.w	r2, r3, #8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800690e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d107      	bne.n	8006924 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800691c:	f043 0304 	orr.w	r3, r3, #4
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006924:	7dfb      	ldrb	r3, [r7, #23]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006930:	b004      	add	sp, #16
 8006932:	4770      	bx	lr
 8006934:	803c3800 	.word	0x803c3800

08006938 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	019b      	lsls	r3, r3, #6
 800694a:	f043 0220 	orr.w	r2, r3, #32
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3301      	adds	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a09      	ldr	r2, [pc, #36]	; (8006980 <USB_FlushTxFifo+0x48>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d901      	bls.n	8006964 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e006      	b.n	8006972 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b20      	cmp	r3, #32
 800696e:	d0f0      	beq.n	8006952 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	00030d40 	.word	0x00030d40

08006984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2210      	movs	r2, #16
 8006994:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3301      	adds	r3, #1
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <USB_FlushRxFifo+0x40>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d901      	bls.n	80069a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e006      	b.n	80069b6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	2b10      	cmp	r3, #16
 80069b2:	d0f0      	beq.n	8006996 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	00030d40 	.word	0x00030d40

080069c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e8:	4313      	orrs	r3, r2
 80069ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0306 	and.w	r3, r3, #6
 8006a12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]
 8006a1e:	e00a      	b.n	8006a36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d002      	beq.n	8006a2c <USB_GetDevSpeed+0x32>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b06      	cmp	r3, #6
 8006a2a:	d102      	bne.n	8006a32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	75fb      	strb	r3, [r7, #23]
 8006a30:	e001      	b.n	8006a36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a32:	230f      	movs	r3, #15
 8006a34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d13a      	bne.n	8006ad6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a66:	69da      	ldr	r2, [r3, #28]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	2101      	movs	r1, #1
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	68f9      	ldr	r1, [r7, #12]
 8006a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d155      	bne.n	8006b44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	78db      	ldrb	r3, [r3, #3]
 8006ab2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ab4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	059b      	lsls	r3, r3, #22
 8006aba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006abc:	4313      	orrs	r3, r2
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	e036      	b.n	8006b44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006adc:	69da      	ldr	r2, [r3, #28]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	041b      	lsls	r3, r3, #16
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006af4:	4313      	orrs	r3, r2
 8006af6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d11a      	bne.n	8006b44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	78db      	ldrb	r3, [r3, #3]
 8006b28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d161      	bne.n	8006c34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b86:	d11f      	bne.n	8006bc8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ba6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	2101      	movs	r1, #1
 8006bda:	fa01 f303 	lsl.w	r3, r1, r3
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	43db      	mvns	r3, r3
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be8:	4013      	ands	r3, r2
 8006bea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	43db      	mvns	r3, r3
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	0159      	lsls	r1, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	440b      	add	r3, r1
 8006c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	4b35      	ldr	r3, [pc, #212]	; (8006d04 <USB_DeactivateEndpoint+0x1b0>)
 8006c2e:	4013      	ands	r3, r2
 8006c30:	600b      	str	r3, [r1, #0]
 8006c32:	e060      	b.n	8006cf6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4a:	d11f      	bne.n	8006c8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cac:	4013      	ands	r3, r2
 8006cae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	68f9      	ldr	r1, [r7, #12]
 8006ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	0159      	lsls	r1, r3, #5
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	440b      	add	r3, r1
 8006cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <USB_DeactivateEndpoint+0x1b4>)
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	ec337800 	.word	0xec337800
 8006d08:	eff37800 	.word	0xeff37800

08006d0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08a      	sub	sp, #40	; 0x28
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	4613      	mov	r3, r2
 8006d18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	785b      	ldrb	r3, [r3, #1]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	f040 815c 	bne.w	8006fe6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d132      	bne.n	8006d9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	0151      	lsls	r1, r2, #5
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	440a      	add	r2, r1
 8006d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d94:	0cdb      	lsrs	r3, r3, #19
 8006d96:	04db      	lsls	r3, r3, #19
 8006d98:	6113      	str	r3, [r2, #16]
 8006d9a:	e074      	b.n	8006e86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db6:	0cdb      	lsrs	r3, r3, #19
 8006db8:	04db      	lsls	r3, r3, #19
 8006dba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dec:	691a      	ldr	r2, [r3, #16]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6959      	ldr	r1, [r3, #20]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	440b      	add	r3, r1
 8006df8:	1e59      	subs	r1, r3, #1
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e02:	04d9      	lsls	r1, r3, #19
 8006e04:	4b9d      	ldr	r3, [pc, #628]	; (800707c <USB_EPStartXfer+0x370>)
 8006e06:	400b      	ands	r3, r1
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	0148      	lsls	r0, r1, #5
 8006e0c:	69f9      	ldr	r1, [r7, #28]
 8006e0e:	4401      	add	r1, r0
 8006e10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e14:	4313      	orrs	r3, r2
 8006e16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e2e:	69b9      	ldr	r1, [r7, #24]
 8006e30:	0148      	lsls	r0, r1, #5
 8006e32:	69f9      	ldr	r1, [r7, #28]
 8006e34:	4401      	add	r1, r0
 8006e36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	78db      	ldrb	r3, [r3, #3]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d11f      	bne.n	8006e86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	69fa      	ldr	r2, [r7, #28]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d14b      	bne.n	8006f24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d009      	beq.n	8006ea8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	78db      	ldrb	r3, [r3, #3]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d128      	bne.n	8006f02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d110      	bne.n	8006ee2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	e00f      	b.n	8006f02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	0151      	lsls	r1, r2, #5
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	440a      	add	r2, r1
 8006ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	0151      	lsls	r1, r2, #5
 8006f14:	69fa      	ldr	r2, [r7, #28]
 8006f16:	440a      	add	r2, r1
 8006f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	e12f      	b.n	8007184 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	78db      	ldrb	r3, [r3, #3]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d015      	beq.n	8006f78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8117 	beq.w	8007184 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	2101      	movs	r1, #1
 8006f68:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6c:	69f9      	ldr	r1, [r7, #28]
 8006f6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f72:	4313      	orrs	r3, r2
 8006f74:	634b      	str	r3, [r1, #52]	; 0x34
 8006f76:	e105      	b.n	8007184 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d110      	bne.n	8006faa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	0151      	lsls	r1, r2, #5
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	440a      	add	r2, r1
 8006f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	e00f      	b.n	8006fca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	68d9      	ldr	r1, [r3, #12]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	b298      	uxth	r0, r3
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	4603      	mov	r3, r0
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fa2b 	bl	800743a <USB_WritePacket>
 8006fe4:	e0ce      	b.n	8007184 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007000:	0cdb      	lsrs	r3, r3, #19
 8007002:	04db      	lsls	r3, r3, #19
 8007004:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	440a      	add	r2, r1
 800701c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007020:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007024:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007028:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d126      	bne.n	8007080 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	0148      	lsls	r0, r1, #5
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	4401      	add	r1, r0
 8007050:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007054:	4313      	orrs	r3, r2
 8007056:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	440a      	add	r2, r1
 800706e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007076:	6113      	str	r3, [r2, #16]
 8007078:	e036      	b.n	80070e8 <USB_EPStartXfer+0x3dc>
 800707a:	bf00      	nop
 800707c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	695a      	ldr	r2, [r3, #20]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	4413      	add	r3, r2
 800708a:	1e5a      	subs	r2, r3, #1
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	fbb2 f3f3 	udiv	r3, r2, r3
 8007094:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	8afb      	ldrh	r3, [r7, #22]
 80070a6:	04d9      	lsls	r1, r3, #19
 80070a8:	4b39      	ldr	r3, [pc, #228]	; (8007190 <USB_EPStartXfer+0x484>)
 80070aa:	400b      	ands	r3, r1
 80070ac:	69b9      	ldr	r1, [r7, #24]
 80070ae:	0148      	lsls	r0, r1, #5
 80070b0:	69f9      	ldr	r1, [r7, #28]
 80070b2:	4401      	add	r1, r0
 80070b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070b8:	4313      	orrs	r3, r2
 80070ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c8:	691a      	ldr	r2, [r3, #16]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	8af9      	ldrh	r1, [r7, #22]
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d8:	69b9      	ldr	r1, [r7, #24]
 80070da:	0148      	lsls	r0, r1, #5
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	4401      	add	r1, r0
 80070e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070e4:	4313      	orrs	r3, r2
 80070e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d10d      	bne.n	800710a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	68d9      	ldr	r1, [r3, #12]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007106:	460a      	mov	r2, r1
 8007108:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	78db      	ldrb	r3, [r3, #3]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d128      	bne.n	8007164 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d110      	bne.n	8007144 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	440a      	add	r2, r1
 8007138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e00f      	b.n	8007164 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007162:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800717e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3720      	adds	r7, #32
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	1ff80000 	.word	0x1ff80000

08007194 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	f040 80cd 	bne.w	8007350 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d132      	bne.n	8007224 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721c:	0cdb      	lsrs	r3, r3, #19
 800721e:	04db      	lsls	r3, r3, #19
 8007220:	6113      	str	r3, [r2, #16]
 8007222:	e04e      	b.n	80072c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723e:	0cdb      	lsrs	r3, r3, #19
 8007240:	04db      	lsls	r3, r3, #19
 8007242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	440a      	add	r2, r1
 800725a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007262:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007266:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	695a      	ldr	r2, [r3, #20]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	429a      	cmp	r2, r3
 8007272:	d903      	bls.n	800727c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b2:	6939      	ldr	r1, [r7, #16]
 80072b4:	0148      	lsls	r0, r1, #5
 80072b6:	6979      	ldr	r1, [r7, #20]
 80072b8:	4401      	add	r1, r0
 80072ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072be:	4313      	orrs	r3, r2
 80072c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d11e      	bne.n	8007306 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d009      	beq.n	80072e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072dc:	461a      	mov	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	e092      	b.n	800742c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	0151      	lsls	r1, r2, #5
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	440a      	add	r2, r1
 800731c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007320:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007324:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d07e      	beq.n	800742c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	2101      	movs	r1, #1
 8007340:	fa01 f303 	lsl.w	r3, r1, r3
 8007344:	6979      	ldr	r1, [r7, #20]
 8007346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800734a:	4313      	orrs	r3, r2
 800734c:	634b      	str	r3, [r1, #52]	; 0x34
 800734e:	e06d      	b.n	800742c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736a:	0cdb      	lsrs	r3, r3, #19
 800736c:	04db      	lsls	r3, r3, #19
 800736e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	0151      	lsls	r1, r2, #5
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	440a      	add	r2, r1
 8007386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800738e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007392:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	0151      	lsls	r1, r2, #5
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	440a      	add	r2, r1
 80073ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d0:	691a      	ldr	r2, [r3, #16]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073da:	6939      	ldr	r1, [r7, #16]
 80073dc:	0148      	lsls	r0, r1, #5
 80073de:	6979      	ldr	r1, [r7, #20]
 80073e0:	4401      	add	r1, r0
 80073e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073e6:	4313      	orrs	r3, r2
 80073e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d10d      	bne.n	800740c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d009      	beq.n	800740c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	68d9      	ldr	r1, [r3, #12]
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007408:	460a      	mov	r2, r1
 800740a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	0151      	lsls	r1, r2, #5
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	440a      	add	r2, r1
 8007422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007426:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800742a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800743a:	b480      	push	{r7}
 800743c:	b089      	sub	sp, #36	; 0x24
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	4611      	mov	r1, r2
 8007446:	461a      	mov	r2, r3
 8007448:	460b      	mov	r3, r1
 800744a:	71fb      	strb	r3, [r7, #7]
 800744c:	4613      	mov	r3, r2
 800744e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007458:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800745c:	2b00      	cmp	r3, #0
 800745e:	d11a      	bne.n	8007496 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007460:	88bb      	ldrh	r3, [r7, #4]
 8007462:	3303      	adds	r3, #3
 8007464:	089b      	lsrs	r3, r3, #2
 8007466:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007468:	2300      	movs	r3, #0
 800746a:	61bb      	str	r3, [r7, #24]
 800746c:	e00f      	b.n	800748e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	031a      	lsls	r2, r3, #12
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	4413      	add	r3, r2
 8007476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747a:	461a      	mov	r2, r3
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	3304      	adds	r3, #4
 8007486:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	3301      	adds	r3, #1
 800748c:	61bb      	str	r3, [r7, #24]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	429a      	cmp	r2, r3
 8007494:	d3eb      	bcc.n	800746e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3724      	adds	r7, #36	; 0x24
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b089      	sub	sp, #36	; 0x24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	4613      	mov	r3, r2
 80074b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	3303      	adds	r3, #3
 80074be:	089b      	lsrs	r3, r3, #2
 80074c0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80074c2:	2300      	movs	r3, #0
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	e00b      	b.n	80074e0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3304      	adds	r3, #4
 80074d8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	3301      	adds	r3, #1
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d3ef      	bcc.n	80074c8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80074e8:	69fb      	ldr	r3, [r7, #28]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3724      	adds	r7, #36	; 0x24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d12c      	bne.n	800756c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	db12      	blt.n	800754a <USB_EPSetStall+0x54>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00f      	beq.n	800754a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	0151      	lsls	r1, r2, #5
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	440a      	add	r2, r1
 8007540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007544:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007548:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	0151      	lsls	r1, r2, #5
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	440a      	add	r2, r1
 8007560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	e02b      	b.n	80075c4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	db12      	blt.n	80075a4 <USB_EPSetStall+0xae>
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00f      	beq.n	80075a4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	440a      	add	r2, r1
 800759a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800759e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075a2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	0151      	lsls	r1, r2, #5
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	440a      	add	r2, r1
 80075ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b085      	sub	sp, #20
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d128      	bne.n	8007640 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	0151      	lsls	r1, r2, #5
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	440a      	add	r2, r1
 8007604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007608:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800760c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	78db      	ldrb	r3, [r3, #3]
 8007612:	2b03      	cmp	r3, #3
 8007614:	d003      	beq.n	800761e <USB_EPClearStall+0x4c>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	78db      	ldrb	r3, [r3, #3]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d138      	bne.n	8007690 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	0151      	lsls	r1, r2, #5
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	440a      	add	r2, r1
 8007634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	e027      	b.n	8007690 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	0151      	lsls	r1, r2, #5
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	440a      	add	r2, r1
 8007656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800765a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800765e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	78db      	ldrb	r3, [r3, #3]
 8007664:	2b03      	cmp	r3, #3
 8007666:	d003      	beq.n	8007670 <USB_EPClearStall+0x9e>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	78db      	ldrb	r3, [r3, #3]
 800766c:	2b02      	cmp	r3, #2
 800766e:	d10f      	bne.n	8007690 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	440a      	add	r2, r1
 8007686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800768e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	460b      	mov	r3, r1
 80076a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076c0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	78fb      	ldrb	r3, [r7, #3]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076d8:	4313      	orrs	r3, r2
 80076da:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007704:	f023 0303 	bic.w	r3, r3, #3
 8007708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007718:	f023 0302 	bic.w	r3, r3, #2
 800771c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800775a:	f043 0302 	orr.w	r3, r3, #2
 800775e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4013      	ands	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007786:	68fb      	ldr	r3, [r7, #12]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4013      	ands	r3, r2
 80077b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	0c1b      	lsrs	r3, r3, #16
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	4013      	ands	r3, r2
 80077ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	b29b      	uxth	r3, r3
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	4013      	ands	r3, r2
 8007828:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800782a:	68bb      	ldr	r3, [r7, #8]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	f003 030f 	and.w	r3, r3, #15
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	fa22 f303 	lsr.w	r3, r2, r3
 8007868:	01db      	lsls	r3, r3, #7
 800786a:	b2db      	uxtb	r3, r3
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	4313      	orrs	r3, r2
 8007870:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4013      	ands	r3, r2
 8007884:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007886:	68bb      	ldr	r3, [r7, #8]
}
 8007888:	4618      	mov	r0, r3
 800788a:	371c      	adds	r7, #28
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	f003 0301 	and.w	r3, r3, #1
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078ce:	f023 0307 	bic.w	r3, r3, #7
 80078d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	460b      	mov	r3, r1
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	333c      	adds	r3, #60	; 0x3c
 800790e:	3304      	adds	r3, #4
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	4a26      	ldr	r2, [pc, #152]	; (80079b0 <USB_EP0_OutStart+0xb8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d90a      	bls.n	8007932 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800792c:	d101      	bne.n	8007932 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	e037      	b.n	80079a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	461a      	mov	r2, r3
 800793a:	2300      	movs	r3, #0
 800793c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800794c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007960:	f043 0318 	orr.w	r3, r3, #24
 8007964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007974:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007978:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10f      	bne.n	80079a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007986:	461a      	mov	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800799a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800799e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	4f54300a 	.word	0x4f54300a

080079b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3301      	adds	r3, #1
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4a13      	ldr	r2, [pc, #76]	; (8007a18 <USB_CoreReset+0x64>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d901      	bls.n	80079d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e01b      	b.n	8007a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	daf2      	bge.n	80079c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f043 0201 	orr.w	r2, r3, #1
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3301      	adds	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a09      	ldr	r2, [pc, #36]	; (8007a18 <USB_CoreReset+0x64>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d901      	bls.n	80079fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e006      	b.n	8007a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d0f0      	beq.n	80079ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	00030d40 	.word	0x00030d40

08007a1c <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 8007a28:	2044      	movs	r0, #68	; 0x44
 8007a2a:	f001 fead 	bl	8009788 <USBD_static_malloc>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e016      	b.n	8007a72 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 8007a4c:	2340      	movs	r3, #64	; 0x40
 8007a4e:	2202      	movs	r2, #2
 8007a50:	2181      	movs	r1, #129	; 0x81
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 fd75 	bl	8009542 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 8007a58:	2340      	movs	r3, #64	; 0x40
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fd6f 	bl	8009542 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8007a64:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 8007a66:	2340      	movs	r3, #64	; 0x40
 8007a68:	2101      	movs	r1, #1
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f001 fe58 	bl	8009720 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007a70:	2300      	movs	r3, #0
  }
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	460b      	mov	r3, r1
 8007a84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 8007a86:	2181      	movs	r1, #129	; 0x81
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fd80 	bl	800958e <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 8007a8e:	2101      	movs	r1, #1
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fd7c 	bl	800958e <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d007      	beq.n	8007ac6 <USBD_Midi_Setup+0x26>
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d10b      	bne.n	8007ad2 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f937 	bl	8008d30 <USBD_CtlError>
      return USBD_FAIL;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e006      	b.n	8007ad4 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 f931 	bl	8008d30 <USBD_CtlError>
      return USBD_FAIL;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e000      	b.n	8007ad4 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2265      	movs	r2, #101	; 0x65
 8007ae8:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 8007aea:	4b03      	ldr	r3, [pc, #12]	; (8007af8 <USBD_Midi_GetCfgDesc+0x1c>)
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	20000064 	.word	0x20000064

08007afc <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b9e:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fddc 	bl	8009762 <USBD_LL_GetRxDataSize>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	e00c      	b.n	8007bd4 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	2104      	movs	r1, #4
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d3ed      	bcc.n	8007bba <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 8007bde:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 8007be0:	2340      	movs	r3, #64	; 0x40
 8007be2:	2101      	movs	r1, #1
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 fd9b 	bl	8009720 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	220a      	movs	r2, #10
 8007c00:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 8007c02:	4b03      	ldr	r3, [pc, #12]	; (8007c10 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	200000cc 	.word	0x200000cc

08007c14 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b086      	sub	sp, #24
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e01f      	b.n	8007c9a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	79fa      	ldrb	r2, [r7, #7]
 8007c8c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f001 fbf0 	bl	8009474 <USBD_LL_Init>
 8007c94:	4603      	mov	r3, r0
 8007c96:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e016      	b.n	8007ce8 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	f107 020e 	add.w	r2, r7, #14
 8007cda:	4610      	mov	r0, r2
 8007cdc:	4798      	blx	r3
 8007cde:	4602      	mov	r2, r0
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 fc07 	bl	800950c <USBD_LL_Start>
 8007cfe:	4603      	mov	r3, r0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d009      	beq.n	8007d4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	4611      	mov	r1, r2
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	4798      	blx	r3
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d007      	beq.n	8007d7c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	78fa      	ldrb	r2, [r7, #3]
 8007d76:	4611      	mov	r1, r2
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
  }

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 ff8f 	bl	8008cbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007dac:	461a      	mov	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007dba:	f003 031f 	and.w	r3, r3, #31
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d01a      	beq.n	8007df8 <USBD_LL_SetupStage+0x72>
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d822      	bhi.n	8007e0c <USBD_LL_SetupStage+0x86>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <USBD_LL_SetupStage+0x4a>
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d00a      	beq.n	8007de4 <USBD_LL_SetupStage+0x5e>
 8007dce:	e01d      	b.n	8007e0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fa61 	bl	80082a0 <USBD_StdDevReq>
 8007dde:	4603      	mov	r3, r0
 8007de0:	73fb      	strb	r3, [r7, #15]
      break;
 8007de2:	e020      	b.n	8007e26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fac5 	bl	800837c <USBD_StdItfReq>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]
      break;
 8007df6:	e016      	b.n	8007e26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fb04 	bl	800840e <USBD_StdEPReq>
 8007e06:	4603      	mov	r3, r0
 8007e08:	73fb      	strb	r3, [r7, #15]
      break;
 8007e0a:	e00c      	b.n	8007e26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fbd6 	bl	80095cc <USBD_LL_StallEP>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
      break;
 8007e24:	bf00      	nop
  }

  return ret;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e3e:	7afb      	ldrb	r3, [r7, #11]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d138      	bne.n	8007eb6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d14a      	bne.n	8007eec <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	689a      	ldr	r2, [r3, #8]
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d913      	bls.n	8007e8a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	1ad2      	subs	r2, r2, r3
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	bf28      	it	cs
 8007e7c:	4613      	movcs	r3, r2
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fff1 	bl	8008e6a <USBD_CtlContinueRx>
 8007e88:	e030      	b.n	8007eec <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d10b      	bne.n	8007eae <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 ffec 	bl	8008e8c <USBD_CtlSendStatus>
 8007eb4:	e01a      	b.n	8007eec <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d114      	bne.n	8007eec <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00e      	beq.n	8007eec <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	7afa      	ldrb	r2, [r7, #11]
 8007ed8:	4611      	mov	r1, r2
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	4798      	blx	r3
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	e000      	b.n	8007eee <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b086      	sub	sp, #24
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	60f8      	str	r0, [r7, #12]
 8007efe:	460b      	mov	r3, r1
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d16b      	bne.n	8007fe2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3314      	adds	r3, #20
 8007f0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d156      	bne.n	8007fc8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d914      	bls.n	8007f50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	689a      	ldr	r2, [r3, #8]
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	1ad2      	subs	r2, r2, r3
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 ff83 	bl	8008e48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f42:	2300      	movs	r3, #0
 8007f44:	2200      	movs	r2, #0
 8007f46:	2100      	movs	r1, #0
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f001 fbe9 	bl	8009720 <USBD_LL_PrepareReceive>
 8007f4e:	e03b      	b.n	8007fc8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d11c      	bne.n	8007f96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d316      	bcc.n	8007f96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d20f      	bcs.n	8007f96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f76:	2200      	movs	r2, #0
 8007f78:	2100      	movs	r1, #0
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 ff64 	bl	8008e48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f88:	2300      	movs	r3, #0
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f001 fbc6 	bl	8009720 <USBD_LL_PrepareReceive>
 8007f94:	e018      	b.n	8007fc8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d10b      	bne.n	8007fba <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d005      	beq.n	8007fba <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fba:	2180      	movs	r1, #128	; 0x80
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f001 fb05 	bl	80095cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 ff75 	bl	8008eb2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d122      	bne.n	8008018 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f7ff fe98 	bl	8007d08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007fe0:	e01a      	b.n	8008018 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d114      	bne.n	8008018 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00e      	beq.n	8008018 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	7afa      	ldrb	r2, [r7, #11]
 8008004:	4611      	mov	r1, r2
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	4798      	blx	r3
 800800a:	4603      	mov	r3, r0
 800800c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	e000      	b.n	800801a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008052:	2303      	movs	r3, #3
 8008054:	e02f      	b.n	80080b6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00f      	beq.n	8008080 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d009      	beq.n	8008080 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6852      	ldr	r2, [r2, #4]
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	4611      	mov	r1, r2
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008080:	2340      	movs	r3, #64	; 0x40
 8008082:	2200      	movs	r2, #0
 8008084:	2100      	movs	r1, #0
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fa5b 	bl	8009542 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2240      	movs	r2, #64	; 0x40
 8008098:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800809c:	2340      	movs	r3, #64	; 0x40
 800809e:	2200      	movs	r2, #0
 80080a0:	2180      	movs	r1, #128	; 0x80
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 fa4d 	bl	8009542 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2240      	movs	r2, #64	; 0x40
 80080b2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	78fa      	ldrb	r2, [r7, #3]
 80080ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2204      	movs	r2, #4
 80080f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800810a:	b480      	push	{r7}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b04      	cmp	r3, #4
 800811c:	d106      	bne.n	800812c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008124:	b2da      	uxtb	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800814c:	2303      	movs	r3, #3
 800814e:	e012      	b.n	8008176 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b03      	cmp	r3, #3
 800815a:	d10b      	bne.n	8008174 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	460b      	mov	r3, r1
 8008188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008194:	2303      	movs	r3, #3
 8008196:	e014      	b.n	80081c2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d10d      	bne.n	80081c0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	4611      	mov	r1, r2
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e014      	b.n	800820e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d10d      	bne.n	800820c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	78fa      	ldrb	r2, [r7, #3]
 8008206:	4611      	mov	r1, r2
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6852      	ldr	r2, [r2, #4]
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	4611      	mov	r1, r2
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
  }

  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	3301      	adds	r3, #1
 800827a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008282:	8a3b      	ldrh	r3, [r7, #16]
 8008284:	021b      	lsls	r3, r3, #8
 8008286:	b21a      	sxth	r2, r3
 8008288:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800828c:	4313      	orrs	r3, r2
 800828e:	b21b      	sxth	r3, r3
 8008290:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008292:	89fb      	ldrh	r3, [r7, #14]
}
 8008294:	4618      	mov	r0, r3
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082b6:	2b40      	cmp	r3, #64	; 0x40
 80082b8:	d005      	beq.n	80082c6 <USBD_StdDevReq+0x26>
 80082ba:	2b40      	cmp	r3, #64	; 0x40
 80082bc:	d853      	bhi.n	8008366 <USBD_StdDevReq+0xc6>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00b      	beq.n	80082da <USBD_StdDevReq+0x3a>
 80082c2:	2b20      	cmp	r3, #32
 80082c4:	d14f      	bne.n	8008366 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]
      break;
 80082d8:	e04a      	b.n	8008370 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	785b      	ldrb	r3, [r3, #1]
 80082de:	2b09      	cmp	r3, #9
 80082e0:	d83b      	bhi.n	800835a <USBD_StdDevReq+0xba>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <USBD_StdDevReq+0x48>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	0800833d 	.word	0x0800833d
 80082ec:	08008351 	.word	0x08008351
 80082f0:	0800835b 	.word	0x0800835b
 80082f4:	08008347 	.word	0x08008347
 80082f8:	0800835b 	.word	0x0800835b
 80082fc:	0800831b 	.word	0x0800831b
 8008300:	08008311 	.word	0x08008311
 8008304:	0800835b 	.word	0x0800835b
 8008308:	08008333 	.word	0x08008333
 800830c:	08008325 	.word	0x08008325
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f9de 	bl	80086d4 <USBD_GetDescriptor>
          break;
 8008318:	e024      	b.n	8008364 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fb43 	bl	80089a8 <USBD_SetAddress>
          break;
 8008322:	e01f      	b.n	8008364 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fb82 	bl	8008a30 <USBD_SetConfig>
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]
          break;
 8008330:	e018      	b.n	8008364 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fc21 	bl	8008b7c <USBD_GetConfig>
          break;
 800833a:	e013      	b.n	8008364 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fc52 	bl	8008be8 <USBD_GetStatus>
          break;
 8008344:	e00e      	b.n	8008364 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc81 	bl	8008c50 <USBD_SetFeature>
          break;
 800834e:	e009      	b.n	8008364 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fc90 	bl	8008c78 <USBD_ClrFeature>
          break;
 8008358:	e004      	b.n	8008364 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fce7 	bl	8008d30 <USBD_CtlError>
          break;
 8008362:	bf00      	nop
      }
      break;
 8008364:	e004      	b.n	8008370 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fce1 	bl	8008d30 <USBD_CtlError>
      break;
 800836e:	bf00      	nop
  }

  return ret;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop

0800837c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008392:	2b40      	cmp	r3, #64	; 0x40
 8008394:	d005      	beq.n	80083a2 <USBD_StdItfReq+0x26>
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	d82f      	bhi.n	80083fa <USBD_StdItfReq+0x7e>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <USBD_StdItfReq+0x26>
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d12b      	bne.n	80083fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	3b01      	subs	r3, #1
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d81d      	bhi.n	80083ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	889b      	ldrh	r3, [r3, #4]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d813      	bhi.n	80083e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	88db      	ldrh	r3, [r3, #6]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d110      	bne.n	80083f6 <USBD_StdItfReq+0x7a>
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10d      	bne.n	80083f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fd56 	bl	8008e8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083e0:	e009      	b.n	80083f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fca3 	bl	8008d30 <USBD_CtlError>
          break;
 80083ea:	e004      	b.n	80083f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fc9e 	bl	8008d30 <USBD_CtlError>
          break;
 80083f4:	e000      	b.n	80083f8 <USBD_StdItfReq+0x7c>
          break;
 80083f6:	bf00      	nop
      }
      break;
 80083f8:	e004      	b.n	8008404 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fc97 	bl	8008d30 <USBD_CtlError>
      break;
 8008402:	bf00      	nop
  }

  return ret;
 8008404:	7bfb      	ldrb	r3, [r7, #15]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	889b      	ldrh	r3, [r3, #4]
 8008420:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800842a:	2b40      	cmp	r3, #64	; 0x40
 800842c:	d007      	beq.n	800843e <USBD_StdEPReq+0x30>
 800842e:	2b40      	cmp	r3, #64	; 0x40
 8008430:	f200 8145 	bhi.w	80086be <USBD_StdEPReq+0x2b0>
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00c      	beq.n	8008452 <USBD_StdEPReq+0x44>
 8008438:	2b20      	cmp	r3, #32
 800843a:	f040 8140 	bne.w	80086be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
      break;
 8008450:	e13a      	b.n	80086c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	2b03      	cmp	r3, #3
 8008458:	d007      	beq.n	800846a <USBD_StdEPReq+0x5c>
 800845a:	2b03      	cmp	r3, #3
 800845c:	f300 8129 	bgt.w	80086b2 <USBD_StdEPReq+0x2a4>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d07f      	beq.n	8008564 <USBD_StdEPReq+0x156>
 8008464:	2b01      	cmp	r3, #1
 8008466:	d03c      	beq.n	80084e2 <USBD_StdEPReq+0xd4>
 8008468:	e123      	b.n	80086b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d002      	beq.n	800847c <USBD_StdEPReq+0x6e>
 8008476:	2b03      	cmp	r3, #3
 8008478:	d016      	beq.n	80084a8 <USBD_StdEPReq+0x9a>
 800847a:	e02c      	b.n	80084d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00d      	beq.n	800849e <USBD_StdEPReq+0x90>
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	2b80      	cmp	r3, #128	; 0x80
 8008486:	d00a      	beq.n	800849e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 f89d 	bl	80095cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008492:	2180      	movs	r1, #128	; 0x80
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 f899 	bl	80095cc <USBD_LL_StallEP>
 800849a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800849c:	e020      	b.n	80084e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fc45 	bl	8008d30 <USBD_CtlError>
              break;
 80084a6:	e01b      	b.n	80084e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	885b      	ldrh	r3, [r3, #2]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10e      	bne.n	80084ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00b      	beq.n	80084ce <USBD_StdEPReq+0xc0>
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b80      	cmp	r3, #128	; 0x80
 80084ba:	d008      	beq.n	80084ce <USBD_StdEPReq+0xc0>
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	88db      	ldrh	r3, [r3, #6]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d104      	bne.n	80084ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 f87f 	bl	80095cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fcdc 	bl	8008e8c <USBD_CtlSendStatus>

              break;
 80084d4:	e004      	b.n	80084e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fc29 	bl	8008d30 <USBD_CtlError>
              break;
 80084de:	bf00      	nop
          }
          break;
 80084e0:	e0ec      	b.n	80086bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d002      	beq.n	80084f4 <USBD_StdEPReq+0xe6>
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d016      	beq.n	8008520 <USBD_StdEPReq+0x112>
 80084f2:	e030      	b.n	8008556 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00d      	beq.n	8008516 <USBD_StdEPReq+0x108>
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	2b80      	cmp	r3, #128	; 0x80
 80084fe:	d00a      	beq.n	8008516 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 f861 	bl	80095cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800850a:	2180      	movs	r1, #128	; 0x80
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 f85d 	bl	80095cc <USBD_LL_StallEP>
 8008512:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008514:	e025      	b.n	8008562 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fc09 	bl	8008d30 <USBD_CtlError>
              break;
 800851e:	e020      	b.n	8008562 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	885b      	ldrh	r3, [r3, #2]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d11b      	bne.n	8008560 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852e:	2b00      	cmp	r3, #0
 8008530:	d004      	beq.n	800853c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 f867 	bl	800960a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fca5 	bl	8008e8c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4798      	blx	r3
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008554:	e004      	b.n	8008560 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fbe9 	bl	8008d30 <USBD_CtlError>
              break;
 800855e:	e000      	b.n	8008562 <USBD_StdEPReq+0x154>
              break;
 8008560:	bf00      	nop
          }
          break;
 8008562:	e0ab      	b.n	80086bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d002      	beq.n	8008576 <USBD_StdEPReq+0x168>
 8008570:	2b03      	cmp	r3, #3
 8008572:	d032      	beq.n	80085da <USBD_StdEPReq+0x1cc>
 8008574:	e097      	b.n	80086a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d007      	beq.n	800858c <USBD_StdEPReq+0x17e>
 800857c:	7bbb      	ldrb	r3, [r7, #14]
 800857e:	2b80      	cmp	r3, #128	; 0x80
 8008580:	d004      	beq.n	800858c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fbd3 	bl	8008d30 <USBD_CtlError>
                break;
 800858a:	e091      	b.n	80086b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800858c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008590:	2b00      	cmp	r3, #0
 8008592:	da0b      	bge.n	80085ac <USBD_StdEPReq+0x19e>
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	3310      	adds	r3, #16
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	4413      	add	r3, r2
 80085a8:	3304      	adds	r3, #4
 80085aa:	e00b      	b.n	80085c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	3304      	adds	r3, #4
 80085c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2202      	movs	r2, #2
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fc1d 	bl	8008e12 <USBD_CtlSendData>
              break;
 80085d8:	e06a      	b.n	80086b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	da11      	bge.n	8008606 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	f003 020f 	and.w	r2, r3, #15
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	440b      	add	r3, r1
 80085f4:	3324      	adds	r3, #36	; 0x24
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d117      	bne.n	800862c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fb96 	bl	8008d30 <USBD_CtlError>
                  break;
 8008604:	e054      	b.n	80086b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	f003 020f 	and.w	r2, r3, #15
 800860c:	6879      	ldr	r1, [r7, #4]
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	440b      	add	r3, r1
 8008618:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fb83 	bl	8008d30 <USBD_CtlError>
                  break;
 800862a:	e041      	b.n	80086b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800862c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008630:	2b00      	cmp	r3, #0
 8008632:	da0b      	bge.n	800864c <USBD_StdEPReq+0x23e>
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	3310      	adds	r3, #16
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	3304      	adds	r3, #4
 800864a:	e00b      	b.n	8008664 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	4413      	add	r3, r2
 8008662:	3304      	adds	r3, #4
 8008664:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <USBD_StdEPReq+0x264>
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b80      	cmp	r3, #128	; 0x80
 8008670:	d103      	bne.n	800867a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	e00e      	b.n	8008698 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 ffe2 	bl	8009648 <USBD_LL_IsStallEP>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2201      	movs	r2, #1
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	e002      	b.n	8008698 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2202      	movs	r2, #2
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fbb7 	bl	8008e12 <USBD_CtlSendData>
              break;
 80086a4:	e004      	b.n	80086b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fb41 	bl	8008d30 <USBD_CtlError>
              break;
 80086ae:	bf00      	nop
          }
          break;
 80086b0:	e004      	b.n	80086bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fb3b 	bl	8008d30 <USBD_CtlError>
          break;
 80086ba:	bf00      	nop
      }
      break;
 80086bc:	e004      	b.n	80086c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fb35 	bl	8008d30 <USBD_CtlError>
      break;
 80086c6:	bf00      	nop
  }

  return ret;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	885b      	ldrh	r3, [r3, #2]
 80086ee:	0a1b      	lsrs	r3, r3, #8
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	2b06      	cmp	r3, #6
 80086f6:	f200 8128 	bhi.w	800894a <USBD_GetDescriptor+0x276>
 80086fa:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <USBD_GetDescriptor+0x2c>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	0800871d 	.word	0x0800871d
 8008704:	08008735 	.word	0x08008735
 8008708:	08008775 	.word	0x08008775
 800870c:	0800894b 	.word	0x0800894b
 8008710:	0800894b 	.word	0x0800894b
 8008714:	080088eb 	.word	0x080088eb
 8008718:	08008917 	.word	0x08008917
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	7c12      	ldrb	r2, [r2, #16]
 8008728:	f107 0108 	add.w	r1, r7, #8
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	60f8      	str	r0, [r7, #12]
      break;
 8008732:	e112      	b.n	800895a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	7c1b      	ldrb	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10d      	bne.n	8008758 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008744:	f107 0208 	add.w	r2, r7, #8
 8008748:	4610      	mov	r0, r2
 800874a:	4798      	blx	r3
 800874c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	2202      	movs	r2, #2
 8008754:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008756:	e100      	b.n	800895a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	f107 0208 	add.w	r2, r7, #8
 8008764:	4610      	mov	r0, r2
 8008766:	4798      	blx	r3
 8008768:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3301      	adds	r3, #1
 800876e:	2202      	movs	r2, #2
 8008770:	701a      	strb	r2, [r3, #0]
      break;
 8008772:	e0f2      	b.n	800895a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	885b      	ldrh	r3, [r3, #2]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b05      	cmp	r3, #5
 800877c:	f200 80ac 	bhi.w	80088d8 <USBD_GetDescriptor+0x204>
 8008780:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <USBD_GetDescriptor+0xb4>)
 8008782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008786:	bf00      	nop
 8008788:	080087a1 	.word	0x080087a1
 800878c:	080087d5 	.word	0x080087d5
 8008790:	08008809 	.word	0x08008809
 8008794:	0800883d 	.word	0x0800883d
 8008798:	08008871 	.word	0x08008871
 800879c:	080088a5 	.word	0x080088a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	7c12      	ldrb	r2, [r2, #16]
 80087b8:	f107 0108 	add.w	r1, r7, #8
 80087bc:	4610      	mov	r0, r2
 80087be:	4798      	blx	r3
 80087c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087c2:	e091      	b.n	80088e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fab2 	bl	8008d30 <USBD_CtlError>
            err++;
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	3301      	adds	r3, #1
 80087d0:	72fb      	strb	r3, [r7, #11]
          break;
 80087d2:	e089      	b.n	80088e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00b      	beq.n	80087f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	7c12      	ldrb	r2, [r2, #16]
 80087ec:	f107 0108 	add.w	r1, r7, #8
 80087f0:	4610      	mov	r0, r2
 80087f2:	4798      	blx	r3
 80087f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087f6:	e077      	b.n	80088e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fa98 	bl	8008d30 <USBD_CtlError>
            err++;
 8008800:	7afb      	ldrb	r3, [r7, #11]
 8008802:	3301      	adds	r3, #1
 8008804:	72fb      	strb	r3, [r7, #11]
          break;
 8008806:	e06f      	b.n	80088e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00b      	beq.n	800882c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	7c12      	ldrb	r2, [r2, #16]
 8008820:	f107 0108 	add.w	r1, r7, #8
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3
 8008828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800882a:	e05d      	b.n	80088e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fa7e 	bl	8008d30 <USBD_CtlError>
            err++;
 8008834:	7afb      	ldrb	r3, [r7, #11]
 8008836:	3301      	adds	r3, #1
 8008838:	72fb      	strb	r3, [r7, #11]
          break;
 800883a:	e055      	b.n	80088e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00b      	beq.n	8008860 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	7c12      	ldrb	r2, [r2, #16]
 8008854:	f107 0108 	add.w	r1, r7, #8
 8008858:	4610      	mov	r0, r2
 800885a:	4798      	blx	r3
 800885c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800885e:	e043      	b.n	80088e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fa64 	bl	8008d30 <USBD_CtlError>
            err++;
 8008868:	7afb      	ldrb	r3, [r7, #11]
 800886a:	3301      	adds	r3, #1
 800886c:	72fb      	strb	r3, [r7, #11]
          break;
 800886e:	e03b      	b.n	80088e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00b      	beq.n	8008894 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	7c12      	ldrb	r2, [r2, #16]
 8008888:	f107 0108 	add.w	r1, r7, #8
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
 8008890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008892:	e029      	b.n	80088e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fa4a 	bl	8008d30 <USBD_CtlError>
            err++;
 800889c:	7afb      	ldrb	r3, [r7, #11]
 800889e:	3301      	adds	r3, #1
 80088a0:	72fb      	strb	r3, [r7, #11]
          break;
 80088a2:	e021      	b.n	80088e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00b      	beq.n	80088c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	7c12      	ldrb	r2, [r2, #16]
 80088bc:	f107 0108 	add.w	r1, r7, #8
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088c6:	e00f      	b.n	80088e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa30 	bl	8008d30 <USBD_CtlError>
            err++;
 80088d0:	7afb      	ldrb	r3, [r7, #11]
 80088d2:	3301      	adds	r3, #1
 80088d4:	72fb      	strb	r3, [r7, #11]
          break;
 80088d6:	e007      	b.n	80088e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fa28 	bl	8008d30 <USBD_CtlError>
          err++;
 80088e0:	7afb      	ldrb	r3, [r7, #11]
 80088e2:	3301      	adds	r3, #1
 80088e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80088e6:	bf00      	nop
      }
      break;
 80088e8:	e037      	b.n	800895a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	7c1b      	ldrb	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d109      	bne.n	8008906 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fa:	f107 0208 	add.w	r2, r7, #8
 80088fe:	4610      	mov	r0, r2
 8008900:	4798      	blx	r3
 8008902:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008904:	e029      	b.n	800895a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fa11 	bl	8008d30 <USBD_CtlError>
        err++;
 800890e:	7afb      	ldrb	r3, [r7, #11]
 8008910:	3301      	adds	r3, #1
 8008912:	72fb      	strb	r3, [r7, #11]
      break;
 8008914:	e021      	b.n	800895a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	7c1b      	ldrb	r3, [r3, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10d      	bne.n	800893a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	f107 0208 	add.w	r2, r7, #8
 800892a:	4610      	mov	r0, r2
 800892c:	4798      	blx	r3
 800892e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3301      	adds	r3, #1
 8008934:	2207      	movs	r2, #7
 8008936:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008938:	e00f      	b.n	800895a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f9f7 	bl	8008d30 <USBD_CtlError>
        err++;
 8008942:	7afb      	ldrb	r3, [r7, #11]
 8008944:	3301      	adds	r3, #1
 8008946:	72fb      	strb	r3, [r7, #11]
      break;
 8008948:	e007      	b.n	800895a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f9ef 	bl	8008d30 <USBD_CtlError>
      err++;
 8008952:	7afb      	ldrb	r3, [r7, #11]
 8008954:	3301      	adds	r3, #1
 8008956:	72fb      	strb	r3, [r7, #11]
      break;
 8008958:	bf00      	nop
  }

  if (err != 0U)
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d11e      	bne.n	800899e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	88db      	ldrh	r3, [r3, #6]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d016      	beq.n	8008996 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008968:	893b      	ldrh	r3, [r7, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00e      	beq.n	800898c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	88da      	ldrh	r2, [r3, #6]
 8008972:	893b      	ldrh	r3, [r7, #8]
 8008974:	4293      	cmp	r3, r2
 8008976:	bf28      	it	cs
 8008978:	4613      	movcs	r3, r2
 800897a:	b29b      	uxth	r3, r3
 800897c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800897e:	893b      	ldrh	r3, [r7, #8]
 8008980:	461a      	mov	r2, r3
 8008982:	68f9      	ldr	r1, [r7, #12]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fa44 	bl	8008e12 <USBD_CtlSendData>
 800898a:	e009      	b.n	80089a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f9ce 	bl	8008d30 <USBD_CtlError>
 8008994:	e004      	b.n	80089a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fa78 	bl	8008e8c <USBD_CtlSendStatus>
 800899c:	e000      	b.n	80089a0 <USBD_GetDescriptor+0x2cc>
    return;
 800899e:	bf00      	nop
  }
}
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop

080089a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	889b      	ldrh	r3, [r3, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d131      	bne.n	8008a1e <USBD_SetAddress+0x76>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	88db      	ldrh	r3, [r3, #6]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d12d      	bne.n	8008a1e <USBD_SetAddress+0x76>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	885b      	ldrh	r3, [r3, #2]
 80089c6:	2b7f      	cmp	r3, #127	; 0x7f
 80089c8:	d829      	bhi.n	8008a1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	885b      	ldrh	r3, [r3, #2]
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d104      	bne.n	80089ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f9a3 	bl	8008d30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ea:	e01d      	b.n	8008a28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	7bfa      	ldrb	r2, [r7, #15]
 80089f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fe51 	bl	80096a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa44 	bl	8008e8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d004      	beq.n	8008a14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a12:	e009      	b.n	8008a28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1c:	e004      	b.n	8008a28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f985 	bl	8008d30 <USBD_CtlError>
  }
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	885b      	ldrh	r3, [r3, #2]
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	4b4c      	ldr	r3, [pc, #304]	; (8008b78 <USBD_SetConfig+0x148>)
 8008a46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a48:	4b4b      	ldr	r3, [pc, #300]	; (8008b78 <USBD_SetConfig+0x148>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d905      	bls.n	8008a5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f96c 	bl	8008d30 <USBD_CtlError>
    return USBD_FAIL;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e088      	b.n	8008b6e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d002      	beq.n	8008a6e <USBD_SetConfig+0x3e>
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d025      	beq.n	8008ab8 <USBD_SetConfig+0x88>
 8008a6c:	e071      	b.n	8008b52 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a6e:	4b42      	ldr	r3, [pc, #264]	; (8008b78 <USBD_SetConfig+0x148>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d01c      	beq.n	8008ab0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008a76:	4b40      	ldr	r3, [pc, #256]	; (8008b78 <USBD_SetConfig+0x148>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a80:	4b3d      	ldr	r3, [pc, #244]	; (8008b78 <USBD_SetConfig+0x148>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff f949 	bl	8007d1e <USBD_SetClassConfig>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d004      	beq.n	8008aa0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f949 	bl	8008d30 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a9e:	e065      	b.n	8008b6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f9f3 	bl	8008e8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008aae:	e05d      	b.n	8008b6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f9eb 	bl	8008e8c <USBD_CtlSendStatus>
      break;
 8008ab6:	e059      	b.n	8008b6c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ab8:	4b2f      	ldr	r3, [pc, #188]	; (8008b78 <USBD_SetConfig+0x148>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d112      	bne.n	8008ae6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008ac8:	4b2b      	ldr	r3, [pc, #172]	; (8008b78 <USBD_SetConfig+0x148>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ad2:	4b29      	ldr	r3, [pc, #164]	; (8008b78 <USBD_SetConfig+0x148>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7ff f93c 	bl	8007d56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f9d4 	bl	8008e8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ae4:	e042      	b.n	8008b6c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008ae6:	4b24      	ldr	r3, [pc, #144]	; (8008b78 <USBD_SetConfig+0x148>)
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d02a      	beq.n	8008b4a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff f92a 	bl	8007d56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b02:	4b1d      	ldr	r3, [pc, #116]	; (8008b78 <USBD_SetConfig+0x148>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <USBD_SetConfig+0x148>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff f903 	bl	8007d1e <USBD_SetClassConfig>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00f      	beq.n	8008b42 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f903 	bl	8008d30 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff f90f 	bl	8007d56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b40:	e014      	b.n	8008b6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f9a2 	bl	8008e8c <USBD_CtlSendStatus>
      break;
 8008b48:	e010      	b.n	8008b6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f99e 	bl	8008e8c <USBD_CtlSendStatus>
      break;
 8008b50:	e00c      	b.n	8008b6c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f8eb 	bl	8008d30 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <USBD_SetConfig+0x148>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff f8f8 	bl	8007d56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b66:	2303      	movs	r3, #3
 8008b68:	73fb      	strb	r3, [r7, #15]
      break;
 8008b6a:	bf00      	nop
  }

  return ret;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000600 	.word	0x20000600

08008b7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	88db      	ldrh	r3, [r3, #6]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d004      	beq.n	8008b98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f8cd 	bl	8008d30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b96:	e023      	b.n	8008be0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	dc02      	bgt.n	8008baa <USBD_GetConfig+0x2e>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dc03      	bgt.n	8008bb0 <USBD_GetConfig+0x34>
 8008ba8:	e015      	b.n	8008bd6 <USBD_GetConfig+0x5a>
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d00b      	beq.n	8008bc6 <USBD_GetConfig+0x4a>
 8008bae:	e012      	b.n	8008bd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	2201      	movs	r2, #1
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f927 	bl	8008e12 <USBD_CtlSendData>
        break;
 8008bc4:	e00c      	b.n	8008be0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	2201      	movs	r2, #1
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f91f 	bl	8008e12 <USBD_CtlSendData>
        break;
 8008bd4:	e004      	b.n	8008be0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f8a9 	bl	8008d30 <USBD_CtlError>
        break;
 8008bde:	bf00      	nop
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d81e      	bhi.n	8008c3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	88db      	ldrh	r3, [r3, #6]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d004      	beq.n	8008c12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f890 	bl	8008d30 <USBD_CtlError>
        break;
 8008c10:	e01a      	b.n	8008c48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	f043 0202 	orr.w	r2, r3, #2
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	330c      	adds	r3, #12
 8008c32:	2202      	movs	r2, #2
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f8eb 	bl	8008e12 <USBD_CtlSendData>
      break;
 8008c3c:	e004      	b.n	8008c48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f875 	bl	8008d30 <USBD_CtlError>
      break;
 8008c46:	bf00      	nop
  }
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	885b      	ldrh	r3, [r3, #2]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d106      	bne.n	8008c70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f90e 	bl	8008e8c <USBD_CtlSendStatus>
  }
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d80b      	bhi.n	8008ca8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	885b      	ldrh	r3, [r3, #2]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d10c      	bne.n	8008cb2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f8f3 	bl	8008e8c <USBD_CtlSendStatus>
      }
      break;
 8008ca6:	e004      	b.n	8008cb2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f840 	bl	8008d30 <USBD_CtlError>
      break;
 8008cb0:	e000      	b.n	8008cb4 <USBD_ClrFeature+0x3c>
      break;
 8008cb2:	bf00      	nop
  }
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	781a      	ldrb	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	781a      	ldrb	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f7ff fabc 	bl	8008264 <SWAPBYTE>
 8008cec:	4603      	mov	r3, r0
 8008cee:	461a      	mov	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f7ff faaf 	bl	8008264 <SWAPBYTE>
 8008d06:	4603      	mov	r3, r0
 8008d08:	461a      	mov	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3301      	adds	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3301      	adds	r3, #1
 8008d18:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f7ff faa2 	bl	8008264 <SWAPBYTE>
 8008d20:	4603      	mov	r3, r0
 8008d22:	461a      	mov	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	80da      	strh	r2, [r3, #6]
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d3a:	2180      	movs	r1, #128	; 0x80
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fc45 	bl	80095cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d42:	2100      	movs	r1, #0
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fc41 	bl	80095cc <USBD_LL_StallEP>
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b086      	sub	sp, #24
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d036      	beq.n	8008dd6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d6c:	6938      	ldr	r0, [r7, #16]
 8008d6e:	f000 f836 	bl	8008dde <USBD_GetLen>
 8008d72:	4603      	mov	r3, r0
 8008d74:	3301      	adds	r3, #1
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	4413      	add	r3, r2
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	7812      	ldrb	r2, [r2, #0]
 8008d8a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	4413      	add	r3, r2
 8008d98:	2203      	movs	r2, #3
 8008d9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008da2:	e013      	b.n	8008dcc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	4413      	add	r3, r2
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	7812      	ldrb	r2, [r2, #0]
 8008dae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	3301      	adds	r3, #1
 8008db4:	613b      	str	r3, [r7, #16]
    idx++;
 8008db6:	7dfb      	ldrb	r3, [r7, #23]
 8008db8:	3301      	adds	r3, #1
 8008dba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e7      	bne.n	8008da4 <USBD_GetString+0x52>
 8008dd4:	e000      	b.n	8008dd8 <USBD_GetString+0x86>
    return;
 8008dd6:	bf00      	nop
  }
}
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b085      	sub	sp, #20
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008dee:	e005      	b.n	8008dfc <USBD_GetLen+0x1e>
  {
    len++;
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	3301      	adds	r3, #1
 8008df4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1f5      	bne.n	8008df0 <USBD_GetLen+0x12>
  }

  return len;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2202      	movs	r2, #2
 8008e22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	2100      	movs	r1, #0
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 fc50 	bl	80096de <USBD_LL_Transmit>

  return USBD_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	2100      	movs	r1, #0
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fc3f 	bl	80096de <USBD_LL_Transmit>

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	60f8      	str	r0, [r7, #12]
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fc4f 	bl	8009720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2204      	movs	r2, #4
 8008e98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fc1b 	bl	80096de <USBD_LL_Transmit>

  return USBD_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b082      	sub	sp, #8
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2205      	movs	r2, #5
 8008ebe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fc29 	bl	8009720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 8008edc:	2200      	movs	r2, #0
 8008ede:	4912      	ldr	r1, [pc, #72]	; (8008f28 <MX_USB_DEVICE_Init+0x50>)
 8008ee0:	4812      	ldr	r0, [pc, #72]	; (8008f2c <MX_USB_DEVICE_Init+0x54>)
 8008ee2:	f7fe feae 	bl	8007c42 <USBD_Init>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 8008eec:	f7f8 fc28 	bl	8001740 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 8008ef0:	490f      	ldr	r1, [pc, #60]	; (8008f30 <MX_USB_DEVICE_Init+0x58>)
 8008ef2:	480e      	ldr	r0, [pc, #56]	; (8008f2c <MX_USB_DEVICE_Init+0x54>)
 8008ef4:	f7fe fed5 	bl	8007ca2 <USBD_RegisterClass>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 8008efe:	f7f8 fc1f 	bl	8001740 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 8008f02:	490c      	ldr	r1, [pc, #48]	; (8008f34 <MX_USB_DEVICE_Init+0x5c>)
 8008f04:	4809      	ldr	r0, [pc, #36]	; (8008f2c <MX_USB_DEVICE_Init+0x54>)
 8008f06:	f7fe fe85 	bl	8007c14 <USBD_Midi_RegisterInterface>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 8008f10:	f7f8 fc16 	bl	8001740 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008f14:	4805      	ldr	r0, [pc, #20]	; (8008f2c <MX_USB_DEVICE_Init+0x54>)
 8008f16:	f7fe feeb 	bl	8007cf0 <USBD_Start>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 8008f20:	f7f8 fc0e 	bl	8001740 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f24:	bf00      	nop
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	200000d8 	.word	0x200000d8
 8008f2c:	20002384 	.word	0x20002384
 8008f30:	2000002c 	.word	0x2000002c
 8008f34:	20000128 	.word	0x20000128

08008f38 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	71fb      	strb	r3, [r7, #7]
 8008f42:	460b      	mov	r3, r1
 8008f44:	71bb      	strb	r3, [r7, #6]
 8008f46:	4613      	mov	r3, r2
 8008f48:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 8008f4a:	230b      	movs	r3, #11
 8008f4c:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8008f54:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 8008f5e:	79bb      	ldrb	r3, [r7, #6]
 8008f60:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 8008f62:	797b      	ldrb	r3, [r7, #5]
 8008f64:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 8008f66:	f107 0208 	add.w	r2, r7, #8
 8008f6a:	2304      	movs	r3, #4
 8008f6c:	2181      	movs	r1, #129	; 0x81
 8008f6e:	4810      	ldr	r0, [pc, #64]	; (8008fb0 <MX_USB_Send_Midi+0x78>)
 8008f70:	f000 fbb5 	bl	80096de <USBD_LL_Transmit>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d00a      	beq.n	8008f90 <MX_USB_Send_Midi+0x58>
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	dc10      	bgt.n	8008fa0 <MX_USB_Send_Midi+0x68>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <MX_USB_Send_Midi+0x50>
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d008      	beq.n	8008f98 <MX_USB_Send_Midi+0x60>
 8008f86:	e00b      	b.n	8008fa0 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 8008f88:	480a      	ldr	r0, [pc, #40]	; (8008fb4 <MX_USB_Send_Midi+0x7c>)
 8008f8a:	f000 fd89 	bl	8009aa0 <puts>
        break;
 8008f8e:	e00b      	b.n	8008fa8 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 8008f90:	4809      	ldr	r0, [pc, #36]	; (8008fb8 <MX_USB_Send_Midi+0x80>)
 8008f92:	f000 fd85 	bl	8009aa0 <puts>
        break;
 8008f96:	e007      	b.n	8008fa8 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 8008f98:	4808      	ldr	r0, [pc, #32]	; (8008fbc <MX_USB_Send_Midi+0x84>)
 8008f9a:	f000 fd81 	bl	8009aa0 <puts>
        break;
 8008f9e:	e003      	b.n	8008fa8 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 8008fa0:	4807      	ldr	r0, [pc, #28]	; (8008fc0 <MX_USB_Send_Midi+0x88>)
 8008fa2:	f000 fd7d 	bl	8009aa0 <puts>
    }
}
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20002384 	.word	0x20002384
 8008fb4:	0800aaa8 	.word	0x0800aaa8
 8008fb8:	0800aaac 	.word	0x0800aaac
 8008fbc:	0800aabc 	.word	0x0800aabc
 8008fc0:	0800aacc 	.word	0x0800aacc

08008fc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	6039      	str	r1, [r7, #0]
 8008fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2212      	movs	r2, #18
 8008fd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fd6:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	200000f4 	.word	0x200000f4

08008fe8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2204      	movs	r2, #4
 8008ff8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ffa:	4b03      	ldr	r3, [pc, #12]	; (8009008 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	20000108 	.word	0x20000108

0800900c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	6039      	str	r1, [r7, #0]
 8009016:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d105      	bne.n	800902a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	4907      	ldr	r1, [pc, #28]	; (8009040 <USBD_FS_ProductStrDescriptor+0x34>)
 8009022:	4808      	ldr	r0, [pc, #32]	; (8009044 <USBD_FS_ProductStrDescriptor+0x38>)
 8009024:	f7ff fe95 	bl	8008d52 <USBD_GetString>
 8009028:	e004      	b.n	8009034 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	4904      	ldr	r1, [pc, #16]	; (8009040 <USBD_FS_ProductStrDescriptor+0x34>)
 800902e:	4805      	ldr	r0, [pc, #20]	; (8009044 <USBD_FS_ProductStrDescriptor+0x38>)
 8009030:	f7ff fe8f 	bl	8008d52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009034:	4b02      	ldr	r3, [pc, #8]	; (8009040 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20002654 	.word	0x20002654
 8009044:	0800aae8 	.word	0x0800aae8

08009048 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	6039      	str	r1, [r7, #0]
 8009052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	4904      	ldr	r1, [pc, #16]	; (8009068 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009058:	4804      	ldr	r0, [pc, #16]	; (800906c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800905a:	f7ff fe7a 	bl	8008d52 <USBD_GetString>
  return USBD_StrDesc;
 800905e:	4b02      	ldr	r3, [pc, #8]	; (8009068 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009060:	4618      	mov	r0, r3
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	20002654 	.word	0x20002654
 800906c:	0800aafc 	.word	0x0800aafc

08009070 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	221a      	movs	r2, #26
 8009080:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009082:	f000 f843 	bl	800910c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009086:	4b02      	ldr	r3, [pc, #8]	; (8009090 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	2000010c 	.word	0x2000010c

08009094 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	6039      	str	r1, [r7, #0]
 800909e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090a0:	79fb      	ldrb	r3, [r7, #7]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d105      	bne.n	80090b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	4907      	ldr	r1, [pc, #28]	; (80090c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090aa:	4808      	ldr	r0, [pc, #32]	; (80090cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090ac:	f7ff fe51 	bl	8008d52 <USBD_GetString>
 80090b0:	e004      	b.n	80090bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	4904      	ldr	r1, [pc, #16]	; (80090c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090b6:	4805      	ldr	r0, [pc, #20]	; (80090cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090b8:	f7ff fe4b 	bl	8008d52 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20002654 	.word	0x20002654
 80090cc:	0800ab10 	.word	0x0800ab10

080090d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	6039      	str	r1, [r7, #0]
 80090da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d105      	bne.n	80090ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	4907      	ldr	r1, [pc, #28]	; (8009104 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090e6:	4808      	ldr	r0, [pc, #32]	; (8009108 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090e8:	f7ff fe33 	bl	8008d52 <USBD_GetString>
 80090ec:	e004      	b.n	80090f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	4904      	ldr	r1, [pc, #16]	; (8009104 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090f2:	4805      	ldr	r0, [pc, #20]	; (8009108 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090f4:	f7ff fe2d 	bl	8008d52 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090f8:	4b02      	ldr	r3, [pc, #8]	; (8009104 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20002654 	.word	0x20002654
 8009108:	0800ab20 	.word	0x0800ab20

0800910c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009112:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <Get_SerialNum+0x44>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009118:	4b0e      	ldr	r3, [pc, #56]	; (8009154 <Get_SerialNum+0x48>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800911e:	4b0e      	ldr	r3, [pc, #56]	; (8009158 <Get_SerialNum+0x4c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4413      	add	r3, r2
 800912a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009132:	2208      	movs	r2, #8
 8009134:	4909      	ldr	r1, [pc, #36]	; (800915c <Get_SerialNum+0x50>)
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 f814 	bl	8009164 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800913c:	2204      	movs	r2, #4
 800913e:	4908      	ldr	r1, [pc, #32]	; (8009160 <Get_SerialNum+0x54>)
 8009140:	68b8      	ldr	r0, [r7, #8]
 8009142:	f000 f80f 	bl	8009164 <IntToUnicode>
  }
}
 8009146:	bf00      	nop
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	1fff7a10 	.word	0x1fff7a10
 8009154:	1fff7a14 	.word	0x1fff7a14
 8009158:	1fff7a18 	.word	0x1fff7a18
 800915c:	2000010e 	.word	0x2000010e
 8009160:	2000011e 	.word	0x2000011e

08009164 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	4613      	mov	r3, r2
 8009170:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009176:	2300      	movs	r3, #0
 8009178:	75fb      	strb	r3, [r7, #23]
 800917a:	e027      	b.n	80091cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	0f1b      	lsrs	r3, r3, #28
 8009180:	2b09      	cmp	r3, #9
 8009182:	d80b      	bhi.n	800919c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	0f1b      	lsrs	r3, r3, #28
 8009188:	b2da      	uxtb	r2, r3
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	4619      	mov	r1, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	440b      	add	r3, r1
 8009194:	3230      	adds	r2, #48	; 0x30
 8009196:	b2d2      	uxtb	r2, r2
 8009198:	701a      	strb	r2, [r3, #0]
 800919a:	e00a      	b.n	80091b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	0f1b      	lsrs	r3, r3, #28
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	4619      	mov	r1, r3
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	440b      	add	r3, r1
 80091ac:	3237      	adds	r2, #55	; 0x37
 80091ae:	b2d2      	uxtb	r2, r2
 80091b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	011b      	lsls	r3, r3, #4
 80091b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	3301      	adds	r3, #1
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	4413      	add	r3, r2
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	3301      	adds	r3, #1
 80091ca:	75fb      	strb	r3, [r7, #23]
 80091cc:	7dfa      	ldrb	r2, [r7, #23]
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d3d3      	bcc.n	800917c <IntToUnicode+0x18>
  }
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
 80091d8:	371c      	adds	r7, #28
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
	...

080091fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	; 0x28
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009204:	f107 0314 	add.w	r3, r7, #20
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	605a      	str	r2, [r3, #4]
 800920e:	609a      	str	r2, [r3, #8]
 8009210:	60da      	str	r2, [r3, #12]
 8009212:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800921c:	d13a      	bne.n	8009294 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800921e:	2300      	movs	r3, #0
 8009220:	613b      	str	r3, [r7, #16]
 8009222:	4b1e      	ldr	r3, [pc, #120]	; (800929c <HAL_PCD_MspInit+0xa0>)
 8009224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009226:	4a1d      	ldr	r2, [pc, #116]	; (800929c <HAL_PCD_MspInit+0xa0>)
 8009228:	f043 0301 	orr.w	r3, r3, #1
 800922c:	6313      	str	r3, [r2, #48]	; 0x30
 800922e:	4b1b      	ldr	r3, [pc, #108]	; (800929c <HAL_PCD_MspInit+0xa0>)
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	613b      	str	r3, [r7, #16]
 8009238:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800923a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800923e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009240:	2302      	movs	r3, #2
 8009242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009244:	2300      	movs	r3, #0
 8009246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009248:	2300      	movs	r3, #0
 800924a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800924c:	230a      	movs	r3, #10
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009250:	f107 0314 	add.w	r3, r7, #20
 8009254:	4619      	mov	r1, r3
 8009256:	4812      	ldr	r0, [pc, #72]	; (80092a0 <HAL_PCD_MspInit+0xa4>)
 8009258:	f7fa f9d0 	bl	80035fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800925c:	4b0f      	ldr	r3, [pc, #60]	; (800929c <HAL_PCD_MspInit+0xa0>)
 800925e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009260:	4a0e      	ldr	r2, [pc, #56]	; (800929c <HAL_PCD_MspInit+0xa0>)
 8009262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009266:	6353      	str	r3, [r2, #52]	; 0x34
 8009268:	2300      	movs	r3, #0
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	4b0b      	ldr	r3, [pc, #44]	; (800929c <HAL_PCD_MspInit+0xa0>)
 800926e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009270:	4a0a      	ldr	r2, [pc, #40]	; (800929c <HAL_PCD_MspInit+0xa0>)
 8009272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009276:	6453      	str	r3, [r2, #68]	; 0x44
 8009278:	4b08      	ldr	r3, [pc, #32]	; (800929c <HAL_PCD_MspInit+0xa0>)
 800927a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009284:	2200      	movs	r2, #0
 8009286:	2100      	movs	r1, #0
 8009288:	2043      	movs	r0, #67	; 0x43
 800928a:	f7f9 fe96 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800928e:	2043      	movs	r0, #67	; 0x43
 8009290:	f7f9 feaf 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009294:	bf00      	nop
 8009296:	3728      	adds	r7, #40	; 0x28
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	40023800 	.word	0x40023800
 80092a0:	40020000 	.word	0x40020000

080092a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f7fe fd63 	bl	8007d86 <USBD_LL_SetupStage>
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	4613      	mov	r3, r2
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	1a9b      	subs	r3, r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	440b      	add	r3, r1
 80092e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	78fb      	ldrb	r3, [r7, #3]
 80092f0:	4619      	mov	r1, r3
 80092f2:	f7fe fd9d 	bl	8007e30 <USBD_LL_DataOutStage>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	460b      	mov	r3, r1
 8009308:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	1a9b      	subs	r3, r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	3348      	adds	r3, #72	; 0x48
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	78fb      	ldrb	r3, [r7, #3]
 8009324:	4619      	mov	r1, r3
 8009326:	f7fe fde6 	bl	8007ef6 <USBD_LL_DataInStage>
}
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe fefa 	bl	800813a <USBD_LL_SOF>
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009356:	2301      	movs	r3, #1
 8009358:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	2b02      	cmp	r3, #2
 8009360:	d001      	beq.n	8009366 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009362:	f7f8 f9ed 	bl	8001740 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800936c:	7bfa      	ldrb	r2, [r7, #15]
 800936e:	4611      	mov	r1, r2
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe fea4 	bl	80080be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fe50 	bl	8008022 <USBD_LL_Reset>
}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe fe9f 	bl	80080de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6812      	ldr	r2, [r2, #0]
 80093ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093b2:	f043 0301 	orr.w	r3, r3, #1
 80093b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a1b      	ldr	r3, [r3, #32]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093c0:	4b04      	ldr	r3, [pc, #16]	; (80093d4 <HAL_PCD_SuspendCallback+0x48>)
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	4a03      	ldr	r2, [pc, #12]	; (80093d4 <HAL_PCD_SuspendCallback+0x48>)
 80093c6:	f043 0306 	orr.w	r3, r3, #6
 80093ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	e000ed00 	.word	0xe000ed00

080093d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fe8f 	bl	800810a <USBD_LL_Resume>
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009406:	78fa      	ldrb	r2, [r7, #3]
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe fedd 	bl	80081ca <USBD_LL_IsoOUTIncomplete>
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800942a:	78fa      	ldrb	r2, [r7, #3]
 800942c:	4611      	mov	r1, r2
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fea5 	bl	800817e <USBD_LL_IsoINIncomplete>
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fee3 	bl	8008216 <USBD_LL_DevConnected>
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe fee0 	bl	800822c <USBD_LL_DevDisconnected>
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d13c      	bne.n	80094fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009484:	4a20      	ldr	r2, [pc, #128]	; (8009508 <USBD_LL_Init+0x94>)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a1e      	ldr	r2, [pc, #120]	; (8009508 <USBD_LL_Init+0x94>)
 8009490:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009494:	4b1c      	ldr	r3, [pc, #112]	; (8009508 <USBD_LL_Init+0x94>)
 8009496:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800949a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800949c:	4b1a      	ldr	r3, [pc, #104]	; (8009508 <USBD_LL_Init+0x94>)
 800949e:	2204      	movs	r2, #4
 80094a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094a2:	4b19      	ldr	r3, [pc, #100]	; (8009508 <USBD_LL_Init+0x94>)
 80094a4:	2202      	movs	r2, #2
 80094a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094a8:	4b17      	ldr	r3, [pc, #92]	; (8009508 <USBD_LL_Init+0x94>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094ae:	4b16      	ldr	r3, [pc, #88]	; (8009508 <USBD_LL_Init+0x94>)
 80094b0:	2202      	movs	r2, #2
 80094b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094b4:	4b14      	ldr	r3, [pc, #80]	; (8009508 <USBD_LL_Init+0x94>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094ba:	4b13      	ldr	r3, [pc, #76]	; (8009508 <USBD_LL_Init+0x94>)
 80094bc:	2200      	movs	r2, #0
 80094be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094c0:	4b11      	ldr	r3, [pc, #68]	; (8009508 <USBD_LL_Init+0x94>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094c6:	4b10      	ldr	r3, [pc, #64]	; (8009508 <USBD_LL_Init+0x94>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094cc:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <USBD_LL_Init+0x94>)
 80094ce:	2200      	movs	r2, #0
 80094d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094d2:	480d      	ldr	r0, [pc, #52]	; (8009508 <USBD_LL_Init+0x94>)
 80094d4:	f7fa fff1 	bl	80044ba <HAL_PCD_Init>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094de:	f7f8 f92f 	bl	8001740 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094e2:	2180      	movs	r1, #128	; 0x80
 80094e4:	4808      	ldr	r0, [pc, #32]	; (8009508 <USBD_LL_Init+0x94>)
 80094e6:	f7fc f94e 	bl	8005786 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094ea:	2240      	movs	r2, #64	; 0x40
 80094ec:	2100      	movs	r1, #0
 80094ee:	4806      	ldr	r0, [pc, #24]	; (8009508 <USBD_LL_Init+0x94>)
 80094f0:	f7fc f902 	bl	80056f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094f4:	2280      	movs	r2, #128	; 0x80
 80094f6:	2101      	movs	r1, #1
 80094f8:	4803      	ldr	r0, [pc, #12]	; (8009508 <USBD_LL_Init+0x94>)
 80094fa:	f7fc f8fd 	bl	80056f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20002854 	.word	0x20002854

0800950c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009522:	4618      	mov	r0, r3
 8009524:	f7fb f8e6 	bl	80046f4 <HAL_PCD_Start>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f938 	bl	80097a4 <USBD_Get_USB_Status>
 8009534:	4603      	mov	r3, r0
 8009536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009538:	7bbb      	ldrb	r3, [r7, #14]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	4608      	mov	r0, r1
 800954c:	4611      	mov	r1, r2
 800954e:	461a      	mov	r2, r3
 8009550:	4603      	mov	r3, r0
 8009552:	70fb      	strb	r3, [r7, #3]
 8009554:	460b      	mov	r3, r1
 8009556:	70bb      	strb	r3, [r7, #2]
 8009558:	4613      	mov	r3, r2
 800955a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800956a:	78bb      	ldrb	r3, [r7, #2]
 800956c:	883a      	ldrh	r2, [r7, #0]
 800956e:	78f9      	ldrb	r1, [r7, #3]
 8009570:	f7fb fcca 	bl	8004f08 <HAL_PCD_EP_Open>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	4618      	mov	r0, r3
 800957c:	f000 f912 	bl	80097a4 <USBD_Get_USB_Status>
 8009580:	4603      	mov	r3, r0
 8009582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009584:	7bbb      	ldrb	r3, [r7, #14]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095a8:	78fa      	ldrb	r2, [r7, #3]
 80095aa:	4611      	mov	r1, r2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fb fd13 	bl	8004fd8 <HAL_PCD_EP_Close>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 f8f3 	bl	80097a4 <USBD_Get_USB_Status>
 80095be:	4603      	mov	r3, r0
 80095c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	460b      	mov	r3, r1
 80095d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095e6:	78fa      	ldrb	r2, [r7, #3]
 80095e8:	4611      	mov	r1, r2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fb fdeb 	bl	80051c6 <HAL_PCD_EP_SetStall>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 f8d4 	bl	80097a4 <USBD_Get_USB_Status>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009600:	7bbb      	ldrb	r3, [r7, #14]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009624:	78fa      	ldrb	r2, [r7, #3]
 8009626:	4611      	mov	r1, r2
 8009628:	4618      	mov	r0, r3
 800962a:	f7fb fe30 	bl	800528e <HAL_PCD_EP_ClrStall>
 800962e:	4603      	mov	r3, r0
 8009630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	4618      	mov	r0, r3
 8009636:	f000 f8b5 	bl	80097a4 <USBD_Get_USB_Status>
 800963a:	4603      	mov	r3, r0
 800963c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800963e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800965a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800965c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009660:	2b00      	cmp	r3, #0
 8009662:	da0b      	bge.n	800967c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009664:	78fb      	ldrb	r3, [r7, #3]
 8009666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800966a:	68f9      	ldr	r1, [r7, #12]
 800966c:	4613      	mov	r3, r2
 800966e:	00db      	lsls	r3, r3, #3
 8009670:	1a9b      	subs	r3, r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	333e      	adds	r3, #62	; 0x3e
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	e00b      	b.n	8009694 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800967c:	78fb      	ldrb	r3, [r7, #3]
 800967e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009682:	68f9      	ldr	r1, [r7, #12]
 8009684:	4613      	mov	r3, r2
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	1a9b      	subs	r3, r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	440b      	add	r3, r1
 800968e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009692:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096ba:	78fa      	ldrb	r2, [r7, #3]
 80096bc:	4611      	mov	r1, r2
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fb fbfd 	bl	8004ebe <HAL_PCD_SetAddress>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 f86a 	bl	80097a4 <USBD_Get_USB_Status>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b086      	sub	sp, #24
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
 80096ea:	460b      	mov	r3, r1
 80096ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096fc:	7af9      	ldrb	r1, [r7, #11]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	f7fb fd16 	bl	8005132 <HAL_PCD_EP_Transmit>
 8009706:	4603      	mov	r3, r0
 8009708:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	4618      	mov	r0, r3
 800970e:	f000 f849 	bl	80097a4 <USBD_Get_USB_Status>
 8009712:	4603      	mov	r3, r0
 8009714:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009716:	7dbb      	ldrb	r3, [r7, #22]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	607a      	str	r2, [r7, #4]
 800972a:	603b      	str	r3, [r7, #0]
 800972c:	460b      	mov	r3, r1
 800972e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800973e:	7af9      	ldrb	r1, [r7, #11]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	f7fb fc92 	bl	800506c <HAL_PCD_EP_Receive>
 8009748:	4603      	mov	r3, r0
 800974a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800974c:	7dfb      	ldrb	r3, [r7, #23]
 800974e:	4618      	mov	r0, r3
 8009750:	f000 f828 	bl	80097a4 <USBD_Get_USB_Status>
 8009754:	4603      	mov	r3, r0
 8009756:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009758:	7dbb      	ldrb	r3, [r7, #22]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009774:	78fa      	ldrb	r2, [r7, #3]
 8009776:	4611      	mov	r1, r2
 8009778:	4618      	mov	r0, r3
 800977a:	f7fb fcc2 	bl	8005102 <HAL_PCD_EP_GetRxCount>
 800977e:	4603      	mov	r3, r0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009790:	4b03      	ldr	r3, [pc, #12]	; (80097a0 <USBD_static_malloc+0x18>)
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	20000604 	.word	0x20000604

080097a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d817      	bhi.n	80097e8 <USBD_Get_USB_Status+0x44>
 80097b8:	a201      	add	r2, pc, #4	; (adr r2, 80097c0 <USBD_Get_USB_Status+0x1c>)
 80097ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097be:	bf00      	nop
 80097c0:	080097d1 	.word	0x080097d1
 80097c4:	080097d7 	.word	0x080097d7
 80097c8:	080097dd 	.word	0x080097dd
 80097cc:	080097e3 	.word	0x080097e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]
    break;
 80097d4:	e00b      	b.n	80097ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097d6:	2303      	movs	r3, #3
 80097d8:	73fb      	strb	r3, [r7, #15]
    break;
 80097da:	e008      	b.n	80097ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097dc:	2301      	movs	r3, #1
 80097de:	73fb      	strb	r3, [r7, #15]
    break;
 80097e0:	e005      	b.n	80097ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097e2:	2303      	movs	r3, #3
 80097e4:	73fb      	strb	r3, [r7, #15]
    break;
 80097e6:	e002      	b.n	80097ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097e8:	2303      	movs	r3, #3
 80097ea:	73fb      	strb	r3, [r7, #15]
    break;
 80097ec:	bf00      	nop
  }
  return usb_status;
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <__errno>:
 80097fc:	4b01      	ldr	r3, [pc, #4]	; (8009804 <__errno+0x8>)
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	2000012c 	.word	0x2000012c

08009808 <__libc_init_array>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	4d0d      	ldr	r5, [pc, #52]	; (8009840 <__libc_init_array+0x38>)
 800980c:	4c0d      	ldr	r4, [pc, #52]	; (8009844 <__libc_init_array+0x3c>)
 800980e:	1b64      	subs	r4, r4, r5
 8009810:	10a4      	asrs	r4, r4, #2
 8009812:	2600      	movs	r6, #0
 8009814:	42a6      	cmp	r6, r4
 8009816:	d109      	bne.n	800982c <__libc_init_array+0x24>
 8009818:	4d0b      	ldr	r5, [pc, #44]	; (8009848 <__libc_init_array+0x40>)
 800981a:	4c0c      	ldr	r4, [pc, #48]	; (800984c <__libc_init_array+0x44>)
 800981c:	f001 f87c 	bl	800a918 <_init>
 8009820:	1b64      	subs	r4, r4, r5
 8009822:	10a4      	asrs	r4, r4, #2
 8009824:	2600      	movs	r6, #0
 8009826:	42a6      	cmp	r6, r4
 8009828:	d105      	bne.n	8009836 <__libc_init_array+0x2e>
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009830:	4798      	blx	r3
 8009832:	3601      	adds	r6, #1
 8009834:	e7ee      	b.n	8009814 <__libc_init_array+0xc>
 8009836:	f855 3b04 	ldr.w	r3, [r5], #4
 800983a:	4798      	blx	r3
 800983c:	3601      	adds	r6, #1
 800983e:	e7f2      	b.n	8009826 <__libc_init_array+0x1e>
 8009840:	0800be80 	.word	0x0800be80
 8009844:	0800be80 	.word	0x0800be80
 8009848:	0800be80 	.word	0x0800be80
 800984c:	0800be84 	.word	0x0800be84

08009850 <malloc>:
 8009850:	4b02      	ldr	r3, [pc, #8]	; (800985c <malloc+0xc>)
 8009852:	4601      	mov	r1, r0
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	f000 b85b 	b.w	8009910 <_malloc_r>
 800985a:	bf00      	nop
 800985c:	2000012c 	.word	0x2000012c

08009860 <memset>:
 8009860:	4402      	add	r2, r0
 8009862:	4603      	mov	r3, r0
 8009864:	4293      	cmp	r3, r2
 8009866:	d100      	bne.n	800986a <memset+0xa>
 8009868:	4770      	bx	lr
 800986a:	f803 1b01 	strb.w	r1, [r3], #1
 800986e:	e7f9      	b.n	8009864 <memset+0x4>

08009870 <_free_r>:
 8009870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009872:	2900      	cmp	r1, #0
 8009874:	d048      	beq.n	8009908 <_free_r+0x98>
 8009876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800987a:	9001      	str	r0, [sp, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f1a1 0404 	sub.w	r4, r1, #4
 8009882:	bfb8      	it	lt
 8009884:	18e4      	addlt	r4, r4, r3
 8009886:	f000 fc49 	bl	800a11c <__malloc_lock>
 800988a:	4a20      	ldr	r2, [pc, #128]	; (800990c <_free_r+0x9c>)
 800988c:	9801      	ldr	r0, [sp, #4]
 800988e:	6813      	ldr	r3, [r2, #0]
 8009890:	4615      	mov	r5, r2
 8009892:	b933      	cbnz	r3, 80098a2 <_free_r+0x32>
 8009894:	6063      	str	r3, [r4, #4]
 8009896:	6014      	str	r4, [r2, #0]
 8009898:	b003      	add	sp, #12
 800989a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800989e:	f000 bc43 	b.w	800a128 <__malloc_unlock>
 80098a2:	42a3      	cmp	r3, r4
 80098a4:	d90b      	bls.n	80098be <_free_r+0x4e>
 80098a6:	6821      	ldr	r1, [r4, #0]
 80098a8:	1862      	adds	r2, r4, r1
 80098aa:	4293      	cmp	r3, r2
 80098ac:	bf04      	itt	eq
 80098ae:	681a      	ldreq	r2, [r3, #0]
 80098b0:	685b      	ldreq	r3, [r3, #4]
 80098b2:	6063      	str	r3, [r4, #4]
 80098b4:	bf04      	itt	eq
 80098b6:	1852      	addeq	r2, r2, r1
 80098b8:	6022      	streq	r2, [r4, #0]
 80098ba:	602c      	str	r4, [r5, #0]
 80098bc:	e7ec      	b.n	8009898 <_free_r+0x28>
 80098be:	461a      	mov	r2, r3
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	b10b      	cbz	r3, 80098c8 <_free_r+0x58>
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	d9fa      	bls.n	80098be <_free_r+0x4e>
 80098c8:	6811      	ldr	r1, [r2, #0]
 80098ca:	1855      	adds	r5, r2, r1
 80098cc:	42a5      	cmp	r5, r4
 80098ce:	d10b      	bne.n	80098e8 <_free_r+0x78>
 80098d0:	6824      	ldr	r4, [r4, #0]
 80098d2:	4421      	add	r1, r4
 80098d4:	1854      	adds	r4, r2, r1
 80098d6:	42a3      	cmp	r3, r4
 80098d8:	6011      	str	r1, [r2, #0]
 80098da:	d1dd      	bne.n	8009898 <_free_r+0x28>
 80098dc:	681c      	ldr	r4, [r3, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	6053      	str	r3, [r2, #4]
 80098e2:	4421      	add	r1, r4
 80098e4:	6011      	str	r1, [r2, #0]
 80098e6:	e7d7      	b.n	8009898 <_free_r+0x28>
 80098e8:	d902      	bls.n	80098f0 <_free_r+0x80>
 80098ea:	230c      	movs	r3, #12
 80098ec:	6003      	str	r3, [r0, #0]
 80098ee:	e7d3      	b.n	8009898 <_free_r+0x28>
 80098f0:	6825      	ldr	r5, [r4, #0]
 80098f2:	1961      	adds	r1, r4, r5
 80098f4:	428b      	cmp	r3, r1
 80098f6:	bf04      	itt	eq
 80098f8:	6819      	ldreq	r1, [r3, #0]
 80098fa:	685b      	ldreq	r3, [r3, #4]
 80098fc:	6063      	str	r3, [r4, #4]
 80098fe:	bf04      	itt	eq
 8009900:	1949      	addeq	r1, r1, r5
 8009902:	6021      	streq	r1, [r4, #0]
 8009904:	6054      	str	r4, [r2, #4]
 8009906:	e7c7      	b.n	8009898 <_free_r+0x28>
 8009908:	b003      	add	sp, #12
 800990a:	bd30      	pop	{r4, r5, pc}
 800990c:	200021d8 	.word	0x200021d8

08009910 <_malloc_r>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	1ccd      	adds	r5, r1, #3
 8009914:	f025 0503 	bic.w	r5, r5, #3
 8009918:	3508      	adds	r5, #8
 800991a:	2d0c      	cmp	r5, #12
 800991c:	bf38      	it	cc
 800991e:	250c      	movcc	r5, #12
 8009920:	2d00      	cmp	r5, #0
 8009922:	4606      	mov	r6, r0
 8009924:	db01      	blt.n	800992a <_malloc_r+0x1a>
 8009926:	42a9      	cmp	r1, r5
 8009928:	d903      	bls.n	8009932 <_malloc_r+0x22>
 800992a:	230c      	movs	r3, #12
 800992c:	6033      	str	r3, [r6, #0]
 800992e:	2000      	movs	r0, #0
 8009930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009932:	f000 fbf3 	bl	800a11c <__malloc_lock>
 8009936:	4921      	ldr	r1, [pc, #132]	; (80099bc <_malloc_r+0xac>)
 8009938:	680a      	ldr	r2, [r1, #0]
 800993a:	4614      	mov	r4, r2
 800993c:	b99c      	cbnz	r4, 8009966 <_malloc_r+0x56>
 800993e:	4f20      	ldr	r7, [pc, #128]	; (80099c0 <_malloc_r+0xb0>)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	b923      	cbnz	r3, 800994e <_malloc_r+0x3e>
 8009944:	4621      	mov	r1, r4
 8009946:	4630      	mov	r0, r6
 8009948:	f000 f8b2 	bl	8009ab0 <_sbrk_r>
 800994c:	6038      	str	r0, [r7, #0]
 800994e:	4629      	mov	r1, r5
 8009950:	4630      	mov	r0, r6
 8009952:	f000 f8ad 	bl	8009ab0 <_sbrk_r>
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	d123      	bne.n	80099a2 <_malloc_r+0x92>
 800995a:	230c      	movs	r3, #12
 800995c:	6033      	str	r3, [r6, #0]
 800995e:	4630      	mov	r0, r6
 8009960:	f000 fbe2 	bl	800a128 <__malloc_unlock>
 8009964:	e7e3      	b.n	800992e <_malloc_r+0x1e>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	1b5b      	subs	r3, r3, r5
 800996a:	d417      	bmi.n	800999c <_malloc_r+0x8c>
 800996c:	2b0b      	cmp	r3, #11
 800996e:	d903      	bls.n	8009978 <_malloc_r+0x68>
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	441c      	add	r4, r3
 8009974:	6025      	str	r5, [r4, #0]
 8009976:	e004      	b.n	8009982 <_malloc_r+0x72>
 8009978:	6863      	ldr	r3, [r4, #4]
 800997a:	42a2      	cmp	r2, r4
 800997c:	bf0c      	ite	eq
 800997e:	600b      	streq	r3, [r1, #0]
 8009980:	6053      	strne	r3, [r2, #4]
 8009982:	4630      	mov	r0, r6
 8009984:	f000 fbd0 	bl	800a128 <__malloc_unlock>
 8009988:	f104 000b 	add.w	r0, r4, #11
 800998c:	1d23      	adds	r3, r4, #4
 800998e:	f020 0007 	bic.w	r0, r0, #7
 8009992:	1ac2      	subs	r2, r0, r3
 8009994:	d0cc      	beq.n	8009930 <_malloc_r+0x20>
 8009996:	1a1b      	subs	r3, r3, r0
 8009998:	50a3      	str	r3, [r4, r2]
 800999a:	e7c9      	b.n	8009930 <_malloc_r+0x20>
 800999c:	4622      	mov	r2, r4
 800999e:	6864      	ldr	r4, [r4, #4]
 80099a0:	e7cc      	b.n	800993c <_malloc_r+0x2c>
 80099a2:	1cc4      	adds	r4, r0, #3
 80099a4:	f024 0403 	bic.w	r4, r4, #3
 80099a8:	42a0      	cmp	r0, r4
 80099aa:	d0e3      	beq.n	8009974 <_malloc_r+0x64>
 80099ac:	1a21      	subs	r1, r4, r0
 80099ae:	4630      	mov	r0, r6
 80099b0:	f000 f87e 	bl	8009ab0 <_sbrk_r>
 80099b4:	3001      	adds	r0, #1
 80099b6:	d1dd      	bne.n	8009974 <_malloc_r+0x64>
 80099b8:	e7cf      	b.n	800995a <_malloc_r+0x4a>
 80099ba:	bf00      	nop
 80099bc:	200021d8 	.word	0x200021d8
 80099c0:	200021dc 	.word	0x200021dc

080099c4 <_puts_r>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	460e      	mov	r6, r1
 80099c8:	4605      	mov	r5, r0
 80099ca:	b118      	cbz	r0, 80099d4 <_puts_r+0x10>
 80099cc:	6983      	ldr	r3, [r0, #24]
 80099ce:	b90b      	cbnz	r3, 80099d4 <_puts_r+0x10>
 80099d0:	f000 faa0 	bl	8009f14 <__sinit>
 80099d4:	69ab      	ldr	r3, [r5, #24]
 80099d6:	68ac      	ldr	r4, [r5, #8]
 80099d8:	b913      	cbnz	r3, 80099e0 <_puts_r+0x1c>
 80099da:	4628      	mov	r0, r5
 80099dc:	f000 fa9a 	bl	8009f14 <__sinit>
 80099e0:	4b2c      	ldr	r3, [pc, #176]	; (8009a94 <_puts_r+0xd0>)
 80099e2:	429c      	cmp	r4, r3
 80099e4:	d120      	bne.n	8009a28 <_puts_r+0x64>
 80099e6:	686c      	ldr	r4, [r5, #4]
 80099e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ea:	07db      	lsls	r3, r3, #31
 80099ec:	d405      	bmi.n	80099fa <_puts_r+0x36>
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	0598      	lsls	r0, r3, #22
 80099f2:	d402      	bmi.n	80099fa <_puts_r+0x36>
 80099f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099f6:	f000 fb2b 	bl	800a050 <__retarget_lock_acquire_recursive>
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	0719      	lsls	r1, r3, #28
 80099fe:	d51d      	bpl.n	8009a3c <_puts_r+0x78>
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	b1db      	cbz	r3, 8009a3c <_puts_r+0x78>
 8009a04:	3e01      	subs	r6, #1
 8009a06:	68a3      	ldr	r3, [r4, #8]
 8009a08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	60a3      	str	r3, [r4, #8]
 8009a10:	bb39      	cbnz	r1, 8009a62 <_puts_r+0x9e>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	da38      	bge.n	8009a88 <_puts_r+0xc4>
 8009a16:	4622      	mov	r2, r4
 8009a18:	210a      	movs	r1, #10
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 f8a0 	bl	8009b60 <__swbuf_r>
 8009a20:	3001      	adds	r0, #1
 8009a22:	d011      	beq.n	8009a48 <_puts_r+0x84>
 8009a24:	250a      	movs	r5, #10
 8009a26:	e011      	b.n	8009a4c <_puts_r+0x88>
 8009a28:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <_puts_r+0xd4>)
 8009a2a:	429c      	cmp	r4, r3
 8009a2c:	d101      	bne.n	8009a32 <_puts_r+0x6e>
 8009a2e:	68ac      	ldr	r4, [r5, #8]
 8009a30:	e7da      	b.n	80099e8 <_puts_r+0x24>
 8009a32:	4b1a      	ldr	r3, [pc, #104]	; (8009a9c <_puts_r+0xd8>)
 8009a34:	429c      	cmp	r4, r3
 8009a36:	bf08      	it	eq
 8009a38:	68ec      	ldreq	r4, [r5, #12]
 8009a3a:	e7d5      	b.n	80099e8 <_puts_r+0x24>
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f000 f8e0 	bl	8009c04 <__swsetup_r>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d0dd      	beq.n	8009a04 <_puts_r+0x40>
 8009a48:	f04f 35ff 	mov.w	r5, #4294967295
 8009a4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a4e:	07da      	lsls	r2, r3, #31
 8009a50:	d405      	bmi.n	8009a5e <_puts_r+0x9a>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	059b      	lsls	r3, r3, #22
 8009a56:	d402      	bmi.n	8009a5e <_puts_r+0x9a>
 8009a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5a:	f000 fafa 	bl	800a052 <__retarget_lock_release_recursive>
 8009a5e:	4628      	mov	r0, r5
 8009a60:	bd70      	pop	{r4, r5, r6, pc}
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da04      	bge.n	8009a70 <_puts_r+0xac>
 8009a66:	69a2      	ldr	r2, [r4, #24]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	dc06      	bgt.n	8009a7a <_puts_r+0xb6>
 8009a6c:	290a      	cmp	r1, #10
 8009a6e:	d004      	beq.n	8009a7a <_puts_r+0xb6>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	6022      	str	r2, [r4, #0]
 8009a76:	7019      	strb	r1, [r3, #0]
 8009a78:	e7c5      	b.n	8009a06 <_puts_r+0x42>
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f000 f86f 	bl	8009b60 <__swbuf_r>
 8009a82:	3001      	adds	r0, #1
 8009a84:	d1bf      	bne.n	8009a06 <_puts_r+0x42>
 8009a86:	e7df      	b.n	8009a48 <_puts_r+0x84>
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	250a      	movs	r5, #10
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	6022      	str	r2, [r4, #0]
 8009a90:	701d      	strb	r5, [r3, #0]
 8009a92:	e7db      	b.n	8009a4c <_puts_r+0x88>
 8009a94:	0800be04 	.word	0x0800be04
 8009a98:	0800be24 	.word	0x0800be24
 8009a9c:	0800bde4 	.word	0x0800bde4

08009aa0 <puts>:
 8009aa0:	4b02      	ldr	r3, [pc, #8]	; (8009aac <puts+0xc>)
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	f7ff bf8d 	b.w	80099c4 <_puts_r>
 8009aaa:	bf00      	nop
 8009aac:	2000012c 	.word	0x2000012c

08009ab0 <_sbrk_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d06      	ldr	r5, [pc, #24]	; (8009acc <_sbrk_r+0x1c>)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	602b      	str	r3, [r5, #0]
 8009abc:	f7f8 fca8 	bl	8002410 <_sbrk>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_sbrk_r+0x1a>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_sbrk_r+0x1a>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	20002c68 	.word	0x20002c68

08009ad0 <sniprintf>:
 8009ad0:	b40c      	push	{r2, r3}
 8009ad2:	b530      	push	{r4, r5, lr}
 8009ad4:	4b17      	ldr	r3, [pc, #92]	; (8009b34 <sniprintf+0x64>)
 8009ad6:	1e0c      	subs	r4, r1, #0
 8009ad8:	681d      	ldr	r5, [r3, #0]
 8009ada:	b09d      	sub	sp, #116	; 0x74
 8009adc:	da08      	bge.n	8009af0 <sniprintf+0x20>
 8009ade:	238b      	movs	r3, #139	; 0x8b
 8009ae0:	602b      	str	r3, [r5, #0]
 8009ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae6:	b01d      	add	sp, #116	; 0x74
 8009ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009aec:	b002      	add	sp, #8
 8009aee:	4770      	bx	lr
 8009af0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009af4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009af8:	bf14      	ite	ne
 8009afa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009afe:	4623      	moveq	r3, r4
 8009b00:	9304      	str	r3, [sp, #16]
 8009b02:	9307      	str	r3, [sp, #28]
 8009b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b08:	9002      	str	r0, [sp, #8]
 8009b0a:	9006      	str	r0, [sp, #24]
 8009b0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b12:	ab21      	add	r3, sp, #132	; 0x84
 8009b14:	a902      	add	r1, sp, #8
 8009b16:	4628      	mov	r0, r5
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	f000 fb67 	bl	800a1ec <_svfiprintf_r>
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	bfbc      	itt	lt
 8009b22:	238b      	movlt	r3, #139	; 0x8b
 8009b24:	602b      	strlt	r3, [r5, #0]
 8009b26:	2c00      	cmp	r4, #0
 8009b28:	d0dd      	beq.n	8009ae6 <sniprintf+0x16>
 8009b2a:	9b02      	ldr	r3, [sp, #8]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	701a      	strb	r2, [r3, #0]
 8009b30:	e7d9      	b.n	8009ae6 <sniprintf+0x16>
 8009b32:	bf00      	nop
 8009b34:	2000012c 	.word	0x2000012c

08009b38 <strncpy>:
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	3901      	subs	r1, #1
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	b132      	cbz	r2, 8009b4e <strncpy+0x16>
 8009b40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009b44:	f803 4b01 	strb.w	r4, [r3], #1
 8009b48:	3a01      	subs	r2, #1
 8009b4a:	2c00      	cmp	r4, #0
 8009b4c:	d1f7      	bne.n	8009b3e <strncpy+0x6>
 8009b4e:	441a      	add	r2, r3
 8009b50:	2100      	movs	r1, #0
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d100      	bne.n	8009b58 <strncpy+0x20>
 8009b56:	bd10      	pop	{r4, pc}
 8009b58:	f803 1b01 	strb.w	r1, [r3], #1
 8009b5c:	e7f9      	b.n	8009b52 <strncpy+0x1a>
	...

08009b60 <__swbuf_r>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	460e      	mov	r6, r1
 8009b64:	4614      	mov	r4, r2
 8009b66:	4605      	mov	r5, r0
 8009b68:	b118      	cbz	r0, 8009b72 <__swbuf_r+0x12>
 8009b6a:	6983      	ldr	r3, [r0, #24]
 8009b6c:	b90b      	cbnz	r3, 8009b72 <__swbuf_r+0x12>
 8009b6e:	f000 f9d1 	bl	8009f14 <__sinit>
 8009b72:	4b21      	ldr	r3, [pc, #132]	; (8009bf8 <__swbuf_r+0x98>)
 8009b74:	429c      	cmp	r4, r3
 8009b76:	d12b      	bne.n	8009bd0 <__swbuf_r+0x70>
 8009b78:	686c      	ldr	r4, [r5, #4]
 8009b7a:	69a3      	ldr	r3, [r4, #24]
 8009b7c:	60a3      	str	r3, [r4, #8]
 8009b7e:	89a3      	ldrh	r3, [r4, #12]
 8009b80:	071a      	lsls	r2, r3, #28
 8009b82:	d52f      	bpl.n	8009be4 <__swbuf_r+0x84>
 8009b84:	6923      	ldr	r3, [r4, #16]
 8009b86:	b36b      	cbz	r3, 8009be4 <__swbuf_r+0x84>
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	6820      	ldr	r0, [r4, #0]
 8009b8c:	1ac0      	subs	r0, r0, r3
 8009b8e:	6963      	ldr	r3, [r4, #20]
 8009b90:	b2f6      	uxtb	r6, r6
 8009b92:	4283      	cmp	r3, r0
 8009b94:	4637      	mov	r7, r6
 8009b96:	dc04      	bgt.n	8009ba2 <__swbuf_r+0x42>
 8009b98:	4621      	mov	r1, r4
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f000 f926 	bl	8009dec <_fflush_r>
 8009ba0:	bb30      	cbnz	r0, 8009bf0 <__swbuf_r+0x90>
 8009ba2:	68a3      	ldr	r3, [r4, #8]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	60a3      	str	r3, [r4, #8]
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	6022      	str	r2, [r4, #0]
 8009bae:	701e      	strb	r6, [r3, #0]
 8009bb0:	6963      	ldr	r3, [r4, #20]
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	4283      	cmp	r3, r0
 8009bb6:	d004      	beq.n	8009bc2 <__swbuf_r+0x62>
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	07db      	lsls	r3, r3, #31
 8009bbc:	d506      	bpl.n	8009bcc <__swbuf_r+0x6c>
 8009bbe:	2e0a      	cmp	r6, #10
 8009bc0:	d104      	bne.n	8009bcc <__swbuf_r+0x6c>
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f000 f911 	bl	8009dec <_fflush_r>
 8009bca:	b988      	cbnz	r0, 8009bf0 <__swbuf_r+0x90>
 8009bcc:	4638      	mov	r0, r7
 8009bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd0:	4b0a      	ldr	r3, [pc, #40]	; (8009bfc <__swbuf_r+0x9c>)
 8009bd2:	429c      	cmp	r4, r3
 8009bd4:	d101      	bne.n	8009bda <__swbuf_r+0x7a>
 8009bd6:	68ac      	ldr	r4, [r5, #8]
 8009bd8:	e7cf      	b.n	8009b7a <__swbuf_r+0x1a>
 8009bda:	4b09      	ldr	r3, [pc, #36]	; (8009c00 <__swbuf_r+0xa0>)
 8009bdc:	429c      	cmp	r4, r3
 8009bde:	bf08      	it	eq
 8009be0:	68ec      	ldreq	r4, [r5, #12]
 8009be2:	e7ca      	b.n	8009b7a <__swbuf_r+0x1a>
 8009be4:	4621      	mov	r1, r4
 8009be6:	4628      	mov	r0, r5
 8009be8:	f000 f80c 	bl	8009c04 <__swsetup_r>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d0cb      	beq.n	8009b88 <__swbuf_r+0x28>
 8009bf0:	f04f 37ff 	mov.w	r7, #4294967295
 8009bf4:	e7ea      	b.n	8009bcc <__swbuf_r+0x6c>
 8009bf6:	bf00      	nop
 8009bf8:	0800be04 	.word	0x0800be04
 8009bfc:	0800be24 	.word	0x0800be24
 8009c00:	0800bde4 	.word	0x0800bde4

08009c04 <__swsetup_r>:
 8009c04:	4b32      	ldr	r3, [pc, #200]	; (8009cd0 <__swsetup_r+0xcc>)
 8009c06:	b570      	push	{r4, r5, r6, lr}
 8009c08:	681d      	ldr	r5, [r3, #0]
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	b125      	cbz	r5, 8009c1a <__swsetup_r+0x16>
 8009c10:	69ab      	ldr	r3, [r5, #24]
 8009c12:	b913      	cbnz	r3, 8009c1a <__swsetup_r+0x16>
 8009c14:	4628      	mov	r0, r5
 8009c16:	f000 f97d 	bl	8009f14 <__sinit>
 8009c1a:	4b2e      	ldr	r3, [pc, #184]	; (8009cd4 <__swsetup_r+0xd0>)
 8009c1c:	429c      	cmp	r4, r3
 8009c1e:	d10f      	bne.n	8009c40 <__swsetup_r+0x3c>
 8009c20:	686c      	ldr	r4, [r5, #4]
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c28:	0719      	lsls	r1, r3, #28
 8009c2a:	d42c      	bmi.n	8009c86 <__swsetup_r+0x82>
 8009c2c:	06dd      	lsls	r5, r3, #27
 8009c2e:	d411      	bmi.n	8009c54 <__swsetup_r+0x50>
 8009c30:	2309      	movs	r3, #9
 8009c32:	6033      	str	r3, [r6, #0]
 8009c34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3e:	e03e      	b.n	8009cbe <__swsetup_r+0xba>
 8009c40:	4b25      	ldr	r3, [pc, #148]	; (8009cd8 <__swsetup_r+0xd4>)
 8009c42:	429c      	cmp	r4, r3
 8009c44:	d101      	bne.n	8009c4a <__swsetup_r+0x46>
 8009c46:	68ac      	ldr	r4, [r5, #8]
 8009c48:	e7eb      	b.n	8009c22 <__swsetup_r+0x1e>
 8009c4a:	4b24      	ldr	r3, [pc, #144]	; (8009cdc <__swsetup_r+0xd8>)
 8009c4c:	429c      	cmp	r4, r3
 8009c4e:	bf08      	it	eq
 8009c50:	68ec      	ldreq	r4, [r5, #12]
 8009c52:	e7e6      	b.n	8009c22 <__swsetup_r+0x1e>
 8009c54:	0758      	lsls	r0, r3, #29
 8009c56:	d512      	bpl.n	8009c7e <__swsetup_r+0x7a>
 8009c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c5a:	b141      	cbz	r1, 8009c6e <__swsetup_r+0x6a>
 8009c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c60:	4299      	cmp	r1, r3
 8009c62:	d002      	beq.n	8009c6a <__swsetup_r+0x66>
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff fe03 	bl	8009870 <_free_r>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c74:	81a3      	strh	r3, [r4, #12]
 8009c76:	2300      	movs	r3, #0
 8009c78:	6063      	str	r3, [r4, #4]
 8009c7a:	6923      	ldr	r3, [r4, #16]
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	f043 0308 	orr.w	r3, r3, #8
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	b94b      	cbnz	r3, 8009c9e <__swsetup_r+0x9a>
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c94:	d003      	beq.n	8009c9e <__swsetup_r+0x9a>
 8009c96:	4621      	mov	r1, r4
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f000 f9ff 	bl	800a09c <__smakebuf_r>
 8009c9e:	89a0      	ldrh	r0, [r4, #12]
 8009ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ca4:	f010 0301 	ands.w	r3, r0, #1
 8009ca8:	d00a      	beq.n	8009cc0 <__swsetup_r+0xbc>
 8009caa:	2300      	movs	r3, #0
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	6963      	ldr	r3, [r4, #20]
 8009cb0:	425b      	negs	r3, r3
 8009cb2:	61a3      	str	r3, [r4, #24]
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	b943      	cbnz	r3, 8009cca <__swsetup_r+0xc6>
 8009cb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cbc:	d1ba      	bne.n	8009c34 <__swsetup_r+0x30>
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}
 8009cc0:	0781      	lsls	r1, r0, #30
 8009cc2:	bf58      	it	pl
 8009cc4:	6963      	ldrpl	r3, [r4, #20]
 8009cc6:	60a3      	str	r3, [r4, #8]
 8009cc8:	e7f4      	b.n	8009cb4 <__swsetup_r+0xb0>
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e7f7      	b.n	8009cbe <__swsetup_r+0xba>
 8009cce:	bf00      	nop
 8009cd0:	2000012c 	.word	0x2000012c
 8009cd4:	0800be04 	.word	0x0800be04
 8009cd8:	0800be24 	.word	0x0800be24
 8009cdc:	0800bde4 	.word	0x0800bde4

08009ce0 <__sflush_r>:
 8009ce0:	898a      	ldrh	r2, [r1, #12]
 8009ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	0710      	lsls	r0, r2, #28
 8009cea:	460c      	mov	r4, r1
 8009cec:	d458      	bmi.n	8009da0 <__sflush_r+0xc0>
 8009cee:	684b      	ldr	r3, [r1, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	dc05      	bgt.n	8009d00 <__sflush_r+0x20>
 8009cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	dc02      	bgt.n	8009d00 <__sflush_r+0x20>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d02:	2e00      	cmp	r6, #0
 8009d04:	d0f9      	beq.n	8009cfa <__sflush_r+0x1a>
 8009d06:	2300      	movs	r3, #0
 8009d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d0c:	682f      	ldr	r7, [r5, #0]
 8009d0e:	602b      	str	r3, [r5, #0]
 8009d10:	d032      	beq.n	8009d78 <__sflush_r+0x98>
 8009d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	075a      	lsls	r2, r3, #29
 8009d18:	d505      	bpl.n	8009d26 <__sflush_r+0x46>
 8009d1a:	6863      	ldr	r3, [r4, #4]
 8009d1c:	1ac0      	subs	r0, r0, r3
 8009d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d20:	b10b      	cbz	r3, 8009d26 <__sflush_r+0x46>
 8009d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d24:	1ac0      	subs	r0, r0, r3
 8009d26:	2300      	movs	r3, #0
 8009d28:	4602      	mov	r2, r0
 8009d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d2c:	6a21      	ldr	r1, [r4, #32]
 8009d2e:	4628      	mov	r0, r5
 8009d30:	47b0      	blx	r6
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	d106      	bne.n	8009d46 <__sflush_r+0x66>
 8009d38:	6829      	ldr	r1, [r5, #0]
 8009d3a:	291d      	cmp	r1, #29
 8009d3c:	d82c      	bhi.n	8009d98 <__sflush_r+0xb8>
 8009d3e:	4a2a      	ldr	r2, [pc, #168]	; (8009de8 <__sflush_r+0x108>)
 8009d40:	40ca      	lsrs	r2, r1
 8009d42:	07d6      	lsls	r6, r2, #31
 8009d44:	d528      	bpl.n	8009d98 <__sflush_r+0xb8>
 8009d46:	2200      	movs	r2, #0
 8009d48:	6062      	str	r2, [r4, #4]
 8009d4a:	04d9      	lsls	r1, r3, #19
 8009d4c:	6922      	ldr	r2, [r4, #16]
 8009d4e:	6022      	str	r2, [r4, #0]
 8009d50:	d504      	bpl.n	8009d5c <__sflush_r+0x7c>
 8009d52:	1c42      	adds	r2, r0, #1
 8009d54:	d101      	bne.n	8009d5a <__sflush_r+0x7a>
 8009d56:	682b      	ldr	r3, [r5, #0]
 8009d58:	b903      	cbnz	r3, 8009d5c <__sflush_r+0x7c>
 8009d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d5e:	602f      	str	r7, [r5, #0]
 8009d60:	2900      	cmp	r1, #0
 8009d62:	d0ca      	beq.n	8009cfa <__sflush_r+0x1a>
 8009d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d68:	4299      	cmp	r1, r3
 8009d6a:	d002      	beq.n	8009d72 <__sflush_r+0x92>
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f7ff fd7f 	bl	8009870 <_free_r>
 8009d72:	2000      	movs	r0, #0
 8009d74:	6360      	str	r0, [r4, #52]	; 0x34
 8009d76:	e7c1      	b.n	8009cfc <__sflush_r+0x1c>
 8009d78:	6a21      	ldr	r1, [r4, #32]
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b0      	blx	r6
 8009d80:	1c41      	adds	r1, r0, #1
 8009d82:	d1c7      	bne.n	8009d14 <__sflush_r+0x34>
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0c4      	beq.n	8009d14 <__sflush_r+0x34>
 8009d8a:	2b1d      	cmp	r3, #29
 8009d8c:	d001      	beq.n	8009d92 <__sflush_r+0xb2>
 8009d8e:	2b16      	cmp	r3, #22
 8009d90:	d101      	bne.n	8009d96 <__sflush_r+0xb6>
 8009d92:	602f      	str	r7, [r5, #0]
 8009d94:	e7b1      	b.n	8009cfa <__sflush_r+0x1a>
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d9c:	81a3      	strh	r3, [r4, #12]
 8009d9e:	e7ad      	b.n	8009cfc <__sflush_r+0x1c>
 8009da0:	690f      	ldr	r7, [r1, #16]
 8009da2:	2f00      	cmp	r7, #0
 8009da4:	d0a9      	beq.n	8009cfa <__sflush_r+0x1a>
 8009da6:	0793      	lsls	r3, r2, #30
 8009da8:	680e      	ldr	r6, [r1, #0]
 8009daa:	bf08      	it	eq
 8009dac:	694b      	ldreq	r3, [r1, #20]
 8009dae:	600f      	str	r7, [r1, #0]
 8009db0:	bf18      	it	ne
 8009db2:	2300      	movne	r3, #0
 8009db4:	eba6 0807 	sub.w	r8, r6, r7
 8009db8:	608b      	str	r3, [r1, #8]
 8009dba:	f1b8 0f00 	cmp.w	r8, #0
 8009dbe:	dd9c      	ble.n	8009cfa <__sflush_r+0x1a>
 8009dc0:	6a21      	ldr	r1, [r4, #32]
 8009dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dc4:	4643      	mov	r3, r8
 8009dc6:	463a      	mov	r2, r7
 8009dc8:	4628      	mov	r0, r5
 8009dca:	47b0      	blx	r6
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	dc06      	bgt.n	8009dde <__sflush_r+0xfe>
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd6:	81a3      	strh	r3, [r4, #12]
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	e78e      	b.n	8009cfc <__sflush_r+0x1c>
 8009dde:	4407      	add	r7, r0
 8009de0:	eba8 0800 	sub.w	r8, r8, r0
 8009de4:	e7e9      	b.n	8009dba <__sflush_r+0xda>
 8009de6:	bf00      	nop
 8009de8:	20400001 	.word	0x20400001

08009dec <_fflush_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	690b      	ldr	r3, [r1, #16]
 8009df0:	4605      	mov	r5, r0
 8009df2:	460c      	mov	r4, r1
 8009df4:	b913      	cbnz	r3, 8009dfc <_fflush_r+0x10>
 8009df6:	2500      	movs	r5, #0
 8009df8:	4628      	mov	r0, r5
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	b118      	cbz	r0, 8009e06 <_fflush_r+0x1a>
 8009dfe:	6983      	ldr	r3, [r0, #24]
 8009e00:	b90b      	cbnz	r3, 8009e06 <_fflush_r+0x1a>
 8009e02:	f000 f887 	bl	8009f14 <__sinit>
 8009e06:	4b14      	ldr	r3, [pc, #80]	; (8009e58 <_fflush_r+0x6c>)
 8009e08:	429c      	cmp	r4, r3
 8009e0a:	d11b      	bne.n	8009e44 <_fflush_r+0x58>
 8009e0c:	686c      	ldr	r4, [r5, #4]
 8009e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0ef      	beq.n	8009df6 <_fflush_r+0xa>
 8009e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e18:	07d0      	lsls	r0, r2, #31
 8009e1a:	d404      	bmi.n	8009e26 <_fflush_r+0x3a>
 8009e1c:	0599      	lsls	r1, r3, #22
 8009e1e:	d402      	bmi.n	8009e26 <_fflush_r+0x3a>
 8009e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e22:	f000 f915 	bl	800a050 <__retarget_lock_acquire_recursive>
 8009e26:	4628      	mov	r0, r5
 8009e28:	4621      	mov	r1, r4
 8009e2a:	f7ff ff59 	bl	8009ce0 <__sflush_r>
 8009e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e30:	07da      	lsls	r2, r3, #31
 8009e32:	4605      	mov	r5, r0
 8009e34:	d4e0      	bmi.n	8009df8 <_fflush_r+0xc>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	059b      	lsls	r3, r3, #22
 8009e3a:	d4dd      	bmi.n	8009df8 <_fflush_r+0xc>
 8009e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e3e:	f000 f908 	bl	800a052 <__retarget_lock_release_recursive>
 8009e42:	e7d9      	b.n	8009df8 <_fflush_r+0xc>
 8009e44:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <_fflush_r+0x70>)
 8009e46:	429c      	cmp	r4, r3
 8009e48:	d101      	bne.n	8009e4e <_fflush_r+0x62>
 8009e4a:	68ac      	ldr	r4, [r5, #8]
 8009e4c:	e7df      	b.n	8009e0e <_fflush_r+0x22>
 8009e4e:	4b04      	ldr	r3, [pc, #16]	; (8009e60 <_fflush_r+0x74>)
 8009e50:	429c      	cmp	r4, r3
 8009e52:	bf08      	it	eq
 8009e54:	68ec      	ldreq	r4, [r5, #12]
 8009e56:	e7da      	b.n	8009e0e <_fflush_r+0x22>
 8009e58:	0800be04 	.word	0x0800be04
 8009e5c:	0800be24 	.word	0x0800be24
 8009e60:	0800bde4 	.word	0x0800bde4

08009e64 <std>:
 8009e64:	2300      	movs	r3, #0
 8009e66:	b510      	push	{r4, lr}
 8009e68:	4604      	mov	r4, r0
 8009e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e72:	6083      	str	r3, [r0, #8]
 8009e74:	8181      	strh	r1, [r0, #12]
 8009e76:	6643      	str	r3, [r0, #100]	; 0x64
 8009e78:	81c2      	strh	r2, [r0, #14]
 8009e7a:	6183      	str	r3, [r0, #24]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	2208      	movs	r2, #8
 8009e80:	305c      	adds	r0, #92	; 0x5c
 8009e82:	f7ff fced 	bl	8009860 <memset>
 8009e86:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <std+0x38>)
 8009e88:	6263      	str	r3, [r4, #36]	; 0x24
 8009e8a:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <std+0x3c>)
 8009e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e8e:	4b05      	ldr	r3, [pc, #20]	; (8009ea4 <std+0x40>)
 8009e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e92:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <std+0x44>)
 8009e94:	6224      	str	r4, [r4, #32]
 8009e96:	6323      	str	r3, [r4, #48]	; 0x30
 8009e98:	bd10      	pop	{r4, pc}
 8009e9a:	bf00      	nop
 8009e9c:	0800a715 	.word	0x0800a715
 8009ea0:	0800a737 	.word	0x0800a737
 8009ea4:	0800a76f 	.word	0x0800a76f
 8009ea8:	0800a793 	.word	0x0800a793

08009eac <_cleanup_r>:
 8009eac:	4901      	ldr	r1, [pc, #4]	; (8009eb4 <_cleanup_r+0x8>)
 8009eae:	f000 b8af 	b.w	800a010 <_fwalk_reent>
 8009eb2:	bf00      	nop
 8009eb4:	08009ded 	.word	0x08009ded

08009eb8 <__sfmoreglue>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	1e4a      	subs	r2, r1, #1
 8009ebc:	2568      	movs	r5, #104	; 0x68
 8009ebe:	4355      	muls	r5, r2
 8009ec0:	460e      	mov	r6, r1
 8009ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ec6:	f7ff fd23 	bl	8009910 <_malloc_r>
 8009eca:	4604      	mov	r4, r0
 8009ecc:	b140      	cbz	r0, 8009ee0 <__sfmoreglue+0x28>
 8009ece:	2100      	movs	r1, #0
 8009ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ed4:	300c      	adds	r0, #12
 8009ed6:	60a0      	str	r0, [r4, #8]
 8009ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009edc:	f7ff fcc0 	bl	8009860 <memset>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}

08009ee4 <__sfp_lock_acquire>:
 8009ee4:	4801      	ldr	r0, [pc, #4]	; (8009eec <__sfp_lock_acquire+0x8>)
 8009ee6:	f000 b8b3 	b.w	800a050 <__retarget_lock_acquire_recursive>
 8009eea:	bf00      	nop
 8009eec:	20002c64 	.word	0x20002c64

08009ef0 <__sfp_lock_release>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__sfp_lock_release+0x8>)
 8009ef2:	f000 b8ae 	b.w	800a052 <__retarget_lock_release_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	20002c64 	.word	0x20002c64

08009efc <__sinit_lock_acquire>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__sinit_lock_acquire+0x8>)
 8009efe:	f000 b8a7 	b.w	800a050 <__retarget_lock_acquire_recursive>
 8009f02:	bf00      	nop
 8009f04:	20002c5f 	.word	0x20002c5f

08009f08 <__sinit_lock_release>:
 8009f08:	4801      	ldr	r0, [pc, #4]	; (8009f10 <__sinit_lock_release+0x8>)
 8009f0a:	f000 b8a2 	b.w	800a052 <__retarget_lock_release_recursive>
 8009f0e:	bf00      	nop
 8009f10:	20002c5f 	.word	0x20002c5f

08009f14 <__sinit>:
 8009f14:	b510      	push	{r4, lr}
 8009f16:	4604      	mov	r4, r0
 8009f18:	f7ff fff0 	bl	8009efc <__sinit_lock_acquire>
 8009f1c:	69a3      	ldr	r3, [r4, #24]
 8009f1e:	b11b      	cbz	r3, 8009f28 <__sinit+0x14>
 8009f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f24:	f7ff bff0 	b.w	8009f08 <__sinit_lock_release>
 8009f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8009f2e:	4b13      	ldr	r3, [pc, #76]	; (8009f7c <__sinit+0x68>)
 8009f30:	4a13      	ldr	r2, [pc, #76]	; (8009f80 <__sinit+0x6c>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f36:	42a3      	cmp	r3, r4
 8009f38:	bf04      	itt	eq
 8009f3a:	2301      	moveq	r3, #1
 8009f3c:	61a3      	streq	r3, [r4, #24]
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f000 f820 	bl	8009f84 <__sfp>
 8009f44:	6060      	str	r0, [r4, #4]
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 f81c 	bl	8009f84 <__sfp>
 8009f4c:	60a0      	str	r0, [r4, #8]
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f000 f818 	bl	8009f84 <__sfp>
 8009f54:	2200      	movs	r2, #0
 8009f56:	60e0      	str	r0, [r4, #12]
 8009f58:	2104      	movs	r1, #4
 8009f5a:	6860      	ldr	r0, [r4, #4]
 8009f5c:	f7ff ff82 	bl	8009e64 <std>
 8009f60:	68a0      	ldr	r0, [r4, #8]
 8009f62:	2201      	movs	r2, #1
 8009f64:	2109      	movs	r1, #9
 8009f66:	f7ff ff7d 	bl	8009e64 <std>
 8009f6a:	68e0      	ldr	r0, [r4, #12]
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	2112      	movs	r1, #18
 8009f70:	f7ff ff78 	bl	8009e64 <std>
 8009f74:	2301      	movs	r3, #1
 8009f76:	61a3      	str	r3, [r4, #24]
 8009f78:	e7d2      	b.n	8009f20 <__sinit+0xc>
 8009f7a:	bf00      	nop
 8009f7c:	0800bde0 	.word	0x0800bde0
 8009f80:	08009ead 	.word	0x08009ead

08009f84 <__sfp>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	4607      	mov	r7, r0
 8009f88:	f7ff ffac 	bl	8009ee4 <__sfp_lock_acquire>
 8009f8c:	4b1e      	ldr	r3, [pc, #120]	; (800a008 <__sfp+0x84>)
 8009f8e:	681e      	ldr	r6, [r3, #0]
 8009f90:	69b3      	ldr	r3, [r6, #24]
 8009f92:	b913      	cbnz	r3, 8009f9a <__sfp+0x16>
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7ff ffbd 	bl	8009f14 <__sinit>
 8009f9a:	3648      	adds	r6, #72	; 0x48
 8009f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	d503      	bpl.n	8009fac <__sfp+0x28>
 8009fa4:	6833      	ldr	r3, [r6, #0]
 8009fa6:	b30b      	cbz	r3, 8009fec <__sfp+0x68>
 8009fa8:	6836      	ldr	r6, [r6, #0]
 8009faa:	e7f7      	b.n	8009f9c <__sfp+0x18>
 8009fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fb0:	b9d5      	cbnz	r5, 8009fe8 <__sfp+0x64>
 8009fb2:	4b16      	ldr	r3, [pc, #88]	; (800a00c <__sfp+0x88>)
 8009fb4:	60e3      	str	r3, [r4, #12]
 8009fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fba:	6665      	str	r5, [r4, #100]	; 0x64
 8009fbc:	f000 f847 	bl	800a04e <__retarget_lock_init_recursive>
 8009fc0:	f7ff ff96 	bl	8009ef0 <__sfp_lock_release>
 8009fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fcc:	6025      	str	r5, [r4, #0]
 8009fce:	61a5      	str	r5, [r4, #24]
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fd8:	f7ff fc42 	bl	8009860 <memset>
 8009fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe8:	3468      	adds	r4, #104	; 0x68
 8009fea:	e7d9      	b.n	8009fa0 <__sfp+0x1c>
 8009fec:	2104      	movs	r1, #4
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f7ff ff62 	bl	8009eb8 <__sfmoreglue>
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	6030      	str	r0, [r6, #0]
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d1d5      	bne.n	8009fa8 <__sfp+0x24>
 8009ffc:	f7ff ff78 	bl	8009ef0 <__sfp_lock_release>
 800a000:	230c      	movs	r3, #12
 800a002:	603b      	str	r3, [r7, #0]
 800a004:	e7ee      	b.n	8009fe4 <__sfp+0x60>
 800a006:	bf00      	nop
 800a008:	0800bde0 	.word	0x0800bde0
 800a00c:	ffff0001 	.word	0xffff0001

0800a010 <_fwalk_reent>:
 800a010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a014:	4606      	mov	r6, r0
 800a016:	4688      	mov	r8, r1
 800a018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a01c:	2700      	movs	r7, #0
 800a01e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a022:	f1b9 0901 	subs.w	r9, r9, #1
 800a026:	d505      	bpl.n	800a034 <_fwalk_reent+0x24>
 800a028:	6824      	ldr	r4, [r4, #0]
 800a02a:	2c00      	cmp	r4, #0
 800a02c:	d1f7      	bne.n	800a01e <_fwalk_reent+0xe>
 800a02e:	4638      	mov	r0, r7
 800a030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a034:	89ab      	ldrh	r3, [r5, #12]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d907      	bls.n	800a04a <_fwalk_reent+0x3a>
 800a03a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a03e:	3301      	adds	r3, #1
 800a040:	d003      	beq.n	800a04a <_fwalk_reent+0x3a>
 800a042:	4629      	mov	r1, r5
 800a044:	4630      	mov	r0, r6
 800a046:	47c0      	blx	r8
 800a048:	4307      	orrs	r7, r0
 800a04a:	3568      	adds	r5, #104	; 0x68
 800a04c:	e7e9      	b.n	800a022 <_fwalk_reent+0x12>

0800a04e <__retarget_lock_init_recursive>:
 800a04e:	4770      	bx	lr

0800a050 <__retarget_lock_acquire_recursive>:
 800a050:	4770      	bx	lr

0800a052 <__retarget_lock_release_recursive>:
 800a052:	4770      	bx	lr

0800a054 <__swhatbuf_r>:
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	460e      	mov	r6, r1
 800a058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a05c:	2900      	cmp	r1, #0
 800a05e:	b096      	sub	sp, #88	; 0x58
 800a060:	4614      	mov	r4, r2
 800a062:	461d      	mov	r5, r3
 800a064:	da07      	bge.n	800a076 <__swhatbuf_r+0x22>
 800a066:	2300      	movs	r3, #0
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	89b3      	ldrh	r3, [r6, #12]
 800a06c:	061a      	lsls	r2, r3, #24
 800a06e:	d410      	bmi.n	800a092 <__swhatbuf_r+0x3e>
 800a070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a074:	e00e      	b.n	800a094 <__swhatbuf_r+0x40>
 800a076:	466a      	mov	r2, sp
 800a078:	f000 fbb2 	bl	800a7e0 <_fstat_r>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	dbf2      	blt.n	800a066 <__swhatbuf_r+0x12>
 800a080:	9a01      	ldr	r2, [sp, #4]
 800a082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a08a:	425a      	negs	r2, r3
 800a08c:	415a      	adcs	r2, r3
 800a08e:	602a      	str	r2, [r5, #0]
 800a090:	e7ee      	b.n	800a070 <__swhatbuf_r+0x1c>
 800a092:	2340      	movs	r3, #64	; 0x40
 800a094:	2000      	movs	r0, #0
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	b016      	add	sp, #88	; 0x58
 800a09a:	bd70      	pop	{r4, r5, r6, pc}

0800a09c <__smakebuf_r>:
 800a09c:	898b      	ldrh	r3, [r1, #12]
 800a09e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0a0:	079d      	lsls	r5, r3, #30
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	d507      	bpl.n	800a0b8 <__smakebuf_r+0x1c>
 800a0a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	6123      	str	r3, [r4, #16]
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	6163      	str	r3, [r4, #20]
 800a0b4:	b002      	add	sp, #8
 800a0b6:	bd70      	pop	{r4, r5, r6, pc}
 800a0b8:	ab01      	add	r3, sp, #4
 800a0ba:	466a      	mov	r2, sp
 800a0bc:	f7ff ffca 	bl	800a054 <__swhatbuf_r>
 800a0c0:	9900      	ldr	r1, [sp, #0]
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7ff fc23 	bl	8009910 <_malloc_r>
 800a0ca:	b948      	cbnz	r0, 800a0e0 <__smakebuf_r+0x44>
 800a0cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0d0:	059a      	lsls	r2, r3, #22
 800a0d2:	d4ef      	bmi.n	800a0b4 <__smakebuf_r+0x18>
 800a0d4:	f023 0303 	bic.w	r3, r3, #3
 800a0d8:	f043 0302 	orr.w	r3, r3, #2
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	e7e3      	b.n	800a0a8 <__smakebuf_r+0xc>
 800a0e0:	4b0d      	ldr	r3, [pc, #52]	; (800a118 <__smakebuf_r+0x7c>)
 800a0e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	6020      	str	r0, [r4, #0]
 800a0e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ec:	81a3      	strh	r3, [r4, #12]
 800a0ee:	9b00      	ldr	r3, [sp, #0]
 800a0f0:	6163      	str	r3, [r4, #20]
 800a0f2:	9b01      	ldr	r3, [sp, #4]
 800a0f4:	6120      	str	r0, [r4, #16]
 800a0f6:	b15b      	cbz	r3, 800a110 <__smakebuf_r+0x74>
 800a0f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f000 fb81 	bl	800a804 <_isatty_r>
 800a102:	b128      	cbz	r0, 800a110 <__smakebuf_r+0x74>
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	f023 0303 	bic.w	r3, r3, #3
 800a10a:	f043 0301 	orr.w	r3, r3, #1
 800a10e:	81a3      	strh	r3, [r4, #12]
 800a110:	89a0      	ldrh	r0, [r4, #12]
 800a112:	4305      	orrs	r5, r0
 800a114:	81a5      	strh	r5, [r4, #12]
 800a116:	e7cd      	b.n	800a0b4 <__smakebuf_r+0x18>
 800a118:	08009ead 	.word	0x08009ead

0800a11c <__malloc_lock>:
 800a11c:	4801      	ldr	r0, [pc, #4]	; (800a124 <__malloc_lock+0x8>)
 800a11e:	f7ff bf97 	b.w	800a050 <__retarget_lock_acquire_recursive>
 800a122:	bf00      	nop
 800a124:	20002c60 	.word	0x20002c60

0800a128 <__malloc_unlock>:
 800a128:	4801      	ldr	r0, [pc, #4]	; (800a130 <__malloc_unlock+0x8>)
 800a12a:	f7ff bf92 	b.w	800a052 <__retarget_lock_release_recursive>
 800a12e:	bf00      	nop
 800a130:	20002c60 	.word	0x20002c60

0800a134 <__ssputs_r>:
 800a134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a138:	688e      	ldr	r6, [r1, #8]
 800a13a:	429e      	cmp	r6, r3
 800a13c:	4682      	mov	sl, r0
 800a13e:	460c      	mov	r4, r1
 800a140:	4690      	mov	r8, r2
 800a142:	461f      	mov	r7, r3
 800a144:	d838      	bhi.n	800a1b8 <__ssputs_r+0x84>
 800a146:	898a      	ldrh	r2, [r1, #12]
 800a148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a14c:	d032      	beq.n	800a1b4 <__ssputs_r+0x80>
 800a14e:	6825      	ldr	r5, [r4, #0]
 800a150:	6909      	ldr	r1, [r1, #16]
 800a152:	eba5 0901 	sub.w	r9, r5, r1
 800a156:	6965      	ldr	r5, [r4, #20]
 800a158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a15c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a160:	3301      	adds	r3, #1
 800a162:	444b      	add	r3, r9
 800a164:	106d      	asrs	r5, r5, #1
 800a166:	429d      	cmp	r5, r3
 800a168:	bf38      	it	cc
 800a16a:	461d      	movcc	r5, r3
 800a16c:	0553      	lsls	r3, r2, #21
 800a16e:	d531      	bpl.n	800a1d4 <__ssputs_r+0xa0>
 800a170:	4629      	mov	r1, r5
 800a172:	f7ff fbcd 	bl	8009910 <_malloc_r>
 800a176:	4606      	mov	r6, r0
 800a178:	b950      	cbnz	r0, 800a190 <__ssputs_r+0x5c>
 800a17a:	230c      	movs	r3, #12
 800a17c:	f8ca 3000 	str.w	r3, [sl]
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a186:	81a3      	strh	r3, [r4, #12]
 800a188:	f04f 30ff 	mov.w	r0, #4294967295
 800a18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a190:	6921      	ldr	r1, [r4, #16]
 800a192:	464a      	mov	r2, r9
 800a194:	f000 fb58 	bl	800a848 <memcpy>
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	6126      	str	r6, [r4, #16]
 800a1a6:	6165      	str	r5, [r4, #20]
 800a1a8:	444e      	add	r6, r9
 800a1aa:	eba5 0509 	sub.w	r5, r5, r9
 800a1ae:	6026      	str	r6, [r4, #0]
 800a1b0:	60a5      	str	r5, [r4, #8]
 800a1b2:	463e      	mov	r6, r7
 800a1b4:	42be      	cmp	r6, r7
 800a1b6:	d900      	bls.n	800a1ba <__ssputs_r+0x86>
 800a1b8:	463e      	mov	r6, r7
 800a1ba:	4632      	mov	r2, r6
 800a1bc:	6820      	ldr	r0, [r4, #0]
 800a1be:	4641      	mov	r1, r8
 800a1c0:	f000 fb50 	bl	800a864 <memmove>
 800a1c4:	68a3      	ldr	r3, [r4, #8]
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	1b9b      	subs	r3, r3, r6
 800a1ca:	4432      	add	r2, r6
 800a1cc:	60a3      	str	r3, [r4, #8]
 800a1ce:	6022      	str	r2, [r4, #0]
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	e7db      	b.n	800a18c <__ssputs_r+0x58>
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	f000 fb5f 	bl	800a898 <_realloc_r>
 800a1da:	4606      	mov	r6, r0
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d1e1      	bne.n	800a1a4 <__ssputs_r+0x70>
 800a1e0:	6921      	ldr	r1, [r4, #16]
 800a1e2:	4650      	mov	r0, sl
 800a1e4:	f7ff fb44 	bl	8009870 <_free_r>
 800a1e8:	e7c7      	b.n	800a17a <__ssputs_r+0x46>
	...

0800a1ec <_svfiprintf_r>:
 800a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	4698      	mov	r8, r3
 800a1f2:	898b      	ldrh	r3, [r1, #12]
 800a1f4:	061b      	lsls	r3, r3, #24
 800a1f6:	b09d      	sub	sp, #116	; 0x74
 800a1f8:	4607      	mov	r7, r0
 800a1fa:	460d      	mov	r5, r1
 800a1fc:	4614      	mov	r4, r2
 800a1fe:	d50e      	bpl.n	800a21e <_svfiprintf_r+0x32>
 800a200:	690b      	ldr	r3, [r1, #16]
 800a202:	b963      	cbnz	r3, 800a21e <_svfiprintf_r+0x32>
 800a204:	2140      	movs	r1, #64	; 0x40
 800a206:	f7ff fb83 	bl	8009910 <_malloc_r>
 800a20a:	6028      	str	r0, [r5, #0]
 800a20c:	6128      	str	r0, [r5, #16]
 800a20e:	b920      	cbnz	r0, 800a21a <_svfiprintf_r+0x2e>
 800a210:	230c      	movs	r3, #12
 800a212:	603b      	str	r3, [r7, #0]
 800a214:	f04f 30ff 	mov.w	r0, #4294967295
 800a218:	e0d1      	b.n	800a3be <_svfiprintf_r+0x1d2>
 800a21a:	2340      	movs	r3, #64	; 0x40
 800a21c:	616b      	str	r3, [r5, #20]
 800a21e:	2300      	movs	r3, #0
 800a220:	9309      	str	r3, [sp, #36]	; 0x24
 800a222:	2320      	movs	r3, #32
 800a224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a228:	f8cd 800c 	str.w	r8, [sp, #12]
 800a22c:	2330      	movs	r3, #48	; 0x30
 800a22e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3d8 <_svfiprintf_r+0x1ec>
 800a232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a236:	f04f 0901 	mov.w	r9, #1
 800a23a:	4623      	mov	r3, r4
 800a23c:	469a      	mov	sl, r3
 800a23e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a242:	b10a      	cbz	r2, 800a248 <_svfiprintf_r+0x5c>
 800a244:	2a25      	cmp	r2, #37	; 0x25
 800a246:	d1f9      	bne.n	800a23c <_svfiprintf_r+0x50>
 800a248:	ebba 0b04 	subs.w	fp, sl, r4
 800a24c:	d00b      	beq.n	800a266 <_svfiprintf_r+0x7a>
 800a24e:	465b      	mov	r3, fp
 800a250:	4622      	mov	r2, r4
 800a252:	4629      	mov	r1, r5
 800a254:	4638      	mov	r0, r7
 800a256:	f7ff ff6d 	bl	800a134 <__ssputs_r>
 800a25a:	3001      	adds	r0, #1
 800a25c:	f000 80aa 	beq.w	800a3b4 <_svfiprintf_r+0x1c8>
 800a260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a262:	445a      	add	r2, fp
 800a264:	9209      	str	r2, [sp, #36]	; 0x24
 800a266:	f89a 3000 	ldrb.w	r3, [sl]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 80a2 	beq.w	800a3b4 <_svfiprintf_r+0x1c8>
 800a270:	2300      	movs	r3, #0
 800a272:	f04f 32ff 	mov.w	r2, #4294967295
 800a276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a27a:	f10a 0a01 	add.w	sl, sl, #1
 800a27e:	9304      	str	r3, [sp, #16]
 800a280:	9307      	str	r3, [sp, #28]
 800a282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a286:	931a      	str	r3, [sp, #104]	; 0x68
 800a288:	4654      	mov	r4, sl
 800a28a:	2205      	movs	r2, #5
 800a28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a290:	4851      	ldr	r0, [pc, #324]	; (800a3d8 <_svfiprintf_r+0x1ec>)
 800a292:	f7f5 ffad 	bl	80001f0 <memchr>
 800a296:	9a04      	ldr	r2, [sp, #16]
 800a298:	b9d8      	cbnz	r0, 800a2d2 <_svfiprintf_r+0xe6>
 800a29a:	06d0      	lsls	r0, r2, #27
 800a29c:	bf44      	itt	mi
 800a29e:	2320      	movmi	r3, #32
 800a2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2a4:	0711      	lsls	r1, r2, #28
 800a2a6:	bf44      	itt	mi
 800a2a8:	232b      	movmi	r3, #43	; 0x2b
 800a2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2b4:	d015      	beq.n	800a2e2 <_svfiprintf_r+0xf6>
 800a2b6:	9a07      	ldr	r2, [sp, #28]
 800a2b8:	4654      	mov	r4, sl
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	f04f 0c0a 	mov.w	ip, #10
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2c6:	3b30      	subs	r3, #48	; 0x30
 800a2c8:	2b09      	cmp	r3, #9
 800a2ca:	d94e      	bls.n	800a36a <_svfiprintf_r+0x17e>
 800a2cc:	b1b0      	cbz	r0, 800a2fc <_svfiprintf_r+0x110>
 800a2ce:	9207      	str	r2, [sp, #28]
 800a2d0:	e014      	b.n	800a2fc <_svfiprintf_r+0x110>
 800a2d2:	eba0 0308 	sub.w	r3, r0, r8
 800a2d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	9304      	str	r3, [sp, #16]
 800a2de:	46a2      	mov	sl, r4
 800a2e0:	e7d2      	b.n	800a288 <_svfiprintf_r+0x9c>
 800a2e2:	9b03      	ldr	r3, [sp, #12]
 800a2e4:	1d19      	adds	r1, r3, #4
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	9103      	str	r1, [sp, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	bfbb      	ittet	lt
 800a2ee:	425b      	neglt	r3, r3
 800a2f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a2f4:	9307      	strge	r3, [sp, #28]
 800a2f6:	9307      	strlt	r3, [sp, #28]
 800a2f8:	bfb8      	it	lt
 800a2fa:	9204      	strlt	r2, [sp, #16]
 800a2fc:	7823      	ldrb	r3, [r4, #0]
 800a2fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a300:	d10c      	bne.n	800a31c <_svfiprintf_r+0x130>
 800a302:	7863      	ldrb	r3, [r4, #1]
 800a304:	2b2a      	cmp	r3, #42	; 0x2a
 800a306:	d135      	bne.n	800a374 <_svfiprintf_r+0x188>
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	1d1a      	adds	r2, r3, #4
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	9203      	str	r2, [sp, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	bfb8      	it	lt
 800a314:	f04f 33ff 	movlt.w	r3, #4294967295
 800a318:	3402      	adds	r4, #2
 800a31a:	9305      	str	r3, [sp, #20]
 800a31c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3e8 <_svfiprintf_r+0x1fc>
 800a320:	7821      	ldrb	r1, [r4, #0]
 800a322:	2203      	movs	r2, #3
 800a324:	4650      	mov	r0, sl
 800a326:	f7f5 ff63 	bl	80001f0 <memchr>
 800a32a:	b140      	cbz	r0, 800a33e <_svfiprintf_r+0x152>
 800a32c:	2340      	movs	r3, #64	; 0x40
 800a32e:	eba0 000a 	sub.w	r0, r0, sl
 800a332:	fa03 f000 	lsl.w	r0, r3, r0
 800a336:	9b04      	ldr	r3, [sp, #16]
 800a338:	4303      	orrs	r3, r0
 800a33a:	3401      	adds	r4, #1
 800a33c:	9304      	str	r3, [sp, #16]
 800a33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a342:	4826      	ldr	r0, [pc, #152]	; (800a3dc <_svfiprintf_r+0x1f0>)
 800a344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a348:	2206      	movs	r2, #6
 800a34a:	f7f5 ff51 	bl	80001f0 <memchr>
 800a34e:	2800      	cmp	r0, #0
 800a350:	d038      	beq.n	800a3c4 <_svfiprintf_r+0x1d8>
 800a352:	4b23      	ldr	r3, [pc, #140]	; (800a3e0 <_svfiprintf_r+0x1f4>)
 800a354:	bb1b      	cbnz	r3, 800a39e <_svfiprintf_r+0x1b2>
 800a356:	9b03      	ldr	r3, [sp, #12]
 800a358:	3307      	adds	r3, #7
 800a35a:	f023 0307 	bic.w	r3, r3, #7
 800a35e:	3308      	adds	r3, #8
 800a360:	9303      	str	r3, [sp, #12]
 800a362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a364:	4433      	add	r3, r6
 800a366:	9309      	str	r3, [sp, #36]	; 0x24
 800a368:	e767      	b.n	800a23a <_svfiprintf_r+0x4e>
 800a36a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a36e:	460c      	mov	r4, r1
 800a370:	2001      	movs	r0, #1
 800a372:	e7a5      	b.n	800a2c0 <_svfiprintf_r+0xd4>
 800a374:	2300      	movs	r3, #0
 800a376:	3401      	adds	r4, #1
 800a378:	9305      	str	r3, [sp, #20]
 800a37a:	4619      	mov	r1, r3
 800a37c:	f04f 0c0a 	mov.w	ip, #10
 800a380:	4620      	mov	r0, r4
 800a382:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a386:	3a30      	subs	r2, #48	; 0x30
 800a388:	2a09      	cmp	r2, #9
 800a38a:	d903      	bls.n	800a394 <_svfiprintf_r+0x1a8>
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d0c5      	beq.n	800a31c <_svfiprintf_r+0x130>
 800a390:	9105      	str	r1, [sp, #20]
 800a392:	e7c3      	b.n	800a31c <_svfiprintf_r+0x130>
 800a394:	fb0c 2101 	mla	r1, ip, r1, r2
 800a398:	4604      	mov	r4, r0
 800a39a:	2301      	movs	r3, #1
 800a39c:	e7f0      	b.n	800a380 <_svfiprintf_r+0x194>
 800a39e:	ab03      	add	r3, sp, #12
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <_svfiprintf_r+0x1f8>)
 800a3a6:	a904      	add	r1, sp, #16
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	f3af 8000 	nop.w
 800a3ae:	1c42      	adds	r2, r0, #1
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	d1d6      	bne.n	800a362 <_svfiprintf_r+0x176>
 800a3b4:	89ab      	ldrh	r3, [r5, #12]
 800a3b6:	065b      	lsls	r3, r3, #25
 800a3b8:	f53f af2c 	bmi.w	800a214 <_svfiprintf_r+0x28>
 800a3bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3be:	b01d      	add	sp, #116	; 0x74
 800a3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c4:	ab03      	add	r3, sp, #12
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	462a      	mov	r2, r5
 800a3ca:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <_svfiprintf_r+0x1f8>)
 800a3cc:	a904      	add	r1, sp, #16
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	f000 f87a 	bl	800a4c8 <_printf_i>
 800a3d4:	e7eb      	b.n	800a3ae <_svfiprintf_r+0x1c2>
 800a3d6:	bf00      	nop
 800a3d8:	0800be44 	.word	0x0800be44
 800a3dc:	0800be4e 	.word	0x0800be4e
 800a3e0:	00000000 	.word	0x00000000
 800a3e4:	0800a135 	.word	0x0800a135
 800a3e8:	0800be4a 	.word	0x0800be4a

0800a3ec <_printf_common>:
 800a3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	4699      	mov	r9, r3
 800a3f4:	688a      	ldr	r2, [r1, #8]
 800a3f6:	690b      	ldr	r3, [r1, #16]
 800a3f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	bfb8      	it	lt
 800a400:	4613      	movlt	r3, r2
 800a402:	6033      	str	r3, [r6, #0]
 800a404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a408:	4607      	mov	r7, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	b10a      	cbz	r2, 800a412 <_printf_common+0x26>
 800a40e:	3301      	adds	r3, #1
 800a410:	6033      	str	r3, [r6, #0]
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	0699      	lsls	r1, r3, #26
 800a416:	bf42      	ittt	mi
 800a418:	6833      	ldrmi	r3, [r6, #0]
 800a41a:	3302      	addmi	r3, #2
 800a41c:	6033      	strmi	r3, [r6, #0]
 800a41e:	6825      	ldr	r5, [r4, #0]
 800a420:	f015 0506 	ands.w	r5, r5, #6
 800a424:	d106      	bne.n	800a434 <_printf_common+0x48>
 800a426:	f104 0a19 	add.w	sl, r4, #25
 800a42a:	68e3      	ldr	r3, [r4, #12]
 800a42c:	6832      	ldr	r2, [r6, #0]
 800a42e:	1a9b      	subs	r3, r3, r2
 800a430:	42ab      	cmp	r3, r5
 800a432:	dc26      	bgt.n	800a482 <_printf_common+0x96>
 800a434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a438:	1e13      	subs	r3, r2, #0
 800a43a:	6822      	ldr	r2, [r4, #0]
 800a43c:	bf18      	it	ne
 800a43e:	2301      	movne	r3, #1
 800a440:	0692      	lsls	r2, r2, #26
 800a442:	d42b      	bmi.n	800a49c <_printf_common+0xb0>
 800a444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a448:	4649      	mov	r1, r9
 800a44a:	4638      	mov	r0, r7
 800a44c:	47c0      	blx	r8
 800a44e:	3001      	adds	r0, #1
 800a450:	d01e      	beq.n	800a490 <_printf_common+0xa4>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	68e5      	ldr	r5, [r4, #12]
 800a456:	6832      	ldr	r2, [r6, #0]
 800a458:	f003 0306 	and.w	r3, r3, #6
 800a45c:	2b04      	cmp	r3, #4
 800a45e:	bf08      	it	eq
 800a460:	1aad      	subeq	r5, r5, r2
 800a462:	68a3      	ldr	r3, [r4, #8]
 800a464:	6922      	ldr	r2, [r4, #16]
 800a466:	bf0c      	ite	eq
 800a468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a46c:	2500      	movne	r5, #0
 800a46e:	4293      	cmp	r3, r2
 800a470:	bfc4      	itt	gt
 800a472:	1a9b      	subgt	r3, r3, r2
 800a474:	18ed      	addgt	r5, r5, r3
 800a476:	2600      	movs	r6, #0
 800a478:	341a      	adds	r4, #26
 800a47a:	42b5      	cmp	r5, r6
 800a47c:	d11a      	bne.n	800a4b4 <_printf_common+0xc8>
 800a47e:	2000      	movs	r0, #0
 800a480:	e008      	b.n	800a494 <_printf_common+0xa8>
 800a482:	2301      	movs	r3, #1
 800a484:	4652      	mov	r2, sl
 800a486:	4649      	mov	r1, r9
 800a488:	4638      	mov	r0, r7
 800a48a:	47c0      	blx	r8
 800a48c:	3001      	adds	r0, #1
 800a48e:	d103      	bne.n	800a498 <_printf_common+0xac>
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a498:	3501      	adds	r5, #1
 800a49a:	e7c6      	b.n	800a42a <_printf_common+0x3e>
 800a49c:	18e1      	adds	r1, r4, r3
 800a49e:	1c5a      	adds	r2, r3, #1
 800a4a0:	2030      	movs	r0, #48	; 0x30
 800a4a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4a6:	4422      	add	r2, r4
 800a4a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4b0:	3302      	adds	r3, #2
 800a4b2:	e7c7      	b.n	800a444 <_printf_common+0x58>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	47c0      	blx	r8
 800a4be:	3001      	adds	r0, #1
 800a4c0:	d0e6      	beq.n	800a490 <_printf_common+0xa4>
 800a4c2:	3601      	adds	r6, #1
 800a4c4:	e7d9      	b.n	800a47a <_printf_common+0x8e>
	...

0800a4c8 <_printf_i>:
 800a4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	4691      	mov	r9, r2
 800a4d0:	7e27      	ldrb	r7, [r4, #24]
 800a4d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4d4:	2f78      	cmp	r7, #120	; 0x78
 800a4d6:	4680      	mov	r8, r0
 800a4d8:	469a      	mov	sl, r3
 800a4da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4de:	d807      	bhi.n	800a4f0 <_printf_i+0x28>
 800a4e0:	2f62      	cmp	r7, #98	; 0x62
 800a4e2:	d80a      	bhi.n	800a4fa <_printf_i+0x32>
 800a4e4:	2f00      	cmp	r7, #0
 800a4e6:	f000 80d8 	beq.w	800a69a <_printf_i+0x1d2>
 800a4ea:	2f58      	cmp	r7, #88	; 0x58
 800a4ec:	f000 80a3 	beq.w	800a636 <_printf_i+0x16e>
 800a4f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4f8:	e03a      	b.n	800a570 <_printf_i+0xa8>
 800a4fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4fe:	2b15      	cmp	r3, #21
 800a500:	d8f6      	bhi.n	800a4f0 <_printf_i+0x28>
 800a502:	a001      	add	r0, pc, #4	; (adr r0, 800a508 <_printf_i+0x40>)
 800a504:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a508:	0800a561 	.word	0x0800a561
 800a50c:	0800a575 	.word	0x0800a575
 800a510:	0800a4f1 	.word	0x0800a4f1
 800a514:	0800a4f1 	.word	0x0800a4f1
 800a518:	0800a4f1 	.word	0x0800a4f1
 800a51c:	0800a4f1 	.word	0x0800a4f1
 800a520:	0800a575 	.word	0x0800a575
 800a524:	0800a4f1 	.word	0x0800a4f1
 800a528:	0800a4f1 	.word	0x0800a4f1
 800a52c:	0800a4f1 	.word	0x0800a4f1
 800a530:	0800a4f1 	.word	0x0800a4f1
 800a534:	0800a681 	.word	0x0800a681
 800a538:	0800a5a5 	.word	0x0800a5a5
 800a53c:	0800a663 	.word	0x0800a663
 800a540:	0800a4f1 	.word	0x0800a4f1
 800a544:	0800a4f1 	.word	0x0800a4f1
 800a548:	0800a6a3 	.word	0x0800a6a3
 800a54c:	0800a4f1 	.word	0x0800a4f1
 800a550:	0800a5a5 	.word	0x0800a5a5
 800a554:	0800a4f1 	.word	0x0800a4f1
 800a558:	0800a4f1 	.word	0x0800a4f1
 800a55c:	0800a66b 	.word	0x0800a66b
 800a560:	680b      	ldr	r3, [r1, #0]
 800a562:	1d1a      	adds	r2, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	600a      	str	r2, [r1, #0]
 800a568:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a56c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a570:	2301      	movs	r3, #1
 800a572:	e0a3      	b.n	800a6bc <_printf_i+0x1f4>
 800a574:	6825      	ldr	r5, [r4, #0]
 800a576:	6808      	ldr	r0, [r1, #0]
 800a578:	062e      	lsls	r6, r5, #24
 800a57a:	f100 0304 	add.w	r3, r0, #4
 800a57e:	d50a      	bpl.n	800a596 <_printf_i+0xce>
 800a580:	6805      	ldr	r5, [r0, #0]
 800a582:	600b      	str	r3, [r1, #0]
 800a584:	2d00      	cmp	r5, #0
 800a586:	da03      	bge.n	800a590 <_printf_i+0xc8>
 800a588:	232d      	movs	r3, #45	; 0x2d
 800a58a:	426d      	negs	r5, r5
 800a58c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a590:	485e      	ldr	r0, [pc, #376]	; (800a70c <_printf_i+0x244>)
 800a592:	230a      	movs	r3, #10
 800a594:	e019      	b.n	800a5ca <_printf_i+0x102>
 800a596:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a59a:	6805      	ldr	r5, [r0, #0]
 800a59c:	600b      	str	r3, [r1, #0]
 800a59e:	bf18      	it	ne
 800a5a0:	b22d      	sxthne	r5, r5
 800a5a2:	e7ef      	b.n	800a584 <_printf_i+0xbc>
 800a5a4:	680b      	ldr	r3, [r1, #0]
 800a5a6:	6825      	ldr	r5, [r4, #0]
 800a5a8:	1d18      	adds	r0, r3, #4
 800a5aa:	6008      	str	r0, [r1, #0]
 800a5ac:	0628      	lsls	r0, r5, #24
 800a5ae:	d501      	bpl.n	800a5b4 <_printf_i+0xec>
 800a5b0:	681d      	ldr	r5, [r3, #0]
 800a5b2:	e002      	b.n	800a5ba <_printf_i+0xf2>
 800a5b4:	0669      	lsls	r1, r5, #25
 800a5b6:	d5fb      	bpl.n	800a5b0 <_printf_i+0xe8>
 800a5b8:	881d      	ldrh	r5, [r3, #0]
 800a5ba:	4854      	ldr	r0, [pc, #336]	; (800a70c <_printf_i+0x244>)
 800a5bc:	2f6f      	cmp	r7, #111	; 0x6f
 800a5be:	bf0c      	ite	eq
 800a5c0:	2308      	moveq	r3, #8
 800a5c2:	230a      	movne	r3, #10
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5ca:	6866      	ldr	r6, [r4, #4]
 800a5cc:	60a6      	str	r6, [r4, #8]
 800a5ce:	2e00      	cmp	r6, #0
 800a5d0:	bfa2      	ittt	ge
 800a5d2:	6821      	ldrge	r1, [r4, #0]
 800a5d4:	f021 0104 	bicge.w	r1, r1, #4
 800a5d8:	6021      	strge	r1, [r4, #0]
 800a5da:	b90d      	cbnz	r5, 800a5e0 <_printf_i+0x118>
 800a5dc:	2e00      	cmp	r6, #0
 800a5de:	d04d      	beq.n	800a67c <_printf_i+0x1b4>
 800a5e0:	4616      	mov	r6, r2
 800a5e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5e6:	fb03 5711 	mls	r7, r3, r1, r5
 800a5ea:	5dc7      	ldrb	r7, [r0, r7]
 800a5ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5f0:	462f      	mov	r7, r5
 800a5f2:	42bb      	cmp	r3, r7
 800a5f4:	460d      	mov	r5, r1
 800a5f6:	d9f4      	bls.n	800a5e2 <_printf_i+0x11a>
 800a5f8:	2b08      	cmp	r3, #8
 800a5fa:	d10b      	bne.n	800a614 <_printf_i+0x14c>
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	07df      	lsls	r7, r3, #31
 800a600:	d508      	bpl.n	800a614 <_printf_i+0x14c>
 800a602:	6923      	ldr	r3, [r4, #16]
 800a604:	6861      	ldr	r1, [r4, #4]
 800a606:	4299      	cmp	r1, r3
 800a608:	bfde      	ittt	le
 800a60a:	2330      	movle	r3, #48	; 0x30
 800a60c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a610:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a614:	1b92      	subs	r2, r2, r6
 800a616:	6122      	str	r2, [r4, #16]
 800a618:	f8cd a000 	str.w	sl, [sp]
 800a61c:	464b      	mov	r3, r9
 800a61e:	aa03      	add	r2, sp, #12
 800a620:	4621      	mov	r1, r4
 800a622:	4640      	mov	r0, r8
 800a624:	f7ff fee2 	bl	800a3ec <_printf_common>
 800a628:	3001      	adds	r0, #1
 800a62a:	d14c      	bne.n	800a6c6 <_printf_i+0x1fe>
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295
 800a630:	b004      	add	sp, #16
 800a632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a636:	4835      	ldr	r0, [pc, #212]	; (800a70c <_printf_i+0x244>)
 800a638:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	680e      	ldr	r6, [r1, #0]
 800a640:	061f      	lsls	r7, r3, #24
 800a642:	f856 5b04 	ldr.w	r5, [r6], #4
 800a646:	600e      	str	r6, [r1, #0]
 800a648:	d514      	bpl.n	800a674 <_printf_i+0x1ac>
 800a64a:	07d9      	lsls	r1, r3, #31
 800a64c:	bf44      	itt	mi
 800a64e:	f043 0320 	orrmi.w	r3, r3, #32
 800a652:	6023      	strmi	r3, [r4, #0]
 800a654:	b91d      	cbnz	r5, 800a65e <_printf_i+0x196>
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	f023 0320 	bic.w	r3, r3, #32
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	2310      	movs	r3, #16
 800a660:	e7b0      	b.n	800a5c4 <_printf_i+0xfc>
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	f043 0320 	orr.w	r3, r3, #32
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	2378      	movs	r3, #120	; 0x78
 800a66c:	4828      	ldr	r0, [pc, #160]	; (800a710 <_printf_i+0x248>)
 800a66e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a672:	e7e3      	b.n	800a63c <_printf_i+0x174>
 800a674:	065e      	lsls	r6, r3, #25
 800a676:	bf48      	it	mi
 800a678:	b2ad      	uxthmi	r5, r5
 800a67a:	e7e6      	b.n	800a64a <_printf_i+0x182>
 800a67c:	4616      	mov	r6, r2
 800a67e:	e7bb      	b.n	800a5f8 <_printf_i+0x130>
 800a680:	680b      	ldr	r3, [r1, #0]
 800a682:	6826      	ldr	r6, [r4, #0]
 800a684:	6960      	ldr	r0, [r4, #20]
 800a686:	1d1d      	adds	r5, r3, #4
 800a688:	600d      	str	r5, [r1, #0]
 800a68a:	0635      	lsls	r5, r6, #24
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	d501      	bpl.n	800a694 <_printf_i+0x1cc>
 800a690:	6018      	str	r0, [r3, #0]
 800a692:	e002      	b.n	800a69a <_printf_i+0x1d2>
 800a694:	0671      	lsls	r1, r6, #25
 800a696:	d5fb      	bpl.n	800a690 <_printf_i+0x1c8>
 800a698:	8018      	strh	r0, [r3, #0]
 800a69a:	2300      	movs	r3, #0
 800a69c:	6123      	str	r3, [r4, #16]
 800a69e:	4616      	mov	r6, r2
 800a6a0:	e7ba      	b.n	800a618 <_printf_i+0x150>
 800a6a2:	680b      	ldr	r3, [r1, #0]
 800a6a4:	1d1a      	adds	r2, r3, #4
 800a6a6:	600a      	str	r2, [r1, #0]
 800a6a8:	681e      	ldr	r6, [r3, #0]
 800a6aa:	6862      	ldr	r2, [r4, #4]
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f7f5 fd9e 	bl	80001f0 <memchr>
 800a6b4:	b108      	cbz	r0, 800a6ba <_printf_i+0x1f2>
 800a6b6:	1b80      	subs	r0, r0, r6
 800a6b8:	6060      	str	r0, [r4, #4]
 800a6ba:	6863      	ldr	r3, [r4, #4]
 800a6bc:	6123      	str	r3, [r4, #16]
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6c4:	e7a8      	b.n	800a618 <_printf_i+0x150>
 800a6c6:	6923      	ldr	r3, [r4, #16]
 800a6c8:	4632      	mov	r2, r6
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	4640      	mov	r0, r8
 800a6ce:	47d0      	blx	sl
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	d0ab      	beq.n	800a62c <_printf_i+0x164>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	079b      	lsls	r3, r3, #30
 800a6d8:	d413      	bmi.n	800a702 <_printf_i+0x23a>
 800a6da:	68e0      	ldr	r0, [r4, #12]
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	4298      	cmp	r0, r3
 800a6e0:	bfb8      	it	lt
 800a6e2:	4618      	movlt	r0, r3
 800a6e4:	e7a4      	b.n	800a630 <_printf_i+0x168>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	4640      	mov	r0, r8
 800a6ee:	47d0      	blx	sl
 800a6f0:	3001      	adds	r0, #1
 800a6f2:	d09b      	beq.n	800a62c <_printf_i+0x164>
 800a6f4:	3501      	adds	r5, #1
 800a6f6:	68e3      	ldr	r3, [r4, #12]
 800a6f8:	9903      	ldr	r1, [sp, #12]
 800a6fa:	1a5b      	subs	r3, r3, r1
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	dcf2      	bgt.n	800a6e6 <_printf_i+0x21e>
 800a700:	e7eb      	b.n	800a6da <_printf_i+0x212>
 800a702:	2500      	movs	r5, #0
 800a704:	f104 0619 	add.w	r6, r4, #25
 800a708:	e7f5      	b.n	800a6f6 <_printf_i+0x22e>
 800a70a:	bf00      	nop
 800a70c:	0800be55 	.word	0x0800be55
 800a710:	0800be66 	.word	0x0800be66

0800a714 <__sread>:
 800a714:	b510      	push	{r4, lr}
 800a716:	460c      	mov	r4, r1
 800a718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a71c:	f000 f8e2 	bl	800a8e4 <_read_r>
 800a720:	2800      	cmp	r0, #0
 800a722:	bfab      	itete	ge
 800a724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a726:	89a3      	ldrhlt	r3, [r4, #12]
 800a728:	181b      	addge	r3, r3, r0
 800a72a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a72e:	bfac      	ite	ge
 800a730:	6563      	strge	r3, [r4, #84]	; 0x54
 800a732:	81a3      	strhlt	r3, [r4, #12]
 800a734:	bd10      	pop	{r4, pc}

0800a736 <__swrite>:
 800a736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a73a:	461f      	mov	r7, r3
 800a73c:	898b      	ldrh	r3, [r1, #12]
 800a73e:	05db      	lsls	r3, r3, #23
 800a740:	4605      	mov	r5, r0
 800a742:	460c      	mov	r4, r1
 800a744:	4616      	mov	r6, r2
 800a746:	d505      	bpl.n	800a754 <__swrite+0x1e>
 800a748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a74c:	2302      	movs	r3, #2
 800a74e:	2200      	movs	r2, #0
 800a750:	f000 f868 	bl	800a824 <_lseek_r>
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a75a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a75e:	81a3      	strh	r3, [r4, #12]
 800a760:	4632      	mov	r2, r6
 800a762:	463b      	mov	r3, r7
 800a764:	4628      	mov	r0, r5
 800a766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a76a:	f000 b817 	b.w	800a79c <_write_r>

0800a76e <__sseek>:
 800a76e:	b510      	push	{r4, lr}
 800a770:	460c      	mov	r4, r1
 800a772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a776:	f000 f855 	bl	800a824 <_lseek_r>
 800a77a:	1c43      	adds	r3, r0, #1
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	bf15      	itete	ne
 800a780:	6560      	strne	r0, [r4, #84]	; 0x54
 800a782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a78a:	81a3      	strheq	r3, [r4, #12]
 800a78c:	bf18      	it	ne
 800a78e:	81a3      	strhne	r3, [r4, #12]
 800a790:	bd10      	pop	{r4, pc}

0800a792 <__sclose>:
 800a792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a796:	f000 b813 	b.w	800a7c0 <_close_r>
	...

0800a79c <_write_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d07      	ldr	r5, [pc, #28]	; (800a7bc <_write_r+0x20>)
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	4608      	mov	r0, r1
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	602a      	str	r2, [r5, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f7f7 fddf 	bl	800236e <_write>
 800a7b0:	1c43      	adds	r3, r0, #1
 800a7b2:	d102      	bne.n	800a7ba <_write_r+0x1e>
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	b103      	cbz	r3, 800a7ba <_write_r+0x1e>
 800a7b8:	6023      	str	r3, [r4, #0]
 800a7ba:	bd38      	pop	{r3, r4, r5, pc}
 800a7bc:	20002c68 	.word	0x20002c68

0800a7c0 <_close_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4d06      	ldr	r5, [pc, #24]	; (800a7dc <_close_r+0x1c>)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	602b      	str	r3, [r5, #0]
 800a7cc:	f7f7 fdeb 	bl	80023a6 <_close>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_close_r+0x1a>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_close_r+0x1a>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	20002c68 	.word	0x20002c68

0800a7e0 <_fstat_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4d07      	ldr	r5, [pc, #28]	; (800a800 <_fstat_r+0x20>)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	4608      	mov	r0, r1
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	602b      	str	r3, [r5, #0]
 800a7ee:	f7f7 fde6 	bl	80023be <_fstat>
 800a7f2:	1c43      	adds	r3, r0, #1
 800a7f4:	d102      	bne.n	800a7fc <_fstat_r+0x1c>
 800a7f6:	682b      	ldr	r3, [r5, #0]
 800a7f8:	b103      	cbz	r3, 800a7fc <_fstat_r+0x1c>
 800a7fa:	6023      	str	r3, [r4, #0]
 800a7fc:	bd38      	pop	{r3, r4, r5, pc}
 800a7fe:	bf00      	nop
 800a800:	20002c68 	.word	0x20002c68

0800a804 <_isatty_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4d06      	ldr	r5, [pc, #24]	; (800a820 <_isatty_r+0x1c>)
 800a808:	2300      	movs	r3, #0
 800a80a:	4604      	mov	r4, r0
 800a80c:	4608      	mov	r0, r1
 800a80e:	602b      	str	r3, [r5, #0]
 800a810:	f7f7 fde5 	bl	80023de <_isatty>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d102      	bne.n	800a81e <_isatty_r+0x1a>
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	b103      	cbz	r3, 800a81e <_isatty_r+0x1a>
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	20002c68 	.word	0x20002c68

0800a824 <_lseek_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4d07      	ldr	r5, [pc, #28]	; (800a844 <_lseek_r+0x20>)
 800a828:	4604      	mov	r4, r0
 800a82a:	4608      	mov	r0, r1
 800a82c:	4611      	mov	r1, r2
 800a82e:	2200      	movs	r2, #0
 800a830:	602a      	str	r2, [r5, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	f7f7 fdde 	bl	80023f4 <_lseek>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d102      	bne.n	800a842 <_lseek_r+0x1e>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	b103      	cbz	r3, 800a842 <_lseek_r+0x1e>
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	20002c68 	.word	0x20002c68

0800a848 <memcpy>:
 800a848:	440a      	add	r2, r1
 800a84a:	4291      	cmp	r1, r2
 800a84c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a850:	d100      	bne.n	800a854 <memcpy+0xc>
 800a852:	4770      	bx	lr
 800a854:	b510      	push	{r4, lr}
 800a856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a85e:	4291      	cmp	r1, r2
 800a860:	d1f9      	bne.n	800a856 <memcpy+0xe>
 800a862:	bd10      	pop	{r4, pc}

0800a864 <memmove>:
 800a864:	4288      	cmp	r0, r1
 800a866:	b510      	push	{r4, lr}
 800a868:	eb01 0402 	add.w	r4, r1, r2
 800a86c:	d902      	bls.n	800a874 <memmove+0x10>
 800a86e:	4284      	cmp	r4, r0
 800a870:	4623      	mov	r3, r4
 800a872:	d807      	bhi.n	800a884 <memmove+0x20>
 800a874:	1e43      	subs	r3, r0, #1
 800a876:	42a1      	cmp	r1, r4
 800a878:	d008      	beq.n	800a88c <memmove+0x28>
 800a87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a882:	e7f8      	b.n	800a876 <memmove+0x12>
 800a884:	4402      	add	r2, r0
 800a886:	4601      	mov	r1, r0
 800a888:	428a      	cmp	r2, r1
 800a88a:	d100      	bne.n	800a88e <memmove+0x2a>
 800a88c:	bd10      	pop	{r4, pc}
 800a88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a896:	e7f7      	b.n	800a888 <memmove+0x24>

0800a898 <_realloc_r>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	4607      	mov	r7, r0
 800a89c:	4614      	mov	r4, r2
 800a89e:	460e      	mov	r6, r1
 800a8a0:	b921      	cbnz	r1, 800a8ac <_realloc_r+0x14>
 800a8a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	f7ff b832 	b.w	8009910 <_malloc_r>
 800a8ac:	b922      	cbnz	r2, 800a8b8 <_realloc_r+0x20>
 800a8ae:	f7fe ffdf 	bl	8009870 <_free_r>
 800a8b2:	4625      	mov	r5, r4
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b8:	f000 f826 	bl	800a908 <_malloc_usable_size_r>
 800a8bc:	42a0      	cmp	r0, r4
 800a8be:	d20f      	bcs.n	800a8e0 <_realloc_r+0x48>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f7ff f824 	bl	8009910 <_malloc_r>
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d0f2      	beq.n	800a8b4 <_realloc_r+0x1c>
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	f7ff ffb9 	bl	800a848 <memcpy>
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	4638      	mov	r0, r7
 800a8da:	f7fe ffc9 	bl	8009870 <_free_r>
 800a8de:	e7e9      	b.n	800a8b4 <_realloc_r+0x1c>
 800a8e0:	4635      	mov	r5, r6
 800a8e2:	e7e7      	b.n	800a8b4 <_realloc_r+0x1c>

0800a8e4 <_read_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	; (800a904 <_read_r+0x20>)
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	4608      	mov	r0, r1
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	602a      	str	r2, [r5, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f7f7 fd1e 	bl	8002334 <_read>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_read_r+0x1e>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_read_r+0x1e>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	20002c68 	.word	0x20002c68

0800a908 <_malloc_usable_size_r>:
 800a908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90c:	1f18      	subs	r0, r3, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	bfbc      	itt	lt
 800a912:	580b      	ldrlt	r3, [r1, r0]
 800a914:	18c0      	addlt	r0, r0, r3
 800a916:	4770      	bx	lr

0800a918 <_init>:
 800a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91a:	bf00      	nop
 800a91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91e:	bc08      	pop	{r3}
 800a920:	469e      	mov	lr, r3
 800a922:	4770      	bx	lr

0800a924 <_fini>:
 800a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a926:	bf00      	nop
 800a928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92a:	bc08      	pop	{r3}
 800a92c:	469e      	mov	lr, r3
 800a92e:	4770      	bx	lr
