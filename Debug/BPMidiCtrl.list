
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ada0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  0800af40  0800af40  0001af40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4d8  0800c4d8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4d8  0800c4d8  0001c4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4e0  0800c4e0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4e0  0800c4e0  0001c4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4e4  0800c4e4  0001c4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b9c  20000180  0800c668  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d1c  0800c668  00022d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6d0  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004110  00000000  00000000  0003c880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00040990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001cd62  00000000  00000000  00041bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000195db  00000000  00000000  0005e932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a152e  00000000  00000000  00077f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0011943b  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001088  00000000  00000000  00119490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005520  00000000  00000000  0011a518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af28 	.word	0x0800af28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800af28 	.word	0x0800af28

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <KnobMap>:
//uint8_t Knob_Map(Knob *k) {
//	return k->value * k->max_range / (k->max_values - 1);
//}

// Maps values from (0, max_values-1) to (0, m)
uint8_t KnobMap(Knob *k, uint8_t value, uint8_t m) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	78ba      	ldrb	r2, [r7, #2]
 8000f28:	fb02 f203 	mul.w	r2, r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7edb      	ldrb	r3, [r3, #27]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <ADC_DMA_Average>:
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_DMA_Average(uint8_t channel) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	uint16_t adc_sum = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	81fb      	strh	r3, [r7, #14]

	if (channel < NUM_ADC_CHANNELS) {
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d813      	bhi.n	8000f80 <ADC_DMA_Average+0x3c>
		for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	737b      	strb	r3, [r7, #13]
 8000f5c:	e00c      	b.n	8000f78 <ADC_DMA_Average+0x34>
			adc_sum += adcBuf[channel + i * NUM_ADC_CHANNELS];
 8000f5e:	79fa      	ldrb	r2, [r7, #7]
 8000f60:	7b7b      	ldrb	r3, [r7, #13]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <ADC_DMA_Average+0x54>)
 8000f68:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	4413      	add	r3, r2
 8000f70:	81fb      	strh	r3, [r7, #14]
		for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++)
 8000f72:	7b7b      	ldrb	r3, [r7, #13]
 8000f74:	3301      	adds	r3, #1
 8000f76:	737b      	strb	r3, [r7, #13]
 8000f78:	7b7b      	ldrb	r3, [r7, #13]
 8000f7a:	2b1f      	cmp	r3, #31
 8000f7c:	d9ef      	bls.n	8000f5e <ADC_DMA_Average+0x1a>
 8000f7e:	e001      	b.n	8000f84 <ADC_DMA_Average+0x40>
	} else {
		return 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e002      	b.n	8000f8a <ADC_DMA_Average+0x46>
	}

	return adc_sum / NUM_ADC_SAMPLES;
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	b29b      	uxth	r3, r3
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000019c 	.word	0x2000019c

08000f9c <MIDI_Send>:

void MIDI_Send(Knob *k, uint8_t value) {
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
	MX_USB_Send_Midi(k->channel, k->cc, KnobMap(k, value, k->max_range));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7e1c      	ldrb	r4, [r3, #24]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7e5d      	ldrb	r5, [r3, #25]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7f1a      	ldrb	r2, [r3, #28]
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffab 	bl	8000f14 <KnobMap>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4629      	mov	r1, r5
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f008 fabf 	bl	8009548 <MX_USB_Send_Midi>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd2:	0000      	movs	r0, r0
 8000fd4:	0000      	movs	r0, r0
	...

08000fd8 <MIDI_Scale_And_Filter>:

uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
	float midi_scale_factor = 1.0 * (k->max_values) / UPPER_BOUND_ADC;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7edb      	ldrb	r3, [r3, #27]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff faa3 	bl	8000534 <__aeabi_i2d>
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b49      	ldr	r3, [pc, #292]	; (8001118 <MIDI_Scale_And_Filter+0x140>)
 8000ff4:	f7ff fc32 	bl	800085c <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fdbc 	bl	8000b7c <__aeabi_d2f>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]
	return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff faa5 	bl	8000558 <__aeabi_f2d>
 800100e:	a33e      	add	r3, pc, #248	; (adr r3, 8001108 <MIDI_Scale_And_Filter+0x130>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff faf8 	bl	8000608 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4614      	mov	r4, r2
 800101e:	461d      	mov	r5, r3
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fa86 	bl	8000534 <__aeabi_i2d>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4620      	mov	r0, r4
 800102e:	4629      	mov	r1, r5
 8001030:	f7ff faea 	bl	8000608 <__aeabi_dmul>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4614      	mov	r4, r2
 800103a:	461d      	mov	r5, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7e9b      	ldrb	r3, [r3, #26]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa77 	bl	8000534 <__aeabi_i2d>
 8001046:	a332      	add	r3, pc, #200	; (adr r3, 8001110 <MIDI_Scale_And_Filter+0x138>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fadc 	bl	8000608 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff f920 	bl	800029c <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4614      	mov	r4, r2
 8001062:	461d      	mov	r5, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7f1b      	ldrb	r3, [r3, #28]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa63 	bl	8000534 <__aeabi_i2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4620      	mov	r0, r4
 8001074:	4629      	mov	r1, r5
 8001076:	f7ff fd39 	bl	8000aec <__aeabi_dcmplt>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d032      	beq.n	80010e6 <MIDI_Scale_And_Filter+0x10e>
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff fa69 	bl	8000558 <__aeabi_f2d>
 8001086:	a320      	add	r3, pc, #128	; (adr r3, 8001108 <MIDI_Scale_And_Filter+0x130>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fabc 	bl	8000608 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4614      	mov	r4, r2
 8001096:	461d      	mov	r5, r3
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa4a 	bl	8000534 <__aeabi_i2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4620      	mov	r0, r4
 80010a6:	4629      	mov	r1, r5
 80010a8:	f7ff faae 	bl	8000608 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4614      	mov	r4, r2
 80010b2:	461d      	mov	r5, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e9b      	ldrb	r3, [r3, #26]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa3b 	bl	8000534 <__aeabi_i2d>
 80010be:	a314      	add	r3, pc, #80	; (adr r3, 8001110 <MIDI_Scale_And_Filter+0x138>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff faa0 	bl	8000608 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4620      	mov	r0, r4
 80010ce:	4629      	mov	r1, r5
 80010d0:	f7ff f8e4 	bl	800029c <__adddf3>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fd2e 	bl	8000b3c <__aeabi_d2uiz>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	e00c      	b.n	8001100 <MIDI_Scale_And_Filter+0x128>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7f1b      	ldrb	r3, [r3, #28]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa22 	bl	8000534 <__aeabi_i2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fd20 	bl	8000b3c <__aeabi_d2uiz>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b2db      	uxtb	r3, r3
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bdb0      	pop	{r4, r5, r7, pc}
 8001108:	66666666 	.word	0x66666666
 800110c:	3fe66666 	.word	0x3fe66666
 8001110:	33333334 	.word	0x33333334
 8001114:	3fd33333 	.word	0x3fd33333
 8001118:	406f4000 	.word	0x406f4000

0800111c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b0a3      	sub	sp, #140	; 0x8c
 8001120:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	Knob knobs[4] = {
 8001122:	463b      	mov	r3, r7
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f008 fea1 	bl	8009e70 <memset>
 800112e:	233f      	movs	r3, #63	; 0x3f
 8001130:	703b      	strb	r3, [r7, #0]
 8001132:	4aca      	ldr	r2, [pc, #808]	; (800145c <main+0x340>)
 8001134:	1cfb      	adds	r3, r7, #3
 8001136:	6810      	ldr	r0, [r2, #0]
 8001138:	6018      	str	r0, [r3, #0]
 800113a:	8891      	ldrh	r1, [r2, #4]
 800113c:	7992      	ldrb	r2, [r2, #6]
 800113e:	8099      	strh	r1, [r3, #4]
 8001140:	719a      	strb	r2, [r3, #6]
 8001142:	f107 030a 	add.w	r3, r7, #10
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	2311      	movs	r3, #17
 800114e:	767b      	strb	r3, [r7, #25]
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	76fb      	strb	r3, [r7, #27]
 8001154:	237f      	movs	r3, #127	; 0x7f
 8001156:	773b      	strb	r3, [r7, #28]
 8001158:	2301      	movs	r3, #1
 800115a:	777b      	strb	r3, [r7, #29]
 800115c:	237f      	movs	r3, #127	; 0x7f
 800115e:	f887 3020 	strb.w	r3, [r7, #32]
 8001162:	2301      	movs	r3, #1
 8001164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001168:	4bbd      	ldr	r3, [pc, #756]	; (8001460 <main+0x344>)
 800116a:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800116e:	cb03      	ldmia	r3!, {r0, r1}
 8001170:	6010      	str	r0, [r2, #0]
 8001172:	6051      	str	r1, [r2, #4]
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	8113      	strh	r3, [r2, #8]
 8001178:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	711a      	strb	r2, [r3, #4]
 8001182:	2301      	movs	r3, #1
 8001184:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001188:	2312      	movs	r3, #18
 800118a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001194:	237f      	movs	r3, #127	; 0x7f
 8001196:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800119a:	2303      	movs	r3, #3
 800119c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80011a0:	2301      	movs	r3, #1
 80011a2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80011a6:	4aaf      	ldr	r2, [pc, #700]	; (8001464 <main+0x348>)
 80011a8:	f107 0343 	add.w	r3, r7, #67	; 0x43
 80011ac:	6810      	ldr	r0, [r2, #0]
 80011ae:	6018      	str	r0, [r3, #0]
 80011b0:	8892      	ldrh	r2, [r2, #4]
 80011b2:	809a      	strh	r2, [r3, #4]
 80011b4:	f107 0349 	add.w	r3, r7, #73	; 0x49
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	721a      	strb	r2, [r3, #8]
 80011c0:	2302      	movs	r3, #2
 80011c2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80011c6:	2313      	movs	r3, #19
 80011c8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80011cc:	2307      	movs	r3, #7
 80011ce:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80011d2:	237f      	movs	r3, #127	; 0x7f
 80011d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80011d8:	2304      	movs	r3, #4
 80011da:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80011de:	2301      	movs	r3, #1
 80011e0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80011e4:	2301      	movs	r3, #1
 80011e6:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 80011ea:	4a9f      	ldr	r2, [pc, #636]	; (8001468 <main+0x34c>)
 80011ec:	f107 0363 	add.w	r3, r7, #99	; 0x63
 80011f0:	6810      	ldr	r0, [r2, #0]
 80011f2:	6018      	str	r0, [r3, #0]
 80011f4:	8892      	ldrh	r2, [r2, #4]
 80011f6:	809a      	strh	r2, [r3, #4]
 80011f8:	f107 0369 	add.w	r3, r7, #105	; 0x69
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	721a      	strb	r2, [r3, #8]
 8001204:	2303      	movs	r3, #3
 8001206:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 800120a:	2314      	movs	r3, #20
 800120c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8001210:	230c      	movs	r3, #12
 8001212:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001216:	230b      	movs	r3, #11
 8001218:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			{.init_value = 127, .row = 0, .col = 1, .label = "Resonance", .channel = 1, .cc = 18, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 0},
			{.init_value = 3, .row = 1, .col = 0, .label = "Osc 0", .channel = 2, .cc = 19, .value = 0, .max_values = 7, .max_range = 127, .isLocked = 0},
			{.init_value = 4, .row = 1, .col = 1, .label = "Osc 1", .channel = 3, .cc = 20, .value = 0, .max_values = 12, .max_range = 11, .isLocked = 0}
	};

	for (int i = 2; i < 4; i++) {
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001222:	e0c4      	b.n	80013ae <main+0x292>
		knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 8001224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001228:	015b      	lsls	r3, r3, #5
 800122a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800122e:	4413      	add	r3, r2
 8001230:	3b6d      	subs	r3, #109	; 0x6d
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4613      	mov	r3, r2
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f008 fe0f 	bl	8009e60 <malloc>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800124a:	015b      	lsls	r3, r3, #5
 800124c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001250:	440b      	add	r3, r1
 8001252:	3b74      	subs	r3, #116	; 0x74
 8001254:	601a      	str	r2, [r3, #0]
		strncpy(knobs[i].sub_labels[0], "MultiSaw", MAX_LABEL_CHARS);
 8001256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800125a:	015b      	lsls	r3, r3, #5
 800125c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001260:	4413      	add	r3, r2
 8001262:	3b74      	subs	r3, #116	; 0x74
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	220e      	movs	r2, #14
 8001268:	4980      	ldr	r1, [pc, #512]	; (800146c <main+0x350>)
 800126a:	4618      	mov	r0, r3
 800126c:	f008 ff6c 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[1], "TriWrap", MAX_LABEL_CHARS);
 8001270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001274:	015b      	lsls	r3, r3, #5
 8001276:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800127a:	4413      	add	r3, r2
 800127c:	3b74      	subs	r3, #116	; 0x74
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	330f      	adds	r3, #15
 8001282:	220e      	movs	r2, #14
 8001284:	497a      	ldr	r1, [pc, #488]	; (8001470 <main+0x354>)
 8001286:	4618      	mov	r0, r3
 8001288:	f008 ff5e 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[2], "Noise", MAX_LABEL_CHARS);
 800128c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001290:	015b      	lsls	r3, r3, #5
 8001292:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001296:	4413      	add	r3, r2
 8001298:	3b74      	subs	r3, #116	; 0x74
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	331e      	adds	r3, #30
 800129e:	220e      	movs	r2, #14
 80012a0:	4974      	ldr	r1, [pc, #464]	; (8001474 <main+0x358>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f008 ff50 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[3], "Feedback", MAX_LABEL_CHARS);
 80012a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012ac:	015b      	lsls	r3, r3, #5
 80012ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012b2:	4413      	add	r3, r2
 80012b4:	3b74      	subs	r3, #116	; 0x74
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	332d      	adds	r3, #45	; 0x2d
 80012ba:	220e      	movs	r2, #14
 80012bc:	496e      	ldr	r1, [pc, #440]	; (8001478 <main+0x35c>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f008 ff42 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[4], "Pulse", MAX_LABEL_CHARS);
 80012c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012c8:	015b      	lsls	r3, r3, #5
 80012ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012ce:	4413      	add	r3, r2
 80012d0:	3b74      	subs	r3, #116	; 0x74
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	333c      	adds	r3, #60	; 0x3c
 80012d6:	220e      	movs	r2, #14
 80012d8:	4968      	ldr	r1, [pc, #416]	; (800147c <main+0x360>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f008 ff34 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[5], "Saw", MAX_LABEL_CHARS);
 80012e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012e4:	015b      	lsls	r3, r3, #5
 80012e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012ea:	4413      	add	r3, r2
 80012ec:	3b74      	subs	r3, #116	; 0x74
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	334b      	adds	r3, #75	; 0x4b
 80012f2:	220e      	movs	r2, #14
 80012f4:	4962      	ldr	r1, [pc, #392]	; (8001480 <main+0x364>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f008 ff26 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[6], "Triangle", MAX_LABEL_CHARS);
 80012fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001300:	015b      	lsls	r3, r3, #5
 8001302:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001306:	4413      	add	r3, r2
 8001308:	3b74      	subs	r3, #116	; 0x74
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	335a      	adds	r3, #90	; 0x5a
 800130e:	220e      	movs	r2, #14
 8001310:	495c      	ldr	r1, [pc, #368]	; (8001484 <main+0x368>)
 8001312:	4618      	mov	r0, r3
 8001314:	f008 ff18 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[7], "Pulse5", MAX_LABEL_CHARS);
 8001318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800131c:	015b      	lsls	r3, r3, #5
 800131e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001322:	4413      	add	r3, r2
 8001324:	3b74      	subs	r3, #116	; 0x74
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3369      	adds	r3, #105	; 0x69
 800132a:	220e      	movs	r2, #14
 800132c:	4956      	ldr	r1, [pc, #344]	; (8001488 <main+0x36c>)
 800132e:	4618      	mov	r0, r3
 8001330:	f008 ff0a 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[8], "Pulse6", MAX_LABEL_CHARS);
 8001334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001338:	015b      	lsls	r3, r3, #5
 800133a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800133e:	4413      	add	r3, r2
 8001340:	3b74      	subs	r3, #116	; 0x74
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3378      	adds	r3, #120	; 0x78
 8001346:	220e      	movs	r2, #14
 8001348:	4950      	ldr	r1, [pc, #320]	; (800148c <main+0x370>)
 800134a:	4618      	mov	r0, r3
 800134c:	f008 fefc 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[9], "Pulse7", MAX_LABEL_CHARS);
 8001350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001354:	015b      	lsls	r3, r3, #5
 8001356:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800135a:	4413      	add	r3, r2
 800135c:	3b74      	subs	r3, #116	; 0x74
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3387      	adds	r3, #135	; 0x87
 8001362:	220e      	movs	r2, #14
 8001364:	494a      	ldr	r1, [pc, #296]	; (8001490 <main+0x374>)
 8001366:	4618      	mov	r0, r3
 8001368:	f008 feee 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[10], "Pulse8", MAX_LABEL_CHARS);
 800136c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001370:	015b      	lsls	r3, r3, #5
 8001372:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001376:	4413      	add	r3, r2
 8001378:	3b74      	subs	r3, #116	; 0x74
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3396      	adds	r3, #150	; 0x96
 800137e:	220e      	movs	r2, #14
 8001380:	4944      	ldr	r1, [pc, #272]	; (8001494 <main+0x378>)
 8001382:	4618      	mov	r0, r3
 8001384:	f008 fee0 	bl	800a148 <strncpy>
		strncpy(knobs[i].sub_labels[11], "Pulse9", MAX_LABEL_CHARS);
 8001388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800138c:	015b      	lsls	r3, r3, #5
 800138e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001392:	4413      	add	r3, r2
 8001394:	3b74      	subs	r3, #116	; 0x74
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	33a5      	adds	r3, #165	; 0xa5
 800139a:	220e      	movs	r2, #14
 800139c:	493e      	ldr	r1, [pc, #248]	; (8001498 <main+0x37c>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 fed2 	bl	800a148 <strncpy>
	for (int i = 2; i < 4; i++) {
 80013a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013a8:	3301      	adds	r3, #1
 80013aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	f77f af36 	ble.w	8001224 <main+0x108>
	}

    knobs[0].sub_labels = malloc(sizeof(*knobs[0].sub_labels));
 80013b8:	200f      	movs	r0, #15
 80013ba:	f008 fd51 	bl	8009e60 <malloc>
 80013be:	4603      	mov	r3, r0
 80013c0:	617b      	str	r3, [r7, #20]
    strncpy(knobs[0].sub_labels[0], "Filter 1", MAX_LABEL_CHARS);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	220e      	movs	r2, #14
 80013c6:	4935      	ldr	r1, [pc, #212]	; (800149c <main+0x380>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f008 febd 	bl	800a148 <strncpy>

    knobs[1].sub_labels = malloc(sizeof(*knobs[1].sub_labels));
 80013ce:	200f      	movs	r0, #15
 80013d0:	f008 fd46 	bl	8009e60 <malloc>
 80013d4:	4603      	mov	r3, r0
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
    strncpy(knobs[1].sub_labels[0], "Filter 2", MAX_LABEL_CHARS);
 80013d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013da:	220e      	movs	r2, #14
 80013dc:	4930      	ldr	r1, [pc, #192]	; (80014a0 <main+0x384>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 feb2 	bl	800a148 <strncpy>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013e4:	f001 f98e 	bl	8002704 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013e8:	f000 f8e4 	bl	80015b4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013ec:	f000 fa58 	bl	80018a0 <MX_GPIO_Init>
	MX_RTC_Init();
 80013f0:	f000 fa10 	bl	8001814 <MX_RTC_Init>
	MX_DMA_Init();
 80013f4:	f000 fa34 	bl	8001860 <MX_DMA_Init>
	MX_ADC1_Init();
 80013f8:	f000 f962 	bl	80016c0 <MX_ADC1_Init>
	MX_I2C1_Init();
 80013fc:	f000 f9dc 	bl	80017b8 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 8001400:	f008 f872 	bl	80094e8 <MX_USB_DEVICE_Init>
	//MX_SDIO_SD_Init();

	/* USER CODE BEGIN 2 */
	// Init displays
	for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800140a:	e016      	b.n	800143a <main+0x31e>
		ssd1306_Init(&hi2c1, &knobs[i]);
 800140c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001410:	463a      	mov	r2, r7
 8001412:	015b      	lsls	r3, r3, #5
 8001414:	4413      	add	r3, r2
 8001416:	4619      	mov	r1, r3
 8001418:	4822      	ldr	r0, [pc, #136]	; (80014a4 <main+0x388>)
 800141a:	f000 fab7 	bl	800198c <ssd1306_Init>
		ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 800141e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001422:	463a      	mov	r2, r7
 8001424:	015b      	lsls	r3, r3, #5
 8001426:	4413      	add	r3, r2
 8001428:	4619      	mov	r1, r3
 800142a:	481e      	ldr	r0, [pc, #120]	; (80014a4 <main+0x388>)
 800142c:	f000 fc2a 	bl	8001c84 <ssd1306_WriteKnob>
	for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001430:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001434:	3301      	adds	r3, #1
 8001436:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800143a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800143e:	2b03      	cmp	r3, #3
 8001440:	d9e4      	bls.n	800140c <main+0x2f0>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_ADC_Start(&hadc1);
 8001442:	4819      	ldr	r0, [pc, #100]	; (80014a8 <main+0x38c>)
 8001444:	f001 fa38 	bl	80028b8 <HAL_ADC_Start>

	while (1) {
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	4918      	ldr	r1, [pc, #96]	; (80014ac <main+0x390>)
 800144c:	4816      	ldr	r0, [pc, #88]	; (80014a8 <main+0x38c>)
 800144e:	f001 fae7 	bl	8002a20 <HAL_ADC_Start_DMA>

		for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001452:	2300      	movs	r3, #0
 8001454:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8001458:	e0a2      	b.n	80015a0 <main+0x484>
 800145a:	bf00      	nop
 800145c:	0800afc0 	.word	0x0800afc0
 8001460:	0800afd0 	.word	0x0800afd0
 8001464:	0800afe0 	.word	0x0800afe0
 8001468:	0800aff0 	.word	0x0800aff0
 800146c:	0800af40 	.word	0x0800af40
 8001470:	0800af4c 	.word	0x0800af4c
 8001474:	0800af54 	.word	0x0800af54
 8001478:	0800af5c 	.word	0x0800af5c
 800147c:	0800af68 	.word	0x0800af68
 8001480:	0800af70 	.word	0x0800af70
 8001484:	0800af74 	.word	0x0800af74
 8001488:	0800af80 	.word	0x0800af80
 800148c:	0800af88 	.word	0x0800af88
 8001490:	0800af90 	.word	0x0800af90
 8001494:	0800af98 	.word	0x0800af98
 8001498:	0800afa0 	.word	0x0800afa0
 800149c:	0800afa8 	.word	0x0800afa8
 80014a0:	0800afb4 	.word	0x0800afb4
 80014a4:	20002290 	.word	0x20002290
 80014a8:	200022e4 	.word	0x200022e4
 80014ac:	2000019c 	.word	0x2000019c
			adcAveraged[i] = ADC_DMA_Average(i);
 80014b0:	f897 4082 	ldrb.w	r4, [r7, #130]	; 0x82
 80014b4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fd43 	bl	8000f44 <ADC_DMA_Average>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <main+0x490>)
 80014c4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 80014c8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80014cc:	463a      	mov	r2, r7
 80014ce:	015b      	lsls	r3, r3, #5
 80014d0:	441a      	add	r2, r3
 80014d2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80014d6:	4935      	ldr	r1, [pc, #212]	; (80015ac <main+0x490>)
 80014d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4619      	mov	r1, r3
 80014e0:	4610      	mov	r0, r2
 80014e2:	f7ff fd79 	bl	8000fd8 <MIDI_Scale_And_Filter>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

			if (curr_MIDI_val != knobs[i].value) {
 80014ec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80014f0:	015b      	lsls	r3, r3, #5
 80014f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014f6:	4413      	add	r3, r2
 80014f8:	3b6e      	subs	r3, #110	; 0x6e
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8001500:	429a      	cmp	r2, r3
 8001502:	d048      	beq.n	8001596 <main+0x47a>
				knobs[i].value = curr_MIDI_val;
 8001504:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001508:	015b      	lsls	r3, r3, #5
 800150a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800150e:	4413      	add	r3, r2
 8001510:	3b6e      	subs	r3, #110	; 0x6e
 8001512:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8001516:	701a      	strb	r2, [r3, #0]
				ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 8001518:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800151c:	463a      	mov	r2, r7
 800151e:	015b      	lsls	r3, r3, #5
 8001520:	4413      	add	r3, r2
 8001522:	4619      	mov	r1, r3
 8001524:	4822      	ldr	r0, [pc, #136]	; (80015b0 <main+0x494>)
 8001526:	f000 fbad 	bl	8001c84 <ssd1306_WriteKnob>
				if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 800152a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800152e:	015b      	lsls	r3, r3, #5
 8001530:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001534:	4413      	add	r3, r2
 8001536:	3b6e      	subs	r3, #110	; 0x6e
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800153e:	015b      	lsls	r3, r3, #5
 8001540:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001544:	440b      	add	r3, r1
 8001546:	3b88      	subs	r3, #136	; 0x88
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d108      	bne.n	8001560 <main+0x444>
 800154e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001552:	015b      	lsls	r3, r3, #5
 8001554:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001558:	4413      	add	r3, r2
 800155a:	3b6b      	subs	r3, #107	; 0x6b
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
				if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 8001560:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800156a:	4413      	add	r3, r2
 800156c:	3b6b      	subs	r3, #107	; 0x6b
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d110      	bne.n	8001596 <main+0x47a>
 8001574:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001578:	463a      	mov	r2, r7
 800157a:	015b      	lsls	r3, r3, #5
 800157c:	441a      	add	r2, r3
 800157e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001582:	015b      	lsls	r3, r3, #5
 8001584:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001588:	440b      	add	r3, r1
 800158a:	3b6e      	subs	r3, #110	; 0x6e
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4619      	mov	r1, r3
 8001590:	4610      	mov	r0, r2
 8001592:	f7ff fd03 	bl	8000f9c <MIDI_Send>
		for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001596:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800159a:	3301      	adds	r3, #1
 800159c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80015a0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d983      	bls.n	80014b0 <main+0x394>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 80015a8:	e74e      	b.n	8001448 <main+0x32c>
 80015aa:	bf00      	nop
 80015ac:	2000029c 	.word	0x2000029c
 80015b0:	20002290 	.word	0x20002290

080015b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b09a      	sub	sp, #104	; 0x68
 80015b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015be:	2230      	movs	r2, #48	; 0x30
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f008 fc54 	bl	8009e70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <SystemClock_Config+0x104>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a31      	ldr	r2, [pc, #196]	; (80016b8 <SystemClock_Config+0x104>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <SystemClock_Config+0x104>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <SystemClock_Config+0x108>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a2b      	ldr	r2, [pc, #172]	; (80016bc <SystemClock_Config+0x108>)
 8001610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <SystemClock_Config+0x108>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001622:	230b      	movs	r3, #11
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162c:	2301      	movs	r3, #1
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001630:	2310      	movs	r3, #16
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001634:	2301      	movs	r3, #1
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001638:	2302      	movs	r3, #2
 800163a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001640:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 15;
 8001642:	230f      	movs	r3, #15
 8001644:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 144;
 8001646:	2390      	movs	r3, #144	; 0x90
 8001648:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800164e:	2305      	movs	r3, #5
 8001650:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001652:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001656:	4618      	mov	r0, r3
 8001658:	f004 fbba 	bl	8005dd0 <HAL_RCC_OscConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xb2>
		Error_Handler();
 8001662:	f000 f976 	bl	8001952 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001666:	230f      	movs	r3, #15
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f004 fe1d 	bl	80062c0 <HAL_RCC_ClockConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0xdc>
		Error_Handler();
 800168c:	f000 f961 	bl	8001952 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001690:	2302      	movs	r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001698:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 ffca 	bl	8006638 <HAL_RCCEx_PeriphCLKConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0xfa>
		Error_Handler();
 80016aa:	f000 f952 	bl	8001952 <Error_Handler>
	}
}
 80016ae:	bf00      	nop
 80016b0:	3768      	adds	r7, #104	; 0x68
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80016d2:	4b36      	ldr	r3, [pc, #216]	; (80017ac <MX_ADC1_Init+0xec>)
 80016d4:	4a36      	ldr	r2, [pc, #216]	; (80017b0 <MX_ADC1_Init+0xf0>)
 80016d6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d8:	4b34      	ldr	r3, [pc, #208]	; (80017ac <MX_ADC1_Init+0xec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80016de:	4b33      	ldr	r3, [pc, #204]	; (80017ac <MX_ADC1_Init+0xec>)
 80016e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80016e6:	4b31      	ldr	r3, [pc, #196]	; (80017ac <MX_ADC1_Init+0xec>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80016ec:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <MX_ADC1_Init+0xec>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <MX_ADC1_Init+0xec>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016fa:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <MX_ADC1_Init+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <MX_ADC1_Init+0xec>)
 8001702:	4a2c      	ldr	r2, [pc, #176]	; (80017b4 <MX_ADC1_Init+0xf4>)
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <MX_ADC1_Init+0xec>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <MX_ADC1_Init+0xec>)
 800170e:	2204      	movs	r2, #4
 8001710:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <MX_ADC1_Init+0xec>)
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <MX_ADC1_Init+0xec>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001720:	4822      	ldr	r0, [pc, #136]	; (80017ac <MX_ADC1_Init+0xec>)
 8001722:	f001 f885 	bl	8002830 <HAL_ADC_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_ADC1_Init+0x70>
		Error_Handler();
 800172c:	f000 f911 	bl	8001952 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001730:	2300      	movs	r3, #0
 8001732:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001738:	2301      	movs	r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800173c:	463b      	mov	r3, r7
 800173e:	4619      	mov	r1, r3
 8001740:	481a      	ldr	r0, [pc, #104]	; (80017ac <MX_ADC1_Init+0xec>)
 8001742:	f001 fac1 	bl	8002cc8 <HAL_ADC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x90>
		Error_Handler();
 800174c:	f000 f901 	bl	8001952 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001750:	2301      	movs	r3, #1
 8001752:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001754:	2302      	movs	r3, #2
 8001756:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	4813      	ldr	r0, [pc, #76]	; (80017ac <MX_ADC1_Init+0xec>)
 800175e:	f001 fab3 	bl	8002cc8 <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC1_Init+0xac>
		Error_Handler();
 8001768:	f000 f8f3 	bl	8001952 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 800176c:	2302      	movs	r3, #2
 800176e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8001770:	2303      	movs	r3, #3
 8001772:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <MX_ADC1_Init+0xec>)
 800177a:	f001 faa5 	bl	8002cc8 <HAL_ADC_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0xc8>
		Error_Handler();
 8001784:	f000 f8e5 	bl	8001952 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001788:	2303      	movs	r3, #3
 800178a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 800178c:	2304      	movs	r3, #4
 800178e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_ADC1_Init+0xec>)
 8001796:	f001 fa97 	bl	8002cc8 <HAL_ADC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0xe4>
		Error_Handler();
 80017a0:	f000 f8d7 	bl	8001952 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200022e4 	.word	0x200022e4
 80017b0:	40012000 	.word	0x40012000
 80017b4:	0f000001 	.word	0x0f000001

080017b8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_I2C1_Init+0x50>)
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <MX_I2C1_Init+0x54>)
 80017c0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_I2C1_Init+0x50>)
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_I2C1_Init+0x58>)
 80017c6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_I2C1_Init+0x50>)
 80017d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017da:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_I2C1_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_I2C1_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_I2C1_Init+0x50>)
 80017f6:	f002 fb8d 	bl	8003f14 <HAL_I2C_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001800:	f000 f8a7 	bl	8001952 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20002290 	.word	0x20002290
 800180c:	40005400 	.word	0x40005400
 8001810:	00061a80 	.word	0x00061a80

08001814 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_RTC_Init+0x44>)
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <MX_RTC_Init+0x48>)
 800181c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_RTC_Init+0x44>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_RTC_Init+0x44>)
 8001826:	227f      	movs	r2, #127	; 0x7f
 8001828:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_RTC_Init+0x44>)
 800182c:	22ff      	movs	r2, #255	; 0xff
 800182e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_RTC_Init+0x44>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_RTC_Init+0x44>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_RTC_Init+0x44>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_RTC_Init+0x44>)
 8001844:	f004 ffe8 	bl	8006818 <HAL_RTC_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_RTC_Init+0x3e>
		Error_Handler();
 800184e:	f000 f880 	bl	8001952 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000238c 	.word	0x2000238c
 800185c:	40002800 	.word	0x40002800

08001860 <MX_DMA_Init>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_DMA_Init+0x3c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <MX_DMA_Init+0x3c>)
 8001870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_DMA_Init+0x3c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2038      	movs	r0, #56	; 0x38
 8001888:	f001 fda9 	bl	80033de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800188c:	2038      	movs	r0, #56	; 0x38
 800188e:	f001 fdc2 	bl	8003416 <HAL_NVIC_EnableIRQ>

}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <MX_GPIO_Init+0x84>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <MX_GPIO_Init+0x84>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_GPIO_Init+0x84>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <MX_GPIO_Init+0x84>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <MX_GPIO_Init+0x84>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_GPIO_Init+0x84>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_GPIO_Init+0x84>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <MX_GPIO_Init+0x84>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <MX_GPIO_Init+0x84>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_GPIO_Init+0x84>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <MX_GPIO_Init+0x84>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_GPIO_Init+0x84>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]

}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f001 f95b 	bl	8002c00 <HAL_ADC_Stop_DMA>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001956:	b672      	cpsid	i
}
 8001958:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800195a:	e7fe      	b.n	800195a <Error_Handler+0x8>

0800195c <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af04      	add	r7, sp, #16
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001968:	230a      	movs	r3, #10
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	2301      	movs	r3, #1
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	1cfb      	adds	r3, r7, #3
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2301      	movs	r3, #1
 8001976:	2200      	movs	r2, #0
 8001978:	2178      	movs	r1, #120	; 0x78
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f002 fd0c 	bl	8004398 <HAL_I2C_Mem_Write>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, Knob *k) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001996:	2064      	movs	r0, #100	; 0x64
 8001998:	f000 ff26 	bl	80027e8 <HAL_Delay>
    int status = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(hi2c, k);
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fb9e 	bl	80020e4 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80019a8:	21ae      	movs	r1, #174	; 0xae
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffd6 	bl	800195c <ssd1306_WriteCommand>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80019ba:	2120      	movs	r1, #32
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ffcd 	bl	800195c <ssd1306_WriteCommand>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80019cc:	2110      	movs	r1, #16
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffc4 	bl	800195c <ssd1306_WriteCommand>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80019de:	21b0      	movs	r1, #176	; 0xb0
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffbb 	bl	800195c <ssd1306_WriteCommand>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80019f0:	21c8      	movs	r1, #200	; 0xc8
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffb2 	bl	800195c <ssd1306_WriteCommand>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001a02:	2100      	movs	r1, #0
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffa9 	bl	800195c <ssd1306_WriteCommand>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001a14:	2110      	movs	r1, #16
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa0 	bl	800195c <ssd1306_WriteCommand>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001a26:	2140      	movs	r1, #64	; 0x40
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff97 	bl	800195c <ssd1306_WriteCommand>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4413      	add	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001a38:	2181      	movs	r1, #129	; 0x81
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff8e 	bl	800195c <ssd1306_WriteCommand>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff85 	bl	800195c <ssd1306_WriteCommand>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001a5c:	21a1      	movs	r1, #161	; 0xa1
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff7c 	bl	800195c <ssd1306_WriteCommand>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001a6e:	21a6      	movs	r1, #166	; 0xa6
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff73 	bl	800195c <ssd1306_WriteCommand>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001a80:	21a8      	movs	r1, #168	; 0xa8
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff6a 	bl	800195c <ssd1306_WriteCommand>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001a92:	213f      	movs	r1, #63	; 0x3f
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff61 	bl	800195c <ssd1306_WriteCommand>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001aa4:	21a4      	movs	r1, #164	; 0xa4
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff58 	bl	800195c <ssd1306_WriteCommand>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001ab6:	21d3      	movs	r1, #211	; 0xd3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff4f 	bl	800195c <ssd1306_WriteCommand>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001ac8:	2100      	movs	r1, #0
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff46 	bl	800195c <ssd1306_WriteCommand>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001ada:	21d5      	movs	r1, #213	; 0xd5
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff3d 	bl	800195c <ssd1306_WriteCommand>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001aec:	21f0      	movs	r1, #240	; 0xf0
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff34 	bl	800195c <ssd1306_WriteCommand>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001afe:	21d9      	movs	r1, #217	; 0xd9
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff2b 	bl	800195c <ssd1306_WriteCommand>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001b10:	2122      	movs	r1, #34	; 0x22
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ff22 	bl	800195c <ssd1306_WriteCommand>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001b22:	21da      	movs	r1, #218	; 0xda
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff19 	bl	800195c <ssd1306_WriteCommand>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001b34:	2112      	movs	r1, #18
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ff10 	bl	800195c <ssd1306_WriteCommand>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001b46:	21db      	movs	r1, #219	; 0xdb
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff07 	bl	800195c <ssd1306_WriteCommand>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001b58:	2120      	movs	r1, #32
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fefe 	bl	800195c <ssd1306_WriteCommand>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001b6a:	218d      	movs	r1, #141	; 0x8d
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fef5 	bl	800195c <ssd1306_WriteCommand>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001b7c:	2114      	movs	r1, #20
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff feec 	bl	800195c <ssd1306_WriteCommand>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001b8e:	21af      	movs	r1, #175	; 0xaf
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fee3 	bl	800195c <ssd1306_WriteCommand>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <ssd1306_Init+0x21e>
        return 1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00f      	b.n	8001bca <ssd1306_Init+0x23e>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f814 	bl	8001bd8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f835 	bl	8001c20 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <ssd1306_Init+0x248>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <ssd1306_Init+0x248>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <ssd1306_Init+0x248>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	715a      	strb	r2, [r3, #5]

    return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200006a4 	.word	0x200006a4

08001bd8 <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e00d      	b.n	8001c04 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <ssd1306_Fill+0x1a>
 8001bee:	2100      	movs	r1, #0
 8001bf0:	e000      	b.n	8001bf4 <ssd1306_Fill+0x1c>
 8001bf2:	21ff      	movs	r1, #255	; 0xff
 8001bf4:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <ssd1306_Fill+0x44>)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	460a      	mov	r2, r1
 8001bfc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3301      	adds	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0a:	d3ed      	bcc.n	8001be8 <ssd1306_Fill+0x10>
    }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200002a4 	.word	0x200002a4

08001c20 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af04      	add	r7, sp, #16
 8001c26:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++) {
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e020      	b.n	8001c70 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	3b50      	subs	r3, #80	; 0x50
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fe90 	bl	800195c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe8c 	bl	800195c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001c44:	2110      	movs	r1, #16
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fe88 	bl	800195c <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	01db      	lsls	r3, r3, #7
 8001c50:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <ssd1306_UpdateScreen+0x60>)
 8001c52:	4413      	add	r3, r2
 8001c54:	2264      	movs	r2, #100	; 0x64
 8001c56:	9202      	str	r2, [sp, #8]
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	9201      	str	r2, [sp, #4]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	2240      	movs	r2, #64	; 0x40
 8001c62:	2178      	movs	r1, #120	; 0x78
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f002 fb97 	bl	8004398 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	2b07      	cmp	r3, #7
 8001c74:	d9db      	bls.n	8001c2e <ssd1306_UpdateScreen+0xe>
    }
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200002a4 	.word	0x200002a4

08001c84 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b08b      	sub	sp, #44	; 0x2c
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
    ssd1306_Select(hi2c, k);
 8001c8e:	6839      	ldr	r1, [r7, #0]
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fa27 	bl	80020e4 <ssd1306_Select>
    ssd1306_Fill(Black);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff ff9e 	bl	8001bd8 <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8001c9c:	4b7c      	ldr	r3, [pc, #496]	; (8001e90 <ssd1306_WriteKnob+0x20c>)
 8001c9e:	f107 040c 	add.w	r4, r7, #12
 8001ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel + 1);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	7e1b      	ldrb	r3, [r3, #24]
 8001cac:	3301      	adds	r3, #1
 8001cae:	f107 0020 	add.w	r0, r7, #32
 8001cb2:	4a78      	ldr	r2, [pc, #480]	; (8001e94 <ssd1306_WriteKnob+0x210>)
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	f008 fa13 	bl	800a0e0 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	7e5b      	ldrb	r3, [r3, #25]
 8001cbe:	f107 001c 	add.w	r0, r7, #28
 8001cc2:	4a75      	ldr	r2, [pc, #468]	; (8001e98 <ssd1306_WriteKnob+0x214>)
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	f008 fa0b 	bl	800a0e0 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fa86 	bl	80001e0 <strlen>
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	6838      	ldr	r0, [r7, #0]
 8001cd8:	f000 fa3c 	bl	8002154 <update_init_indicator>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f107 000c 	add.w	r0, r7, #12
 8001ce2:	4a6e      	ldr	r2, [pc, #440]	; (8001e9c <ssd1306_WriteKnob+0x218>)
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	f008 f9fb 	bl	800a0e0 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) KnobMap(k, k->value, k->max_range));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7e99      	ldrb	r1, [r3, #26]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	7f1b      	ldrb	r3, [r3, #28]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6838      	ldr	r0, [r7, #0]
 8001cf6:	f7ff f90d 	bl	8000f14 <KnobMap>
 8001cfa:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8001cfc:	f107 0008 	add.w	r0, r7, #8
 8001d00:	4a65      	ldr	r2, [pc, #404]	; (8001e98 <ssd1306_WriteKnob+0x214>)
 8001d02:	2104      	movs	r1, #4
 8001d04:	f008 f9ec 	bl	800a0e0 <sniprintf>

    ssd1306_SetCursor(0, 0);
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f000 f9d2 	bl	80020b4 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8001d10:	4a63      	ldr	r2, [pc, #396]	; (8001ea0 <ssd1306_WriteKnob+0x21c>)
 8001d12:	f107 0020 	add.w	r0, r7, #32
 8001d16:	2301      	movs	r3, #1
 8001d18:	ca06      	ldmia	r2, {r1, r2}
 8001d1a:	f000 f9a5 	bl	8002068 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 8);
 8001d1e:	2108      	movs	r1, #8
 8001d20:	2000      	movs	r0, #0
 8001d22:	f000 f9c7 	bl	80020b4 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8001d26:	4a5e      	ldr	r2, [pc, #376]	; (8001ea0 <ssd1306_WriteKnob+0x21c>)
 8001d28:	f107 001c 	add.w	r0, r7, #28
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	ca06      	ldmia	r2, {r1, r2}
 8001d30:	f000 f99a 	bl	8002068 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, 4);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fa51 	bl	80001e0 <strlen>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a57      	ldr	r2, [pc, #348]	; (8001ea0 <ssd1306_WriteKnob+0x21c>)
 8001d42:	7812      	ldrb	r2, [r2, #0]
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2104      	movs	r1, #4
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f9ae 	bl	80020b4 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8001d58:	4a51      	ldr	r2, [pc, #324]	; (8001ea0 <ssd1306_WriteKnob+0x21c>)
 8001d5a:	f107 000c 	add.w	r0, r7, #12
 8001d5e:	2301      	movs	r3, #1
 8001d60:	ca06      	ldmia	r2, {r1, r2}
 8001d62:	f000 f981 	bl	8002068 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, 4);
 8001d66:	4b4e      	ldr	r3, [pc, #312]	; (8001ea0 <ssd1306_WriteKnob+0x21c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	f1c3 0320 	rsb	r3, r3, #32
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2104      	movs	r1, #4
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 f99a 	bl	80020b4 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8001d80:	4a47      	ldr	r2, [pc, #284]	; (8001ea0 <ssd1306_WriteKnob+0x21c>)
 8001d82:	f107 0008 	add.w	r0, r7, #8
 8001d86:	2301      	movs	r3, #1
 8001d88:	ca06      	ldmia	r2, {r1, r2}
 8001d8a:	f000 f96d 	bl	8002068 <ssd1306_WriteString>

    uint8_t len_label = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t x = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Draw main label
    len_label = strlen(k->label);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	3303      	adds	r3, #3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fa1e 	bl	80001e0 <strlen>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001daa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dae:	4a3d      	ldr	r2, [pc, #244]	; (8001ea4 <ssd1306_WriteKnob+0x220>)
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001dba:	0fda      	lsrs	r2, r3, #31
 8001dbc:	4413      	add	r3, r2
 8001dbe:	105b      	asrs	r3, r3, #1
 8001dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (len_label % 2 != 0) x += 5;
 8001dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <ssd1306_WriteKnob+0x158>
 8001dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dd6:	3305      	adds	r3, #5
 8001dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ssd1306_SetCursor(x, 16);
 8001ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de0:	2110      	movs	r1, #16
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f966 	bl	80020b4 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	1cd8      	adds	r0, r3, #3
 8001dec:	4a2d      	ldr	r2, [pc, #180]	; (8001ea4 <ssd1306_WriteKnob+0x220>)
 8001dee:	2301      	movs	r3, #1
 8001df0:	ca06      	ldmia	r2, {r1, r2}
 8001df2:	f000 f939 	bl	8002068 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < 128) ? k->value: 0;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	7edb      	ldrb	r3, [r3, #27]
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db02      	blt.n	8001e06 <ssd1306_WriteKnob+0x182>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7e9b      	ldrb	r3, [r3, #26]
 8001e04:	e000      	b.n	8001e08 <ssd1306_WriteKnob+0x184>
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    len_label = strlen(k->sub_labels[sl_index]);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6959      	ldr	r1, [r3, #20]
 8001e10:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001e14:	4613      	mov	r3, r2
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe f9df 	bl	80001e0 <strlen>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001e28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ea4 <ssd1306_WriteKnob+0x220>)
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e38:	0fda      	lsrs	r2, r3, #31
 8001e3a:	4413      	add	r3, r2
 8001e3c:	105b      	asrs	r3, r3, #1
 8001e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (len_label % 2 != 0) x += 5;
 8001e42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d004      	beq.n	8001e5a <ssd1306_WriteKnob+0x1d6>
 8001e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e54:	3305      	adds	r3, #5
 8001e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ssd1306_SetCursor(x, 40);
 8001e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e5e:	2128      	movs	r1, #40	; 0x28
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 f927 	bl	80020b4 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6959      	ldr	r1, [r3, #20]
 8001e6a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001e6e:	4613      	mov	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	18c8      	adds	r0, r1, r3
 8001e76:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <ssd1306_WriteKnob+0x220>)
 8001e78:	2301      	movs	r3, #1
 8001e7a:	ca06      	ldmia	r2, {r1, r2}
 8001e7c:	f000 f8f4 	bl	8002068 <ssd1306_WriteString>

    ssd1306_UpdateScreen(hi2c);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fecd 	bl	8001c20 <ssd1306_UpdateScreen>
}
 8001e86:	bf00      	nop
 8001e88:	372c      	adds	r7, #44	; 0x2c
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd90      	pop	{r4, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	0800b014 	.word	0x0800b014
 8001e94:	0800b000 	.word	0x0800b000
 8001e98:	0800b008 	.word	0x0800b008
 8001e9c:	0800b010 	.word	0x0800b010
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	71bb      	strb	r3, [r7, #6]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db48      	blt.n	8001f54 <ssd1306_DrawPixel+0xac>
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	2b3f      	cmp	r3, #63	; 0x3f
 8001ec6:	d845      	bhi.n	8001f54 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <ssd1306_DrawPixel+0xb8>)
 8001eca:	791b      	ldrb	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8001ed0:	797b      	ldrb	r3, [r7, #5]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf0c      	ite	eq
 8001ed6:	2301      	moveq	r3, #1
 8001ed8:	2300      	movne	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 8001ede:	797b      	ldrb	r3, [r7, #5]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d11a      	bne.n	8001f1a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ee4:	79fa      	ldrb	r2, [r7, #7]
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
 8001ee8:	08db      	lsrs	r3, r3, #3
 8001eea:	b2d8      	uxtb	r0, r3
 8001eec:	4603      	mov	r3, r0
 8001eee:	01db      	lsls	r3, r3, #7
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <ssd1306_DrawPixel+0xbc>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	b25a      	sxtb	r2, r3
 8001ef8:	79bb      	ldrb	r3, [r7, #6]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	b25b      	sxtb	r3, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b259      	sxtb	r1, r3
 8001f0a:	79fa      	ldrb	r2, [r7, #7]
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	01db      	lsls	r3, r3, #7
 8001f10:	4413      	add	r3, r2
 8001f12:	b2c9      	uxtb	r1, r1
 8001f14:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <ssd1306_DrawPixel+0xbc>)
 8001f16:	54d1      	strb	r1, [r2, r3]
 8001f18:	e01d      	b.n	8001f56 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f1a:	79fa      	ldrb	r2, [r7, #7]
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
 8001f1e:	08db      	lsrs	r3, r3, #3
 8001f20:	b2d8      	uxtb	r0, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	01db      	lsls	r3, r3, #7
 8001f26:	4413      	add	r3, r2
 8001f28:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <ssd1306_DrawPixel+0xbc>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	b25a      	sxtb	r2, r3
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	b25b      	sxtb	r3, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	b25b      	sxtb	r3, r3
 8001f40:	4013      	ands	r3, r2
 8001f42:	b259      	sxtb	r1, r3
 8001f44:	79fa      	ldrb	r2, [r7, #7]
 8001f46:	4603      	mov	r3, r0
 8001f48:	01db      	lsls	r3, r3, #7
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2c9      	uxtb	r1, r1
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <ssd1306_DrawPixel+0xbc>)
 8001f50:	54d1      	strb	r1, [r2, r3]
 8001f52:	e000      	b.n	8001f56 <ssd1306_DrawPixel+0xae>
        return;
 8001f54:	bf00      	nop
    }
}
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	200006a4 	.word	0x200006a4
 8001f64:	200002a4 	.word	0x200002a4

08001f68 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4604      	mov	r4, r0
 8001f70:	1d38      	adds	r0, r7, #4
 8001f72:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f76:	461a      	mov	r2, r3
 8001f78:	4623      	mov	r3, r4
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001f80:	4b38      	ldr	r3, [pc, #224]	; (8002064 <ssd1306_WriteChar+0xfc>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	793b      	ldrb	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f8c:	dc06      	bgt.n	8001f9c <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 8001f8e:	4b35      	ldr	r3, [pc, #212]	; (8002064 <ssd1306_WriteChar+0xfc>)
 8001f90:	885b      	ldrh	r3, [r3, #2]
 8001f92:	461a      	mov	r2, r3
 8001f94:	797b      	ldrb	r3, [r7, #5]
 8001f96:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001f98:	2b3f      	cmp	r3, #63	; 0x3f
 8001f9a:	dd01      	ble.n	8001fa0 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e05d      	b.n	800205c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	e04c      	b.n	8002040 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	3b20      	subs	r3, #32
 8001fac:	7979      	ldrb	r1, [r7, #5]
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	440b      	add	r3, r1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	e034      	b.n	8002030 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <ssd1306_WriteChar+0xfc>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b2d8      	uxtb	r0, r3
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <ssd1306_WriteChar+0xfc>)
 8001fe6:	885b      	ldrh	r3, [r3, #2]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	7bba      	ldrb	r2, [r7, #14]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7ff ff57 	bl	8001ea8 <ssd1306_DrawPixel>
 8001ffa:	e016      	b.n	800202a <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <ssd1306_WriteChar+0xfc>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	4413      	add	r3, r2
 8002008:	b2d8      	uxtb	r0, r3
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <ssd1306_WriteChar+0xfc>)
 800200c:	885b      	ldrh	r3, [r3, #2]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	4413      	add	r3, r2
 8002016:	b2d9      	uxtb	r1, r3
 8002018:	7bbb      	ldrb	r3, [r7, #14]
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	f7ff ff3f 	bl	8001ea8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3301      	adds	r3, #1
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	793b      	ldrb	r3, [r7, #4]
 8002032:	461a      	mov	r2, r3
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	4293      	cmp	r3, r2
 8002038:	d3c5      	bcc.n	8001fc6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3301      	adds	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	797b      	ldrb	r3, [r7, #5]
 8002042:	461a      	mov	r2, r3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	4293      	cmp	r3, r2
 8002048:	d3ad      	bcc.n	8001fa6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <ssd1306_WriteChar+0xfc>)
 800204c:	881a      	ldrh	r2, [r3, #0]
 800204e:	793b      	ldrb	r3, [r7, #4]
 8002050:	b29b      	uxth	r3, r3
 8002052:	4413      	add	r3, r2
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <ssd1306_WriteChar+0xfc>)
 8002058:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3724      	adds	r7, #36	; 0x24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd90      	pop	{r4, r7, pc}
 8002064:	200006a4 	.word	0x200006a4

08002068 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	1d38      	adds	r0, r7, #4
 8002072:	e880 0006 	stmia.w	r0, {r1, r2}
 8002076:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002078:	e012      	b.n	80020a0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	7818      	ldrb	r0, [r3, #0]
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	1d3a      	adds	r2, r7, #4
 8002082:	ca06      	ldmia	r2, {r1, r2}
 8002084:	f7ff ff70 	bl	8001f68 <ssd1306_WriteChar>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d002      	beq.n	800209a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	e008      	b.n	80020ac <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3301      	adds	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e8      	bne.n	800207a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	781b      	ldrb	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	460a      	mov	r2, r1
 80020be:	71fb      	strb	r3, [r7, #7]
 80020c0:	4613      	mov	r3, r2
 80020c2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <ssd1306_SetCursor+0x2c>)
 80020ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020cc:	79bb      	ldrb	r3, [r7, #6]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <ssd1306_SetCursor+0x2c>)
 80020d2:	805a      	strh	r2, [r3, #2]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	200006a4 	.word	0x200006a4

080020e4 <ssd1306_Select>:

// Select a display
void ssd1306_Select(I2C_HandleTypeDef *hi2c, Knob *k) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
    i2c_Select(hi2c, I2C_MUX_MASTER_ADDR, k->row);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	461a      	mov	r2, r3
 80020f4:	21e2      	movs	r1, #226	; 0xe2
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f80b 	bl	8002112 <i2c_Select>
    i2c_Select(hi2c, I2C_MUX_SLAVE_ADDR, k->col);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	789b      	ldrb	r3, [r3, #2]
 8002100:	461a      	mov	r2, r3
 8002102:	21e0      	movs	r1, #224	; 0xe0
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f804 	bl	8002112 <i2c_Select>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(I2C_HandleTypeDef *hi2c, uint8_t mux_addr, uint8_t i) {
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af02      	add	r7, sp, #8
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	70fb      	strb	r3, [r7, #3]
 800211e:	4613      	mov	r3, r2
 8002120:	70bb      	strb	r3, [r7, #2]
    if (i > 7) return;
 8002122:	78bb      	ldrb	r3, [r7, #2]
 8002124:	2b07      	cmp	r3, #7
 8002126:	d810      	bhi.n	800214a <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 8002128:	78bb      	ldrb	r3, [r7, #2]
 800212a:	2201      	movs	r2, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(hi2c, mux_addr, temp, 1, 100);
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	b299      	uxth	r1, r3
 8002138:	f107 020c 	add.w	r2, r7, #12
 800213c:	2364      	movs	r3, #100	; 0x64
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2301      	movs	r3, #1
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f002 f82a 	bl	800419c <HAL_I2C_Master_Transmit>
 8002148:	e000      	b.n	800214c <i2c_Select+0x3a>
    if (i > 7) return;
 800214a:	bf00      	nop
}
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    int8_t init_diff = KnobMap(k, k->init_value, 127) - KnobMap(k, k->value, 127);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	227f      	movs	r2, #127	; 0x7f
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7fe fed5 	bl	8000f14 <KnobMap>
 800216a:	4603      	mov	r3, r0
 800216c:	461c      	mov	r4, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7e9b      	ldrb	r3, [r3, #26]
 8002172:	227f      	movs	r2, #127	; 0x7f
 8002174:	4619      	mov	r1, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fecc 	bl	8000f14 <KnobMap>
 800217c:	4603      	mov	r3, r0
 800217e:	1ae3      	subs	r3, r4, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = (abs(init_diff) / 127.0f) * 100;
 8002184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	bfb8      	it	lt
 800218c:	425b      	neglt	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002198:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002284 <update_init_indicator+0x130>
 800219c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002288 <update_init_indicator+0x134>
 80021a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ac:	edc7 7a00 	vstr	s15, [r7]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0)    return  "       @       ";
 80021b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <update_init_indicator+0x6c>
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <update_init_indicator+0x138>)
 80021be:	e05c      	b.n	800227a <update_init_indicator+0x126>

    if (init_pct < 15) {
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	2b0e      	cmp	r3, #14
 80021c4:	d807      	bhi.n	80021d6 <update_init_indicator+0x82>
        if (init_diff > 0) return  "      >        ";
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	dd01      	ble.n	80021d2 <update_init_indicator+0x7e>
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <update_init_indicator+0x13c>)
 80021d0:	e053      	b.n	800227a <update_init_indicator+0x126>
        else               return  "        <      ";
 80021d2:	4b30      	ldr	r3, [pc, #192]	; (8002294 <update_init_indicator+0x140>)
 80021d4:	e051      	b.n	800227a <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 80021d6:	7bbb      	ldrb	r3, [r7, #14]
 80021d8:	2b0e      	cmp	r3, #14
 80021da:	d90a      	bls.n	80021f2 <update_init_indicator+0x9e>
 80021dc:	7bbb      	ldrb	r3, [r7, #14]
 80021de:	2b1d      	cmp	r3, #29
 80021e0:	d807      	bhi.n	80021f2 <update_init_indicator+0x9e>
        if (init_diff > 0) return  "     >>        ";
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	dd01      	ble.n	80021ee <update_init_indicator+0x9a>
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <update_init_indicator+0x144>)
 80021ec:	e045      	b.n	800227a <update_init_indicator+0x126>
        else               return  "        <<     ";
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <update_init_indicator+0x148>)
 80021f0:	e043      	b.n	800227a <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 80021f2:	7bbb      	ldrb	r3, [r7, #14]
 80021f4:	2b1d      	cmp	r3, #29
 80021f6:	d90a      	bls.n	800220e <update_init_indicator+0xba>
 80021f8:	7bbb      	ldrb	r3, [r7, #14]
 80021fa:	2b2c      	cmp	r3, #44	; 0x2c
 80021fc:	d807      	bhi.n	800220e <update_init_indicator+0xba>
        if (init_diff > 0) return  "    >>>        ";
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	2b00      	cmp	r3, #0
 8002204:	dd01      	ble.n	800220a <update_init_indicator+0xb6>
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <update_init_indicator+0x14c>)
 8002208:	e037      	b.n	800227a <update_init_indicator+0x126>
        else               return  "        <<<    ";
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <update_init_indicator+0x150>)
 800220c:	e035      	b.n	800227a <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 800220e:	7bbb      	ldrb	r3, [r7, #14]
 8002210:	2b2c      	cmp	r3, #44	; 0x2c
 8002212:	d90a      	bls.n	800222a <update_init_indicator+0xd6>
 8002214:	7bbb      	ldrb	r3, [r7, #14]
 8002216:	2b3c      	cmp	r3, #60	; 0x3c
 8002218:	d807      	bhi.n	800222a <update_init_indicator+0xd6>
        if (init_diff > 0) return  "   >>>>        ";
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	2b00      	cmp	r3, #0
 8002220:	dd01      	ble.n	8002226 <update_init_indicator+0xd2>
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <update_init_indicator+0x154>)
 8002224:	e029      	b.n	800227a <update_init_indicator+0x126>
        else               return  "        <<<<   ";
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <update_init_indicator+0x158>)
 8002228:	e027      	b.n	800227a <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 800222a:	7bbb      	ldrb	r3, [r7, #14]
 800222c:	2b3c      	cmp	r3, #60	; 0x3c
 800222e:	d90a      	bls.n	8002246 <update_init_indicator+0xf2>
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	2b4c      	cmp	r3, #76	; 0x4c
 8002234:	d807      	bhi.n	8002246 <update_init_indicator+0xf2>
        if (init_diff > 0) return  "  >>>>>        ";
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	2b00      	cmp	r3, #0
 800223c:	dd01      	ble.n	8002242 <update_init_indicator+0xee>
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <update_init_indicator+0x15c>)
 8002240:	e01b      	b.n	800227a <update_init_indicator+0x126>
        else               return  "        <<<<<  ";
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <update_init_indicator+0x160>)
 8002244:	e019      	b.n	800227a <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 8002246:	7bbb      	ldrb	r3, [r7, #14]
 8002248:	2b4c      	cmp	r3, #76	; 0x4c
 800224a:	d90a      	bls.n	8002262 <update_init_indicator+0x10e>
 800224c:	7bbb      	ldrb	r3, [r7, #14]
 800224e:	2b5c      	cmp	r3, #92	; 0x5c
 8002250:	d807      	bhi.n	8002262 <update_init_indicator+0x10e>
        if (init_diff > 0) return  " >>>>>>        ";
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	2b00      	cmp	r3, #0
 8002258:	dd01      	ble.n	800225e <update_init_indicator+0x10a>
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <update_init_indicator+0x164>)
 800225c:	e00d      	b.n	800227a <update_init_indicator+0x126>
        else               return  "        <<<<<< ";
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <update_init_indicator+0x168>)
 8002260:	e00b      	b.n	800227a <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002262:	7bbb      	ldrb	r3, [r7, #14]
 8002264:	2b5c      	cmp	r3, #92	; 0x5c
 8002266:	d907      	bls.n	8002278 <update_init_indicator+0x124>
        if (init_diff > 0) return  ">>>>>>>        ";
 8002268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	dd01      	ble.n	8002274 <update_init_indicator+0x120>
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <update_init_indicator+0x16c>)
 8002272:	e002      	b.n	800227a <update_init_indicator+0x126>
        else               return  "        <<<<<<<";
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <update_init_indicator+0x170>)
 8002276:	e000      	b.n	800227a <update_init_indicator+0x126>
    } else {
        return " ";
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <update_init_indicator+0x174>)
    }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	bf00      	nop
 8002284:	42fe0000 	.word	0x42fe0000
 8002288:	42c80000 	.word	0x42c80000
 800228c:	0800b014 	.word	0x0800b014
 8002290:	0800b024 	.word	0x0800b024
 8002294:	0800b034 	.word	0x0800b034
 8002298:	0800b044 	.word	0x0800b044
 800229c:	0800b054 	.word	0x0800b054
 80022a0:	0800b064 	.word	0x0800b064
 80022a4:	0800b074 	.word	0x0800b074
 80022a8:	0800b084 	.word	0x0800b084
 80022ac:	0800b094 	.word	0x0800b094
 80022b0:	0800b0a4 	.word	0x0800b0a4
 80022b4:	0800b0b4 	.word	0x0800b0b4
 80022b8:	0800b0c4 	.word	0x0800b0c4
 80022bc:	0800b0d4 	.word	0x0800b0d4
 80022c0:	0800b0e4 	.word	0x0800b0e4
 80022c4:	0800b0f4 	.word	0x0800b0f4
 80022c8:	0800b104 	.word	0x0800b104

080022cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_MspInit+0x4c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <HAL_MspInit+0x4c>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_MspInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_MspInit+0x4c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_MspInit+0x4c>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_MspInit+0x4c>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800

0800231c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2f      	ldr	r2, [pc, #188]	; (80023f8 <HAL_ADC_MspInit+0xdc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d157      	bne.n	80023ee <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <HAL_ADC_MspInit+0xe0>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a2d      	ldr	r2, [pc, #180]	; (80023fc <HAL_ADC_MspInit+0xe0>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_ADC_MspInit+0xe0>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_ADC_MspInit+0xe0>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a26      	ldr	r2, [pc, #152]	; (80023fc <HAL_ADC_MspInit+0xe0>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_ADC_MspInit+0xe0>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002376:	230f      	movs	r3, #15
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237a:	2303      	movs	r3, #3
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	481d      	ldr	r0, [pc, #116]	; (8002400 <HAL_ADC_MspInit+0xe4>)
 800238a:	f001 fc3f 	bl	8003c0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 8002390:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_ADC_MspInit+0xec>)
 8002392:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 8002396:	2200      	movs	r2, #0
 8002398:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 80023a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 80023b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 80023b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 80023c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023d2:	480c      	ldr	r0, [pc, #48]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 80023d4:	f001 f83a 	bl	800344c <HAL_DMA_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80023de:	f7ff fab8 	bl	8001952 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a07      	ldr	r2, [pc, #28]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38
 80023e8:	4a06      	ldr	r2, [pc, #24]	; (8002404 <HAL_ADC_MspInit+0xe8>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40012000 	.word	0x40012000
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020000 	.word	0x40020000
 8002404:	2000232c 	.word	0x2000232c
 8002408:	40026410 	.word	0x40026410

0800240c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <HAL_I2C_MspInit+0x84>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d12b      	bne.n	8002486 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_I2C_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a17      	ldr	r2, [pc, #92]	; (8002494 <HAL_I2C_MspInit+0x88>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <HAL_I2C_MspInit+0x88>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800244a:	23c0      	movs	r3, #192	; 0xc0
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244e:	2312      	movs	r3, #18
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002452:	2301      	movs	r3, #1
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002456:	2303      	movs	r3, #3
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800245a:	2304      	movs	r3, #4
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	480c      	ldr	r0, [pc, #48]	; (8002498 <HAL_I2C_MspInit+0x8c>)
 8002466:	f001 fbd1 	bl	8003c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_I2C_MspInit+0x88>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <HAL_I2C_MspInit+0x88>)
 8002474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_I2C_MspInit+0x88>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40005400 	.word	0x40005400
 8002494:	40023800 	.word	0x40023800
 8002498:	40020400 	.word	0x40020400

0800249c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <HAL_RTC_MspInit+0x24>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d102      	bne.n	80024b4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RTC_MspInit+0x28>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40002800 	.word	0x40002800
 80024c4:	42470e3c 	.word	0x42470e3c

080024c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <NMI_Handler+0x4>

080024ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <HardFault_Handler+0x4>

080024d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <MemManage_Handler+0x4>

080024da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024de:	e7fe      	b.n	80024de <BusFault_Handler+0x4>

080024e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <UsageFault_Handler+0x4>

080024e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002514:	f000 f948 	bl	80027a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <DMA2_Stream0_IRQHandler+0x10>)
 8002522:	f001 f909 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000232c 	.word	0x2000232c

08002530 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <OTG_FS_IRQHandler+0x10>)
 8002536:	f002 fc18 	bl	8004d6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20002904 	.word	0x20002904

08002544 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	e00a      	b.n	800256c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002556:	f3af 8000 	nop.w
 800255a:	4601      	mov	r1, r0
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	60ba      	str	r2, [r7, #8]
 8002562:	b2ca      	uxtb	r2, r1
 8002564:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	3301      	adds	r3, #1
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	dbf0      	blt.n	8002556 <_read+0x12>
	}

return len;
 8002574:	687b      	ldr	r3, [r7, #4]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e009      	b.n	80025a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	60ba      	str	r2, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3301      	adds	r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	dbf1      	blt.n	8002590 <_write+0x12>
	}
	return len;
 80025ac:	687b      	ldr	r3, [r7, #4]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_close>:

int _close(int file)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
	return -1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025de:	605a      	str	r2, [r3, #4]
	return 0;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_isatty>:

int _isatty(int file)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
	return 1;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
	return 0;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002628:	4a14      	ldr	r2, [pc, #80]	; (800267c <_sbrk+0x5c>)
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <_sbrk+0x60>)
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <_sbrk+0x64>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <_sbrk+0x64>)
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <_sbrk+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <_sbrk+0x64>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d207      	bcs.n	8002660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002650:	f007 fbdc 	bl	8009e0c <__errno>
 8002654:	4603      	mov	r3, r0
 8002656:	220c      	movs	r2, #12
 8002658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	e009      	b.n	8002674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <_sbrk+0x64>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <_sbrk+0x64>)
 8002670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002672:	68fb      	ldr	r3, [r7, #12]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20020000 	.word	0x20020000
 8002680:	00000400 	.word	0x00000400
 8002684:	200006ac 	.word	0x200006ac
 8002688:	20002d20 	.word	0x20002d20

0800268c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <SystemInit+0x20>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <SystemInit+0x20>)
 8002698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800269c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b4:	480d      	ldr	r0, [pc, #52]	; (80026ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026b6:	490e      	ldr	r1, [pc, #56]	; (80026f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026b8:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026cc:	4c0b      	ldr	r4, [pc, #44]	; (80026fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026da:	f7ff ffd7 	bl	800268c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026de:	f007 fb9b 	bl	8009e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e2:	f7fe fd1b 	bl	800111c <main>
  bx  lr    
 80026e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80026f4:	0800c4e8 	.word	0x0800c4e8
  ldr r2, =_sbss
 80026f8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80026fc:	20002d1c 	.word	0x20002d1c

08002700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC_IRQHandler>
	...

08002704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HAL_Init+0x40>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <HAL_Init+0x40>)
 800270e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_Init+0x40>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_Init+0x40>)
 800271a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <HAL_Init+0x40>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a07      	ldr	r2, [pc, #28]	; (8002744 <HAL_Init+0x40>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800272c:	2003      	movs	r0, #3
 800272e:	f000 fe4b 	bl	80033c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002732:	2000      	movs	r0, #0
 8002734:	f000 f808 	bl	8002748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002738:	f7ff fdc8 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00

08002748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_InitTick+0x54>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x58>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fe63 	bl	8003432 <HAL_SYSTICK_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e00e      	b.n	8002794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b0f      	cmp	r3, #15
 800277a:	d80a      	bhi.n	8002792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800277c:	2200      	movs	r2, #0
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f000 fe2b 	bl	80033de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002788:	4a06      	ldr	r2, [pc, #24]	; (80027a4 <HAL_InitTick+0x5c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000010 	.word	0x20000010
 80027a0:	20000018 	.word	0x20000018
 80027a4:	20000014 	.word	0x20000014

080027a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_IncTick+0x20>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x24>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_IncTick+0x24>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000018 	.word	0x20000018
 80027cc:	20002430 	.word	0x20002430

080027d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return uwTick;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_GetTick+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20002430 	.word	0x20002430

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff ffee 	bl	80027d0 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d005      	beq.n	800280e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_Delay+0x44>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800280e:	bf00      	nop
 8002810:	f7ff ffde 	bl	80027d0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d8f7      	bhi.n	8002810 <HAL_Delay+0x28>
  {
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000018 	.word	0x20000018

08002830 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e033      	b.n	80028ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fd64 	bl	800231c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002876:	f023 0302 	bic.w	r3, r3, #2
 800287a:	f043 0202 	orr.w	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fb52 	bl	8002f2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
 800289e:	e001      	b.n	80028a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_Start+0x1a>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e097      	b.n	8002a02 <HAL_ADC_Start+0x14a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d018      	beq.n	800291a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028f8:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <HAL_ADC_Start+0x158>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a45      	ldr	r2, [pc, #276]	; (8002a14 <HAL_ADC_Start+0x15c>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0c9a      	lsrs	r2, r3, #18
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800290c:	e002      	b.n	8002914 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3b01      	subs	r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f9      	bne.n	800290e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d15f      	bne.n	80029e8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002952:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002966:	d106      	bne.n	8002976 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	f023 0206 	bic.w	r2, r3, #6
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
 8002974:	e002      	b.n	800297c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_ADC_Start+0x160>)
 8002986:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002990:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d129      	bne.n	8002a00 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	e020      	b.n	8002a00 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <HAL_ADC_Start+0x164>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d11b      	bne.n	8002a00 <HAL_ADC_Start+0x148>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d114      	bne.n	8002a00 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	e00b      	b.n	8002a00 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0210 	orr.w	r2, r3, #16
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000010 	.word	0x20000010
 8002a14:	431bde83 	.word	0x431bde83
 8002a18:	40012300 	.word	0x40012300
 8002a1c:	40012000 	.word	0x40012000

08002a20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_Start_DMA+0x1e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e0ce      	b.n	8002bdc <HAL_ADC_Start_DMA+0x1bc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d018      	beq.n	8002a86 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a64:	4b5f      	ldr	r3, [pc, #380]	; (8002be4 <HAL_ADC_Start_DMA+0x1c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a5f      	ldr	r2, [pc, #380]	; (8002be8 <HAL_ADC_Start_DMA+0x1c8>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	0c9a      	lsrs	r2, r3, #18
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a78:	e002      	b.n	8002a80 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f9      	bne.n	8002a7a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a94:	d107      	bne.n	8002aa6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f040 8086 	bne.w	8002bc2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ae0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af4:	d106      	bne.n	8002b04 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f023 0206 	bic.w	r2, r3, #6
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
 8002b02:	e002      	b.n	8002b0a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b12:	4b36      	ldr	r3, [pc, #216]	; (8002bec <HAL_ADC_Start_DMA+0x1cc>)
 8002b14:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	4a35      	ldr	r2, [pc, #212]	; (8002bf0 <HAL_ADC_Start_DMA+0x1d0>)
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	4a34      	ldr	r2, [pc, #208]	; (8002bf4 <HAL_ADC_Start_DMA+0x1d4>)
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	4a33      	ldr	r2, [pc, #204]	; (8002bf8 <HAL_ADC_Start_DMA+0x1d8>)
 8002b2c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b36:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b46:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b56:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	334c      	adds	r3, #76	; 0x4c
 8002b62:	4619      	mov	r1, r3
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f000 fd1e 	bl	80035a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10f      	bne.n	8002b98 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d129      	bne.n	8002bda <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	e020      	b.n	8002bda <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <HAL_ADC_Start_DMA+0x1dc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d11b      	bne.n	8002bda <HAL_ADC_Start_DMA+0x1ba>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d114      	bne.n	8002bda <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	e00b      	b.n	8002bda <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f043 0210 	orr.w	r2, r3, #16
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000010 	.word	0x20000010
 8002be8:	431bde83 	.word	0x431bde83
 8002bec:	40012300 	.word	0x40012300
 8002bf0:	08003125 	.word	0x08003125
 8002bf4:	080031df 	.word	0x080031df
 8002bf8:	080031fb 	.word	0x080031fb
 8002bfc:	40012000 	.word	0x40012000

08002c00 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_Stop_DMA+0x1a>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e048      	b.n	8002cac <HAL_ADC_Stop_DMA+0xac>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d130      	bne.n	8002ca2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c4e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d10f      	bne.n	8002c7e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fcf8 	bl	8003658 <HAL_DMA_Abort>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002c8c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x1c>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e113      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x244>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b09      	cmp	r3, #9
 8002cf2:	d925      	bls.n	8002d40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68d9      	ldr	r1, [r3, #12]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	3b1e      	subs	r3, #30
 8002d0a:	2207      	movs	r2, #7
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43da      	mvns	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	400a      	ands	r2, r1
 8002d18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68d9      	ldr	r1, [r3, #12]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4403      	add	r3, r0
 8002d32:	3b1e      	subs	r3, #30
 8002d34:	409a      	lsls	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	e022      	b.n	8002d86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6919      	ldr	r1, [r3, #16]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	2207      	movs	r2, #7
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	400a      	ands	r2, r1
 8002d62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6919      	ldr	r1, [r3, #16]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4618      	mov	r0, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4403      	add	r3, r0
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d824      	bhi.n	8002dd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3b05      	subs	r3, #5
 8002da0:	221f      	movs	r2, #31
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43da      	mvns	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	400a      	ands	r2, r1
 8002dae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b05      	subs	r3, #5
 8002dca:	fa00 f203 	lsl.w	r2, r0, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd6:	e04c      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d824      	bhi.n	8002e2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	3b23      	subs	r3, #35	; 0x23
 8002df2:	221f      	movs	r2, #31
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	400a      	ands	r2, r1
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	3b23      	subs	r3, #35	; 0x23
 8002e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
 8002e28:	e023      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b41      	subs	r3, #65	; 0x41
 8002e3c:	221f      	movs	r2, #31
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	400a      	ands	r2, r1
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	3b41      	subs	r3, #65	; 0x41
 8002e66:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_ADC_ConfigChannel+0x250>)
 8002e74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <HAL_ADC_ConfigChannel+0x254>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d10f      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x1d8>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b12      	cmp	r3, #18
 8002e86:	d10b      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_ADC_ConfigChannel+0x254>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d12b      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x23a>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <HAL_ADC_ConfigChannel+0x258>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d003      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x1f4>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b11      	cmp	r3, #17
 8002eba:	d122      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_ADC_ConfigChannel+0x258>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d111      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_ADC_ConfigChannel+0x25c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a11      	ldr	r2, [pc, #68]	; (8002f28 <HAL_ADC_ConfigChannel+0x260>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	0c9a      	lsrs	r2, r3, #18
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ef4:	e002      	b.n	8002efc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f9      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	40012300 	.word	0x40012300
 8002f1c:	40012000 	.word	0x40012000
 8002f20:	10000012 	.word	0x10000012
 8002f24:	20000010 	.word	0x20000010
 8002f28:	431bde83 	.word	0x431bde83

08002f2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f34:	4b79      	ldr	r3, [pc, #484]	; (800311c <ADC_Init+0x1f0>)
 8002f36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	021a      	lsls	r2, r3, #8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6899      	ldr	r1, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	4a58      	ldr	r2, [pc, #352]	; (8003120 <ADC_Init+0x1f4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d022      	beq.n	800300a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6899      	ldr	r1, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6899      	ldr	r1, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	e00f      	b.n	800302a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003028:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0202 	bic.w	r2, r2, #2
 8003038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6899      	ldr	r1, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7e1b      	ldrb	r3, [r3, #24]
 8003044:	005a      	lsls	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003066:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003076:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	3b01      	subs	r3, #1
 8003084:	035a      	lsls	r2, r3, #13
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	e007      	b.n	80030a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	051a      	lsls	r2, r3, #20
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030e2:	025a      	lsls	r2, r3, #9
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6899      	ldr	r1, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	029a      	lsls	r2, r3, #10
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40012300 	.word	0x40012300
 8003120:	0f000001 	.word	0x0f000001

08003124 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800313a:	2b00      	cmp	r3, #0
 800313c:	d13c      	bne.n	80031b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d12b      	bne.n	80031b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800315c:	2b00      	cmp	r3, #0
 800315e:	d127      	bne.n	80031b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003178:	2b00      	cmp	r3, #0
 800317a:	d119      	bne.n	80031b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0220 	bic.w	r2, r2, #32
 800318a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f7fe fbc3 	bl	800193c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031b6:	e00e      	b.n	80031d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff fd75 	bl	8002cb4 <HAL_ADC_ErrorCallback>
}
 80031ca:	e004      	b.n	80031d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7fe fb9b 	bl	8001928 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2240      	movs	r2, #64	; 0x40
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f043 0204 	orr.w	r2, r3, #4
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7ff fd4a 	bl	8002cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325a:	4a04      	ldr	r2, [pc, #16]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	60d3      	str	r3, [r2, #12]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <__NVIC_GetPriorityGrouping+0x18>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 0307 	and.w	r3, r3, #7
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db0b      	blt.n	80032b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <__NVIC_EnableIRQ+0x38>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	db0a      	blt.n	80032f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	490c      	ldr	r1, [pc, #48]	; (8003314 <__NVIC_SetPriority+0x4c>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	440b      	add	r3, r1
 80032ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f0:	e00a      	b.n	8003308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4908      	ldr	r1, [pc, #32]	; (8003318 <__NVIC_SetPriority+0x50>)
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3b04      	subs	r3, #4
 8003300:	0112      	lsls	r2, r2, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	440b      	add	r3, r1
 8003306:	761a      	strb	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000e100 	.word	0xe000e100
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f1c3 0307 	rsb	r3, r3, #7
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf28      	it	cs
 800333a:	2304      	movcs	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3304      	adds	r3, #4
 8003342:	2b06      	cmp	r3, #6
 8003344:	d902      	bls.n	800334c <NVIC_EncodePriority+0x30>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3b03      	subs	r3, #3
 800334a:	e000      	b.n	800334e <NVIC_EncodePriority+0x32>
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43d9      	mvns	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	4313      	orrs	r3, r2
         );
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003394:	d301      	bcc.n	800339a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003396:	2301      	movs	r3, #1
 8003398:	e00f      	b.n	80033ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <SysTick_Config+0x40>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a2:	210f      	movs	r1, #15
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	f7ff ff8e 	bl	80032c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <SysTick_Config+0x40>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b2:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <SysTick_Config+0x40>)
 80033b4:	2207      	movs	r2, #7
 80033b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	e000e010 	.word	0xe000e010

080033c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff29 	bl	8003228 <__NVIC_SetPriorityGrouping>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f0:	f7ff ff3e 	bl	8003270 <__NVIC_GetPriorityGrouping>
 80033f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7ff ff8e 	bl	800331c <NVIC_EncodePriority>
 8003400:	4602      	mov	r2, r0
 8003402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff5d 	bl	80032c8 <__NVIC_SetPriority>
}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff31 	bl	800328c <__NVIC_EnableIRQ>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ffa2 	bl	8003384 <SysTick_Config>
 8003440:	4603      	mov	r3, r0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7ff f9ba 	bl	80027d0 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e099      	b.n	800359c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003488:	e00f      	b.n	80034aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800348a:	f7ff f9a1 	bl	80027d0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b05      	cmp	r3, #5
 8003496:	d908      	bls.n	80034aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2203      	movs	r2, #3
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e078      	b.n	800359c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e8      	bne.n	800348a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <HAL_DMA_Init+0x158>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2b04      	cmp	r3, #4
 8003502:	d107      	bne.n	8003514 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	4313      	orrs	r3, r2
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 0307 	bic.w	r3, r3, #7
 800352a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b04      	cmp	r3, #4
 800353c:	d117      	bne.n	800356e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fadf 	bl	8003b14 <DMA_CheckFifoParam>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800356a:	2301      	movs	r3, #1
 800356c:	e016      	b.n	800359c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa96 	bl	8003aa8 <DMA_CalcBaseAndBitshift>
 800357c:	4603      	mov	r3, r0
 800357e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	223f      	movs	r2, #63	; 0x3f
 8003586:	409a      	lsls	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	f010803f 	.word	0xf010803f

080035a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_DMA_Start_IT+0x26>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e040      	b.n	8003650 <HAL_DMA_Start_IT+0xa8>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d12f      	bne.n	8003642 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fa28 	bl	8003a4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	223f      	movs	r2, #63	; 0x3f
 8003602:	409a      	lsls	r2, r3
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0216 	orr.w	r2, r2, #22
 8003616:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0208 	orr.w	r2, r2, #8
 800362e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e005      	b.n	800364e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800364a:	2302      	movs	r3, #2
 800364c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003666:	f7ff f8b3 	bl	80027d0 <HAL_GetTick>
 800366a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d008      	beq.n	800368a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2280      	movs	r2, #128	; 0x80
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e052      	b.n	8003730 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0216 	bic.w	r2, r2, #22
 8003698:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <HAL_DMA_Abort+0x62>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0208 	bic.w	r2, r2, #8
 80036c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036da:	e013      	b.n	8003704 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036dc:	f7ff f878 	bl	80027d0 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d90c      	bls.n	8003704 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2203      	movs	r2, #3
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e015      	b.n	8003730 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e4      	bne.n	80036dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	223f      	movs	r2, #63	; 0x3f
 8003718:	409a      	lsls	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003744:	4b92      	ldr	r3, [pc, #584]	; (8003990 <HAL_DMA_IRQHandler+0x258>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a92      	ldr	r2, [pc, #584]	; (8003994 <HAL_DMA_IRQHandler+0x25c>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0a9b      	lsrs	r3, r3, #10
 8003750:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	2208      	movs	r2, #8
 8003764:	409a      	lsls	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01a      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0204 	bic.w	r2, r2, #4
 800378a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	2208      	movs	r2, #8
 8003792:	409a      	lsls	r2, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f043 0201 	orr.w	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	2201      	movs	r2, #1
 80037aa:	409a      	lsls	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d012      	beq.n	80037da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c6:	2201      	movs	r2, #1
 80037c8:	409a      	lsls	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	f043 0202 	orr.w	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	2204      	movs	r2, #4
 80037e0:	409a      	lsls	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d012      	beq.n	8003810 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	2204      	movs	r2, #4
 80037fe:	409a      	lsls	r2, r3
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	f043 0204 	orr.w	r2, r3, #4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	2210      	movs	r2, #16
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d043      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d03c      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	2210      	movs	r2, #16
 8003834:	409a      	lsls	r2, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d018      	beq.n	800387a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d108      	bne.n	8003868 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d024      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
 8003866:	e01f      	b.n	80038a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4798      	blx	r3
 8003878:	e016      	b.n	80038a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d107      	bne.n	8003898 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0208 	bic.w	r2, r2, #8
 8003896:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	2220      	movs	r2, #32
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 808e 	beq.w	80039d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8086 	beq.w	80039d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	2220      	movs	r2, #32
 80038d0:	409a      	lsls	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d136      	bne.n	8003950 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0216 	bic.w	r2, r2, #22
 80038f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003900:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <HAL_DMA_IRQHandler+0x1da>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0208 	bic.w	r2, r2, #8
 8003920:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	223f      	movs	r2, #63	; 0x3f
 8003928:	409a      	lsls	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003942:	2b00      	cmp	r3, #0
 8003944:	d07d      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
        }
        return;
 800394e:	e078      	b.n	8003a42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01c      	beq.n	8003998 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	2b00      	cmp	r3, #0
 8003972:	d030      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
 800397c:	e02b      	b.n	80039d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d027      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
 800398e:	e022      	b.n	80039d6 <HAL_DMA_IRQHandler+0x29e>
 8003990:	20000010 	.word	0x20000010
 8003994:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10f      	bne.n	80039c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0210 	bic.w	r2, r2, #16
 80039b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d032      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d022      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2205      	movs	r2, #5
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d307      	bcc.n	8003a1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f2      	bne.n	8003a02 <HAL_DMA_IRQHandler+0x2ca>
 8003a1c:	e000      	b.n	8003a20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
 8003a40:	e000      	b.n	8003a44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a42:	bf00      	nop
    }
  }
}
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop

08003a4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d108      	bne.n	8003a8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a8a:	e007      	b.n	8003a9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3b10      	subs	r3, #16
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <DMA_CalcBaseAndBitshift+0x64>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ac2:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <DMA_CalcBaseAndBitshift+0x68>)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d909      	bls.n	8003aea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ae8:	e007      	b.n	8003afa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	aaaaaaab 	.word	0xaaaaaaab
 8003b10:	0800c438 	.word	0x0800c438

08003b14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11f      	bne.n	8003b6e <DMA_CheckFifoParam+0x5a>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d856      	bhi.n	8003be2 <DMA_CheckFifoParam+0xce>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <DMA_CheckFifoParam+0x28>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b5f 	.word	0x08003b5f
 8003b44:	08003b4d 	.word	0x08003b4d
 8003b48:	08003be3 	.word	0x08003be3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d046      	beq.n	8003be6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b5c:	e043      	b.n	8003be6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b66:	d140      	bne.n	8003bea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6c:	e03d      	b.n	8003bea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b76:	d121      	bne.n	8003bbc <DMA_CheckFifoParam+0xa8>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d837      	bhi.n	8003bee <DMA_CheckFifoParam+0xda>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <DMA_CheckFifoParam+0x70>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003b9b 	.word	0x08003b9b
 8003b8c:	08003b95 	.word	0x08003b95
 8003b90:	08003bad 	.word	0x08003bad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e030      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d025      	beq.n	8003bf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003baa:	e022      	b.n	8003bf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bb4:	d11f      	bne.n	8003bf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bba:	e01c      	b.n	8003bf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d903      	bls.n	8003bca <DMA_CheckFifoParam+0xb6>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d003      	beq.n	8003bd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bc8:	e018      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bce:	e015      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e00b      	b.n	8003bfa <DMA_CheckFifoParam+0xe6>
      break;
 8003be2:	bf00      	nop
 8003be4:	e00a      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003be6:	bf00      	nop
 8003be8:	e008      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bea:	bf00      	nop
 8003bec:	e006      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e004      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e002      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;   
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
    }
  } 
  
  return status; 
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop

08003c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	e159      	b.n	8003edc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c28:	2201      	movs	r2, #1
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f040 8148 	bne.w	8003ed6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d005      	beq.n	8003c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d130      	bne.n	8003cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c94:	2201      	movs	r2, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 0201 	and.w	r2, r3, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d017      	beq.n	8003cfc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d123      	bne.n	8003d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	08da      	lsrs	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3208      	adds	r2, #8
 8003d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	220f      	movs	r2, #15
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0203 	and.w	r2, r3, #3
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80a2 	beq.w	8003ed6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b57      	ldr	r3, [pc, #348]	; (8003ef4 <HAL_GPIO_Init+0x2e8>)
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	4a56      	ldr	r2, [pc, #344]	; (8003ef4 <HAL_GPIO_Init+0x2e8>)
 8003d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da0:	6453      	str	r3, [r2, #68]	; 0x44
 8003da2:	4b54      	ldr	r3, [pc, #336]	; (8003ef4 <HAL_GPIO_Init+0x2e8>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dae:	4a52      	ldr	r2, [pc, #328]	; (8003ef8 <HAL_GPIO_Init+0x2ec>)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	3302      	adds	r3, #2
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a49      	ldr	r2, [pc, #292]	; (8003efc <HAL_GPIO_Init+0x2f0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d019      	beq.n	8003e0e <HAL_GPIO_Init+0x202>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a48      	ldr	r2, [pc, #288]	; (8003f00 <HAL_GPIO_Init+0x2f4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <HAL_GPIO_Init+0x1fe>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a47      	ldr	r2, [pc, #284]	; (8003f04 <HAL_GPIO_Init+0x2f8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00d      	beq.n	8003e06 <HAL_GPIO_Init+0x1fa>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a46      	ldr	r2, [pc, #280]	; (8003f08 <HAL_GPIO_Init+0x2fc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <HAL_GPIO_Init+0x1f6>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a45      	ldr	r2, [pc, #276]	; (8003f0c <HAL_GPIO_Init+0x300>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_GPIO_Init+0x1f2>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	e008      	b.n	8003e10 <HAL_GPIO_Init+0x204>
 8003dfe:	2307      	movs	r3, #7
 8003e00:	e006      	b.n	8003e10 <HAL_GPIO_Init+0x204>
 8003e02:	2303      	movs	r3, #3
 8003e04:	e004      	b.n	8003e10 <HAL_GPIO_Init+0x204>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e002      	b.n	8003e10 <HAL_GPIO_Init+0x204>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_GPIO_Init+0x204>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	f002 0203 	and.w	r2, r2, #3
 8003e16:	0092      	lsls	r2, r2, #2
 8003e18:	4093      	lsls	r3, r2
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e20:	4935      	ldr	r1, [pc, #212]	; (8003ef8 <HAL_GPIO_Init+0x2ec>)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	3302      	adds	r3, #2
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e2e:	4b38      	ldr	r3, [pc, #224]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e52:	4a2f      	ldr	r2, [pc, #188]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e58:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e7c:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e82:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ea6:	4a1a      	ldr	r2, [pc, #104]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eac:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ed0:	4a0f      	ldr	r2, [pc, #60]	; (8003f10 <HAL_GPIO_Init+0x304>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b0f      	cmp	r3, #15
 8003ee0:	f67f aea2 	bls.w	8003c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	3724      	adds	r7, #36	; 0x24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40013800 	.word	0x40013800
 8003efc:	40020000 	.word	0x40020000
 8003f00:	40020400 	.word	0x40020400
 8003f04:	40020800 	.word	0x40020800
 8003f08:	40020c00 	.word	0x40020c00
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40013c00 	.word	0x40013c00

08003f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e12b      	b.n	800417e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fe fa66 	bl	800240c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f78:	f002 fb4a 	bl	8006610 <HAL_RCC_GetPCLK1Freq>
 8003f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4a81      	ldr	r2, [pc, #516]	; (8004188 <HAL_I2C_Init+0x274>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d807      	bhi.n	8003f98 <HAL_I2C_Init+0x84>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a80      	ldr	r2, [pc, #512]	; (800418c <HAL_I2C_Init+0x278>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bf94      	ite	ls
 8003f90:	2301      	movls	r3, #1
 8003f92:	2300      	movhi	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e006      	b.n	8003fa6 <HAL_I2C_Init+0x92>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a7d      	ldr	r2, [pc, #500]	; (8004190 <HAL_I2C_Init+0x27c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	bf94      	ite	ls
 8003fa0:	2301      	movls	r3, #1
 8003fa2:	2300      	movhi	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0e7      	b.n	800417e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a78      	ldr	r2, [pc, #480]	; (8004194 <HAL_I2C_Init+0x280>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	0c9b      	lsrs	r3, r3, #18
 8003fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a6a      	ldr	r2, [pc, #424]	; (8004188 <HAL_I2C_Init+0x274>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d802      	bhi.n	8003fe8 <HAL_I2C_Init+0xd4>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	e009      	b.n	8003ffc <HAL_I2C_Init+0xe8>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	4a69      	ldr	r2, [pc, #420]	; (8004198 <HAL_I2C_Init+0x284>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	099b      	lsrs	r3, r3, #6
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	430b      	orrs	r3, r1
 8004002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800400e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	495c      	ldr	r1, [pc, #368]	; (8004188 <HAL_I2C_Init+0x274>)
 8004018:	428b      	cmp	r3, r1
 800401a:	d819      	bhi.n	8004050 <HAL_I2C_Init+0x13c>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e59      	subs	r1, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	fbb1 f3f3 	udiv	r3, r1, r3
 800402a:	1c59      	adds	r1, r3, #1
 800402c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004030:	400b      	ands	r3, r1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_I2C_Init+0x138>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1e59      	subs	r1, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fbb1 f3f3 	udiv	r3, r1, r3
 8004044:	3301      	adds	r3, #1
 8004046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404a:	e051      	b.n	80040f0 <HAL_I2C_Init+0x1dc>
 800404c:	2304      	movs	r3, #4
 800404e:	e04f      	b.n	80040f0 <HAL_I2C_Init+0x1dc>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d111      	bne.n	800407c <HAL_I2C_Init+0x168>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1e58      	subs	r0, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	440b      	add	r3, r1
 8004066:	fbb0 f3f3 	udiv	r3, r0, r3
 800406a:	3301      	adds	r3, #1
 800406c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e012      	b.n	80040a2 <HAL_I2C_Init+0x18e>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1e58      	subs	r0, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	0099      	lsls	r1, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004092:	3301      	adds	r3, #1
 8004094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Init+0x196>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e022      	b.n	80040f0 <HAL_I2C_Init+0x1dc>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10e      	bne.n	80040d0 <HAL_I2C_Init+0x1bc>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1e58      	subs	r0, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6859      	ldr	r1, [r3, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	440b      	add	r3, r1
 80040c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ce:	e00f      	b.n	80040f0 <HAL_I2C_Init+0x1dc>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1e58      	subs	r0, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	0099      	lsls	r1, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e6:	3301      	adds	r3, #1
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	6809      	ldr	r1, [r1, #0]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69da      	ldr	r2, [r3, #28]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800411e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6911      	ldr	r1, [r2, #16]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68d2      	ldr	r2, [r2, #12]
 800412a:	4311      	orrs	r1, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	430b      	orrs	r3, r1
 8004132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	000186a0 	.word	0x000186a0
 800418c:	001e847f 	.word	0x001e847f
 8004190:	003d08ff 	.word	0x003d08ff
 8004194:	431bde83 	.word	0x431bde83
 8004198:	10624dd3 	.word	0x10624dd3

0800419c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	461a      	mov	r2, r3
 80041a8:	460b      	mov	r3, r1
 80041aa:	817b      	strh	r3, [r7, #10]
 80041ac:	4613      	mov	r3, r2
 80041ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041b0:	f7fe fb0e 	bl	80027d0 <HAL_GetTick>
 80041b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b20      	cmp	r3, #32
 80041c0:	f040 80e0 	bne.w	8004384 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2319      	movs	r3, #25
 80041ca:	2201      	movs	r2, #1
 80041cc:	4970      	ldr	r1, [pc, #448]	; (8004390 <HAL_I2C_Master_Transmit+0x1f4>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 faf4 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
 80041dc:	e0d3      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_I2C_Master_Transmit+0x50>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e0cc      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d007      	beq.n	8004212 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004220:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2221      	movs	r2, #33	; 0x21
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2210      	movs	r2, #16
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	893a      	ldrh	r2, [r7, #8]
 8004242:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a50      	ldr	r2, [pc, #320]	; (8004394 <HAL_I2C_Master_Transmit+0x1f8>)
 8004252:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004254:	8979      	ldrh	r1, [r7, #10]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	6a3a      	ldr	r2, [r7, #32]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f996 	bl	800458c <I2C_MasterRequestWrite>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e08d      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004280:	e066      	b.n	8004350 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	6a39      	ldr	r1, [r7, #32]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fb6e 	bl	8004968 <I2C_WaitOnTXEFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00d      	beq.n	80042ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b04      	cmp	r3, #4
 8004298:	d107      	bne.n	80042aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e06b      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d11b      	bne.n	8004324 <HAL_I2C_Master_Transmit+0x188>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d017      	beq.n	8004324 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	781a      	ldrb	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6a39      	ldr	r1, [r7, #32]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fb5e 	bl	80049ea <I2C_WaitOnBTFFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	2b04      	cmp	r3, #4
 800433a:	d107      	bne.n	800434c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e01a      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	d194      	bne.n	8004282 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	00100002 	.word	0x00100002
 8004394:	ffff0000 	.word	0xffff0000

08004398 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	817b      	strh	r3, [r7, #10]
 80043aa:	460b      	mov	r3, r1
 80043ac:	813b      	strh	r3, [r7, #8]
 80043ae:	4613      	mov	r3, r2
 80043b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043b2:	f7fe fa0d 	bl	80027d0 <HAL_GetTick>
 80043b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	f040 80d9 	bne.w	8004578 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	2319      	movs	r3, #25
 80043cc:	2201      	movs	r2, #1
 80043ce:	496d      	ldr	r1, [pc, #436]	; (8004584 <HAL_I2C_Mem_Write+0x1ec>)
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f9f3 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
 80043de:	e0cc      	b.n	800457a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_I2C_Mem_Write+0x56>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e0c5      	b.n	800457a <HAL_I2C_Mem_Write+0x1e2>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d007      	beq.n	8004414 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2221      	movs	r2, #33	; 0x21
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2240      	movs	r2, #64	; 0x40
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a3a      	ldr	r2, [r7, #32]
 800443e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a4d      	ldr	r2, [pc, #308]	; (8004588 <HAL_I2C_Mem_Write+0x1f0>)
 8004454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004456:	88f8      	ldrh	r0, [r7, #6]
 8004458:	893a      	ldrh	r2, [r7, #8]
 800445a:	8979      	ldrh	r1, [r7, #10]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	4603      	mov	r3, r0
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f912 	bl	8004690 <I2C_RequestMemoryWrite>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d052      	beq.n	8004518 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e081      	b.n	800457a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fa74 	bl	8004968 <I2C_WaitOnTXEFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	2b04      	cmp	r3, #4
 800448c:	d107      	bne.n	800449e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800449c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e06b      	b.n	800457a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d11b      	bne.n	8004518 <HAL_I2C_Mem_Write+0x180>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d017      	beq.n	8004518 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	781a      	ldrb	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1aa      	bne.n	8004476 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fa60 	bl	80049ea <I2C_WaitOnBTFFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	2b04      	cmp	r3, #4
 8004536:	d107      	bne.n	8004548 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004546:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e016      	b.n	800457a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	e000      	b.n	800457a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004578:	2302      	movs	r3, #2
  }
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	00100002 	.word	0x00100002
 8004588:	ffff0000 	.word	0xffff0000

0800458c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	460b      	mov	r3, r1
 800459a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d006      	beq.n	80045b6 <I2C_MasterRequestWrite+0x2a>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d003      	beq.n	80045b6 <I2C_MasterRequestWrite+0x2a>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b4:	d108      	bne.n	80045c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	e00b      	b.n	80045e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	2b12      	cmp	r3, #18
 80045ce:	d107      	bne.n	80045e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f8e5 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00d      	beq.n	8004614 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004606:	d103      	bne.n	8004610 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800460e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e035      	b.n	8004680 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800461c:	d108      	bne.n	8004630 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800461e:	897b      	ldrh	r3, [r7, #10]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800462c:	611a      	str	r2, [r3, #16]
 800462e:	e01b      	b.n	8004668 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004630:	897b      	ldrh	r3, [r7, #10]
 8004632:	11db      	asrs	r3, r3, #7
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f003 0306 	and.w	r3, r3, #6
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f063 030f 	orn	r3, r3, #15
 8004640:	b2da      	uxtb	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	490e      	ldr	r1, [pc, #56]	; (8004688 <I2C_MasterRequestWrite+0xfc>)
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f90b 	bl	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e010      	b.n	8004680 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800465e:	897b      	ldrh	r3, [r7, #10]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4907      	ldr	r1, [pc, #28]	; (800468c <I2C_MasterRequestWrite+0x100>)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f8fb 	bl	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	00010008 	.word	0x00010008
 800468c:	00010002 	.word	0x00010002

08004690 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	4608      	mov	r0, r1
 800469a:	4611      	mov	r1, r2
 800469c:	461a      	mov	r2, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	817b      	strh	r3, [r7, #10]
 80046a2:	460b      	mov	r3, r1
 80046a4:	813b      	strh	r3, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f878 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00d      	beq.n	80046ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e0:	d103      	bne.n	80046ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e05f      	b.n	80047ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ee:	897b      	ldrh	r3, [r7, #10]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	492d      	ldr	r1, [pc, #180]	; (80047b8 <I2C_RequestMemoryWrite+0x128>)
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f8b0 	bl	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e04c      	b.n	80047ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	6a39      	ldr	r1, [r7, #32]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f91a 	bl	8004968 <I2C_WaitOnTXEFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00d      	beq.n	8004756 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b04      	cmp	r3, #4
 8004740:	d107      	bne.n	8004752 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004750:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e02b      	b.n	80047ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d105      	bne.n	8004768 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800475c:	893b      	ldrh	r3, [r7, #8]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]
 8004766:	e021      	b.n	80047ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004768:	893b      	ldrh	r3, [r7, #8]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	b29b      	uxth	r3, r3
 800476e:	b2da      	uxtb	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	6a39      	ldr	r1, [r7, #32]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f8f4 	bl	8004968 <I2C_WaitOnTXEFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00d      	beq.n	80047a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	2b04      	cmp	r3, #4
 800478c:	d107      	bne.n	800479e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e005      	b.n	80047ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047a2:	893b      	ldrh	r3, [r7, #8]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	00010002 	.word	0x00010002

080047bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047cc:	e025      	b.n	800481a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d021      	beq.n	800481a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d6:	f7fd fffb 	bl	80027d0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d302      	bcc.n	80047ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d116      	bne.n	800481a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e023      	b.n	8004862 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d10d      	bne.n	8004840 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	43da      	mvns	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4013      	ands	r3, r2
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	e00c      	b.n	800485a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	43da      	mvns	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	429a      	cmp	r2, r3
 800485e:	d0b6      	beq.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004878:	e051      	b.n	800491e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004888:	d123      	bne.n	80048d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004898:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f043 0204 	orr.w	r2, r3, #4
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e046      	b.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d021      	beq.n	800491e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fd ff79 	bl	80027d0 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d116      	bne.n	800491e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f043 0220 	orr.w	r2, r3, #32
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e020      	b.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d10c      	bne.n	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	43da      	mvns	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4013      	ands	r3, r2
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	e00b      	b.n	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	43da      	mvns	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4013      	ands	r3, r2
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d18d      	bne.n	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004974:	e02d      	b.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f878 	bl	8004a6c <I2C_IsAcknowledgeFailed>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e02d      	b.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d021      	beq.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fd ff1f 	bl	80027d0 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d116      	bne.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f043 0220 	orr.w	r2, r3, #32
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e007      	b.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	d1ca      	bne.n	8004976 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f6:	e02d      	b.n	8004a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f837 	bl	8004a6c <I2C_IsAcknowledgeFailed>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e02d      	b.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d021      	beq.n	8004a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a10:	f7fd fede 	bl	80027d0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d116      	bne.n	8004a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f043 0220 	orr.w	r2, r3, #32
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e007      	b.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d1ca      	bne.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a82:	d11b      	bne.n	8004abc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f043 0204 	orr.w	r2, r3, #4
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004acc:	b08f      	sub	sp, #60	; 0x3c
 8004ace:	af0a      	add	r7, sp, #40	; 0x28
 8004ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e10f      	b.n	8004cfc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f004 fe88 	bl	800980c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2203      	movs	r2, #3
 8004b00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f002 f875 	bl	8006c0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	687e      	ldr	r6, [r7, #4]
 8004b28:	466d      	mov	r5, sp
 8004b2a:	f106 0410 	add.w	r4, r6, #16
 8004b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b3e:	1d33      	adds	r3, r6, #4
 8004b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b42:	6838      	ldr	r0, [r7, #0]
 8004b44:	f001 ff4d 	bl	80069e2 <USB_CoreInit>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e0d0      	b.n	8004cfc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f002 f863 	bl	8006c2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
 8004b6a:	e04a      	b.n	8004c02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b6c:	7bfa      	ldrb	r2, [r7, #15]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	333d      	adds	r3, #61	; 0x3d
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b80:	7bfa      	ldrb	r2, [r7, #15]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	333c      	adds	r3, #60	; 0x3c
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b94:	7bfa      	ldrb	r2, [r7, #15]
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	b298      	uxth	r0, r3
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3342      	adds	r3, #66	; 0x42
 8004ba8:	4602      	mov	r2, r0
 8004baa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bac:	7bfa      	ldrb	r2, [r7, #15]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	333f      	adds	r3, #63	; 0x3f
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004bc0:	7bfa      	ldrb	r2, [r7, #15]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	3344      	adds	r3, #68	; 0x44
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004bd4:	7bfa      	ldrb	r2, [r7, #15]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	3348      	adds	r3, #72	; 0x48
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004be8:	7bfa      	ldrb	r2, [r7, #15]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3350      	adds	r3, #80	; 0x50
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
 8004c02:	7bfa      	ldrb	r2, [r7, #15]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3af      	bcc.n	8004b6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e044      	b.n	8004c9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004c3a:	7bfa      	ldrb	r2, [r7, #15]
 8004c3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c6a:	7bfa      	ldrb	r2, [r7, #15]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
 8004c9c:	7bfa      	ldrb	r2, [r7, #15]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d3b5      	bcc.n	8004c12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	687e      	ldr	r6, [r7, #4]
 8004cae:	466d      	mov	r5, sp
 8004cb0:	f106 0410 	add.w	r4, r6, #16
 8004cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cc4:	1d33      	adds	r3, r6, #4
 8004cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cc8:	6838      	ldr	r0, [r7, #0]
 8004cca:	f001 ffd9 	bl	8006c80 <USB_DevInit>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e00d      	b.n	8004cfc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f003 f821 	bl	8007d3c <USB_DevDisconnect>

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_PCD_Start+0x1c>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e020      	b.n	8004d62 <HAL_PCD_Start+0x5e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d109      	bne.n	8004d44 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d005      	beq.n	8004d44 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 ff4d 	bl	8006be8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f002 ffd1 	bl	8007cfa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d6a:	b590      	push	{r4, r7, lr}
 8004d6c:	b08d      	sub	sp, #52	; 0x34
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f003 f88f 	bl	8007ea4 <USB_GetMode>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f040 839d 	bne.w	80054c8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f002 fff3 	bl	8007d7e <USB_ReadInterrupts>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8393 	beq.w	80054c6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f002 ffea 	bl	8007d7e <USB_ReadInterrupts>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d107      	bne.n	8004dc4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f002 0202 	and.w	r2, r2, #2
 8004dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f002 ffd8 	bl	8007d7e <USB_ReadInterrupts>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d161      	bne.n	8004e9c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0210 	bic.w	r2, r2, #16
 8004de6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f003 020f 	and.w	r2, r3, #15
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4413      	add	r3, r2
 8004e04:	3304      	adds	r3, #4
 8004e06:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	0c5b      	lsrs	r3, r3, #17
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d124      	bne.n	8004e5e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d035      	beq.n	8004e8c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	6a38      	ldr	r0, [r7, #32]
 8004e34:	f002 fe3e 	bl	8007ab4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	091b      	lsrs	r3, r3, #4
 8004e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e44:	441a      	add	r2, r3
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e56:	441a      	add	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	619a      	str	r2, [r3, #24]
 8004e5c:	e016      	b.n	8004e8c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	0c5b      	lsrs	r3, r3, #17
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	2b06      	cmp	r3, #6
 8004e68:	d110      	bne.n	8004e8c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e70:	2208      	movs	r2, #8
 8004e72:	4619      	mov	r1, r3
 8004e74:	6a38      	ldr	r0, [r7, #32]
 8004e76:	f002 fe1d 	bl	8007ab4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e86:	441a      	add	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0210 	orr.w	r2, r2, #16
 8004e9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f002 ff6c 	bl	8007d7e <USB_ReadInterrupts>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004eb0:	d16e      	bne.n	8004f90 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f002 ff72 	bl	8007da4 <USB_ReadDevAllOutEpInterrupt>
 8004ec0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004ec2:	e062      	b.n	8004f8a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d057      	beq.n	8004f7e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f002 ff97 	bl	8007e0c <USB_ReadDevOutEPInterrupt>
 8004ede:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00c      	beq.n	8004f04 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2301      	movs	r3, #1
 8004efa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fdb0 	bl	8005a64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 feaa 	bl	8005c7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	461a      	mov	r2, r3
 8004f40:	2310      	movs	r3, #16
 8004f42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2320      	movs	r3, #32
 8004f5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	461a      	mov	r2, r3
 8004f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	3301      	adds	r3, #1
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d199      	bne.n	8004ec4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f002 fef2 	bl	8007d7e <USB_ReadInterrupts>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fa4:	f040 80c0 	bne.w	8005128 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f002 ff13 	bl	8007dd8 <USB_ReadDevAllInEpInterrupt>
 8004fb2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004fb8:	e0b2      	b.n	8005120 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80a7 	beq.w	8005114 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	4611      	mov	r1, r2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f002 ff39 	bl	8007e48 <USB_ReadDevInEPInterrupt>
 8004fd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d057      	beq.n	8005092 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	2201      	movs	r2, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	69f9      	ldr	r1, [r7, #28]
 8004ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005002:	4013      	ands	r3, r2
 8005004:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	461a      	mov	r2, r3
 8005014:	2301      	movs	r3, #1
 8005016:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d132      	bne.n	8005086 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	3348      	adds	r3, #72	; 0x48
 8005030:	6819      	ldr	r1, [r3, #0]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005036:	4613      	mov	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4403      	add	r3, r0
 8005040:	3344      	adds	r3, #68	; 0x44
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4419      	add	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	4613      	mov	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4403      	add	r3, r0
 8005054:	3348      	adds	r3, #72	; 0x48
 8005056:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	d113      	bne.n	8005086 <HAL_PCD_IRQHandler+0x31c>
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005062:	4613      	mov	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3350      	adds	r3, #80	; 0x50
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d108      	bne.n	8005086 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800507e:	461a      	mov	r2, r3
 8005080:	2101      	movs	r1, #1
 8005082:	f002 ff41 	bl	8007f08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	b2db      	uxtb	r3, r3
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f004 fc3e 	bl	800990e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	461a      	mov	r2, r3
 80050aa:	2308      	movs	r3, #8
 80050ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	461a      	mov	r2, r3
 80050c6:	2310      	movs	r3, #16
 80050c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	461a      	mov	r2, r3
 80050e2:	2340      	movs	r3, #64	; 0x40
 80050e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fc:	461a      	mov	r2, r3
 80050fe:	2302      	movs	r3, #2
 8005100:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800510c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fc1b 	bl	800594a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	3301      	adds	r3, #1
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	f47f af49 	bne.w	8004fba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f002 fe26 	bl	8007d7e <USB_ReadInterrupts>
 8005132:	4603      	mov	r3, r0
 8005134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800513c:	d122      	bne.n	8005184 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005158:	2b01      	cmp	r3, #1
 800515a:	d108      	bne.n	800516e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005164:	2100      	movs	r1, #0
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fe26 	bl	8005db8 <HAL_PCDEx_LPM_Callback>
 800516c:	e002      	b.n	8005174 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f004 fc3a 	bl	80099e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f002 fdf8 	bl	8007d7e <USB_ReadInterrupts>
 800518e:	4603      	mov	r3, r0
 8005190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005198:	d112      	bne.n	80051c0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d102      	bne.n	80051b0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f004 fbf6 	bl	800999c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80051be:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f002 fdda 	bl	8007d7e <USB_ReadInterrupts>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d4:	f040 80c7 	bne.w	8005366 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2110      	movs	r1, #16
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 fea8 	bl	8006f48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f8:	2300      	movs	r3, #0
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fc:	e056      	b.n	80052ac <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520a:	461a      	mov	r2, r3
 800520c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005210:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005230:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005250:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525e:	461a      	mov	r2, r3
 8005260:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005264:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005284:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	3301      	adds	r3, #1
 80052aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d3a3      	bcc.n	80051fe <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80052c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d016      	beq.n	8005300 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e2:	f043 030b 	orr.w	r3, r3, #11
 80052e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f8:	f043 030b 	orr.w	r3, r3, #11
 80052fc:	6453      	str	r3, [r2, #68]	; 0x44
 80052fe:	e015      	b.n	800532c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005312:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005316:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005326:	f043 030b 	orr.w	r3, r3, #11
 800532a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800533a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800533e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005350:	461a      	mov	r2, r3
 8005352:	f002 fdd9 	bl	8007f08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005364:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f002 fd07 	bl	8007d7e <USB_ReadInterrupts>
 8005370:	4603      	mov	r3, r0
 8005372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537a:	d124      	bne.n	80053c6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f002 fd9d 	bl	8007ec0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f001 fe3d 	bl	800700a <USB_GetDevSpeed>
 8005390:	4603      	mov	r3, r0
 8005392:	461a      	mov	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681c      	ldr	r4, [r3, #0]
 800539c:	f001 f92c 	bl	80065f8 <HAL_RCC_GetHCLKFreq>
 80053a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	4620      	mov	r0, r4
 80053ac:	f001 fb7a 	bl	8006aa4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f004 fad4 	bl	800995e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695a      	ldr	r2, [r3, #20]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80053c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f002 fcd7 	bl	8007d7e <USB_ReadInterrupts>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d10a      	bne.n	80053f0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f004 fab1 	bl	8009942 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f002 0208 	and.w	r2, r2, #8
 80053ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f002 fcc2 	bl	8007d7e <USB_ReadInterrupts>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005404:	d10f      	bne.n	8005426 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	b2db      	uxtb	r3, r3
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f004 fb09 	bl	8009a28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f002 fca7 	bl	8007d7e <USB_ReadInterrupts>
 8005430:	4603      	mov	r3, r0
 8005432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800543a:	d10f      	bne.n	800545c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	b2db      	uxtb	r3, r3
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f004 fadc 	bl	8009a04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695a      	ldr	r2, [r3, #20]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800545a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f002 fc8c 	bl	8007d7e <USB_ReadInterrupts>
 8005466:	4603      	mov	r3, r0
 8005468:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d10a      	bne.n	8005488 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f004 faea 	bl	8009a4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f002 fc76 	bl	8007d7e <USB_ReadInterrupts>
 8005492:	4603      	mov	r3, r0
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d115      	bne.n	80054c8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f004 fada 	bl	8009a68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6859      	ldr	r1, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	605a      	str	r2, [r3, #4]
 80054c4:	e000      	b.n	80054c8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80054c6:	bf00      	nop
    }
  }
}
 80054c8:	3734      	adds	r7, #52	; 0x34
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd90      	pop	{r4, r7, pc}

080054ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_PCD_SetAddress+0x1a>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e013      	b.n	8005510 <HAL_PCD_SetAddress+0x42>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	4611      	mov	r1, r2
 8005500:	4618      	mov	r0, r3
 8005502:	f002 fbd4 	bl	8007cae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	4608      	mov	r0, r1
 8005522:	4611      	mov	r1, r2
 8005524:	461a      	mov	r2, r3
 8005526:	4603      	mov	r3, r0
 8005528:	70fb      	strb	r3, [r7, #3]
 800552a:	460b      	mov	r3, r1
 800552c:	803b      	strh	r3, [r7, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800553a:	2b00      	cmp	r3, #0
 800553c:	da0f      	bge.n	800555e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	f003 020f 	and.w	r2, r3, #15
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	3338      	adds	r3, #56	; 0x38
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	3304      	adds	r3, #4
 8005554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	705a      	strb	r2, [r3, #1]
 800555c:	e00f      	b.n	800557e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	f003 020f 	and.w	r2, r3, #15
 8005564:	4613      	mov	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	4413      	add	r3, r2
 8005574:	3304      	adds	r3, #4
 8005576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800558a:	883a      	ldrh	r2, [r7, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	78ba      	ldrb	r2, [r7, #2]
 8005594:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055a8:	78bb      	ldrb	r3, [r7, #2]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d102      	bne.n	80055b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_PCD_EP_Open+0xaa>
 80055be:	2302      	movs	r3, #2
 80055c0:	e00e      	b.n	80055e0 <HAL_PCD_EP_Open+0xc8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 fd3f 	bl	8007054 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80055de:	7afb      	ldrb	r3, [r7, #11]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da0f      	bge.n	800561c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	4613      	mov	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	3338      	adds	r3, #56	; 0x38
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4413      	add	r3, r2
 8005610:	3304      	adds	r3, #4
 8005612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	705a      	strb	r2, [r3, #1]
 800561a:	e00f      	b.n	800563c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	3304      	adds	r3, #4
 8005634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_PCD_EP_Close+0x6e>
 8005652:	2302      	movs	r3, #2
 8005654:	e00e      	b.n	8005674 <HAL_PCD_EP_Close+0x8c>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	4618      	mov	r0, r3
 8005666:	f001 fd7d 	bl	8007164 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	460b      	mov	r3, r1
 800568a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800568c:	7afb      	ldrb	r3, [r7, #11]
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	3304      	adds	r3, #4
 80056a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2200      	movs	r2, #0
 80056bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056be:	7afb      	ldrb	r3, [r7, #11]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d102      	bne.n	80056d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056d8:	7afb      	ldrb	r3, [r7, #11]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	6979      	ldr	r1, [r7, #20]
 80056f0:	f002 f858 	bl	80077a4 <USB_EP0StartXfer>
 80056f4:	e008      	b.n	8005708 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	6979      	ldr	r1, [r7, #20]
 8005704:	f001 fe0a 	bl	800731c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	f003 020f 	and.w	r2, r3, #15
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005734:	681b      	ldr	r3, [r3, #0]
}
 8005736:	4618      	mov	r0, r3
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
 800574e:	460b      	mov	r3, r1
 8005750:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005752:	7afb      	ldrb	r3, [r7, #11]
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	4613      	mov	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	3338      	adds	r3, #56	; 0x38
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	3304      	adds	r3, #4
 8005768:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2200      	movs	r2, #0
 800577a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2201      	movs	r2, #1
 8005780:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005782:	7afb      	ldrb	r3, [r7, #11]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	b2da      	uxtb	r2, r3
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d102      	bne.n	800579c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800579c:	7afb      	ldrb	r3, [r7, #11]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	f001 fff6 	bl	80077a4 <USB_EP0StartXfer>
 80057b8:	e008      	b.n	80057cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	6979      	ldr	r1, [r7, #20]
 80057c8:	f001 fda8 	bl	800731c <USB_EPStartXfer>
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	460b      	mov	r3, r1
 80057e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	f003 020f 	and.w	r2, r3, #15
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d901      	bls.n	80057f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e050      	b.n	8005896 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	da0f      	bge.n	800581c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	f003 020f 	and.w	r2, r3, #15
 8005802:	4613      	mov	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	3338      	adds	r3, #56	; 0x38
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	4413      	add	r3, r2
 8005810:	3304      	adds	r3, #4
 8005812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	705a      	strb	r2, [r3, #1]
 800581a:	e00d      	b.n	8005838 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800581c:	78fa      	ldrb	r2, [r7, #3]
 800581e:	4613      	mov	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	3304      	adds	r3, #4
 8005830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800583e:	78fb      	ldrb	r3, [r7, #3]
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_PCD_EP_SetStall+0x82>
 8005854:	2302      	movs	r3, #2
 8005856:	e01e      	b.n	8005896 <HAL_PCD_EP_SetStall+0xc0>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68f9      	ldr	r1, [r7, #12]
 8005866:	4618      	mov	r0, r3
 8005868:	f002 f94d 	bl	8007b06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	b2d9      	uxtb	r1, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005886:	461a      	mov	r2, r3
 8005888:	f002 fb3e 	bl	8007f08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	f003 020f 	and.w	r2, r3, #15
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d901      	bls.n	80058bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e042      	b.n	8005942 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	da0f      	bge.n	80058e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	f003 020f 	and.w	r2, r3, #15
 80058ca:	4613      	mov	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	3338      	adds	r3, #56	; 0x38
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4413      	add	r3, r2
 80058d8:	3304      	adds	r3, #4
 80058da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	705a      	strb	r2, [r3, #1]
 80058e2:	e00f      	b.n	8005904 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	f003 020f 	and.w	r2, r3, #15
 80058ea:	4613      	mov	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4413      	add	r3, r2
 80058fa:	3304      	adds	r3, #4
 80058fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	b2da      	uxtb	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_PCD_EP_ClrStall+0x86>
 8005920:	2302      	movs	r3, #2
 8005922:	e00e      	b.n	8005942 <HAL_PCD_EP_ClrStall+0xa4>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68f9      	ldr	r1, [r7, #12]
 8005932:	4618      	mov	r0, r3
 8005934:	f002 f955 	bl	8007be2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b08a      	sub	sp, #40	; 0x28
 800594e:	af02      	add	r7, sp, #8
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	1a9b      	subs	r3, r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	3338      	adds	r3, #56	; 0x38
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	4413      	add	r3, r2
 800596e:	3304      	adds	r3, #4
 8005970:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	429a      	cmp	r2, r3
 800597c:	d901      	bls.n	8005982 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e06c      	b.n	8005a5c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	695a      	ldr	r2, [r3, #20]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	429a      	cmp	r2, r3
 8005996:	d902      	bls.n	800599e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	3303      	adds	r3, #3
 80059a2:	089b      	lsrs	r3, r3, #2
 80059a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059a6:	e02b      	b.n	8005a00 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d902      	bls.n	80059c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3303      	adds	r3, #3
 80059c8:	089b      	lsrs	r3, r3, #2
 80059ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68d9      	ldr	r1, [r3, #12]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	4603      	mov	r3, r0
 80059e2:	6978      	ldr	r0, [r7, #20]
 80059e4:	f002 f831 	bl	8007a4a <USB_WritePacket>

    ep->xfer_buff  += len;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	441a      	add	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	441a      	add	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d809      	bhi.n	8005a2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d203      	bcs.n	8005a2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1be      	bne.n	80059a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d811      	bhi.n	8005a5a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	6939      	ldr	r1, [r7, #16]
 8005a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a56:	4013      	ands	r3, r2
 8005a58:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3720      	adds	r7, #32
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	333c      	adds	r3, #60	; 0x3c
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	f040 80a0 	bne.w	8005bdc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d015      	beq.n	8005ad2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4a72      	ldr	r2, [pc, #456]	; (8005c74 <PCD_EP_OutXfrComplete_int+0x210>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	f240 80dd 	bls.w	8005c6a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 80d7 	beq.w	8005c6a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ace:	6093      	str	r3, [r2, #8]
 8005ad0:	e0cb      	b.n	8005c6a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2320      	movs	r3, #32
 8005aec:	6093      	str	r3, [r2, #8]
 8005aee:	e0bc      	b.n	8005c6a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 80b7 	bne.w	8005c6a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4a5d      	ldr	r2, [pc, #372]	; (8005c74 <PCD_EP_OutXfrComplete_int+0x210>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d90f      	bls.n	8005b24 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b20:	6093      	str	r3, [r2, #8]
 8005b22:	e0a2      	b.n	8005c6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b36:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	0159      	lsls	r1, r3, #5
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	440b      	add	r3, r1
 8005b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005b4a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4403      	add	r3, r0
 8005b5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005b5e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b72:	6819      	ldr	r1, [r3, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4403      	add	r3, r0
 8005b82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4419      	add	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4403      	add	r3, r0
 8005b98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b9c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d114      	bne.n	8005bce <PCD_EP_OutXfrComplete_int+0x16a>
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d108      	bne.n	8005bce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	2101      	movs	r1, #1
 8005bca:	f002 f99d 	bl	8007f08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f003 fe7f 	bl	80098d8 <HAL_PCD_DataOutStageCallback>
 8005bda:	e046      	b.n	8005c6a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4a26      	ldr	r2, [pc, #152]	; (8005c78 <PCD_EP_OutXfrComplete_int+0x214>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d124      	bne.n	8005c2e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c00:	6093      	str	r3, [r2, #8]
 8005c02:	e032      	b.n	8005c6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f003 fe56 	bl	80098d8 <HAL_PCD_DataOutStageCallback>
 8005c2c:	e01d      	b.n	8005c6a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d114      	bne.n	8005c5e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d108      	bne.n	8005c5e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c56:	461a      	mov	r2, r3
 8005c58:	2100      	movs	r1, #0
 8005c5a:	f002 f955 	bl	8007f08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f003 fe37 	bl	80098d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	4f54300a 	.word	0x4f54300a
 8005c78:	4f54310a 	.word	0x4f54310a

08005c7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	333c      	adds	r3, #60	; 0x3c
 8005c94:	3304      	adds	r3, #4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d90e      	bls.n	8005cd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d009      	beq.n	8005cd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f003 fdef 	bl	80098b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d90c      	bls.n	8005cf8 <PCD_EP_OutSetupPacket_int+0x7c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d108      	bne.n	8005cf8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	f002 f908 	bl	8007f08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	4f54300a 	.word	0x4f54300a

08005d08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
 8005d14:	4613      	mov	r3, r2
 8005d16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d107      	bne.n	8005d36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d26:	883b      	ldrh	r3, [r7, #0]
 8005d28:	0419      	lsls	r1, r3, #16
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28
 8005d34:	e028      	b.n	8005d88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4413      	add	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d44:	2300      	movs	r3, #0
 8005d46:	73fb      	strb	r3, [r7, #15]
 8005d48:	e00d      	b.n	8005d66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	3340      	adds	r3, #64	; 0x40
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	3301      	adds	r3, #1
 8005d64:	73fb      	strb	r3, [r7, #15]
 8005d66:	7bfa      	ldrb	r2, [r7, #15]
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d3ec      	bcc.n	8005d4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d70:	883b      	ldrh	r3, [r7, #0]
 8005d72:	0418      	lsls	r0, r3, #16
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6819      	ldr	r1, [r3, #0]
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	4302      	orrs	r2, r0
 8005d80:	3340      	adds	r3, #64	; 0x40
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	887a      	ldrh	r2, [r7, #2]
 8005da8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e264      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d075      	beq.n	8005eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dee:	4ba3      	ldr	r3, [pc, #652]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d00c      	beq.n	8005e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dfa:	4ba0      	ldr	r3, [pc, #640]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d112      	bne.n	8005e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e06:	4b9d      	ldr	r3, [pc, #628]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e12:	d10b      	bne.n	8005e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e14:	4b99      	ldr	r3, [pc, #612]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d05b      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x108>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d157      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e23f      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e34:	d106      	bne.n	8005e44 <HAL_RCC_OscConfig+0x74>
 8005e36:	4b91      	ldr	r3, [pc, #580]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a90      	ldr	r2, [pc, #576]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e01d      	b.n	8005e80 <HAL_RCC_OscConfig+0xb0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e4c:	d10c      	bne.n	8005e68 <HAL_RCC_OscConfig+0x98>
 8005e4e:	4b8b      	ldr	r3, [pc, #556]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a8a      	ldr	r2, [pc, #552]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	4b88      	ldr	r3, [pc, #544]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a87      	ldr	r2, [pc, #540]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e00b      	b.n	8005e80 <HAL_RCC_OscConfig+0xb0>
 8005e68:	4b84      	ldr	r3, [pc, #528]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a83      	ldr	r2, [pc, #524]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	4b81      	ldr	r3, [pc, #516]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a80      	ldr	r2, [pc, #512]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d013      	beq.n	8005eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e88:	f7fc fca2 	bl	80027d0 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e90:	f7fc fc9e 	bl	80027d0 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	; 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e204      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	4b76      	ldr	r3, [pc, #472]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0xc0>
 8005eae:	e014      	b.n	8005eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb0:	f7fc fc8e 	bl	80027d0 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eb8:	f7fc fc8a 	bl	80027d0 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b64      	cmp	r3, #100	; 0x64
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e1f0      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eca:	4b6c      	ldr	r3, [pc, #432]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0xe8>
 8005ed6:	e000      	b.n	8005eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d063      	beq.n	8005fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ee6:	4b65      	ldr	r3, [pc, #404]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 030c 	and.w	r3, r3, #12
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ef2:	4b62      	ldr	r3, [pc, #392]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d11c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005efe:	4b5f      	ldr	r3, [pc, #380]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d116      	bne.n	8005f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f0a:	4b5c      	ldr	r3, [pc, #368]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_RCC_OscConfig+0x152>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d001      	beq.n	8005f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e1c4      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f22:	4b56      	ldr	r3, [pc, #344]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4952      	ldr	r1, [pc, #328]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f36:	e03a      	b.n	8005fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d020      	beq.n	8005f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f40:	4b4f      	ldr	r3, [pc, #316]	; (8006080 <HAL_RCC_OscConfig+0x2b0>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f46:	f7fc fc43 	bl	80027d0 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f4e:	f7fc fc3f 	bl	80027d0 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e1a5      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f60:	4b46      	ldr	r3, [pc, #280]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6c:	4b43      	ldr	r3, [pc, #268]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4940      	ldr	r1, [pc, #256]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	600b      	str	r3, [r1, #0]
 8005f80:	e015      	b.n	8005fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f82:	4b3f      	ldr	r3, [pc, #252]	; (8006080 <HAL_RCC_OscConfig+0x2b0>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fc fc22 	bl	80027d0 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f90:	f7fc fc1e 	bl	80027d0 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e184      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa2:	4b36      	ldr	r3, [pc, #216]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1f0      	bne.n	8005f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d030      	beq.n	800601c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fc2:	4b30      	ldr	r3, [pc, #192]	; (8006084 <HAL_RCC_OscConfig+0x2b4>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fc fc02 	bl	80027d0 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fd0:	f7fc fbfe 	bl	80027d0 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e164      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe2:	4b26      	ldr	r3, [pc, #152]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8005fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0f0      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x200>
 8005fee:	e015      	b.n	800601c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff0:	4b24      	ldr	r3, [pc, #144]	; (8006084 <HAL_RCC_OscConfig+0x2b4>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff6:	f7fc fbeb 	bl	80027d0 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ffe:	f7fc fbe7 	bl	80027d0 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e14d      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006010:	4b1a      	ldr	r3, [pc, #104]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8006012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f0      	bne.n	8005ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80a0 	beq.w	800616a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800602a:	2300      	movs	r3, #0
 800602c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10f      	bne.n	800605a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800603a:	2300      	movs	r3, #0
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	4b0f      	ldr	r3, [pc, #60]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	4a0e      	ldr	r2, [pc, #56]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 8006044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006048:	6413      	str	r3, [r2, #64]	; 0x40
 800604a:	4b0c      	ldr	r3, [pc, #48]	; (800607c <HAL_RCC_OscConfig+0x2ac>)
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006056:	2301      	movs	r3, #1
 8006058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <HAL_RCC_OscConfig+0x2b8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	2b00      	cmp	r3, #0
 8006064:	d121      	bne.n	80060aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006066:	4b08      	ldr	r3, [pc, #32]	; (8006088 <HAL_RCC_OscConfig+0x2b8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a07      	ldr	r2, [pc, #28]	; (8006088 <HAL_RCC_OscConfig+0x2b8>)
 800606c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006072:	f7fc fbad 	bl	80027d0 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006078:	e011      	b.n	800609e <HAL_RCC_OscConfig+0x2ce>
 800607a:	bf00      	nop
 800607c:	40023800 	.word	0x40023800
 8006080:	42470000 	.word	0x42470000
 8006084:	42470e80 	.word	0x42470e80
 8006088:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800608c:	f7fc fba0 	bl	80027d0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e106      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609e:	4b85      	ldr	r3, [pc, #532]	; (80062b4 <HAL_RCC_OscConfig+0x4e4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f0      	beq.n	800608c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d106      	bne.n	80060c0 <HAL_RCC_OscConfig+0x2f0>
 80060b2:	4b81      	ldr	r3, [pc, #516]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	4a80      	ldr	r2, [pc, #512]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80060b8:	f043 0301 	orr.w	r3, r3, #1
 80060bc:	6713      	str	r3, [r2, #112]	; 0x70
 80060be:	e01c      	b.n	80060fa <HAL_RCC_OscConfig+0x32a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	2b05      	cmp	r3, #5
 80060c6:	d10c      	bne.n	80060e2 <HAL_RCC_OscConfig+0x312>
 80060c8:	4b7b      	ldr	r3, [pc, #492]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80060ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060cc:	4a7a      	ldr	r2, [pc, #488]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80060ce:	f043 0304 	orr.w	r3, r3, #4
 80060d2:	6713      	str	r3, [r2, #112]	; 0x70
 80060d4:	4b78      	ldr	r3, [pc, #480]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80060d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d8:	4a77      	ldr	r2, [pc, #476]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	6713      	str	r3, [r2, #112]	; 0x70
 80060e0:	e00b      	b.n	80060fa <HAL_RCC_OscConfig+0x32a>
 80060e2:	4b75      	ldr	r3, [pc, #468]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	4a74      	ldr	r2, [pc, #464]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80060e8:	f023 0301 	bic.w	r3, r3, #1
 80060ec:	6713      	str	r3, [r2, #112]	; 0x70
 80060ee:	4b72      	ldr	r3, [pc, #456]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f2:	4a71      	ldr	r2, [pc, #452]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80060f4:	f023 0304 	bic.w	r3, r3, #4
 80060f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d015      	beq.n	800612e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006102:	f7fc fb65 	bl	80027d0 <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006108:	e00a      	b.n	8006120 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800610a:	f7fc fb61 	bl	80027d0 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	f241 3288 	movw	r2, #5000	; 0x1388
 8006118:	4293      	cmp	r3, r2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e0c5      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006120:	4b65      	ldr	r3, [pc, #404]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 8006122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0ee      	beq.n	800610a <HAL_RCC_OscConfig+0x33a>
 800612c:	e014      	b.n	8006158 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612e:	f7fc fb4f 	bl	80027d0 <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006134:	e00a      	b.n	800614c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006136:	f7fc fb4b 	bl	80027d0 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	f241 3288 	movw	r2, #5000	; 0x1388
 8006144:	4293      	cmp	r3, r2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e0af      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800614c:	4b5a      	ldr	r3, [pc, #360]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 800614e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1ee      	bne.n	8006136 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d105      	bne.n	800616a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800615e:	4b56      	ldr	r3, [pc, #344]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	4a55      	ldr	r2, [pc, #340]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 8006164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006168:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 809b 	beq.w	80062aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006174:	4b50      	ldr	r3, [pc, #320]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 030c 	and.w	r3, r3, #12
 800617c:	2b08      	cmp	r3, #8
 800617e:	d05c      	beq.n	800623a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d141      	bne.n	800620c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006188:	4b4c      	ldr	r3, [pc, #304]	; (80062bc <HAL_RCC_OscConfig+0x4ec>)
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618e:	f7fc fb1f 	bl	80027d0 <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006196:	f7fc fb1b 	bl	80027d0 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e081      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a8:	4b43      	ldr	r3, [pc, #268]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f0      	bne.n	8006196 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	019b      	lsls	r3, r3, #6
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	3b01      	subs	r3, #1
 80061ce:	041b      	lsls	r3, r3, #16
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	061b      	lsls	r3, r3, #24
 80061d8:	4937      	ldr	r1, [pc, #220]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061de:	4b37      	ldr	r3, [pc, #220]	; (80062bc <HAL_RCC_OscConfig+0x4ec>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e4:	f7fc faf4 	bl	80027d0 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ec:	f7fc faf0 	bl	80027d0 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e056      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fe:	4b2e      	ldr	r3, [pc, #184]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f0      	beq.n	80061ec <HAL_RCC_OscConfig+0x41c>
 800620a:	e04e      	b.n	80062aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620c:	4b2b      	ldr	r3, [pc, #172]	; (80062bc <HAL_RCC_OscConfig+0x4ec>)
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006212:	f7fc fadd 	bl	80027d0 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006218:	e008      	b.n	800622c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800621a:	f7fc fad9 	bl	80027d0 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e03f      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622c:	4b22      	ldr	r3, [pc, #136]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f0      	bne.n	800621a <HAL_RCC_OscConfig+0x44a>
 8006238:	e037      	b.n	80062aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e032      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006246:	4b1c      	ldr	r3, [pc, #112]	; (80062b8 <HAL_RCC_OscConfig+0x4e8>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d028      	beq.n	80062a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800625e:	429a      	cmp	r2, r3
 8006260:	d121      	bne.n	80062a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626c:	429a      	cmp	r2, r3
 800626e:	d11a      	bne.n	80062a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006276:	4013      	ands	r3, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800627c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800627e:	4293      	cmp	r3, r2
 8006280:	d111      	bne.n	80062a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	085b      	lsrs	r3, r3, #1
 800628e:	3b01      	subs	r3, #1
 8006290:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006292:	429a      	cmp	r2, r3
 8006294:	d107      	bne.n	80062a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d001      	beq.n	80062aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40007000 	.word	0x40007000
 80062b8:	40023800 	.word	0x40023800
 80062bc:	42470060 	.word	0x42470060

080062c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0cc      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062d4:	4b68      	ldr	r3, [pc, #416]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d90c      	bls.n	80062fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e2:	4b65      	ldr	r3, [pc, #404]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	4b63      	ldr	r3, [pc, #396]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0b8      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d020      	beq.n	800634a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	4a58      	ldr	r2, [pc, #352]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800631e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800632c:	4b53      	ldr	r3, [pc, #332]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4a52      	ldr	r2, [pc, #328]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006338:	4b50      	ldr	r3, [pc, #320]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	494d      	ldr	r1, [pc, #308]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	4313      	orrs	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d044      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d107      	bne.n	800636e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	4b47      	ldr	r3, [pc, #284]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d119      	bne.n	800639e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e07f      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d003      	beq.n	800637e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637a:	2b03      	cmp	r3, #3
 800637c:	d107      	bne.n	800638e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637e:	4b3f      	ldr	r3, [pc, #252]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e06f      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800638e:	4b3b      	ldr	r3, [pc, #236]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e067      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800639e:	4b37      	ldr	r3, [pc, #220]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f023 0203 	bic.w	r2, r3, #3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	4934      	ldr	r1, [pc, #208]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063b0:	f7fc fa0e 	bl	80027d0 <HAL_GetTick>
 80063b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b6:	e00a      	b.n	80063ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b8:	f7fc fa0a 	bl	80027d0 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e04f      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ce:	4b2b      	ldr	r3, [pc, #172]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 020c 	and.w	r2, r3, #12
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	429a      	cmp	r2, r3
 80063de:	d1eb      	bne.n	80063b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d20c      	bcs.n	8006408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ee:	4b22      	ldr	r3, [pc, #136]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f6:	4b20      	ldr	r3, [pc, #128]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e032      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	4916      	ldr	r1, [pc, #88]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	4313      	orrs	r3, r2
 8006424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	490e      	ldr	r1, [pc, #56]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	4313      	orrs	r3, r2
 8006444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006446:	f000 f821 	bl	800648c <HAL_RCC_GetSysClockFreq>
 800644a:	4602      	mov	r2, r0
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	490a      	ldr	r1, [pc, #40]	; (8006480 <HAL_RCC_ClockConfig+0x1c0>)
 8006458:	5ccb      	ldrb	r3, [r1, r3]
 800645a:	fa22 f303 	lsr.w	r3, r2, r3
 800645e:	4a09      	ldr	r2, [pc, #36]	; (8006484 <HAL_RCC_ClockConfig+0x1c4>)
 8006460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <HAL_RCC_ClockConfig+0x1c8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f7fc f96e 	bl	8002748 <HAL_InitTick>

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40023c00 	.word	0x40023c00
 800647c:	40023800 	.word	0x40023800
 8006480:	0800c420 	.word	0x0800c420
 8006484:	20000010 	.word	0x20000010
 8006488:	20000014 	.word	0x20000014

0800648c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800648c:	b5b0      	push	{r4, r5, r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006492:	2100      	movs	r1, #0
 8006494:	6079      	str	r1, [r7, #4]
 8006496:	2100      	movs	r1, #0
 8006498:	60f9      	str	r1, [r7, #12]
 800649a:	2100      	movs	r1, #0
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800649e:	2100      	movs	r1, #0
 80064a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064a2:	4952      	ldr	r1, [pc, #328]	; (80065ec <HAL_RCC_GetSysClockFreq+0x160>)
 80064a4:	6889      	ldr	r1, [r1, #8]
 80064a6:	f001 010c 	and.w	r1, r1, #12
 80064aa:	2908      	cmp	r1, #8
 80064ac:	d00d      	beq.n	80064ca <HAL_RCC_GetSysClockFreq+0x3e>
 80064ae:	2908      	cmp	r1, #8
 80064b0:	f200 8094 	bhi.w	80065dc <HAL_RCC_GetSysClockFreq+0x150>
 80064b4:	2900      	cmp	r1, #0
 80064b6:	d002      	beq.n	80064be <HAL_RCC_GetSysClockFreq+0x32>
 80064b8:	2904      	cmp	r1, #4
 80064ba:	d003      	beq.n	80064c4 <HAL_RCC_GetSysClockFreq+0x38>
 80064bc:	e08e      	b.n	80065dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064be:	4b4c      	ldr	r3, [pc, #304]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80064c0:	60bb      	str	r3, [r7, #8]
       break;
 80064c2:	e08e      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064c4:	4b4b      	ldr	r3, [pc, #300]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80064c6:	60bb      	str	r3, [r7, #8]
      break;
 80064c8:	e08b      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064ca:	4948      	ldr	r1, [pc, #288]	; (80065ec <HAL_RCC_GetSysClockFreq+0x160>)
 80064cc:	6849      	ldr	r1, [r1, #4]
 80064ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80064d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064d4:	4945      	ldr	r1, [pc, #276]	; (80065ec <HAL_RCC_GetSysClockFreq+0x160>)
 80064d6:	6849      	ldr	r1, [r1, #4]
 80064d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80064dc:	2900      	cmp	r1, #0
 80064de:	d024      	beq.n	800652a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064e0:	4942      	ldr	r1, [pc, #264]	; (80065ec <HAL_RCC_GetSysClockFreq+0x160>)
 80064e2:	6849      	ldr	r1, [r1, #4]
 80064e4:	0989      	lsrs	r1, r1, #6
 80064e6:	4608      	mov	r0, r1
 80064e8:	f04f 0100 	mov.w	r1, #0
 80064ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80064f0:	f04f 0500 	mov.w	r5, #0
 80064f4:	ea00 0204 	and.w	r2, r0, r4
 80064f8:	ea01 0305 	and.w	r3, r1, r5
 80064fc:	493d      	ldr	r1, [pc, #244]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80064fe:	fb01 f003 	mul.w	r0, r1, r3
 8006502:	2100      	movs	r1, #0
 8006504:	fb01 f102 	mul.w	r1, r1, r2
 8006508:	1844      	adds	r4, r0, r1
 800650a:	493a      	ldr	r1, [pc, #232]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800650c:	fba2 0101 	umull	r0, r1, r2, r1
 8006510:	1863      	adds	r3, r4, r1
 8006512:	4619      	mov	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	461a      	mov	r2, r3
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	f7fa fb7e 	bl	8000c1c <__aeabi_uldivmod>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4613      	mov	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e04a      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800652a:	4b30      	ldr	r3, [pc, #192]	; (80065ec <HAL_RCC_GetSysClockFreq+0x160>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	099b      	lsrs	r3, r3, #6
 8006530:	461a      	mov	r2, r3
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	f240 10ff 	movw	r0, #511	; 0x1ff
 800653a:	f04f 0100 	mov.w	r1, #0
 800653e:	ea02 0400 	and.w	r4, r2, r0
 8006542:	ea03 0501 	and.w	r5, r3, r1
 8006546:	4620      	mov	r0, r4
 8006548:	4629      	mov	r1, r5
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	014b      	lsls	r3, r1, #5
 8006554:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006558:	0142      	lsls	r2, r0, #5
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	1b00      	subs	r0, r0, r4
 8006560:	eb61 0105 	sbc.w	r1, r1, r5
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	018b      	lsls	r3, r1, #6
 800656e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006572:	0182      	lsls	r2, r0, #6
 8006574:	1a12      	subs	r2, r2, r0
 8006576:	eb63 0301 	sbc.w	r3, r3, r1
 800657a:	f04f 0000 	mov.w	r0, #0
 800657e:	f04f 0100 	mov.w	r1, #0
 8006582:	00d9      	lsls	r1, r3, #3
 8006584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006588:	00d0      	lsls	r0, r2, #3
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	1912      	adds	r2, r2, r4
 8006590:	eb45 0303 	adc.w	r3, r5, r3
 8006594:	f04f 0000 	mov.w	r0, #0
 8006598:	f04f 0100 	mov.w	r1, #0
 800659c:	0299      	lsls	r1, r3, #10
 800659e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065a2:	0290      	lsls	r0, r2, #10
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4610      	mov	r0, r2
 80065aa:	4619      	mov	r1, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	f7fa fb32 	bl	8000c1c <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4613      	mov	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065c0:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <HAL_RCC_GetSysClockFreq+0x160>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	3301      	adds	r3, #1
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d8:	60bb      	str	r3, [r7, #8]
      break;
 80065da:	e002      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065dc:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80065de:	60bb      	str	r3, [r7, #8]
      break;
 80065e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065e2:	68bb      	ldr	r3, [r7, #8]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bdb0      	pop	{r4, r5, r7, pc}
 80065ec:	40023800 	.word	0x40023800
 80065f0:	00f42400 	.word	0x00f42400
 80065f4:	017d7840 	.word	0x017d7840

080065f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065fc:	4b03      	ldr	r3, [pc, #12]	; (800660c <HAL_RCC_GetHCLKFreq+0x14>)
 80065fe:	681b      	ldr	r3, [r3, #0]
}
 8006600:	4618      	mov	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000010 	.word	0x20000010

08006610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006614:	f7ff fff0 	bl	80065f8 <HAL_RCC_GetHCLKFreq>
 8006618:	4602      	mov	r2, r0
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	0a9b      	lsrs	r3, r3, #10
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	4903      	ldr	r1, [pc, #12]	; (8006634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006626:	5ccb      	ldrb	r3, [r1, r3]
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800662c:	4618      	mov	r0, r3
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40023800 	.word	0x40023800
 8006634:	0800c430 	.word	0x0800c430

08006638 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800665c:	2b00      	cmp	r3, #0
 800665e:	d038      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006660:	4b68      	ldr	r3, [pc, #416]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006666:	f7fc f8b3 	bl	80027d0 <HAL_GetTick>
 800666a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800666c:	e008      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800666e:	f7fc f8af 	bl	80027d0 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e0bd      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006680:	4b61      	ldr	r3, [pc, #388]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1f0      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	019b      	lsls	r3, r3, #6
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	071b      	lsls	r3, r3, #28
 800669e:	495a      	ldr	r1, [pc, #360]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066a6:	4b57      	ldr	r3, [pc, #348]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ac:	f7fc f890 	bl	80027d0 <HAL_GetTick>
 80066b0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066b4:	f7fc f88c 	bl	80027d0 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e09a      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066c6:	4b50      	ldr	r3, [pc, #320]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8083 	beq.w	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	4b48      	ldr	r3, [pc, #288]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	4a47      	ldr	r2, [pc, #284]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ee:	6413      	str	r3, [r2, #64]	; 0x40
 80066f0:	4b45      	ldr	r3, [pc, #276]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80066fc:	4b43      	ldr	r3, [pc, #268]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a42      	ldr	r2, [pc, #264]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006706:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006708:	f7fc f862 	bl	80027d0 <HAL_GetTick>
 800670c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006710:	f7fc f85e 	bl	80027d0 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e06c      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006722:	4b3a      	ldr	r3, [pc, #232]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800672e:	4b36      	ldr	r3, [pc, #216]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006736:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d02f      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	429a      	cmp	r2, r3
 800674a:	d028      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800674c:	4b2e      	ldr	r3, [pc, #184]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800674e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006754:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006756:	4b2e      	ldr	r3, [pc, #184]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800675c:	4b2c      	ldr	r3, [pc, #176]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800675e:	2200      	movs	r2, #0
 8006760:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006762:	4a29      	ldr	r2, [pc, #164]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006768:	4b27      	ldr	r3, [pc, #156]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800676a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	d114      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006774:	f7fc f82c 	bl	80027d0 <HAL_GetTick>
 8006778:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800677a:	e00a      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800677c:	f7fc f828 	bl	80027d0 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	f241 3288 	movw	r2, #5000	; 0x1388
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e034      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006792:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0ee      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067aa:	d10d      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80067ac:	4b16      	ldr	r3, [pc, #88]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c0:	4911      	ldr	r1, [pc, #68]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	608b      	str	r3, [r1, #8]
 80067c6:	e005      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80067c8:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	4a0e      	ldr	r2, [pc, #56]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067d2:	6093      	str	r3, [r2, #8]
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e0:	4909      	ldr	r1, [pc, #36]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7d1a      	ldrb	r2, [r3, #20]
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80067f8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	42470068 	.word	0x42470068
 8006808:	40023800 	.word	0x40023800
 800680c:	40007000 	.word	0x40007000
 8006810:	42470e40 	.word	0x42470e40
 8006814:	424711e0 	.word	0x424711e0

08006818 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e083      	b.n	8006932 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	7f5b      	ldrb	r3, [r3, #29]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fb fe2e 	bl	800249c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	22ca      	movs	r2, #202	; 0xca
 800684c:	625a      	str	r2, [r3, #36]	; 0x24
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2253      	movs	r2, #83	; 0x53
 8006854:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f897 	bl	800698a <RTC_EnterInitMode>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d008      	beq.n	8006874 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	22ff      	movs	r2, #255	; 0xff
 8006868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2204      	movs	r2, #4
 800686e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e05e      	b.n	8006932 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006886:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6899      	ldr	r1, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	68d2      	ldr	r2, [r2, #12]
 80068ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6919      	ldr	r1, [r3, #16]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	041a      	lsls	r2, r3, #16
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10e      	bne.n	8006900 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f829 	bl	800693a <HAL_RTC_WaitForSynchro>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d008      	beq.n	8006900 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	22ff      	movs	r2, #255	; 0xff
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2204      	movs	r2, #4
 80068fa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e018      	b.n	8006932 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800690e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	22ff      	movs	r2, #255	; 0xff
 8006928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006930:	2300      	movs	r3, #0
  }
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006954:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006956:	f7fb ff3b 	bl	80027d0 <HAL_GetTick>
 800695a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800695c:	e009      	b.n	8006972 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800695e:	f7fb ff37 	bl	80027d0 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800696c:	d901      	bls.n	8006972 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e007      	b.n	8006982 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0ee      	beq.n	800695e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d119      	bne.n	80069d8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069ae:	f7fb ff0f 	bl	80027d0 <HAL_GetTick>
 80069b2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80069b4:	e009      	b.n	80069ca <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80069b6:	f7fb ff0b 	bl	80027d0 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c4:	d901      	bls.n	80069ca <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e007      	b.n	80069da <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0ee      	beq.n	80069b6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069e2:	b084      	sub	sp, #16
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	f107 001c 	add.w	r0, r7, #28
 80069f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d122      	bne.n	8006a40 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d105      	bne.n	8006a34 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fac5 	bl	8007fc4 <USB_CoreReset>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	73fb      	strb	r3, [r7, #15]
 8006a3e:	e01a      	b.n	8006a76 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fab9 	bl	8007fc4 <USB_CoreReset>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38
 8006a68:	e005      	b.n	8006a76 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d10b      	bne.n	8006a94 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f043 0206 	orr.w	r2, r3, #6
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f043 0220 	orr.w	r2, r3, #32
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aa0:	b004      	add	sp, #16
 8006aa2:	4770      	bx	lr

08006aa4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d165      	bne.n	8006b84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4a41      	ldr	r2, [pc, #260]	; (8006bc0 <USB_SetTurnaroundTime+0x11c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d906      	bls.n	8006ace <USB_SetTurnaroundTime+0x2a>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <USB_SetTurnaroundTime+0x120>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d202      	bcs.n	8006ace <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ac8:	230f      	movs	r3, #15
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	e062      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4a3c      	ldr	r2, [pc, #240]	; (8006bc4 <USB_SetTurnaroundTime+0x120>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d306      	bcc.n	8006ae4 <USB_SetTurnaroundTime+0x40>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4a3b      	ldr	r2, [pc, #236]	; (8006bc8 <USB_SetTurnaroundTime+0x124>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d202      	bcs.n	8006ae4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ade:	230e      	movs	r3, #14
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	e057      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4a38      	ldr	r2, [pc, #224]	; (8006bc8 <USB_SetTurnaroundTime+0x124>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d306      	bcc.n	8006afa <USB_SetTurnaroundTime+0x56>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4a37      	ldr	r2, [pc, #220]	; (8006bcc <USB_SetTurnaroundTime+0x128>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d202      	bcs.n	8006afa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006af4:	230d      	movs	r3, #13
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e04c      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4a33      	ldr	r2, [pc, #204]	; (8006bcc <USB_SetTurnaroundTime+0x128>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d306      	bcc.n	8006b10 <USB_SetTurnaroundTime+0x6c>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4a32      	ldr	r2, [pc, #200]	; (8006bd0 <USB_SetTurnaroundTime+0x12c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d802      	bhi.n	8006b10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	e041      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4a2f      	ldr	r2, [pc, #188]	; (8006bd0 <USB_SetTurnaroundTime+0x12c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d906      	bls.n	8006b26 <USB_SetTurnaroundTime+0x82>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4a2e      	ldr	r2, [pc, #184]	; (8006bd4 <USB_SetTurnaroundTime+0x130>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d802      	bhi.n	8006b26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b20:	230b      	movs	r3, #11
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e036      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <USB_SetTurnaroundTime+0x130>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d906      	bls.n	8006b3c <USB_SetTurnaroundTime+0x98>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <USB_SetTurnaroundTime+0x134>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d802      	bhi.n	8006b3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b36:	230a      	movs	r3, #10
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	e02b      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4a26      	ldr	r2, [pc, #152]	; (8006bd8 <USB_SetTurnaroundTime+0x134>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d906      	bls.n	8006b52 <USB_SetTurnaroundTime+0xae>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <USB_SetTurnaroundTime+0x138>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d202      	bcs.n	8006b52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b4c:	2309      	movs	r3, #9
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e020      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	4a21      	ldr	r2, [pc, #132]	; (8006bdc <USB_SetTurnaroundTime+0x138>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d306      	bcc.n	8006b68 <USB_SetTurnaroundTime+0xc4>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4a20      	ldr	r2, [pc, #128]	; (8006be0 <USB_SetTurnaroundTime+0x13c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d802      	bhi.n	8006b68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b62:	2308      	movs	r3, #8
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	e015      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <USB_SetTurnaroundTime+0x13c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d906      	bls.n	8006b7e <USB_SetTurnaroundTime+0xda>
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4a1c      	ldr	r2, [pc, #112]	; (8006be4 <USB_SetTurnaroundTime+0x140>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d202      	bcs.n	8006b7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b78:	2307      	movs	r3, #7
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	e00a      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b7e:	2306      	movs	r3, #6
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e007      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b8a:	2309      	movs	r3, #9
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	e001      	b.n	8006b94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b90:	2309      	movs	r3, #9
 8006b92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	029b      	lsls	r3, r3, #10
 8006ba8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006bac:	431a      	orrs	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	00d8acbf 	.word	0x00d8acbf
 8006bc4:	00e4e1c0 	.word	0x00e4e1c0
 8006bc8:	00f42400 	.word	0x00f42400
 8006bcc:	01067380 	.word	0x01067380
 8006bd0:	011a499f 	.word	0x011a499f
 8006bd4:	01312cff 	.word	0x01312cff
 8006bd8:	014ca43f 	.word	0x014ca43f
 8006bdc:	016e3600 	.word	0x016e3600
 8006be0:	01a6ab1f 	.word	0x01a6ab1f
 8006be4:	01e84800 	.word	0x01e84800

08006be8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f043 0201 	orr.w	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f023 0201 	bic.w	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d106      	bne.n	8006c58 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]
 8006c56:	e00b      	b.n	8006c70 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60da      	str	r2, [r3, #12]
 8006c6a:	e001      	b.n	8006c70 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e003      	b.n	8006c78 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006c70:	2032      	movs	r0, #50	; 0x32
 8006c72:	f7fb fdb9 	bl	80027e8 <HAL_Delay>

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c80:	b084      	sub	sp, #16
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b086      	sub	sp, #24
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	e009      	b.n	8006cb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3340      	adds	r3, #64	; 0x40
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	2200      	movs	r2, #0
 8006cac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b0e      	cmp	r3, #14
 8006cb8:	d9f2      	bls.n	8006ca0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d11c      	bne.n	8006cfa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cce:	f043 0302 	orr.w	r3, r3, #2
 8006cd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	639a      	str	r2, [r3, #56]	; 0x38
 8006cf8:	e00b      	b.n	8006d12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d18:	461a      	mov	r2, r3
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d24:	4619      	mov	r1, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	680b      	ldr	r3, [r1, #0]
 8006d30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d10c      	bne.n	8006d52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d104      	bne.n	8006d48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f949 	bl	8006fd8 <USB_SetDevSpeed>
 8006d46:	e008      	b.n	8006d5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d48:	2101      	movs	r1, #1
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f944 	bl	8006fd8 <USB_SetDevSpeed>
 8006d50:	e003      	b.n	8006d5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d52:	2103      	movs	r1, #3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f93f 	bl	8006fd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d5a:	2110      	movs	r1, #16
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f8f3 	bl	8006f48 <USB_FlushTxFifo>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f911 	bl	8006f94 <USB_FlushRxFifo>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d82:	461a      	mov	r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8e:	461a      	mov	r2, r3
 8006d90:	2300      	movs	r3, #0
 8006d92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da0:	2300      	movs	r3, #0
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	e043      	b.n	8006e2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dbc:	d118      	bne.n	8006df0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	e013      	b.n	8006e02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de6:	461a      	mov	r2, r3
 8006de8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	e008      	b.n	8006e02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0e:	461a      	mov	r2, r3
 8006e10:	2300      	movs	r3, #0
 8006e12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e20:	461a      	mov	r2, r3
 8006e22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d3b7      	bcc.n	8006da6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e36:	2300      	movs	r3, #0
 8006e38:	613b      	str	r3, [r7, #16]
 8006e3a:	e043      	b.n	8006ec4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e52:	d118      	bne.n	8006e86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e66:	461a      	mov	r2, r3
 8006e68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	e013      	b.n	8006e98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	e008      	b.n	8006e98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	461a      	mov	r2, r3
 8006e94:	2300      	movs	r3, #0
 8006e96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ebc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d3b7      	bcc.n	8006e3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ede:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006eec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d105      	bne.n	8006f00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	f043 0210 	orr.w	r2, r3, #16
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <USB_DevInit+0x2c4>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f043 0208 	orr.w	r2, r3, #8
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d107      	bne.n	8006f34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f2c:	f043 0304 	orr.w	r3, r3, #4
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f40:	b004      	add	sp, #16
 8006f42:	4770      	bx	lr
 8006f44:	803c3800 	.word	0x803c3800

08006f48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	019b      	lsls	r3, r3, #6
 8006f5a:	f043 0220 	orr.w	r2, r3, #32
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4a09      	ldr	r2, [pc, #36]	; (8006f90 <USB_FlushTxFifo+0x48>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d901      	bls.n	8006f74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e006      	b.n	8006f82 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	d0f0      	beq.n	8006f62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	00030d40 	.word	0x00030d40

08006f94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2210      	movs	r2, #16
 8006fa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <USB_FlushRxFifo+0x40>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d901      	bls.n	8006fb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e006      	b.n	8006fc6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d0f0      	beq.n	8006fa6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	00030d40 	.word	0x00030d40

08006fd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	68f9      	ldr	r1, [r7, #12]
 8006ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800700a:	b480      	push	{r7}
 800700c:	b087      	sub	sp, #28
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 0306 	and.w	r3, r3, #6
 8007022:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800702a:	2300      	movs	r3, #0
 800702c:	75fb      	strb	r3, [r7, #23]
 800702e:	e00a      	b.n	8007046 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d002      	beq.n	800703c <USB_GetDevSpeed+0x32>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b06      	cmp	r3, #6
 800703a:	d102      	bne.n	8007042 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800703c:	2302      	movs	r3, #2
 800703e:	75fb      	strb	r3, [r7, #23]
 8007040:	e001      	b.n	8007046 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007042:	230f      	movs	r3, #15
 8007044:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d13a      	bne.n	80070e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007076:	69da      	ldr	r2, [r3, #28]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	2101      	movs	r1, #1
 8007082:	fa01 f303 	lsl.w	r3, r1, r3
 8007086:	b29b      	uxth	r3, r3
 8007088:	68f9      	ldr	r1, [r7, #12]
 800708a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800708e:	4313      	orrs	r3, r2
 8007090:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d155      	bne.n	8007154 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	78db      	ldrb	r3, [r3, #3]
 80070c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	059b      	lsls	r3, r3, #22
 80070ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070cc:	4313      	orrs	r3, r2
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	e036      	b.n	8007154 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ec:	69da      	ldr	r2, [r3, #28]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	2101      	movs	r1, #1
 80070f8:	fa01 f303 	lsl.w	r3, r1, r3
 80070fc:	041b      	lsls	r3, r3, #16
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007104:	4313      	orrs	r3, r2
 8007106:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d11a      	bne.n	8007154 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	78db      	ldrb	r3, [r3, #3]
 8007138:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800713a:	430b      	orrs	r3, r1
 800713c:	4313      	orrs	r3, r2
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	0151      	lsls	r1, r2, #5
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	440a      	add	r2, r1
 8007146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800714a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007152:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
	...

08007164 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d161      	bne.n	8007244 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007196:	d11f      	bne.n	80071d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	2101      	movs	r1, #1
 80071ea:	fa01 f303 	lsl.w	r3, r1, r3
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	43db      	mvns	r3, r3
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f8:	4013      	ands	r3, r2
 80071fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	2101      	movs	r1, #1
 800720e:	fa01 f303 	lsl.w	r3, r1, r3
 8007212:	b29b      	uxth	r3, r3
 8007214:	43db      	mvns	r3, r3
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800721c:	4013      	ands	r3, r2
 800721e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	0159      	lsls	r1, r3, #5
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	440b      	add	r3, r1
 8007236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723a:	4619      	mov	r1, r3
 800723c:	4b35      	ldr	r3, [pc, #212]	; (8007314 <USB_DeactivateEndpoint+0x1b0>)
 800723e:	4013      	ands	r3, r2
 8007240:	600b      	str	r3, [r1, #0]
 8007242:	e060      	b.n	8007306 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800725a:	d11f      	bne.n	800729c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800727a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800729a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	2101      	movs	r1, #1
 80072ae:	fa01 f303 	lsl.w	r3, r1, r3
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	43db      	mvns	r3, r3
 80072b6:	68f9      	ldr	r1, [r7, #12]
 80072b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072bc:	4013      	ands	r3, r2
 80072be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c6:	69da      	ldr	r2, [r3, #28]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f003 030f 	and.w	r3, r3, #15
 80072d0:	2101      	movs	r1, #1
 80072d2:	fa01 f303 	lsl.w	r3, r1, r3
 80072d6:	041b      	lsls	r3, r3, #16
 80072d8:	43db      	mvns	r3, r3
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072e0:	4013      	ands	r3, r2
 80072e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	0159      	lsls	r1, r3, #5
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	440b      	add	r3, r1
 80072fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fe:	4619      	mov	r1, r3
 8007300:	4b05      	ldr	r3, [pc, #20]	; (8007318 <USB_DeactivateEndpoint+0x1b4>)
 8007302:	4013      	ands	r3, r2
 8007304:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	ec337800 	.word	0xec337800
 8007318:	eff37800 	.word	0xeff37800

0800731c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08a      	sub	sp, #40	; 0x28
 8007320:	af02      	add	r7, sp, #8
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b01      	cmp	r3, #1
 800733a:	f040 815c 	bne.w	80075f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d132      	bne.n	80073ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	440a      	add	r2, r1
 800735c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007360:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007364:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007384:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a4:	0cdb      	lsrs	r3, r3, #19
 80073a6:	04db      	lsls	r3, r3, #19
 80073a8:	6113      	str	r3, [r2, #16]
 80073aa:	e074      	b.n	8007496 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	0151      	lsls	r1, r2, #5
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	440a      	add	r2, r1
 80073c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c6:	0cdb      	lsrs	r3, r3, #19
 80073c8:	04db      	lsls	r3, r3, #19
 80073ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	0151      	lsls	r1, r2, #5
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	440a      	add	r2, r1
 80073e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	691a      	ldr	r2, [r3, #16]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6959      	ldr	r1, [r3, #20]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	440b      	add	r3, r1
 8007408:	1e59      	subs	r1, r3, #1
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007412:	04d9      	lsls	r1, r3, #19
 8007414:	4b9d      	ldr	r3, [pc, #628]	; (800768c <USB_EPStartXfer+0x370>)
 8007416:	400b      	ands	r3, r1
 8007418:	69b9      	ldr	r1, [r7, #24]
 800741a:	0148      	lsls	r0, r1, #5
 800741c:	69f9      	ldr	r1, [r7, #28]
 800741e:	4401      	add	r1, r0
 8007420:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007424:	4313      	orrs	r3, r2
 8007426:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800743e:	69b9      	ldr	r1, [r7, #24]
 8007440:	0148      	lsls	r0, r1, #5
 8007442:	69f9      	ldr	r1, [r7, #28]
 8007444:	4401      	add	r1, r0
 8007446:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800744a:	4313      	orrs	r3, r2
 800744c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	78db      	ldrb	r3, [r3, #3]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d11f      	bne.n	8007496 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	0151      	lsls	r1, r2, #5
 8007468:	69fa      	ldr	r2, [r7, #28]
 800746a:	440a      	add	r2, r1
 800746c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007470:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007474:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007494:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d14b      	bne.n	8007534 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d009      	beq.n	80074b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b0:	461a      	mov	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	78db      	ldrb	r3, [r3, #3]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d128      	bne.n	8007512 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d110      	bne.n	80074f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	0151      	lsls	r1, r2, #5
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	440a      	add	r2, r1
 80074e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	e00f      	b.n	8007512 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	440a      	add	r2, r1
 8007508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800750c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007510:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	0151      	lsls	r1, r2, #5
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	440a      	add	r2, r1
 8007528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800752c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	e12f      	b.n	8007794 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	440a      	add	r2, r1
 800754a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007552:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	78db      	ldrb	r3, [r3, #3]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d015      	beq.n	8007588 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8117 	beq.w	8007794 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	2101      	movs	r1, #1
 8007578:	fa01 f303 	lsl.w	r3, r1, r3
 800757c:	69f9      	ldr	r1, [r7, #28]
 800757e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007582:	4313      	orrs	r3, r2
 8007584:	634b      	str	r3, [r1, #52]	; 0x34
 8007586:	e105      	b.n	8007794 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d110      	bne.n	80075ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	0151      	lsls	r1, r2, #5
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	440a      	add	r2, r1
 80075ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	e00f      	b.n	80075da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	68d9      	ldr	r1, [r3, #12]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	781a      	ldrb	r2, [r3, #0]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	b298      	uxth	r0, r3
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	4603      	mov	r3, r0
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fa2b 	bl	8007a4a <USB_WritePacket>
 80075f4:	e0ce      	b.n	8007794 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	440a      	add	r2, r1
 800760c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007610:	0cdb      	lsrs	r3, r3, #19
 8007612:	04db      	lsls	r3, r3, #19
 8007614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	0151      	lsls	r1, r2, #5
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	440a      	add	r2, r1
 800762c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007630:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007634:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007638:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d126      	bne.n	8007690 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007658:	69b9      	ldr	r1, [r7, #24]
 800765a:	0148      	lsls	r0, r1, #5
 800765c:	69f9      	ldr	r1, [r7, #28]
 800765e:	4401      	add	r1, r0
 8007660:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007664:	4313      	orrs	r3, r2
 8007666:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	0151      	lsls	r1, r2, #5
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	440a      	add	r2, r1
 800767e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007682:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007686:	6113      	str	r3, [r2, #16]
 8007688:	e036      	b.n	80076f8 <USB_EPStartXfer+0x3dc>
 800768a:	bf00      	nop
 800768c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	695a      	ldr	r2, [r3, #20]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	4413      	add	r3, r2
 800769a:	1e5a      	subs	r2, r3, #1
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	8afb      	ldrh	r3, [r7, #22]
 80076b6:	04d9      	lsls	r1, r3, #19
 80076b8:	4b39      	ldr	r3, [pc, #228]	; (80077a0 <USB_EPStartXfer+0x484>)
 80076ba:	400b      	ands	r3, r1
 80076bc:	69b9      	ldr	r1, [r7, #24]
 80076be:	0148      	lsls	r0, r1, #5
 80076c0:	69f9      	ldr	r1, [r7, #28]
 80076c2:	4401      	add	r1, r0
 80076c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076c8:	4313      	orrs	r3, r2
 80076ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d8:	691a      	ldr	r2, [r3, #16]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	8af9      	ldrh	r1, [r7, #22]
 80076e0:	fb01 f303 	mul.w	r3, r1, r3
 80076e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e8:	69b9      	ldr	r1, [r7, #24]
 80076ea:	0148      	lsls	r0, r1, #5
 80076ec:	69f9      	ldr	r1, [r7, #28]
 80076ee:	4401      	add	r1, r0
 80076f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076f4:	4313      	orrs	r3, r2
 80076f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d10d      	bne.n	800771a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d009      	beq.n	800771a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	68d9      	ldr	r1, [r3, #12]
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007716:	460a      	mov	r2, r1
 8007718:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	78db      	ldrb	r3, [r3, #3]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d128      	bne.n	8007774 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772e:	2b00      	cmp	r3, #0
 8007730:	d110      	bne.n	8007754 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	440a      	add	r2, r1
 8007748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	e00f      	b.n	8007774 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800776e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007772:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	1ff80000 	.word	0x1ff80000

080077a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	f040 80cd 	bne.w	8007960 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d132      	bne.n	8007834 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	0151      	lsls	r1, r2, #5
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	440a      	add	r2, r1
 8007808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800780c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	0151      	lsls	r1, r2, #5
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	440a      	add	r2, r1
 8007828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800782c:	0cdb      	lsrs	r3, r3, #19
 800782e:	04db      	lsls	r3, r3, #19
 8007830:	6113      	str	r3, [r2, #16]
 8007832:	e04e      	b.n	80078d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	0151      	lsls	r1, r2, #5
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	440a      	add	r2, r1
 800784a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800784e:	0cdb      	lsrs	r3, r3, #19
 8007850:	04db      	lsls	r3, r3, #19
 8007852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	0151      	lsls	r1, r2, #5
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	440a      	add	r2, r1
 800786a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007872:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007876:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	429a      	cmp	r2, r3
 8007882:	d903      	bls.n	800788c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078c2:	6939      	ldr	r1, [r7, #16]
 80078c4:	0148      	lsls	r0, r1, #5
 80078c6:	6979      	ldr	r1, [r7, #20]
 80078c8:	4401      	add	r1, r0
 80078ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078ce:	4313      	orrs	r3, r2
 80078d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d11e      	bne.n	8007916 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d009      	beq.n	80078f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ec:	461a      	mov	r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	440a      	add	r2, r1
 800790a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	e092      	b.n	8007a3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	0151      	lsls	r1, r2, #5
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	440a      	add	r2, r1
 800792c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007930:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007934:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d07e      	beq.n	8007a3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	2101      	movs	r1, #1
 8007950:	fa01 f303 	lsl.w	r3, r1, r3
 8007954:	6979      	ldr	r1, [r7, #20]
 8007956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800795a:	4313      	orrs	r3, r2
 800795c:	634b      	str	r3, [r1, #52]	; 0x34
 800795e:	e06d      	b.n	8007a3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	440a      	add	r2, r1
 8007976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797a:	0cdb      	lsrs	r3, r3, #19
 800797c:	04db      	lsls	r3, r3, #19
 800797e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	440a      	add	r2, r1
 8007996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800799a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800799e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ea:	6939      	ldr	r1, [r7, #16]
 80079ec:	0148      	lsls	r0, r1, #5
 80079ee:	6979      	ldr	r1, [r7, #20]
 80079f0:	4401      	add	r1, r0
 80079f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079f6:	4313      	orrs	r3, r2
 80079f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d10d      	bne.n	8007a1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d009      	beq.n	8007a1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	68d9      	ldr	r1, [r3, #12]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a18:	460a      	mov	r2, r1
 8007a1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	0151      	lsls	r1, r2, #5
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	440a      	add	r2, r1
 8007a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b089      	sub	sp, #36	; 0x24
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	4611      	mov	r1, r2
 8007a56:	461a      	mov	r2, r3
 8007a58:	460b      	mov	r3, r1
 8007a5a:	71fb      	strb	r3, [r7, #7]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007a68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d11a      	bne.n	8007aa6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a70:	88bb      	ldrh	r3, [r7, #4]
 8007a72:	3303      	adds	r3, #3
 8007a74:	089b      	lsrs	r3, r3, #2
 8007a76:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	61bb      	str	r3, [r7, #24]
 8007a7c:	e00f      	b.n	8007a9e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	031a      	lsls	r2, r3, #12
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	3304      	adds	r3, #4
 8007a96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d3eb      	bcc.n	8007a7e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3724      	adds	r7, #36	; 0x24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b089      	sub	sp, #36	; 0x24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007aca:	88fb      	ldrh	r3, [r7, #6]
 8007acc:	3303      	adds	r3, #3
 8007ace:	089b      	lsrs	r3, r3, #2
 8007ad0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61bb      	str	r3, [r7, #24]
 8007ad6:	e00b      	b.n	8007af0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	3301      	adds	r3, #1
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d3ef      	bcc.n	8007ad8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007af8:	69fb      	ldr	r3, [r7, #28]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3724      	adds	r7, #36	; 0x24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b085      	sub	sp, #20
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d12c      	bne.n	8007b7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	db12      	blt.n	8007b5a <USB_EPSetStall+0x54>
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00f      	beq.n	8007b5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	0151      	lsls	r1, r2, #5
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	440a      	add	r2, r1
 8007b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	e02b      	b.n	8007bd4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	db12      	blt.n	8007bb4 <USB_EPSetStall+0xae>
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00f      	beq.n	8007bb4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bb2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	0151      	lsls	r1, r2, #5
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	440a      	add	r2, r1
 8007bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	785b      	ldrb	r3, [r3, #1]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d128      	bne.n	8007c50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	0151      	lsls	r1, r2, #5
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	440a      	add	r2, r1
 8007c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	78db      	ldrb	r3, [r3, #3]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d003      	beq.n	8007c2e <USB_EPClearStall+0x4c>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	78db      	ldrb	r3, [r3, #3]
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d138      	bne.n	8007ca0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	e027      	b.n	8007ca0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	78db      	ldrb	r3, [r3, #3]
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d003      	beq.n	8007c80 <USB_EPClearStall+0x9e>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	78db      	ldrb	r3, [r3, #3]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d10f      	bne.n	8007ca0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ccc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cd0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	011b      	lsls	r3, r3, #4
 8007cde:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007ce2:	68f9      	ldr	r1, [r7, #12]
 8007ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d14:	f023 0303 	bic.w	r3, r3, #3
 8007d18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d28:	f023 0302 	bic.w	r3, r3, #2
 8007d2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d6a:	f043 0302 	orr.w	r3, r3, #2
 8007d6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	4013      	ands	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d96:	68fb      	ldr	r3, [r7, #12]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	0c1b      	lsrs	r3, r3, #16
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	b29b      	uxth	r3, r3
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	4013      	ands	r3, r2
 8007e38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
 8007e78:	01db      	lsls	r3, r3, #7
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4013      	ands	r3, r2
 8007e94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e96:	68bb      	ldr	r3, [r7, #8]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	371c      	adds	r7, #28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ede:	f023 0307 	bic.w	r3, r3, #7
 8007ee2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
	...

08007f08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	460b      	mov	r3, r1
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	333c      	adds	r3, #60	; 0x3c
 8007f1e:	3304      	adds	r3, #4
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <USB_EP0_OutStart+0xb8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d90a      	bls.n	8007f42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f3c:	d101      	bne.n	8007f42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e037      	b.n	8007fb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f48:	461a      	mov	r2, r3
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f70:	f043 0318 	orr.w	r3, r3, #24
 8007f74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f8a:	7afb      	ldrb	r3, [r7, #11]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d10f      	bne.n	8007fb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f96:	461a      	mov	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007faa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007fae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	4f54300a 	.word	0x4f54300a

08007fc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4a13      	ldr	r2, [pc, #76]	; (8008028 <USB_CoreReset+0x64>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d901      	bls.n	8007fe2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e01b      	b.n	800801a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	daf2      	bge.n	8007fd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f043 0201 	orr.w	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a09      	ldr	r2, [pc, #36]	; (8008028 <USB_CoreReset+0x64>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d901      	bls.n	800800c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e006      	b.n	800801a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b01      	cmp	r3, #1
 8008016:	d0f0      	beq.n	8007ffa <USB_CoreReset+0x36>

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	00030d40 	.word	0x00030d40

0800802c <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 8008038:	2044      	movs	r0, #68	; 0x44
 800803a:	f001 fead 	bl	8009d98 <USBD_static_malloc>
 800803e:	4602      	mov	r2, r0
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 8008050:	2303      	movs	r3, #3
 8008052:	e016      	b.n	8008082 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800805a:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 800805c:	2340      	movs	r3, #64	; 0x40
 800805e:	2202      	movs	r2, #2
 8008060:	2181      	movs	r1, #129	; 0x81
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fd75 	bl	8009b52 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 8008068:	2340      	movs	r3, #64	; 0x40
 800806a:	2202      	movs	r2, #2
 800806c:	2101      	movs	r1, #1
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 fd6f 	bl	8009b52 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8008074:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 8008076:	2340      	movs	r3, #64	; 0x40
 8008078:	2101      	movs	r1, #1
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fe58 	bl	8009d30 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8008080:	2300      	movs	r3, #0
  }
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 8008096:	2181      	movs	r1, #129	; 0x81
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 fd80 	bl	8009b9e <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 800809e:	2101      	movs	r1, #1
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 fd7c 	bl	8009b9e <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <USBD_Midi_Setup+0x26>
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d10b      	bne.n	80080e2 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 f937 	bl	8009340 <USBD_CtlError>
      return USBD_FAIL;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e006      	b.n	80080e4 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 f931 	bl	8009340 <USBD_CtlError>
      return USBD_FAIL;
 80080de:	2303      	movs	r3, #3
 80080e0:	e000      	b.n	80080e4 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2265      	movs	r2, #101	; 0x65
 80080f8:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 80080fa:	4b03      	ldr	r3, [pc, #12]	; (8008108 <USBD_Midi_GetCfgDesc+0x1c>)
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	20000054 	.word	0x20000054

0800810c <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ae:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 fddc 	bl	8009d72 <USBD_LL_GetRxDataSize>
 80081ba:	4602      	mov	r2, r0
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e00c      	b.n	80081e4 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68f9      	ldr	r1, [r7, #12]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	440a      	add	r2, r1
 80081d8:	2104      	movs	r1, #4
 80081da:	4610      	mov	r0, r2
 80081dc:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	3304      	adds	r3, #4
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d3ed      	bcc.n	80081ca <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 80081ee:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 80081f0:	2340      	movs	r3, #64	; 0x40
 80081f2:	2101      	movs	r1, #1
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 fd9b 	bl	8009d30 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	220a      	movs	r2, #10
 8008210:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 8008212:	4b03      	ldr	r3, [pc, #12]	; (8008220 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	200000bc 	.word	0x200000bc

08008224 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800822e:	2303      	movs	r3, #3
 8008230:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008244:	7bfb      	ldrb	r3, [r7, #15]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b086      	sub	sp, #24
 8008256:	af00      	add	r7, sp, #0
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	4613      	mov	r3, r2
 800825e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008266:	2303      	movs	r3, #3
 8008268:	e01f      	b.n	80082aa <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	79fa      	ldrb	r2, [r7, #7]
 800829c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f001 fbf0 	bl	8009a84 <USBD_LL_Init>
 80082a4:	4603      	mov	r3, r0
 80082a6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e016      	b.n	80082f8 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00b      	beq.n	80082f6 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	f107 020e 	add.w	r2, r7, #14
 80082ea:	4610      	mov	r0, r2
 80082ec:	4798      	blx	r3
 80082ee:	4602      	mov	r2, r0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 fc07 	bl	8009b1c <USBD_LL_Start>
 800830e:	4603      	mov	r3, r0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800833a:	2303      	movs	r3, #3
 800833c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008344:	2b00      	cmp	r3, #0
 8008346:	d009      	beq.n	800835c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	4611      	mov	r1, r2
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	4798      	blx	r3
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	4611      	mov	r1, r2
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	4798      	blx	r3
  }

  return USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 ff8f 	bl	80092cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80083bc:	461a      	mov	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083ca:	f003 031f 	and.w	r3, r3, #31
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d01a      	beq.n	8008408 <USBD_LL_SetupStage+0x72>
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d822      	bhi.n	800841c <USBD_LL_SetupStage+0x86>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <USBD_LL_SetupStage+0x4a>
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d00a      	beq.n	80083f4 <USBD_LL_SetupStage+0x5e>
 80083de:	e01d      	b.n	800841c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa61 	bl	80088b0 <USBD_StdDevReq>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73fb      	strb	r3, [r7, #15]
      break;
 80083f2:	e020      	b.n	8008436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fac5 	bl	800898c <USBD_StdItfReq>
 8008402:	4603      	mov	r3, r0
 8008404:	73fb      	strb	r3, [r7, #15]
      break;
 8008406:	e016      	b.n	8008436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fb04 	bl	8008a1e <USBD_StdEPReq>
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]
      break;
 800841a:	e00c      	b.n	8008436 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008422:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008426:	b2db      	uxtb	r3, r3
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 fbd6 	bl	8009bdc <USBD_LL_StallEP>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]
      break;
 8008434:	bf00      	nop
  }

  return ret;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	460b      	mov	r3, r1
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d138      	bne.n	80084c6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800845a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008462:	2b03      	cmp	r3, #3
 8008464:	d14a      	bne.n	80084fc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	689a      	ldr	r2, [r3, #8]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	429a      	cmp	r2, r3
 8008470:	d913      	bls.n	800849a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	1ad2      	subs	r2, r2, r3
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	4293      	cmp	r3, r2
 800848a:	bf28      	it	cs
 800848c:	4613      	movcs	r3, r2
 800848e:	461a      	mov	r2, r3
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fff1 	bl	800947a <USBD_CtlContinueRx>
 8008498:	e030      	b.n	80084fc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d10b      	bne.n	80084be <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 ffec 	bl	800949c <USBD_CtlSendStatus>
 80084c4:	e01a      	b.n	80084fc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d114      	bne.n	80084fc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00e      	beq.n	80084fc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	7afa      	ldrb	r2, [r7, #11]
 80084e8:	4611      	mov	r1, r2
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	4798      	blx	r3
 80084ee:	4603      	mov	r3, r0
 80084f0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	e000      	b.n	80084fe <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b086      	sub	sp, #24
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	460b      	mov	r3, r1
 8008510:	607a      	str	r2, [r7, #4]
 8008512:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d16b      	bne.n	80085f2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3314      	adds	r3, #20
 800851e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008526:	2b02      	cmp	r3, #2
 8008528:	d156      	bne.n	80085d8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	689a      	ldr	r2, [r3, #8]
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	429a      	cmp	r2, r3
 8008534:	d914      	bls.n	8008560 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	689a      	ldr	r2, [r3, #8]
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	461a      	mov	r2, r3
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 ff83 	bl	8009458 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008552:	2300      	movs	r3, #0
 8008554:	2200      	movs	r2, #0
 8008556:	2100      	movs	r1, #0
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f001 fbe9 	bl	8009d30 <USBD_LL_PrepareReceive>
 800855e:	e03b      	b.n	80085d8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	429a      	cmp	r2, r3
 800856a:	d11c      	bne.n	80085a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008574:	429a      	cmp	r2, r3
 8008576:	d316      	bcc.n	80085a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008582:	429a      	cmp	r2, r3
 8008584:	d20f      	bcs.n	80085a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008586:	2200      	movs	r2, #0
 8008588:	2100      	movs	r1, #0
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 ff64 	bl	8009458 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008598:	2300      	movs	r3, #0
 800859a:	2200      	movs	r2, #0
 800859c:	2100      	movs	r1, #0
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f001 fbc6 	bl	8009d30 <USBD_LL_PrepareReceive>
 80085a4:	e018      	b.n	80085d8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d10b      	bne.n	80085ca <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ca:	2180      	movs	r1, #128	; 0x80
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f001 fb05 	bl	8009bdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 ff75 	bl	80094c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d122      	bne.n	8008628 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff fe98 	bl	8008318 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085f0:	e01a      	b.n	8008628 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d114      	bne.n	8008628 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00e      	beq.n	8008628 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	7afa      	ldrb	r2, [r7, #11]
 8008614:	4611      	mov	r1, r2
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	4798      	blx	r3
 800861a:	4603      	mov	r3, r0
 800861c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
 8008626:	e000      	b.n	800862a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008662:	2303      	movs	r3, #3
 8008664:	e02f      	b.n	80086c6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00f      	beq.n	8008690 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d009      	beq.n	8008690 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6852      	ldr	r2, [r2, #4]
 8008688:	b2d2      	uxtb	r2, r2
 800868a:	4611      	mov	r1, r2
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008690:	2340      	movs	r3, #64	; 0x40
 8008692:	2200      	movs	r2, #0
 8008694:	2100      	movs	r1, #0
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 fa5b 	bl	8009b52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2240      	movs	r2, #64	; 0x40
 80086a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086ac:	2340      	movs	r3, #64	; 0x40
 80086ae:	2200      	movs	r2, #0
 80086b0:	2180      	movs	r1, #128	; 0x80
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 fa4d 	bl	8009b52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2240      	movs	r2, #64	; 0x40
 80086c2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2204      	movs	r2, #4
 8008708:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b04      	cmp	r3, #4
 800872c:	d106      	bne.n	800873c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008734:	b2da      	uxtb	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	e012      	b.n	8008786 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b03      	cmp	r3, #3
 800876a:	d10b      	bne.n	8008784 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e014      	b.n	80087d2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d10d      	bne.n	80087d0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	78fa      	ldrb	r2, [r7, #3]
 80087ca:	4611      	mov	r1, r2
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e014      	b.n	800881e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d10d      	bne.n	800881c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	2b00      	cmp	r3, #0
 800880a:	d007      	beq.n	800881c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	78fa      	ldrb	r2, [r7, #3]
 8008816:	4611      	mov	r1, r2
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008852:	2b00      	cmp	r3, #0
 8008854:	d009      	beq.n	800886a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6852      	ldr	r2, [r2, #4]
 8008862:	b2d2      	uxtb	r2, r2
 8008864:	4611      	mov	r1, r2
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	4798      	blx	r3
  }

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	3301      	adds	r3, #1
 800888a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008892:	8a3b      	ldrh	r3, [r7, #16]
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	b21a      	sxth	r2, r3
 8008898:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800889c:	4313      	orrs	r3, r2
 800889e:	b21b      	sxth	r3, r3
 80088a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088a2:	89fb      	ldrh	r3, [r7, #14]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088c6:	2b40      	cmp	r3, #64	; 0x40
 80088c8:	d005      	beq.n	80088d6 <USBD_StdDevReq+0x26>
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	d853      	bhi.n	8008976 <USBD_StdDevReq+0xc6>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00b      	beq.n	80088ea <USBD_StdDevReq+0x3a>
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d14f      	bne.n	8008976 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	4798      	blx	r3
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]
      break;
 80088e8:	e04a      	b.n	8008980 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	785b      	ldrb	r3, [r3, #1]
 80088ee:	2b09      	cmp	r3, #9
 80088f0:	d83b      	bhi.n	800896a <USBD_StdDevReq+0xba>
 80088f2:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <USBD_StdDevReq+0x48>)
 80088f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f8:	0800894d 	.word	0x0800894d
 80088fc:	08008961 	.word	0x08008961
 8008900:	0800896b 	.word	0x0800896b
 8008904:	08008957 	.word	0x08008957
 8008908:	0800896b 	.word	0x0800896b
 800890c:	0800892b 	.word	0x0800892b
 8008910:	08008921 	.word	0x08008921
 8008914:	0800896b 	.word	0x0800896b
 8008918:	08008943 	.word	0x08008943
 800891c:	08008935 	.word	0x08008935
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f9de 	bl	8008ce4 <USBD_GetDescriptor>
          break;
 8008928:	e024      	b.n	8008974 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fb43 	bl	8008fb8 <USBD_SetAddress>
          break;
 8008932:	e01f      	b.n	8008974 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fb82 	bl	8009040 <USBD_SetConfig>
 800893c:	4603      	mov	r3, r0
 800893e:	73fb      	strb	r3, [r7, #15]
          break;
 8008940:	e018      	b.n	8008974 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fc21 	bl	800918c <USBD_GetConfig>
          break;
 800894a:	e013      	b.n	8008974 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fc52 	bl	80091f8 <USBD_GetStatus>
          break;
 8008954:	e00e      	b.n	8008974 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fc81 	bl	8009260 <USBD_SetFeature>
          break;
 800895e:	e009      	b.n	8008974 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fc90 	bl	8009288 <USBD_ClrFeature>
          break;
 8008968:	e004      	b.n	8008974 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fce7 	bl	8009340 <USBD_CtlError>
          break;
 8008972:	bf00      	nop
      }
      break;
 8008974:	e004      	b.n	8008980 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fce1 	bl	8009340 <USBD_CtlError>
      break;
 800897e:	bf00      	nop
  }

  return ret;
 8008980:	7bfb      	ldrb	r3, [r7, #15]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop

0800898c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089a2:	2b40      	cmp	r3, #64	; 0x40
 80089a4:	d005      	beq.n	80089b2 <USBD_StdItfReq+0x26>
 80089a6:	2b40      	cmp	r3, #64	; 0x40
 80089a8:	d82f      	bhi.n	8008a0a <USBD_StdItfReq+0x7e>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <USBD_StdItfReq+0x26>
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d12b      	bne.n	8008a0a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d81d      	bhi.n	80089fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	889b      	ldrh	r3, [r3, #4]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d813      	bhi.n	80089f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	88db      	ldrh	r3, [r3, #6]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d110      	bne.n	8008a06 <USBD_StdItfReq+0x7a>
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10d      	bne.n	8008a06 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fd56 	bl	800949c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80089f0:	e009      	b.n	8008a06 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fca3 	bl	8009340 <USBD_CtlError>
          break;
 80089fa:	e004      	b.n	8008a06 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fc9e 	bl	8009340 <USBD_CtlError>
          break;
 8008a04:	e000      	b.n	8008a08 <USBD_StdItfReq+0x7c>
          break;
 8008a06:	bf00      	nop
      }
      break;
 8008a08:	e004      	b.n	8008a14 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fc97 	bl	8009340 <USBD_CtlError>
      break;
 8008a12:	bf00      	nop
  }

  return ret;
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	889b      	ldrh	r3, [r3, #4]
 8008a30:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a3a:	2b40      	cmp	r3, #64	; 0x40
 8008a3c:	d007      	beq.n	8008a4e <USBD_StdEPReq+0x30>
 8008a3e:	2b40      	cmp	r3, #64	; 0x40
 8008a40:	f200 8145 	bhi.w	8008cce <USBD_StdEPReq+0x2b0>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00c      	beq.n	8008a62 <USBD_StdEPReq+0x44>
 8008a48:	2b20      	cmp	r3, #32
 8008a4a:	f040 8140 	bne.w	8008cce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	4798      	blx	r3
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a60:	e13a      	b.n	8008cd8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d007      	beq.n	8008a7a <USBD_StdEPReq+0x5c>
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	f300 8129 	bgt.w	8008cc2 <USBD_StdEPReq+0x2a4>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d07f      	beq.n	8008b74 <USBD_StdEPReq+0x156>
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d03c      	beq.n	8008af2 <USBD_StdEPReq+0xd4>
 8008a78:	e123      	b.n	8008cc2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d002      	beq.n	8008a8c <USBD_StdEPReq+0x6e>
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d016      	beq.n	8008ab8 <USBD_StdEPReq+0x9a>
 8008a8a:	e02c      	b.n	8008ae6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00d      	beq.n	8008aae <USBD_StdEPReq+0x90>
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	2b80      	cmp	r3, #128	; 0x80
 8008a96:	d00a      	beq.n	8008aae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f001 f89d 	bl	8009bdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aa2:	2180      	movs	r1, #128	; 0x80
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f001 f899 	bl	8009bdc <USBD_LL_StallEP>
 8008aaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008aac:	e020      	b.n	8008af0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fc45 	bl	8009340 <USBD_CtlError>
              break;
 8008ab6:	e01b      	b.n	8008af0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	885b      	ldrh	r3, [r3, #2]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10e      	bne.n	8008ade <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00b      	beq.n	8008ade <USBD_StdEPReq+0xc0>
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	2b80      	cmp	r3, #128	; 0x80
 8008aca:	d008      	beq.n	8008ade <USBD_StdEPReq+0xc0>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	88db      	ldrh	r3, [r3, #6]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d104      	bne.n	8008ade <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 f87f 	bl	8009bdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fcdc 	bl	800949c <USBD_CtlSendStatus>

              break;
 8008ae4:	e004      	b.n	8008af0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fc29 	bl	8009340 <USBD_CtlError>
              break;
 8008aee:	bf00      	nop
          }
          break;
 8008af0:	e0ec      	b.n	8008ccc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d002      	beq.n	8008b04 <USBD_StdEPReq+0xe6>
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d016      	beq.n	8008b30 <USBD_StdEPReq+0x112>
 8008b02:	e030      	b.n	8008b66 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00d      	beq.n	8008b26 <USBD_StdEPReq+0x108>
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	2b80      	cmp	r3, #128	; 0x80
 8008b0e:	d00a      	beq.n	8008b26 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 f861 	bl	8009bdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b1a:	2180      	movs	r1, #128	; 0x80
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 f85d 	bl	8009bdc <USBD_LL_StallEP>
 8008b22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b24:	e025      	b.n	8008b72 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fc09 	bl	8009340 <USBD_CtlError>
              break;
 8008b2e:	e020      	b.n	8008b72 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	885b      	ldrh	r3, [r3, #2]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d11b      	bne.n	8008b70 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d004      	beq.n	8008b4c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 f867 	bl	8009c1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fca5 	bl	800949c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	4798      	blx	r3
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008b64:	e004      	b.n	8008b70 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fbe9 	bl	8009340 <USBD_CtlError>
              break;
 8008b6e:	e000      	b.n	8008b72 <USBD_StdEPReq+0x154>
              break;
 8008b70:	bf00      	nop
          }
          break;
 8008b72:	e0ab      	b.n	8008ccc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d002      	beq.n	8008b86 <USBD_StdEPReq+0x168>
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d032      	beq.n	8008bea <USBD_StdEPReq+0x1cc>
 8008b84:	e097      	b.n	8008cb6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d007      	beq.n	8008b9c <USBD_StdEPReq+0x17e>
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	2b80      	cmp	r3, #128	; 0x80
 8008b90:	d004      	beq.n	8008b9c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fbd3 	bl	8009340 <USBD_CtlError>
                break;
 8008b9a:	e091      	b.n	8008cc0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da0b      	bge.n	8008bbc <USBD_StdEPReq+0x19e>
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	3310      	adds	r3, #16
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	3304      	adds	r3, #4
 8008bba:	e00b      	b.n	8008bd4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2202      	movs	r2, #2
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fc1d 	bl	8009422 <USBD_CtlSendData>
              break;
 8008be8:	e06a      	b.n	8008cc0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	da11      	bge.n	8008c16 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	f003 020f 	and.w	r2, r3, #15
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	440b      	add	r3, r1
 8008c04:	3324      	adds	r3, #36	; 0x24
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d117      	bne.n	8008c3c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fb96 	bl	8009340 <USBD_CtlError>
                  break;
 8008c14:	e054      	b.n	8008cc0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	f003 020f 	and.w	r2, r3, #15
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d104      	bne.n	8008c3c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fb83 	bl	8009340 <USBD_CtlError>
                  break;
 8008c3a:	e041      	b.n	8008cc0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	da0b      	bge.n	8008c5c <USBD_StdEPReq+0x23e>
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	3310      	adds	r3, #16
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	4413      	add	r3, r2
 8008c58:	3304      	adds	r3, #4
 8008c5a:	e00b      	b.n	8008c74 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c62:	4613      	mov	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	4413      	add	r3, r2
 8008c72:	3304      	adds	r3, #4
 8008c74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <USBD_StdEPReq+0x264>
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b80      	cmp	r3, #128	; 0x80
 8008c80:	d103      	bne.n	8008c8a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2200      	movs	r2, #0
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	e00e      	b.n	8008ca8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 ffe2 	bl	8009c58 <USBD_LL_IsStallEP>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	e002      	b.n	8008ca8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2202      	movs	r2, #2
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fbb7 	bl	8009422 <USBD_CtlSendData>
              break;
 8008cb4:	e004      	b.n	8008cc0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fb41 	bl	8009340 <USBD_CtlError>
              break;
 8008cbe:	bf00      	nop
          }
          break;
 8008cc0:	e004      	b.n	8008ccc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fb3b 	bl	8009340 <USBD_CtlError>
          break;
 8008cca:	bf00      	nop
      }
      break;
 8008ccc:	e004      	b.n	8008cd8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fb35 	bl	8009340 <USBD_CtlError>
      break;
 8008cd6:	bf00      	nop
  }

  return ret;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	885b      	ldrh	r3, [r3, #2]
 8008cfe:	0a1b      	lsrs	r3, r3, #8
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	2b06      	cmp	r3, #6
 8008d06:	f200 8128 	bhi.w	8008f5a <USBD_GetDescriptor+0x276>
 8008d0a:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <USBD_GetDescriptor+0x2c>)
 8008d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d10:	08008d2d 	.word	0x08008d2d
 8008d14:	08008d45 	.word	0x08008d45
 8008d18:	08008d85 	.word	0x08008d85
 8008d1c:	08008f5b 	.word	0x08008f5b
 8008d20:	08008f5b 	.word	0x08008f5b
 8008d24:	08008efb 	.word	0x08008efb
 8008d28:	08008f27 	.word	0x08008f27
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	7c12      	ldrb	r2, [r2, #16]
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	60f8      	str	r0, [r7, #12]
      break;
 8008d42:	e112      	b.n	8008f6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	7c1b      	ldrb	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10d      	bne.n	8008d68 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	f107 0208 	add.w	r2, r7, #8
 8008d58:	4610      	mov	r0, r2
 8008d5a:	4798      	blx	r3
 8008d5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	2202      	movs	r2, #2
 8008d64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d66:	e100      	b.n	8008f6a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d70:	f107 0208 	add.w	r2, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	2202      	movs	r2, #2
 8008d80:	701a      	strb	r2, [r3, #0]
      break;
 8008d82:	e0f2      	b.n	8008f6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	885b      	ldrh	r3, [r3, #2]
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	f200 80ac 	bhi.w	8008ee8 <USBD_GetDescriptor+0x204>
 8008d90:	a201      	add	r2, pc, #4	; (adr r2, 8008d98 <USBD_GetDescriptor+0xb4>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008db1 	.word	0x08008db1
 8008d9c:	08008de5 	.word	0x08008de5
 8008da0:	08008e19 	.word	0x08008e19
 8008da4:	08008e4d 	.word	0x08008e4d
 8008da8:	08008e81 	.word	0x08008e81
 8008dac:	08008eb5 	.word	0x08008eb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	7c12      	ldrb	r2, [r2, #16]
 8008dc8:	f107 0108 	add.w	r1, r7, #8
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
 8008dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dd2:	e091      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fab2 	bl	8009340 <USBD_CtlError>
            err++;
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	3301      	adds	r3, #1
 8008de0:	72fb      	strb	r3, [r7, #11]
          break;
 8008de2:	e089      	b.n	8008ef8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	7c12      	ldrb	r2, [r2, #16]
 8008dfc:	f107 0108 	add.w	r1, r7, #8
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
 8008e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e06:	e077      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa98 	bl	8009340 <USBD_CtlError>
            err++;
 8008e10:	7afb      	ldrb	r3, [r7, #11]
 8008e12:	3301      	adds	r3, #1
 8008e14:	72fb      	strb	r3, [r7, #11]
          break;
 8008e16:	e06f      	b.n	8008ef8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	7c12      	ldrb	r2, [r2, #16]
 8008e30:	f107 0108 	add.w	r1, r7, #8
 8008e34:	4610      	mov	r0, r2
 8008e36:	4798      	blx	r3
 8008e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e3a:	e05d      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa7e 	bl	8009340 <USBD_CtlError>
            err++;
 8008e44:	7afb      	ldrb	r3, [r7, #11]
 8008e46:	3301      	adds	r3, #1
 8008e48:	72fb      	strb	r3, [r7, #11]
          break;
 8008e4a:	e055      	b.n	8008ef8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00b      	beq.n	8008e70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	7c12      	ldrb	r2, [r2, #16]
 8008e64:	f107 0108 	add.w	r1, r7, #8
 8008e68:	4610      	mov	r0, r2
 8008e6a:	4798      	blx	r3
 8008e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e6e:	e043      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fa64 	bl	8009340 <USBD_CtlError>
            err++;
 8008e78:	7afb      	ldrb	r3, [r7, #11]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e7e:	e03b      	b.n	8008ef8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00b      	beq.n	8008ea4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	7c12      	ldrb	r2, [r2, #16]
 8008e98:	f107 0108 	add.w	r1, r7, #8
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4798      	blx	r3
 8008ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ea2:	e029      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa4a 	bl	8009340 <USBD_CtlError>
            err++;
 8008eac:	7afb      	ldrb	r3, [r7, #11]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8008eb2:	e021      	b.n	8008ef8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	7c12      	ldrb	r2, [r2, #16]
 8008ecc:	f107 0108 	add.w	r1, r7, #8
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ed6:	e00f      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa30 	bl	8009340 <USBD_CtlError>
            err++;
 8008ee0:	7afb      	ldrb	r3, [r7, #11]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ee6:	e007      	b.n	8008ef8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa28 	bl	8009340 <USBD_CtlError>
          err++;
 8008ef0:	7afb      	ldrb	r3, [r7, #11]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008ef6:	bf00      	nop
      }
      break;
 8008ef8:	e037      	b.n	8008f6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	7c1b      	ldrb	r3, [r3, #16]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d109      	bne.n	8008f16 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f0a:	f107 0208 	add.w	r2, r7, #8
 8008f0e:	4610      	mov	r0, r2
 8008f10:	4798      	blx	r3
 8008f12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f14:	e029      	b.n	8008f6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fa11 	bl	8009340 <USBD_CtlError>
        err++;
 8008f1e:	7afb      	ldrb	r3, [r7, #11]
 8008f20:	3301      	adds	r3, #1
 8008f22:	72fb      	strb	r3, [r7, #11]
      break;
 8008f24:	e021      	b.n	8008f6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7c1b      	ldrb	r3, [r3, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10d      	bne.n	8008f4a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	f107 0208 	add.w	r2, r7, #8
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	4798      	blx	r3
 8008f3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	2207      	movs	r2, #7
 8008f46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f48:	e00f      	b.n	8008f6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f9f7 	bl	8009340 <USBD_CtlError>
        err++;
 8008f52:	7afb      	ldrb	r3, [r7, #11]
 8008f54:	3301      	adds	r3, #1
 8008f56:	72fb      	strb	r3, [r7, #11]
      break;
 8008f58:	e007      	b.n	8008f6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f9ef 	bl	8009340 <USBD_CtlError>
      err++;
 8008f62:	7afb      	ldrb	r3, [r7, #11]
 8008f64:	3301      	adds	r3, #1
 8008f66:	72fb      	strb	r3, [r7, #11]
      break;
 8008f68:	bf00      	nop
  }

  if (err != 0U)
 8008f6a:	7afb      	ldrb	r3, [r7, #11]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d11e      	bne.n	8008fae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	88db      	ldrh	r3, [r3, #6]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d016      	beq.n	8008fa6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008f78:	893b      	ldrh	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00e      	beq.n	8008f9c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	88da      	ldrh	r2, [r3, #6]
 8008f82:	893b      	ldrh	r3, [r7, #8]
 8008f84:	4293      	cmp	r3, r2
 8008f86:	bf28      	it	cs
 8008f88:	4613      	movcs	r3, r2
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f8e:	893b      	ldrh	r3, [r7, #8]
 8008f90:	461a      	mov	r2, r3
 8008f92:	68f9      	ldr	r1, [r7, #12]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fa44 	bl	8009422 <USBD_CtlSendData>
 8008f9a:	e009      	b.n	8008fb0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f9ce 	bl	8009340 <USBD_CtlError>
 8008fa4:	e004      	b.n	8008fb0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fa78 	bl	800949c <USBD_CtlSendStatus>
 8008fac:	e000      	b.n	8008fb0 <USBD_GetDescriptor+0x2cc>
    return;
 8008fae:	bf00      	nop
  }
}
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop

08008fb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	889b      	ldrh	r3, [r3, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d131      	bne.n	800902e <USBD_SetAddress+0x76>
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	88db      	ldrh	r3, [r3, #6]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d12d      	bne.n	800902e <USBD_SetAddress+0x76>
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	885b      	ldrh	r3, [r3, #2]
 8008fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8008fd8:	d829      	bhi.n	800902e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	885b      	ldrh	r3, [r3, #2]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d104      	bne.n	8008ffc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f9a3 	bl	8009340 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ffa:	e01d      	b.n	8009038 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	7bfa      	ldrb	r2, [r7, #15]
 8009000:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fe51 	bl	8009cb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa44 	bl	800949c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2202      	movs	r2, #2
 800901e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009022:	e009      	b.n	8009038 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902c:	e004      	b.n	8009038 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f985 	bl	8009340 <USBD_CtlError>
  }
}
 8009036:	bf00      	nop
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	885b      	ldrh	r3, [r3, #2]
 8009052:	b2da      	uxtb	r2, r3
 8009054:	4b4c      	ldr	r3, [pc, #304]	; (8009188 <USBD_SetConfig+0x148>)
 8009056:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009058:	4b4b      	ldr	r3, [pc, #300]	; (8009188 <USBD_SetConfig+0x148>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d905      	bls.n	800906c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f96c 	bl	8009340 <USBD_CtlError>
    return USBD_FAIL;
 8009068:	2303      	movs	r3, #3
 800906a:	e088      	b.n	800917e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b02      	cmp	r3, #2
 8009076:	d002      	beq.n	800907e <USBD_SetConfig+0x3e>
 8009078:	2b03      	cmp	r3, #3
 800907a:	d025      	beq.n	80090c8 <USBD_SetConfig+0x88>
 800907c:	e071      	b.n	8009162 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800907e:	4b42      	ldr	r3, [pc, #264]	; (8009188 <USBD_SetConfig+0x148>)
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01c      	beq.n	80090c0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009086:	4b40      	ldr	r3, [pc, #256]	; (8009188 <USBD_SetConfig+0x148>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009090:	4b3d      	ldr	r3, [pc, #244]	; (8009188 <USBD_SetConfig+0x148>)
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff f949 	bl	800832e <USBD_SetClassConfig>
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d004      	beq.n	80090b0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f949 	bl	8009340 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090ae:	e065      	b.n	800917c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f9f3 	bl	800949c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2203      	movs	r2, #3
 80090ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80090be:	e05d      	b.n	800917c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f9eb 	bl	800949c <USBD_CtlSendStatus>
      break;
 80090c6:	e059      	b.n	800917c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80090c8:	4b2f      	ldr	r3, [pc, #188]	; (8009188 <USBD_SetConfig+0x148>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d112      	bne.n	80090f6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80090d8:	4b2b      	ldr	r3, [pc, #172]	; (8009188 <USBD_SetConfig+0x148>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090e2:	4b29      	ldr	r3, [pc, #164]	; (8009188 <USBD_SetConfig+0x148>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff f93c 	bl	8008366 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f9d4 	bl	800949c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090f4:	e042      	b.n	800917c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80090f6:	4b24      	ldr	r3, [pc, #144]	; (8009188 <USBD_SetConfig+0x148>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	429a      	cmp	r2, r3
 8009102:	d02a      	beq.n	800915a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff f92a 	bl	8008366 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009112:	4b1d      	ldr	r3, [pc, #116]	; (8009188 <USBD_SetConfig+0x148>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800911c:	4b1a      	ldr	r3, [pc, #104]	; (8009188 <USBD_SetConfig+0x148>)
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff f903 	bl	800832e <USBD_SetClassConfig>
 8009128:	4603      	mov	r3, r0
 800912a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00f      	beq.n	8009152 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f903 	bl	8009340 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	b2db      	uxtb	r3, r3
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7ff f90f 	bl	8008366 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009150:	e014      	b.n	800917c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f9a2 	bl	800949c <USBD_CtlSendStatus>
      break;
 8009158:	e010      	b.n	800917c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f99e 	bl	800949c <USBD_CtlSendStatus>
      break;
 8009160:	e00c      	b.n	800917c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f8eb 	bl	8009340 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800916a:	4b07      	ldr	r3, [pc, #28]	; (8009188 <USBD_SetConfig+0x148>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff f8f8 	bl	8008366 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009176:	2303      	movs	r3, #3
 8009178:	73fb      	strb	r3, [r7, #15]
      break;
 800917a:	bf00      	nop
  }

  return ret;
 800917c:	7bfb      	ldrb	r3, [r7, #15]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	200006b0 	.word	0x200006b0

0800918c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	88db      	ldrh	r3, [r3, #6]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d004      	beq.n	80091a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f8cd 	bl	8009340 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091a6:	e023      	b.n	80091f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	dc02      	bgt.n	80091ba <USBD_GetConfig+0x2e>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	dc03      	bgt.n	80091c0 <USBD_GetConfig+0x34>
 80091b8:	e015      	b.n	80091e6 <USBD_GetConfig+0x5a>
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d00b      	beq.n	80091d6 <USBD_GetConfig+0x4a>
 80091be:	e012      	b.n	80091e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3308      	adds	r3, #8
 80091ca:	2201      	movs	r2, #1
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f927 	bl	8009422 <USBD_CtlSendData>
        break;
 80091d4:	e00c      	b.n	80091f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3304      	adds	r3, #4
 80091da:	2201      	movs	r2, #1
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f91f 	bl	8009422 <USBD_CtlSendData>
        break;
 80091e4:	e004      	b.n	80091f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f8a9 	bl	8009340 <USBD_CtlError>
        break;
 80091ee:	bf00      	nop
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009208:	b2db      	uxtb	r3, r3
 800920a:	3b01      	subs	r3, #1
 800920c:	2b02      	cmp	r3, #2
 800920e:	d81e      	bhi.n	800924e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	88db      	ldrh	r3, [r3, #6]
 8009214:	2b02      	cmp	r3, #2
 8009216:	d004      	beq.n	8009222 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f890 	bl	8009340 <USBD_CtlError>
        break;
 8009220:	e01a      	b.n	8009258 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f043 0202 	orr.w	r2, r3, #2
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	330c      	adds	r3, #12
 8009242:	2202      	movs	r2, #2
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f8eb 	bl	8009422 <USBD_CtlSendData>
      break;
 800924c:	e004      	b.n	8009258 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f875 	bl	8009340 <USBD_CtlError>
      break;
 8009256:	bf00      	nop
  }
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	885b      	ldrh	r3, [r3, #2]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d106      	bne.n	8009280 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f90e 	bl	800949c <USBD_CtlSendStatus>
  }
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009298:	b2db      	uxtb	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	2b02      	cmp	r3, #2
 800929e:	d80b      	bhi.n	80092b8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	885b      	ldrh	r3, [r3, #2]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d10c      	bne.n	80092c2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f8f3 	bl	800949c <USBD_CtlSendStatus>
      }
      break;
 80092b6:	e004      	b.n	80092c2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f840 	bl	8009340 <USBD_CtlError>
      break;
 80092c0:	e000      	b.n	80092c4 <USBD_ClrFeature+0x3c>
      break;
 80092c2:	bf00      	nop
  }
}
 80092c4:	bf00      	nop
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	781a      	ldrb	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	781a      	ldrb	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3301      	adds	r3, #1
 80092f4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f7ff fabc 	bl	8008874 <SWAPBYTE>
 80092fc:	4603      	mov	r3, r0
 80092fe:	461a      	mov	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3301      	adds	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7ff faaf 	bl	8008874 <SWAPBYTE>
 8009316:	4603      	mov	r3, r0
 8009318:	461a      	mov	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3301      	adds	r3, #1
 8009322:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3301      	adds	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff faa2 	bl	8008874 <SWAPBYTE>
 8009330:	4603      	mov	r3, r0
 8009332:	461a      	mov	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	80da      	strh	r2, [r3, #6]
}
 8009338:	bf00      	nop
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800934a:	2180      	movs	r1, #128	; 0x80
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fc45 	bl	8009bdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009352:	2100      	movs	r1, #0
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fc41 	bl	8009bdc <USBD_LL_StallEP>
}
 800935a:	bf00      	nop
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b086      	sub	sp, #24
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d036      	beq.n	80093e6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800937c:	6938      	ldr	r0, [r7, #16]
 800937e:	f000 f836 	bl	80093ee <USBD_GetLen>
 8009382:	4603      	mov	r3, r0
 8009384:	3301      	adds	r3, #1
 8009386:	b29b      	uxth	r3, r3
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	4413      	add	r3, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	7812      	ldrb	r2, [r2, #0]
 800939a:	701a      	strb	r2, [r3, #0]
  idx++;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
 800939e:	3301      	adds	r3, #1
 80093a0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	4413      	add	r3, r2
 80093a8:	2203      	movs	r2, #3
 80093aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	3301      	adds	r3, #1
 80093b0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093b2:	e013      	b.n	80093dc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	4413      	add	r3, r2
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	7812      	ldrb	r2, [r2, #0]
 80093be:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	3301      	adds	r3, #1
 80093c4:	613b      	str	r3, [r7, #16]
    idx++;
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	3301      	adds	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	4413      	add	r3, r2
 80093d2:	2200      	movs	r2, #0
 80093d4:	701a      	strb	r2, [r3, #0]
    idx++;
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	3301      	adds	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e7      	bne.n	80093b4 <USBD_GetString+0x52>
 80093e4:	e000      	b.n	80093e8 <USBD_GetString+0x86>
    return;
 80093e6:	bf00      	nop
  }
}
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b085      	sub	sp, #20
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80093fe:	e005      	b.n	800940c <USBD_GetLen+0x1e>
  {
    len++;
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	3301      	adds	r3, #1
 8009404:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	3301      	adds	r3, #1
 800940a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1f5      	bne.n	8009400 <USBD_GetLen+0x12>
  }

  return len;
 8009414:	7bfb      	ldrb	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2202      	movs	r2, #2
 8009432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	2100      	movs	r1, #0
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 fc50 	bl	8009cee <USBD_LL_Transmit>

  return USBD_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	2100      	movs	r1, #0
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 fc3f 	bl	8009cee <USBD_LL_Transmit>

  return USBD_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	2100      	movs	r1, #0
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fc4f 	bl	8009d30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2204      	movs	r2, #4
 80094a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094ac:	2300      	movs	r3, #0
 80094ae:	2200      	movs	r2, #0
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fc1b 	bl	8009cee <USBD_LL_Transmit>

  return USBD_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2205      	movs	r2, #5
 80094ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094d2:	2300      	movs	r3, #0
 80094d4:	2200      	movs	r2, #0
 80094d6:	2100      	movs	r1, #0
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fc29 	bl	8009d30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 80094ec:	2200      	movs	r2, #0
 80094ee:	4912      	ldr	r1, [pc, #72]	; (8009538 <MX_USB_DEVICE_Init+0x50>)
 80094f0:	4812      	ldr	r0, [pc, #72]	; (800953c <MX_USB_DEVICE_Init+0x54>)
 80094f2:	f7fe feae 	bl	8008252 <USBD_Init>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 80094fc:	f7f8 fa29 	bl	8001952 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 8009500:	490f      	ldr	r1, [pc, #60]	; (8009540 <MX_USB_DEVICE_Init+0x58>)
 8009502:	480e      	ldr	r0, [pc, #56]	; (800953c <MX_USB_DEVICE_Init+0x54>)
 8009504:	f7fe fed5 	bl	80082b2 <USBD_RegisterClass>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800950e:	f7f8 fa20 	bl	8001952 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 8009512:	490c      	ldr	r1, [pc, #48]	; (8009544 <MX_USB_DEVICE_Init+0x5c>)
 8009514:	4809      	ldr	r0, [pc, #36]	; (800953c <MX_USB_DEVICE_Init+0x54>)
 8009516:	f7fe fe85 	bl	8008224 <USBD_Midi_RegisterInterface>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 8009520:	f7f8 fa17 	bl	8001952 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009524:	4805      	ldr	r0, [pc, #20]	; (800953c <MX_USB_DEVICE_Init+0x54>)
 8009526:	f7fe feeb 	bl	8008300 <USBD_Start>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 8009530:	f7f8 fa0f 	bl	8001952 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009534:	bf00      	nop
 8009536:	bd80      	pop	{r7, pc}
 8009538:	200000c8 	.word	0x200000c8
 800953c:	20002434 	.word	0x20002434
 8009540:	2000001c 	.word	0x2000001c
 8009544:	20000118 	.word	0x20000118

08009548 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	71fb      	strb	r3, [r7, #7]
 8009552:	460b      	mov	r3, r1
 8009554:	71bb      	strb	r3, [r7, #6]
 8009556:	4613      	mov	r3, r2
 8009558:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 800955a:	230b      	movs	r3, #11
 800955c:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8009564:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 800956e:	79bb      	ldrb	r3, [r7, #6]
 8009570:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 8009572:	797b      	ldrb	r3, [r7, #5]
 8009574:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 8009576:	f107 0208 	add.w	r2, r7, #8
 800957a:	2304      	movs	r3, #4
 800957c:	2181      	movs	r1, #129	; 0x81
 800957e:	4810      	ldr	r0, [pc, #64]	; (80095c0 <MX_USB_Send_Midi+0x78>)
 8009580:	f000 fbb5 	bl	8009cee <USBD_LL_Transmit>
 8009584:	4603      	mov	r3, r0
 8009586:	2b03      	cmp	r3, #3
 8009588:	d00a      	beq.n	80095a0 <MX_USB_Send_Midi+0x58>
 800958a:	2b03      	cmp	r3, #3
 800958c:	dc10      	bgt.n	80095b0 <MX_USB_Send_Midi+0x68>
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <MX_USB_Send_Midi+0x50>
 8009592:	2b01      	cmp	r3, #1
 8009594:	d008      	beq.n	80095a8 <MX_USB_Send_Midi+0x60>
 8009596:	e00b      	b.n	80095b0 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 8009598:	480a      	ldr	r0, [pc, #40]	; (80095c4 <MX_USB_Send_Midi+0x7c>)
 800959a:	f000 fd89 	bl	800a0b0 <puts>
        break;
 800959e:	e00b      	b.n	80095b8 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 80095a0:	4809      	ldr	r0, [pc, #36]	; (80095c8 <MX_USB_Send_Midi+0x80>)
 80095a2:	f000 fd85 	bl	800a0b0 <puts>
        break;
 80095a6:	e007      	b.n	80095b8 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 80095a8:	4808      	ldr	r0, [pc, #32]	; (80095cc <MX_USB_Send_Midi+0x84>)
 80095aa:	f000 fd81 	bl	800a0b0 <puts>
        break;
 80095ae:	e003      	b.n	80095b8 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 80095b0:	4807      	ldr	r0, [pc, #28]	; (80095d0 <MX_USB_Send_Midi+0x88>)
 80095b2:	f000 fd7d 	bl	800a0b0 <puts>
    }
}
 80095b6:	bf00      	nop
 80095b8:	bf00      	nop
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20002434 	.word	0x20002434
 80095c4:	0800b108 	.word	0x0800b108
 80095c8:	0800b10c 	.word	0x0800b10c
 80095cc:	0800b11c 	.word	0x0800b11c
 80095d0:	0800b12c 	.word	0x0800b12c

080095d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	6039      	str	r1, [r7, #0]
 80095de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	2212      	movs	r2, #18
 80095e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095e6:	4b03      	ldr	r3, [pc, #12]	; (80095f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	200000e4 	.word	0x200000e4

080095f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	6039      	str	r1, [r7, #0]
 8009602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	2204      	movs	r2, #4
 8009608:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800960a:	4b03      	ldr	r3, [pc, #12]	; (8009618 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800960c:	4618      	mov	r0, r3
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	200000f8 	.word	0x200000f8

0800961c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	6039      	str	r1, [r7, #0]
 8009626:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d105      	bne.n	800963a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	4907      	ldr	r1, [pc, #28]	; (8009650 <USBD_FS_ProductStrDescriptor+0x34>)
 8009632:	4808      	ldr	r0, [pc, #32]	; (8009654 <USBD_FS_ProductStrDescriptor+0x38>)
 8009634:	f7ff fe95 	bl	8009362 <USBD_GetString>
 8009638:	e004      	b.n	8009644 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	4904      	ldr	r1, [pc, #16]	; (8009650 <USBD_FS_ProductStrDescriptor+0x34>)
 800963e:	4805      	ldr	r0, [pc, #20]	; (8009654 <USBD_FS_ProductStrDescriptor+0x38>)
 8009640:	f7ff fe8f 	bl	8009362 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009644:	4b02      	ldr	r3, [pc, #8]	; (8009650 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	20002704 	.word	0x20002704
 8009654:	0800b148 	.word	0x0800b148

08009658 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	6039      	str	r1, [r7, #0]
 8009662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	4904      	ldr	r1, [pc, #16]	; (8009678 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009668:	4804      	ldr	r0, [pc, #16]	; (800967c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800966a:	f7ff fe7a 	bl	8009362 <USBD_GetString>
  return USBD_StrDesc;
 800966e:	4b02      	ldr	r3, [pc, #8]	; (8009678 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	20002704 	.word	0x20002704
 800967c:	0800b15c 	.word	0x0800b15c

08009680 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	6039      	str	r1, [r7, #0]
 800968a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	221a      	movs	r2, #26
 8009690:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009692:	f000 f843 	bl	800971c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009696:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	200000fc 	.word	0x200000fc

080096a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	4603      	mov	r3, r0
 80096ac:	6039      	str	r1, [r7, #0]
 80096ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d105      	bne.n	80096c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	4907      	ldr	r1, [pc, #28]	; (80096d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096ba:	4808      	ldr	r0, [pc, #32]	; (80096dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80096bc:	f7ff fe51 	bl	8009362 <USBD_GetString>
 80096c0:	e004      	b.n	80096cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	4904      	ldr	r1, [pc, #16]	; (80096d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096c6:	4805      	ldr	r0, [pc, #20]	; (80096dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80096c8:	f7ff fe4b 	bl	8009362 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096cc:	4b02      	ldr	r3, [pc, #8]	; (80096d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20002704 	.word	0x20002704
 80096dc:	0800b170 	.word	0x0800b170

080096e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	6039      	str	r1, [r7, #0]
 80096ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d105      	bne.n	80096fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	4907      	ldr	r1, [pc, #28]	; (8009714 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096f6:	4808      	ldr	r0, [pc, #32]	; (8009718 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096f8:	f7ff fe33 	bl	8009362 <USBD_GetString>
 80096fc:	e004      	b.n	8009708 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	4904      	ldr	r1, [pc, #16]	; (8009714 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009702:	4805      	ldr	r0, [pc, #20]	; (8009718 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009704:	f7ff fe2d 	bl	8009362 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009708:	4b02      	ldr	r3, [pc, #8]	; (8009714 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20002704 	.word	0x20002704
 8009718:	0800b180 	.word	0x0800b180

0800971c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009722:	4b0f      	ldr	r3, [pc, #60]	; (8009760 <Get_SerialNum+0x44>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009728:	4b0e      	ldr	r3, [pc, #56]	; (8009764 <Get_SerialNum+0x48>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800972e:	4b0e      	ldr	r3, [pc, #56]	; (8009768 <Get_SerialNum+0x4c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4413      	add	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d009      	beq.n	8009756 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009742:	2208      	movs	r2, #8
 8009744:	4909      	ldr	r1, [pc, #36]	; (800976c <Get_SerialNum+0x50>)
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 f814 	bl	8009774 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800974c:	2204      	movs	r2, #4
 800974e:	4908      	ldr	r1, [pc, #32]	; (8009770 <Get_SerialNum+0x54>)
 8009750:	68b8      	ldr	r0, [r7, #8]
 8009752:	f000 f80f 	bl	8009774 <IntToUnicode>
  }
}
 8009756:	bf00      	nop
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	1fff7a10 	.word	0x1fff7a10
 8009764:	1fff7a14 	.word	0x1fff7a14
 8009768:	1fff7a18 	.word	0x1fff7a18
 800976c:	200000fe 	.word	0x200000fe
 8009770:	2000010e 	.word	0x2000010e

08009774 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	4613      	mov	r3, r2
 8009780:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009786:	2300      	movs	r3, #0
 8009788:	75fb      	strb	r3, [r7, #23]
 800978a:	e027      	b.n	80097dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	0f1b      	lsrs	r3, r3, #28
 8009790:	2b09      	cmp	r3, #9
 8009792:	d80b      	bhi.n	80097ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	0f1b      	lsrs	r3, r3, #28
 8009798:	b2da      	uxtb	r2, r3
 800979a:	7dfb      	ldrb	r3, [r7, #23]
 800979c:	005b      	lsls	r3, r3, #1
 800979e:	4619      	mov	r1, r3
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	440b      	add	r3, r1
 80097a4:	3230      	adds	r2, #48	; 0x30
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	701a      	strb	r2, [r3, #0]
 80097aa:	e00a      	b.n	80097c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	0f1b      	lsrs	r3, r3, #28
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	4619      	mov	r1, r3
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	440b      	add	r3, r1
 80097bc:	3237      	adds	r2, #55	; 0x37
 80097be:	b2d2      	uxtb	r2, r2
 80097c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	3301      	adds	r3, #1
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	4413      	add	r3, r2
 80097d2:	2200      	movs	r2, #0
 80097d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
 80097d8:	3301      	adds	r3, #1
 80097da:	75fb      	strb	r3, [r7, #23]
 80097dc:	7dfa      	ldrb	r2, [r7, #23]
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d3d3      	bcc.n	800978c <IntToUnicode+0x18>
  }
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop
 80097e8:	371c      	adds	r7, #28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
	...

0800980c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08a      	sub	sp, #40	; 0x28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009814:	f107 0314 	add.w	r3, r7, #20
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	605a      	str	r2, [r3, #4]
 800981e:	609a      	str	r2, [r3, #8]
 8009820:	60da      	str	r2, [r3, #12]
 8009822:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800982c:	d13a      	bne.n	80098a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800982e:	2300      	movs	r3, #0
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	4b1e      	ldr	r3, [pc, #120]	; (80098ac <HAL_PCD_MspInit+0xa0>)
 8009834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009836:	4a1d      	ldr	r2, [pc, #116]	; (80098ac <HAL_PCD_MspInit+0xa0>)
 8009838:	f043 0301 	orr.w	r3, r3, #1
 800983c:	6313      	str	r3, [r2, #48]	; 0x30
 800983e:	4b1b      	ldr	r3, [pc, #108]	; (80098ac <HAL_PCD_MspInit+0xa0>)
 8009840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	613b      	str	r3, [r7, #16]
 8009848:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800984a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800984e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009850:	2302      	movs	r3, #2
 8009852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009854:	2300      	movs	r3, #0
 8009856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009858:	2300      	movs	r3, #0
 800985a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800985c:	230a      	movs	r3, #10
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009860:	f107 0314 	add.w	r3, r7, #20
 8009864:	4619      	mov	r1, r3
 8009866:	4812      	ldr	r0, [pc, #72]	; (80098b0 <HAL_PCD_MspInit+0xa4>)
 8009868:	f7fa f9d0 	bl	8003c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800986c:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <HAL_PCD_MspInit+0xa0>)
 800986e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009870:	4a0e      	ldr	r2, [pc, #56]	; (80098ac <HAL_PCD_MspInit+0xa0>)
 8009872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009876:	6353      	str	r3, [r2, #52]	; 0x34
 8009878:	2300      	movs	r3, #0
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	4b0b      	ldr	r3, [pc, #44]	; (80098ac <HAL_PCD_MspInit+0xa0>)
 800987e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009880:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <HAL_PCD_MspInit+0xa0>)
 8009882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009886:	6453      	str	r3, [r2, #68]	; 0x44
 8009888:	4b08      	ldr	r3, [pc, #32]	; (80098ac <HAL_PCD_MspInit+0xa0>)
 800988a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800988c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009894:	2200      	movs	r2, #0
 8009896:	2100      	movs	r1, #0
 8009898:	2043      	movs	r0, #67	; 0x43
 800989a:	f7f9 fda0 	bl	80033de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800989e:	2043      	movs	r0, #67	; 0x43
 80098a0:	f7f9 fdb9 	bl	8003416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098a4:	bf00      	nop
 80098a6:	3728      	adds	r7, #40	; 0x28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	40023800 	.word	0x40023800
 80098b0:	40020000 	.word	0x40020000

080098b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80098c8:	4619      	mov	r1, r3
 80098ca:	4610      	mov	r0, r2
 80098cc:	f7fe fd63 	bl	8008396 <USBD_LL_SetupStage>
}
 80098d0:	bf00      	nop
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80098ea:	78fa      	ldrb	r2, [r7, #3]
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	440b      	add	r3, r1
 80098f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	4619      	mov	r1, r3
 8009902:	f7fe fd9d 	bl	8008440 <USBD_LL_DataOutStage>
}
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009920:	78fa      	ldrb	r2, [r7, #3]
 8009922:	6879      	ldr	r1, [r7, #4]
 8009924:	4613      	mov	r3, r2
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	1a9b      	subs	r3, r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	440b      	add	r3, r1
 800992e:	3348      	adds	r3, #72	; 0x48
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	78fb      	ldrb	r3, [r7, #3]
 8009934:	4619      	mov	r1, r3
 8009936:	f7fe fde6 	bl	8008506 <USBD_LL_DataInStage>
}
 800993a:	bf00      	nop
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe fefa 	bl	800874a <USBD_LL_SOF>
}
 8009956:	bf00      	nop
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009966:	2301      	movs	r3, #1
 8009968:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	2b02      	cmp	r3, #2
 8009970:	d001      	beq.n	8009976 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009972:	f7f7 ffee 	bl	8001952 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800997c:	7bfa      	ldrb	r2, [r7, #15]
 800997e:	4611      	mov	r1, r2
 8009980:	4618      	mov	r0, r3
 8009982:	f7fe fea4 	bl	80086ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe fe50 	bl	8008632 <USBD_LL_Reset>
}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fe9f 	bl	80086ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099c2:	f043 0301 	orr.w	r3, r3, #1
 80099c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d005      	beq.n	80099dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099d0:	4b04      	ldr	r3, [pc, #16]	; (80099e4 <HAL_PCD_SuspendCallback+0x48>)
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	4a03      	ldr	r2, [pc, #12]	; (80099e4 <HAL_PCD_SuspendCallback+0x48>)
 80099d6:	f043 0306 	orr.w	r3, r3, #6
 80099da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	e000ed00 	.word	0xe000ed00

080099e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe fe8f 	bl	800871a <USBD_LL_Resume>
}
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a16:	78fa      	ldrb	r2, [r7, #3]
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fedd 	bl	80087da <USBD_LL_IsoOUTIncomplete>
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	460b      	mov	r3, r1
 8009a32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a3a:	78fa      	ldrb	r2, [r7, #3]
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fea5 	bl	800878e <USBD_LL_IsoINIncomplete>
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fee3 	bl	8008826 <USBD_LL_DevConnected>
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fee0 	bl	800883c <USBD_LL_DevDisconnected>
}
 8009a7c:	bf00      	nop
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d13c      	bne.n	8009b0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a94:	4a20      	ldr	r2, [pc, #128]	; (8009b18 <USBD_LL_Init+0x94>)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <USBD_LL_Init+0x94>)
 8009aa0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009aa4:	4b1c      	ldr	r3, [pc, #112]	; (8009b18 <USBD_LL_Init+0x94>)
 8009aa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009aaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009aac:	4b1a      	ldr	r3, [pc, #104]	; (8009b18 <USBD_LL_Init+0x94>)
 8009aae:	2204      	movs	r2, #4
 8009ab0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ab2:	4b19      	ldr	r3, [pc, #100]	; (8009b18 <USBD_LL_Init+0x94>)
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ab8:	4b17      	ldr	r3, [pc, #92]	; (8009b18 <USBD_LL_Init+0x94>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009abe:	4b16      	ldr	r3, [pc, #88]	; (8009b18 <USBD_LL_Init+0x94>)
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ac4:	4b14      	ldr	r3, [pc, #80]	; (8009b18 <USBD_LL_Init+0x94>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009aca:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <USBD_LL_Init+0x94>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ad0:	4b11      	ldr	r3, [pc, #68]	; (8009b18 <USBD_LL_Init+0x94>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ad6:	4b10      	ldr	r3, [pc, #64]	; (8009b18 <USBD_LL_Init+0x94>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009adc:	4b0e      	ldr	r3, [pc, #56]	; (8009b18 <USBD_LL_Init+0x94>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ae2:	480d      	ldr	r0, [pc, #52]	; (8009b18 <USBD_LL_Init+0x94>)
 8009ae4:	f7fa fff1 	bl	8004aca <HAL_PCD_Init>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009aee:	f7f7 ff30 	bl	8001952 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009af2:	2180      	movs	r1, #128	; 0x80
 8009af4:	4808      	ldr	r0, [pc, #32]	; (8009b18 <USBD_LL_Init+0x94>)
 8009af6:	f7fc f94e 	bl	8005d96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009afa:	2240      	movs	r2, #64	; 0x40
 8009afc:	2100      	movs	r1, #0
 8009afe:	4806      	ldr	r0, [pc, #24]	; (8009b18 <USBD_LL_Init+0x94>)
 8009b00:	f7fc f902 	bl	8005d08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b04:	2280      	movs	r2, #128	; 0x80
 8009b06:	2101      	movs	r1, #1
 8009b08:	4803      	ldr	r0, [pc, #12]	; (8009b18 <USBD_LL_Init+0x94>)
 8009b0a:	f7fc f8fd 	bl	8005d08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	20002904 	.word	0x20002904

08009b1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fb f8e6 	bl	8004d04 <HAL_PCD_Start>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f938 	bl	8009db4 <USBD_Get_USB_Status>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	4608      	mov	r0, r1
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	461a      	mov	r2, r3
 8009b60:	4603      	mov	r3, r0
 8009b62:	70fb      	strb	r3, [r7, #3]
 8009b64:	460b      	mov	r3, r1
 8009b66:	70bb      	strb	r3, [r7, #2]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b7a:	78bb      	ldrb	r3, [r7, #2]
 8009b7c:	883a      	ldrh	r2, [r7, #0]
 8009b7e:	78f9      	ldrb	r1, [r7, #3]
 8009b80:	f7fb fcca 	bl	8005518 <HAL_PCD_EP_Open>
 8009b84:	4603      	mov	r3, r0
 8009b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f912 	bl	8009db4 <USBD_Get_USB_Status>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bb8:	78fa      	ldrb	r2, [r7, #3]
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fb fd13 	bl	80055e8 <HAL_PCD_EP_Close>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 f8f3 	bl	8009db4 <USBD_Get_USB_Status>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bf6:	78fa      	ldrb	r2, [r7, #3]
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fb fdeb 	bl	80057d6 <HAL_PCD_EP_SetStall>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f8d4 	bl	8009db4 <USBD_Get_USB_Status>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b084      	sub	sp, #16
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	460b      	mov	r3, r1
 8009c24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c34:	78fa      	ldrb	r2, [r7, #3]
 8009c36:	4611      	mov	r1, r2
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fb fe30 	bl	800589e <HAL_PCD_EP_ClrStall>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 f8b5 	bl	8009db4 <USBD_Get_USB_Status>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da0b      	bge.n	8009c8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c7a:	68f9      	ldr	r1, [r7, #12]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	1a9b      	subs	r3, r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	440b      	add	r3, r1
 8009c86:	333e      	adds	r3, #62	; 0x3e
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	e00b      	b.n	8009ca4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c92:	68f9      	ldr	r1, [r7, #12]
 8009c94:	4613      	mov	r3, r2
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	1a9b      	subs	r3, r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	440b      	add	r3, r1
 8009c9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009ca2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cca:	78fa      	ldrb	r2, [r7, #3]
 8009ccc:	4611      	mov	r1, r2
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fb fbfd 	bl	80054ce <HAL_PCD_SetAddress>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 f86a 	bl	8009db4 <USBD_Get_USB_Status>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b086      	sub	sp, #24
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	603b      	str	r3, [r7, #0]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d0c:	7af9      	ldrb	r1, [r7, #11]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	f7fb fd16 	bl	8005742 <HAL_PCD_EP_Transmit>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 f849 	bl	8009db4 <USBD_Get_USB_Status>
 8009d22:	4603      	mov	r3, r0
 8009d24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d26:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3718      	adds	r7, #24
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	607a      	str	r2, [r7, #4]
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d4e:	7af9      	ldrb	r1, [r7, #11]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	f7fb fc92 	bl	800567c <HAL_PCD_EP_Receive>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 f828 	bl	8009db4 <USBD_Get_USB_Status>
 8009d64:	4603      	mov	r3, r0
 8009d66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d68:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b082      	sub	sp, #8
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d84:	78fa      	ldrb	r2, [r7, #3]
 8009d86:	4611      	mov	r1, r2
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fb fcc2 	bl	8005712 <HAL_PCD_EP_GetRxCount>
 8009d8e:	4603      	mov	r3, r0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009da0:	4b03      	ldr	r3, [pc, #12]	; (8009db0 <USBD_static_malloc+0x18>)
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	200006b4 	.word	0x200006b4

08009db4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	4603      	mov	r3, r0
 8009dbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009dc2:	79fb      	ldrb	r3, [r7, #7]
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d817      	bhi.n	8009df8 <USBD_Get_USB_Status+0x44>
 8009dc8:	a201      	add	r2, pc, #4	; (adr r2, 8009dd0 <USBD_Get_USB_Status+0x1c>)
 8009dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dce:	bf00      	nop
 8009dd0:	08009de1 	.word	0x08009de1
 8009dd4:	08009de7 	.word	0x08009de7
 8009dd8:	08009ded 	.word	0x08009ded
 8009ddc:	08009df3 	.word	0x08009df3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
    break;
 8009de4:	e00b      	b.n	8009dfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009de6:	2303      	movs	r3, #3
 8009de8:	73fb      	strb	r3, [r7, #15]
    break;
 8009dea:	e008      	b.n	8009dfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009dec:	2301      	movs	r3, #1
 8009dee:	73fb      	strb	r3, [r7, #15]
    break;
 8009df0:	e005      	b.n	8009dfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009df2:	2303      	movs	r3, #3
 8009df4:	73fb      	strb	r3, [r7, #15]
    break;
 8009df6:	e002      	b.n	8009dfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009dfc:	bf00      	nop
  }
  return usb_status;
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <__errno>:
 8009e0c:	4b01      	ldr	r3, [pc, #4]	; (8009e14 <__errno+0x8>)
 8009e0e:	6818      	ldr	r0, [r3, #0]
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	2000011c 	.word	0x2000011c

08009e18 <__libc_init_array>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	4d0d      	ldr	r5, [pc, #52]	; (8009e50 <__libc_init_array+0x38>)
 8009e1c:	4c0d      	ldr	r4, [pc, #52]	; (8009e54 <__libc_init_array+0x3c>)
 8009e1e:	1b64      	subs	r4, r4, r5
 8009e20:	10a4      	asrs	r4, r4, #2
 8009e22:	2600      	movs	r6, #0
 8009e24:	42a6      	cmp	r6, r4
 8009e26:	d109      	bne.n	8009e3c <__libc_init_array+0x24>
 8009e28:	4d0b      	ldr	r5, [pc, #44]	; (8009e58 <__libc_init_array+0x40>)
 8009e2a:	4c0c      	ldr	r4, [pc, #48]	; (8009e5c <__libc_init_array+0x44>)
 8009e2c:	f001 f87c 	bl	800af28 <_init>
 8009e30:	1b64      	subs	r4, r4, r5
 8009e32:	10a4      	asrs	r4, r4, #2
 8009e34:	2600      	movs	r6, #0
 8009e36:	42a6      	cmp	r6, r4
 8009e38:	d105      	bne.n	8009e46 <__libc_init_array+0x2e>
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e40:	4798      	blx	r3
 8009e42:	3601      	adds	r6, #1
 8009e44:	e7ee      	b.n	8009e24 <__libc_init_array+0xc>
 8009e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e4a:	4798      	blx	r3
 8009e4c:	3601      	adds	r6, #1
 8009e4e:	e7f2      	b.n	8009e36 <__libc_init_array+0x1e>
 8009e50:	0800c4e0 	.word	0x0800c4e0
 8009e54:	0800c4e0 	.word	0x0800c4e0
 8009e58:	0800c4e0 	.word	0x0800c4e0
 8009e5c:	0800c4e4 	.word	0x0800c4e4

08009e60 <malloc>:
 8009e60:	4b02      	ldr	r3, [pc, #8]	; (8009e6c <malloc+0xc>)
 8009e62:	4601      	mov	r1, r0
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	f000 b85b 	b.w	8009f20 <_malloc_r>
 8009e6a:	bf00      	nop
 8009e6c:	2000011c 	.word	0x2000011c

08009e70 <memset>:
 8009e70:	4402      	add	r2, r0
 8009e72:	4603      	mov	r3, r0
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d100      	bne.n	8009e7a <memset+0xa>
 8009e78:	4770      	bx	lr
 8009e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e7e:	e7f9      	b.n	8009e74 <memset+0x4>

08009e80 <_free_r>:
 8009e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e82:	2900      	cmp	r1, #0
 8009e84:	d048      	beq.n	8009f18 <_free_r+0x98>
 8009e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e8a:	9001      	str	r0, [sp, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e92:	bfb8      	it	lt
 8009e94:	18e4      	addlt	r4, r4, r3
 8009e96:	f000 fc49 	bl	800a72c <__malloc_lock>
 8009e9a:	4a20      	ldr	r2, [pc, #128]	; (8009f1c <_free_r+0x9c>)
 8009e9c:	9801      	ldr	r0, [sp, #4]
 8009e9e:	6813      	ldr	r3, [r2, #0]
 8009ea0:	4615      	mov	r5, r2
 8009ea2:	b933      	cbnz	r3, 8009eb2 <_free_r+0x32>
 8009ea4:	6063      	str	r3, [r4, #4]
 8009ea6:	6014      	str	r4, [r2, #0]
 8009ea8:	b003      	add	sp, #12
 8009eaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009eae:	f000 bc43 	b.w	800a738 <__malloc_unlock>
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	d90b      	bls.n	8009ece <_free_r+0x4e>
 8009eb6:	6821      	ldr	r1, [r4, #0]
 8009eb8:	1862      	adds	r2, r4, r1
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	bf04      	itt	eq
 8009ebe:	681a      	ldreq	r2, [r3, #0]
 8009ec0:	685b      	ldreq	r3, [r3, #4]
 8009ec2:	6063      	str	r3, [r4, #4]
 8009ec4:	bf04      	itt	eq
 8009ec6:	1852      	addeq	r2, r2, r1
 8009ec8:	6022      	streq	r2, [r4, #0]
 8009eca:	602c      	str	r4, [r5, #0]
 8009ecc:	e7ec      	b.n	8009ea8 <_free_r+0x28>
 8009ece:	461a      	mov	r2, r3
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	b10b      	cbz	r3, 8009ed8 <_free_r+0x58>
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	d9fa      	bls.n	8009ece <_free_r+0x4e>
 8009ed8:	6811      	ldr	r1, [r2, #0]
 8009eda:	1855      	adds	r5, r2, r1
 8009edc:	42a5      	cmp	r5, r4
 8009ede:	d10b      	bne.n	8009ef8 <_free_r+0x78>
 8009ee0:	6824      	ldr	r4, [r4, #0]
 8009ee2:	4421      	add	r1, r4
 8009ee4:	1854      	adds	r4, r2, r1
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	6011      	str	r1, [r2, #0]
 8009eea:	d1dd      	bne.n	8009ea8 <_free_r+0x28>
 8009eec:	681c      	ldr	r4, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	6053      	str	r3, [r2, #4]
 8009ef2:	4421      	add	r1, r4
 8009ef4:	6011      	str	r1, [r2, #0]
 8009ef6:	e7d7      	b.n	8009ea8 <_free_r+0x28>
 8009ef8:	d902      	bls.n	8009f00 <_free_r+0x80>
 8009efa:	230c      	movs	r3, #12
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	e7d3      	b.n	8009ea8 <_free_r+0x28>
 8009f00:	6825      	ldr	r5, [r4, #0]
 8009f02:	1961      	adds	r1, r4, r5
 8009f04:	428b      	cmp	r3, r1
 8009f06:	bf04      	itt	eq
 8009f08:	6819      	ldreq	r1, [r3, #0]
 8009f0a:	685b      	ldreq	r3, [r3, #4]
 8009f0c:	6063      	str	r3, [r4, #4]
 8009f0e:	bf04      	itt	eq
 8009f10:	1949      	addeq	r1, r1, r5
 8009f12:	6021      	streq	r1, [r4, #0]
 8009f14:	6054      	str	r4, [r2, #4]
 8009f16:	e7c7      	b.n	8009ea8 <_free_r+0x28>
 8009f18:	b003      	add	sp, #12
 8009f1a:	bd30      	pop	{r4, r5, pc}
 8009f1c:	20002288 	.word	0x20002288

08009f20 <_malloc_r>:
 8009f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f22:	1ccd      	adds	r5, r1, #3
 8009f24:	f025 0503 	bic.w	r5, r5, #3
 8009f28:	3508      	adds	r5, #8
 8009f2a:	2d0c      	cmp	r5, #12
 8009f2c:	bf38      	it	cc
 8009f2e:	250c      	movcc	r5, #12
 8009f30:	2d00      	cmp	r5, #0
 8009f32:	4606      	mov	r6, r0
 8009f34:	db01      	blt.n	8009f3a <_malloc_r+0x1a>
 8009f36:	42a9      	cmp	r1, r5
 8009f38:	d903      	bls.n	8009f42 <_malloc_r+0x22>
 8009f3a:	230c      	movs	r3, #12
 8009f3c:	6033      	str	r3, [r6, #0]
 8009f3e:	2000      	movs	r0, #0
 8009f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f42:	f000 fbf3 	bl	800a72c <__malloc_lock>
 8009f46:	4921      	ldr	r1, [pc, #132]	; (8009fcc <_malloc_r+0xac>)
 8009f48:	680a      	ldr	r2, [r1, #0]
 8009f4a:	4614      	mov	r4, r2
 8009f4c:	b99c      	cbnz	r4, 8009f76 <_malloc_r+0x56>
 8009f4e:	4f20      	ldr	r7, [pc, #128]	; (8009fd0 <_malloc_r+0xb0>)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	b923      	cbnz	r3, 8009f5e <_malloc_r+0x3e>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4630      	mov	r0, r6
 8009f58:	f000 f8b2 	bl	800a0c0 <_sbrk_r>
 8009f5c:	6038      	str	r0, [r7, #0]
 8009f5e:	4629      	mov	r1, r5
 8009f60:	4630      	mov	r0, r6
 8009f62:	f000 f8ad 	bl	800a0c0 <_sbrk_r>
 8009f66:	1c43      	adds	r3, r0, #1
 8009f68:	d123      	bne.n	8009fb2 <_malloc_r+0x92>
 8009f6a:	230c      	movs	r3, #12
 8009f6c:	6033      	str	r3, [r6, #0]
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f000 fbe2 	bl	800a738 <__malloc_unlock>
 8009f74:	e7e3      	b.n	8009f3e <_malloc_r+0x1e>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	1b5b      	subs	r3, r3, r5
 8009f7a:	d417      	bmi.n	8009fac <_malloc_r+0x8c>
 8009f7c:	2b0b      	cmp	r3, #11
 8009f7e:	d903      	bls.n	8009f88 <_malloc_r+0x68>
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	441c      	add	r4, r3
 8009f84:	6025      	str	r5, [r4, #0]
 8009f86:	e004      	b.n	8009f92 <_malloc_r+0x72>
 8009f88:	6863      	ldr	r3, [r4, #4]
 8009f8a:	42a2      	cmp	r2, r4
 8009f8c:	bf0c      	ite	eq
 8009f8e:	600b      	streq	r3, [r1, #0]
 8009f90:	6053      	strne	r3, [r2, #4]
 8009f92:	4630      	mov	r0, r6
 8009f94:	f000 fbd0 	bl	800a738 <__malloc_unlock>
 8009f98:	f104 000b 	add.w	r0, r4, #11
 8009f9c:	1d23      	adds	r3, r4, #4
 8009f9e:	f020 0007 	bic.w	r0, r0, #7
 8009fa2:	1ac2      	subs	r2, r0, r3
 8009fa4:	d0cc      	beq.n	8009f40 <_malloc_r+0x20>
 8009fa6:	1a1b      	subs	r3, r3, r0
 8009fa8:	50a3      	str	r3, [r4, r2]
 8009faa:	e7c9      	b.n	8009f40 <_malloc_r+0x20>
 8009fac:	4622      	mov	r2, r4
 8009fae:	6864      	ldr	r4, [r4, #4]
 8009fb0:	e7cc      	b.n	8009f4c <_malloc_r+0x2c>
 8009fb2:	1cc4      	adds	r4, r0, #3
 8009fb4:	f024 0403 	bic.w	r4, r4, #3
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d0e3      	beq.n	8009f84 <_malloc_r+0x64>
 8009fbc:	1a21      	subs	r1, r4, r0
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f000 f87e 	bl	800a0c0 <_sbrk_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d1dd      	bne.n	8009f84 <_malloc_r+0x64>
 8009fc8:	e7cf      	b.n	8009f6a <_malloc_r+0x4a>
 8009fca:	bf00      	nop
 8009fcc:	20002288 	.word	0x20002288
 8009fd0:	2000228c 	.word	0x2000228c

08009fd4 <_puts_r>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	460e      	mov	r6, r1
 8009fd8:	4605      	mov	r5, r0
 8009fda:	b118      	cbz	r0, 8009fe4 <_puts_r+0x10>
 8009fdc:	6983      	ldr	r3, [r0, #24]
 8009fde:	b90b      	cbnz	r3, 8009fe4 <_puts_r+0x10>
 8009fe0:	f000 faa0 	bl	800a524 <__sinit>
 8009fe4:	69ab      	ldr	r3, [r5, #24]
 8009fe6:	68ac      	ldr	r4, [r5, #8]
 8009fe8:	b913      	cbnz	r3, 8009ff0 <_puts_r+0x1c>
 8009fea:	4628      	mov	r0, r5
 8009fec:	f000 fa9a 	bl	800a524 <__sinit>
 8009ff0:	4b2c      	ldr	r3, [pc, #176]	; (800a0a4 <_puts_r+0xd0>)
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d120      	bne.n	800a038 <_puts_r+0x64>
 8009ff6:	686c      	ldr	r4, [r5, #4]
 8009ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ffa:	07db      	lsls	r3, r3, #31
 8009ffc:	d405      	bmi.n	800a00a <_puts_r+0x36>
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	0598      	lsls	r0, r3, #22
 800a002:	d402      	bmi.n	800a00a <_puts_r+0x36>
 800a004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a006:	f000 fb2b 	bl	800a660 <__retarget_lock_acquire_recursive>
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	0719      	lsls	r1, r3, #28
 800a00e:	d51d      	bpl.n	800a04c <_puts_r+0x78>
 800a010:	6923      	ldr	r3, [r4, #16]
 800a012:	b1db      	cbz	r3, 800a04c <_puts_r+0x78>
 800a014:	3e01      	subs	r6, #1
 800a016:	68a3      	ldr	r3, [r4, #8]
 800a018:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a01c:	3b01      	subs	r3, #1
 800a01e:	60a3      	str	r3, [r4, #8]
 800a020:	bb39      	cbnz	r1, 800a072 <_puts_r+0x9e>
 800a022:	2b00      	cmp	r3, #0
 800a024:	da38      	bge.n	800a098 <_puts_r+0xc4>
 800a026:	4622      	mov	r2, r4
 800a028:	210a      	movs	r1, #10
 800a02a:	4628      	mov	r0, r5
 800a02c:	f000 f8a0 	bl	800a170 <__swbuf_r>
 800a030:	3001      	adds	r0, #1
 800a032:	d011      	beq.n	800a058 <_puts_r+0x84>
 800a034:	250a      	movs	r5, #10
 800a036:	e011      	b.n	800a05c <_puts_r+0x88>
 800a038:	4b1b      	ldr	r3, [pc, #108]	; (800a0a8 <_puts_r+0xd4>)
 800a03a:	429c      	cmp	r4, r3
 800a03c:	d101      	bne.n	800a042 <_puts_r+0x6e>
 800a03e:	68ac      	ldr	r4, [r5, #8]
 800a040:	e7da      	b.n	8009ff8 <_puts_r+0x24>
 800a042:	4b1a      	ldr	r3, [pc, #104]	; (800a0ac <_puts_r+0xd8>)
 800a044:	429c      	cmp	r4, r3
 800a046:	bf08      	it	eq
 800a048:	68ec      	ldreq	r4, [r5, #12]
 800a04a:	e7d5      	b.n	8009ff8 <_puts_r+0x24>
 800a04c:	4621      	mov	r1, r4
 800a04e:	4628      	mov	r0, r5
 800a050:	f000 f8e0 	bl	800a214 <__swsetup_r>
 800a054:	2800      	cmp	r0, #0
 800a056:	d0dd      	beq.n	800a014 <_puts_r+0x40>
 800a058:	f04f 35ff 	mov.w	r5, #4294967295
 800a05c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a05e:	07da      	lsls	r2, r3, #31
 800a060:	d405      	bmi.n	800a06e <_puts_r+0x9a>
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	059b      	lsls	r3, r3, #22
 800a066:	d402      	bmi.n	800a06e <_puts_r+0x9a>
 800a068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a06a:	f000 fafa 	bl	800a662 <__retarget_lock_release_recursive>
 800a06e:	4628      	mov	r0, r5
 800a070:	bd70      	pop	{r4, r5, r6, pc}
 800a072:	2b00      	cmp	r3, #0
 800a074:	da04      	bge.n	800a080 <_puts_r+0xac>
 800a076:	69a2      	ldr	r2, [r4, #24]
 800a078:	429a      	cmp	r2, r3
 800a07a:	dc06      	bgt.n	800a08a <_puts_r+0xb6>
 800a07c:	290a      	cmp	r1, #10
 800a07e:	d004      	beq.n	800a08a <_puts_r+0xb6>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	1c5a      	adds	r2, r3, #1
 800a084:	6022      	str	r2, [r4, #0]
 800a086:	7019      	strb	r1, [r3, #0]
 800a088:	e7c5      	b.n	800a016 <_puts_r+0x42>
 800a08a:	4622      	mov	r2, r4
 800a08c:	4628      	mov	r0, r5
 800a08e:	f000 f86f 	bl	800a170 <__swbuf_r>
 800a092:	3001      	adds	r0, #1
 800a094:	d1bf      	bne.n	800a016 <_puts_r+0x42>
 800a096:	e7df      	b.n	800a058 <_puts_r+0x84>
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	250a      	movs	r5, #10
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	6022      	str	r2, [r4, #0]
 800a0a0:	701d      	strb	r5, [r3, #0]
 800a0a2:	e7db      	b.n	800a05c <_puts_r+0x88>
 800a0a4:	0800c464 	.word	0x0800c464
 800a0a8:	0800c484 	.word	0x0800c484
 800a0ac:	0800c444 	.word	0x0800c444

0800a0b0 <puts>:
 800a0b0:	4b02      	ldr	r3, [pc, #8]	; (800a0bc <puts+0xc>)
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	f7ff bf8d 	b.w	8009fd4 <_puts_r>
 800a0ba:	bf00      	nop
 800a0bc:	2000011c 	.word	0x2000011c

0800a0c0 <_sbrk_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d06      	ldr	r5, [pc, #24]	; (800a0dc <_sbrk_r+0x1c>)
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	f7f8 faa8 	bl	8002620 <_sbrk>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_sbrk_r+0x1a>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_sbrk_r+0x1a>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	20002d18 	.word	0x20002d18

0800a0e0 <sniprintf>:
 800a0e0:	b40c      	push	{r2, r3}
 800a0e2:	b530      	push	{r4, r5, lr}
 800a0e4:	4b17      	ldr	r3, [pc, #92]	; (800a144 <sniprintf+0x64>)
 800a0e6:	1e0c      	subs	r4, r1, #0
 800a0e8:	681d      	ldr	r5, [r3, #0]
 800a0ea:	b09d      	sub	sp, #116	; 0x74
 800a0ec:	da08      	bge.n	800a100 <sniprintf+0x20>
 800a0ee:	238b      	movs	r3, #139	; 0x8b
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f6:	b01d      	add	sp, #116	; 0x74
 800a0f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0fc:	b002      	add	sp, #8
 800a0fe:	4770      	bx	lr
 800a100:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a104:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a108:	bf14      	ite	ne
 800a10a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a10e:	4623      	moveq	r3, r4
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	9307      	str	r3, [sp, #28]
 800a114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a118:	9002      	str	r0, [sp, #8]
 800a11a:	9006      	str	r0, [sp, #24]
 800a11c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a120:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a122:	ab21      	add	r3, sp, #132	; 0x84
 800a124:	a902      	add	r1, sp, #8
 800a126:	4628      	mov	r0, r5
 800a128:	9301      	str	r3, [sp, #4]
 800a12a:	f000 fb67 	bl	800a7fc <_svfiprintf_r>
 800a12e:	1c43      	adds	r3, r0, #1
 800a130:	bfbc      	itt	lt
 800a132:	238b      	movlt	r3, #139	; 0x8b
 800a134:	602b      	strlt	r3, [r5, #0]
 800a136:	2c00      	cmp	r4, #0
 800a138:	d0dd      	beq.n	800a0f6 <sniprintf+0x16>
 800a13a:	9b02      	ldr	r3, [sp, #8]
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]
 800a140:	e7d9      	b.n	800a0f6 <sniprintf+0x16>
 800a142:	bf00      	nop
 800a144:	2000011c 	.word	0x2000011c

0800a148 <strncpy>:
 800a148:	b510      	push	{r4, lr}
 800a14a:	3901      	subs	r1, #1
 800a14c:	4603      	mov	r3, r0
 800a14e:	b132      	cbz	r2, 800a15e <strncpy+0x16>
 800a150:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a154:	f803 4b01 	strb.w	r4, [r3], #1
 800a158:	3a01      	subs	r2, #1
 800a15a:	2c00      	cmp	r4, #0
 800a15c:	d1f7      	bne.n	800a14e <strncpy+0x6>
 800a15e:	441a      	add	r2, r3
 800a160:	2100      	movs	r1, #0
 800a162:	4293      	cmp	r3, r2
 800a164:	d100      	bne.n	800a168 <strncpy+0x20>
 800a166:	bd10      	pop	{r4, pc}
 800a168:	f803 1b01 	strb.w	r1, [r3], #1
 800a16c:	e7f9      	b.n	800a162 <strncpy+0x1a>
	...

0800a170 <__swbuf_r>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	460e      	mov	r6, r1
 800a174:	4614      	mov	r4, r2
 800a176:	4605      	mov	r5, r0
 800a178:	b118      	cbz	r0, 800a182 <__swbuf_r+0x12>
 800a17a:	6983      	ldr	r3, [r0, #24]
 800a17c:	b90b      	cbnz	r3, 800a182 <__swbuf_r+0x12>
 800a17e:	f000 f9d1 	bl	800a524 <__sinit>
 800a182:	4b21      	ldr	r3, [pc, #132]	; (800a208 <__swbuf_r+0x98>)
 800a184:	429c      	cmp	r4, r3
 800a186:	d12b      	bne.n	800a1e0 <__swbuf_r+0x70>
 800a188:	686c      	ldr	r4, [r5, #4]
 800a18a:	69a3      	ldr	r3, [r4, #24]
 800a18c:	60a3      	str	r3, [r4, #8]
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	071a      	lsls	r2, r3, #28
 800a192:	d52f      	bpl.n	800a1f4 <__swbuf_r+0x84>
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	b36b      	cbz	r3, 800a1f4 <__swbuf_r+0x84>
 800a198:	6923      	ldr	r3, [r4, #16]
 800a19a:	6820      	ldr	r0, [r4, #0]
 800a19c:	1ac0      	subs	r0, r0, r3
 800a19e:	6963      	ldr	r3, [r4, #20]
 800a1a0:	b2f6      	uxtb	r6, r6
 800a1a2:	4283      	cmp	r3, r0
 800a1a4:	4637      	mov	r7, r6
 800a1a6:	dc04      	bgt.n	800a1b2 <__swbuf_r+0x42>
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f000 f926 	bl	800a3fc <_fflush_r>
 800a1b0:	bb30      	cbnz	r0, 800a200 <__swbuf_r+0x90>
 800a1b2:	68a3      	ldr	r3, [r4, #8]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	60a3      	str	r3, [r4, #8]
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	1c5a      	adds	r2, r3, #1
 800a1bc:	6022      	str	r2, [r4, #0]
 800a1be:	701e      	strb	r6, [r3, #0]
 800a1c0:	6963      	ldr	r3, [r4, #20]
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	4283      	cmp	r3, r0
 800a1c6:	d004      	beq.n	800a1d2 <__swbuf_r+0x62>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	07db      	lsls	r3, r3, #31
 800a1cc:	d506      	bpl.n	800a1dc <__swbuf_r+0x6c>
 800a1ce:	2e0a      	cmp	r6, #10
 800a1d0:	d104      	bne.n	800a1dc <__swbuf_r+0x6c>
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	f000 f911 	bl	800a3fc <_fflush_r>
 800a1da:	b988      	cbnz	r0, 800a200 <__swbuf_r+0x90>
 800a1dc:	4638      	mov	r0, r7
 800a1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e0:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <__swbuf_r+0x9c>)
 800a1e2:	429c      	cmp	r4, r3
 800a1e4:	d101      	bne.n	800a1ea <__swbuf_r+0x7a>
 800a1e6:	68ac      	ldr	r4, [r5, #8]
 800a1e8:	e7cf      	b.n	800a18a <__swbuf_r+0x1a>
 800a1ea:	4b09      	ldr	r3, [pc, #36]	; (800a210 <__swbuf_r+0xa0>)
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	bf08      	it	eq
 800a1f0:	68ec      	ldreq	r4, [r5, #12]
 800a1f2:	e7ca      	b.n	800a18a <__swbuf_r+0x1a>
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 f80c 	bl	800a214 <__swsetup_r>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d0cb      	beq.n	800a198 <__swbuf_r+0x28>
 800a200:	f04f 37ff 	mov.w	r7, #4294967295
 800a204:	e7ea      	b.n	800a1dc <__swbuf_r+0x6c>
 800a206:	bf00      	nop
 800a208:	0800c464 	.word	0x0800c464
 800a20c:	0800c484 	.word	0x0800c484
 800a210:	0800c444 	.word	0x0800c444

0800a214 <__swsetup_r>:
 800a214:	4b32      	ldr	r3, [pc, #200]	; (800a2e0 <__swsetup_r+0xcc>)
 800a216:	b570      	push	{r4, r5, r6, lr}
 800a218:	681d      	ldr	r5, [r3, #0]
 800a21a:	4606      	mov	r6, r0
 800a21c:	460c      	mov	r4, r1
 800a21e:	b125      	cbz	r5, 800a22a <__swsetup_r+0x16>
 800a220:	69ab      	ldr	r3, [r5, #24]
 800a222:	b913      	cbnz	r3, 800a22a <__swsetup_r+0x16>
 800a224:	4628      	mov	r0, r5
 800a226:	f000 f97d 	bl	800a524 <__sinit>
 800a22a:	4b2e      	ldr	r3, [pc, #184]	; (800a2e4 <__swsetup_r+0xd0>)
 800a22c:	429c      	cmp	r4, r3
 800a22e:	d10f      	bne.n	800a250 <__swsetup_r+0x3c>
 800a230:	686c      	ldr	r4, [r5, #4]
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a238:	0719      	lsls	r1, r3, #28
 800a23a:	d42c      	bmi.n	800a296 <__swsetup_r+0x82>
 800a23c:	06dd      	lsls	r5, r3, #27
 800a23e:	d411      	bmi.n	800a264 <__swsetup_r+0x50>
 800a240:	2309      	movs	r3, #9
 800a242:	6033      	str	r3, [r6, #0]
 800a244:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295
 800a24e:	e03e      	b.n	800a2ce <__swsetup_r+0xba>
 800a250:	4b25      	ldr	r3, [pc, #148]	; (800a2e8 <__swsetup_r+0xd4>)
 800a252:	429c      	cmp	r4, r3
 800a254:	d101      	bne.n	800a25a <__swsetup_r+0x46>
 800a256:	68ac      	ldr	r4, [r5, #8]
 800a258:	e7eb      	b.n	800a232 <__swsetup_r+0x1e>
 800a25a:	4b24      	ldr	r3, [pc, #144]	; (800a2ec <__swsetup_r+0xd8>)
 800a25c:	429c      	cmp	r4, r3
 800a25e:	bf08      	it	eq
 800a260:	68ec      	ldreq	r4, [r5, #12]
 800a262:	e7e6      	b.n	800a232 <__swsetup_r+0x1e>
 800a264:	0758      	lsls	r0, r3, #29
 800a266:	d512      	bpl.n	800a28e <__swsetup_r+0x7a>
 800a268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a26a:	b141      	cbz	r1, 800a27e <__swsetup_r+0x6a>
 800a26c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a270:	4299      	cmp	r1, r3
 800a272:	d002      	beq.n	800a27a <__swsetup_r+0x66>
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff fe03 	bl	8009e80 <_free_r>
 800a27a:	2300      	movs	r3, #0
 800a27c:	6363      	str	r3, [r4, #52]	; 0x34
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a284:	81a3      	strh	r3, [r4, #12]
 800a286:	2300      	movs	r3, #0
 800a288:	6063      	str	r3, [r4, #4]
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	f043 0308 	orr.w	r3, r3, #8
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	6923      	ldr	r3, [r4, #16]
 800a298:	b94b      	cbnz	r3, 800a2ae <__swsetup_r+0x9a>
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2a4:	d003      	beq.n	800a2ae <__swsetup_r+0x9a>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f000 f9ff 	bl	800a6ac <__smakebuf_r>
 800a2ae:	89a0      	ldrh	r0, [r4, #12]
 800a2b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2b4:	f010 0301 	ands.w	r3, r0, #1
 800a2b8:	d00a      	beq.n	800a2d0 <__swsetup_r+0xbc>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60a3      	str	r3, [r4, #8]
 800a2be:	6963      	ldr	r3, [r4, #20]
 800a2c0:	425b      	negs	r3, r3
 800a2c2:	61a3      	str	r3, [r4, #24]
 800a2c4:	6923      	ldr	r3, [r4, #16]
 800a2c6:	b943      	cbnz	r3, 800a2da <__swsetup_r+0xc6>
 800a2c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2cc:	d1ba      	bne.n	800a244 <__swsetup_r+0x30>
 800a2ce:	bd70      	pop	{r4, r5, r6, pc}
 800a2d0:	0781      	lsls	r1, r0, #30
 800a2d2:	bf58      	it	pl
 800a2d4:	6963      	ldrpl	r3, [r4, #20]
 800a2d6:	60a3      	str	r3, [r4, #8]
 800a2d8:	e7f4      	b.n	800a2c4 <__swsetup_r+0xb0>
 800a2da:	2000      	movs	r0, #0
 800a2dc:	e7f7      	b.n	800a2ce <__swsetup_r+0xba>
 800a2de:	bf00      	nop
 800a2e0:	2000011c 	.word	0x2000011c
 800a2e4:	0800c464 	.word	0x0800c464
 800a2e8:	0800c484 	.word	0x0800c484
 800a2ec:	0800c444 	.word	0x0800c444

0800a2f0 <__sflush_r>:
 800a2f0:	898a      	ldrh	r2, [r1, #12]
 800a2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	0710      	lsls	r0, r2, #28
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	d458      	bmi.n	800a3b0 <__sflush_r+0xc0>
 800a2fe:	684b      	ldr	r3, [r1, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	dc05      	bgt.n	800a310 <__sflush_r+0x20>
 800a304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a306:	2b00      	cmp	r3, #0
 800a308:	dc02      	bgt.n	800a310 <__sflush_r+0x20>
 800a30a:	2000      	movs	r0, #0
 800a30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a312:	2e00      	cmp	r6, #0
 800a314:	d0f9      	beq.n	800a30a <__sflush_r+0x1a>
 800a316:	2300      	movs	r3, #0
 800a318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a31c:	682f      	ldr	r7, [r5, #0]
 800a31e:	602b      	str	r3, [r5, #0]
 800a320:	d032      	beq.n	800a388 <__sflush_r+0x98>
 800a322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a324:	89a3      	ldrh	r3, [r4, #12]
 800a326:	075a      	lsls	r2, r3, #29
 800a328:	d505      	bpl.n	800a336 <__sflush_r+0x46>
 800a32a:	6863      	ldr	r3, [r4, #4]
 800a32c:	1ac0      	subs	r0, r0, r3
 800a32e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a330:	b10b      	cbz	r3, 800a336 <__sflush_r+0x46>
 800a332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a334:	1ac0      	subs	r0, r0, r3
 800a336:	2300      	movs	r3, #0
 800a338:	4602      	mov	r2, r0
 800a33a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a33c:	6a21      	ldr	r1, [r4, #32]
 800a33e:	4628      	mov	r0, r5
 800a340:	47b0      	blx	r6
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	d106      	bne.n	800a356 <__sflush_r+0x66>
 800a348:	6829      	ldr	r1, [r5, #0]
 800a34a:	291d      	cmp	r1, #29
 800a34c:	d82c      	bhi.n	800a3a8 <__sflush_r+0xb8>
 800a34e:	4a2a      	ldr	r2, [pc, #168]	; (800a3f8 <__sflush_r+0x108>)
 800a350:	40ca      	lsrs	r2, r1
 800a352:	07d6      	lsls	r6, r2, #31
 800a354:	d528      	bpl.n	800a3a8 <__sflush_r+0xb8>
 800a356:	2200      	movs	r2, #0
 800a358:	6062      	str	r2, [r4, #4]
 800a35a:	04d9      	lsls	r1, r3, #19
 800a35c:	6922      	ldr	r2, [r4, #16]
 800a35e:	6022      	str	r2, [r4, #0]
 800a360:	d504      	bpl.n	800a36c <__sflush_r+0x7c>
 800a362:	1c42      	adds	r2, r0, #1
 800a364:	d101      	bne.n	800a36a <__sflush_r+0x7a>
 800a366:	682b      	ldr	r3, [r5, #0]
 800a368:	b903      	cbnz	r3, 800a36c <__sflush_r+0x7c>
 800a36a:	6560      	str	r0, [r4, #84]	; 0x54
 800a36c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a36e:	602f      	str	r7, [r5, #0]
 800a370:	2900      	cmp	r1, #0
 800a372:	d0ca      	beq.n	800a30a <__sflush_r+0x1a>
 800a374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a378:	4299      	cmp	r1, r3
 800a37a:	d002      	beq.n	800a382 <__sflush_r+0x92>
 800a37c:	4628      	mov	r0, r5
 800a37e:	f7ff fd7f 	bl	8009e80 <_free_r>
 800a382:	2000      	movs	r0, #0
 800a384:	6360      	str	r0, [r4, #52]	; 0x34
 800a386:	e7c1      	b.n	800a30c <__sflush_r+0x1c>
 800a388:	6a21      	ldr	r1, [r4, #32]
 800a38a:	2301      	movs	r3, #1
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b0      	blx	r6
 800a390:	1c41      	adds	r1, r0, #1
 800a392:	d1c7      	bne.n	800a324 <__sflush_r+0x34>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d0c4      	beq.n	800a324 <__sflush_r+0x34>
 800a39a:	2b1d      	cmp	r3, #29
 800a39c:	d001      	beq.n	800a3a2 <__sflush_r+0xb2>
 800a39e:	2b16      	cmp	r3, #22
 800a3a0:	d101      	bne.n	800a3a6 <__sflush_r+0xb6>
 800a3a2:	602f      	str	r7, [r5, #0]
 800a3a4:	e7b1      	b.n	800a30a <__sflush_r+0x1a>
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	e7ad      	b.n	800a30c <__sflush_r+0x1c>
 800a3b0:	690f      	ldr	r7, [r1, #16]
 800a3b2:	2f00      	cmp	r7, #0
 800a3b4:	d0a9      	beq.n	800a30a <__sflush_r+0x1a>
 800a3b6:	0793      	lsls	r3, r2, #30
 800a3b8:	680e      	ldr	r6, [r1, #0]
 800a3ba:	bf08      	it	eq
 800a3bc:	694b      	ldreq	r3, [r1, #20]
 800a3be:	600f      	str	r7, [r1, #0]
 800a3c0:	bf18      	it	ne
 800a3c2:	2300      	movne	r3, #0
 800a3c4:	eba6 0807 	sub.w	r8, r6, r7
 800a3c8:	608b      	str	r3, [r1, #8]
 800a3ca:	f1b8 0f00 	cmp.w	r8, #0
 800a3ce:	dd9c      	ble.n	800a30a <__sflush_r+0x1a>
 800a3d0:	6a21      	ldr	r1, [r4, #32]
 800a3d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3d4:	4643      	mov	r3, r8
 800a3d6:	463a      	mov	r2, r7
 800a3d8:	4628      	mov	r0, r5
 800a3da:	47b0      	blx	r6
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	dc06      	bgt.n	800a3ee <__sflush_r+0xfe>
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e6:	81a3      	strh	r3, [r4, #12]
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ec:	e78e      	b.n	800a30c <__sflush_r+0x1c>
 800a3ee:	4407      	add	r7, r0
 800a3f0:	eba8 0800 	sub.w	r8, r8, r0
 800a3f4:	e7e9      	b.n	800a3ca <__sflush_r+0xda>
 800a3f6:	bf00      	nop
 800a3f8:	20400001 	.word	0x20400001

0800a3fc <_fflush_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	690b      	ldr	r3, [r1, #16]
 800a400:	4605      	mov	r5, r0
 800a402:	460c      	mov	r4, r1
 800a404:	b913      	cbnz	r3, 800a40c <_fflush_r+0x10>
 800a406:	2500      	movs	r5, #0
 800a408:	4628      	mov	r0, r5
 800a40a:	bd38      	pop	{r3, r4, r5, pc}
 800a40c:	b118      	cbz	r0, 800a416 <_fflush_r+0x1a>
 800a40e:	6983      	ldr	r3, [r0, #24]
 800a410:	b90b      	cbnz	r3, 800a416 <_fflush_r+0x1a>
 800a412:	f000 f887 	bl	800a524 <__sinit>
 800a416:	4b14      	ldr	r3, [pc, #80]	; (800a468 <_fflush_r+0x6c>)
 800a418:	429c      	cmp	r4, r3
 800a41a:	d11b      	bne.n	800a454 <_fflush_r+0x58>
 800a41c:	686c      	ldr	r4, [r5, #4]
 800a41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d0ef      	beq.n	800a406 <_fflush_r+0xa>
 800a426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a428:	07d0      	lsls	r0, r2, #31
 800a42a:	d404      	bmi.n	800a436 <_fflush_r+0x3a>
 800a42c:	0599      	lsls	r1, r3, #22
 800a42e:	d402      	bmi.n	800a436 <_fflush_r+0x3a>
 800a430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a432:	f000 f915 	bl	800a660 <__retarget_lock_acquire_recursive>
 800a436:	4628      	mov	r0, r5
 800a438:	4621      	mov	r1, r4
 800a43a:	f7ff ff59 	bl	800a2f0 <__sflush_r>
 800a43e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a440:	07da      	lsls	r2, r3, #31
 800a442:	4605      	mov	r5, r0
 800a444:	d4e0      	bmi.n	800a408 <_fflush_r+0xc>
 800a446:	89a3      	ldrh	r3, [r4, #12]
 800a448:	059b      	lsls	r3, r3, #22
 800a44a:	d4dd      	bmi.n	800a408 <_fflush_r+0xc>
 800a44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a44e:	f000 f908 	bl	800a662 <__retarget_lock_release_recursive>
 800a452:	e7d9      	b.n	800a408 <_fflush_r+0xc>
 800a454:	4b05      	ldr	r3, [pc, #20]	; (800a46c <_fflush_r+0x70>)
 800a456:	429c      	cmp	r4, r3
 800a458:	d101      	bne.n	800a45e <_fflush_r+0x62>
 800a45a:	68ac      	ldr	r4, [r5, #8]
 800a45c:	e7df      	b.n	800a41e <_fflush_r+0x22>
 800a45e:	4b04      	ldr	r3, [pc, #16]	; (800a470 <_fflush_r+0x74>)
 800a460:	429c      	cmp	r4, r3
 800a462:	bf08      	it	eq
 800a464:	68ec      	ldreq	r4, [r5, #12]
 800a466:	e7da      	b.n	800a41e <_fflush_r+0x22>
 800a468:	0800c464 	.word	0x0800c464
 800a46c:	0800c484 	.word	0x0800c484
 800a470:	0800c444 	.word	0x0800c444

0800a474 <std>:
 800a474:	2300      	movs	r3, #0
 800a476:	b510      	push	{r4, lr}
 800a478:	4604      	mov	r4, r0
 800a47a:	e9c0 3300 	strd	r3, r3, [r0]
 800a47e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a482:	6083      	str	r3, [r0, #8]
 800a484:	8181      	strh	r1, [r0, #12]
 800a486:	6643      	str	r3, [r0, #100]	; 0x64
 800a488:	81c2      	strh	r2, [r0, #14]
 800a48a:	6183      	str	r3, [r0, #24]
 800a48c:	4619      	mov	r1, r3
 800a48e:	2208      	movs	r2, #8
 800a490:	305c      	adds	r0, #92	; 0x5c
 800a492:	f7ff fced 	bl	8009e70 <memset>
 800a496:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <std+0x38>)
 800a498:	6263      	str	r3, [r4, #36]	; 0x24
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <std+0x3c>)
 800a49c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a49e:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <std+0x40>)
 800a4a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4a2:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <std+0x44>)
 800a4a4:	6224      	str	r4, [r4, #32]
 800a4a6:	6323      	str	r3, [r4, #48]	; 0x30
 800a4a8:	bd10      	pop	{r4, pc}
 800a4aa:	bf00      	nop
 800a4ac:	0800ad25 	.word	0x0800ad25
 800a4b0:	0800ad47 	.word	0x0800ad47
 800a4b4:	0800ad7f 	.word	0x0800ad7f
 800a4b8:	0800ada3 	.word	0x0800ada3

0800a4bc <_cleanup_r>:
 800a4bc:	4901      	ldr	r1, [pc, #4]	; (800a4c4 <_cleanup_r+0x8>)
 800a4be:	f000 b8af 	b.w	800a620 <_fwalk_reent>
 800a4c2:	bf00      	nop
 800a4c4:	0800a3fd 	.word	0x0800a3fd

0800a4c8 <__sfmoreglue>:
 800a4c8:	b570      	push	{r4, r5, r6, lr}
 800a4ca:	1e4a      	subs	r2, r1, #1
 800a4cc:	2568      	movs	r5, #104	; 0x68
 800a4ce:	4355      	muls	r5, r2
 800a4d0:	460e      	mov	r6, r1
 800a4d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4d6:	f7ff fd23 	bl	8009f20 <_malloc_r>
 800a4da:	4604      	mov	r4, r0
 800a4dc:	b140      	cbz	r0, 800a4f0 <__sfmoreglue+0x28>
 800a4de:	2100      	movs	r1, #0
 800a4e0:	e9c0 1600 	strd	r1, r6, [r0]
 800a4e4:	300c      	adds	r0, #12
 800a4e6:	60a0      	str	r0, [r4, #8]
 800a4e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4ec:	f7ff fcc0 	bl	8009e70 <memset>
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}

0800a4f4 <__sfp_lock_acquire>:
 800a4f4:	4801      	ldr	r0, [pc, #4]	; (800a4fc <__sfp_lock_acquire+0x8>)
 800a4f6:	f000 b8b3 	b.w	800a660 <__retarget_lock_acquire_recursive>
 800a4fa:	bf00      	nop
 800a4fc:	20002d14 	.word	0x20002d14

0800a500 <__sfp_lock_release>:
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <__sfp_lock_release+0x8>)
 800a502:	f000 b8ae 	b.w	800a662 <__retarget_lock_release_recursive>
 800a506:	bf00      	nop
 800a508:	20002d14 	.word	0x20002d14

0800a50c <__sinit_lock_acquire>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__sinit_lock_acquire+0x8>)
 800a50e:	f000 b8a7 	b.w	800a660 <__retarget_lock_acquire_recursive>
 800a512:	bf00      	nop
 800a514:	20002d0f 	.word	0x20002d0f

0800a518 <__sinit_lock_release>:
 800a518:	4801      	ldr	r0, [pc, #4]	; (800a520 <__sinit_lock_release+0x8>)
 800a51a:	f000 b8a2 	b.w	800a662 <__retarget_lock_release_recursive>
 800a51e:	bf00      	nop
 800a520:	20002d0f 	.word	0x20002d0f

0800a524 <__sinit>:
 800a524:	b510      	push	{r4, lr}
 800a526:	4604      	mov	r4, r0
 800a528:	f7ff fff0 	bl	800a50c <__sinit_lock_acquire>
 800a52c:	69a3      	ldr	r3, [r4, #24]
 800a52e:	b11b      	cbz	r3, 800a538 <__sinit+0x14>
 800a530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a534:	f7ff bff0 	b.w	800a518 <__sinit_lock_release>
 800a538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a53c:	6523      	str	r3, [r4, #80]	; 0x50
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <__sinit+0x68>)
 800a540:	4a13      	ldr	r2, [pc, #76]	; (800a590 <__sinit+0x6c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	62a2      	str	r2, [r4, #40]	; 0x28
 800a546:	42a3      	cmp	r3, r4
 800a548:	bf04      	itt	eq
 800a54a:	2301      	moveq	r3, #1
 800a54c:	61a3      	streq	r3, [r4, #24]
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 f820 	bl	800a594 <__sfp>
 800a554:	6060      	str	r0, [r4, #4]
 800a556:	4620      	mov	r0, r4
 800a558:	f000 f81c 	bl	800a594 <__sfp>
 800a55c:	60a0      	str	r0, [r4, #8]
 800a55e:	4620      	mov	r0, r4
 800a560:	f000 f818 	bl	800a594 <__sfp>
 800a564:	2200      	movs	r2, #0
 800a566:	60e0      	str	r0, [r4, #12]
 800a568:	2104      	movs	r1, #4
 800a56a:	6860      	ldr	r0, [r4, #4]
 800a56c:	f7ff ff82 	bl	800a474 <std>
 800a570:	68a0      	ldr	r0, [r4, #8]
 800a572:	2201      	movs	r2, #1
 800a574:	2109      	movs	r1, #9
 800a576:	f7ff ff7d 	bl	800a474 <std>
 800a57a:	68e0      	ldr	r0, [r4, #12]
 800a57c:	2202      	movs	r2, #2
 800a57e:	2112      	movs	r1, #18
 800a580:	f7ff ff78 	bl	800a474 <std>
 800a584:	2301      	movs	r3, #1
 800a586:	61a3      	str	r3, [r4, #24]
 800a588:	e7d2      	b.n	800a530 <__sinit+0xc>
 800a58a:	bf00      	nop
 800a58c:	0800c440 	.word	0x0800c440
 800a590:	0800a4bd 	.word	0x0800a4bd

0800a594 <__sfp>:
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a596:	4607      	mov	r7, r0
 800a598:	f7ff ffac 	bl	800a4f4 <__sfp_lock_acquire>
 800a59c:	4b1e      	ldr	r3, [pc, #120]	; (800a618 <__sfp+0x84>)
 800a59e:	681e      	ldr	r6, [r3, #0]
 800a5a0:	69b3      	ldr	r3, [r6, #24]
 800a5a2:	b913      	cbnz	r3, 800a5aa <__sfp+0x16>
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f7ff ffbd 	bl	800a524 <__sinit>
 800a5aa:	3648      	adds	r6, #72	; 0x48
 800a5ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	d503      	bpl.n	800a5bc <__sfp+0x28>
 800a5b4:	6833      	ldr	r3, [r6, #0]
 800a5b6:	b30b      	cbz	r3, 800a5fc <__sfp+0x68>
 800a5b8:	6836      	ldr	r6, [r6, #0]
 800a5ba:	e7f7      	b.n	800a5ac <__sfp+0x18>
 800a5bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5c0:	b9d5      	cbnz	r5, 800a5f8 <__sfp+0x64>
 800a5c2:	4b16      	ldr	r3, [pc, #88]	; (800a61c <__sfp+0x88>)
 800a5c4:	60e3      	str	r3, [r4, #12]
 800a5c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5ca:	6665      	str	r5, [r4, #100]	; 0x64
 800a5cc:	f000 f847 	bl	800a65e <__retarget_lock_init_recursive>
 800a5d0:	f7ff ff96 	bl	800a500 <__sfp_lock_release>
 800a5d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5dc:	6025      	str	r5, [r4, #0]
 800a5de:	61a5      	str	r5, [r4, #24]
 800a5e0:	2208      	movs	r2, #8
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5e8:	f7ff fc42 	bl	8009e70 <memset>
 800a5ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f8:	3468      	adds	r4, #104	; 0x68
 800a5fa:	e7d9      	b.n	800a5b0 <__sfp+0x1c>
 800a5fc:	2104      	movs	r1, #4
 800a5fe:	4638      	mov	r0, r7
 800a600:	f7ff ff62 	bl	800a4c8 <__sfmoreglue>
 800a604:	4604      	mov	r4, r0
 800a606:	6030      	str	r0, [r6, #0]
 800a608:	2800      	cmp	r0, #0
 800a60a:	d1d5      	bne.n	800a5b8 <__sfp+0x24>
 800a60c:	f7ff ff78 	bl	800a500 <__sfp_lock_release>
 800a610:	230c      	movs	r3, #12
 800a612:	603b      	str	r3, [r7, #0]
 800a614:	e7ee      	b.n	800a5f4 <__sfp+0x60>
 800a616:	bf00      	nop
 800a618:	0800c440 	.word	0x0800c440
 800a61c:	ffff0001 	.word	0xffff0001

0800a620 <_fwalk_reent>:
 800a620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a624:	4606      	mov	r6, r0
 800a626:	4688      	mov	r8, r1
 800a628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a62c:	2700      	movs	r7, #0
 800a62e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a632:	f1b9 0901 	subs.w	r9, r9, #1
 800a636:	d505      	bpl.n	800a644 <_fwalk_reent+0x24>
 800a638:	6824      	ldr	r4, [r4, #0]
 800a63a:	2c00      	cmp	r4, #0
 800a63c:	d1f7      	bne.n	800a62e <_fwalk_reent+0xe>
 800a63e:	4638      	mov	r0, r7
 800a640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a644:	89ab      	ldrh	r3, [r5, #12]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d907      	bls.n	800a65a <_fwalk_reent+0x3a>
 800a64a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a64e:	3301      	adds	r3, #1
 800a650:	d003      	beq.n	800a65a <_fwalk_reent+0x3a>
 800a652:	4629      	mov	r1, r5
 800a654:	4630      	mov	r0, r6
 800a656:	47c0      	blx	r8
 800a658:	4307      	orrs	r7, r0
 800a65a:	3568      	adds	r5, #104	; 0x68
 800a65c:	e7e9      	b.n	800a632 <_fwalk_reent+0x12>

0800a65e <__retarget_lock_init_recursive>:
 800a65e:	4770      	bx	lr

0800a660 <__retarget_lock_acquire_recursive>:
 800a660:	4770      	bx	lr

0800a662 <__retarget_lock_release_recursive>:
 800a662:	4770      	bx	lr

0800a664 <__swhatbuf_r>:
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	460e      	mov	r6, r1
 800a668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a66c:	2900      	cmp	r1, #0
 800a66e:	b096      	sub	sp, #88	; 0x58
 800a670:	4614      	mov	r4, r2
 800a672:	461d      	mov	r5, r3
 800a674:	da07      	bge.n	800a686 <__swhatbuf_r+0x22>
 800a676:	2300      	movs	r3, #0
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	89b3      	ldrh	r3, [r6, #12]
 800a67c:	061a      	lsls	r2, r3, #24
 800a67e:	d410      	bmi.n	800a6a2 <__swhatbuf_r+0x3e>
 800a680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a684:	e00e      	b.n	800a6a4 <__swhatbuf_r+0x40>
 800a686:	466a      	mov	r2, sp
 800a688:	f000 fbb2 	bl	800adf0 <_fstat_r>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	dbf2      	blt.n	800a676 <__swhatbuf_r+0x12>
 800a690:	9a01      	ldr	r2, [sp, #4]
 800a692:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a696:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a69a:	425a      	negs	r2, r3
 800a69c:	415a      	adcs	r2, r3
 800a69e:	602a      	str	r2, [r5, #0]
 800a6a0:	e7ee      	b.n	800a680 <__swhatbuf_r+0x1c>
 800a6a2:	2340      	movs	r3, #64	; 0x40
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	6023      	str	r3, [r4, #0]
 800a6a8:	b016      	add	sp, #88	; 0x58
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}

0800a6ac <__smakebuf_r>:
 800a6ac:	898b      	ldrh	r3, [r1, #12]
 800a6ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6b0:	079d      	lsls	r5, r3, #30
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	d507      	bpl.n	800a6c8 <__smakebuf_r+0x1c>
 800a6b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	6123      	str	r3, [r4, #16]
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	6163      	str	r3, [r4, #20]
 800a6c4:	b002      	add	sp, #8
 800a6c6:	bd70      	pop	{r4, r5, r6, pc}
 800a6c8:	ab01      	add	r3, sp, #4
 800a6ca:	466a      	mov	r2, sp
 800a6cc:	f7ff ffca 	bl	800a664 <__swhatbuf_r>
 800a6d0:	9900      	ldr	r1, [sp, #0]
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f7ff fc23 	bl	8009f20 <_malloc_r>
 800a6da:	b948      	cbnz	r0, 800a6f0 <__smakebuf_r+0x44>
 800a6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e0:	059a      	lsls	r2, r3, #22
 800a6e2:	d4ef      	bmi.n	800a6c4 <__smakebuf_r+0x18>
 800a6e4:	f023 0303 	bic.w	r3, r3, #3
 800a6e8:	f043 0302 	orr.w	r3, r3, #2
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	e7e3      	b.n	800a6b8 <__smakebuf_r+0xc>
 800a6f0:	4b0d      	ldr	r3, [pc, #52]	; (800a728 <__smakebuf_r+0x7c>)
 800a6f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	6020      	str	r0, [r4, #0]
 800a6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	9b00      	ldr	r3, [sp, #0]
 800a700:	6163      	str	r3, [r4, #20]
 800a702:	9b01      	ldr	r3, [sp, #4]
 800a704:	6120      	str	r0, [r4, #16]
 800a706:	b15b      	cbz	r3, 800a720 <__smakebuf_r+0x74>
 800a708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a70c:	4630      	mov	r0, r6
 800a70e:	f000 fb81 	bl	800ae14 <_isatty_r>
 800a712:	b128      	cbz	r0, 800a720 <__smakebuf_r+0x74>
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	f023 0303 	bic.w	r3, r3, #3
 800a71a:	f043 0301 	orr.w	r3, r3, #1
 800a71e:	81a3      	strh	r3, [r4, #12]
 800a720:	89a0      	ldrh	r0, [r4, #12]
 800a722:	4305      	orrs	r5, r0
 800a724:	81a5      	strh	r5, [r4, #12]
 800a726:	e7cd      	b.n	800a6c4 <__smakebuf_r+0x18>
 800a728:	0800a4bd 	.word	0x0800a4bd

0800a72c <__malloc_lock>:
 800a72c:	4801      	ldr	r0, [pc, #4]	; (800a734 <__malloc_lock+0x8>)
 800a72e:	f7ff bf97 	b.w	800a660 <__retarget_lock_acquire_recursive>
 800a732:	bf00      	nop
 800a734:	20002d10 	.word	0x20002d10

0800a738 <__malloc_unlock>:
 800a738:	4801      	ldr	r0, [pc, #4]	; (800a740 <__malloc_unlock+0x8>)
 800a73a:	f7ff bf92 	b.w	800a662 <__retarget_lock_release_recursive>
 800a73e:	bf00      	nop
 800a740:	20002d10 	.word	0x20002d10

0800a744 <__ssputs_r>:
 800a744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a748:	688e      	ldr	r6, [r1, #8]
 800a74a:	429e      	cmp	r6, r3
 800a74c:	4682      	mov	sl, r0
 800a74e:	460c      	mov	r4, r1
 800a750:	4690      	mov	r8, r2
 800a752:	461f      	mov	r7, r3
 800a754:	d838      	bhi.n	800a7c8 <__ssputs_r+0x84>
 800a756:	898a      	ldrh	r2, [r1, #12]
 800a758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a75c:	d032      	beq.n	800a7c4 <__ssputs_r+0x80>
 800a75e:	6825      	ldr	r5, [r4, #0]
 800a760:	6909      	ldr	r1, [r1, #16]
 800a762:	eba5 0901 	sub.w	r9, r5, r1
 800a766:	6965      	ldr	r5, [r4, #20]
 800a768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a76c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a770:	3301      	adds	r3, #1
 800a772:	444b      	add	r3, r9
 800a774:	106d      	asrs	r5, r5, #1
 800a776:	429d      	cmp	r5, r3
 800a778:	bf38      	it	cc
 800a77a:	461d      	movcc	r5, r3
 800a77c:	0553      	lsls	r3, r2, #21
 800a77e:	d531      	bpl.n	800a7e4 <__ssputs_r+0xa0>
 800a780:	4629      	mov	r1, r5
 800a782:	f7ff fbcd 	bl	8009f20 <_malloc_r>
 800a786:	4606      	mov	r6, r0
 800a788:	b950      	cbnz	r0, 800a7a0 <__ssputs_r+0x5c>
 800a78a:	230c      	movs	r3, #12
 800a78c:	f8ca 3000 	str.w	r3, [sl]
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a796:	81a3      	strh	r3, [r4, #12]
 800a798:	f04f 30ff 	mov.w	r0, #4294967295
 800a79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a0:	6921      	ldr	r1, [r4, #16]
 800a7a2:	464a      	mov	r2, r9
 800a7a4:	f000 fb58 	bl	800ae58 <memcpy>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	6126      	str	r6, [r4, #16]
 800a7b6:	6165      	str	r5, [r4, #20]
 800a7b8:	444e      	add	r6, r9
 800a7ba:	eba5 0509 	sub.w	r5, r5, r9
 800a7be:	6026      	str	r6, [r4, #0]
 800a7c0:	60a5      	str	r5, [r4, #8]
 800a7c2:	463e      	mov	r6, r7
 800a7c4:	42be      	cmp	r6, r7
 800a7c6:	d900      	bls.n	800a7ca <__ssputs_r+0x86>
 800a7c8:	463e      	mov	r6, r7
 800a7ca:	4632      	mov	r2, r6
 800a7cc:	6820      	ldr	r0, [r4, #0]
 800a7ce:	4641      	mov	r1, r8
 800a7d0:	f000 fb50 	bl	800ae74 <memmove>
 800a7d4:	68a3      	ldr	r3, [r4, #8]
 800a7d6:	6822      	ldr	r2, [r4, #0]
 800a7d8:	1b9b      	subs	r3, r3, r6
 800a7da:	4432      	add	r2, r6
 800a7dc:	60a3      	str	r3, [r4, #8]
 800a7de:	6022      	str	r2, [r4, #0]
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	e7db      	b.n	800a79c <__ssputs_r+0x58>
 800a7e4:	462a      	mov	r2, r5
 800a7e6:	f000 fb5f 	bl	800aea8 <_realloc_r>
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d1e1      	bne.n	800a7b4 <__ssputs_r+0x70>
 800a7f0:	6921      	ldr	r1, [r4, #16]
 800a7f2:	4650      	mov	r0, sl
 800a7f4:	f7ff fb44 	bl	8009e80 <_free_r>
 800a7f8:	e7c7      	b.n	800a78a <__ssputs_r+0x46>
	...

0800a7fc <_svfiprintf_r>:
 800a7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	4698      	mov	r8, r3
 800a802:	898b      	ldrh	r3, [r1, #12]
 800a804:	061b      	lsls	r3, r3, #24
 800a806:	b09d      	sub	sp, #116	; 0x74
 800a808:	4607      	mov	r7, r0
 800a80a:	460d      	mov	r5, r1
 800a80c:	4614      	mov	r4, r2
 800a80e:	d50e      	bpl.n	800a82e <_svfiprintf_r+0x32>
 800a810:	690b      	ldr	r3, [r1, #16]
 800a812:	b963      	cbnz	r3, 800a82e <_svfiprintf_r+0x32>
 800a814:	2140      	movs	r1, #64	; 0x40
 800a816:	f7ff fb83 	bl	8009f20 <_malloc_r>
 800a81a:	6028      	str	r0, [r5, #0]
 800a81c:	6128      	str	r0, [r5, #16]
 800a81e:	b920      	cbnz	r0, 800a82a <_svfiprintf_r+0x2e>
 800a820:	230c      	movs	r3, #12
 800a822:	603b      	str	r3, [r7, #0]
 800a824:	f04f 30ff 	mov.w	r0, #4294967295
 800a828:	e0d1      	b.n	800a9ce <_svfiprintf_r+0x1d2>
 800a82a:	2340      	movs	r3, #64	; 0x40
 800a82c:	616b      	str	r3, [r5, #20]
 800a82e:	2300      	movs	r3, #0
 800a830:	9309      	str	r3, [sp, #36]	; 0x24
 800a832:	2320      	movs	r3, #32
 800a834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a838:	f8cd 800c 	str.w	r8, [sp, #12]
 800a83c:	2330      	movs	r3, #48	; 0x30
 800a83e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a9e8 <_svfiprintf_r+0x1ec>
 800a842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a846:	f04f 0901 	mov.w	r9, #1
 800a84a:	4623      	mov	r3, r4
 800a84c:	469a      	mov	sl, r3
 800a84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a852:	b10a      	cbz	r2, 800a858 <_svfiprintf_r+0x5c>
 800a854:	2a25      	cmp	r2, #37	; 0x25
 800a856:	d1f9      	bne.n	800a84c <_svfiprintf_r+0x50>
 800a858:	ebba 0b04 	subs.w	fp, sl, r4
 800a85c:	d00b      	beq.n	800a876 <_svfiprintf_r+0x7a>
 800a85e:	465b      	mov	r3, fp
 800a860:	4622      	mov	r2, r4
 800a862:	4629      	mov	r1, r5
 800a864:	4638      	mov	r0, r7
 800a866:	f7ff ff6d 	bl	800a744 <__ssputs_r>
 800a86a:	3001      	adds	r0, #1
 800a86c:	f000 80aa 	beq.w	800a9c4 <_svfiprintf_r+0x1c8>
 800a870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a872:	445a      	add	r2, fp
 800a874:	9209      	str	r2, [sp, #36]	; 0x24
 800a876:	f89a 3000 	ldrb.w	r3, [sl]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 80a2 	beq.w	800a9c4 <_svfiprintf_r+0x1c8>
 800a880:	2300      	movs	r3, #0
 800a882:	f04f 32ff 	mov.w	r2, #4294967295
 800a886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a88a:	f10a 0a01 	add.w	sl, sl, #1
 800a88e:	9304      	str	r3, [sp, #16]
 800a890:	9307      	str	r3, [sp, #28]
 800a892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a896:	931a      	str	r3, [sp, #104]	; 0x68
 800a898:	4654      	mov	r4, sl
 800a89a:	2205      	movs	r2, #5
 800a89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a0:	4851      	ldr	r0, [pc, #324]	; (800a9e8 <_svfiprintf_r+0x1ec>)
 800a8a2:	f7f5 fca5 	bl	80001f0 <memchr>
 800a8a6:	9a04      	ldr	r2, [sp, #16]
 800a8a8:	b9d8      	cbnz	r0, 800a8e2 <_svfiprintf_r+0xe6>
 800a8aa:	06d0      	lsls	r0, r2, #27
 800a8ac:	bf44      	itt	mi
 800a8ae:	2320      	movmi	r3, #32
 800a8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b4:	0711      	lsls	r1, r2, #28
 800a8b6:	bf44      	itt	mi
 800a8b8:	232b      	movmi	r3, #43	; 0x2b
 800a8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8be:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c4:	d015      	beq.n	800a8f2 <_svfiprintf_r+0xf6>
 800a8c6:	9a07      	ldr	r2, [sp, #28]
 800a8c8:	4654      	mov	r4, sl
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	f04f 0c0a 	mov.w	ip, #10
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8d6:	3b30      	subs	r3, #48	; 0x30
 800a8d8:	2b09      	cmp	r3, #9
 800a8da:	d94e      	bls.n	800a97a <_svfiprintf_r+0x17e>
 800a8dc:	b1b0      	cbz	r0, 800a90c <_svfiprintf_r+0x110>
 800a8de:	9207      	str	r2, [sp, #28]
 800a8e0:	e014      	b.n	800a90c <_svfiprintf_r+0x110>
 800a8e2:	eba0 0308 	sub.w	r3, r0, r8
 800a8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	9304      	str	r3, [sp, #16]
 800a8ee:	46a2      	mov	sl, r4
 800a8f0:	e7d2      	b.n	800a898 <_svfiprintf_r+0x9c>
 800a8f2:	9b03      	ldr	r3, [sp, #12]
 800a8f4:	1d19      	adds	r1, r3, #4
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	9103      	str	r1, [sp, #12]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	bfbb      	ittet	lt
 800a8fe:	425b      	neglt	r3, r3
 800a900:	f042 0202 	orrlt.w	r2, r2, #2
 800a904:	9307      	strge	r3, [sp, #28]
 800a906:	9307      	strlt	r3, [sp, #28]
 800a908:	bfb8      	it	lt
 800a90a:	9204      	strlt	r2, [sp, #16]
 800a90c:	7823      	ldrb	r3, [r4, #0]
 800a90e:	2b2e      	cmp	r3, #46	; 0x2e
 800a910:	d10c      	bne.n	800a92c <_svfiprintf_r+0x130>
 800a912:	7863      	ldrb	r3, [r4, #1]
 800a914:	2b2a      	cmp	r3, #42	; 0x2a
 800a916:	d135      	bne.n	800a984 <_svfiprintf_r+0x188>
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	1d1a      	adds	r2, r3, #4
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	9203      	str	r2, [sp, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	bfb8      	it	lt
 800a924:	f04f 33ff 	movlt.w	r3, #4294967295
 800a928:	3402      	adds	r4, #2
 800a92a:	9305      	str	r3, [sp, #20]
 800a92c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a9f8 <_svfiprintf_r+0x1fc>
 800a930:	7821      	ldrb	r1, [r4, #0]
 800a932:	2203      	movs	r2, #3
 800a934:	4650      	mov	r0, sl
 800a936:	f7f5 fc5b 	bl	80001f0 <memchr>
 800a93a:	b140      	cbz	r0, 800a94e <_svfiprintf_r+0x152>
 800a93c:	2340      	movs	r3, #64	; 0x40
 800a93e:	eba0 000a 	sub.w	r0, r0, sl
 800a942:	fa03 f000 	lsl.w	r0, r3, r0
 800a946:	9b04      	ldr	r3, [sp, #16]
 800a948:	4303      	orrs	r3, r0
 800a94a:	3401      	adds	r4, #1
 800a94c:	9304      	str	r3, [sp, #16]
 800a94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a952:	4826      	ldr	r0, [pc, #152]	; (800a9ec <_svfiprintf_r+0x1f0>)
 800a954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a958:	2206      	movs	r2, #6
 800a95a:	f7f5 fc49 	bl	80001f0 <memchr>
 800a95e:	2800      	cmp	r0, #0
 800a960:	d038      	beq.n	800a9d4 <_svfiprintf_r+0x1d8>
 800a962:	4b23      	ldr	r3, [pc, #140]	; (800a9f0 <_svfiprintf_r+0x1f4>)
 800a964:	bb1b      	cbnz	r3, 800a9ae <_svfiprintf_r+0x1b2>
 800a966:	9b03      	ldr	r3, [sp, #12]
 800a968:	3307      	adds	r3, #7
 800a96a:	f023 0307 	bic.w	r3, r3, #7
 800a96e:	3308      	adds	r3, #8
 800a970:	9303      	str	r3, [sp, #12]
 800a972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a974:	4433      	add	r3, r6
 800a976:	9309      	str	r3, [sp, #36]	; 0x24
 800a978:	e767      	b.n	800a84a <_svfiprintf_r+0x4e>
 800a97a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a97e:	460c      	mov	r4, r1
 800a980:	2001      	movs	r0, #1
 800a982:	e7a5      	b.n	800a8d0 <_svfiprintf_r+0xd4>
 800a984:	2300      	movs	r3, #0
 800a986:	3401      	adds	r4, #1
 800a988:	9305      	str	r3, [sp, #20]
 800a98a:	4619      	mov	r1, r3
 800a98c:	f04f 0c0a 	mov.w	ip, #10
 800a990:	4620      	mov	r0, r4
 800a992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a996:	3a30      	subs	r2, #48	; 0x30
 800a998:	2a09      	cmp	r2, #9
 800a99a:	d903      	bls.n	800a9a4 <_svfiprintf_r+0x1a8>
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0c5      	beq.n	800a92c <_svfiprintf_r+0x130>
 800a9a0:	9105      	str	r1, [sp, #20]
 800a9a2:	e7c3      	b.n	800a92c <_svfiprintf_r+0x130>
 800a9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e7f0      	b.n	800a990 <_svfiprintf_r+0x194>
 800a9ae:	ab03      	add	r3, sp, #12
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	462a      	mov	r2, r5
 800a9b4:	4b0f      	ldr	r3, [pc, #60]	; (800a9f4 <_svfiprintf_r+0x1f8>)
 800a9b6:	a904      	add	r1, sp, #16
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	f3af 8000 	nop.w
 800a9be:	1c42      	adds	r2, r0, #1
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	d1d6      	bne.n	800a972 <_svfiprintf_r+0x176>
 800a9c4:	89ab      	ldrh	r3, [r5, #12]
 800a9c6:	065b      	lsls	r3, r3, #25
 800a9c8:	f53f af2c 	bmi.w	800a824 <_svfiprintf_r+0x28>
 800a9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9ce:	b01d      	add	sp, #116	; 0x74
 800a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d4:	ab03      	add	r3, sp, #12
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	462a      	mov	r2, r5
 800a9da:	4b06      	ldr	r3, [pc, #24]	; (800a9f4 <_svfiprintf_r+0x1f8>)
 800a9dc:	a904      	add	r1, sp, #16
 800a9de:	4638      	mov	r0, r7
 800a9e0:	f000 f87a 	bl	800aad8 <_printf_i>
 800a9e4:	e7eb      	b.n	800a9be <_svfiprintf_r+0x1c2>
 800a9e6:	bf00      	nop
 800a9e8:	0800c4a4 	.word	0x0800c4a4
 800a9ec:	0800c4ae 	.word	0x0800c4ae
 800a9f0:	00000000 	.word	0x00000000
 800a9f4:	0800a745 	.word	0x0800a745
 800a9f8:	0800c4aa 	.word	0x0800c4aa

0800a9fc <_printf_common>:
 800a9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa00:	4616      	mov	r6, r2
 800aa02:	4699      	mov	r9, r3
 800aa04:	688a      	ldr	r2, [r1, #8]
 800aa06:	690b      	ldr	r3, [r1, #16]
 800aa08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	bfb8      	it	lt
 800aa10:	4613      	movlt	r3, r2
 800aa12:	6033      	str	r3, [r6, #0]
 800aa14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa18:	4607      	mov	r7, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	b10a      	cbz	r2, 800aa22 <_printf_common+0x26>
 800aa1e:	3301      	adds	r3, #1
 800aa20:	6033      	str	r3, [r6, #0]
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	0699      	lsls	r1, r3, #26
 800aa26:	bf42      	ittt	mi
 800aa28:	6833      	ldrmi	r3, [r6, #0]
 800aa2a:	3302      	addmi	r3, #2
 800aa2c:	6033      	strmi	r3, [r6, #0]
 800aa2e:	6825      	ldr	r5, [r4, #0]
 800aa30:	f015 0506 	ands.w	r5, r5, #6
 800aa34:	d106      	bne.n	800aa44 <_printf_common+0x48>
 800aa36:	f104 0a19 	add.w	sl, r4, #25
 800aa3a:	68e3      	ldr	r3, [r4, #12]
 800aa3c:	6832      	ldr	r2, [r6, #0]
 800aa3e:	1a9b      	subs	r3, r3, r2
 800aa40:	42ab      	cmp	r3, r5
 800aa42:	dc26      	bgt.n	800aa92 <_printf_common+0x96>
 800aa44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa48:	1e13      	subs	r3, r2, #0
 800aa4a:	6822      	ldr	r2, [r4, #0]
 800aa4c:	bf18      	it	ne
 800aa4e:	2301      	movne	r3, #1
 800aa50:	0692      	lsls	r2, r2, #26
 800aa52:	d42b      	bmi.n	800aaac <_printf_common+0xb0>
 800aa54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa58:	4649      	mov	r1, r9
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	47c0      	blx	r8
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d01e      	beq.n	800aaa0 <_printf_common+0xa4>
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	68e5      	ldr	r5, [r4, #12]
 800aa66:	6832      	ldr	r2, [r6, #0]
 800aa68:	f003 0306 	and.w	r3, r3, #6
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	bf08      	it	eq
 800aa70:	1aad      	subeq	r5, r5, r2
 800aa72:	68a3      	ldr	r3, [r4, #8]
 800aa74:	6922      	ldr	r2, [r4, #16]
 800aa76:	bf0c      	ite	eq
 800aa78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa7c:	2500      	movne	r5, #0
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	bfc4      	itt	gt
 800aa82:	1a9b      	subgt	r3, r3, r2
 800aa84:	18ed      	addgt	r5, r5, r3
 800aa86:	2600      	movs	r6, #0
 800aa88:	341a      	adds	r4, #26
 800aa8a:	42b5      	cmp	r5, r6
 800aa8c:	d11a      	bne.n	800aac4 <_printf_common+0xc8>
 800aa8e:	2000      	movs	r0, #0
 800aa90:	e008      	b.n	800aaa4 <_printf_common+0xa8>
 800aa92:	2301      	movs	r3, #1
 800aa94:	4652      	mov	r2, sl
 800aa96:	4649      	mov	r1, r9
 800aa98:	4638      	mov	r0, r7
 800aa9a:	47c0      	blx	r8
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	d103      	bne.n	800aaa8 <_printf_common+0xac>
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa8:	3501      	adds	r5, #1
 800aaaa:	e7c6      	b.n	800aa3a <_printf_common+0x3e>
 800aaac:	18e1      	adds	r1, r4, r3
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	2030      	movs	r0, #48	; 0x30
 800aab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aab6:	4422      	add	r2, r4
 800aab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aabc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aac0:	3302      	adds	r3, #2
 800aac2:	e7c7      	b.n	800aa54 <_printf_common+0x58>
 800aac4:	2301      	movs	r3, #1
 800aac6:	4622      	mov	r2, r4
 800aac8:	4649      	mov	r1, r9
 800aaca:	4638      	mov	r0, r7
 800aacc:	47c0      	blx	r8
 800aace:	3001      	adds	r0, #1
 800aad0:	d0e6      	beq.n	800aaa0 <_printf_common+0xa4>
 800aad2:	3601      	adds	r6, #1
 800aad4:	e7d9      	b.n	800aa8a <_printf_common+0x8e>
	...

0800aad8 <_printf_i>:
 800aad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aadc:	460c      	mov	r4, r1
 800aade:	4691      	mov	r9, r2
 800aae0:	7e27      	ldrb	r7, [r4, #24]
 800aae2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aae4:	2f78      	cmp	r7, #120	; 0x78
 800aae6:	4680      	mov	r8, r0
 800aae8:	469a      	mov	sl, r3
 800aaea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaee:	d807      	bhi.n	800ab00 <_printf_i+0x28>
 800aaf0:	2f62      	cmp	r7, #98	; 0x62
 800aaf2:	d80a      	bhi.n	800ab0a <_printf_i+0x32>
 800aaf4:	2f00      	cmp	r7, #0
 800aaf6:	f000 80d8 	beq.w	800acaa <_printf_i+0x1d2>
 800aafa:	2f58      	cmp	r7, #88	; 0x58
 800aafc:	f000 80a3 	beq.w	800ac46 <_printf_i+0x16e>
 800ab00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab08:	e03a      	b.n	800ab80 <_printf_i+0xa8>
 800ab0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab0e:	2b15      	cmp	r3, #21
 800ab10:	d8f6      	bhi.n	800ab00 <_printf_i+0x28>
 800ab12:	a001      	add	r0, pc, #4	; (adr r0, 800ab18 <_printf_i+0x40>)
 800ab14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ab18:	0800ab71 	.word	0x0800ab71
 800ab1c:	0800ab85 	.word	0x0800ab85
 800ab20:	0800ab01 	.word	0x0800ab01
 800ab24:	0800ab01 	.word	0x0800ab01
 800ab28:	0800ab01 	.word	0x0800ab01
 800ab2c:	0800ab01 	.word	0x0800ab01
 800ab30:	0800ab85 	.word	0x0800ab85
 800ab34:	0800ab01 	.word	0x0800ab01
 800ab38:	0800ab01 	.word	0x0800ab01
 800ab3c:	0800ab01 	.word	0x0800ab01
 800ab40:	0800ab01 	.word	0x0800ab01
 800ab44:	0800ac91 	.word	0x0800ac91
 800ab48:	0800abb5 	.word	0x0800abb5
 800ab4c:	0800ac73 	.word	0x0800ac73
 800ab50:	0800ab01 	.word	0x0800ab01
 800ab54:	0800ab01 	.word	0x0800ab01
 800ab58:	0800acb3 	.word	0x0800acb3
 800ab5c:	0800ab01 	.word	0x0800ab01
 800ab60:	0800abb5 	.word	0x0800abb5
 800ab64:	0800ab01 	.word	0x0800ab01
 800ab68:	0800ab01 	.word	0x0800ab01
 800ab6c:	0800ac7b 	.word	0x0800ac7b
 800ab70:	680b      	ldr	r3, [r1, #0]
 800ab72:	1d1a      	adds	r2, r3, #4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	600a      	str	r2, [r1, #0]
 800ab78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab80:	2301      	movs	r3, #1
 800ab82:	e0a3      	b.n	800accc <_printf_i+0x1f4>
 800ab84:	6825      	ldr	r5, [r4, #0]
 800ab86:	6808      	ldr	r0, [r1, #0]
 800ab88:	062e      	lsls	r6, r5, #24
 800ab8a:	f100 0304 	add.w	r3, r0, #4
 800ab8e:	d50a      	bpl.n	800aba6 <_printf_i+0xce>
 800ab90:	6805      	ldr	r5, [r0, #0]
 800ab92:	600b      	str	r3, [r1, #0]
 800ab94:	2d00      	cmp	r5, #0
 800ab96:	da03      	bge.n	800aba0 <_printf_i+0xc8>
 800ab98:	232d      	movs	r3, #45	; 0x2d
 800ab9a:	426d      	negs	r5, r5
 800ab9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aba0:	485e      	ldr	r0, [pc, #376]	; (800ad1c <_printf_i+0x244>)
 800aba2:	230a      	movs	r3, #10
 800aba4:	e019      	b.n	800abda <_printf_i+0x102>
 800aba6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800abaa:	6805      	ldr	r5, [r0, #0]
 800abac:	600b      	str	r3, [r1, #0]
 800abae:	bf18      	it	ne
 800abb0:	b22d      	sxthne	r5, r5
 800abb2:	e7ef      	b.n	800ab94 <_printf_i+0xbc>
 800abb4:	680b      	ldr	r3, [r1, #0]
 800abb6:	6825      	ldr	r5, [r4, #0]
 800abb8:	1d18      	adds	r0, r3, #4
 800abba:	6008      	str	r0, [r1, #0]
 800abbc:	0628      	lsls	r0, r5, #24
 800abbe:	d501      	bpl.n	800abc4 <_printf_i+0xec>
 800abc0:	681d      	ldr	r5, [r3, #0]
 800abc2:	e002      	b.n	800abca <_printf_i+0xf2>
 800abc4:	0669      	lsls	r1, r5, #25
 800abc6:	d5fb      	bpl.n	800abc0 <_printf_i+0xe8>
 800abc8:	881d      	ldrh	r5, [r3, #0]
 800abca:	4854      	ldr	r0, [pc, #336]	; (800ad1c <_printf_i+0x244>)
 800abcc:	2f6f      	cmp	r7, #111	; 0x6f
 800abce:	bf0c      	ite	eq
 800abd0:	2308      	moveq	r3, #8
 800abd2:	230a      	movne	r3, #10
 800abd4:	2100      	movs	r1, #0
 800abd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abda:	6866      	ldr	r6, [r4, #4]
 800abdc:	60a6      	str	r6, [r4, #8]
 800abde:	2e00      	cmp	r6, #0
 800abe0:	bfa2      	ittt	ge
 800abe2:	6821      	ldrge	r1, [r4, #0]
 800abe4:	f021 0104 	bicge.w	r1, r1, #4
 800abe8:	6021      	strge	r1, [r4, #0]
 800abea:	b90d      	cbnz	r5, 800abf0 <_printf_i+0x118>
 800abec:	2e00      	cmp	r6, #0
 800abee:	d04d      	beq.n	800ac8c <_printf_i+0x1b4>
 800abf0:	4616      	mov	r6, r2
 800abf2:	fbb5 f1f3 	udiv	r1, r5, r3
 800abf6:	fb03 5711 	mls	r7, r3, r1, r5
 800abfa:	5dc7      	ldrb	r7, [r0, r7]
 800abfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac00:	462f      	mov	r7, r5
 800ac02:	42bb      	cmp	r3, r7
 800ac04:	460d      	mov	r5, r1
 800ac06:	d9f4      	bls.n	800abf2 <_printf_i+0x11a>
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d10b      	bne.n	800ac24 <_printf_i+0x14c>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	07df      	lsls	r7, r3, #31
 800ac10:	d508      	bpl.n	800ac24 <_printf_i+0x14c>
 800ac12:	6923      	ldr	r3, [r4, #16]
 800ac14:	6861      	ldr	r1, [r4, #4]
 800ac16:	4299      	cmp	r1, r3
 800ac18:	bfde      	ittt	le
 800ac1a:	2330      	movle	r3, #48	; 0x30
 800ac1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac20:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac24:	1b92      	subs	r2, r2, r6
 800ac26:	6122      	str	r2, [r4, #16]
 800ac28:	f8cd a000 	str.w	sl, [sp]
 800ac2c:	464b      	mov	r3, r9
 800ac2e:	aa03      	add	r2, sp, #12
 800ac30:	4621      	mov	r1, r4
 800ac32:	4640      	mov	r0, r8
 800ac34:	f7ff fee2 	bl	800a9fc <_printf_common>
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d14c      	bne.n	800acd6 <_printf_i+0x1fe>
 800ac3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac40:	b004      	add	sp, #16
 800ac42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac46:	4835      	ldr	r0, [pc, #212]	; (800ad1c <_printf_i+0x244>)
 800ac48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	680e      	ldr	r6, [r1, #0]
 800ac50:	061f      	lsls	r7, r3, #24
 800ac52:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac56:	600e      	str	r6, [r1, #0]
 800ac58:	d514      	bpl.n	800ac84 <_printf_i+0x1ac>
 800ac5a:	07d9      	lsls	r1, r3, #31
 800ac5c:	bf44      	itt	mi
 800ac5e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac62:	6023      	strmi	r3, [r4, #0]
 800ac64:	b91d      	cbnz	r5, 800ac6e <_printf_i+0x196>
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	f023 0320 	bic.w	r3, r3, #32
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	2310      	movs	r3, #16
 800ac70:	e7b0      	b.n	800abd4 <_printf_i+0xfc>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	f043 0320 	orr.w	r3, r3, #32
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	2378      	movs	r3, #120	; 0x78
 800ac7c:	4828      	ldr	r0, [pc, #160]	; (800ad20 <_printf_i+0x248>)
 800ac7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac82:	e7e3      	b.n	800ac4c <_printf_i+0x174>
 800ac84:	065e      	lsls	r6, r3, #25
 800ac86:	bf48      	it	mi
 800ac88:	b2ad      	uxthmi	r5, r5
 800ac8a:	e7e6      	b.n	800ac5a <_printf_i+0x182>
 800ac8c:	4616      	mov	r6, r2
 800ac8e:	e7bb      	b.n	800ac08 <_printf_i+0x130>
 800ac90:	680b      	ldr	r3, [r1, #0]
 800ac92:	6826      	ldr	r6, [r4, #0]
 800ac94:	6960      	ldr	r0, [r4, #20]
 800ac96:	1d1d      	adds	r5, r3, #4
 800ac98:	600d      	str	r5, [r1, #0]
 800ac9a:	0635      	lsls	r5, r6, #24
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	d501      	bpl.n	800aca4 <_printf_i+0x1cc>
 800aca0:	6018      	str	r0, [r3, #0]
 800aca2:	e002      	b.n	800acaa <_printf_i+0x1d2>
 800aca4:	0671      	lsls	r1, r6, #25
 800aca6:	d5fb      	bpl.n	800aca0 <_printf_i+0x1c8>
 800aca8:	8018      	strh	r0, [r3, #0]
 800acaa:	2300      	movs	r3, #0
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	4616      	mov	r6, r2
 800acb0:	e7ba      	b.n	800ac28 <_printf_i+0x150>
 800acb2:	680b      	ldr	r3, [r1, #0]
 800acb4:	1d1a      	adds	r2, r3, #4
 800acb6:	600a      	str	r2, [r1, #0]
 800acb8:	681e      	ldr	r6, [r3, #0]
 800acba:	6862      	ldr	r2, [r4, #4]
 800acbc:	2100      	movs	r1, #0
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7f5 fa96 	bl	80001f0 <memchr>
 800acc4:	b108      	cbz	r0, 800acca <_printf_i+0x1f2>
 800acc6:	1b80      	subs	r0, r0, r6
 800acc8:	6060      	str	r0, [r4, #4]
 800acca:	6863      	ldr	r3, [r4, #4]
 800accc:	6123      	str	r3, [r4, #16]
 800acce:	2300      	movs	r3, #0
 800acd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acd4:	e7a8      	b.n	800ac28 <_printf_i+0x150>
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	4632      	mov	r2, r6
 800acda:	4649      	mov	r1, r9
 800acdc:	4640      	mov	r0, r8
 800acde:	47d0      	blx	sl
 800ace0:	3001      	adds	r0, #1
 800ace2:	d0ab      	beq.n	800ac3c <_printf_i+0x164>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	079b      	lsls	r3, r3, #30
 800ace8:	d413      	bmi.n	800ad12 <_printf_i+0x23a>
 800acea:	68e0      	ldr	r0, [r4, #12]
 800acec:	9b03      	ldr	r3, [sp, #12]
 800acee:	4298      	cmp	r0, r3
 800acf0:	bfb8      	it	lt
 800acf2:	4618      	movlt	r0, r3
 800acf4:	e7a4      	b.n	800ac40 <_printf_i+0x168>
 800acf6:	2301      	movs	r3, #1
 800acf8:	4632      	mov	r2, r6
 800acfa:	4649      	mov	r1, r9
 800acfc:	4640      	mov	r0, r8
 800acfe:	47d0      	blx	sl
 800ad00:	3001      	adds	r0, #1
 800ad02:	d09b      	beq.n	800ac3c <_printf_i+0x164>
 800ad04:	3501      	adds	r5, #1
 800ad06:	68e3      	ldr	r3, [r4, #12]
 800ad08:	9903      	ldr	r1, [sp, #12]
 800ad0a:	1a5b      	subs	r3, r3, r1
 800ad0c:	42ab      	cmp	r3, r5
 800ad0e:	dcf2      	bgt.n	800acf6 <_printf_i+0x21e>
 800ad10:	e7eb      	b.n	800acea <_printf_i+0x212>
 800ad12:	2500      	movs	r5, #0
 800ad14:	f104 0619 	add.w	r6, r4, #25
 800ad18:	e7f5      	b.n	800ad06 <_printf_i+0x22e>
 800ad1a:	bf00      	nop
 800ad1c:	0800c4b5 	.word	0x0800c4b5
 800ad20:	0800c4c6 	.word	0x0800c4c6

0800ad24 <__sread>:
 800ad24:	b510      	push	{r4, lr}
 800ad26:	460c      	mov	r4, r1
 800ad28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2c:	f000 f8e2 	bl	800aef4 <_read_r>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	bfab      	itete	ge
 800ad34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad36:	89a3      	ldrhlt	r3, [r4, #12]
 800ad38:	181b      	addge	r3, r3, r0
 800ad3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad3e:	bfac      	ite	ge
 800ad40:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad42:	81a3      	strhlt	r3, [r4, #12]
 800ad44:	bd10      	pop	{r4, pc}

0800ad46 <__swrite>:
 800ad46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4a:	461f      	mov	r7, r3
 800ad4c:	898b      	ldrh	r3, [r1, #12]
 800ad4e:	05db      	lsls	r3, r3, #23
 800ad50:	4605      	mov	r5, r0
 800ad52:	460c      	mov	r4, r1
 800ad54:	4616      	mov	r6, r2
 800ad56:	d505      	bpl.n	800ad64 <__swrite+0x1e>
 800ad58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f000 f868 	bl	800ae34 <_lseek_r>
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad6e:	81a3      	strh	r3, [r4, #12]
 800ad70:	4632      	mov	r2, r6
 800ad72:	463b      	mov	r3, r7
 800ad74:	4628      	mov	r0, r5
 800ad76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7a:	f000 b817 	b.w	800adac <_write_r>

0800ad7e <__sseek>:
 800ad7e:	b510      	push	{r4, lr}
 800ad80:	460c      	mov	r4, r1
 800ad82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad86:	f000 f855 	bl	800ae34 <_lseek_r>
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	bf15      	itete	ne
 800ad90:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad9a:	81a3      	strheq	r3, [r4, #12]
 800ad9c:	bf18      	it	ne
 800ad9e:	81a3      	strhne	r3, [r4, #12]
 800ada0:	bd10      	pop	{r4, pc}

0800ada2 <__sclose>:
 800ada2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada6:	f000 b813 	b.w	800add0 <_close_r>
	...

0800adac <_write_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4d07      	ldr	r5, [pc, #28]	; (800adcc <_write_r+0x20>)
 800adb0:	4604      	mov	r4, r0
 800adb2:	4608      	mov	r0, r1
 800adb4:	4611      	mov	r1, r2
 800adb6:	2200      	movs	r2, #0
 800adb8:	602a      	str	r2, [r5, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	f7f7 fbdf 	bl	800257e <_write>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d102      	bne.n	800adca <_write_r+0x1e>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	b103      	cbz	r3, 800adca <_write_r+0x1e>
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	20002d18 	.word	0x20002d18

0800add0 <_close_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d06      	ldr	r5, [pc, #24]	; (800adec <_close_r+0x1c>)
 800add4:	2300      	movs	r3, #0
 800add6:	4604      	mov	r4, r0
 800add8:	4608      	mov	r0, r1
 800adda:	602b      	str	r3, [r5, #0]
 800addc:	f7f7 fbeb 	bl	80025b6 <_close>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_close_r+0x1a>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_close_r+0x1a>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	20002d18 	.word	0x20002d18

0800adf0 <_fstat_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d07      	ldr	r5, [pc, #28]	; (800ae10 <_fstat_r+0x20>)
 800adf4:	2300      	movs	r3, #0
 800adf6:	4604      	mov	r4, r0
 800adf8:	4608      	mov	r0, r1
 800adfa:	4611      	mov	r1, r2
 800adfc:	602b      	str	r3, [r5, #0]
 800adfe:	f7f7 fbe6 	bl	80025ce <_fstat>
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	d102      	bne.n	800ae0c <_fstat_r+0x1c>
 800ae06:	682b      	ldr	r3, [r5, #0]
 800ae08:	b103      	cbz	r3, 800ae0c <_fstat_r+0x1c>
 800ae0a:	6023      	str	r3, [r4, #0]
 800ae0c:	bd38      	pop	{r3, r4, r5, pc}
 800ae0e:	bf00      	nop
 800ae10:	20002d18 	.word	0x20002d18

0800ae14 <_isatty_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4d06      	ldr	r5, [pc, #24]	; (800ae30 <_isatty_r+0x1c>)
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	f7f7 fbe5 	bl	80025ee <_isatty>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d102      	bne.n	800ae2e <_isatty_r+0x1a>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	b103      	cbz	r3, 800ae2e <_isatty_r+0x1a>
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	20002d18 	.word	0x20002d18

0800ae34 <_lseek_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4d07      	ldr	r5, [pc, #28]	; (800ae54 <_lseek_r+0x20>)
 800ae38:	4604      	mov	r4, r0
 800ae3a:	4608      	mov	r0, r1
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	2200      	movs	r2, #0
 800ae40:	602a      	str	r2, [r5, #0]
 800ae42:	461a      	mov	r2, r3
 800ae44:	f7f7 fbde 	bl	8002604 <_lseek>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_lseek_r+0x1e>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_lseek_r+0x1e>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	20002d18 	.word	0x20002d18

0800ae58 <memcpy>:
 800ae58:	440a      	add	r2, r1
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae60:	d100      	bne.n	800ae64 <memcpy+0xc>
 800ae62:	4770      	bx	lr
 800ae64:	b510      	push	{r4, lr}
 800ae66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6e:	4291      	cmp	r1, r2
 800ae70:	d1f9      	bne.n	800ae66 <memcpy+0xe>
 800ae72:	bd10      	pop	{r4, pc}

0800ae74 <memmove>:
 800ae74:	4288      	cmp	r0, r1
 800ae76:	b510      	push	{r4, lr}
 800ae78:	eb01 0402 	add.w	r4, r1, r2
 800ae7c:	d902      	bls.n	800ae84 <memmove+0x10>
 800ae7e:	4284      	cmp	r4, r0
 800ae80:	4623      	mov	r3, r4
 800ae82:	d807      	bhi.n	800ae94 <memmove+0x20>
 800ae84:	1e43      	subs	r3, r0, #1
 800ae86:	42a1      	cmp	r1, r4
 800ae88:	d008      	beq.n	800ae9c <memmove+0x28>
 800ae8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae92:	e7f8      	b.n	800ae86 <memmove+0x12>
 800ae94:	4402      	add	r2, r0
 800ae96:	4601      	mov	r1, r0
 800ae98:	428a      	cmp	r2, r1
 800ae9a:	d100      	bne.n	800ae9e <memmove+0x2a>
 800ae9c:	bd10      	pop	{r4, pc}
 800ae9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aea6:	e7f7      	b.n	800ae98 <memmove+0x24>

0800aea8 <_realloc_r>:
 800aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeaa:	4607      	mov	r7, r0
 800aeac:	4614      	mov	r4, r2
 800aeae:	460e      	mov	r6, r1
 800aeb0:	b921      	cbnz	r1, 800aebc <_realloc_r+0x14>
 800aeb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	f7ff b832 	b.w	8009f20 <_malloc_r>
 800aebc:	b922      	cbnz	r2, 800aec8 <_realloc_r+0x20>
 800aebe:	f7fe ffdf 	bl	8009e80 <_free_r>
 800aec2:	4625      	mov	r5, r4
 800aec4:	4628      	mov	r0, r5
 800aec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec8:	f000 f826 	bl	800af18 <_malloc_usable_size_r>
 800aecc:	42a0      	cmp	r0, r4
 800aece:	d20f      	bcs.n	800aef0 <_realloc_r+0x48>
 800aed0:	4621      	mov	r1, r4
 800aed2:	4638      	mov	r0, r7
 800aed4:	f7ff f824 	bl	8009f20 <_malloc_r>
 800aed8:	4605      	mov	r5, r0
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d0f2      	beq.n	800aec4 <_realloc_r+0x1c>
 800aede:	4631      	mov	r1, r6
 800aee0:	4622      	mov	r2, r4
 800aee2:	f7ff ffb9 	bl	800ae58 <memcpy>
 800aee6:	4631      	mov	r1, r6
 800aee8:	4638      	mov	r0, r7
 800aeea:	f7fe ffc9 	bl	8009e80 <_free_r>
 800aeee:	e7e9      	b.n	800aec4 <_realloc_r+0x1c>
 800aef0:	4635      	mov	r5, r6
 800aef2:	e7e7      	b.n	800aec4 <_realloc_r+0x1c>

0800aef4 <_read_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	; (800af14 <_read_r+0x20>)
 800aef8:	4604      	mov	r4, r0
 800aefa:	4608      	mov	r0, r1
 800aefc:	4611      	mov	r1, r2
 800aefe:	2200      	movs	r2, #0
 800af00:	602a      	str	r2, [r5, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	f7f7 fb1e 	bl	8002544 <_read>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_read_r+0x1e>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_read_r+0x1e>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	20002d18 	.word	0x20002d18

0800af18 <_malloc_usable_size_r>:
 800af18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af1c:	1f18      	subs	r0, r3, #4
 800af1e:	2b00      	cmp	r3, #0
 800af20:	bfbc      	itt	lt
 800af22:	580b      	ldrlt	r3, [r1, r0]
 800af24:	18c0      	addlt	r0, r0, r3
 800af26:	4770      	bx	lr

0800af28 <_init>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	bf00      	nop
 800af2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2e:	bc08      	pop	{r3}
 800af30:	469e      	mov	lr, r3
 800af32:	4770      	bx	lr

0800af34 <_fini>:
 800af34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af36:	bf00      	nop
 800af38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af3a:	bc08      	pop	{r3}
 800af3c:	469e      	mov	lr, r3
 800af3e:	4770      	bx	lr
