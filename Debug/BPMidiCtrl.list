
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015d8  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3fc  0800b3fc  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3fc  0800b3fc  0001b3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b404  0800b404  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b404  0800b404  0001b404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b408  0800b408  0001b408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800b40c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b9c  2000021c  0800b628  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002db8  0800b628  00022db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5d3  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e4e  00000000  00000000  0003b81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0003f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  000407d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c14e  00000000  00000000  00041798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187d4  00000000  00000000  0005d8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b31  00000000  00000000  000760ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00116beb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de4  00000000  00000000  00116c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e0c 	.word	0x08009e0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	08009e0c 	.word	0x08009e0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b96e 	b.w	8000ca0 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9d08      	ldr	r5, [sp, #32]
 80009e2:	4604      	mov	r4, r0
 80009e4:	468c      	mov	ip, r1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8083 	bne.w	8000af2 <__udivmoddi4+0x116>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d947      	bls.n	8000a82 <__udivmoddi4+0xa6>
 80009f2:	fab2 f282 	clz	r2, r2
 80009f6:	b142      	cbz	r2, 8000a0a <__udivmoddi4+0x2e>
 80009f8:	f1c2 0020 	rsb	r0, r2, #32
 80009fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4097      	lsls	r7, r2
 8000a04:	ea40 0c01 	orr.w	ip, r0, r1
 8000a08:	4094      	lsls	r4, r2
 8000a0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a0e:	0c23      	lsrs	r3, r4, #16
 8000a10:	fbbc f6f8 	udiv	r6, ip, r8
 8000a14:	fa1f fe87 	uxth.w	lr, r7
 8000a18:	fb08 c116 	mls	r1, r8, r6, ip
 8000a1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a20:	fb06 f10e 	mul.w	r1, r6, lr
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d909      	bls.n	8000a3c <__udivmoddi4+0x60>
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2e:	f080 8119 	bcs.w	8000c64 <__udivmoddi4+0x288>
 8000a32:	4299      	cmp	r1, r3
 8000a34:	f240 8116 	bls.w	8000c64 <__udivmoddi4+0x288>
 8000a38:	3e02      	subs	r6, #2
 8000a3a:	443b      	add	r3, r7
 8000a3c:	1a5b      	subs	r3, r3, r1
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a44:	fb08 3310 	mls	r3, r8, r0, r3
 8000a48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x8c>
 8000a54:	193c      	adds	r4, r7, r4
 8000a56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a5a:	f080 8105 	bcs.w	8000c68 <__udivmoddi4+0x28c>
 8000a5e:	45a6      	cmp	lr, r4
 8000a60:	f240 8102 	bls.w	8000c68 <__udivmoddi4+0x28c>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	2600      	movs	r6, #0
 8000a72:	b11d      	cbz	r5, 8000a7c <__udivmoddi4+0xa0>
 8000a74:	40d4      	lsrs	r4, r2
 8000a76:	2300      	movs	r3, #0
 8000a78:	e9c5 4300 	strd	r4, r3, [r5]
 8000a7c:	4631      	mov	r1, r6
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	b902      	cbnz	r2, 8000a86 <__udivmoddi4+0xaa>
 8000a84:	deff      	udf	#255	; 0xff
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d150      	bne.n	8000b30 <__udivmoddi4+0x154>
 8000a8e:	1bcb      	subs	r3, r1, r7
 8000a90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a94:	fa1f f887 	uxth.w	r8, r7
 8000a98:	2601      	movs	r6, #1
 8000a9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a9e:	0c21      	lsrs	r1, r4, #16
 8000aa0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb08 f30c 	mul.w	r3, r8, ip
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0xe4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0xe2>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	f200 80e9 	bhi.w	8000c90 <__udivmoddi4+0x2b4>
 8000abe:	4684      	mov	ip, r0
 8000ac0:	1ac9      	subs	r1, r1, r3
 8000ac2:	b2a3      	uxth	r3, r4
 8000ac4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000acc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad0:	fb08 f800 	mul.w	r8, r8, r0
 8000ad4:	45a0      	cmp	r8, r4
 8000ad6:	d907      	bls.n	8000ae8 <__udivmoddi4+0x10c>
 8000ad8:	193c      	adds	r4, r7, r4
 8000ada:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0x10a>
 8000ae0:	45a0      	cmp	r8, r4
 8000ae2:	f200 80d9 	bhi.w	8000c98 <__udivmoddi4+0x2bc>
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	eba4 0408 	sub.w	r4, r4, r8
 8000aec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af0:	e7bf      	b.n	8000a72 <__udivmoddi4+0x96>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x12e>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	f000 80b1 	beq.w	8000c5e <__udivmoddi4+0x282>
 8000afc:	2600      	movs	r6, #0
 8000afe:	e9c5 0100 	strd	r0, r1, [r5]
 8000b02:	4630      	mov	r0, r6
 8000b04:	4631      	mov	r1, r6
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f683 	clz	r6, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d14a      	bne.n	8000ba8 <__udivmoddi4+0x1cc>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0x140>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80b8 	bhi.w	8000c8c <__udivmoddi4+0x2b0>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	468c      	mov	ip, r1
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d0a8      	beq.n	8000a7c <__udivmoddi4+0xa0>
 8000b2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b2e:	e7a5      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000b30:	f1c2 0320 	rsb	r3, r2, #32
 8000b34:	fa20 f603 	lsr.w	r6, r0, r3
 8000b38:	4097      	lsls	r7, r2
 8000b3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b42:	40d9      	lsrs	r1, r3
 8000b44:	4330      	orrs	r0, r6
 8000b46:	0c03      	lsrs	r3, r0, #16
 8000b48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b4c:	fa1f f887 	uxth.w	r8, r7
 8000b50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb06 f108 	mul.w	r1, r6, r8
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x19c>
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b6a:	f080 808d 	bcs.w	8000c88 <__udivmoddi4+0x2ac>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 808a 	bls.w	8000c88 <__udivmoddi4+0x2ac>
 8000b74:	3e02      	subs	r6, #2
 8000b76:	443b      	add	r3, r7
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b281      	uxth	r1, r0
 8000b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b88:	fb00 f308 	mul.w	r3, r0, r8
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x1c4>
 8000b90:	1879      	adds	r1, r7, r1
 8000b92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b96:	d273      	bcs.n	8000c80 <__udivmoddi4+0x2a4>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d971      	bls.n	8000c80 <__udivmoddi4+0x2a4>
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	4439      	add	r1, r7
 8000ba0:	1acb      	subs	r3, r1, r3
 8000ba2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ba6:	e778      	b.n	8000a9a <__udivmoddi4+0xbe>
 8000ba8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bac:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bb4:	431c      	orrs	r4, r3
 8000bb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bba:	fa01 f306 	lsl.w	r3, r1, r6
 8000bbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bc6:	431f      	orrs	r7, r3
 8000bc8:	0c3b      	lsrs	r3, r7, #16
 8000bca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bce:	fa1f f884 	uxth.w	r8, r4
 8000bd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bda:	fb09 fa08 	mul.w	sl, r9, r8
 8000bde:	458a      	cmp	sl, r1
 8000be0:	fa02 f206 	lsl.w	r2, r2, r6
 8000be4:	fa00 f306 	lsl.w	r3, r0, r6
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x220>
 8000bea:	1861      	adds	r1, r4, r1
 8000bec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf0:	d248      	bcs.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf2:	458a      	cmp	sl, r1
 8000bf4:	d946      	bls.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4421      	add	r1, r4
 8000bfc:	eba1 010a 	sub.w	r1, r1, sl
 8000c00:	b2bf      	uxth	r7, r7
 8000c02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c0e:	fb00 f808 	mul.w	r8, r0, r8
 8000c12:	45b8      	cmp	r8, r7
 8000c14:	d907      	bls.n	8000c26 <__udivmoddi4+0x24a>
 8000c16:	19e7      	adds	r7, r4, r7
 8000c18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1c:	d22e      	bcs.n	8000c7c <__udivmoddi4+0x2a0>
 8000c1e:	45b8      	cmp	r8, r7
 8000c20:	d92c      	bls.n	8000c7c <__udivmoddi4+0x2a0>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4427      	add	r7, r4
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	eba7 0708 	sub.w	r7, r7, r8
 8000c2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c32:	454f      	cmp	r7, r9
 8000c34:	46c6      	mov	lr, r8
 8000c36:	4649      	mov	r1, r9
 8000c38:	d31a      	bcc.n	8000c70 <__udivmoddi4+0x294>
 8000c3a:	d017      	beq.n	8000c6c <__udivmoddi4+0x290>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x27a>
 8000c3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c42:	eb67 0701 	sbc.w	r7, r7, r1
 8000c46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c4a:	40f2      	lsrs	r2, r6
 8000c4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c50:	40f7      	lsrs	r7, r6
 8000c52:	e9c5 2700 	strd	r2, r7, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	462e      	mov	r6, r5
 8000c60:	4628      	mov	r0, r5
 8000c62:	e70b      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000c64:	4606      	mov	r6, r0
 8000c66:	e6e9      	b.n	8000a3c <__udivmoddi4+0x60>
 8000c68:	4618      	mov	r0, r3
 8000c6a:	e6fd      	b.n	8000a68 <__udivmoddi4+0x8c>
 8000c6c:	4543      	cmp	r3, r8
 8000c6e:	d2e5      	bcs.n	8000c3c <__udivmoddi4+0x260>
 8000c70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c74:	eb69 0104 	sbc.w	r1, r9, r4
 8000c78:	3801      	subs	r0, #1
 8000c7a:	e7df      	b.n	8000c3c <__udivmoddi4+0x260>
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	e7d2      	b.n	8000c26 <__udivmoddi4+0x24a>
 8000c80:	4660      	mov	r0, ip
 8000c82:	e78d      	b.n	8000ba0 <__udivmoddi4+0x1c4>
 8000c84:	4681      	mov	r9, r0
 8000c86:	e7b9      	b.n	8000bfc <__udivmoddi4+0x220>
 8000c88:	4666      	mov	r6, ip
 8000c8a:	e775      	b.n	8000b78 <__udivmoddi4+0x19c>
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	e74a      	b.n	8000b26 <__udivmoddi4+0x14a>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	4439      	add	r1, r7
 8000c96:	e713      	b.n	8000ac0 <__udivmoddi4+0xe4>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	e724      	b.n	8000ae8 <__udivmoddi4+0x10c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <ADC_DMA_average>:
void i2c_select(uint8_t mux_addr, uint8_t i);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_DMA_average(int channel) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum;
	int i;

	adc_sum = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
	if (channel < NUM_ADC_CHANNELS) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	dc14      	bgt.n	8000ce0 <ADC_DMA_average+0x3c>
		for (i = 0; i < NUM_ADC_SAMPLES; i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	e00d      	b.n	8000cd8 <ADC_DMA_average+0x34>
			adc_sum += adcBuf[channel + i * NUM_ADC_CHANNELS];
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	009a      	lsls	r2, r3, #2
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <ADC_DMA_average+0x54>)
 8000cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < NUM_ADC_SAMPLES; i++)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b1f      	cmp	r3, #31
 8000cdc:	ddee      	ble.n	8000cbc <ADC_DMA_average+0x18>
 8000cde:	e001      	b.n	8000ce4 <ADC_DMA_average+0x40>
	} else
		return 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e002      	b.n	8000cea <ADC_DMA_average+0x46>

	return adc_sum / NUM_ADC_SAMPLES;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	b29b      	uxth	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000238 	.word	0x20000238
 8000cfc:	00000000 	.word	0x00000000

08000d00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d02:	b08b      	sub	sp, #44	; 0x2c
 8000d04:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d06:	f000 fcff 	bl	8001708 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d0a:	f000 f943 	bl	8000f94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d0e:	f000 fab7 	bl	8001280 <MX_GPIO_Init>
	MX_RTC_Init();
 8000d12:	f000 fa6f 	bl	80011f4 <MX_RTC_Init>
	MX_DMA_Init();
 8000d16:	f000 fa93 	bl	8001240 <MX_DMA_Init>
	MX_ADC1_Init();
 8000d1a:	f000 f9c1 	bl	80010a0 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000d1e:	f000 fa3b 	bl	8001198 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 8000d22:	f007 ff85 	bl	8008c30 <MX_USB_DEVICE_Init>
	//MX_SDIO_SD_Init();

	/* USER CODE BEGIN 2 */
	// Init displays
	for (int i = 0; i < 4; i++) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	e026      	b.n	8000d7a <main+0x7a>
		dmux_select(knobs[i].row, knobs[i].col);
 8000d2c:	4992      	ldr	r1, [pc, #584]	; (8000f78 <main+0x278>)
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	4613      	mov	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	4413      	add	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	440b      	add	r3, r1
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	498e      	ldr	r1, [pc, #568]	; (8000f78 <main+0x278>)
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f000 fad9 	bl	8001308 <dmux_select>
		ssd1306_Init(&hi2c1, I2C_OLED_ADDR);
 8000d56:	2178      	movs	r1, #120	; 0x78
 8000d58:	4888      	ldr	r0, [pc, #544]	; (8000f7c <main+0x27c>)
 8000d5a:	f007 fbe1 	bl	8008520 <ssd1306_Init>
		HAL_Delay(1000);
 8000d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d62:	f000 fd43 	bl	80017ec <HAL_Delay>
		ssd1306_Fill(Black);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f007 fd36 	bl	80087d8 <ssd1306_Fill>
		ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000d6c:	2178      	movs	r1, #120	; 0x78
 8000d6e:	4883      	ldr	r0, [pc, #524]	; (8000f7c <main+0x27c>)
 8000d70:	f007 fd56 	bl	8008820 <ssd1306_UpdateScreen>
	for (int i = 0; i < 4; i++) {
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	ddd5      	ble.n	8000d2c <main+0x2c>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_ADC_Start(&hadc1);
 8000d80:	487f      	ldr	r0, [pc, #508]	; (8000f80 <main+0x280>)
 8000d82:	f000 fd9b 	bl	80018bc <HAL_ADC_Start>
	while (1) {
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	497e      	ldr	r1, [pc, #504]	; (8000f84 <main+0x284>)
 8000d8a:	487d      	ldr	r0, [pc, #500]	; (8000f80 <main+0x280>)
 8000d8c:	f000 fe4a 	bl	8001a24 <HAL_ADC_Start_DMA>

		for (int i = 0; i < 4; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	e0e7      	b.n	8000f66 <main+0x266>
			uint8_t last_MIDI_val = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	71fb      	strb	r3, [r7, #7]
			uint8_t curr_MIDI_val = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	71bb      	strb	r3, [r7, #6]

			adcFiltered[i] = ADC_DMA_average(i);
 8000d9e:	68b8      	ldr	r0, [r7, #8]
 8000da0:	f7ff ff80 	bl	8000ca4 <ADC_DMA_average>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4619      	mov	r1, r3
 8000da8:	4a77      	ldr	r2, [pc, #476]	; (8000f88 <main+0x288>)
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			last_MIDI_val = knobs[i].value;
 8000db0:	4971      	ldr	r1, [pc, #452]	; (8000f78 <main+0x278>)
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	4613      	mov	r3, r2
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	4413      	add	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3322      	adds	r3, #34	; 0x22
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
			curr_MIDI_val = MIN((EMA_A_M * slope * adcFiltered[i]) + ((1 - EMA_A_M) * knobs[i].value), 127);
 8000dc4:	4b71      	ldr	r3, [pc, #452]	; (8000f8c <main+0x28c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fcef 	bl	80007ac <__aeabi_f2d>
 8000dce:	4b70      	ldr	r3, [pc, #448]	; (8000f90 <main+0x290>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f7ff fa5c 	bl	8000290 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4614      	mov	r4, r2
 8000dde:	461d      	mov	r5, r3
 8000de0:	4a69      	ldr	r2, [pc, #420]	; (8000f88 <main+0x288>)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fccd 	bl	8000788 <__aeabi_i2d>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4620      	mov	r0, r4
 8000df4:	4629      	mov	r1, r5
 8000df6:	f7ff fa4b 	bl	8000290 <__aeabi_dmul>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4614      	mov	r4, r2
 8000e00:	461d      	mov	r5, r3
 8000e02:	4b62      	ldr	r3, [pc, #392]	; (8000f8c <main+0x28c>)
 8000e04:	edd3 7a00 	vldr	s15, [r3]
 8000e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e10:	4959      	ldr	r1, [pc, #356]	; (8000f78 <main+0x278>)
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	4613      	mov	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4413      	add	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3322      	adds	r3, #34	; 0x22
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	ee07 3a90 	vmov	s15, r3
 8000e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e2e:	ee17 0a90 	vmov	r0, s15
 8000e32:	f7ff fcbb 	bl	80007ac <__aeabi_f2d>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	f7ff fb57 	bl	80004f0 <__adddf3>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	a349      	add	r3, pc, #292	; (adr r3, 8000f70 <main+0x270>)
 8000e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e50:	f7ff fd64 	bl	800091c <__aeabi_dcmplt>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d047      	beq.n	8000eea <main+0x1ea>
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <main+0x28c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fca4 	bl	80007ac <__aeabi_f2d>
 8000e64:	4b4a      	ldr	r3, [pc, #296]	; (8000f90 <main+0x290>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff fa11 	bl	8000290 <__aeabi_dmul>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4614      	mov	r4, r2
 8000e74:	461d      	mov	r5, r3
 8000e76:	4a44      	ldr	r2, [pc, #272]	; (8000f88 <main+0x288>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fc82 	bl	8000788 <__aeabi_i2d>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4620      	mov	r0, r4
 8000e8a:	4629      	mov	r1, r5
 8000e8c:	f7ff fa00 	bl	8000290 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4614      	mov	r4, r2
 8000e96:	461d      	mov	r5, r3
 8000e98:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <main+0x28c>)
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ea2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ea6:	4934      	ldr	r1, [pc, #208]	; (8000f78 <main+0x278>)
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4413      	add	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3322      	adds	r3, #34	; 0x22
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	ee07 3a90 	vmov	s15, r3
 8000ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec4:	ee17 0a90 	vmov	r0, s15
 8000ec8:	f7ff fc70 	bl	80007ac <__aeabi_f2d>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	4629      	mov	r1, r5
 8000ed4:	f7ff fb0c 	bl	80004f0 <__adddf3>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f7ff fd44 	bl	800096c <__aeabi_d2uiz>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	e000      	b.n	8000eec <main+0x1ec>
 8000eea:	237f      	movs	r3, #127	; 0x7f
 8000eec:	71bb      	strb	r3, [r7, #6]

			if (curr_MIDI_val != last_MIDI_val) {
 8000eee:	79ba      	ldrb	r2, [r7, #6]
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d034      	beq.n	8000f60 <main+0x260>
				knobs[i].value = curr_MIDI_val;
 8000ef6:	4920      	ldr	r1, [pc, #128]	; (8000f78 <main+0x278>)
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	4613      	mov	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	3322      	adds	r3, #34	; 0x22
 8000f06:	79ba      	ldrb	r2, [r7, #6]
 8000f08:	701a      	strb	r2, [r3, #0]
				dmux_select(knobs[i].row, knobs[i].col);
 8000f0a:	491b      	ldr	r1, [pc, #108]	; (8000f78 <main+0x278>)
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	4916      	ldr	r1, [pc, #88]	; (8000f78 <main+0x278>)
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f000 f9ea 	bl	8001308 <dmux_select>
				ssd1306_WriteKnob(knobs[i]);
 8000f34:	4910      	ldr	r1, [pc, #64]	; (8000f78 <main+0x278>)
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	18ce      	adds	r6, r1, r3
 8000f42:	466d      	mov	r5, sp
 8000f44:	f106 0410 	add.w	r4, r6, #16
 8000f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	602b      	str	r3, [r5, #0]
 8000f50:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f54:	f007 fc9e 	bl	8008894 <ssd1306_WriteKnob>
				ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000f58:	2178      	movs	r1, #120	; 0x78
 8000f5a:	4808      	ldr	r0, [pc, #32]	; (8000f7c <main+0x27c>)
 8000f5c:	f007 fc60 	bl	8008820 <ssd1306_UpdateScreen>
		for (int i = 0; i < 4; i++) {
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	f77f af14 	ble.w	8000d96 <main+0x96>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 8000f6e:	e70a      	b.n	8000d86 <main+0x86>
 8000f70:	00000000 	.word	0x00000000
 8000f74:	405fc000 	.word	0x405fc000
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	2000232c 	.word	0x2000232c
 8000f80:	20002380 	.word	0x20002380
 8000f84:	20000238 	.word	0x20000238
 8000f88:	20000338 	.word	0x20000338
 8000f8c:	20000098 	.word	0x20000098
 8000f90:	20000090 	.word	0x20000090

08000f94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09a      	sub	sp, #104	; 0x68
 8000f98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f9e:	2230      	movs	r2, #48	; 0x30
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f008 fafc 	bl	80095a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <SystemClock_Config+0x104>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <SystemClock_Config+0x104>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <SystemClock_Config+0x104>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b2c      	ldr	r3, [pc, #176]	; (800109c <SystemClock_Config+0x108>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a2b      	ldr	r2, [pc, #172]	; (800109c <SystemClock_Config+0x108>)
 8000ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <SystemClock_Config+0x108>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001002:	230b      	movs	r3, #11
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001010:	2310      	movs	r3, #16
 8001012:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001020:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 15;
 8001022:	230f      	movs	r3, #15
 8001024:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 144;
 8001026:	2390      	movs	r3, #144	; 0x90
 8001028:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102a:	2302      	movs	r3, #2
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800102e:	2305      	movs	r3, #5
 8001030:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001032:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fecc 	bl	8004dd4 <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xb2>
		Error_Handler();
 8001042:	f000 f9ae 	bl	80013a2 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001046:	230f      	movs	r3, #15
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f004 f92f 	bl	80052c4 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xdc>
		Error_Handler();
 800106c:	f000 f999 	bl	80013a2 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001070:	2302      	movs	r3, #2
 8001072:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001078:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4618      	mov	r0, r3
 8001080:	f004 fadc 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xfa>
		Error_Handler();
 800108a:	f000 f98a 	bl	80013a2 <Error_Handler>
	}
}
 800108e:	bf00      	nop
 8001090:	3768      	adds	r7, #104	; 0x68
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80010b2:	4b36      	ldr	r3, [pc, #216]	; (800118c <MX_ADC1_Init+0xec>)
 80010b4:	4a36      	ldr	r2, [pc, #216]	; (8001190 <MX_ADC1_Init+0xf0>)
 80010b6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010b8:	4b34      	ldr	r3, [pc, #208]	; (800118c <MX_ADC1_Init+0xec>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80010be:	4b33      	ldr	r3, [pc, #204]	; (800118c <MX_ADC1_Init+0xec>)
 80010c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010c4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <MX_ADC1_Init+0xec>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <MX_ADC1_Init+0xec>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <MX_ADC1_Init+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <MX_ADC1_Init+0xec>)
 80010dc:	2200      	movs	r2, #0
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <MX_ADC1_Init+0xec>)
 80010e2:	4a2c      	ldr	r2, [pc, #176]	; (8001194 <MX_ADC1_Init+0xf4>)
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_ADC1_Init+0xec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <MX_ADC1_Init+0xec>)
 80010ee:	2204      	movs	r2, #4
 80010f0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_ADC1_Init+0xec>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <MX_ADC1_Init+0xec>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001100:	4822      	ldr	r0, [pc, #136]	; (800118c <MX_ADC1_Init+0xec>)
 8001102:	f000 fb97 	bl	8001834 <HAL_ADC_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x70>
		Error_Handler();
 800110c:	f000 f949 	bl	80013a2 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001118:	2301      	movs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	481a      	ldr	r0, [pc, #104]	; (800118c <MX_ADC1_Init+0xec>)
 8001122:	f000 fdd3 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x90>
		Error_Handler();
 800112c:	f000 f939 	bl	80013a2 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001130:	2301      	movs	r3, #1
 8001132:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <MX_ADC1_Init+0xec>)
 800113e:	f000 fdc5 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0xac>
		Error_Handler();
 8001148:	f000 f92b 	bl	80013a2 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 800114c:	2302      	movs	r3, #2
 800114e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8001150:	2303      	movs	r3, #3
 8001152:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001154:	463b      	mov	r3, r7
 8001156:	4619      	mov	r1, r3
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <MX_ADC1_Init+0xec>)
 800115a:	f000 fdb7 	bl	8001ccc <HAL_ADC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC1_Init+0xc8>
		Error_Handler();
 8001164:	f000 f91d 	bl	80013a2 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001168:	2303      	movs	r3, #3
 800116a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 800116c:	2304      	movs	r3, #4
 800116e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_ADC1_Init+0xec>)
 8001176:	f000 fda9 	bl	8001ccc <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0xe4>
		Error_Handler();
 8001180:	f000 f90f 	bl	80013a2 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20002380 	.word	0x20002380
 8001190:	40012000 	.word	0x40012000
 8001194:	0f000001 	.word	0x0f000001

08001198 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_I2C1_Init+0x50>)
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_I2C1_Init+0x54>)
 80011a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x58>)
 80011a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d6:	f001 fe9f 	bl	8002f18 <HAL_I2C_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011e0:	f000 f8df 	bl	80013a2 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000232c 	.word	0x2000232c
 80011ec:	40005400 	.word	0x40005400
 80011f0:	00061a80 	.word	0x00061a80

080011f4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_RTC_Init+0x44>)
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <MX_RTC_Init+0x48>)
 80011fc:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_RTC_Init+0x44>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_RTC_Init+0x44>)
 8001206:	227f      	movs	r2, #127	; 0x7f
 8001208:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_RTC_Init+0x44>)
 800120c:	22ff      	movs	r2, #255	; 0xff
 800120e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_RTC_Init+0x44>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_RTC_Init+0x44>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_RTC_Init+0x44>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_RTC_Init+0x44>)
 8001224:	f004 fafa 	bl	800581c <HAL_RTC_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_RTC_Init+0x3e>
		Error_Handler();
 800122e:	f000 f8b8 	bl	80013a2 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20002428 	.word	0x20002428
 800123c:	40002800 	.word	0x40002800

08001240 <MX_DMA_Init>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_DMA_Init+0x3c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <MX_DMA_Init+0x3c>)
 8001250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_DMA_Init+0x3c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2038      	movs	r0, #56	; 0x38
 8001268:	f001 f8bb 	bl	80023e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800126c:	2038      	movs	r0, #56	; 0x38
 800126e:	f001 f8d4 	bl	800241a <HAL_NVIC_EnableIRQ>

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_GPIO_Init+0x84>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <MX_GPIO_Init+0x84>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_GPIO_Init+0x84>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_GPIO_Init+0x84>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a16      	ldr	r2, [pc, #88]	; (8001304 <MX_GPIO_Init+0x84>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_GPIO_Init+0x84>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_GPIO_Init+0x84>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <MX_GPIO_Init+0x84>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_GPIO_Init+0x84>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_GPIO_Init+0x84>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <MX_GPIO_Init+0x84>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_GPIO_Init+0x84>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <dmux_select>:

void dmux_select(uint8_t row, uint8_t col) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	460a      	mov	r2, r1
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	4613      	mov	r3, r2
 8001316:	71bb      	strb	r3, [r7, #6]
	 master_mux_i = 1;
	 slave_mux_i = 1;
	 break;
	 }
	 */
	i2c_select(I2C_MUX_MASTER, row);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4619      	mov	r1, r3
 800131c:	20e2      	movs	r0, #226	; 0xe2
 800131e:	f000 f809 	bl	8001334 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, col);
 8001322:	79bb      	ldrb	r3, [r7, #6]
 8001324:	4619      	mov	r1, r3
 8001326:	20e0      	movs	r0, #224	; 0xe0
 8001328:	f000 f804 	bl	8001334 <i2c_select>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <i2c_select>:

/* USER CODE BEGIN 4 */
void i2c_select(uint8_t mux_addr, uint8_t i) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af02      	add	r7, sp, #8
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	if (i > 7) return;
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	2b07      	cmp	r3, #7
 8001348:	d810      	bhi.n	800136c <i2c_select+0x38>
	unsigned char temp[1];
	temp[0] = 1 << i;
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	2201      	movs	r2, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	b299      	uxth	r1, r3
 800135a:	f107 020c 	add.w	r2, r7, #12
 800135e:	2364      	movs	r3, #100	; 0x64
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2301      	movs	r3, #1
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <i2c_select+0x40>)
 8001366:	f001 ff1b 	bl	80031a0 <HAL_I2C_Master_Transmit>
 800136a:	e000      	b.n	800136e <i2c_select+0x3a>
	if (i > 7) return;
 800136c:	bf00      	nop
}
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000232c 	.word	0x2000232c

08001378 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fc35 	bl	8001c04 <HAL_ADC_Stop_DMA>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a6:	b672      	cpsid	i
}
 80013a8:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013aa:	e7fe      	b.n	80013aa <Error_Handler+0x8>

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_MspInit+0x4c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_MspInit+0x4c>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_MspInit+0x4c>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <HAL_ADC_MspInit+0xdc>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d157      	bne.n	80014ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a26      	ldr	r2, [pc, #152]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_ADC_MspInit+0xe0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001456:	230f      	movs	r3, #15
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145a:	2303      	movs	r3, #3
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	481d      	ldr	r0, [pc, #116]	; (80014e0 <HAL_ADC_MspInit+0xe4>)
 800146a:	f001 fbd1 	bl	8002c10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 8001470:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_ADC_MspInit+0xec>)
 8001472:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 8001488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 8001490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001494:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 8001498:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014b4:	f000 ffcc 	bl	8002450 <HAL_DMA_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80014be:	f7ff ff70 	bl	80013a2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <HAL_ADC_MspInit+0xe8>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40012000 	.word	0x40012000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	200023c8 	.word	0x200023c8
 80014e8:	40026410 	.word	0x40026410

080014ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_I2C_MspInit+0x84>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d12b      	bne.n	8001566 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800152a:	23c0      	movs	r3, #192	; 0xc0
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152e:	2312      	movs	r3, #18
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001532:	2301      	movs	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153a:	2304      	movs	r3, #4
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <HAL_I2C_MspInit+0x8c>)
 8001546:	f001 fb63 	bl	8002c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_I2C_MspInit+0x88>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40005400 	.word	0x40005400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400

0800157c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_RTC_MspInit+0x24>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d102      	bne.n	8001594 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_RTC_MspInit+0x28>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40002800 	.word	0x40002800
 80015a4:	42470e3c 	.word	0x42470e3c

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 f8da 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <DMA2_Stream0_IRQHandler+0x10>)
 8001602:	f001 f89b 	bl	800273c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200023c8 	.word	0x200023c8

08001610 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <OTG_FS_IRQHandler+0x10>)
 8001616:	f002 fbaa 	bl	8003d6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200029a0 	.word	0x200029a0

08001624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <_sbrk+0x5c>)
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <_sbrk+0x60>)
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <_sbrk+0x64>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <_sbrk+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d207      	bcs.n	8001664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001654:	f007 ff7a 	bl	800954c <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	220c      	movs	r2, #12
 800165c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e009      	b.n	8001678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <_sbrk+0x64>)
 8001674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20020000 	.word	0x20020000
 8001684:	00000400 	.word	0x00000400
 8001688:	20000340 	.word	0x20000340
 800168c:	20002db8 	.word	0x20002db8

08001690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ba:	490e      	ldr	r1, [pc, #56]	; (80016f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d0:	4c0b      	ldr	r4, [pc, #44]	; (8001700 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016de:	f7ff ffd7 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e2:	f007 ff39 	bl	8009558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e6:	f7ff fb0b 	bl	8000d00 <main>
  bx  lr    
 80016ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80016f8:	0800b40c 	.word	0x0800b40c
  ldr r2, =_sbss
 80016fc:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8001700:	20002db8 	.word	0x20002db8

08001704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC_IRQHandler>
	...

08001708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_Init+0x40>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_Init+0x40>)
 800171e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_Init+0x40>)
 800172a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001730:	2003      	movs	r0, #3
 8001732:	f000 fe4b 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001736:	2000      	movs	r0, #0
 8001738:	f000 f808 	bl	800174c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800173c:	f7ff fe36 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023c00 	.word	0x40023c00

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_InitTick+0x54>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x58>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fe63 	bl	8002436 <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00e      	b.n	8001798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d80a      	bhi.n	8001796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f000 fe2b 	bl	80023e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_InitTick+0x5c>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000009c 	.word	0x2000009c
 80017a4:	200000a4 	.word	0x200000a4
 80017a8:	200000a0 	.word	0x200000a0

080017ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x20>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x24>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_IncTick+0x24>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200000a4 	.word	0x200000a4
 80017d0:	200024cc 	.word	0x200024cc

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	200024cc 	.word	0x200024cc

080017ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f4:	f7ff ffee 	bl	80017d4 <HAL_GetTick>
 80017f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d005      	beq.n	8001812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_Delay+0x44>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001812:	bf00      	nop
 8001814:	f7ff ffde 	bl	80017d4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8f7      	bhi.n	8001814 <HAL_Delay+0x28>
  {
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200000a4 	.word	0x200000a4

08001834 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e033      	b.n	80018b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fdd2 	bl	80013fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800187a:	f023 0302 	bic.w	r3, r3, #2
 800187e:	f043 0202 	orr.w	r2, r3, #2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fb52 	bl	8001f30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
 80018a2:	e001      	b.n	80018a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Start+0x1a>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e097      	b.n	8001a06 <HAL_ADC_Start+0x14a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d018      	beq.n	800191e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018fc:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <HAL_ADC_Start+0x158>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a45      	ldr	r2, [pc, #276]	; (8001a18 <HAL_ADC_Start+0x15c>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0c9a      	lsrs	r2, r3, #18
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001910:	e002      	b.n	8001918 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	3b01      	subs	r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f9      	bne.n	8001912 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d15f      	bne.n	80019ec <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001956:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196a:	d106      	bne.n	800197a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f023 0206 	bic.w	r2, r3, #6
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
 8001978:	e002      	b.n	8001980 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_ADC_Start+0x160>)
 800198a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001994:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10f      	bne.n	80019c2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d129      	bne.n	8001a04 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	e020      	b.n	8001a04 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a16      	ldr	r2, [pc, #88]	; (8001a20 <HAL_ADC_Start+0x164>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d11b      	bne.n	8001a04 <HAL_ADC_Start+0x148>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d114      	bne.n	8001a04 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	e00b      	b.n	8001a04 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f043 0210 	orr.w	r2, r3, #16
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	2000009c 	.word	0x2000009c
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	40012300 	.word	0x40012300
 8001a20:	40012000 	.word	0x40012000

08001a24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_Start_DMA+0x1e>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e0ce      	b.n	8001be0 <HAL_ADC_Start_DMA+0x1bc>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d018      	beq.n	8001a8a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a68:	4b5f      	ldr	r3, [pc, #380]	; (8001be8 <HAL_ADC_Start_DMA+0x1c4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a5f      	ldr	r2, [pc, #380]	; (8001bec <HAL_ADC_Start_DMA+0x1c8>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0c9a      	lsrs	r2, r3, #18
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a98:	d107      	bne.n	8001aaa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	f040 8086 	bne.w	8001bc6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af8:	d106      	bne.n	8001b08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f023 0206 	bic.w	r2, r3, #6
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
 8001b06:	e002      	b.n	8001b0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_ADC_Start_DMA+0x1cc>)
 8001b18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1e:	4a35      	ldr	r2, [pc, #212]	; (8001bf4 <HAL_ADC_Start_DMA+0x1d0>)
 8001b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <HAL_ADC_Start_DMA+0x1d4>)
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2e:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <HAL_ADC_Start_DMA+0x1d8>)
 8001b30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	334c      	adds	r3, #76	; 0x4c
 8001b66:	4619      	mov	r1, r3
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f000 fd1e 	bl	80025ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10f      	bne.n	8001b9c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d129      	bne.n	8001bde <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	e020      	b.n	8001bde <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <HAL_ADC_Start_DMA+0x1dc>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d11b      	bne.n	8001bde <HAL_ADC_Start_DMA+0x1ba>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d114      	bne.n	8001bde <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	e00b      	b.n	8001bde <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f043 0210 	orr.w	r2, r3, #16
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2000009c 	.word	0x2000009c
 8001bec:	431bde83 	.word	0x431bde83
 8001bf0:	40012300 	.word	0x40012300
 8001bf4:	08002129 	.word	0x08002129
 8001bf8:	080021e3 	.word	0x080021e3
 8001bfc:	080021ff 	.word	0x080021ff
 8001c00:	40012000 	.word	0x40012000

08001c04 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_Stop_DMA+0x1a>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e048      	b.n	8001cb0 <HAL_ADC_Stop_DMA+0xac>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0201 	bic.w	r2, r2, #1
 8001c34:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d130      	bne.n	8001ca6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c52:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d10f      	bne.n	8001c82 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fcf8 	bl	800265c <HAL_DMA_Abort>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001c90:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x1c>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e113      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x244>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d925      	bls.n	8001d44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68d9      	ldr	r1, [r3, #12]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b1e      	subs	r3, #30
 8001d0e:	2207      	movs	r2, #7
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43da      	mvns	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68d9      	ldr	r1, [r3, #12]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4603      	mov	r3, r0
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4403      	add	r3, r0
 8001d36:	3b1e      	subs	r3, #30
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	e022      	b.n	8001d8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6919      	ldr	r1, [r3, #16]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	2207      	movs	r2, #7
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	400a      	ands	r2, r1
 8001d66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6919      	ldr	r1, [r3, #16]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4403      	add	r3, r0
 8001d80:	409a      	lsls	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d824      	bhi.n	8001ddc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	3b05      	subs	r3, #5
 8001da4:	221f      	movs	r2, #31
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	400a      	ands	r2, r1
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b05      	subs	r3, #5
 8001dce:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dda:	e04c      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b0c      	cmp	r3, #12
 8001de2:	d824      	bhi.n	8001e2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b23      	subs	r3, #35	; 0x23
 8001df6:	221f      	movs	r2, #31
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	400a      	ands	r2, r1
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b23      	subs	r3, #35	; 0x23
 8001e20:	fa00 f203 	lsl.w	r2, r0, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2c:	e023      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3b41      	subs	r3, #65	; 0x41
 8001e40:	221f      	movs	r2, #31
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	3b41      	subs	r3, #65	; 0x41
 8001e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <HAL_ADC_ConfigChannel+0x250>)
 8001e78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <HAL_ADC_ConfigChannel+0x254>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d10f      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1d8>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b12      	cmp	r3, #18
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <HAL_ADC_ConfigChannel+0x254>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d12b      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x23a>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_ADC_ConfigChannel+0x258>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <HAL_ADC_ConfigChannel+0x1f4>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b11      	cmp	r3, #17
 8001ebe:	d122      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <HAL_ADC_ConfigChannel+0x258>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d111      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_ADC_ConfigChannel+0x25c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_ADC_ConfigChannel+0x260>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	0c9a      	lsrs	r2, r3, #18
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f9      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40012300 	.word	0x40012300
 8001f20:	40012000 	.word	0x40012000
 8001f24:	10000012 	.word	0x10000012
 8001f28:	2000009c 	.word	0x2000009c
 8001f2c:	431bde83 	.word	0x431bde83

08001f30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f38:	4b79      	ldr	r3, [pc, #484]	; (8002120 <ADC_Init+0x1f0>)
 8001f3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	021a      	lsls	r2, r3, #8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6899      	ldr	r1, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	4a58      	ldr	r2, [pc, #352]	; (8002124 <ADC_Init+0x1f4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d022      	beq.n	800200e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6899      	ldr	r1, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6899      	ldr	r1, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e00f      	b.n	800202e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800201c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800202c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0202 	bic.w	r2, r2, #2
 800203c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6899      	ldr	r1, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7e1b      	ldrb	r3, [r3, #24]
 8002048:	005a      	lsls	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01b      	beq.n	8002094 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800206a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800207a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6859      	ldr	r1, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	3b01      	subs	r3, #1
 8002088:	035a      	lsls	r2, r3, #13
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	e007      	b.n	80020a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	3b01      	subs	r3, #1
 80020c0:	051a      	lsls	r2, r3, #20
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6899      	ldr	r1, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e6:	025a      	lsls	r2, r3, #9
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6899      	ldr	r1, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	029a      	lsls	r2, r3, #10
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40012300 	.word	0x40012300
 8002124:	0f000001 	.word	0x0f000001

08002128 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800213e:	2b00      	cmp	r3, #0
 8002140:	d13c      	bne.n	80021bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d12b      	bne.n	80021b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002160:	2b00      	cmp	r3, #0
 8002162:	d127      	bne.n	80021b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800217c:	2b00      	cmp	r3, #0
 800217e:	d119      	bne.n	80021b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0220 	bic.w	r2, r2, #32
 800218e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff f8e9 	bl	800138c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021ba:	e00e      	b.n	80021da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7ff fd75 	bl	8001cb8 <HAL_ADC_ErrorCallback>
}
 80021ce:	e004      	b.n	80021da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff f8c1 	bl	8001378 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2240      	movs	r2, #64	; 0x40
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f043 0204 	orr.w	r2, r3, #4
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff fd4a 	bl	8001cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <__NVIC_EnableIRQ+0x38>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1c3 0307 	rsb	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	bf28      	it	cs
 800233e:	2304      	movcs	r3, #4
 8002340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	2b06      	cmp	r3, #6
 8002348:	d902      	bls.n	8002350 <NVIC_EncodePriority+0x30>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3b03      	subs	r3, #3
 800234e:	e000      	b.n	8002352 <NVIC_EncodePriority+0x32>
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43d9      	mvns	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	4313      	orrs	r3, r2
         );
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d301      	bcc.n	800239e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <SysTick_Config+0x40>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a6:	210f      	movs	r1, #15
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f7ff ff8e 	bl	80022cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SysTick_Config+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SysTick_Config+0x40>)
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000e010 	.word	0xe000e010

080023cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff29 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f4:	f7ff ff3e 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff8e 	bl	8002320 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff5d 	bl	80022cc <__NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff31 	bl	8002290 <__NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffa2 	bl	8002388 <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff f9ba 	bl	80017d4 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e099      	b.n	80025a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248c:	e00f      	b.n	80024ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800248e:	f7ff f9a1 	bl	80017d4 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b05      	cmp	r3, #5
 800249a:	d908      	bls.n	80024ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2203      	movs	r2, #3
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e078      	b.n	80025a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e8      	bne.n	800248e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_DMA_Init+0x158>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	2b04      	cmp	r3, #4
 8002506:	d107      	bne.n	8002518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	4313      	orrs	r3, r2
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f023 0307 	bic.w	r3, r3, #7
 800252e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b04      	cmp	r3, #4
 8002540:	d117      	bne.n	8002572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fadf 	bl	8002b18 <DMA_CheckFifoParam>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800256e:	2301      	movs	r3, #1
 8002570:	e016      	b.n	80025a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa96 	bl	8002aac <DMA_CalcBaseAndBitshift>
 8002580:	4603      	mov	r3, r0
 8002582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	223f      	movs	r2, #63	; 0x3f
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	f010803f 	.word	0xf010803f

080025ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Start_IT+0x26>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e040      	b.n	8002654 <HAL_DMA_Start_IT+0xa8>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d12f      	bne.n	8002646 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2202      	movs	r2, #2
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fa28 	bl	8002a50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	223f      	movs	r2, #63	; 0x3f
 8002606:	409a      	lsls	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0216 	orr.w	r2, r2, #22
 800261a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e005      	b.n	8002652 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800264e:	2302      	movs	r3, #2
 8002650:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800266a:	f7ff f8b3 	bl	80017d4 <HAL_GetTick>
 800266e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d008      	beq.n	800268e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e052      	b.n	8002734 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0216 	bic.w	r2, r2, #22
 800269c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <HAL_DMA_Abort+0x62>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0208 	bic.w	r2, r2, #8
 80026cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026de:	e013      	b.n	8002708 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026e0:	f7ff f878 	bl	80017d4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d90c      	bls.n	8002708 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2203      	movs	r2, #3
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e015      	b.n	8002734 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1e4      	bne.n	80026e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	223f      	movs	r2, #63	; 0x3f
 800271c:	409a      	lsls	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002748:	4b92      	ldr	r3, [pc, #584]	; (8002994 <HAL_DMA_IRQHandler+0x258>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a92      	ldr	r2, [pc, #584]	; (8002998 <HAL_DMA_IRQHandler+0x25c>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0a9b      	lsrs	r3, r3, #10
 8002754:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2208      	movs	r2, #8
 8002768:	409a      	lsls	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d01a      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0204 	bic.w	r2, r2, #4
 800278e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	2208      	movs	r2, #8
 8002796:	409a      	lsls	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	2201      	movs	r2, #1
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d012      	beq.n	80027de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	2201      	movs	r2, #1
 80027cc:	409a      	lsls	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	2204      	movs	r2, #4
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d012      	beq.n	8002814 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	2204      	movs	r2, #4
 8002802:	409a      	lsls	r2, r3
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f043 0204 	orr.w	r2, r3, #4
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	2210      	movs	r2, #16
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d043      	beq.n	80028ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d03c      	beq.n	80028ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	2210      	movs	r2, #16
 8002838:	409a      	lsls	r2, r3
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d018      	beq.n	800287e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d108      	bne.n	800286c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d024      	beq.n	80028ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
 800286a:	e01f      	b.n	80028ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
 800287c:	e016      	b.n	80028ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d107      	bne.n	800289c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0208 	bic.w	r2, r2, #8
 800289a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	2220      	movs	r2, #32
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 808e 	beq.w	80029da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8086 	beq.w	80029da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2220      	movs	r2, #32
 80028d4:	409a      	lsls	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	d136      	bne.n	8002954 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0216 	bic.w	r2, r2, #22
 80028f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002904:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d103      	bne.n	8002916 <HAL_DMA_IRQHandler+0x1da>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0208 	bic.w	r2, r2, #8
 8002924:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	223f      	movs	r2, #63	; 0x3f
 800292c:	409a      	lsls	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002946:	2b00      	cmp	r3, #0
 8002948:	d07d      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
        }
        return;
 8002952:	e078      	b.n	8002a46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01c      	beq.n	800299c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d108      	bne.n	8002982 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	2b00      	cmp	r3, #0
 8002976:	d030      	beq.n	80029da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
 8002980:	e02b      	b.n	80029da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d027      	beq.n	80029da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
 8002992:	e022      	b.n	80029da <HAL_DMA_IRQHandler+0x29e>
 8002994:	2000009c 	.word	0x2000009c
 8002998:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0210 	bic.w	r2, r2, #16
 80029b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d032      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d022      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2205      	movs	r2, #5
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d307      	bcc.n	8002a22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f2      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x2ca>
 8002a20:	e000      	b.n	8002a24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
 8002a44:	e000      	b.n	8002a48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a46:	bf00      	nop
    }
  }
}
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop

08002a50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	d108      	bne.n	8002a90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a8e:	e007      	b.n	8002aa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	60da      	str	r2, [r3, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3b10      	subs	r3, #16
 8002abc:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <DMA_CalcBaseAndBitshift+0x64>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ac6:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <DMA_CalcBaseAndBitshift+0x68>)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d909      	bls.n	8002aee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	1d1a      	adds	r2, r3, #4
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	659a      	str	r2, [r3, #88]	; 0x58
 8002aec:	e007      	b.n	8002afe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002af6:	f023 0303 	bic.w	r3, r3, #3
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	aaaaaaab 	.word	0xaaaaaaab
 8002b14:	08009e98 	.word	0x08009e98

08002b18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d11f      	bne.n	8002b72 <DMA_CheckFifoParam+0x5a>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d856      	bhi.n	8002be6 <DMA_CheckFifoParam+0xce>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <DMA_CheckFifoParam+0x28>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002b63 	.word	0x08002b63
 8002b48:	08002b51 	.word	0x08002b51
 8002b4c:	08002be7 	.word	0x08002be7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d046      	beq.n	8002bea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b60:	e043      	b.n	8002bea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b6a:	d140      	bne.n	8002bee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b70:	e03d      	b.n	8002bee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b7a:	d121      	bne.n	8002bc0 <DMA_CheckFifoParam+0xa8>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d837      	bhi.n	8002bf2 <DMA_CheckFifoParam+0xda>
 8002b82:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <DMA_CheckFifoParam+0x70>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002b99 	.word	0x08002b99
 8002b8c:	08002b9f 	.word	0x08002b9f
 8002b90:	08002b99 	.word	0x08002b99
 8002b94:	08002bb1 	.word	0x08002bb1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9c:	e030      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d025      	beq.n	8002bf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bae:	e022      	b.n	8002bf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bb8:	d11f      	bne.n	8002bfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bbe:	e01c      	b.n	8002bfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d903      	bls.n	8002bce <DMA_CheckFifoParam+0xb6>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d003      	beq.n	8002bd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bcc:	e018      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd2:	e015      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00e      	beq.n	8002bfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      break;
 8002be4:	e00b      	b.n	8002bfe <DMA_CheckFifoParam+0xe6>
      break;
 8002be6:	bf00      	nop
 8002be8:	e00a      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bea:	bf00      	nop
 8002bec:	e008      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e006      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e004      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfe:	bf00      	nop
    }
  } 
  
  return status; 
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop

08002c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	e159      	b.n	8002ee0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	f040 8148 	bne.w	8002eda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d005      	beq.n	8002c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d130      	bne.n	8002cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 0201 	and.w	r2, r3, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d017      	beq.n	8002d00 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d123      	bne.n	8002d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	08da      	lsrs	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3208      	adds	r2, #8
 8002d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	220f      	movs	r2, #15
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0203 	and.w	r2, r3, #3
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a2 	beq.w	8002eda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b57      	ldr	r3, [pc, #348]	; (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	4a56      	ldr	r2, [pc, #344]	; (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da4:	6453      	str	r3, [r2, #68]	; 0x44
 8002da6:	4b54      	ldr	r3, [pc, #336]	; (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db2:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_GPIO_Init+0x2ec>)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	3302      	adds	r3, #2
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a49      	ldr	r2, [pc, #292]	; (8002f00 <HAL_GPIO_Init+0x2f0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d019      	beq.n	8002e12 <HAL_GPIO_Init+0x202>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a48      	ldr	r2, [pc, #288]	; (8002f04 <HAL_GPIO_Init+0x2f4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_GPIO_Init+0x1fe>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a47      	ldr	r2, [pc, #284]	; (8002f08 <HAL_GPIO_Init+0x2f8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00d      	beq.n	8002e0a <HAL_GPIO_Init+0x1fa>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a46      	ldr	r2, [pc, #280]	; (8002f0c <HAL_GPIO_Init+0x2fc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <HAL_GPIO_Init+0x1f6>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a45      	ldr	r2, [pc, #276]	; (8002f10 <HAL_GPIO_Init+0x300>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_GPIO_Init+0x1f2>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e008      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e02:	2307      	movs	r3, #7
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e12:	2300      	movs	r3, #0
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	f002 0203 	and.w	r2, r2, #3
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e24:	4935      	ldr	r1, [pc, #212]	; (8002efc <HAL_GPIO_Init+0x2ec>)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e32:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <HAL_GPIO_Init+0x304>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e56:	4a2f      	ldr	r2, [pc, #188]	; (8002f14 <HAL_GPIO_Init+0x304>)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <HAL_GPIO_Init+0x304>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e80:	4a24      	ldr	r2, [pc, #144]	; (8002f14 <HAL_GPIO_Init+0x304>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e86:	4b23      	ldr	r3, [pc, #140]	; (8002f14 <HAL_GPIO_Init+0x304>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eaa:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <HAL_GPIO_Init+0x304>)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <HAL_GPIO_Init+0x304>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <HAL_GPIO_Init+0x304>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3301      	adds	r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b0f      	cmp	r3, #15
 8002ee4:	f67f aea2 	bls.w	8002c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3724      	adds	r7, #36	; 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40013800 	.word	0x40013800
 8002f00:	40020000 	.word	0x40020000
 8002f04:	40020400 	.word	0x40020400
 8002f08:	40020800 	.word	0x40020800
 8002f0c:	40020c00 	.word	0x40020c00
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e12b      	b.n	8003182 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe fad4 	bl	80014ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f7c:	f002 fb4a 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4a81      	ldr	r2, [pc, #516]	; (800318c <HAL_I2C_Init+0x274>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d807      	bhi.n	8002f9c <HAL_I2C_Init+0x84>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a80      	ldr	r2, [pc, #512]	; (8003190 <HAL_I2C_Init+0x278>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bf94      	ite	ls
 8002f94:	2301      	movls	r3, #1
 8002f96:	2300      	movhi	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e006      	b.n	8002faa <HAL_I2C_Init+0x92>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a7d      	ldr	r2, [pc, #500]	; (8003194 <HAL_I2C_Init+0x27c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bf94      	ite	ls
 8002fa4:	2301      	movls	r3, #1
 8002fa6:	2300      	movhi	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0e7      	b.n	8003182 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a78      	ldr	r2, [pc, #480]	; (8003198 <HAL_I2C_Init+0x280>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0c9b      	lsrs	r3, r3, #18
 8002fbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a6a      	ldr	r2, [pc, #424]	; (800318c <HAL_I2C_Init+0x274>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d802      	bhi.n	8002fec <HAL_I2C_Init+0xd4>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	e009      	b.n	8003000 <HAL_I2C_Init+0xe8>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	4a69      	ldr	r2, [pc, #420]	; (800319c <HAL_I2C_Init+0x284>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	3301      	adds	r3, #1
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	430b      	orrs	r3, r1
 8003006:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003012:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	495c      	ldr	r1, [pc, #368]	; (800318c <HAL_I2C_Init+0x274>)
 800301c:	428b      	cmp	r3, r1
 800301e:	d819      	bhi.n	8003054 <HAL_I2C_Init+0x13c>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e59      	subs	r1, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fbb1 f3f3 	udiv	r3, r1, r3
 800302e:	1c59      	adds	r1, r3, #1
 8003030:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003034:	400b      	ands	r3, r1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_I2C_Init+0x138>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1e59      	subs	r1, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fbb1 f3f3 	udiv	r3, r1, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304e:	e051      	b.n	80030f4 <HAL_I2C_Init+0x1dc>
 8003050:	2304      	movs	r3, #4
 8003052:	e04f      	b.n	80030f4 <HAL_I2C_Init+0x1dc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d111      	bne.n	8003080 <HAL_I2C_Init+0x168>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	440b      	add	r3, r1
 800306a:	fbb0 f3f3 	udiv	r3, r0, r3
 800306e:	3301      	adds	r3, #1
 8003070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e012      	b.n	80030a6 <HAL_I2C_Init+0x18e>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e58      	subs	r0, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	0099      	lsls	r1, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	fbb0 f3f3 	udiv	r3, r0, r3
 8003096:	3301      	adds	r3, #1
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Init+0x196>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e022      	b.n	80030f4 <HAL_I2C_Init+0x1dc>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10e      	bne.n	80030d4 <HAL_I2C_Init+0x1bc>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1e58      	subs	r0, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	440b      	add	r3, r1
 80030c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d2:	e00f      	b.n	80030f4 <HAL_I2C_Init+0x1dc>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	0099      	lsls	r1, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	6809      	ldr	r1, [r1, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6911      	ldr	r1, [r2, #16]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68d2      	ldr	r2, [r2, #12]
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	430b      	orrs	r3, r1
 8003136:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	000186a0 	.word	0x000186a0
 8003190:	001e847f 	.word	0x001e847f
 8003194:	003d08ff 	.word	0x003d08ff
 8003198:	431bde83 	.word	0x431bde83
 800319c:	10624dd3 	.word	0x10624dd3

080031a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	461a      	mov	r2, r3
 80031ac:	460b      	mov	r3, r1
 80031ae:	817b      	strh	r3, [r7, #10]
 80031b0:	4613      	mov	r3, r2
 80031b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031b4:	f7fe fb0e 	bl	80017d4 <HAL_GetTick>
 80031b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	f040 80e0 	bne.w	8003388 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2319      	movs	r3, #25
 80031ce:	2201      	movs	r2, #1
 80031d0:	4970      	ldr	r1, [pc, #448]	; (8003394 <HAL_I2C_Master_Transmit+0x1f4>)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 faf4 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
 80031e0:	e0d3      	b.n	800338a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_I2C_Master_Transmit+0x50>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e0cc      	b.n	800338a <HAL_I2C_Master_Transmit+0x1ea>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	d007      	beq.n	8003216 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0201 	orr.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003224:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2221      	movs	r2, #33	; 0x21
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2210      	movs	r2, #16
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	893a      	ldrh	r2, [r7, #8]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a50      	ldr	r2, [pc, #320]	; (8003398 <HAL_I2C_Master_Transmit+0x1f8>)
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003258:	8979      	ldrh	r1, [r7, #10]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	6a3a      	ldr	r2, [r7, #32]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f996 	bl	8003590 <I2C_MasterRequestWrite>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e08d      	b.n	800338a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003284:	e066      	b.n	8003354 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	6a39      	ldr	r1, [r7, #32]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fb6e 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b04      	cmp	r3, #4
 800329c:	d107      	bne.n	80032ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e06b      	b.n	800338a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	781a      	ldrb	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d11b      	bne.n	8003328 <HAL_I2C_Master_Transmit+0x188>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d017      	beq.n	8003328 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	6a39      	ldr	r1, [r7, #32]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 fb5e 	bl	80039ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00d      	beq.n	8003354 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	2b04      	cmp	r3, #4
 800333e:	d107      	bne.n	8003350 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e01a      	b.n	800338a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	d194      	bne.n	8003286 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e000      	b.n	800338a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003388:	2302      	movs	r3, #2
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	00100002 	.word	0x00100002
 8003398:	ffff0000 	.word	0xffff0000

0800339c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	817b      	strh	r3, [r7, #10]
 80033ae:	460b      	mov	r3, r1
 80033b0:	813b      	strh	r3, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b6:	f7fe fa0d 	bl	80017d4 <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	f040 80d9 	bne.w	800357c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2319      	movs	r3, #25
 80033d0:	2201      	movs	r2, #1
 80033d2:	496d      	ldr	r1, [pc, #436]	; (8003588 <HAL_I2C_Mem_Write+0x1ec>)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f9f3 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
 80033e2:	e0cc      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_Mem_Write+0x56>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0c5      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d007      	beq.n	8003418 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003426:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2221      	movs	r2, #33	; 0x21
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2240      	movs	r2, #64	; 0x40
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a4d      	ldr	r2, [pc, #308]	; (800358c <HAL_I2C_Mem_Write+0x1f0>)
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800345a:	88f8      	ldrh	r0, [r7, #6]
 800345c:	893a      	ldrh	r2, [r7, #8]
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4603      	mov	r3, r0
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f912 	bl	8003694 <I2C_RequestMemoryWrite>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d052      	beq.n	800351c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e081      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fa74 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b04      	cmp	r3, #4
 8003490:	d107      	bne.n	80034a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06b      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d11b      	bne.n	800351c <HAL_I2C_Mem_Write+0x180>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d017      	beq.n	800351c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1aa      	bne.n	800347a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fa60 	bl	80039ee <I2C_WaitOnBTFFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00d      	beq.n	8003550 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	2b04      	cmp	r3, #4
 800353a:	d107      	bne.n	800354c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e016      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
  }
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	00100002 	.word	0x00100002
 800358c:	ffff0000 	.word	0xffff0000

08003590 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	460b      	mov	r3, r1
 800359e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d006      	beq.n	80035ba <I2C_MasterRequestWrite+0x2a>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d003      	beq.n	80035ba <I2C_MasterRequestWrite+0x2a>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035b8:	d108      	bne.n	80035cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e00b      	b.n	80035e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	2b12      	cmp	r3, #18
 80035d2:	d107      	bne.n	80035e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f8e5 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360a:	d103      	bne.n	8003614 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e035      	b.n	8003684 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003620:	d108      	bne.n	8003634 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003622:	897b      	ldrh	r3, [r7, #10]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003630:	611a      	str	r2, [r3, #16]
 8003632:	e01b      	b.n	800366c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003634:	897b      	ldrh	r3, [r7, #10]
 8003636:	11db      	asrs	r3, r3, #7
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 0306 	and.w	r3, r3, #6
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f063 030f 	orn	r3, r3, #15
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	490e      	ldr	r1, [pc, #56]	; (800368c <I2C_MasterRequestWrite+0xfc>)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f90b 	bl	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e010      	b.n	8003684 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003662:	897b      	ldrh	r3, [r7, #10]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4907      	ldr	r1, [pc, #28]	; (8003690 <I2C_MasterRequestWrite+0x100>)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f8fb 	bl	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	00010008 	.word	0x00010008
 8003690:	00010002 	.word	0x00010002

08003694 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	4608      	mov	r0, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	817b      	strh	r3, [r7, #10]
 80036a6:	460b      	mov	r3, r1
 80036a8:	813b      	strh	r3, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f878 	bl	80037c0 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e4:	d103      	bne.n	80036ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e05f      	b.n	80037b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036f2:	897b      	ldrh	r3, [r7, #10]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003700:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	492d      	ldr	r1, [pc, #180]	; (80037bc <I2C_RequestMemoryWrite+0x128>)
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f8b0 	bl	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e04c      	b.n	80037b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	6a39      	ldr	r1, [r7, #32]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f91a 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	2b04      	cmp	r3, #4
 8003744:	d107      	bne.n	8003756 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003754:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e02b      	b.n	80037b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003760:	893b      	ldrh	r3, [r7, #8]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	611a      	str	r2, [r3, #16]
 800376a:	e021      	b.n	80037b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800376c:	893b      	ldrh	r3, [r7, #8]
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	b29b      	uxth	r3, r3
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800377a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377c:	6a39      	ldr	r1, [r7, #32]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f8f4 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00d      	beq.n	80037a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2b04      	cmp	r3, #4
 8003790:	d107      	bne.n	80037a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e005      	b.n	80037b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037a6:	893b      	ldrh	r3, [r7, #8]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	00010002 	.word	0x00010002

080037c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d0:	e025      	b.n	800381e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d021      	beq.n	800381e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037da:	f7fd fffb 	bl	80017d4 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d116      	bne.n	800381e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e023      	b.n	8003866 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10d      	bne.n	8003844 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	e00c      	b.n	800385e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	429a      	cmp	r2, r3
 8003862:	d0b6      	beq.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800387c:	e051      	b.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388c:	d123      	bne.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e046      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d021      	beq.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fd ff79 	bl	80017d4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d116      	bne.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e020      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d10c      	bne.n	8003946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	43da      	mvns	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4013      	ands	r3, r2
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e00b      	b.n	800395e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	43da      	mvns	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4013      	ands	r3, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d18d      	bne.n	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003978:	e02d      	b.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f878 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e02d      	b.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d021      	beq.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fd ff1f 	bl	80017d4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d116      	bne.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0220 	orr.w	r2, r3, #32
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e007      	b.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d1ca      	bne.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039fa:	e02d      	b.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f837 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e02d      	b.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d021      	beq.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	f7fd fede 	bl	80017d4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e007      	b.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d1ca      	bne.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a86:	d11b      	bne.n	8003ac0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f043 0204 	orr.w	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad0:	b08f      	sub	sp, #60	; 0x3c
 8003ad2:	af0a      	add	r7, sp, #40	; 0x28
 8003ad4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e10f      	b.n	8003d00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f005 fa26 	bl	8008f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2203      	movs	r2, #3
 8003b04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 f875 	bl	8005c0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	687e      	ldr	r6, [r7, #4]
 8003b2c:	466d      	mov	r5, sp
 8003b2e:	f106 0410 	add.w	r4, r6, #16
 8003b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b42:	1d33      	adds	r3, r6, #4
 8003b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b46:	6838      	ldr	r0, [r7, #0]
 8003b48:	f001 ff4d 	bl	80059e6 <USB_CoreInit>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2202      	movs	r2, #2
 8003b56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0d0      	b.n	8003d00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f002 f863 	bl	8005c30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	e04a      	b.n	8003c06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	333d      	adds	r3, #61	; 0x3d
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	333c      	adds	r3, #60	; 0x3c
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	b298      	uxth	r0, r3
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	3342      	adds	r3, #66	; 0x42
 8003bac:	4602      	mov	r2, r0
 8003bae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	333f      	adds	r3, #63	; 0x3f
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bc4:	7bfa      	ldrb	r2, [r7, #15]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	3344      	adds	r3, #68	; 0x44
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bd8:	7bfa      	ldrb	r2, [r7, #15]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	3348      	adds	r3, #72	; 0x48
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3350      	adds	r3, #80	; 0x50
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	3301      	adds	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	7bfa      	ldrb	r2, [r7, #15]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d3af      	bcc.n	8003b70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]
 8003c14:	e044      	b.n	8003ca0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c16:	7bfa      	ldrb	r2, [r7, #15]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c2c:	7bfa      	ldrb	r2, [r7, #15]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c58:	7bfa      	ldrb	r2, [r7, #15]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c6e:	7bfa      	ldrb	r2, [r7, #15]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d3b5      	bcc.n	8003c16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	687e      	ldr	r6, [r7, #4]
 8003cb2:	466d      	mov	r5, sp
 8003cb4:	f106 0410 	add.w	r4, r6, #16
 8003cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cc8:	1d33      	adds	r3, r6, #4
 8003cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ccc:	6838      	ldr	r0, [r7, #0]
 8003cce:	f001 ffd9 	bl	8005c84 <USB_DevInit>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e00d      	b.n	8003d00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f003 f821 	bl	8006d40 <USB_DevDisconnect>

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_PCD_Start+0x1c>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e020      	b.n	8003d66 <HAL_PCD_Start+0x5e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d109      	bne.n	8003d48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d005      	beq.n	8003d48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f001 ff4d 	bl	8005bec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f002 ffd1 	bl	8006cfe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d6e:	b590      	push	{r4, r7, lr}
 8003d70:	b08d      	sub	sp, #52	; 0x34
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f003 f88f 	bl	8006ea8 <USB_GetMode>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f040 839d 	bne.w	80044cc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f002 fff3 	bl	8006d82 <USB_ReadInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8393 	beq.w	80044ca <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f002 ffea 	bl	8006d82 <USB_ReadInterrupts>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d107      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f002 0202 	and.w	r2, r2, #2
 8003dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 ffd8 	bl	8006d82 <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d161      	bne.n	8003ea0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0210 	bic.w	r2, r2, #16
 8003dea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f003 020f 	and.w	r2, r3, #15
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4413      	add	r3, r2
 8003e08:	3304      	adds	r3, #4
 8003e0a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	0c5b      	lsrs	r3, r3, #17
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d124      	bne.n	8003e62 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d035      	beq.n	8003e90 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	6a38      	ldr	r0, [r7, #32]
 8003e38:	f002 fe3e 	bl	8006ab8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e48:	441a      	add	r2, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e5a:	441a      	add	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	619a      	str	r2, [r3, #24]
 8003e60:	e016      	b.n	8003e90 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	0c5b      	lsrs	r3, r3, #17
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d110      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e74:	2208      	movs	r2, #8
 8003e76:	4619      	mov	r1, r3
 8003e78:	6a38      	ldr	r0, [r7, #32]
 8003e7a:	f002 fe1d 	bl	8006ab8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e8a:	441a      	add	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0210 	orr.w	r2, r2, #16
 8003e9e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f002 ff6c 	bl	8006d82 <USB_ReadInterrupts>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003eb4:	d16e      	bne.n	8003f94 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f002 ff72 	bl	8006da8 <USB_ReadDevAllOutEpInterrupt>
 8003ec4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ec6:	e062      	b.n	8003f8e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d057      	beq.n	8003f82 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f002 ff97 	bl	8006e10 <USB_ReadDevOutEPInterrupt>
 8003ee2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efa:	461a      	mov	r2, r3
 8003efc:	2301      	movs	r3, #1
 8003efe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fdb0 	bl	8004a68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00c      	beq.n	8003f2c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2308      	movs	r3, #8
 8003f22:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 feaa 	bl	8004c80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	461a      	mov	r2, r3
 8003f44:	2310      	movs	r3, #16
 8003f46:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2320      	movs	r3, #32
 8003f62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f80:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	3301      	adds	r3, #1
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d199      	bne.n	8003ec8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f002 fef2 	bl	8006d82 <USB_ReadInterrupts>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fa8:	f040 80c0 	bne.w	800412c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f002 ff13 	bl	8006ddc <USB_ReadDevAllInEpInterrupt>
 8003fb6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003fbc:	e0b2      	b.n	8004124 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a7 	beq.w	8004118 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f002 ff39 	bl	8006e4c <USB_ReadDevInEPInterrupt>
 8003fda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d057      	beq.n	8004096 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	2201      	movs	r2, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	43db      	mvns	r3, r3
 8004000:	69f9      	ldr	r1, [r7, #28]
 8004002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004006:	4013      	ands	r3, r2
 8004008:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	461a      	mov	r2, r3
 8004018:	2301      	movs	r3, #1
 800401a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d132      	bne.n	800408a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	3348      	adds	r3, #72	; 0x48
 8004034:	6819      	ldr	r1, [r3, #0]
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403a:	4613      	mov	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4403      	add	r3, r0
 8004044:	3344      	adds	r3, #68	; 0x44
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4419      	add	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4403      	add	r3, r0
 8004058:	3348      	adds	r3, #72	; 0x48
 800405a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d113      	bne.n	800408a <HAL_PCD_IRQHandler+0x31c>
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	3350      	adds	r3, #80	; 0x50
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d108      	bne.n	800408a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004082:	461a      	mov	r2, r3
 8004084:	2101      	movs	r1, #1
 8004086:	f002 ff41 	bl	8006f0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	b2db      	uxtb	r3, r3
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f004 ffdc 	bl	800904e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ac:	461a      	mov	r2, r3
 80040ae:	2308      	movs	r3, #8
 80040b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c8:	461a      	mov	r2, r3
 80040ca:	2310      	movs	r3, #16
 80040cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e4:	461a      	mov	r2, r3
 80040e6:	2340      	movs	r3, #64	; 0x40
 80040e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	461a      	mov	r2, r3
 8004102:	2302      	movs	r3, #2
 8004104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fc1b 	bl	800494e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	3301      	adds	r3, #1
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b00      	cmp	r3, #0
 8004128:	f47f af49 	bne.w	8003fbe <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f002 fe26 	bl	8006d82 <USB_ReadInterrupts>
 8004136:	4603      	mov	r3, r0
 8004138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800413c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004140:	d122      	bne.n	8004188 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800415c:	2b01      	cmp	r3, #1
 800415e:	d108      	bne.n	8004172 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004168:	2100      	movs	r1, #0
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fe26 	bl	8004dbc <HAL_PCDEx_LPM_Callback>
 8004170:	e002      	b.n	8004178 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f004 ffd8 	bl	8009128 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f002 fdf8 	bl	8006d82 <USB_ReadInterrupts>
 8004192:	4603      	mov	r3, r0
 8004194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419c:	d112      	bne.n	80041c4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d102      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f004 ff94 	bl	80090dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80041c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f002 fdda 	bl	8006d82 <USB_ReadInterrupts>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	f040 80c7 	bne.w	800436a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2110      	movs	r1, #16
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fea8 	bl	8005f4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004200:	e056      	b.n	80042b0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	461a      	mov	r2, r3
 8004210:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004214:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004230:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004234:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004250:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004254:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	461a      	mov	r2, r3
 8004264:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004268:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427a:	0151      	lsls	r1, r2, #5
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	440a      	add	r2, r1
 8004280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004284:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004288:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	3301      	adds	r3, #1
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d3a3      	bcc.n	8004202 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80042cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d016      	beq.n	8004304 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e6:	f043 030b 	orr.w	r3, r3, #11
 80042ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042fc:	f043 030b 	orr.w	r3, r3, #11
 8004300:	6453      	str	r3, [r2, #68]	; 0x44
 8004302:	e015      	b.n	8004330 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004312:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004316:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800431a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800432a:	f043 030b 	orr.w	r3, r3, #11
 800432e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004342:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004354:	461a      	mov	r2, r3
 8004356:	f002 fdd9 	bl	8006f0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f002 fd07 	bl	8006d82 <USB_ReadInterrupts>
 8004374:	4603      	mov	r3, r0
 8004376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437e:	d124      	bne.n	80043ca <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f002 fd9d 	bl	8006ec4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f001 fe3d 	bl	800600e <USB_GetDevSpeed>
 8004394:	4603      	mov	r3, r0
 8004396:	461a      	mov	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681c      	ldr	r4, [r3, #0]
 80043a0:	f001 f92c 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 80043a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	4620      	mov	r0, r4
 80043b0:	f001 fb7a 	bl	8005aa8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f004 fe72 	bl	800909e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80043c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f002 fcd7 	bl	8006d82 <USB_ReadInterrupts>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d10a      	bne.n	80043f4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f004 fe4f 	bl	8009082 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f002 0208 	and.w	r2, r2, #8
 80043f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f002 fcc2 	bl	8006d82 <USB_ReadInterrupts>
 80043fe:	4603      	mov	r3, r0
 8004400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004408:	d10f      	bne.n	800442a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	b2db      	uxtb	r3, r3
 8004412:	4619      	mov	r1, r3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f004 fea7 	bl	8009168 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004428:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f002 fca7 	bl	8006d82 <USB_ReadInterrupts>
 8004434:	4603      	mov	r3, r0
 8004436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800443a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800443e:	d10f      	bne.n	8004460 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f004 fe7a 	bl	8009144 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800445e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f002 fc8c 	bl	8006d82 <USB_ReadInterrupts>
 800446a:	4603      	mov	r3, r0
 800446c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d10a      	bne.n	800448c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f004 fe88 	bl	800918c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800448a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f002 fc76 	bl	8006d82 <USB_ReadInterrupts>
 8004496:	4603      	mov	r3, r0
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b04      	cmp	r3, #4
 800449e:	d115      	bne.n	80044cc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f004 fe78 	bl	80091a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	e000      	b.n	80044cc <HAL_PCD_IRQHandler+0x75e>
      return;
 80044ca:	bf00      	nop
    }
  }
}
 80044cc:	3734      	adds	r7, #52	; 0x34
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd90      	pop	{r4, r7, pc}

080044d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	460b      	mov	r3, r1
 80044dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_PCD_SetAddress+0x1a>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e013      	b.n	8004514 <HAL_PCD_SetAddress+0x42>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f002 fbd4 	bl	8006cb2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	4608      	mov	r0, r1
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	4603      	mov	r3, r0
 800452c:	70fb      	strb	r3, [r7, #3]
 800452e:	460b      	mov	r3, r1
 8004530:	803b      	strh	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800453a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800453e:	2b00      	cmp	r3, #0
 8004540:	da0f      	bge.n	8004562 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	f003 020f 	and.w	r2, r3, #15
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	3338      	adds	r3, #56	; 0x38
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	3304      	adds	r3, #4
 8004558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	705a      	strb	r2, [r3, #1]
 8004560:	e00f      	b.n	8004582 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	4413      	add	r3, r2
 8004578:	3304      	adds	r3, #4
 800457a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800458e:	883a      	ldrh	r2, [r7, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	78ba      	ldrb	r2, [r7, #2]
 8004598:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d004      	beq.n	80045ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045ac:	78bb      	ldrb	r3, [r7, #2]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d102      	bne.n	80045b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_PCD_EP_Open+0xaa>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e00e      	b.n	80045e4 <HAL_PCD_EP_Open+0xc8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68f9      	ldr	r1, [r7, #12]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fd3f 	bl	8006058 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80045e2:	7afb      	ldrb	r3, [r7, #11]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	da0f      	bge.n	8004620 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	f003 020f 	and.w	r2, r3, #15
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	3338      	adds	r3, #56	; 0x38
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	3304      	adds	r3, #4
 8004616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	705a      	strb	r2, [r3, #1]
 800461e:	e00f      	b.n	8004640 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	f003 020f 	and.w	r2, r3, #15
 8004626:	4613      	mov	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	3304      	adds	r3, #4
 8004638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	b2da      	uxtb	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_PCD_EP_Close+0x6e>
 8004656:	2302      	movs	r3, #2
 8004658:	e00e      	b.n	8004678 <HAL_PCD_EP_Close+0x8c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68f9      	ldr	r1, [r7, #12]
 8004668:	4618      	mov	r0, r3
 800466a:	f001 fd7d 	bl	8006168 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	460b      	mov	r3, r1
 800468e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004690:	7afb      	ldrb	r3, [r7, #11]
 8004692:	f003 020f 	and.w	r2, r3, #15
 8004696:	4613      	mov	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	3304      	adds	r3, #4
 80046a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046c2:	7afb      	ldrb	r3, [r7, #11]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d102      	bne.n	80046dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046dc:	7afb      	ldrb	r3, [r7, #11]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	6979      	ldr	r1, [r7, #20]
 80046f4:	f002 f858 	bl	80067a8 <USB_EP0StartXfer>
 80046f8:	e008      	b.n	800470c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	f001 fe0a 	bl	8006320 <USB_EPStartXfer>
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	460b      	mov	r3, r1
 8004720:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	f003 020f 	and.w	r2, r3, #15
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004738:	681b      	ldr	r3, [r3, #0]
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	460b      	mov	r3, r1
 8004754:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004756:	7afb      	ldrb	r3, [r7, #11]
 8004758:	f003 020f 	and.w	r2, r3, #15
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	3338      	adds	r3, #56	; 0x38
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	3304      	adds	r3, #4
 800476c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2200      	movs	r2, #0
 800477e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2201      	movs	r2, #1
 8004784:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004786:	7afb      	ldrb	r3, [r7, #11]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	b2da      	uxtb	r2, r3
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d102      	bne.n	80047a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047a0:	7afb      	ldrb	r3, [r7, #11]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	6979      	ldr	r1, [r7, #20]
 80047b8:	f001 fff6 	bl	80067a8 <USB_EP0StartXfer>
 80047bc:	e008      	b.n	80047d0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	6979      	ldr	r1, [r7, #20]
 80047cc:	f001 fda8 	bl	8006320 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	f003 020f 	and.w	r2, r3, #15
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d901      	bls.n	80047f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e050      	b.n	800489a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	da0f      	bge.n	8004820 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	f003 020f 	and.w	r2, r3, #15
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	3338      	adds	r3, #56	; 0x38
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	4413      	add	r3, r2
 8004814:	3304      	adds	r3, #4
 8004816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	705a      	strb	r2, [r3, #1]
 800481e:	e00d      	b.n	800483c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	3304      	adds	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_PCD_EP_SetStall+0x82>
 8004858:	2302      	movs	r3, #2
 800485a:	e01e      	b.n	800489a <HAL_PCD_EP_SetStall+0xc0>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68f9      	ldr	r1, [r7, #12]
 800486a:	4618      	mov	r0, r3
 800486c:	f002 f94d 	bl	8006b0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	b2d9      	uxtb	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800488a:	461a      	mov	r2, r3
 800488c:	f002 fb3e 	bl	8006f0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	f003 020f 	and.w	r2, r3, #15
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d901      	bls.n	80048c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e042      	b.n	8004946 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	da0f      	bge.n	80048e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	f003 020f 	and.w	r2, r3, #15
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	3338      	adds	r3, #56	; 0x38
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4413      	add	r3, r2
 80048dc:	3304      	adds	r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	705a      	strb	r2, [r3, #1]
 80048e6:	e00f      	b.n	8004908 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	f003 020f 	and.w	r2, r3, #15
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	3304      	adds	r3, #4
 8004900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_PCD_EP_ClrStall+0x86>
 8004924:	2302      	movs	r3, #2
 8004926:	e00e      	b.n	8004946 <HAL_PCD_EP_ClrStall+0xa4>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	4618      	mov	r0, r3
 8004938:	f002 f955 	bl	8006be6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b08a      	sub	sp, #40	; 0x28
 8004952:	af02      	add	r7, sp, #8
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	4613      	mov	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	3338      	adds	r3, #56	; 0x38
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	3304      	adds	r3, #4
 8004974:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	429a      	cmp	r2, r3
 8004980:	d901      	bls.n	8004986 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e06c      	b.n	8004a60 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	429a      	cmp	r2, r3
 800499a:	d902      	bls.n	80049a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3303      	adds	r3, #3
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049aa:	e02b      	b.n	8004a04 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d902      	bls.n	80049c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	3303      	adds	r3, #3
 80049cc:	089b      	lsrs	r3, r3, #2
 80049ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68d9      	ldr	r1, [r3, #12]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	4603      	mov	r3, r0
 80049e6:	6978      	ldr	r0, [r7, #20]
 80049e8:	f002 f831 	bl	8006a4e <USB_WritePacket>

    ep->xfer_buff  += len;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	441a      	add	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	441a      	add	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d809      	bhi.n	8004a2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d203      	bcs.n	8004a2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1be      	bne.n	80049ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d811      	bhi.n	8004a5e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	2201      	movs	r2, #1
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	6939      	ldr	r1, [r7, #16]
 8004a56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3720      	adds	r7, #32
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	333c      	adds	r3, #60	; 0x3c
 8004a80:	3304      	adds	r3, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	f040 80a0 	bne.w	8004be0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d015      	beq.n	8004ad6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a72      	ldr	r2, [pc, #456]	; (8004c78 <PCD_EP_OutXfrComplete_int+0x210>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	f240 80dd 	bls.w	8004c6e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80d7 	beq.w	8004c6e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004acc:	461a      	mov	r2, r3
 8004ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ad2:	6093      	str	r3, [r2, #8]
 8004ad4:	e0cb      	b.n	8004c6e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aec:	461a      	mov	r2, r3
 8004aee:	2320      	movs	r3, #32
 8004af0:	6093      	str	r3, [r2, #8]
 8004af2:	e0bc      	b.n	8004c6e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 80b7 	bne.w	8004c6e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a5d      	ldr	r2, [pc, #372]	; (8004c78 <PCD_EP_OutXfrComplete_int+0x210>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d90f      	bls.n	8004b28 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b24:	6093      	str	r3, [r2, #8]
 8004b26:	e0a2      	b.n	8004c6e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b3a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	0159      	lsls	r1, r3, #5
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	440b      	add	r3, r1
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004b4e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4403      	add	r3, r0
 8004b5e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004b62:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b76:	6819      	ldr	r1, [r3, #0]
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4403      	add	r3, r0
 8004b86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4419      	add	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4403      	add	r3, r0
 8004b9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ba0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d114      	bne.n	8004bd2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	4613      	mov	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d108      	bne.n	8004bd2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2101      	movs	r1, #1
 8004bce:	f002 f99d 	bl	8006f0c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f004 fa1d 	bl	8009018 <HAL_PCD_DataOutStageCallback>
 8004bde:	e046      	b.n	8004c6e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <PCD_EP_OutXfrComplete_int+0x214>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d124      	bne.n	8004c32 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c04:	6093      	str	r3, [r2, #8]
 8004c06:	e032      	b.n	8004c6e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	461a      	mov	r2, r3
 8004c20:	2320      	movs	r3, #32
 8004c22:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f004 f9f4 	bl	8009018 <HAL_PCD_DataOutStageCallback>
 8004c30:	e01d      	b.n	8004c6e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d114      	bne.n	8004c62 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d108      	bne.n	8004c62 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	f002 f955 	bl	8006f0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	4619      	mov	r1, r3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f004 f9d5 	bl	8009018 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	4f54300a 	.word	0x4f54300a
 8004c7c:	4f54310a 	.word	0x4f54310a

08004c80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	333c      	adds	r3, #60	; 0x3c
 8004c98:	3304      	adds	r3, #4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <PCD_EP_OutSetupPacket_int+0x88>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d90e      	bls.n	8004cd4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d009      	beq.n	8004cd4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f004 f98d 	bl	8008ff4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <PCD_EP_OutSetupPacket_int+0x88>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d90c      	bls.n	8004cfc <PCD_EP_OutSetupPacket_int+0x7c>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d108      	bne.n	8004cfc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	f002 f908 	bl	8006f0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	4f54300a 	.word	0x4f54300a

08004d0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d107      	bne.n	8004d3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d2a:	883b      	ldrh	r3, [r7, #0]
 8004d2c:	0419      	lsls	r1, r3, #16
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28
 8004d38:	e028      	b.n	8004d8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	73fb      	strb	r3, [r7, #15]
 8004d4c:	e00d      	b.n	8004d6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	3340      	adds	r3, #64	; 0x40
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	4413      	add	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	3301      	adds	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d3ec      	bcc.n	8004d4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d74:	883b      	ldrh	r3, [r7, #0]
 8004d76:	0418      	lsls	r0, r3, #16
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6819      	ldr	r1, [r3, #0]
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	4302      	orrs	r2, r0
 8004d84:	3340      	adds	r3, #64	; 0x40
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	887a      	ldrh	r2, [r7, #2]
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e264      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d075      	beq.n	8004ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004df2:	4ba3      	ldr	r3, [pc, #652]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d00c      	beq.n	8004e18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dfe:	4ba0      	ldr	r3, [pc, #640]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d112      	bne.n	8004e30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0a:	4b9d      	ldr	r3, [pc, #628]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e16:	d10b      	bne.n	8004e30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	4b99      	ldr	r3, [pc, #612]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d05b      	beq.n	8004edc <HAL_RCC_OscConfig+0x108>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d157      	bne.n	8004edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e23f      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d106      	bne.n	8004e48 <HAL_RCC_OscConfig+0x74>
 8004e3a:	4b91      	ldr	r3, [pc, #580]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a90      	ldr	r2, [pc, #576]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e01d      	b.n	8004e84 <HAL_RCC_OscConfig+0xb0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x98>
 8004e52:	4b8b      	ldr	r3, [pc, #556]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a8a      	ldr	r2, [pc, #552]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	4b88      	ldr	r3, [pc, #544]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a87      	ldr	r2, [pc, #540]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCC_OscConfig+0xb0>
 8004e6c:	4b84      	ldr	r3, [pc, #528]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a83      	ldr	r2, [pc, #524]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	4b81      	ldr	r3, [pc, #516]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a80      	ldr	r2, [pc, #512]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d013      	beq.n	8004eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fc fca2 	bl	80017d4 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e94:	f7fc fc9e 	bl	80017d4 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e204      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	4b76      	ldr	r3, [pc, #472]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0xc0>
 8004eb2:	e014      	b.n	8004ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb4:	f7fc fc8e 	bl	80017d4 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fc fc8a 	bl	80017d4 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e1f0      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ece:	4b6c      	ldr	r3, [pc, #432]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0xe8>
 8004eda:	e000      	b.n	8004ede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d063      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eea:	4b65      	ldr	r3, [pc, #404]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 030c 	and.w	r3, r3, #12
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ef6:	4b62      	ldr	r3, [pc, #392]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d11c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f02:	4b5f      	ldr	r3, [pc, #380]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d116      	bne.n	8004f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f0e:	4b5c      	ldr	r3, [pc, #368]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_RCC_OscConfig+0x152>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d001      	beq.n	8004f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e1c4      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f26:	4b56      	ldr	r3, [pc, #344]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4952      	ldr	r1, [pc, #328]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3a:	e03a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d020      	beq.n	8004f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f44:	4b4f      	ldr	r3, [pc, #316]	; (8005084 <HAL_RCC_OscConfig+0x2b0>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4a:	f7fc fc43 	bl	80017d4 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f52:	f7fc fc3f 	bl	80017d4 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e1a5      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f64:	4b46      	ldr	r3, [pc, #280]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f70:	4b43      	ldr	r3, [pc, #268]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4940      	ldr	r1, [pc, #256]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]
 8004f84:	e015      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f86:	4b3f      	ldr	r3, [pc, #252]	; (8005084 <HAL_RCC_OscConfig+0x2b0>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fc fc22 	bl	80017d4 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f94:	f7fc fc1e 	bl	80017d4 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e184      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa6:	4b36      	ldr	r3, [pc, #216]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d030      	beq.n	8005020 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d016      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc6:	4b30      	ldr	r3, [pc, #192]	; (8005088 <HAL_RCC_OscConfig+0x2b4>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fcc:	f7fc fc02 	bl	80017d4 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fd4:	f7fc fbfe 	bl	80017d4 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e164      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe6:	4b26      	ldr	r3, [pc, #152]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x200>
 8004ff2:	e015      	b.n	8005020 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff4:	4b24      	ldr	r3, [pc, #144]	; (8005088 <HAL_RCC_OscConfig+0x2b4>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffa:	f7fc fbeb 	bl	80017d4 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005002:	f7fc fbe7 	bl	80017d4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e14d      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005014:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8005016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80a0 	beq.w	800516e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800502e:	2300      	movs	r3, #0
 8005030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10f      	bne.n	800505e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	4a0e      	ldr	r2, [pc, #56]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8005048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504c:	6413      	str	r3, [r2, #64]	; 0x40
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800505a:	2301      	movs	r3, #1
 800505c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505e:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_RCC_OscConfig+0x2b8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d121      	bne.n	80050ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800506a:	4b08      	ldr	r3, [pc, #32]	; (800508c <HAL_RCC_OscConfig+0x2b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a07      	ldr	r2, [pc, #28]	; (800508c <HAL_RCC_OscConfig+0x2b8>)
 8005070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005076:	f7fc fbad 	bl	80017d4 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507c:	e011      	b.n	80050a2 <HAL_RCC_OscConfig+0x2ce>
 800507e:	bf00      	nop
 8005080:	40023800 	.word	0x40023800
 8005084:	42470000 	.word	0x42470000
 8005088:	42470e80 	.word	0x42470e80
 800508c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005090:	f7fc fba0 	bl	80017d4 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e106      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a2:	4b85      	ldr	r3, [pc, #532]	; (80052b8 <HAL_RCC_OscConfig+0x4e4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d106      	bne.n	80050c4 <HAL_RCC_OscConfig+0x2f0>
 80050b6:	4b81      	ldr	r3, [pc, #516]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	4a80      	ldr	r2, [pc, #512]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6713      	str	r3, [r2, #112]	; 0x70
 80050c2:	e01c      	b.n	80050fe <HAL_RCC_OscConfig+0x32a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b05      	cmp	r3, #5
 80050ca:	d10c      	bne.n	80050e6 <HAL_RCC_OscConfig+0x312>
 80050cc:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	4a7a      	ldr	r2, [pc, #488]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80050d2:	f043 0304 	orr.w	r3, r3, #4
 80050d6:	6713      	str	r3, [r2, #112]	; 0x70
 80050d8:	4b78      	ldr	r3, [pc, #480]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a77      	ldr	r2, [pc, #476]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
 80050e4:	e00b      	b.n	80050fe <HAL_RCC_OscConfig+0x32a>
 80050e6:	4b75      	ldr	r3, [pc, #468]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	4a74      	ldr	r2, [pc, #464]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70
 80050f2:	4b72      	ldr	r3, [pc, #456]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a71      	ldr	r2, [pc, #452]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80050f8:	f023 0304 	bic.w	r3, r3, #4
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d015      	beq.n	8005132 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005106:	f7fc fb65 	bl	80017d4 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510c:	e00a      	b.n	8005124 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800510e:	f7fc fb61 	bl	80017d4 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	f241 3288 	movw	r2, #5000	; 0x1388
 800511c:	4293      	cmp	r3, r2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e0c5      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005124:	4b65      	ldr	r3, [pc, #404]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0ee      	beq.n	800510e <HAL_RCC_OscConfig+0x33a>
 8005130:	e014      	b.n	800515c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005132:	f7fc fb4f 	bl	80017d4 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005138:	e00a      	b.n	8005150 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f7fc fb4b 	bl	80017d4 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	; 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e0af      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005150:	4b5a      	ldr	r3, [pc, #360]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ee      	bne.n	800513a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d105      	bne.n	800516e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005162:	4b56      	ldr	r3, [pc, #344]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	4a55      	ldr	r2, [pc, #340]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 809b 	beq.w	80052ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005178:	4b50      	ldr	r3, [pc, #320]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 030c 	and.w	r3, r3, #12
 8005180:	2b08      	cmp	r3, #8
 8005182:	d05c      	beq.n	800523e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d141      	bne.n	8005210 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518c:	4b4c      	ldr	r3, [pc, #304]	; (80052c0 <HAL_RCC_OscConfig+0x4ec>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005192:	f7fc fb1f 	bl	80017d4 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800519a:	f7fc fb1b 	bl	80017d4 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e081      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ac:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f0      	bne.n	800519a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	019b      	lsls	r3, r3, #6
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	3b01      	subs	r3, #1
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	061b      	lsls	r3, r3, #24
 80051dc:	4937      	ldr	r1, [pc, #220]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e2:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <HAL_RCC_OscConfig+0x4ec>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fc faf4 	bl	80017d4 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fc faf0 	bl	80017d4 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e056      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005202:	4b2e      	ldr	r3, [pc, #184]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x41c>
 800520e:	e04e      	b.n	80052ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005210:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <HAL_RCC_OscConfig+0x4ec>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005216:	f7fc fadd 	bl	80017d4 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521e:	f7fc fad9 	bl	80017d4 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e03f      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005230:	4b22      	ldr	r3, [pc, #136]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f0      	bne.n	800521e <HAL_RCC_OscConfig+0x44a>
 800523c:	e037      	b.n	80052ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e032      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800524a:	4b1c      	ldr	r3, [pc, #112]	; (80052bc <HAL_RCC_OscConfig+0x4e8>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d028      	beq.n	80052aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005262:	429a      	cmp	r2, r3
 8005264:	d121      	bne.n	80052aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d11a      	bne.n	80052aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800527a:	4013      	ands	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005280:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005282:	4293      	cmp	r3, r2
 8005284:	d111      	bne.n	80052aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	3b01      	subs	r3, #1
 8005294:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d107      	bne.n	80052aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d001      	beq.n	80052ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40007000 	.word	0x40007000
 80052bc:	40023800 	.word	0x40023800
 80052c0:	42470060 	.word	0x42470060

080052c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0cc      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d8:	4b68      	ldr	r3, [pc, #416]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d90c      	bls.n	8005300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e6:	4b65      	ldr	r3, [pc, #404]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b63      	ldr	r3, [pc, #396]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0b8      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005318:	4b59      	ldr	r3, [pc, #356]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a58      	ldr	r2, [pc, #352]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005330:	4b53      	ldr	r3, [pc, #332]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a52      	ldr	r2, [pc, #328]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800533a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533c:	4b50      	ldr	r3, [pc, #320]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	494d      	ldr	r1, [pc, #308]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d044      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d119      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e07f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d003      	beq.n	8005382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800537e:	2b03      	cmp	r3, #3
 8005380:	d107      	bne.n	8005392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e06f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005392:	4b3b      	ldr	r3, [pc, #236]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e067      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 0203 	bic.w	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4934      	ldr	r1, [pc, #208]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b4:	f7fc fa0e 	bl	80017d4 <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053bc:	f7fc fa0a 	bl	80017d4 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e04f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 020c 	and.w	r2, r3, #12
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d1eb      	bne.n	80053bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d20c      	bcs.n	800540c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b22      	ldr	r3, [pc, #136]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e032      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4916      	ldr	r1, [pc, #88]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	490e      	ldr	r1, [pc, #56]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800544a:	f000 f821 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 800544e:	4602      	mov	r2, r0
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	490a      	ldr	r1, [pc, #40]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 800545c:	5ccb      	ldrb	r3, [r1, r3]
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	4a09      	ldr	r2, [pc, #36]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fc f96e 	bl	800174c <HAL_InitTick>

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40023c00 	.word	0x40023c00
 8005480:	40023800 	.word	0x40023800
 8005484:	08009e80 	.word	0x08009e80
 8005488:	2000009c 	.word	0x2000009c
 800548c:	200000a0 	.word	0x200000a0

08005490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005490:	b5b0      	push	{r4, r5, r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005496:	2100      	movs	r1, #0
 8005498:	6079      	str	r1, [r7, #4]
 800549a:	2100      	movs	r1, #0
 800549c:	60f9      	str	r1, [r7, #12]
 800549e:	2100      	movs	r1, #0
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054a2:	2100      	movs	r1, #0
 80054a4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054a6:	4952      	ldr	r1, [pc, #328]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80054a8:	6889      	ldr	r1, [r1, #8]
 80054aa:	f001 010c 	and.w	r1, r1, #12
 80054ae:	2908      	cmp	r1, #8
 80054b0:	d00d      	beq.n	80054ce <HAL_RCC_GetSysClockFreq+0x3e>
 80054b2:	2908      	cmp	r1, #8
 80054b4:	f200 8094 	bhi.w	80055e0 <HAL_RCC_GetSysClockFreq+0x150>
 80054b8:	2900      	cmp	r1, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_RCC_GetSysClockFreq+0x32>
 80054bc:	2904      	cmp	r1, #4
 80054be:	d003      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x38>
 80054c0:	e08e      	b.n	80055e0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054c2:	4b4c      	ldr	r3, [pc, #304]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80054c4:	60bb      	str	r3, [r7, #8]
       break;
 80054c6:	e08e      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054c8:	4b4b      	ldr	r3, [pc, #300]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80054ca:	60bb      	str	r3, [r7, #8]
      break;
 80054cc:	e08b      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054ce:	4948      	ldr	r1, [pc, #288]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80054d0:	6849      	ldr	r1, [r1, #4]
 80054d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80054d6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d8:	4945      	ldr	r1, [pc, #276]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80054da:	6849      	ldr	r1, [r1, #4]
 80054dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80054e0:	2900      	cmp	r1, #0
 80054e2:	d024      	beq.n	800552e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e4:	4942      	ldr	r1, [pc, #264]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80054e6:	6849      	ldr	r1, [r1, #4]
 80054e8:	0989      	lsrs	r1, r1, #6
 80054ea:	4608      	mov	r0, r1
 80054ec:	f04f 0100 	mov.w	r1, #0
 80054f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80054f4:	f04f 0500 	mov.w	r5, #0
 80054f8:	ea00 0204 	and.w	r2, r0, r4
 80054fc:	ea01 0305 	and.w	r3, r1, r5
 8005500:	493d      	ldr	r1, [pc, #244]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005502:	fb01 f003 	mul.w	r0, r1, r3
 8005506:	2100      	movs	r1, #0
 8005508:	fb01 f102 	mul.w	r1, r1, r2
 800550c:	1844      	adds	r4, r0, r1
 800550e:	493a      	ldr	r1, [pc, #232]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005510:	fba2 0101 	umull	r0, r1, r2, r1
 8005514:	1863      	adds	r3, r4, r1
 8005516:	4619      	mov	r1, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	461a      	mov	r2, r3
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	f7fb fa44 	bl	80009ac <__aeabi_uldivmod>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4613      	mov	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	e04a      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800552e:	4b30      	ldr	r3, [pc, #192]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	099b      	lsrs	r3, r3, #6
 8005534:	461a      	mov	r2, r3
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800553e:	f04f 0100 	mov.w	r1, #0
 8005542:	ea02 0400 	and.w	r4, r2, r0
 8005546:	ea03 0501 	and.w	r5, r3, r1
 800554a:	4620      	mov	r0, r4
 800554c:	4629      	mov	r1, r5
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	014b      	lsls	r3, r1, #5
 8005558:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800555c:	0142      	lsls	r2, r0, #5
 800555e:	4610      	mov	r0, r2
 8005560:	4619      	mov	r1, r3
 8005562:	1b00      	subs	r0, r0, r4
 8005564:	eb61 0105 	sbc.w	r1, r1, r5
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	018b      	lsls	r3, r1, #6
 8005572:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005576:	0182      	lsls	r2, r0, #6
 8005578:	1a12      	subs	r2, r2, r0
 800557a:	eb63 0301 	sbc.w	r3, r3, r1
 800557e:	f04f 0000 	mov.w	r0, #0
 8005582:	f04f 0100 	mov.w	r1, #0
 8005586:	00d9      	lsls	r1, r3, #3
 8005588:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800558c:	00d0      	lsls	r0, r2, #3
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	1912      	adds	r2, r2, r4
 8005594:	eb45 0303 	adc.w	r3, r5, r3
 8005598:	f04f 0000 	mov.w	r0, #0
 800559c:	f04f 0100 	mov.w	r1, #0
 80055a0:	0299      	lsls	r1, r3, #10
 80055a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055a6:	0290      	lsls	r0, r2, #10
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	f7fb f9f8 	bl	80009ac <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4613      	mov	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	0c1b      	lsrs	r3, r3, #16
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	3301      	adds	r3, #1
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	60bb      	str	r3, [r7, #8]
      break;
 80055de:	e002      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055e0:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80055e2:	60bb      	str	r3, [r7, #8]
      break;
 80055e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055e6:	68bb      	ldr	r3, [r7, #8]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bdb0      	pop	{r4, r5, r7, pc}
 80055f0:	40023800 	.word	0x40023800
 80055f4:	00f42400 	.word	0x00f42400
 80055f8:	017d7840 	.word	0x017d7840

080055fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <HAL_RCC_GetHCLKFreq+0x14>)
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	2000009c 	.word	0x2000009c

08005614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005618:	f7ff fff0 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 800561c:	4602      	mov	r2, r0
 800561e:	4b05      	ldr	r3, [pc, #20]	; (8005634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	0a9b      	lsrs	r3, r3, #10
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	4903      	ldr	r1, [pc, #12]	; (8005638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800562a:	5ccb      	ldrb	r3, [r1, r3]
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40023800 	.word	0x40023800
 8005638:	08009e90 	.word	0x08009e90

0800563c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d105      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005660:	2b00      	cmp	r3, #0
 8005662:	d038      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005664:	4b68      	ldr	r3, [pc, #416]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800566a:	f7fc f8b3 	bl	80017d4 <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005672:	f7fc f8af 	bl	80017d4 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e0bd      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005684:	4b61      	ldr	r3, [pc, #388]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	019b      	lsls	r3, r3, #6
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	071b      	lsls	r3, r3, #28
 80056a2:	495a      	ldr	r1, [pc, #360]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056aa:	4b57      	ldr	r3, [pc, #348]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056ac:	2201      	movs	r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056b0:	f7fc f890 	bl	80017d4 <HAL_GetTick>
 80056b4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056b8:	f7fc f88c 	bl	80017d4 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e09a      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056ca:	4b50      	ldr	r3, [pc, #320]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8083 	beq.w	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	4b48      	ldr	r3, [pc, #288]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	4a47      	ldr	r2, [pc, #284]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f2:	6413      	str	r3, [r2, #64]	; 0x40
 80056f4:	4b45      	ldr	r3, [pc, #276]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005700:	4b43      	ldr	r3, [pc, #268]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a42      	ldr	r2, [pc, #264]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800570c:	f7fc f862 	bl	80017d4 <HAL_GetTick>
 8005710:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005714:	f7fc f85e 	bl	80017d4 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e06c      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005726:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f0      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005732:	4b36      	ldr	r3, [pc, #216]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d02f      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	429a      	cmp	r2, r3
 800574e:	d028      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005750:	4b2e      	ldr	r3, [pc, #184]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005758:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800575a:	4b2e      	ldr	r3, [pc, #184]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800575c:	2201      	movs	r2, #1
 800575e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005760:	4b2c      	ldr	r3, [pc, #176]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005766:	4a29      	ldr	r2, [pc, #164]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800576c:	4b27      	ldr	r3, [pc, #156]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d114      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005778:	f7fc f82c 	bl	80017d4 <HAL_GetTick>
 800577c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577e:	e00a      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005780:	f7fc f828 	bl	80017d4 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f241 3288 	movw	r2, #5000	; 0x1388
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e034      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005796:	4b1d      	ldr	r3, [pc, #116]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0ee      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ae:	d10d      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80057b0:	4b16      	ldr	r3, [pc, #88]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c4:	4911      	ldr	r1, [pc, #68]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]
 80057ca:	e005      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80057cc:	4b0f      	ldr	r3, [pc, #60]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4a0e      	ldr	r2, [pc, #56]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057d6:	6093      	str	r3, [r2, #8]
 80057d8:	4b0c      	ldr	r3, [pc, #48]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e4:	4909      	ldr	r1, [pc, #36]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	7d1a      	ldrb	r2, [r3, #20]
 80057fa:	4b07      	ldr	r3, [pc, #28]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80057fc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	42470068 	.word	0x42470068
 800580c:	40023800 	.word	0x40023800
 8005810:	40007000 	.word	0x40007000
 8005814:	42470e40 	.word	0x42470e40
 8005818:	424711e0 	.word	0x424711e0

0800581c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e083      	b.n	8005936 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	7f5b      	ldrb	r3, [r3, #29]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d105      	bne.n	8005844 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fb fe9c 	bl	800157c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	22ca      	movs	r2, #202	; 0xca
 8005850:	625a      	str	r2, [r3, #36]	; 0x24
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2253      	movs	r2, #83	; 0x53
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f897 	bl	800598e <RTC_EnterInitMode>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	22ff      	movs	r2, #255	; 0xff
 800586c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2204      	movs	r2, #4
 8005872:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e05e      	b.n	8005936 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800588a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6899      	ldr	r1, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	68d2      	ldr	r2, [r2, #12]
 80058b2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6919      	ldr	r1, [r3, #16]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	041a      	lsls	r2, r3, #16
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10e      	bne.n	8005904 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f829 	bl	800593e <HAL_RTC_WaitForSynchro>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	22ff      	movs	r2, #255	; 0xff
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2204      	movs	r2, #4
 80058fe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e018      	b.n	8005936 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005912:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	22ff      	movs	r2, #255	; 0xff
 800592c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005934:	2300      	movs	r3, #0
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005958:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800595a:	f7fb ff3b 	bl	80017d4 <HAL_GetTick>
 800595e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005960:	e009      	b.n	8005976 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005962:	f7fb ff37 	bl	80017d4 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005970:	d901      	bls.n	8005976 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e007      	b.n	8005986 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0ee      	beq.n	8005962 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d119      	bne.n	80059dc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f04f 32ff 	mov.w	r2, #4294967295
 80059b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059b2:	f7fb ff0f 	bl	80017d4 <HAL_GetTick>
 80059b6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059b8:	e009      	b.n	80059ce <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80059ba:	f7fb ff0b 	bl	80017d4 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c8:	d901      	bls.n	80059ce <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e007      	b.n	80059de <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ee      	beq.n	80059ba <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e6:	b084      	sub	sp, #16
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	f107 001c 	add.w	r0, r7, #28
 80059f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d122      	bne.n	8005a44 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d105      	bne.n	8005a38 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 fac5 	bl	8006fc8 <USB_CoreReset>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	73fb      	strb	r3, [r7, #15]
 8005a42:	e01a      	b.n	8005a7a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 fab9 	bl	8006fc8 <USB_CoreReset>
 8005a56:	4603      	mov	r3, r0
 8005a58:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d106      	bne.n	8005a6e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
 8005a6c:	e005      	b.n	8005a7a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d10b      	bne.n	8005a98 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f043 0206 	orr.w	r2, r3, #6
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f043 0220 	orr.w	r2, r3, #32
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aa4:	b004      	add	sp, #16
 8005aa6:	4770      	bx	lr

08005aa8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d165      	bne.n	8005b88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4a41      	ldr	r2, [pc, #260]	; (8005bc4 <USB_SetTurnaroundTime+0x11c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d906      	bls.n	8005ad2 <USB_SetTurnaroundTime+0x2a>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4a40      	ldr	r2, [pc, #256]	; (8005bc8 <USB_SetTurnaroundTime+0x120>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d202      	bcs.n	8005ad2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005acc:	230f      	movs	r3, #15
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e062      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4a3c      	ldr	r2, [pc, #240]	; (8005bc8 <USB_SetTurnaroundTime+0x120>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d306      	bcc.n	8005ae8 <USB_SetTurnaroundTime+0x40>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	4a3b      	ldr	r2, [pc, #236]	; (8005bcc <USB_SetTurnaroundTime+0x124>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d202      	bcs.n	8005ae8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ae2:	230e      	movs	r3, #14
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e057      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4a38      	ldr	r2, [pc, #224]	; (8005bcc <USB_SetTurnaroundTime+0x124>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d306      	bcc.n	8005afe <USB_SetTurnaroundTime+0x56>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4a37      	ldr	r2, [pc, #220]	; (8005bd0 <USB_SetTurnaroundTime+0x128>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d202      	bcs.n	8005afe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005af8:	230d      	movs	r3, #13
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e04c      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <USB_SetTurnaroundTime+0x128>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d306      	bcc.n	8005b14 <USB_SetTurnaroundTime+0x6c>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4a32      	ldr	r2, [pc, #200]	; (8005bd4 <USB_SetTurnaroundTime+0x12c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d802      	bhi.n	8005b14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005b0e:	230c      	movs	r3, #12
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	e041      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4a2f      	ldr	r2, [pc, #188]	; (8005bd4 <USB_SetTurnaroundTime+0x12c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d906      	bls.n	8005b2a <USB_SetTurnaroundTime+0x82>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4a2e      	ldr	r2, [pc, #184]	; (8005bd8 <USB_SetTurnaroundTime+0x130>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d802      	bhi.n	8005b2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b24:	230b      	movs	r3, #11
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e036      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <USB_SetTurnaroundTime+0x130>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d906      	bls.n	8005b40 <USB_SetTurnaroundTime+0x98>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4a29      	ldr	r2, [pc, #164]	; (8005bdc <USB_SetTurnaroundTime+0x134>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d802      	bhi.n	8005b40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b3a:	230a      	movs	r3, #10
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	e02b      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4a26      	ldr	r2, [pc, #152]	; (8005bdc <USB_SetTurnaroundTime+0x134>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d906      	bls.n	8005b56 <USB_SetTurnaroundTime+0xae>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4a25      	ldr	r2, [pc, #148]	; (8005be0 <USB_SetTurnaroundTime+0x138>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d202      	bcs.n	8005b56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b50:	2309      	movs	r3, #9
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	e020      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <USB_SetTurnaroundTime+0x138>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d306      	bcc.n	8005b6c <USB_SetTurnaroundTime+0xc4>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4a20      	ldr	r2, [pc, #128]	; (8005be4 <USB_SetTurnaroundTime+0x13c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d802      	bhi.n	8005b6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b66:	2308      	movs	r3, #8
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	e015      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <USB_SetTurnaroundTime+0x13c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d906      	bls.n	8005b82 <USB_SetTurnaroundTime+0xda>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4a1c      	ldr	r2, [pc, #112]	; (8005be8 <USB_SetTurnaroundTime+0x140>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d202      	bcs.n	8005b82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b7c:	2307      	movs	r3, #7
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e00a      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b82:	2306      	movs	r3, #6
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	e007      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d102      	bne.n	8005b94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b8e:	2309      	movs	r3, #9
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e001      	b.n	8005b98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b94:	2309      	movs	r3, #9
 8005b96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	029b      	lsls	r3, r3, #10
 8005bac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	00d8acbf 	.word	0x00d8acbf
 8005bc8:	00e4e1c0 	.word	0x00e4e1c0
 8005bcc:	00f42400 	.word	0x00f42400
 8005bd0:	01067380 	.word	0x01067380
 8005bd4:	011a499f 	.word	0x011a499f
 8005bd8:	01312cff 	.word	0x01312cff
 8005bdc:	014ca43f 	.word	0x014ca43f
 8005be0:	016e3600 	.word	0x016e3600
 8005be4:	01a6ab1f 	.word	0x01a6ab1f
 8005be8:	01e84800 	.word	0x01e84800

08005bec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f043 0201 	orr.w	r2, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f023 0201 	bic.w	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d106      	bne.n	8005c5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60da      	str	r2, [r3, #12]
 8005c5a:	e00b      	b.n	8005c74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	e001      	b.n	8005c74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e003      	b.n	8005c7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c74:	2032      	movs	r0, #50	; 0x32
 8005c76:	f7fb fdb9 	bl	80017ec <HAL_Delay>

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c84:	b084      	sub	sp, #16
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	e009      	b.n	8005cb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3340      	adds	r3, #64	; 0x40
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b0e      	cmp	r3, #14
 8005cbc:	d9f2      	bls.n	8005ca4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d11c      	bne.n	8005cfe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd2:	f043 0302 	orr.w	r3, r3, #2
 8005cd6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8005cfc:	e00b      	b.n	8005d16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d28:	4619      	mov	r1, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d30:	461a      	mov	r2, r3
 8005d32:	680b      	ldr	r3, [r1, #0]
 8005d34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d10c      	bne.n	8005d56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d42:	2100      	movs	r1, #0
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f949 	bl	8005fdc <USB_SetDevSpeed>
 8005d4a:	e008      	b.n	8005d5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f944 	bl	8005fdc <USB_SetDevSpeed>
 8005d54:	e003      	b.n	8005d5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d56:	2103      	movs	r1, #3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f93f 	bl	8005fdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d5e:	2110      	movs	r1, #16
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f8f3 	bl	8005f4c <USB_FlushTxFifo>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f911 	bl	8005f98 <USB_FlushRxFifo>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	461a      	mov	r2, r3
 8005d88:	2300      	movs	r3, #0
 8005d8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	461a      	mov	r2, r3
 8005d94:	2300      	movs	r3, #0
 8005d96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2300      	movs	r3, #0
 8005da2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	e043      	b.n	8005e32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc0:	d118      	bne.n	8005df4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	e013      	b.n	8005e06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	461a      	mov	r2, r3
 8005dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e008      	b.n	8005e06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	461a      	mov	r2, r3
 8005e02:	2300      	movs	r3, #0
 8005e04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e12:	461a      	mov	r2, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	461a      	mov	r2, r3
 8005e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d3b7      	bcc.n	8005daa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	e043      	b.n	8005ec8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e56:	d118      	bne.n	8005e8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	e013      	b.n	8005e9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	461a      	mov	r2, r3
 8005e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	e008      	b.n	8005e9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	461a      	mov	r2, r3
 8005e98:	2300      	movs	r3, #0
 8005e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d3b7      	bcc.n	8005e40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d105      	bne.n	8005f04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f043 0210 	orr.w	r2, r3, #16
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <USB_DevInit+0x2c4>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f043 0208 	orr.w	r2, r3, #8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d107      	bne.n	8005f38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f30:	f043 0304 	orr.w	r3, r3, #4
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f44:	b004      	add	sp, #16
 8005f46:	4770      	bx	lr
 8005f48:	803c3800 	.word	0x803c3800

08005f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	019b      	lsls	r3, r3, #6
 8005f5e:	f043 0220 	orr.w	r2, r3, #32
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <USB_FlushTxFifo+0x48>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d901      	bls.n	8005f78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e006      	b.n	8005f86 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d0f0      	beq.n	8005f66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	00030d40 	.word	0x00030d40

08005f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2210      	movs	r2, #16
 8005fa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3301      	adds	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a09      	ldr	r2, [pc, #36]	; (8005fd8 <USB_FlushRxFifo+0x40>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d901      	bls.n	8005fbc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e006      	b.n	8005fca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d0f0      	beq.n	8005faa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	00030d40 	.word	0x00030d40

08005fdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	68f9      	ldr	r1, [r7, #12]
 8005ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800600e:	b480      	push	{r7}
 8006010:	b087      	sub	sp, #28
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0306 	and.w	r3, r3, #6
 8006026:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d102      	bne.n	8006034 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800602e:	2300      	movs	r3, #0
 8006030:	75fb      	strb	r3, [r7, #23]
 8006032:	e00a      	b.n	800604a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d002      	beq.n	8006040 <USB_GetDevSpeed+0x32>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b06      	cmp	r3, #6
 800603e:	d102      	bne.n	8006046 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006040:	2302      	movs	r3, #2
 8006042:	75fb      	strb	r3, [r7, #23]
 8006044:	e001      	b.n	800604a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006046:	230f      	movs	r3, #15
 8006048:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
}
 800604c:	4618      	mov	r0, r3
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d13a      	bne.n	80060ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	2101      	movs	r1, #1
 8006086:	fa01 f303 	lsl.w	r3, r1, r3
 800608a:	b29b      	uxth	r3, r3
 800608c:	68f9      	ldr	r1, [r7, #12]
 800608e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006092:	4313      	orrs	r3, r2
 8006094:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d155      	bne.n	8006158 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	78db      	ldrb	r3, [r3, #3]
 80060c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	059b      	lsls	r3, r3, #22
 80060ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060d0:	4313      	orrs	r3, r2
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	e036      	b.n	8006158 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	2101      	movs	r1, #1
 80060fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006100:	041b      	lsls	r3, r3, #16
 8006102:	68f9      	ldr	r1, [r7, #12]
 8006104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006108:	4313      	orrs	r3, r2
 800610a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d11a      	bne.n	8006158 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	78db      	ldrb	r3, [r3, #3]
 800613c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800613e:	430b      	orrs	r3, r1
 8006140:	4313      	orrs	r3, r2
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006156:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d161      	bne.n	8006248 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800619a:	d11f      	bne.n	80061dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	0151      	lsls	r1, r2, #5
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	440a      	add	r2, r1
 80061d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	2101      	movs	r1, #1
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	43db      	mvns	r3, r3
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061fc:	4013      	ands	r3, r2
 80061fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	2101      	movs	r1, #1
 8006212:	fa01 f303 	lsl.w	r3, r1, r3
 8006216:	b29b      	uxth	r3, r3
 8006218:	43db      	mvns	r3, r3
 800621a:	68f9      	ldr	r1, [r7, #12]
 800621c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006220:	4013      	ands	r3, r2
 8006222:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	0159      	lsls	r1, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	440b      	add	r3, r1
 800623a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623e:	4619      	mov	r1, r3
 8006240:	4b35      	ldr	r3, [pc, #212]	; (8006318 <USB_DeactivateEndpoint+0x1b0>)
 8006242:	4013      	ands	r3, r2
 8006244:	600b      	str	r3, [r1, #0]
 8006246:	e060      	b.n	800630a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800625a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800625e:	d11f      	bne.n	80062a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800627a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800627e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800629e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	2101      	movs	r1, #1
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	041b      	lsls	r3, r3, #16
 80062b8:	43db      	mvns	r3, r3
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062c0:	4013      	ands	r3, r2
 80062c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	69da      	ldr	r2, [r3, #28]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	2101      	movs	r1, #1
 80062d6:	fa01 f303 	lsl.w	r3, r1, r3
 80062da:	041b      	lsls	r3, r3, #16
 80062dc:	43db      	mvns	r3, r3
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062e4:	4013      	ands	r3, r2
 80062e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	0159      	lsls	r1, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	440b      	add	r3, r1
 80062fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006302:	4619      	mov	r1, r3
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <USB_DeactivateEndpoint+0x1b4>)
 8006306:	4013      	ands	r3, r2
 8006308:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	ec337800 	.word	0xec337800
 800631c:	eff37800 	.word	0xeff37800

08006320 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	; 0x28
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	4613      	mov	r3, r2
 800632c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b01      	cmp	r3, #1
 800633e:	f040 815c 	bne.w	80065fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d132      	bne.n	80063b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800636c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800638c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a8:	0cdb      	lsrs	r3, r3, #19
 80063aa:	04db      	lsls	r3, r3, #19
 80063ac:	6113      	str	r3, [r2, #16]
 80063ae:	e074      	b.n	800649a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	0151      	lsls	r1, r2, #5
 80063c2:	69fa      	ldr	r2, [r7, #28]
 80063c4:	440a      	add	r2, r1
 80063c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ca:	0cdb      	lsrs	r3, r3, #19
 80063cc:	04db      	lsls	r3, r3, #19
 80063ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6959      	ldr	r1, [r3, #20]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	440b      	add	r3, r1
 800640c:	1e59      	subs	r1, r3, #1
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	fbb1 f3f3 	udiv	r3, r1, r3
 8006416:	04d9      	lsls	r1, r3, #19
 8006418:	4b9d      	ldr	r3, [pc, #628]	; (8006690 <USB_EPStartXfer+0x370>)
 800641a:	400b      	ands	r3, r1
 800641c:	69b9      	ldr	r1, [r7, #24]
 800641e:	0148      	lsls	r0, r1, #5
 8006420:	69f9      	ldr	r1, [r7, #28]
 8006422:	4401      	add	r1, r0
 8006424:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006428:	4313      	orrs	r3, r2
 800642a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006442:	69b9      	ldr	r1, [r7, #24]
 8006444:	0148      	lsls	r0, r1, #5
 8006446:	69f9      	ldr	r1, [r7, #28]
 8006448:	4401      	add	r1, r0
 800644a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800644e:	4313      	orrs	r3, r2
 8006450:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	78db      	ldrb	r3, [r3, #3]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d11f      	bne.n	800649a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	440a      	add	r2, r1
 8006470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006474:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006478:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	69fa      	ldr	r2, [r7, #28]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006498:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d14b      	bne.n	8006538 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b4:	461a      	mov	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	78db      	ldrb	r3, [r3, #3]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d128      	bne.n	8006516 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d110      	bne.n	80064f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	e00f      	b.n	8006516 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006514:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006530:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	e12f      	b.n	8006798 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006556:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	78db      	ldrb	r3, [r3, #3]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d015      	beq.n	800658c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8117 	beq.w	8006798 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	2101      	movs	r1, #1
 800657c:	fa01 f303 	lsl.w	r3, r1, r3
 8006580:	69f9      	ldr	r1, [r7, #28]
 8006582:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006586:	4313      	orrs	r3, r2
 8006588:	634b      	str	r3, [r1, #52]	; 0x34
 800658a:	e105      	b.n	8006798 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006598:	2b00      	cmp	r3, #0
 800659a:	d110      	bne.n	80065be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	e00f      	b.n	80065de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	68d9      	ldr	r1, [r3, #12]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	b298      	uxth	r0, r3
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	4603      	mov	r3, r0
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fa2b 	bl	8006a4e <USB_WritePacket>
 80065f8:	e0ce      	b.n	8006798 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006614:	0cdb      	lsrs	r3, r3, #19
 8006616:	04db      	lsls	r3, r3, #19
 8006618:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006634:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006638:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800663c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d126      	bne.n	8006694 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800665c:	69b9      	ldr	r1, [r7, #24]
 800665e:	0148      	lsls	r0, r1, #5
 8006660:	69f9      	ldr	r1, [r7, #28]
 8006662:	4401      	add	r1, r0
 8006664:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006668:	4313      	orrs	r3, r2
 800666a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800668a:	6113      	str	r3, [r2, #16]
 800668c:	e036      	b.n	80066fc <USB_EPStartXfer+0x3dc>
 800668e:	bf00      	nop
 8006690:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	695a      	ldr	r2, [r3, #20]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	4413      	add	r3, r2
 800669e:	1e5a      	subs	r2, r3, #1
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	8afb      	ldrh	r3, [r7, #22]
 80066ba:	04d9      	lsls	r1, r3, #19
 80066bc:	4b39      	ldr	r3, [pc, #228]	; (80067a4 <USB_EPStartXfer+0x484>)
 80066be:	400b      	ands	r3, r1
 80066c0:	69b9      	ldr	r1, [r7, #24]
 80066c2:	0148      	lsls	r0, r1, #5
 80066c4:	69f9      	ldr	r1, [r7, #28]
 80066c6:	4401      	add	r1, r0
 80066c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066cc:	4313      	orrs	r3, r2
 80066ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	8af9      	ldrh	r1, [r7, #22]
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ec:	69b9      	ldr	r1, [r7, #24]
 80066ee:	0148      	lsls	r0, r1, #5
 80066f0:	69f9      	ldr	r1, [r7, #28]
 80066f2:	4401      	add	r1, r0
 80066f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066f8:	4313      	orrs	r3, r2
 80066fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d10d      	bne.n	800671e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d009      	beq.n	800671e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	68d9      	ldr	r1, [r3, #12]
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	460a      	mov	r2, r1
 800671c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	78db      	ldrb	r3, [r3, #3]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d128      	bne.n	8006778 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d110      	bne.n	8006758 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	440a      	add	r2, r1
 800674c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e00f      	b.n	8006778 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006776:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3720      	adds	r7, #32
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	1ff80000 	.word	0x1ff80000

080067a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	4613      	mov	r3, r2
 80067b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	f040 80cd 	bne.w	8006964 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d132      	bne.n	8006838 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	440a      	add	r2, r1
 800680c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006830:	0cdb      	lsrs	r3, r3, #19
 8006832:	04db      	lsls	r3, r3, #19
 8006834:	6113      	str	r3, [r2, #16]
 8006836:	e04e      	b.n	80068d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006852:	0cdb      	lsrs	r3, r3, #19
 8006854:	04db      	lsls	r3, r3, #19
 8006856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006872:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006876:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800687a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	695a      	ldr	r2, [r3, #20]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	d903      	bls.n	8006890 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c6:	6939      	ldr	r1, [r7, #16]
 80068c8:	0148      	lsls	r0, r1, #5
 80068ca:	6979      	ldr	r1, [r7, #20]
 80068cc:	4401      	add	r1, r0
 80068ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068d2:	4313      	orrs	r3, r2
 80068d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068d6:	79fb      	ldrb	r3, [r7, #7]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d11e      	bne.n	800691a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d009      	beq.n	80068f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f0:	461a      	mov	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	0151      	lsls	r1, r2, #5
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	440a      	add	r2, r1
 800690e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006912:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006916:	6013      	str	r3, [r2, #0]
 8006918:	e092      	b.n	8006a40 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	0151      	lsls	r1, r2, #5
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	440a      	add	r2, r1
 8006930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006934:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006938:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d07e      	beq.n	8006a40 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	2101      	movs	r1, #1
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	6979      	ldr	r1, [r7, #20]
 800695a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800695e:	4313      	orrs	r3, r2
 8006960:	634b      	str	r3, [r1, #52]	; 0x34
 8006962:	e06d      	b.n	8006a40 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	440a      	add	r2, r1
 800697a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697e:	0cdb      	lsrs	r3, r3, #19
 8006980:	04db      	lsls	r3, r3, #19
 8006982:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ee:	6939      	ldr	r1, [r7, #16]
 80069f0:	0148      	lsls	r0, r1, #5
 80069f2:	6979      	ldr	r1, [r7, #20]
 80069f4:	4401      	add	r1, r0
 80069f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069fa:	4313      	orrs	r3, r2
 80069fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80069fe:	79fb      	ldrb	r3, [r7, #7]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d10d      	bne.n	8006a20 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d009      	beq.n	8006a20 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	68d9      	ldr	r1, [r3, #12]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	460a      	mov	r2, r1
 8006a1e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b089      	sub	sp, #36	; 0x24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	4611      	mov	r1, r2
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	71fb      	strb	r3, [r7, #7]
 8006a60:	4613      	mov	r3, r2
 8006a62:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006a6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d11a      	bne.n	8006aaa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a74:	88bb      	ldrh	r3, [r7, #4]
 8006a76:	3303      	adds	r3, #3
 8006a78:	089b      	lsrs	r3, r3, #2
 8006a7a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	e00f      	b.n	8006aa2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a82:	79fb      	ldrb	r3, [r7, #7]
 8006a84:	031a      	lsls	r2, r3, #12
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a8e:	461a      	mov	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d3eb      	bcc.n	8006a82 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3724      	adds	r7, #36	; 0x24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b089      	sub	sp, #36	; 0x24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006ace:	88fb      	ldrh	r3, [r7, #6]
 8006ad0:	3303      	adds	r3, #3
 8006ad2:	089b      	lsrs	r3, r3, #2
 8006ad4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	e00b      	b.n	8006af4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	3304      	adds	r3, #4
 8006aec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	3301      	adds	r3, #1
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d3ef      	bcc.n	8006adc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006afc:	69fb      	ldr	r3, [r7, #28]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3724      	adds	r7, #36	; 0x24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d12c      	bne.n	8006b80 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	db12      	blt.n	8006b5e <USB_EPSetStall+0x54>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00f      	beq.n	8006b5e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	0151      	lsls	r1, r2, #5
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	440a      	add	r2, r1
 8006b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b5c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	e02b      	b.n	8006bd8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	db12      	blt.n	8006bb8 <USB_EPSetStall+0xae>
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00f      	beq.n	8006bb8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	0151      	lsls	r1, r2, #5
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	440a      	add	r2, r1
 8006bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bb6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	0151      	lsls	r1, r2, #5
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	440a      	add	r2, r1
 8006bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b085      	sub	sp, #20
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d128      	bne.n	8006c54 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	78db      	ldrb	r3, [r3, #3]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d003      	beq.n	8006c32 <USB_EPClearStall+0x4c>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	78db      	ldrb	r3, [r3, #3]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d138      	bne.n	8006ca4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	e027      	b.n	8006ca4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	78db      	ldrb	r3, [r3, #3]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d003      	beq.n	8006c84 <USB_EPClearStall+0x9e>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	78db      	ldrb	r3, [r3, #3]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d10f      	bne.n	8006ca4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cd0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006cd4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ce6:	68f9      	ldr	r1, [r7, #12]
 8006ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cec:	4313      	orrs	r3, r2
 8006cee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d18:	f023 0303 	bic.w	r3, r3, #3
 8006d1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d2c:	f023 0302 	bic.w	r3, r3, #2
 8006d30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d5a:	f023 0303 	bic.w	r3, r3, #3
 8006d5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d6e:	f043 0302 	orr.w	r3, r3, #2
 8006d72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4013      	ands	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	0c1b      	lsrs	r3, r3, #16
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	b29b      	uxth	r3, r3
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	f003 030f 	and.w	r3, r3, #15
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7c:	01db      	lsls	r3, r3, #7
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e86:	78fb      	ldrb	r3, [r7, #3]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4013      	ands	r3, r2
 8006e98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	371c      	adds	r7, #28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ede:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ee2:	f023 0307 	bic.w	r3, r3, #7
 8006ee6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006efa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
	...

08006f0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	460b      	mov	r3, r1
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	333c      	adds	r3, #60	; 0x3c
 8006f22:	3304      	adds	r3, #4
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4a26      	ldr	r2, [pc, #152]	; (8006fc4 <USB_EP0_OutStart+0xb8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d90a      	bls.n	8006f46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f40:	d101      	bne.n	8006f46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e037      	b.n	8006fb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f74:	f043 0318 	orr.w	r3, r3, #24
 8006f78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f8e:	7afb      	ldrb	r3, [r7, #11]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d10f      	bne.n	8006fb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006fb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	4f54300a 	.word	0x4f54300a

08006fc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4a13      	ldr	r2, [pc, #76]	; (800702c <USB_CoreReset+0x64>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d901      	bls.n	8006fe6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e01b      	b.n	800701e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	daf2      	bge.n	8006fd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f043 0201 	orr.w	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4a09      	ldr	r2, [pc, #36]	; (800702c <USB_CoreReset+0x64>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d901      	bls.n	8007010 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e006      	b.n	800701e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b01      	cmp	r3, #1
 800701a:	d0f0      	beq.n	8006ffe <USB_CoreReset+0x36>

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	00030d40 	.word	0x00030d40

08007030 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 800703c:	2044      	movs	r0, #68	; 0x44
 800703e:	f002 fa4b 	bl	80094d8 <USBD_static_malloc>
 8007042:	4602      	mov	r2, r0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 8007054:	2303      	movs	r3, #3
 8007056:	e016      	b.n	8007086 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800705e:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 8007060:	2340      	movs	r3, #64	; 0x40
 8007062:	2202      	movs	r2, #2
 8007064:	2181      	movs	r1, #129	; 0x81
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f002 f913 	bl	8009292 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 800706c:	2340      	movs	r3, #64	; 0x40
 800706e:	2202      	movs	r2, #2
 8007070:	2101      	movs	r1, #1
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f002 f90d 	bl	8009292 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8007078:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 800707a:	2340      	movs	r3, #64	; 0x40
 800707c:	2101      	movs	r1, #1
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f002 f9f6 	bl	8009470 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007084:	2300      	movs	r3, #0
  }
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	460b      	mov	r3, r1
 8007098:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 800709a:	2181      	movs	r1, #129	; 0x81
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f002 f91e 	bl	80092de <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 80070a2:	2101      	movs	r1, #1
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f002 f91a 	bl	80092de <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <USBD_Midi_Setup+0x26>
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d10b      	bne.n	80070e6 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 f937 	bl	8008344 <USBD_CtlError>
      return USBD_FAIL;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e006      	b.n	80070e8 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f931 	bl	8008344 <USBD_CtlError>
      return USBD_FAIL;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e000      	b.n	80070e8 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2265      	movs	r2, #101	; 0x65
 80070fc:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 80070fe:	4b03      	ldr	r3, [pc, #12]	; (800710c <USBD_Midi_GetCfgDesc+0x1c>)
}
 8007100:	4618      	mov	r0, r3
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	200000e0 	.word	0x200000e0

08007110 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	460b      	mov	r3, r1
 8007190:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071b2:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f002 f97a 	bl	80094b2 <USBD_LL_GetRxDataSize>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	e00c      	b.n	80071e8 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	440a      	add	r2, r1
 80071dc:	2104      	movs	r1, #4
 80071de:	4610      	mov	r0, r2
 80071e0:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3304      	adds	r3, #4
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d3ed      	bcc.n	80071ce <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 80071f2:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 80071f4:	2340      	movs	r3, #64	; 0x40
 80071f6:	2101      	movs	r1, #1
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f002 f939 	bl	8009470 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	220a      	movs	r2, #10
 8007214:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 8007216:	4b03      	ldr	r3, [pc, #12]	; (8007224 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20000148 	.word	0x20000148

08007228 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007232:	2303      	movs	r3, #3
 8007234:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b086      	sub	sp, #24
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	4613      	mov	r3, r2
 8007262:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800726a:	2303      	movs	r3, #3
 800726c:	e01f      	b.n	80072ae <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	79fa      	ldrb	r2, [r7, #7]
 80072a0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f001 ff8e 	bl	80091c4 <USBD_LL_Init>
 80072a8:	4603      	mov	r3, r0
 80072aa:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e016      	b.n	80072fc <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00b      	beq.n	80072fa <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	f107 020e 	add.w	r2, r7, #14
 80072ee:	4610      	mov	r0, r2
 80072f0:	4798      	blx	r3
 80072f2:	4602      	mov	r2, r0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 ffa5 	bl	800925c <USBD_LL_Start>
 8007312:	4603      	mov	r3, r0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800733e:	2303      	movs	r3, #3
 8007340:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	2b00      	cmp	r3, #0
 800734a:	d009      	beq.n	8007360 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	78fa      	ldrb	r2, [r7, #3]
 8007356:	4611      	mov	r1, r2
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	4798      	blx	r3
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	78fa      	ldrb	r2, [r7, #3]
 800738a:	4611      	mov	r1, r2
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
  }

  return USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 ff8f 	bl	80082d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80073c0:	461a      	mov	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073ce:	f003 031f 	and.w	r3, r3, #31
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d01a      	beq.n	800740c <USBD_LL_SetupStage+0x72>
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d822      	bhi.n	8007420 <USBD_LL_SetupStage+0x86>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <USBD_LL_SetupStage+0x4a>
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d00a      	beq.n	80073f8 <USBD_LL_SetupStage+0x5e>
 80073e2:	e01d      	b.n	8007420 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fa61 	bl	80078b4 <USBD_StdDevReq>
 80073f2:	4603      	mov	r3, r0
 80073f4:	73fb      	strb	r3, [r7, #15]
      break;
 80073f6:	e020      	b.n	800743a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fac5 	bl	8007990 <USBD_StdItfReq>
 8007406:	4603      	mov	r3, r0
 8007408:	73fb      	strb	r3, [r7, #15]
      break;
 800740a:	e016      	b.n	800743a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fb04 	bl	8007a22 <USBD_StdEPReq>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]
      break;
 800741e:	e00c      	b.n	800743a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007426:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 ff74 	bl	800931c <USBD_LL_StallEP>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
      break;
 8007438:	bf00      	nop
  }

  return ret;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	460b      	mov	r3, r1
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007452:	7afb      	ldrb	r3, [r7, #11]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d138      	bne.n	80074ca <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800745e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007466:	2b03      	cmp	r3, #3
 8007468:	d14a      	bne.n	8007500 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	429a      	cmp	r2, r3
 8007474:	d913      	bls.n	800749e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	4293      	cmp	r3, r2
 800748e:	bf28      	it	cs
 8007490:	4613      	movcs	r3, r2
 8007492:	461a      	mov	r2, r3
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fff1 	bl	800847e <USBD_CtlContinueRx>
 800749c:	e030      	b.n	8007500 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d10b      	bne.n	80074c2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 ffec 	bl	80084a0 <USBD_CtlSendStatus>
 80074c8:	e01a      	b.n	8007500 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d114      	bne.n	8007500 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00e      	beq.n	8007500 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	7afa      	ldrb	r2, [r7, #11]
 80074ec:	4611      	mov	r1, r2
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	4798      	blx	r3
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	e000      	b.n	8007502 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	460b      	mov	r3, r1
 8007514:	607a      	str	r2, [r7, #4]
 8007516:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007518:	7afb      	ldrb	r3, [r7, #11]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d16b      	bne.n	80075f6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3314      	adds	r3, #20
 8007522:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800752a:	2b02      	cmp	r3, #2
 800752c:	d156      	bne.n	80075dc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	429a      	cmp	r2, r3
 8007538:	d914      	bls.n	8007564 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	1ad2      	subs	r2, r2, r3
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	461a      	mov	r2, r3
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 ff83 	bl	800845c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007556:	2300      	movs	r3, #0
 8007558:	2200      	movs	r2, #0
 800755a:	2100      	movs	r1, #0
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f001 ff87 	bl	8009470 <USBD_LL_PrepareReceive>
 8007562:	e03b      	b.n	80075dc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	429a      	cmp	r2, r3
 800756e:	d11c      	bne.n	80075aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007578:	429a      	cmp	r2, r3
 800757a:	d316      	bcc.n	80075aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007586:	429a      	cmp	r2, r3
 8007588:	d20f      	bcs.n	80075aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800758a:	2200      	movs	r2, #0
 800758c:	2100      	movs	r1, #0
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 ff64 	bl	800845c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800759c:	2300      	movs	r3, #0
 800759e:	2200      	movs	r2, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f001 ff64 	bl	8009470 <USBD_LL_PrepareReceive>
 80075a8:	e018      	b.n	80075dc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d10b      	bne.n	80075ce <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075ce:	2180      	movs	r1, #128	; 0x80
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f001 fea3 	bl	800931c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 ff75 	bl	80084c6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d122      	bne.n	800762c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff fe98 	bl	800731c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075f4:	e01a      	b.n	800762c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d114      	bne.n	800762c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00e      	beq.n	800762c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	7afa      	ldrb	r2, [r7, #11]
 8007618:	4611      	mov	r1, r2
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	4798      	blx	r3
 800761e:	4603      	mov	r3, r0
 8007620:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	e000      	b.n	800762e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007666:	2303      	movs	r3, #3
 8007668:	e02f      	b.n	80076ca <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00f      	beq.n	8007694 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d009      	beq.n	8007694 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6852      	ldr	r2, [r2, #4]
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	4611      	mov	r1, r2
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007694:	2340      	movs	r3, #64	; 0x40
 8007696:	2200      	movs	r2, #0
 8007698:	2100      	movs	r1, #0
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 fdf9 	bl	8009292 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2240      	movs	r2, #64	; 0x40
 80076ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076b0:	2340      	movs	r3, #64	; 0x40
 80076b2:	2200      	movs	r2, #0
 80076b4:	2180      	movs	r1, #128	; 0x80
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 fdeb 	bl	8009292 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2240      	movs	r2, #64	; 0x40
 80076c6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	460b      	mov	r3, r1
 80076dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007700:	b2da      	uxtb	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2204      	movs	r2, #4
 800770c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b04      	cmp	r3, #4
 8007730:	d106      	bne.n	8007740 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007738:	b2da      	uxtb	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007760:	2303      	movs	r3, #3
 8007762:	e012      	b.n	800778a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b03      	cmp	r3, #3
 800776e:	d10b      	bne.n	8007788 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e014      	b.n	80077d6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d10d      	bne.n	80077d4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d007      	beq.n	80077d4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	78fa      	ldrb	r2, [r7, #3]
 80077ce:	4611      	mov	r1, r2
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e014      	b.n	8007822 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b03      	cmp	r3, #3
 8007802:	d10d      	bne.n	8007820 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	2b00      	cmp	r3, #0
 800780e:	d007      	beq.n	8007820 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	78fa      	ldrb	r2, [r7, #3]
 800781a:	4611      	mov	r1, r2
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007856:	2b00      	cmp	r3, #0
 8007858:	d009      	beq.n	800786e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6852      	ldr	r2, [r2, #4]
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	4611      	mov	r1, r2
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
  }

  return USBD_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	3301      	adds	r3, #1
 800788e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007896:	8a3b      	ldrh	r3, [r7, #16]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	b21a      	sxth	r2, r3
 800789c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	b21b      	sxth	r3, r3
 80078a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80078a6:	89fb      	ldrh	r3, [r7, #14]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	371c      	adds	r7, #28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d005      	beq.n	80078da <USBD_StdDevReq+0x26>
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d853      	bhi.n	800797a <USBD_StdDevReq+0xc6>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00b      	beq.n	80078ee <USBD_StdDevReq+0x3a>
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d14f      	bne.n	800797a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]
      break;
 80078ec:	e04a      	b.n	8007984 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b09      	cmp	r3, #9
 80078f4:	d83b      	bhi.n	800796e <USBD_StdDevReq+0xba>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <USBD_StdDevReq+0x48>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	08007951 	.word	0x08007951
 8007900:	08007965 	.word	0x08007965
 8007904:	0800796f 	.word	0x0800796f
 8007908:	0800795b 	.word	0x0800795b
 800790c:	0800796f 	.word	0x0800796f
 8007910:	0800792f 	.word	0x0800792f
 8007914:	08007925 	.word	0x08007925
 8007918:	0800796f 	.word	0x0800796f
 800791c:	08007947 	.word	0x08007947
 8007920:	08007939 	.word	0x08007939
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f9de 	bl	8007ce8 <USBD_GetDescriptor>
          break;
 800792c:	e024      	b.n	8007978 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fb43 	bl	8007fbc <USBD_SetAddress>
          break;
 8007936:	e01f      	b.n	8007978 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fb82 	bl	8008044 <USBD_SetConfig>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]
          break;
 8007944:	e018      	b.n	8007978 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc21 	bl	8008190 <USBD_GetConfig>
          break;
 800794e:	e013      	b.n	8007978 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fc52 	bl	80081fc <USBD_GetStatus>
          break;
 8007958:	e00e      	b.n	8007978 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc81 	bl	8008264 <USBD_SetFeature>
          break;
 8007962:	e009      	b.n	8007978 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fc90 	bl	800828c <USBD_ClrFeature>
          break;
 800796c:	e004      	b.n	8007978 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fce7 	bl	8008344 <USBD_CtlError>
          break;
 8007976:	bf00      	nop
      }
      break;
 8007978:	e004      	b.n	8007984 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fce1 	bl	8008344 <USBD_CtlError>
      break;
 8007982:	bf00      	nop
  }

  return ret;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop

08007990 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079a6:	2b40      	cmp	r3, #64	; 0x40
 80079a8:	d005      	beq.n	80079b6 <USBD_StdItfReq+0x26>
 80079aa:	2b40      	cmp	r3, #64	; 0x40
 80079ac:	d82f      	bhi.n	8007a0e <USBD_StdItfReq+0x7e>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <USBD_StdItfReq+0x26>
 80079b2:	2b20      	cmp	r3, #32
 80079b4:	d12b      	bne.n	8007a0e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d81d      	bhi.n	8007a00 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	889b      	ldrh	r3, [r3, #4]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d813      	bhi.n	80079f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	4798      	blx	r3
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	88db      	ldrh	r3, [r3, #6]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d110      	bne.n	8007a0a <USBD_StdItfReq+0x7a>
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10d      	bne.n	8007a0a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fd56 	bl	80084a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079f4:	e009      	b.n	8007a0a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fca3 	bl	8008344 <USBD_CtlError>
          break;
 80079fe:	e004      	b.n	8007a0a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fc9e 	bl	8008344 <USBD_CtlError>
          break;
 8007a08:	e000      	b.n	8007a0c <USBD_StdItfReq+0x7c>
          break;
 8007a0a:	bf00      	nop
      }
      break;
 8007a0c:	e004      	b.n	8007a18 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fc97 	bl	8008344 <USBD_CtlError>
      break;
 8007a16:	bf00      	nop
  }

  return ret;
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	889b      	ldrh	r3, [r3, #4]
 8007a34:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a3e:	2b40      	cmp	r3, #64	; 0x40
 8007a40:	d007      	beq.n	8007a52 <USBD_StdEPReq+0x30>
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	f200 8145 	bhi.w	8007cd2 <USBD_StdEPReq+0x2b0>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00c      	beq.n	8007a66 <USBD_StdEPReq+0x44>
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	f040 8140 	bne.w	8007cd2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
 8007a60:	4603      	mov	r3, r0
 8007a62:	73fb      	strb	r3, [r7, #15]
      break;
 8007a64:	e13a      	b.n	8007cdc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d007      	beq.n	8007a7e <USBD_StdEPReq+0x5c>
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	f300 8129 	bgt.w	8007cc6 <USBD_StdEPReq+0x2a4>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d07f      	beq.n	8007b78 <USBD_StdEPReq+0x156>
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d03c      	beq.n	8007af6 <USBD_StdEPReq+0xd4>
 8007a7c:	e123      	b.n	8007cc6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d002      	beq.n	8007a90 <USBD_StdEPReq+0x6e>
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d016      	beq.n	8007abc <USBD_StdEPReq+0x9a>
 8007a8e:	e02c      	b.n	8007aea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00d      	beq.n	8007ab2 <USBD_StdEPReq+0x90>
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b80      	cmp	r3, #128	; 0x80
 8007a9a:	d00a      	beq.n	8007ab2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 fc3b 	bl	800931c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aa6:	2180      	movs	r1, #128	; 0x80
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 fc37 	bl	800931c <USBD_LL_StallEP>
 8007aae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ab0:	e020      	b.n	8007af4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fc45 	bl	8008344 <USBD_CtlError>
              break;
 8007aba:	e01b      	b.n	8007af4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	885b      	ldrh	r3, [r3, #2]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10e      	bne.n	8007ae2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <USBD_StdEPReq+0xc0>
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b80      	cmp	r3, #128	; 0x80
 8007ace:	d008      	beq.n	8007ae2 <USBD_StdEPReq+0xc0>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	88db      	ldrh	r3, [r3, #6]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d104      	bne.n	8007ae2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fc1d 	bl	800931c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fcdc 	bl	80084a0 <USBD_CtlSendStatus>

              break;
 8007ae8:	e004      	b.n	8007af4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fc29 	bl	8008344 <USBD_CtlError>
              break;
 8007af2:	bf00      	nop
          }
          break;
 8007af4:	e0ec      	b.n	8007cd0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d002      	beq.n	8007b08 <USBD_StdEPReq+0xe6>
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d016      	beq.n	8007b34 <USBD_StdEPReq+0x112>
 8007b06:	e030      	b.n	8007b6a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00d      	beq.n	8007b2a <USBD_StdEPReq+0x108>
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b80      	cmp	r3, #128	; 0x80
 8007b12:	d00a      	beq.n	8007b2a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f001 fbff 	bl	800931c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b1e:	2180      	movs	r1, #128	; 0x80
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 fbfb 	bl	800931c <USBD_LL_StallEP>
 8007b26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b28:	e025      	b.n	8007b76 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fc09 	bl	8008344 <USBD_CtlError>
              break;
 8007b32:	e020      	b.n	8007b76 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	885b      	ldrh	r3, [r3, #2]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d11b      	bne.n	8007b74 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 fc05 	bl	800935a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fca5 	bl	80084a0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007b68:	e004      	b.n	8007b74 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fbe9 	bl	8008344 <USBD_CtlError>
              break;
 8007b72:	e000      	b.n	8007b76 <USBD_StdEPReq+0x154>
              break;
 8007b74:	bf00      	nop
          }
          break;
 8007b76:	e0ab      	b.n	8007cd0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d002      	beq.n	8007b8a <USBD_StdEPReq+0x168>
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d032      	beq.n	8007bee <USBD_StdEPReq+0x1cc>
 8007b88:	e097      	b.n	8007cba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d007      	beq.n	8007ba0 <USBD_StdEPReq+0x17e>
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b80      	cmp	r3, #128	; 0x80
 8007b94:	d004      	beq.n	8007ba0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fbd3 	bl	8008344 <USBD_CtlError>
                break;
 8007b9e:	e091      	b.n	8007cc4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da0b      	bge.n	8007bc0 <USBD_StdEPReq+0x19e>
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	3310      	adds	r3, #16
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	4413      	add	r3, r2
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	e00b      	b.n	8007bd8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2202      	movs	r2, #2
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fc1d 	bl	8008426 <USBD_CtlSendData>
              break;
 8007bec:	e06a      	b.n	8007cc4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da11      	bge.n	8007c1a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	f003 020f 	and.w	r2, r3, #15
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	440b      	add	r3, r1
 8007c08:	3324      	adds	r3, #36	; 0x24
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d117      	bne.n	8007c40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fb96 	bl	8008344 <USBD_CtlError>
                  break;
 8007c18:	e054      	b.n	8007cc4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	f003 020f 	and.w	r2, r3, #15
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d104      	bne.n	8007c40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fb83 	bl	8008344 <USBD_CtlError>
                  break;
 8007c3e:	e041      	b.n	8007cc4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	da0b      	bge.n	8007c60 <USBD_StdEPReq+0x23e>
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	3310      	adds	r3, #16
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	e00b      	b.n	8007c78 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	4413      	add	r3, r2
 8007c76:	3304      	adds	r3, #4
 8007c78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <USBD_StdEPReq+0x264>
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d103      	bne.n	8007c8e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	e00e      	b.n	8007cac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 fb80 	bl	8009398 <USBD_LL_IsStallEP>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	e002      	b.n	8007cac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fbb7 	bl	8008426 <USBD_CtlSendData>
              break;
 8007cb8:	e004      	b.n	8007cc4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fb41 	bl	8008344 <USBD_CtlError>
              break;
 8007cc2:	bf00      	nop
          }
          break;
 8007cc4:	e004      	b.n	8007cd0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fb3b 	bl	8008344 <USBD_CtlError>
          break;
 8007cce:	bf00      	nop
      }
      break;
 8007cd0:	e004      	b.n	8007cdc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fb35 	bl	8008344 <USBD_CtlError>
      break;
 8007cda:	bf00      	nop
  }

  return ret;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	885b      	ldrh	r3, [r3, #2]
 8007d02:	0a1b      	lsrs	r3, r3, #8
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	2b06      	cmp	r3, #6
 8007d0a:	f200 8128 	bhi.w	8007f5e <USBD_GetDescriptor+0x276>
 8007d0e:	a201      	add	r2, pc, #4	; (adr r2, 8007d14 <USBD_GetDescriptor+0x2c>)
 8007d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d14:	08007d31 	.word	0x08007d31
 8007d18:	08007d49 	.word	0x08007d49
 8007d1c:	08007d89 	.word	0x08007d89
 8007d20:	08007f5f 	.word	0x08007f5f
 8007d24:	08007f5f 	.word	0x08007f5f
 8007d28:	08007eff 	.word	0x08007eff
 8007d2c:	08007f2b 	.word	0x08007f2b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	7c12      	ldrb	r2, [r2, #16]
 8007d3c:	f107 0108 	add.w	r1, r7, #8
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
      break;
 8007d46:	e112      	b.n	8007f6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	7c1b      	ldrb	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10d      	bne.n	8007d6c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d58:	f107 0208 	add.w	r2, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	2202      	movs	r2, #2
 8007d68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d6a:	e100      	b.n	8007f6e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	f107 0208 	add.w	r2, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	2202      	movs	r2, #2
 8007d84:	701a      	strb	r2, [r3, #0]
      break;
 8007d86:	e0f2      	b.n	8007f6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	885b      	ldrh	r3, [r3, #2]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	f200 80ac 	bhi.w	8007eec <USBD_GetDescriptor+0x204>
 8007d94:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <USBD_GetDescriptor+0xb4>)
 8007d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9a:	bf00      	nop
 8007d9c:	08007db5 	.word	0x08007db5
 8007da0:	08007de9 	.word	0x08007de9
 8007da4:	08007e1d 	.word	0x08007e1d
 8007da8:	08007e51 	.word	0x08007e51
 8007dac:	08007e85 	.word	0x08007e85
 8007db0:	08007eb9 	.word	0x08007eb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	7c12      	ldrb	r2, [r2, #16]
 8007dcc:	f107 0108 	add.w	r1, r7, #8
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	4798      	blx	r3
 8007dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd6:	e091      	b.n	8007efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fab2 	bl	8008344 <USBD_CtlError>
            err++;
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	3301      	adds	r3, #1
 8007de4:	72fb      	strb	r3, [r7, #11]
          break;
 8007de6:	e089      	b.n	8007efc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	7c12      	ldrb	r2, [r2, #16]
 8007e00:	f107 0108 	add.w	r1, r7, #8
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e0a:	e077      	b.n	8007efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fa98 	bl	8008344 <USBD_CtlError>
            err++;
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	3301      	adds	r3, #1
 8007e18:	72fb      	strb	r3, [r7, #11]
          break;
 8007e1a:	e06f      	b.n	8007efc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00b      	beq.n	8007e40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	7c12      	ldrb	r2, [r2, #16]
 8007e34:	f107 0108 	add.w	r1, r7, #8
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e3e:	e05d      	b.n	8007efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fa7e 	bl	8008344 <USBD_CtlError>
            err++;
 8007e48:	7afb      	ldrb	r3, [r7, #11]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e4e:	e055      	b.n	8007efc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	7c12      	ldrb	r2, [r2, #16]
 8007e68:	f107 0108 	add.w	r1, r7, #8
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
 8007e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e72:	e043      	b.n	8007efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa64 	bl	8008344 <USBD_CtlError>
            err++;
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	72fb      	strb	r3, [r7, #11]
          break;
 8007e82:	e03b      	b.n	8007efc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	7c12      	ldrb	r2, [r2, #16]
 8007e9c:	f107 0108 	add.w	r1, r7, #8
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4798      	blx	r3
 8007ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea6:	e029      	b.n	8007efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa4a 	bl	8008344 <USBD_CtlError>
            err++;
 8007eb0:	7afb      	ldrb	r3, [r7, #11]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb6:	e021      	b.n	8007efc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00b      	beq.n	8007edc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	7c12      	ldrb	r2, [r2, #16]
 8007ed0:	f107 0108 	add.w	r1, r7, #8
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4798      	blx	r3
 8007ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eda:	e00f      	b.n	8007efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa30 	bl	8008344 <USBD_CtlError>
            err++;
 8007ee4:	7afb      	ldrb	r3, [r7, #11]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eea:	e007      	b.n	8007efc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa28 	bl	8008344 <USBD_CtlError>
          err++;
 8007ef4:	7afb      	ldrb	r3, [r7, #11]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007efa:	bf00      	nop
      }
      break;
 8007efc:	e037      	b.n	8007f6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	7c1b      	ldrb	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0e:	f107 0208 	add.w	r2, r7, #8
 8007f12:	4610      	mov	r0, r2
 8007f14:	4798      	blx	r3
 8007f16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f18:	e029      	b.n	8007f6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fa11 	bl	8008344 <USBD_CtlError>
        err++;
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	3301      	adds	r3, #1
 8007f26:	72fb      	strb	r3, [r7, #11]
      break;
 8007f28:	e021      	b.n	8007f6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	7c1b      	ldrb	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10d      	bne.n	8007f4e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	f107 0208 	add.w	r2, r7, #8
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4798      	blx	r3
 8007f42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3301      	adds	r3, #1
 8007f48:	2207      	movs	r2, #7
 8007f4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f4c:	e00f      	b.n	8007f6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f9f7 	bl	8008344 <USBD_CtlError>
        err++;
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f5c:	e007      	b.n	8007f6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f9ef 	bl	8008344 <USBD_CtlError>
      err++;
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f6c:	bf00      	nop
  }

  if (err != 0U)
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d11e      	bne.n	8007fb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	88db      	ldrh	r3, [r3, #6]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d016      	beq.n	8007faa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f7c:	893b      	ldrh	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00e      	beq.n	8007fa0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	88da      	ldrh	r2, [r3, #6]
 8007f86:	893b      	ldrh	r3, [r7, #8]
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	bf28      	it	cs
 8007f8c:	4613      	movcs	r3, r2
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f92:	893b      	ldrh	r3, [r7, #8]
 8007f94:	461a      	mov	r2, r3
 8007f96:	68f9      	ldr	r1, [r7, #12]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa44 	bl	8008426 <USBD_CtlSendData>
 8007f9e:	e009      	b.n	8007fb4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9ce 	bl	8008344 <USBD_CtlError>
 8007fa8:	e004      	b.n	8007fb4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa78 	bl	80084a0 <USBD_CtlSendStatus>
 8007fb0:	e000      	b.n	8007fb4 <USBD_GetDescriptor+0x2cc>
    return;
 8007fb2:	bf00      	nop
  }
}
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop

08007fbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	889b      	ldrh	r3, [r3, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d131      	bne.n	8008032 <USBD_SetAddress+0x76>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	88db      	ldrh	r3, [r3, #6]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d12d      	bne.n	8008032 <USBD_SetAddress+0x76>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	2b7f      	cmp	r3, #127	; 0x7f
 8007fdc:	d829      	bhi.n	8008032 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	885b      	ldrh	r3, [r3, #2]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d104      	bne.n	8008000 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f9a3 	bl	8008344 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffe:	e01d      	b.n	800803c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7bfa      	ldrb	r2, [r7, #15]
 8008004:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f9ef 	bl	80093f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa44 	bl	80084a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008026:	e009      	b.n	800803c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008030:	e004      	b.n	800803c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f985 	bl	8008344 <USBD_CtlError>
  }
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	b2da      	uxtb	r2, r3
 8008058:	4b4c      	ldr	r3, [pc, #304]	; (800818c <USBD_SetConfig+0x148>)
 800805a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800805c:	4b4b      	ldr	r3, [pc, #300]	; (800818c <USBD_SetConfig+0x148>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d905      	bls.n	8008070 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f96c 	bl	8008344 <USBD_CtlError>
    return USBD_FAIL;
 800806c:	2303      	movs	r3, #3
 800806e:	e088      	b.n	8008182 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d002      	beq.n	8008082 <USBD_SetConfig+0x3e>
 800807c:	2b03      	cmp	r3, #3
 800807e:	d025      	beq.n	80080cc <USBD_SetConfig+0x88>
 8008080:	e071      	b.n	8008166 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008082:	4b42      	ldr	r3, [pc, #264]	; (800818c <USBD_SetConfig+0x148>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d01c      	beq.n	80080c4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800808a:	4b40      	ldr	r3, [pc, #256]	; (800818c <USBD_SetConfig+0x148>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008094:	4b3d      	ldr	r3, [pc, #244]	; (800818c <USBD_SetConfig+0x148>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff f949 	bl	8007332 <USBD_SetClassConfig>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d004      	beq.n	80080b4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f949 	bl	8008344 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080b2:	e065      	b.n	8008180 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f9f3 	bl	80084a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2203      	movs	r2, #3
 80080be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080c2:	e05d      	b.n	8008180 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f9eb 	bl	80084a0 <USBD_CtlSendStatus>
      break;
 80080ca:	e059      	b.n	8008180 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080cc:	4b2f      	ldr	r3, [pc, #188]	; (800818c <USBD_SetConfig+0x148>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d112      	bne.n	80080fa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080dc:	4b2b      	ldr	r3, [pc, #172]	; (800818c <USBD_SetConfig+0x148>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080e6:	4b29      	ldr	r3, [pc, #164]	; (800818c <USBD_SetConfig+0x148>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff f93c 	bl	800736a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f9d4 	bl	80084a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080f8:	e042      	b.n	8008180 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80080fa:	4b24      	ldr	r3, [pc, #144]	; (800818c <USBD_SetConfig+0x148>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	429a      	cmp	r2, r3
 8008106:	d02a      	beq.n	800815e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff f92a 	bl	800736a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008116:	4b1d      	ldr	r3, [pc, #116]	; (800818c <USBD_SetConfig+0x148>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008120:	4b1a      	ldr	r3, [pc, #104]	; (800818c <USBD_SetConfig+0x148>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff f903 	bl	8007332 <USBD_SetClassConfig>
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008130:	7bfb      	ldrb	r3, [r7, #15]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00f      	beq.n	8008156 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f903 	bl	8008344 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff f90f 	bl	800736a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008154:	e014      	b.n	8008180 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f9a2 	bl	80084a0 <USBD_CtlSendStatus>
      break;
 800815c:	e010      	b.n	8008180 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f99e 	bl	80084a0 <USBD_CtlSendStatus>
      break;
 8008164:	e00c      	b.n	8008180 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f8eb 	bl	8008344 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800816e:	4b07      	ldr	r3, [pc, #28]	; (800818c <USBD_SetConfig+0x148>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff f8f8 	bl	800736a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800817a:	2303      	movs	r3, #3
 800817c:	73fb      	strb	r3, [r7, #15]
      break;
 800817e:	bf00      	nop
  }

  return ret;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20000344 	.word	0x20000344

08008190 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	88db      	ldrh	r3, [r3, #6]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d004      	beq.n	80081ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f8cd 	bl	8008344 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081aa:	e023      	b.n	80081f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	dc02      	bgt.n	80081be <USBD_GetConfig+0x2e>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	dc03      	bgt.n	80081c4 <USBD_GetConfig+0x34>
 80081bc:	e015      	b.n	80081ea <USBD_GetConfig+0x5a>
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d00b      	beq.n	80081da <USBD_GetConfig+0x4a>
 80081c2:	e012      	b.n	80081ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3308      	adds	r3, #8
 80081ce:	2201      	movs	r2, #1
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f927 	bl	8008426 <USBD_CtlSendData>
        break;
 80081d8:	e00c      	b.n	80081f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3304      	adds	r3, #4
 80081de:	2201      	movs	r2, #1
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f91f 	bl	8008426 <USBD_CtlSendData>
        break;
 80081e8:	e004      	b.n	80081f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f8a9 	bl	8008344 <USBD_CtlError>
        break;
 80081f2:	bf00      	nop
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820c:	b2db      	uxtb	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	2b02      	cmp	r3, #2
 8008212:	d81e      	bhi.n	8008252 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	88db      	ldrh	r3, [r3, #6]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d004      	beq.n	8008226 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f890 	bl	8008344 <USBD_CtlError>
        break;
 8008224:	e01a      	b.n	800825c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f043 0202 	orr.w	r2, r3, #2
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	330c      	adds	r3, #12
 8008246:	2202      	movs	r2, #2
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f8eb 	bl	8008426 <USBD_CtlSendData>
      break;
 8008250:	e004      	b.n	800825c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f875 	bl	8008344 <USBD_CtlError>
      break;
 800825a:	bf00      	nop
  }
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d106      	bne.n	8008284 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f90e 	bl	80084a0 <USBD_CtlSendStatus>
  }
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829c:	b2db      	uxtb	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d80b      	bhi.n	80082bc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	885b      	ldrh	r3, [r3, #2]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d10c      	bne.n	80082c6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f8f3 	bl	80084a0 <USBD_CtlSendStatus>
      }
      break;
 80082ba:	e004      	b.n	80082c6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f840 	bl	8008344 <USBD_CtlError>
      break;
 80082c4:	e000      	b.n	80082c8 <USBD_ClrFeature+0x3c>
      break;
 80082c6:	bf00      	nop
  }
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3301      	adds	r3, #1
 80082ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	781a      	ldrb	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff fabc 	bl	8007878 <SWAPBYTE>
 8008300:	4603      	mov	r3, r0
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3301      	adds	r3, #1
 8008312:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7ff faaf 	bl	8007878 <SWAPBYTE>
 800831a:	4603      	mov	r3, r0
 800831c:	461a      	mov	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3301      	adds	r3, #1
 8008326:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff faa2 	bl	8007878 <SWAPBYTE>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	80da      	strh	r2, [r3, #6]
}
 800833c:	bf00      	nop
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800834e:	2180      	movs	r1, #128	; 0x80
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 ffe3 	bl	800931c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008356:	2100      	movs	r1, #0
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 ffdf 	bl	800931c <USBD_LL_StallEP>
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d036      	beq.n	80083ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008380:	6938      	ldr	r0, [r7, #16]
 8008382:	f000 f836 	bl	80083f2 <USBD_GetLen>
 8008386:	4603      	mov	r3, r0
 8008388:	3301      	adds	r3, #1
 800838a:	b29b      	uxth	r3, r3
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	4413      	add	r3, r2
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	7812      	ldrb	r2, [r2, #0]
 800839e:	701a      	strb	r2, [r3, #0]
  idx++;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	3301      	adds	r3, #1
 80083a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	4413      	add	r3, r2
 80083ac:	2203      	movs	r2, #3
 80083ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	3301      	adds	r3, #1
 80083b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083b6:	e013      	b.n	80083e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	4413      	add	r3, r2
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	7812      	ldrb	r2, [r2, #0]
 80083c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	3301      	adds	r3, #1
 80083c8:	613b      	str	r3, [r7, #16]
    idx++;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	3301      	adds	r3, #1
 80083ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	4413      	add	r3, r2
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
    idx++;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	3301      	adds	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e7      	bne.n	80083b8 <USBD_GetString+0x52>
 80083e8:	e000      	b.n	80083ec <USBD_GetString+0x86>
    return;
 80083ea:	bf00      	nop
  }
}
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008402:	e005      	b.n	8008410 <USBD_GetLen+0x1e>
  {
    len++;
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	3301      	adds	r3, #1
 8008408:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	3301      	adds	r3, #1
 800840e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1f5      	bne.n	8008404 <USBD_GetLen+0x12>
  }

  return len;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2202      	movs	r2, #2
 8008436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	2100      	movs	r1, #0
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 ffee 	bl	800942e <USBD_LL_Transmit>

  return USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	2100      	movs	r1, #0
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 ffdd 	bl	800942e <USBD_LL_Transmit>

  return USBD_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	2100      	movs	r1, #0
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 ffed 	bl	8009470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2204      	movs	r2, #4
 80084ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084b0:	2300      	movs	r3, #0
 80084b2:	2200      	movs	r2, #0
 80084b4:	2100      	movs	r1, #0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 ffb9 	bl	800942e <USBD_LL_Transmit>

  return USBD_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2205      	movs	r2, #5
 80084d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084d6:	2300      	movs	r3, #0
 80084d8:	2200      	movs	r2, #0
 80084da:	2100      	movs	r1, #0
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 ffc7 	bl	8009470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t i2c_addr, uint8_t command)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af04      	add	r7, sp, #16
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
 80084f8:	4613      	mov	r3, r2
 80084fa:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, 0x00, 1, &command, 1, 10);
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	b299      	uxth	r1, r3
 8008500:	230a      	movs	r3, #10
 8008502:	9302      	str	r3, [sp, #8]
 8008504:	2301      	movs	r3, #1
 8008506:	9301      	str	r3, [sp, #4]
 8008508:	1cbb      	adds	r3, r7, #2
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	2301      	movs	r3, #1
 800850e:	2200      	movs	r2, #0
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7fa ff43 	bl	800339c <HAL_I2C_Mem_Write>
 8008516:	4603      	mov	r3, r0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, uint8_t i2c_addr)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
    // Wait for the screen to boot
    HAL_Delay(100);
 800852c:	2064      	movs	r0, #100	; 0x64
 800852e:	f7f9 f95d 	bl	80017ec <HAL_Delay>
    int status = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xAE);   // Display off
 8008536:	78fb      	ldrb	r3, [r7, #3]
 8008538:	22ae      	movs	r2, #174	; 0xae
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff ffd5 	bl	80084ec <ssd1306_WriteCommand>
 8008542:	4603      	mov	r3, r0
 8008544:	461a      	mov	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x20);   // Set Memory Addressing Mode
 800854c:	78fb      	ldrb	r3, [r7, #3]
 800854e:	2220      	movs	r2, #32
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff ffca 	bl	80084ec <ssd1306_WriteCommand>
 8008558:	4603      	mov	r3, r0
 800855a:	461a      	mov	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	2210      	movs	r2, #16
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ffbf 	bl	80084ec <ssd1306_WriteCommand>
 800856e:	4603      	mov	r3, r0
 8008570:	461a      	mov	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	22b0      	movs	r2, #176	; 0xb0
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff ffb4 	bl	80084ec <ssd1306_WriteCommand>
 8008584:	4603      	mov	r3, r0
 8008586:	461a      	mov	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4413      	add	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xC8);   // Set COM Output Scan Direction
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	22c8      	movs	r2, #200	; 0xc8
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff ffa9 	bl	80084ec <ssd1306_WriteCommand>
 800859a:	4603      	mov	r3, r0
 800859c:	461a      	mov	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4413      	add	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x00);   // Set low column address
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	2200      	movs	r2, #0
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7ff ff9e 	bl	80084ec <ssd1306_WriteCommand>
 80085b0:	4603      	mov	r3, r0
 80085b2:	461a      	mov	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x10);   // Set high column address
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	2210      	movs	r2, #16
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff ff93 	bl	80084ec <ssd1306_WriteCommand>
 80085c6:	4603      	mov	r3, r0
 80085c8:	461a      	mov	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4413      	add	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x40);   // Set start line address
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	2240      	movs	r2, #64	; 0x40
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff ff88 	bl	80084ec <ssd1306_WriteCommand>
 80085dc:	4603      	mov	r3, r0
 80085de:	461a      	mov	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x81);   // set contrast control register
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	2281      	movs	r2, #129	; 0x81
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff ff7d 	bl	80084ec <ssd1306_WriteCommand>
 80085f2:	4603      	mov	r3, r0
 80085f4:	461a      	mov	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4413      	add	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x40);
 80085fc:	78fb      	ldrb	r3, [r7, #3]
 80085fe:	2240      	movs	r2, #64	; 0x40
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff ff72 	bl	80084ec <ssd1306_WriteCommand>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA1);   // Set segment re-map 0 to 127
 8008612:	78fb      	ldrb	r3, [r7, #3]
 8008614:	22a1      	movs	r2, #161	; 0xa1
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff ff67 	bl	80084ec <ssd1306_WriteCommand>
 800861e:	4603      	mov	r3, r0
 8008620:	461a      	mov	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA6);   // Set normal display
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	22a6      	movs	r2, #166	; 0xa6
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff ff5c 	bl	80084ec <ssd1306_WriteCommand>
 8008634:	4603      	mov	r3, r0
 8008636:	461a      	mov	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA8);   // Set multiplex ratio(1 to 64)
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	22a8      	movs	r2, #168	; 0xa8
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff ff51 	bl	80084ec <ssd1306_WriteCommand>
 800864a:	4603      	mov	r3, r0
 800864c:	461a      	mov	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, SSD1306_HEIGHT - 1);
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	223f      	movs	r2, #63	; 0x3f
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff ff46 	bl	80084ec <ssd1306_WriteCommand>
 8008660:	4603      	mov	r3, r0
 8008662:	461a      	mov	r2, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4413      	add	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	22a4      	movs	r2, #164	; 0xa4
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff ff3b 	bl	80084ec <ssd1306_WriteCommand>
 8008676:	4603      	mov	r3, r0
 8008678:	461a      	mov	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xD3);   // Set display offset
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	22d3      	movs	r2, #211	; 0xd3
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7ff ff30 	bl	80084ec <ssd1306_WriteCommand>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x00);   // No offset
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	2200      	movs	r2, #0
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7ff ff25 	bl	80084ec <ssd1306_WriteCommand>
 80086a2:	4603      	mov	r3, r0
 80086a4:	461a      	mov	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	22d5      	movs	r2, #213	; 0xd5
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff ff1a 	bl	80084ec <ssd1306_WriteCommand>
 80086b8:	4603      	mov	r3, r0
 80086ba:	461a      	mov	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xF0);   // Set divide ratio
 80086c2:	78fb      	ldrb	r3, [r7, #3]
 80086c4:	22f0      	movs	r2, #240	; 0xf0
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff ff0f 	bl	80084ec <ssd1306_WriteCommand>
 80086ce:	4603      	mov	r3, r0
 80086d0:	461a      	mov	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4413      	add	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xD9);   // Set pre-charge period
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	22d9      	movs	r2, #217	; 0xd9
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff ff04 	bl	80084ec <ssd1306_WriteCommand>
 80086e4:	4603      	mov	r3, r0
 80086e6:	461a      	mov	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x22);
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	2222      	movs	r2, #34	; 0x22
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff fef9 	bl	80084ec <ssd1306_WriteCommand>
 80086fa:	4603      	mov	r3, r0
 80086fc:	461a      	mov	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xDA);   // Set com pins hardware configuration
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	22da      	movs	r2, #218	; 0xda
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff feee 	bl	80084ec <ssd1306_WriteCommand>
 8008710:	4603      	mov	r3, r0
 8008712:	461a      	mov	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x12);   // Do not use COM left/right remap
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	2212      	movs	r2, #18
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff fee3 	bl	80084ec <ssd1306_WriteCommand>
 8008726:	4603      	mov	r3, r0
 8008728:	461a      	mov	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xDB);   // Set vcomh
 8008730:	78fb      	ldrb	r3, [r7, #3]
 8008732:	22db      	movs	r2, #219	; 0xdb
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff fed8 	bl	80084ec <ssd1306_WriteCommand>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x20);   // 0x20,0.77xVcc
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	2220      	movs	r2, #32
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff fecd 	bl	80084ec <ssd1306_WriteCommand>
 8008752:	4603      	mov	r3, r0
 8008754:	461a      	mov	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4413      	add	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x8D);   // Set DC-DC enable
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	228d      	movs	r2, #141	; 0x8d
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fec2 	bl	80084ec <ssd1306_WriteCommand>
 8008768:	4603      	mov	r3, r0
 800876a:	461a      	mov	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x14);   //
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	2214      	movs	r2, #20
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff feb7 	bl	80084ec <ssd1306_WriteCommand>
 800877e:	4603      	mov	r3, r0
 8008780:	461a      	mov	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xAF);   // Turn on SSD1306 panel
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	22af      	movs	r2, #175	; 0xaf
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff feac 	bl	80084ec <ssd1306_WriteCommand>
 8008794:	4603      	mov	r3, r0
 8008796:	461a      	mov	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <ssd1306_Init+0x288>
        return 1;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e011      	b.n	80087cc <ssd1306_Init+0x2ac>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80087a8:	2000      	movs	r0, #0
 80087aa:	f000 f815 	bl	80087d8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c, i2c_addr);
 80087ae:	78fb      	ldrb	r3, [r7, #3]
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f834 	bl	8008820 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80087b8:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <ssd1306_Init+0x2b4>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80087be:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <ssd1306_Init+0x2b4>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80087c4:	4b03      	ldr	r3, [pc, #12]	; (80087d4 <ssd1306_Init+0x2b4>)
 80087c6:	2201      	movs	r2, #1
 80087c8:	715a      	strb	r2, [r3, #5]

    return 0;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	20000748 	.word	0x20000748

080087d8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80087e2:	2300      	movs	r3, #0
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	e00d      	b.n	8008804 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <ssd1306_Fill+0x1a>
 80087ee:	2100      	movs	r1, #0
 80087f0:	e000      	b.n	80087f4 <ssd1306_Fill+0x1c>
 80087f2:	21ff      	movs	r1, #255	; 0xff
 80087f4:	4a09      	ldr	r2, [pc, #36]	; (800881c <ssd1306_Fill+0x44>)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4413      	add	r3, r2
 80087fa:	460a      	mov	r2, r1
 80087fc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800880a:	d3ed      	bcc.n	80087e8 <ssd1306_Fill+0x10>
    }
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	20000348 	.word	0x20000348

08008820 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c, uint8_t i2c_addr)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af04      	add	r7, sp, #16
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
 8008830:	e026      	b.n	8008880 <ssd1306_UpdateScreen+0x60>
        ssd1306_WriteCommand(hi2c, i2c_addr, 0xB0 + i);
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	3b50      	subs	r3, #80	; 0x50
 8008836:	b2da      	uxtb	r2, r3
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff fe55 	bl	80084ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, i2c_addr, 0x00);
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	2200      	movs	r2, #0
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff fe4f 	bl	80084ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, i2c_addr, 0x10);
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	2210      	movs	r2, #16
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff fe49 	bl	80084ec <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, i2c_addr, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	b299      	uxth	r1, r3
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	01db      	lsls	r3, r3, #7
 8008862:	4a0b      	ldr	r2, [pc, #44]	; (8008890 <ssd1306_UpdateScreen+0x70>)
 8008864:	4413      	add	r3, r2
 8008866:	2264      	movs	r2, #100	; 0x64
 8008868:	9202      	str	r2, [sp, #8]
 800886a:	2280      	movs	r2, #128	; 0x80
 800886c:	9201      	str	r2, [sp, #4]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	2301      	movs	r3, #1
 8008872:	2240      	movs	r2, #64	; 0x40
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7fa fd91 	bl	800339c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	3301      	adds	r3, #1
 800887e:	73fb      	strb	r3, [r7, #15]
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	2b07      	cmp	r3, #7
 8008884:	d9d5      	bls.n	8008832 <ssd1306_UpdateScreen+0x12>
    }
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20000348 	.word	0x20000348

08008894 <ssd1306_WriteKnob>:

void ssd1306_WriteKnob(Knob k) {
 8008894:	b084      	sub	sp, #16
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	f107 0c18 	add.w	ip, r7, #24
 80088a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t len_label = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]
	uint8_t x = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]

	char channel_string[4];
	char cc_string[4];
	char value_string[4];

	sprintf(channel_string, "%.2d", (int) k.channel);
 80088ac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80088b0:	461a      	mov	r2, r3
 80088b2:	f107 0308 	add.w	r3, r7, #8
 80088b6:	494a      	ldr	r1, [pc, #296]	; (80089e0 <ssd1306_WriteKnob+0x14c>)
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 fe79 	bl	80095b0 <siprintf>
	sprintf(cc_string, "%.3d", (int) k.cc);
 80088be:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80088c2:	461a      	mov	r2, r3
 80088c4:	1d3b      	adds	r3, r7, #4
 80088c6:	4947      	ldr	r1, [pc, #284]	; (80089e4 <ssd1306_WriteKnob+0x150>)
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fe71 	bl	80095b0 <siprintf>
	sprintf(value_string, "%.3d", (int) k.value);
 80088ce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80088d2:	461a      	mov	r2, r3
 80088d4:	463b      	mov	r3, r7
 80088d6:	4943      	ldr	r1, [pc, #268]	; (80089e4 <ssd1306_WriteKnob+0x150>)
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 fe69 	bl	80095b0 <siprintf>

	// Clear buffer
	ssd1306_Fill(Black);
 80088de:	2000      	movs	r0, #0
 80088e0:	f7ff ff7a 	bl	80087d8 <ssd1306_Fill>

	// Draw top line
	ssd1306_SetCursor(0, 0);
 80088e4:	2100      	movs	r1, #0
 80088e6:	2000      	movs	r0, #0
 80088e8:	f000 f98a 	bl	8008c00 <ssd1306_SetCursor>
	ssd1306_WriteString(channel_string, Font_7x10, White);
 80088ec:	4a3e      	ldr	r2, [pc, #248]	; (80089e8 <ssd1306_WriteKnob+0x154>)
 80088ee:	f107 0008 	add.w	r0, r7, #8
 80088f2:	2301      	movs	r3, #1
 80088f4:	ca06      	ldmia	r2, {r1, r2}
 80088f6:	f000 f95d 	bl	8008bb4 <ssd1306_WriteString>
	ssd1306_SetCursor(20, 0);
 80088fa:	2100      	movs	r1, #0
 80088fc:	2014      	movs	r0, #20
 80088fe:	f000 f97f 	bl	8008c00 <ssd1306_SetCursor>
	ssd1306_WriteString(cc_string, Font_7x10, White);
 8008902:	4a39      	ldr	r2, [pc, #228]	; (80089e8 <ssd1306_WriteKnob+0x154>)
 8008904:	1d38      	adds	r0, r7, #4
 8008906:	2301      	movs	r3, #1
 8008908:	ca06      	ldmia	r2, {r1, r2}
 800890a:	f000 f953 	bl	8008bb4 <ssd1306_WriteString>
	ssd1306_SetCursor(62, 0);
 800890e:	2100      	movs	r1, #0
 8008910:	203e      	movs	r0, #62	; 0x3e
 8008912:	f000 f975 	bl	8008c00 <ssd1306_SetCursor>
	ssd1306_WriteString(">>>", Font_7x10, White);
 8008916:	4a34      	ldr	r2, [pc, #208]	; (80089e8 <ssd1306_WriteKnob+0x154>)
 8008918:	2301      	movs	r3, #1
 800891a:	ca06      	ldmia	r2, {r1, r2}
 800891c:	4833      	ldr	r0, [pc, #204]	; (80089ec <ssd1306_WriteKnob+0x158>)
 800891e:	f000 f949 	bl	8008bb4 <ssd1306_WriteString>
	ssd1306_SetCursor(105, 0);
 8008922:	2100      	movs	r1, #0
 8008924:	2069      	movs	r0, #105	; 0x69
 8008926:	f000 f96b 	bl	8008c00 <ssd1306_SetCursor>
	ssd1306_WriteString(value_string, Font_7x10, White);
 800892a:	4a2f      	ldr	r2, [pc, #188]	; (80089e8 <ssd1306_WriteKnob+0x154>)
 800892c:	4638      	mov	r0, r7
 800892e:	2301      	movs	r3, #1
 8008930:	ca06      	ldmia	r2, {r1, r2}
 8008932:	f000 f93f 	bl	8008bb4 <ssd1306_WriteString>

	// Draw first label
	len_label = strlen(k.label);
 8008936:	f107 031a 	add.w	r3, r7, #26
 800893a:	4618      	mov	r0, r3
 800893c:	f7f7 fc50 	bl	80001e0 <strlen>
 8008940:	4603      	mov	r3, r0
 8008942:	73bb      	strb	r3, [r7, #14]
	x = ((14 - len_label) / 2) * 9;
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	f1c3 030e 	rsb	r3, r3, #14
 800894a:	0fda      	lsrs	r2, r3, #31
 800894c:	4413      	add	r3, r2
 800894e:	105b      	asrs	r3, r3, #1
 8008950:	b2db      	uxtb	r3, r3
 8008952:	461a      	mov	r2, r3
 8008954:	00d2      	lsls	r2, r2, #3
 8008956:	4413      	add	r3, r2
 8008958:	73fb      	strb	r3, [r7, #15]
	if (len_label % 2 != 0) x += 5;
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <ssd1306_WriteKnob+0xd8>
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	3305      	adds	r3, #5
 800896a:	73fb      	strb	r3, [r7, #15]
	ssd1306_SetCursor(x, 16);
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	2110      	movs	r1, #16
 8008970:	4618      	mov	r0, r3
 8008972:	f000 f945 	bl	8008c00 <ssd1306_SetCursor>
	ssd1306_WriteString(k.label, Font_9x18, White);
 8008976:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <ssd1306_WriteKnob+0x15c>)
 8008978:	f107 001a 	add.w	r0, r7, #26
 800897c:	2301      	movs	r3, #1
 800897e:	ca06      	ldmia	r2, {r1, r2}
 8008980:	f000 f918 	bl	8008bb4 <ssd1306_WriteString>

	// Draw first label
	len_label = strlen(k.sub_label);
 8008984:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008988:	4618      	mov	r0, r3
 800898a:	f7f7 fc29 	bl	80001e0 <strlen>
 800898e:	4603      	mov	r3, r0
 8008990:	73bb      	strb	r3, [r7, #14]
	x = ((14 - len_label) / 2) * 9;
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	f1c3 030e 	rsb	r3, r3, #14
 8008998:	0fda      	lsrs	r2, r3, #31
 800899a:	4413      	add	r3, r2
 800899c:	105b      	asrs	r3, r3, #1
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	00d2      	lsls	r2, r2, #3
 80089a4:	4413      	add	r3, r2
 80089a6:	73fb      	strb	r3, [r7, #15]
	if (len_label % 2 != 0) x += 5;
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <ssd1306_WriteKnob+0x126>
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	3305      	adds	r3, #5
 80089b8:	73fb      	strb	r3, [r7, #15]
	ssd1306_SetCursor(x, 40);
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	2128      	movs	r1, #40	; 0x28
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f91e 	bl	8008c00 <ssd1306_SetCursor>
	ssd1306_WriteString(k.sub_label, Font_9x18, White);
 80089c4:	4a0a      	ldr	r2, [pc, #40]	; (80089f0 <ssd1306_WriteKnob+0x15c>)
 80089c6:	f107 0029 	add.w	r0, r7, #41	; 0x29
 80089ca:	2301      	movs	r3, #1
 80089cc:	ca06      	ldmia	r2, {r1, r2}
 80089ce:	f000 f8f1 	bl	8008bb4 <ssd1306_WriteString>
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089dc:	b004      	add	sp, #16
 80089de:	4770      	bx	lr
 80089e0:	08009e24 	.word	0x08009e24
 80089e4:	08009e2c 	.word	0x08009e2c
 80089e8:	20000154 	.word	0x20000154
 80089ec:	08009e34 	.word	0x08009e34
 80089f0:	2000015c 	.word	0x2000015c

080089f4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	4603      	mov	r3, r0
 80089fc:	71fb      	strb	r3, [r7, #7]
 80089fe:	460b      	mov	r3, r1
 8008a00:	71bb      	strb	r3, [r7, #6]
 8008a02:	4613      	mov	r3, r2
 8008a04:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8008a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	db48      	blt.n	8008aa0 <ssd1306_DrawPixel+0xac>
 8008a0e:	79bb      	ldrb	r3, [r7, #6]
 8008a10:	2b3f      	cmp	r3, #63	; 0x3f
 8008a12:	d845      	bhi.n	8008aa0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8008a14:	4b25      	ldr	r3, [pc, #148]	; (8008aac <ssd1306_DrawPixel+0xb8>)
 8008a16:	791b      	ldrb	r3, [r3, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d006      	beq.n	8008a2a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8008a1c:	797b      	ldrb	r3, [r7, #5]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bf0c      	ite	eq
 8008a22:	2301      	moveq	r3, #1
 8008a24:	2300      	movne	r3, #0
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8008a2a:	797b      	ldrb	r3, [r7, #5]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d11a      	bne.n	8008a66 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008a30:	79fa      	ldrb	r2, [r7, #7]
 8008a32:	79bb      	ldrb	r3, [r7, #6]
 8008a34:	08db      	lsrs	r3, r3, #3
 8008a36:	b2d8      	uxtb	r0, r3
 8008a38:	4603      	mov	r3, r0
 8008a3a:	01db      	lsls	r3, r3, #7
 8008a3c:	4413      	add	r3, r2
 8008a3e:	4a1c      	ldr	r2, [pc, #112]	; (8008ab0 <ssd1306_DrawPixel+0xbc>)
 8008a40:	5cd3      	ldrb	r3, [r2, r3]
 8008a42:	b25a      	sxtb	r2, r3
 8008a44:	79bb      	ldrb	r3, [r7, #6]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a50:	b25b      	sxtb	r3, r3
 8008a52:	4313      	orrs	r3, r2
 8008a54:	b259      	sxtb	r1, r3
 8008a56:	79fa      	ldrb	r2, [r7, #7]
 8008a58:	4603      	mov	r3, r0
 8008a5a:	01db      	lsls	r3, r3, #7
 8008a5c:	4413      	add	r3, r2
 8008a5e:	b2c9      	uxtb	r1, r1
 8008a60:	4a13      	ldr	r2, [pc, #76]	; (8008ab0 <ssd1306_DrawPixel+0xbc>)
 8008a62:	54d1      	strb	r1, [r2, r3]
 8008a64:	e01d      	b.n	8008aa2 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008a66:	79fa      	ldrb	r2, [r7, #7]
 8008a68:	79bb      	ldrb	r3, [r7, #6]
 8008a6a:	08db      	lsrs	r3, r3, #3
 8008a6c:	b2d8      	uxtb	r0, r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	01db      	lsls	r3, r3, #7
 8008a72:	4413      	add	r3, r2
 8008a74:	4a0e      	ldr	r2, [pc, #56]	; (8008ab0 <ssd1306_DrawPixel+0xbc>)
 8008a76:	5cd3      	ldrb	r3, [r2, r3]
 8008a78:	b25a      	sxtb	r2, r3
 8008a7a:	79bb      	ldrb	r3, [r7, #6]
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	2101      	movs	r1, #1
 8008a82:	fa01 f303 	lsl.w	r3, r1, r3
 8008a86:	b25b      	sxtb	r3, r3
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	b25b      	sxtb	r3, r3
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	b259      	sxtb	r1, r3
 8008a90:	79fa      	ldrb	r2, [r7, #7]
 8008a92:	4603      	mov	r3, r0
 8008a94:	01db      	lsls	r3, r3, #7
 8008a96:	4413      	add	r3, r2
 8008a98:	b2c9      	uxtb	r1, r1
 8008a9a:	4a05      	ldr	r2, [pc, #20]	; (8008ab0 <ssd1306_DrawPixel+0xbc>)
 8008a9c:	54d1      	strb	r1, [r2, r3]
 8008a9e:	e000      	b.n	8008aa2 <ssd1306_DrawPixel+0xae>
        return;
 8008aa0:	bf00      	nop
    }
}
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	20000748 	.word	0x20000748
 8008ab0:	20000348 	.word	0x20000348

08008ab4 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8008ab4:	b590      	push	{r4, r7, lr}
 8008ab6:	b089      	sub	sp, #36	; 0x24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4604      	mov	r4, r0
 8008abc:	1d38      	adds	r0, r7, #4
 8008abe:	e880 0006 	stmia.w	r0, {r1, r2}
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	4623      	mov	r3, r4
 8008ac6:	73fb      	strb	r3, [r7, #15]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8008acc:	4b38      	ldr	r3, [pc, #224]	; (8008bb0 <ssd1306_WriteChar+0xfc>)
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	793b      	ldrb	r3, [r7, #4]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ad8:	dc06      	bgt.n	8008ae8 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8008ada:	4b35      	ldr	r3, [pc, #212]	; (8008bb0 <ssd1306_WriteChar+0xfc>)
 8008adc:	885b      	ldrh	r3, [r3, #2]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	797b      	ldrb	r3, [r7, #5]
 8008ae2:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8008ae4:	2b3f      	cmp	r3, #63	; 0x3f
 8008ae6:	dd01      	ble.n	8008aec <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e05d      	b.n	8008ba8 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8008aec:	2300      	movs	r3, #0
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	e04c      	b.n	8008b8c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	3b20      	subs	r3, #32
 8008af8:	7979      	ldrb	r1, [r7, #5]
 8008afa:	fb01 f303 	mul.w	r3, r1, r3
 8008afe:	4619      	mov	r1, r3
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	440b      	add	r3, r1
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	4413      	add	r3, r2
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	e034      	b.n	8008b7c <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d012      	beq.n	8008b48 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008b22:	4b23      	ldr	r3, [pc, #140]	; (8008bb0 <ssd1306_WriteChar+0xfc>)
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	4413      	add	r3, r2
 8008b2e:	b2d8      	uxtb	r0, r3
 8008b30:	4b1f      	ldr	r3, [pc, #124]	; (8008bb0 <ssd1306_WriteChar+0xfc>)
 8008b32:	885b      	ldrh	r3, [r3, #2]
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	4413      	add	r3, r2
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	7bba      	ldrb	r2, [r7, #14]
 8008b40:	4619      	mov	r1, r3
 8008b42:	f7ff ff57 	bl	80089f4 <ssd1306_DrawPixel>
 8008b46:	e016      	b.n	8008b76 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008b48:	4b19      	ldr	r3, [pc, #100]	; (8008bb0 <ssd1306_WriteChar+0xfc>)
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	4413      	add	r3, r2
 8008b54:	b2d8      	uxtb	r0, r3
 8008b56:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <ssd1306_WriteChar+0xfc>)
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	4413      	add	r3, r2
 8008b62:	b2d9      	uxtb	r1, r3
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bf0c      	ite	eq
 8008b6a:	2301      	moveq	r3, #1
 8008b6c:	2300      	movne	r3, #0
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	461a      	mov	r2, r3
 8008b72:	f7ff ff3f 	bl	80089f4 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	793b      	ldrb	r3, [r7, #4]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d3c5      	bcc.n	8008b12 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	61fb      	str	r3, [r7, #28]
 8008b8c:	797b      	ldrb	r3, [r7, #5]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d3ad      	bcc.n	8008af2 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008b96:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <ssd1306_WriteChar+0xfc>)
 8008b98:	881a      	ldrh	r2, [r3, #0]
 8008b9a:	793b      	ldrb	r3, [r7, #4]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	4413      	add	r3, r2
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	4b03      	ldr	r3, [pc, #12]	; (8008bb0 <ssd1306_WriteChar+0xfc>)
 8008ba4:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3724      	adds	r7, #36	; 0x24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd90      	pop	{r4, r7, pc}
 8008bb0:	20000748 	.word	0x20000748

08008bb4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	1d38      	adds	r0, r7, #4
 8008bbe:	e880 0006 	stmia.w	r0, {r1, r2}
 8008bc2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8008bc4:	e012      	b.n	8008bec <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	7818      	ldrb	r0, [r3, #0]
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	1d3a      	adds	r2, r7, #4
 8008bce:	ca06      	ldmia	r2, {r1, r2}
 8008bd0:	f7ff ff70 	bl	8008ab4 <ssd1306_WriteChar>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d002      	beq.n	8008be6 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	e008      	b.n	8008bf8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	60fb      	str	r3, [r7, #12]
    while (*str)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e8      	bne.n	8008bc6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	4603      	mov	r3, r0
 8008c08:	460a      	mov	r2, r1
 8008c0a:	71fb      	strb	r3, [r7, #7]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <ssd1306_SetCursor+0x2c>)
 8008c16:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008c18:	79bb      	ldrb	r3, [r7, #6]
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	4b03      	ldr	r3, [pc, #12]	; (8008c2c <ssd1306_SetCursor+0x2c>)
 8008c1e:	805a      	strh	r2, [r3, #2]
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	20000748 	.word	0x20000748

08008c30 <MX_USB_DEVICE_Init>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c34:	2200      	movs	r2, #0
 8008c36:	4912      	ldr	r1, [pc, #72]	; (8008c80 <MX_USB_DEVICE_Init+0x50>)
 8008c38:	4812      	ldr	r0, [pc, #72]	; (8008c84 <MX_USB_DEVICE_Init+0x54>)
 8008c3a:	f7fe fb0c 	bl	8007256 <USBD_Init>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c44:	f7f8 fbad 	bl	80013a2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK)
 8008c48:	490f      	ldr	r1, [pc, #60]	; (8008c88 <MX_USB_DEVICE_Init+0x58>)
 8008c4a:	480e      	ldr	r0, [pc, #56]	; (8008c84 <MX_USB_DEVICE_Init+0x54>)
 8008c4c:	f7fe fb33 	bl	80072b6 <USBD_RegisterClass>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c56:	f7f8 fba4 	bl	80013a2 <Error_Handler>
  }
  if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK)
 8008c5a:	490c      	ldr	r1, [pc, #48]	; (8008c8c <MX_USB_DEVICE_Init+0x5c>)
 8008c5c:	4809      	ldr	r0, [pc, #36]	; (8008c84 <MX_USB_DEVICE_Init+0x54>)
 8008c5e:	f7fe fae3 	bl	8007228 <USBD_Midi_RegisterInterface>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c68:	f7f8 fb9b 	bl	80013a2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c6c:	4805      	ldr	r0, [pc, #20]	; (8008c84 <MX_USB_DEVICE_Init+0x54>)
 8008c6e:	f7fe fb49 	bl	8007304 <USBD_Start>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c78:	f7f8 fb93 	bl	80013a2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c7c:	bf00      	nop
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	20000164 	.word	0x20000164
 8008c84:	200024d0 	.word	0x200024d0
 8008c88:	200000a8 	.word	0x200000a8
 8008c8c:	200001b4 	.word	0x200001b4

08008c90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2212      	movs	r2, #18
 8008ca0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ca2:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	20000180 	.word	0x20000180

08008cb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	20000194 	.word	0x20000194

08008cd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d105      	bne.n	8008cf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	4907      	ldr	r1, [pc, #28]	; (8008d0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008cee:	4808      	ldr	r0, [pc, #32]	; (8008d10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cf0:	f7ff fb39 	bl	8008366 <USBD_GetString>
 8008cf4:	e004      	b.n	8008d00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	4904      	ldr	r1, [pc, #16]	; (8008d0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008cfa:	4805      	ldr	r0, [pc, #20]	; (8008d10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cfc:	f7ff fb33 	bl	8008366 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d00:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	200027a0 	.word	0x200027a0
 8008d10:	08009e38 	.word	0x08009e38

08008d14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	4904      	ldr	r1, [pc, #16]	; (8008d34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d24:	4804      	ldr	r0, [pc, #16]	; (8008d38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d26:	f7ff fb1e 	bl	8008366 <USBD_GetString>
  return USBD_StrDesc;
 8008d2a:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	200027a0 	.word	0x200027a0
 8008d38:	08009e4c 	.word	0x08009e4c

08008d3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	221a      	movs	r2, #26
 8008d4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d4e:	f000 f843 	bl	8008dd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d52:	4b02      	ldr	r3, [pc, #8]	; (8008d5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000198 	.word	0x20000198

08008d60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d105      	bne.n	8008d7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	4907      	ldr	r1, [pc, #28]	; (8008d94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d76:	4808      	ldr	r0, [pc, #32]	; (8008d98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d78:	f7ff faf5 	bl	8008366 <USBD_GetString>
 8008d7c:	e004      	b.n	8008d88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	4904      	ldr	r1, [pc, #16]	; (8008d94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d82:	4805      	ldr	r0, [pc, #20]	; (8008d98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d84:	f7ff faef 	bl	8008366 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	200027a0 	.word	0x200027a0
 8008d98:	08009e60 	.word	0x08009e60

08008d9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	6039      	str	r1, [r7, #0]
 8008da6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008da8:	79fb      	ldrb	r3, [r7, #7]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d105      	bne.n	8008dba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	4907      	ldr	r1, [pc, #28]	; (8008dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008db2:	4808      	ldr	r0, [pc, #32]	; (8008dd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008db4:	f7ff fad7 	bl	8008366 <USBD_GetString>
 8008db8:	e004      	b.n	8008dc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	4904      	ldr	r1, [pc, #16]	; (8008dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dbe:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dc0:	f7ff fad1 	bl	8008366 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dc4:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	200027a0 	.word	0x200027a0
 8008dd4:	08009e70 	.word	0x08009e70

08008dd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dde:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <Get_SerialNum+0x44>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <Get_SerialNum+0x48>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dea:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <Get_SerialNum+0x4c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4413      	add	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dfe:	2208      	movs	r2, #8
 8008e00:	4909      	ldr	r1, [pc, #36]	; (8008e28 <Get_SerialNum+0x50>)
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 f814 	bl	8008e30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e08:	2204      	movs	r2, #4
 8008e0a:	4908      	ldr	r1, [pc, #32]	; (8008e2c <Get_SerialNum+0x54>)
 8008e0c:	68b8      	ldr	r0, [r7, #8]
 8008e0e:	f000 f80f 	bl	8008e30 <IntToUnicode>
  }
}
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	1fff7a10 	.word	0x1fff7a10
 8008e20:	1fff7a14 	.word	0x1fff7a14
 8008e24:	1fff7a18 	.word	0x1fff7a18
 8008e28:	2000019a 	.word	0x2000019a
 8008e2c:	200001aa 	.word	0x200001aa

08008e30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e42:	2300      	movs	r3, #0
 8008e44:	75fb      	strb	r3, [r7, #23]
 8008e46:	e027      	b.n	8008e98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	0f1b      	lsrs	r3, r3, #28
 8008e4c:	2b09      	cmp	r3, #9
 8008e4e:	d80b      	bhi.n	8008e68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	0f1b      	lsrs	r3, r3, #28
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	440b      	add	r3, r1
 8008e60:	3230      	adds	r2, #48	; 0x30
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]
 8008e66:	e00a      	b.n	8008e7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	0f1b      	lsrs	r3, r3, #28
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	4619      	mov	r1, r3
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	440b      	add	r3, r1
 8008e78:	3237      	adds	r2, #55	; 0x37
 8008e7a:	b2d2      	uxtb	r2, r2
 8008e7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	011b      	lsls	r3, r3, #4
 8008e82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	005b      	lsls	r3, r3, #1
 8008e88:	3301      	adds	r3, #1
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	3301      	adds	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
 8008e98:	7dfa      	ldrb	r2, [r7, #23]
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d3d3      	bcc.n	8008e48 <IntToUnicode+0x18>
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 8008eae:	b480      	push	{r7}
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]

	uint8_t chan = msg[1] & 0xf;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	f003 030f 	and.w	r3, r3, #15
 8008ec2:	73fb      	strb	r3, [r7, #15]
	uint8_t msgtype = msg[1] & 0xf0;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	f023 030f 	bic.w	r3, r3, #15
 8008ece:	73bb      	strb	r3, [r7, #14]
	uint8_t b1 =  msg[2];
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	789b      	ldrb	r3, [r3, #2]
 8008ed4:	737b      	strb	r3, [r7, #13]
	uint8_t b2 =  msg[3];
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	78db      	ldrb	r3, [r3, #3]
 8008eda:	733b      	strb	r3, [r7, #12]
	uint16_t b = ((b2 & 0x7f) << 7) | (b1 & 0x7f);
 8008edc:	7b3b      	ldrb	r3, [r7, #12]
 8008ede:	01db      	lsls	r3, r3, #7
 8008ee0:	b21b      	sxth	r3, r3
 8008ee2:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8008ee6:	b21a      	sxth	r2, r3
 8008ee8:	7b7b      	ldrb	r3, [r7, #13]
 8008eea:	b21b      	sxth	r3, r3
 8008eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ef0:	b21b      	sxth	r3, r3
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	b21b      	sxth	r3, r3
 8008ef6:	817b      	strh	r3, [r7, #10]

	switch (msgtype) {
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	2be0      	cmp	r3, #224	; 0xe0
 8008efc:	d012      	beq.n	8008f24 <Midi_Receive+0x76>
 8008efe:	2be0      	cmp	r3, #224	; 0xe0
 8008f00:	dc12      	bgt.n	8008f28 <Midi_Receive+0x7a>
 8008f02:	2bd0      	cmp	r3, #208	; 0xd0
 8008f04:	d012      	beq.n	8008f2c <Midi_Receive+0x7e>
 8008f06:	2bd0      	cmp	r3, #208	; 0xd0
 8008f08:	dc0e      	bgt.n	8008f28 <Midi_Receive+0x7a>
 8008f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8008f0c:	d010      	beq.n	8008f30 <Midi_Receive+0x82>
 8008f0e:	2bc0      	cmp	r3, #192	; 0xc0
 8008f10:	dc0a      	bgt.n	8008f28 <Midi_Receive+0x7a>
 8008f12:	2bb0      	cmp	r3, #176	; 0xb0
 8008f14:	d00e      	beq.n	8008f34 <Midi_Receive+0x86>
 8008f16:	2bb0      	cmp	r3, #176	; 0xb0
 8008f18:	dc06      	bgt.n	8008f28 <Midi_Receive+0x7a>
 8008f1a:	2b80      	cmp	r3, #128	; 0x80
 8008f1c:	d00c      	beq.n	8008f38 <Midi_Receive+0x8a>
 8008f1e:	2b90      	cmp	r3, #144	; 0x90
 8008f20:	d00c      	beq.n	8008f3c <Midi_Receive+0x8e>
		break;
	case 0xE0:
//		fluid_synth_pitch_bend(synth, chan, b);
		break;
	default:
		break;
 8008f22:	e001      	b.n	8008f28 <Midi_Receive+0x7a>
		break;
 8008f24:	bf00      	nop
 8008f26:	e00a      	b.n	8008f3e <Midi_Receive+0x90>
		break;
 8008f28:	bf00      	nop
 8008f2a:	e008      	b.n	8008f3e <Midi_Receive+0x90>
		break;
 8008f2c:	bf00      	nop
 8008f2e:	e006      	b.n	8008f3e <Midi_Receive+0x90>
		break;
 8008f30:	bf00      	nop
 8008f32:	e004      	b.n	8008f3e <Midi_Receive+0x90>
		break;
 8008f34:	bf00      	nop
 8008f36:	e002      	b.n	8008f3e <Midi_Receive+0x90>
		break;
 8008f38:	bf00      	nop
 8008f3a:	e000      	b.n	8008f3e <Midi_Receive+0x90>
		break;
 8008f3c:	bf00      	nop
	}

	return 0;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08a      	sub	sp, #40	; 0x28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f54:	f107 0314 	add.w	r3, r7, #20
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	605a      	str	r2, [r3, #4]
 8008f5e:	609a      	str	r2, [r3, #8]
 8008f60:	60da      	str	r2, [r3, #12]
 8008f62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f6c:	d13a      	bne.n	8008fe4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f6e:	2300      	movs	r3, #0
 8008f70:	613b      	str	r3, [r7, #16]
 8008f72:	4b1e      	ldr	r3, [pc, #120]	; (8008fec <HAL_PCD_MspInit+0xa0>)
 8008f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f76:	4a1d      	ldr	r2, [pc, #116]	; (8008fec <HAL_PCD_MspInit+0xa0>)
 8008f78:	f043 0301 	orr.w	r3, r3, #1
 8008f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f7e:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <HAL_PCD_MspInit+0xa0>)
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	613b      	str	r3, [r7, #16]
 8008f88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8008f8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f90:	2302      	movs	r3, #2
 8008f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f9c:	230a      	movs	r3, #10
 8008f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fa0:	f107 0314 	add.w	r3, r7, #20
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4812      	ldr	r0, [pc, #72]	; (8008ff0 <HAL_PCD_MspInit+0xa4>)
 8008fa8:	f7f9 fe32 	bl	8002c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008fac:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <HAL_PCD_MspInit+0xa0>)
 8008fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb0:	4a0e      	ldr	r2, [pc, #56]	; (8008fec <HAL_PCD_MspInit+0xa0>)
 8008fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb6:	6353      	str	r3, [r2, #52]	; 0x34
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <HAL_PCD_MspInit+0xa0>)
 8008fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <HAL_PCD_MspInit+0xa0>)
 8008fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8008fc8:	4b08      	ldr	r3, [pc, #32]	; (8008fec <HAL_PCD_MspInit+0xa0>)
 8008fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fd0:	60fb      	str	r3, [r7, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	2043      	movs	r0, #67	; 0x43
 8008fda:	f7f9 fa02 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fde:	2043      	movs	r0, #67	; 0x43
 8008fe0:	f7f9 fa1b 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008fe4:	bf00      	nop
 8008fe6:	3728      	adds	r7, #40	; 0x28
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	40023800 	.word	0x40023800
 8008ff0:	40020000 	.word	0x40020000

08008ff4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009008:	4619      	mov	r1, r3
 800900a:	4610      	mov	r0, r2
 800900c:	f7fe f9c5 	bl	800739a <USBD_LL_SetupStage>
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	4613      	mov	r3, r2
 8009030:	00db      	lsls	r3, r3, #3
 8009032:	1a9b      	subs	r3, r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	440b      	add	r3, r1
 8009038:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	4619      	mov	r1, r3
 8009042:	f7fe f9ff 	bl	8007444 <USBD_LL_DataOutStage>
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b082      	sub	sp, #8
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009060:	78fa      	ldrb	r2, [r7, #3]
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	4613      	mov	r3, r2
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	1a9b      	subs	r3, r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	440b      	add	r3, r1
 800906e:	3348      	adds	r3, #72	; 0x48
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	4619      	mov	r1, r3
 8009076:	f7fe fa48 	bl	800750a <USBD_LL_DataInStage>
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe fb5c 	bl	800774e <USBD_LL_SOF>
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090a6:	2301      	movs	r3, #1
 80090a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d001      	beq.n	80090b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090b2:	f7f8 f976 	bl	80013a2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090bc:	7bfa      	ldrb	r2, [r7, #15]
 80090be:	4611      	mov	r1, r2
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe fb06 	bl	80076d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fe fab2 	bl	8007636 <USBD_LL_Reset>
}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe fb01 	bl	80076f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	6812      	ldr	r2, [r2, #0]
 80090fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009102:	f043 0301 	orr.w	r3, r3, #1
 8009106:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009110:	4b04      	ldr	r3, [pc, #16]	; (8009124 <HAL_PCD_SuspendCallback+0x48>)
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	4a03      	ldr	r2, [pc, #12]	; (8009124 <HAL_PCD_SuspendCallback+0x48>)
 8009116:	f043 0306 	orr.w	r3, r3, #6
 800911a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	e000ed00 	.word	0xe000ed00

08009128 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe faf1 	bl	800771e <USBD_LL_Resume>
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009156:	78fa      	ldrb	r2, [r7, #3]
 8009158:	4611      	mov	r1, r2
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fb3f 	bl	80077de <USBD_LL_IsoOUTIncomplete>
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800917a:	78fa      	ldrb	r2, [r7, #3]
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fb07 	bl	8007792 <USBD_LL_IsoINIncomplete>
}
 8009184:	bf00      	nop
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fb45 	bl	800782a <USBD_LL_DevConnected>
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe fb42 	bl	8007840 <USBD_LL_DevDisconnected>
}
 80091bc:	bf00      	nop
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d13c      	bne.n	800924e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80091d4:	4a20      	ldr	r2, [pc, #128]	; (8009258 <USBD_LL_Init+0x94>)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a1e      	ldr	r2, [pc, #120]	; (8009258 <USBD_LL_Init+0x94>)
 80091e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091e4:	4b1c      	ldr	r3, [pc, #112]	; (8009258 <USBD_LL_Init+0x94>)
 80091e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80091ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <USBD_LL_Init+0x94>)
 80091ee:	2204      	movs	r2, #4
 80091f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80091f2:	4b19      	ldr	r3, [pc, #100]	; (8009258 <USBD_LL_Init+0x94>)
 80091f4:	2202      	movs	r2, #2
 80091f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091f8:	4b17      	ldr	r3, [pc, #92]	; (8009258 <USBD_LL_Init+0x94>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091fe:	4b16      	ldr	r3, [pc, #88]	; (8009258 <USBD_LL_Init+0x94>)
 8009200:	2202      	movs	r2, #2
 8009202:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009204:	4b14      	ldr	r3, [pc, #80]	; (8009258 <USBD_LL_Init+0x94>)
 8009206:	2200      	movs	r2, #0
 8009208:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800920a:	4b13      	ldr	r3, [pc, #76]	; (8009258 <USBD_LL_Init+0x94>)
 800920c:	2200      	movs	r2, #0
 800920e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009210:	4b11      	ldr	r3, [pc, #68]	; (8009258 <USBD_LL_Init+0x94>)
 8009212:	2200      	movs	r2, #0
 8009214:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009216:	4b10      	ldr	r3, [pc, #64]	; (8009258 <USBD_LL_Init+0x94>)
 8009218:	2200      	movs	r2, #0
 800921a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800921c:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <USBD_LL_Init+0x94>)
 800921e:	2200      	movs	r2, #0
 8009220:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009222:	480d      	ldr	r0, [pc, #52]	; (8009258 <USBD_LL_Init+0x94>)
 8009224:	f7fa fc53 	bl	8003ace <HAL_PCD_Init>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800922e:	f7f8 f8b8 	bl	80013a2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009232:	2180      	movs	r1, #128	; 0x80
 8009234:	4808      	ldr	r0, [pc, #32]	; (8009258 <USBD_LL_Init+0x94>)
 8009236:	f7fb fdb0 	bl	8004d9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800923a:	2240      	movs	r2, #64	; 0x40
 800923c:	2100      	movs	r1, #0
 800923e:	4806      	ldr	r0, [pc, #24]	; (8009258 <USBD_LL_Init+0x94>)
 8009240:	f7fb fd64 	bl	8004d0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009244:	2280      	movs	r2, #128	; 0x80
 8009246:	2101      	movs	r1, #1
 8009248:	4803      	ldr	r0, [pc, #12]	; (8009258 <USBD_LL_Init+0x94>)
 800924a:	f7fb fd5f 	bl	8004d0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	200029a0 	.word	0x200029a0

0800925c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009272:	4618      	mov	r0, r3
 8009274:	f7fa fd48 	bl	8003d08 <HAL_PCD_Start>
 8009278:	4603      	mov	r3, r0
 800927a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 f938 	bl	80094f4 <USBD_Get_USB_Status>
 8009284:	4603      	mov	r3, r0
 8009286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009288:	7bbb      	ldrb	r3, [r7, #14]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	4608      	mov	r0, r1
 800929c:	4611      	mov	r1, r2
 800929e:	461a      	mov	r2, r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	70fb      	strb	r3, [r7, #3]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70bb      	strb	r3, [r7, #2]
 80092a8:	4613      	mov	r3, r2
 80092aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092ba:	78bb      	ldrb	r3, [r7, #2]
 80092bc:	883a      	ldrh	r2, [r7, #0]
 80092be:	78f9      	ldrb	r1, [r7, #3]
 80092c0:	f7fb f92c 	bl	800451c <HAL_PCD_EP_Open>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f912 	bl	80094f4 <USBD_Get_USB_Status>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	4611      	mov	r1, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fb f975 	bl	80045ec <HAL_PCD_EP_Close>
 8009302:	4603      	mov	r3, r0
 8009304:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	4618      	mov	r0, r3
 800930a:	f000 f8f3 	bl	80094f4 <USBD_Get_USB_Status>
 800930e:	4603      	mov	r3, r0
 8009310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009312:	7bbb      	ldrb	r3, [r7, #14]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7fb fa4d 	bl	80047da <HAL_PCD_EP_SetStall>
 8009340:	4603      	mov	r3, r0
 8009342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f8d4 	bl	80094f4 <USBD_Get_USB_Status>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009350:	7bbb      	ldrb	r3, [r7, #14]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7fb fa92 	bl	80048a2 <HAL_PCD_EP_ClrStall>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f8b5 	bl	80094f4 <USBD_Get_USB_Status>
 800938a:	4603      	mov	r3, r0
 800938c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800938e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	da0b      	bge.n	80093cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ba:	68f9      	ldr	r1, [r7, #12]
 80093bc:	4613      	mov	r3, r2
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	1a9b      	subs	r3, r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	440b      	add	r3, r1
 80093c6:	333e      	adds	r3, #62	; 0x3e
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	e00b      	b.n	80093e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d2:	68f9      	ldr	r1, [r7, #12]
 80093d4:	4613      	mov	r3, r2
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	1a9b      	subs	r3, r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	440b      	add	r3, r1
 80093de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80093e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800940a:	78fa      	ldrb	r2, [r7, #3]
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7fb f85f 	bl	80044d2 <HAL_PCD_SetAddress>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f86a 	bl	80094f4 <USBD_Get_USB_Status>
 8009420:	4603      	mov	r3, r0
 8009422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009424:	7bbb      	ldrb	r3, [r7, #14]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	607a      	str	r2, [r7, #4]
 8009438:	603b      	str	r3, [r7, #0]
 800943a:	460b      	mov	r3, r1
 800943c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800944c:	7af9      	ldrb	r1, [r7, #11]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	f7fb f978 	bl	8004746 <HAL_PCD_EP_Transmit>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	4618      	mov	r0, r3
 800945e:	f000 f849 	bl	80094f4 <USBD_Get_USB_Status>
 8009462:	4603      	mov	r3, r0
 8009464:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009466:	7dbb      	ldrb	r3, [r7, #22]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3718      	adds	r7, #24
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	607a      	str	r2, [r7, #4]
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	460b      	mov	r3, r1
 800947e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800948e:	7af9      	ldrb	r1, [r7, #11]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	f7fb f8f4 	bl	8004680 <HAL_PCD_EP_Receive>
 8009498:	4603      	mov	r3, r0
 800949a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 f828 	bl	80094f4 <USBD_Get_USB_Status>
 80094a4:	4603      	mov	r3, r0
 80094a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	460b      	mov	r3, r1
 80094bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	4611      	mov	r1, r2
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fb f924 	bl	8004716 <HAL_PCD_EP_GetRxCount>
 80094ce:	4603      	mov	r3, r0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094e0:	4b03      	ldr	r3, [pc, #12]	; (80094f0 <USBD_static_malloc+0x18>)
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	20000750 	.word	0x20000750

080094f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	4603      	mov	r3, r0
 80094fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	2b03      	cmp	r3, #3
 8009506:	d817      	bhi.n	8009538 <USBD_Get_USB_Status+0x44>
 8009508:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <USBD_Get_USB_Status+0x1c>)
 800950a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950e:	bf00      	nop
 8009510:	08009521 	.word	0x08009521
 8009514:	08009527 	.word	0x08009527
 8009518:	0800952d 	.word	0x0800952d
 800951c:	08009533 	.word	0x08009533
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
    break;
 8009524:	e00b      	b.n	800953e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009526:	2303      	movs	r3, #3
 8009528:	73fb      	strb	r3, [r7, #15]
    break;
 800952a:	e008      	b.n	800953e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800952c:	2301      	movs	r3, #1
 800952e:	73fb      	strb	r3, [r7, #15]
    break;
 8009530:	e005      	b.n	800953e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009532:	2303      	movs	r3, #3
 8009534:	73fb      	strb	r3, [r7, #15]
    break;
 8009536:	e002      	b.n	800953e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009538:	2303      	movs	r3, #3
 800953a:	73fb      	strb	r3, [r7, #15]
    break;
 800953c:	bf00      	nop
  }
  return usb_status;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <__errno>:
 800954c:	4b01      	ldr	r3, [pc, #4]	; (8009554 <__errno+0x8>)
 800954e:	6818      	ldr	r0, [r3, #0]
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	200001b8 	.word	0x200001b8

08009558 <__libc_init_array>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	4d0d      	ldr	r5, [pc, #52]	; (8009590 <__libc_init_array+0x38>)
 800955c:	4c0d      	ldr	r4, [pc, #52]	; (8009594 <__libc_init_array+0x3c>)
 800955e:	1b64      	subs	r4, r4, r5
 8009560:	10a4      	asrs	r4, r4, #2
 8009562:	2600      	movs	r6, #0
 8009564:	42a6      	cmp	r6, r4
 8009566:	d109      	bne.n	800957c <__libc_init_array+0x24>
 8009568:	4d0b      	ldr	r5, [pc, #44]	; (8009598 <__libc_init_array+0x40>)
 800956a:	4c0c      	ldr	r4, [pc, #48]	; (800959c <__libc_init_array+0x44>)
 800956c:	f000 fc4e 	bl	8009e0c <_init>
 8009570:	1b64      	subs	r4, r4, r5
 8009572:	10a4      	asrs	r4, r4, #2
 8009574:	2600      	movs	r6, #0
 8009576:	42a6      	cmp	r6, r4
 8009578:	d105      	bne.n	8009586 <__libc_init_array+0x2e>
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009580:	4798      	blx	r3
 8009582:	3601      	adds	r6, #1
 8009584:	e7ee      	b.n	8009564 <__libc_init_array+0xc>
 8009586:	f855 3b04 	ldr.w	r3, [r5], #4
 800958a:	4798      	blx	r3
 800958c:	3601      	adds	r6, #1
 800958e:	e7f2      	b.n	8009576 <__libc_init_array+0x1e>
 8009590:	0800b404 	.word	0x0800b404
 8009594:	0800b404 	.word	0x0800b404
 8009598:	0800b404 	.word	0x0800b404
 800959c:	0800b408 	.word	0x0800b408

080095a0 <memset>:
 80095a0:	4402      	add	r2, r0
 80095a2:	4603      	mov	r3, r0
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d100      	bne.n	80095aa <memset+0xa>
 80095a8:	4770      	bx	lr
 80095aa:	f803 1b01 	strb.w	r1, [r3], #1
 80095ae:	e7f9      	b.n	80095a4 <memset+0x4>

080095b0 <siprintf>:
 80095b0:	b40e      	push	{r1, r2, r3}
 80095b2:	b500      	push	{lr}
 80095b4:	b09c      	sub	sp, #112	; 0x70
 80095b6:	ab1d      	add	r3, sp, #116	; 0x74
 80095b8:	9002      	str	r0, [sp, #8]
 80095ba:	9006      	str	r0, [sp, #24]
 80095bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095c0:	4809      	ldr	r0, [pc, #36]	; (80095e8 <siprintf+0x38>)
 80095c2:	9107      	str	r1, [sp, #28]
 80095c4:	9104      	str	r1, [sp, #16]
 80095c6:	4909      	ldr	r1, [pc, #36]	; (80095ec <siprintf+0x3c>)
 80095c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095cc:	9105      	str	r1, [sp, #20]
 80095ce:	6800      	ldr	r0, [r0, #0]
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	a902      	add	r1, sp, #8
 80095d4:	f000 f914 	bl	8009800 <_svfiprintf_r>
 80095d8:	9b02      	ldr	r3, [sp, #8]
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	b01c      	add	sp, #112	; 0x70
 80095e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095e4:	b003      	add	sp, #12
 80095e6:	4770      	bx	lr
 80095e8:	200001b8 	.word	0x200001b8
 80095ec:	ffff0208 	.word	0xffff0208

080095f0 <__retarget_lock_acquire_recursive>:
 80095f0:	4770      	bx	lr

080095f2 <__retarget_lock_release_recursive>:
 80095f2:	4770      	bx	lr

080095f4 <_free_r>:
 80095f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095f6:	2900      	cmp	r1, #0
 80095f8:	d048      	beq.n	800968c <_free_r+0x98>
 80095fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095fe:	9001      	str	r0, [sp, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	f1a1 0404 	sub.w	r4, r1, #4
 8009606:	bfb8      	it	lt
 8009608:	18e4      	addlt	r4, r4, r3
 800960a:	f000 fbc5 	bl	8009d98 <__malloc_lock>
 800960e:	4a20      	ldr	r2, [pc, #128]	; (8009690 <_free_r+0x9c>)
 8009610:	9801      	ldr	r0, [sp, #4]
 8009612:	6813      	ldr	r3, [r2, #0]
 8009614:	4615      	mov	r5, r2
 8009616:	b933      	cbnz	r3, 8009626 <_free_r+0x32>
 8009618:	6063      	str	r3, [r4, #4]
 800961a:	6014      	str	r4, [r2, #0]
 800961c:	b003      	add	sp, #12
 800961e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009622:	f000 bbbf 	b.w	8009da4 <__malloc_unlock>
 8009626:	42a3      	cmp	r3, r4
 8009628:	d90b      	bls.n	8009642 <_free_r+0x4e>
 800962a:	6821      	ldr	r1, [r4, #0]
 800962c:	1862      	adds	r2, r4, r1
 800962e:	4293      	cmp	r3, r2
 8009630:	bf04      	itt	eq
 8009632:	681a      	ldreq	r2, [r3, #0]
 8009634:	685b      	ldreq	r3, [r3, #4]
 8009636:	6063      	str	r3, [r4, #4]
 8009638:	bf04      	itt	eq
 800963a:	1852      	addeq	r2, r2, r1
 800963c:	6022      	streq	r2, [r4, #0]
 800963e:	602c      	str	r4, [r5, #0]
 8009640:	e7ec      	b.n	800961c <_free_r+0x28>
 8009642:	461a      	mov	r2, r3
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	b10b      	cbz	r3, 800964c <_free_r+0x58>
 8009648:	42a3      	cmp	r3, r4
 800964a:	d9fa      	bls.n	8009642 <_free_r+0x4e>
 800964c:	6811      	ldr	r1, [r2, #0]
 800964e:	1855      	adds	r5, r2, r1
 8009650:	42a5      	cmp	r5, r4
 8009652:	d10b      	bne.n	800966c <_free_r+0x78>
 8009654:	6824      	ldr	r4, [r4, #0]
 8009656:	4421      	add	r1, r4
 8009658:	1854      	adds	r4, r2, r1
 800965a:	42a3      	cmp	r3, r4
 800965c:	6011      	str	r1, [r2, #0]
 800965e:	d1dd      	bne.n	800961c <_free_r+0x28>
 8009660:	681c      	ldr	r4, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	6053      	str	r3, [r2, #4]
 8009666:	4421      	add	r1, r4
 8009668:	6011      	str	r1, [r2, #0]
 800966a:	e7d7      	b.n	800961c <_free_r+0x28>
 800966c:	d902      	bls.n	8009674 <_free_r+0x80>
 800966e:	230c      	movs	r3, #12
 8009670:	6003      	str	r3, [r0, #0]
 8009672:	e7d3      	b.n	800961c <_free_r+0x28>
 8009674:	6825      	ldr	r5, [r4, #0]
 8009676:	1961      	adds	r1, r4, r5
 8009678:	428b      	cmp	r3, r1
 800967a:	bf04      	itt	eq
 800967c:	6819      	ldreq	r1, [r3, #0]
 800967e:	685b      	ldreq	r3, [r3, #4]
 8009680:	6063      	str	r3, [r4, #4]
 8009682:	bf04      	itt	eq
 8009684:	1949      	addeq	r1, r1, r5
 8009686:	6021      	streq	r1, [r4, #0]
 8009688:	6054      	str	r4, [r2, #4]
 800968a:	e7c7      	b.n	800961c <_free_r+0x28>
 800968c:	b003      	add	sp, #12
 800968e:	bd30      	pop	{r4, r5, pc}
 8009690:	20002324 	.word	0x20002324

08009694 <_malloc_r>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	1ccd      	adds	r5, r1, #3
 8009698:	f025 0503 	bic.w	r5, r5, #3
 800969c:	3508      	adds	r5, #8
 800969e:	2d0c      	cmp	r5, #12
 80096a0:	bf38      	it	cc
 80096a2:	250c      	movcc	r5, #12
 80096a4:	2d00      	cmp	r5, #0
 80096a6:	4606      	mov	r6, r0
 80096a8:	db01      	blt.n	80096ae <_malloc_r+0x1a>
 80096aa:	42a9      	cmp	r1, r5
 80096ac:	d903      	bls.n	80096b6 <_malloc_r+0x22>
 80096ae:	230c      	movs	r3, #12
 80096b0:	6033      	str	r3, [r6, #0]
 80096b2:	2000      	movs	r0, #0
 80096b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b6:	f000 fb6f 	bl	8009d98 <__malloc_lock>
 80096ba:	4921      	ldr	r1, [pc, #132]	; (8009740 <_malloc_r+0xac>)
 80096bc:	680a      	ldr	r2, [r1, #0]
 80096be:	4614      	mov	r4, r2
 80096c0:	b99c      	cbnz	r4, 80096ea <_malloc_r+0x56>
 80096c2:	4f20      	ldr	r7, [pc, #128]	; (8009744 <_malloc_r+0xb0>)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	b923      	cbnz	r3, 80096d2 <_malloc_r+0x3e>
 80096c8:	4621      	mov	r1, r4
 80096ca:	4630      	mov	r0, r6
 80096cc:	f000 fb2c 	bl	8009d28 <_sbrk_r>
 80096d0:	6038      	str	r0, [r7, #0]
 80096d2:	4629      	mov	r1, r5
 80096d4:	4630      	mov	r0, r6
 80096d6:	f000 fb27 	bl	8009d28 <_sbrk_r>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	d123      	bne.n	8009726 <_malloc_r+0x92>
 80096de:	230c      	movs	r3, #12
 80096e0:	6033      	str	r3, [r6, #0]
 80096e2:	4630      	mov	r0, r6
 80096e4:	f000 fb5e 	bl	8009da4 <__malloc_unlock>
 80096e8:	e7e3      	b.n	80096b2 <_malloc_r+0x1e>
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	1b5b      	subs	r3, r3, r5
 80096ee:	d417      	bmi.n	8009720 <_malloc_r+0x8c>
 80096f0:	2b0b      	cmp	r3, #11
 80096f2:	d903      	bls.n	80096fc <_malloc_r+0x68>
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	441c      	add	r4, r3
 80096f8:	6025      	str	r5, [r4, #0]
 80096fa:	e004      	b.n	8009706 <_malloc_r+0x72>
 80096fc:	6863      	ldr	r3, [r4, #4]
 80096fe:	42a2      	cmp	r2, r4
 8009700:	bf0c      	ite	eq
 8009702:	600b      	streq	r3, [r1, #0]
 8009704:	6053      	strne	r3, [r2, #4]
 8009706:	4630      	mov	r0, r6
 8009708:	f000 fb4c 	bl	8009da4 <__malloc_unlock>
 800970c:	f104 000b 	add.w	r0, r4, #11
 8009710:	1d23      	adds	r3, r4, #4
 8009712:	f020 0007 	bic.w	r0, r0, #7
 8009716:	1ac2      	subs	r2, r0, r3
 8009718:	d0cc      	beq.n	80096b4 <_malloc_r+0x20>
 800971a:	1a1b      	subs	r3, r3, r0
 800971c:	50a3      	str	r3, [r4, r2]
 800971e:	e7c9      	b.n	80096b4 <_malloc_r+0x20>
 8009720:	4622      	mov	r2, r4
 8009722:	6864      	ldr	r4, [r4, #4]
 8009724:	e7cc      	b.n	80096c0 <_malloc_r+0x2c>
 8009726:	1cc4      	adds	r4, r0, #3
 8009728:	f024 0403 	bic.w	r4, r4, #3
 800972c:	42a0      	cmp	r0, r4
 800972e:	d0e3      	beq.n	80096f8 <_malloc_r+0x64>
 8009730:	1a21      	subs	r1, r4, r0
 8009732:	4630      	mov	r0, r6
 8009734:	f000 faf8 	bl	8009d28 <_sbrk_r>
 8009738:	3001      	adds	r0, #1
 800973a:	d1dd      	bne.n	80096f8 <_malloc_r+0x64>
 800973c:	e7cf      	b.n	80096de <_malloc_r+0x4a>
 800973e:	bf00      	nop
 8009740:	20002324 	.word	0x20002324
 8009744:	20002328 	.word	0x20002328

08009748 <__ssputs_r>:
 8009748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800974c:	688e      	ldr	r6, [r1, #8]
 800974e:	429e      	cmp	r6, r3
 8009750:	4682      	mov	sl, r0
 8009752:	460c      	mov	r4, r1
 8009754:	4690      	mov	r8, r2
 8009756:	461f      	mov	r7, r3
 8009758:	d838      	bhi.n	80097cc <__ssputs_r+0x84>
 800975a:	898a      	ldrh	r2, [r1, #12]
 800975c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009760:	d032      	beq.n	80097c8 <__ssputs_r+0x80>
 8009762:	6825      	ldr	r5, [r4, #0]
 8009764:	6909      	ldr	r1, [r1, #16]
 8009766:	eba5 0901 	sub.w	r9, r5, r1
 800976a:	6965      	ldr	r5, [r4, #20]
 800976c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009774:	3301      	adds	r3, #1
 8009776:	444b      	add	r3, r9
 8009778:	106d      	asrs	r5, r5, #1
 800977a:	429d      	cmp	r5, r3
 800977c:	bf38      	it	cc
 800977e:	461d      	movcc	r5, r3
 8009780:	0553      	lsls	r3, r2, #21
 8009782:	d531      	bpl.n	80097e8 <__ssputs_r+0xa0>
 8009784:	4629      	mov	r1, r5
 8009786:	f7ff ff85 	bl	8009694 <_malloc_r>
 800978a:	4606      	mov	r6, r0
 800978c:	b950      	cbnz	r0, 80097a4 <__ssputs_r+0x5c>
 800978e:	230c      	movs	r3, #12
 8009790:	f8ca 3000 	str.w	r3, [sl]
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800979a:	81a3      	strh	r3, [r4, #12]
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a4:	6921      	ldr	r1, [r4, #16]
 80097a6:	464a      	mov	r2, r9
 80097a8:	f000 face 	bl	8009d48 <memcpy>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	6126      	str	r6, [r4, #16]
 80097ba:	6165      	str	r5, [r4, #20]
 80097bc:	444e      	add	r6, r9
 80097be:	eba5 0509 	sub.w	r5, r5, r9
 80097c2:	6026      	str	r6, [r4, #0]
 80097c4:	60a5      	str	r5, [r4, #8]
 80097c6:	463e      	mov	r6, r7
 80097c8:	42be      	cmp	r6, r7
 80097ca:	d900      	bls.n	80097ce <__ssputs_r+0x86>
 80097cc:	463e      	mov	r6, r7
 80097ce:	4632      	mov	r2, r6
 80097d0:	6820      	ldr	r0, [r4, #0]
 80097d2:	4641      	mov	r1, r8
 80097d4:	f000 fac6 	bl	8009d64 <memmove>
 80097d8:	68a3      	ldr	r3, [r4, #8]
 80097da:	6822      	ldr	r2, [r4, #0]
 80097dc:	1b9b      	subs	r3, r3, r6
 80097de:	4432      	add	r2, r6
 80097e0:	60a3      	str	r3, [r4, #8]
 80097e2:	6022      	str	r2, [r4, #0]
 80097e4:	2000      	movs	r0, #0
 80097e6:	e7db      	b.n	80097a0 <__ssputs_r+0x58>
 80097e8:	462a      	mov	r2, r5
 80097ea:	f000 fae1 	bl	8009db0 <_realloc_r>
 80097ee:	4606      	mov	r6, r0
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d1e1      	bne.n	80097b8 <__ssputs_r+0x70>
 80097f4:	6921      	ldr	r1, [r4, #16]
 80097f6:	4650      	mov	r0, sl
 80097f8:	f7ff fefc 	bl	80095f4 <_free_r>
 80097fc:	e7c7      	b.n	800978e <__ssputs_r+0x46>
	...

08009800 <_svfiprintf_r>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	4698      	mov	r8, r3
 8009806:	898b      	ldrh	r3, [r1, #12]
 8009808:	061b      	lsls	r3, r3, #24
 800980a:	b09d      	sub	sp, #116	; 0x74
 800980c:	4607      	mov	r7, r0
 800980e:	460d      	mov	r5, r1
 8009810:	4614      	mov	r4, r2
 8009812:	d50e      	bpl.n	8009832 <_svfiprintf_r+0x32>
 8009814:	690b      	ldr	r3, [r1, #16]
 8009816:	b963      	cbnz	r3, 8009832 <_svfiprintf_r+0x32>
 8009818:	2140      	movs	r1, #64	; 0x40
 800981a:	f7ff ff3b 	bl	8009694 <_malloc_r>
 800981e:	6028      	str	r0, [r5, #0]
 8009820:	6128      	str	r0, [r5, #16]
 8009822:	b920      	cbnz	r0, 800982e <_svfiprintf_r+0x2e>
 8009824:	230c      	movs	r3, #12
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	f04f 30ff 	mov.w	r0, #4294967295
 800982c:	e0d1      	b.n	80099d2 <_svfiprintf_r+0x1d2>
 800982e:	2340      	movs	r3, #64	; 0x40
 8009830:	616b      	str	r3, [r5, #20]
 8009832:	2300      	movs	r3, #0
 8009834:	9309      	str	r3, [sp, #36]	; 0x24
 8009836:	2320      	movs	r3, #32
 8009838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800983c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009840:	2330      	movs	r3, #48	; 0x30
 8009842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099ec <_svfiprintf_r+0x1ec>
 8009846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800984a:	f04f 0901 	mov.w	r9, #1
 800984e:	4623      	mov	r3, r4
 8009850:	469a      	mov	sl, r3
 8009852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009856:	b10a      	cbz	r2, 800985c <_svfiprintf_r+0x5c>
 8009858:	2a25      	cmp	r2, #37	; 0x25
 800985a:	d1f9      	bne.n	8009850 <_svfiprintf_r+0x50>
 800985c:	ebba 0b04 	subs.w	fp, sl, r4
 8009860:	d00b      	beq.n	800987a <_svfiprintf_r+0x7a>
 8009862:	465b      	mov	r3, fp
 8009864:	4622      	mov	r2, r4
 8009866:	4629      	mov	r1, r5
 8009868:	4638      	mov	r0, r7
 800986a:	f7ff ff6d 	bl	8009748 <__ssputs_r>
 800986e:	3001      	adds	r0, #1
 8009870:	f000 80aa 	beq.w	80099c8 <_svfiprintf_r+0x1c8>
 8009874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009876:	445a      	add	r2, fp
 8009878:	9209      	str	r2, [sp, #36]	; 0x24
 800987a:	f89a 3000 	ldrb.w	r3, [sl]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80a2 	beq.w	80099c8 <_svfiprintf_r+0x1c8>
 8009884:	2300      	movs	r3, #0
 8009886:	f04f 32ff 	mov.w	r2, #4294967295
 800988a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800988e:	f10a 0a01 	add.w	sl, sl, #1
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	9307      	str	r3, [sp, #28]
 8009896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800989a:	931a      	str	r3, [sp, #104]	; 0x68
 800989c:	4654      	mov	r4, sl
 800989e:	2205      	movs	r2, #5
 80098a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a4:	4851      	ldr	r0, [pc, #324]	; (80099ec <_svfiprintf_r+0x1ec>)
 80098a6:	f7f6 fca3 	bl	80001f0 <memchr>
 80098aa:	9a04      	ldr	r2, [sp, #16]
 80098ac:	b9d8      	cbnz	r0, 80098e6 <_svfiprintf_r+0xe6>
 80098ae:	06d0      	lsls	r0, r2, #27
 80098b0:	bf44      	itt	mi
 80098b2:	2320      	movmi	r3, #32
 80098b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b8:	0711      	lsls	r1, r2, #28
 80098ba:	bf44      	itt	mi
 80098bc:	232b      	movmi	r3, #43	; 0x2b
 80098be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c2:	f89a 3000 	ldrb.w	r3, [sl]
 80098c6:	2b2a      	cmp	r3, #42	; 0x2a
 80098c8:	d015      	beq.n	80098f6 <_svfiprintf_r+0xf6>
 80098ca:	9a07      	ldr	r2, [sp, #28]
 80098cc:	4654      	mov	r4, sl
 80098ce:	2000      	movs	r0, #0
 80098d0:	f04f 0c0a 	mov.w	ip, #10
 80098d4:	4621      	mov	r1, r4
 80098d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098da:	3b30      	subs	r3, #48	; 0x30
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d94e      	bls.n	800997e <_svfiprintf_r+0x17e>
 80098e0:	b1b0      	cbz	r0, 8009910 <_svfiprintf_r+0x110>
 80098e2:	9207      	str	r2, [sp, #28]
 80098e4:	e014      	b.n	8009910 <_svfiprintf_r+0x110>
 80098e6:	eba0 0308 	sub.w	r3, r0, r8
 80098ea:	fa09 f303 	lsl.w	r3, r9, r3
 80098ee:	4313      	orrs	r3, r2
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	46a2      	mov	sl, r4
 80098f4:	e7d2      	b.n	800989c <_svfiprintf_r+0x9c>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	1d19      	adds	r1, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9103      	str	r1, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfbb      	ittet	lt
 8009902:	425b      	neglt	r3, r3
 8009904:	f042 0202 	orrlt.w	r2, r2, #2
 8009908:	9307      	strge	r3, [sp, #28]
 800990a:	9307      	strlt	r3, [sp, #28]
 800990c:	bfb8      	it	lt
 800990e:	9204      	strlt	r2, [sp, #16]
 8009910:	7823      	ldrb	r3, [r4, #0]
 8009912:	2b2e      	cmp	r3, #46	; 0x2e
 8009914:	d10c      	bne.n	8009930 <_svfiprintf_r+0x130>
 8009916:	7863      	ldrb	r3, [r4, #1]
 8009918:	2b2a      	cmp	r3, #42	; 0x2a
 800991a:	d135      	bne.n	8009988 <_svfiprintf_r+0x188>
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	1d1a      	adds	r2, r3, #4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	9203      	str	r2, [sp, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	bfb8      	it	lt
 8009928:	f04f 33ff 	movlt.w	r3, #4294967295
 800992c:	3402      	adds	r4, #2
 800992e:	9305      	str	r3, [sp, #20]
 8009930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099fc <_svfiprintf_r+0x1fc>
 8009934:	7821      	ldrb	r1, [r4, #0]
 8009936:	2203      	movs	r2, #3
 8009938:	4650      	mov	r0, sl
 800993a:	f7f6 fc59 	bl	80001f0 <memchr>
 800993e:	b140      	cbz	r0, 8009952 <_svfiprintf_r+0x152>
 8009940:	2340      	movs	r3, #64	; 0x40
 8009942:	eba0 000a 	sub.w	r0, r0, sl
 8009946:	fa03 f000 	lsl.w	r0, r3, r0
 800994a:	9b04      	ldr	r3, [sp, #16]
 800994c:	4303      	orrs	r3, r0
 800994e:	3401      	adds	r4, #1
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009956:	4826      	ldr	r0, [pc, #152]	; (80099f0 <_svfiprintf_r+0x1f0>)
 8009958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800995c:	2206      	movs	r2, #6
 800995e:	f7f6 fc47 	bl	80001f0 <memchr>
 8009962:	2800      	cmp	r0, #0
 8009964:	d038      	beq.n	80099d8 <_svfiprintf_r+0x1d8>
 8009966:	4b23      	ldr	r3, [pc, #140]	; (80099f4 <_svfiprintf_r+0x1f4>)
 8009968:	bb1b      	cbnz	r3, 80099b2 <_svfiprintf_r+0x1b2>
 800996a:	9b03      	ldr	r3, [sp, #12]
 800996c:	3307      	adds	r3, #7
 800996e:	f023 0307 	bic.w	r3, r3, #7
 8009972:	3308      	adds	r3, #8
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009978:	4433      	add	r3, r6
 800997a:	9309      	str	r3, [sp, #36]	; 0x24
 800997c:	e767      	b.n	800984e <_svfiprintf_r+0x4e>
 800997e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009982:	460c      	mov	r4, r1
 8009984:	2001      	movs	r0, #1
 8009986:	e7a5      	b.n	80098d4 <_svfiprintf_r+0xd4>
 8009988:	2300      	movs	r3, #0
 800998a:	3401      	adds	r4, #1
 800998c:	9305      	str	r3, [sp, #20]
 800998e:	4619      	mov	r1, r3
 8009990:	f04f 0c0a 	mov.w	ip, #10
 8009994:	4620      	mov	r0, r4
 8009996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800999a:	3a30      	subs	r2, #48	; 0x30
 800999c:	2a09      	cmp	r2, #9
 800999e:	d903      	bls.n	80099a8 <_svfiprintf_r+0x1a8>
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0c5      	beq.n	8009930 <_svfiprintf_r+0x130>
 80099a4:	9105      	str	r1, [sp, #20]
 80099a6:	e7c3      	b.n	8009930 <_svfiprintf_r+0x130>
 80099a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ac:	4604      	mov	r4, r0
 80099ae:	2301      	movs	r3, #1
 80099b0:	e7f0      	b.n	8009994 <_svfiprintf_r+0x194>
 80099b2:	ab03      	add	r3, sp, #12
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	462a      	mov	r2, r5
 80099b8:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <_svfiprintf_r+0x1f8>)
 80099ba:	a904      	add	r1, sp, #16
 80099bc:	4638      	mov	r0, r7
 80099be:	f3af 8000 	nop.w
 80099c2:	1c42      	adds	r2, r0, #1
 80099c4:	4606      	mov	r6, r0
 80099c6:	d1d6      	bne.n	8009976 <_svfiprintf_r+0x176>
 80099c8:	89ab      	ldrh	r3, [r5, #12]
 80099ca:	065b      	lsls	r3, r3, #25
 80099cc:	f53f af2c 	bmi.w	8009828 <_svfiprintf_r+0x28>
 80099d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099d2:	b01d      	add	sp, #116	; 0x74
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d8:	ab03      	add	r3, sp, #12
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	462a      	mov	r2, r5
 80099de:	4b06      	ldr	r3, [pc, #24]	; (80099f8 <_svfiprintf_r+0x1f8>)
 80099e0:	a904      	add	r1, sp, #16
 80099e2:	4638      	mov	r0, r7
 80099e4:	f000 f87a 	bl	8009adc <_printf_i>
 80099e8:	e7eb      	b.n	80099c2 <_svfiprintf_r+0x1c2>
 80099ea:	bf00      	nop
 80099ec:	0800b3c8 	.word	0x0800b3c8
 80099f0:	0800b3d2 	.word	0x0800b3d2
 80099f4:	00000000 	.word	0x00000000
 80099f8:	08009749 	.word	0x08009749
 80099fc:	0800b3ce 	.word	0x0800b3ce

08009a00 <_printf_common>:
 8009a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a04:	4616      	mov	r6, r2
 8009a06:	4699      	mov	r9, r3
 8009a08:	688a      	ldr	r2, [r1, #8]
 8009a0a:	690b      	ldr	r3, [r1, #16]
 8009a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a10:	4293      	cmp	r3, r2
 8009a12:	bfb8      	it	lt
 8009a14:	4613      	movlt	r3, r2
 8009a16:	6033      	str	r3, [r6, #0]
 8009a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	b10a      	cbz	r2, 8009a26 <_printf_common+0x26>
 8009a22:	3301      	adds	r3, #1
 8009a24:	6033      	str	r3, [r6, #0]
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	0699      	lsls	r1, r3, #26
 8009a2a:	bf42      	ittt	mi
 8009a2c:	6833      	ldrmi	r3, [r6, #0]
 8009a2e:	3302      	addmi	r3, #2
 8009a30:	6033      	strmi	r3, [r6, #0]
 8009a32:	6825      	ldr	r5, [r4, #0]
 8009a34:	f015 0506 	ands.w	r5, r5, #6
 8009a38:	d106      	bne.n	8009a48 <_printf_common+0x48>
 8009a3a:	f104 0a19 	add.w	sl, r4, #25
 8009a3e:	68e3      	ldr	r3, [r4, #12]
 8009a40:	6832      	ldr	r2, [r6, #0]
 8009a42:	1a9b      	subs	r3, r3, r2
 8009a44:	42ab      	cmp	r3, r5
 8009a46:	dc26      	bgt.n	8009a96 <_printf_common+0x96>
 8009a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a4c:	1e13      	subs	r3, r2, #0
 8009a4e:	6822      	ldr	r2, [r4, #0]
 8009a50:	bf18      	it	ne
 8009a52:	2301      	movne	r3, #1
 8009a54:	0692      	lsls	r2, r2, #26
 8009a56:	d42b      	bmi.n	8009ab0 <_printf_common+0xb0>
 8009a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	4638      	mov	r0, r7
 8009a60:	47c0      	blx	r8
 8009a62:	3001      	adds	r0, #1
 8009a64:	d01e      	beq.n	8009aa4 <_printf_common+0xa4>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	68e5      	ldr	r5, [r4, #12]
 8009a6a:	6832      	ldr	r2, [r6, #0]
 8009a6c:	f003 0306 	and.w	r3, r3, #6
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	bf08      	it	eq
 8009a74:	1aad      	subeq	r5, r5, r2
 8009a76:	68a3      	ldr	r3, [r4, #8]
 8009a78:	6922      	ldr	r2, [r4, #16]
 8009a7a:	bf0c      	ite	eq
 8009a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a80:	2500      	movne	r5, #0
 8009a82:	4293      	cmp	r3, r2
 8009a84:	bfc4      	itt	gt
 8009a86:	1a9b      	subgt	r3, r3, r2
 8009a88:	18ed      	addgt	r5, r5, r3
 8009a8a:	2600      	movs	r6, #0
 8009a8c:	341a      	adds	r4, #26
 8009a8e:	42b5      	cmp	r5, r6
 8009a90:	d11a      	bne.n	8009ac8 <_printf_common+0xc8>
 8009a92:	2000      	movs	r0, #0
 8009a94:	e008      	b.n	8009aa8 <_printf_common+0xa8>
 8009a96:	2301      	movs	r3, #1
 8009a98:	4652      	mov	r2, sl
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	47c0      	blx	r8
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d103      	bne.n	8009aac <_printf_common+0xac>
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aac:	3501      	adds	r5, #1
 8009aae:	e7c6      	b.n	8009a3e <_printf_common+0x3e>
 8009ab0:	18e1      	adds	r1, r4, r3
 8009ab2:	1c5a      	adds	r2, r3, #1
 8009ab4:	2030      	movs	r0, #48	; 0x30
 8009ab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aba:	4422      	add	r2, r4
 8009abc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ac4:	3302      	adds	r3, #2
 8009ac6:	e7c7      	b.n	8009a58 <_printf_common+0x58>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	4622      	mov	r2, r4
 8009acc:	4649      	mov	r1, r9
 8009ace:	4638      	mov	r0, r7
 8009ad0:	47c0      	blx	r8
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d0e6      	beq.n	8009aa4 <_printf_common+0xa4>
 8009ad6:	3601      	adds	r6, #1
 8009ad8:	e7d9      	b.n	8009a8e <_printf_common+0x8e>
	...

08009adc <_printf_i>:
 8009adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	4691      	mov	r9, r2
 8009ae4:	7e27      	ldrb	r7, [r4, #24]
 8009ae6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ae8:	2f78      	cmp	r7, #120	; 0x78
 8009aea:	4680      	mov	r8, r0
 8009aec:	469a      	mov	sl, r3
 8009aee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009af2:	d807      	bhi.n	8009b04 <_printf_i+0x28>
 8009af4:	2f62      	cmp	r7, #98	; 0x62
 8009af6:	d80a      	bhi.n	8009b0e <_printf_i+0x32>
 8009af8:	2f00      	cmp	r7, #0
 8009afa:	f000 80d8 	beq.w	8009cae <_printf_i+0x1d2>
 8009afe:	2f58      	cmp	r7, #88	; 0x58
 8009b00:	f000 80a3 	beq.w	8009c4a <_printf_i+0x16e>
 8009b04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b0c:	e03a      	b.n	8009b84 <_printf_i+0xa8>
 8009b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b12:	2b15      	cmp	r3, #21
 8009b14:	d8f6      	bhi.n	8009b04 <_printf_i+0x28>
 8009b16:	a001      	add	r0, pc, #4	; (adr r0, 8009b1c <_printf_i+0x40>)
 8009b18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b1c:	08009b75 	.word	0x08009b75
 8009b20:	08009b89 	.word	0x08009b89
 8009b24:	08009b05 	.word	0x08009b05
 8009b28:	08009b05 	.word	0x08009b05
 8009b2c:	08009b05 	.word	0x08009b05
 8009b30:	08009b05 	.word	0x08009b05
 8009b34:	08009b89 	.word	0x08009b89
 8009b38:	08009b05 	.word	0x08009b05
 8009b3c:	08009b05 	.word	0x08009b05
 8009b40:	08009b05 	.word	0x08009b05
 8009b44:	08009b05 	.word	0x08009b05
 8009b48:	08009c95 	.word	0x08009c95
 8009b4c:	08009bb9 	.word	0x08009bb9
 8009b50:	08009c77 	.word	0x08009c77
 8009b54:	08009b05 	.word	0x08009b05
 8009b58:	08009b05 	.word	0x08009b05
 8009b5c:	08009cb7 	.word	0x08009cb7
 8009b60:	08009b05 	.word	0x08009b05
 8009b64:	08009bb9 	.word	0x08009bb9
 8009b68:	08009b05 	.word	0x08009b05
 8009b6c:	08009b05 	.word	0x08009b05
 8009b70:	08009c7f 	.word	0x08009c7f
 8009b74:	680b      	ldr	r3, [r1, #0]
 8009b76:	1d1a      	adds	r2, r3, #4
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	600a      	str	r2, [r1, #0]
 8009b7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b84:	2301      	movs	r3, #1
 8009b86:	e0a3      	b.n	8009cd0 <_printf_i+0x1f4>
 8009b88:	6825      	ldr	r5, [r4, #0]
 8009b8a:	6808      	ldr	r0, [r1, #0]
 8009b8c:	062e      	lsls	r6, r5, #24
 8009b8e:	f100 0304 	add.w	r3, r0, #4
 8009b92:	d50a      	bpl.n	8009baa <_printf_i+0xce>
 8009b94:	6805      	ldr	r5, [r0, #0]
 8009b96:	600b      	str	r3, [r1, #0]
 8009b98:	2d00      	cmp	r5, #0
 8009b9a:	da03      	bge.n	8009ba4 <_printf_i+0xc8>
 8009b9c:	232d      	movs	r3, #45	; 0x2d
 8009b9e:	426d      	negs	r5, r5
 8009ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ba4:	485e      	ldr	r0, [pc, #376]	; (8009d20 <_printf_i+0x244>)
 8009ba6:	230a      	movs	r3, #10
 8009ba8:	e019      	b.n	8009bde <_printf_i+0x102>
 8009baa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009bae:	6805      	ldr	r5, [r0, #0]
 8009bb0:	600b      	str	r3, [r1, #0]
 8009bb2:	bf18      	it	ne
 8009bb4:	b22d      	sxthne	r5, r5
 8009bb6:	e7ef      	b.n	8009b98 <_printf_i+0xbc>
 8009bb8:	680b      	ldr	r3, [r1, #0]
 8009bba:	6825      	ldr	r5, [r4, #0]
 8009bbc:	1d18      	adds	r0, r3, #4
 8009bbe:	6008      	str	r0, [r1, #0]
 8009bc0:	0628      	lsls	r0, r5, #24
 8009bc2:	d501      	bpl.n	8009bc8 <_printf_i+0xec>
 8009bc4:	681d      	ldr	r5, [r3, #0]
 8009bc6:	e002      	b.n	8009bce <_printf_i+0xf2>
 8009bc8:	0669      	lsls	r1, r5, #25
 8009bca:	d5fb      	bpl.n	8009bc4 <_printf_i+0xe8>
 8009bcc:	881d      	ldrh	r5, [r3, #0]
 8009bce:	4854      	ldr	r0, [pc, #336]	; (8009d20 <_printf_i+0x244>)
 8009bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8009bd2:	bf0c      	ite	eq
 8009bd4:	2308      	moveq	r3, #8
 8009bd6:	230a      	movne	r3, #10
 8009bd8:	2100      	movs	r1, #0
 8009bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bde:	6866      	ldr	r6, [r4, #4]
 8009be0:	60a6      	str	r6, [r4, #8]
 8009be2:	2e00      	cmp	r6, #0
 8009be4:	bfa2      	ittt	ge
 8009be6:	6821      	ldrge	r1, [r4, #0]
 8009be8:	f021 0104 	bicge.w	r1, r1, #4
 8009bec:	6021      	strge	r1, [r4, #0]
 8009bee:	b90d      	cbnz	r5, 8009bf4 <_printf_i+0x118>
 8009bf0:	2e00      	cmp	r6, #0
 8009bf2:	d04d      	beq.n	8009c90 <_printf_i+0x1b4>
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bfa:	fb03 5711 	mls	r7, r3, r1, r5
 8009bfe:	5dc7      	ldrb	r7, [r0, r7]
 8009c00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c04:	462f      	mov	r7, r5
 8009c06:	42bb      	cmp	r3, r7
 8009c08:	460d      	mov	r5, r1
 8009c0a:	d9f4      	bls.n	8009bf6 <_printf_i+0x11a>
 8009c0c:	2b08      	cmp	r3, #8
 8009c0e:	d10b      	bne.n	8009c28 <_printf_i+0x14c>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	07df      	lsls	r7, r3, #31
 8009c14:	d508      	bpl.n	8009c28 <_printf_i+0x14c>
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	6861      	ldr	r1, [r4, #4]
 8009c1a:	4299      	cmp	r1, r3
 8009c1c:	bfde      	ittt	le
 8009c1e:	2330      	movle	r3, #48	; 0x30
 8009c20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c28:	1b92      	subs	r2, r2, r6
 8009c2a:	6122      	str	r2, [r4, #16]
 8009c2c:	f8cd a000 	str.w	sl, [sp]
 8009c30:	464b      	mov	r3, r9
 8009c32:	aa03      	add	r2, sp, #12
 8009c34:	4621      	mov	r1, r4
 8009c36:	4640      	mov	r0, r8
 8009c38:	f7ff fee2 	bl	8009a00 <_printf_common>
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	d14c      	bne.n	8009cda <_printf_i+0x1fe>
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295
 8009c44:	b004      	add	sp, #16
 8009c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4a:	4835      	ldr	r0, [pc, #212]	; (8009d20 <_printf_i+0x244>)
 8009c4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	680e      	ldr	r6, [r1, #0]
 8009c54:	061f      	lsls	r7, r3, #24
 8009c56:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c5a:	600e      	str	r6, [r1, #0]
 8009c5c:	d514      	bpl.n	8009c88 <_printf_i+0x1ac>
 8009c5e:	07d9      	lsls	r1, r3, #31
 8009c60:	bf44      	itt	mi
 8009c62:	f043 0320 	orrmi.w	r3, r3, #32
 8009c66:	6023      	strmi	r3, [r4, #0]
 8009c68:	b91d      	cbnz	r5, 8009c72 <_printf_i+0x196>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	f023 0320 	bic.w	r3, r3, #32
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	2310      	movs	r3, #16
 8009c74:	e7b0      	b.n	8009bd8 <_printf_i+0xfc>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	f043 0320 	orr.w	r3, r3, #32
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	2378      	movs	r3, #120	; 0x78
 8009c80:	4828      	ldr	r0, [pc, #160]	; (8009d24 <_printf_i+0x248>)
 8009c82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c86:	e7e3      	b.n	8009c50 <_printf_i+0x174>
 8009c88:	065e      	lsls	r6, r3, #25
 8009c8a:	bf48      	it	mi
 8009c8c:	b2ad      	uxthmi	r5, r5
 8009c8e:	e7e6      	b.n	8009c5e <_printf_i+0x182>
 8009c90:	4616      	mov	r6, r2
 8009c92:	e7bb      	b.n	8009c0c <_printf_i+0x130>
 8009c94:	680b      	ldr	r3, [r1, #0]
 8009c96:	6826      	ldr	r6, [r4, #0]
 8009c98:	6960      	ldr	r0, [r4, #20]
 8009c9a:	1d1d      	adds	r5, r3, #4
 8009c9c:	600d      	str	r5, [r1, #0]
 8009c9e:	0635      	lsls	r5, r6, #24
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	d501      	bpl.n	8009ca8 <_printf_i+0x1cc>
 8009ca4:	6018      	str	r0, [r3, #0]
 8009ca6:	e002      	b.n	8009cae <_printf_i+0x1d2>
 8009ca8:	0671      	lsls	r1, r6, #25
 8009caa:	d5fb      	bpl.n	8009ca4 <_printf_i+0x1c8>
 8009cac:	8018      	strh	r0, [r3, #0]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6123      	str	r3, [r4, #16]
 8009cb2:	4616      	mov	r6, r2
 8009cb4:	e7ba      	b.n	8009c2c <_printf_i+0x150>
 8009cb6:	680b      	ldr	r3, [r1, #0]
 8009cb8:	1d1a      	adds	r2, r3, #4
 8009cba:	600a      	str	r2, [r1, #0]
 8009cbc:	681e      	ldr	r6, [r3, #0]
 8009cbe:	6862      	ldr	r2, [r4, #4]
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f7f6 fa94 	bl	80001f0 <memchr>
 8009cc8:	b108      	cbz	r0, 8009cce <_printf_i+0x1f2>
 8009cca:	1b80      	subs	r0, r0, r6
 8009ccc:	6060      	str	r0, [r4, #4]
 8009cce:	6863      	ldr	r3, [r4, #4]
 8009cd0:	6123      	str	r3, [r4, #16]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd8:	e7a8      	b.n	8009c2c <_printf_i+0x150>
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	4632      	mov	r2, r6
 8009cde:	4649      	mov	r1, r9
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	47d0      	blx	sl
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d0ab      	beq.n	8009c40 <_printf_i+0x164>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	079b      	lsls	r3, r3, #30
 8009cec:	d413      	bmi.n	8009d16 <_printf_i+0x23a>
 8009cee:	68e0      	ldr	r0, [r4, #12]
 8009cf0:	9b03      	ldr	r3, [sp, #12]
 8009cf2:	4298      	cmp	r0, r3
 8009cf4:	bfb8      	it	lt
 8009cf6:	4618      	movlt	r0, r3
 8009cf8:	e7a4      	b.n	8009c44 <_printf_i+0x168>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	4649      	mov	r1, r9
 8009d00:	4640      	mov	r0, r8
 8009d02:	47d0      	blx	sl
 8009d04:	3001      	adds	r0, #1
 8009d06:	d09b      	beq.n	8009c40 <_printf_i+0x164>
 8009d08:	3501      	adds	r5, #1
 8009d0a:	68e3      	ldr	r3, [r4, #12]
 8009d0c:	9903      	ldr	r1, [sp, #12]
 8009d0e:	1a5b      	subs	r3, r3, r1
 8009d10:	42ab      	cmp	r3, r5
 8009d12:	dcf2      	bgt.n	8009cfa <_printf_i+0x21e>
 8009d14:	e7eb      	b.n	8009cee <_printf_i+0x212>
 8009d16:	2500      	movs	r5, #0
 8009d18:	f104 0619 	add.w	r6, r4, #25
 8009d1c:	e7f5      	b.n	8009d0a <_printf_i+0x22e>
 8009d1e:	bf00      	nop
 8009d20:	0800b3d9 	.word	0x0800b3d9
 8009d24:	0800b3ea 	.word	0x0800b3ea

08009d28 <_sbrk_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d06      	ldr	r5, [pc, #24]	; (8009d44 <_sbrk_r+0x1c>)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	602b      	str	r3, [r5, #0]
 8009d34:	f7f7 fc76 	bl	8001624 <_sbrk>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	d102      	bne.n	8009d42 <_sbrk_r+0x1a>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	b103      	cbz	r3, 8009d42 <_sbrk_r+0x1a>
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	bd38      	pop	{r3, r4, r5, pc}
 8009d44:	20002db4 	.word	0x20002db4

08009d48 <memcpy>:
 8009d48:	440a      	add	r2, r1
 8009d4a:	4291      	cmp	r1, r2
 8009d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d50:	d100      	bne.n	8009d54 <memcpy+0xc>
 8009d52:	4770      	bx	lr
 8009d54:	b510      	push	{r4, lr}
 8009d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d5e:	4291      	cmp	r1, r2
 8009d60:	d1f9      	bne.n	8009d56 <memcpy+0xe>
 8009d62:	bd10      	pop	{r4, pc}

08009d64 <memmove>:
 8009d64:	4288      	cmp	r0, r1
 8009d66:	b510      	push	{r4, lr}
 8009d68:	eb01 0402 	add.w	r4, r1, r2
 8009d6c:	d902      	bls.n	8009d74 <memmove+0x10>
 8009d6e:	4284      	cmp	r4, r0
 8009d70:	4623      	mov	r3, r4
 8009d72:	d807      	bhi.n	8009d84 <memmove+0x20>
 8009d74:	1e43      	subs	r3, r0, #1
 8009d76:	42a1      	cmp	r1, r4
 8009d78:	d008      	beq.n	8009d8c <memmove+0x28>
 8009d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d82:	e7f8      	b.n	8009d76 <memmove+0x12>
 8009d84:	4402      	add	r2, r0
 8009d86:	4601      	mov	r1, r0
 8009d88:	428a      	cmp	r2, r1
 8009d8a:	d100      	bne.n	8009d8e <memmove+0x2a>
 8009d8c:	bd10      	pop	{r4, pc}
 8009d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d96:	e7f7      	b.n	8009d88 <memmove+0x24>

08009d98 <__malloc_lock>:
 8009d98:	4801      	ldr	r0, [pc, #4]	; (8009da0 <__malloc_lock+0x8>)
 8009d9a:	f7ff bc29 	b.w	80095f0 <__retarget_lock_acquire_recursive>
 8009d9e:	bf00      	nop
 8009da0:	20002dac 	.word	0x20002dac

08009da4 <__malloc_unlock>:
 8009da4:	4801      	ldr	r0, [pc, #4]	; (8009dac <__malloc_unlock+0x8>)
 8009da6:	f7ff bc24 	b.w	80095f2 <__retarget_lock_release_recursive>
 8009daa:	bf00      	nop
 8009dac:	20002dac 	.word	0x20002dac

08009db0 <_realloc_r>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	4607      	mov	r7, r0
 8009db4:	4614      	mov	r4, r2
 8009db6:	460e      	mov	r6, r1
 8009db8:	b921      	cbnz	r1, 8009dc4 <_realloc_r+0x14>
 8009dba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	f7ff bc68 	b.w	8009694 <_malloc_r>
 8009dc4:	b922      	cbnz	r2, 8009dd0 <_realloc_r+0x20>
 8009dc6:	f7ff fc15 	bl	80095f4 <_free_r>
 8009dca:	4625      	mov	r5, r4
 8009dcc:	4628      	mov	r0, r5
 8009dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd0:	f000 f814 	bl	8009dfc <_malloc_usable_size_r>
 8009dd4:	42a0      	cmp	r0, r4
 8009dd6:	d20f      	bcs.n	8009df8 <_realloc_r+0x48>
 8009dd8:	4621      	mov	r1, r4
 8009dda:	4638      	mov	r0, r7
 8009ddc:	f7ff fc5a 	bl	8009694 <_malloc_r>
 8009de0:	4605      	mov	r5, r0
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d0f2      	beq.n	8009dcc <_realloc_r+0x1c>
 8009de6:	4631      	mov	r1, r6
 8009de8:	4622      	mov	r2, r4
 8009dea:	f7ff ffad 	bl	8009d48 <memcpy>
 8009dee:	4631      	mov	r1, r6
 8009df0:	4638      	mov	r0, r7
 8009df2:	f7ff fbff 	bl	80095f4 <_free_r>
 8009df6:	e7e9      	b.n	8009dcc <_realloc_r+0x1c>
 8009df8:	4635      	mov	r5, r6
 8009dfa:	e7e7      	b.n	8009dcc <_realloc_r+0x1c>

08009dfc <_malloc_usable_size_r>:
 8009dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e00:	1f18      	subs	r0, r3, #4
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	bfbc      	itt	lt
 8009e06:	580b      	ldrlt	r3, [r1, r0]
 8009e08:	18c0      	addlt	r0, r0, r3
 8009e0a:	4770      	bx	lr

08009e0c <_init>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr

08009e18 <_fini>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr
