
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a63c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001610  0800a7dc  0800a7dc  0001a7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdec  0800bdec  0002030c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdec  0800bdec  0001bdec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdf4  0800bdf4  0002030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdf4  0800bdf4  0001bdf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdf8  0800bdf8  0001bdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000030c  20000000  0800bdfc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002be4  2000030c  0800c108  0002030c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ef0  0800c108  00022ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb54  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fff  00000000  00000000  0003be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003fe90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00041090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd04  00000000  00000000  000420e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ddb  00000000  00000000  0005edec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1cb2  00000000  00000000  00077bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a0  00000000  00000000  001198cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000030c 	.word	0x2000030c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a7c4 	.word	0x0800a7c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000310 	.word	0x20000310
 80001dc:	0800a7c4 	.word	0x0800a7c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b96e 	b.w	8000ca0 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9d08      	ldr	r5, [sp, #32]
 80009e2:	4604      	mov	r4, r0
 80009e4:	468c      	mov	ip, r1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8083 	bne.w	8000af2 <__udivmoddi4+0x116>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d947      	bls.n	8000a82 <__udivmoddi4+0xa6>
 80009f2:	fab2 f282 	clz	r2, r2
 80009f6:	b142      	cbz	r2, 8000a0a <__udivmoddi4+0x2e>
 80009f8:	f1c2 0020 	rsb	r0, r2, #32
 80009fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4097      	lsls	r7, r2
 8000a04:	ea40 0c01 	orr.w	ip, r0, r1
 8000a08:	4094      	lsls	r4, r2
 8000a0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a0e:	0c23      	lsrs	r3, r4, #16
 8000a10:	fbbc f6f8 	udiv	r6, ip, r8
 8000a14:	fa1f fe87 	uxth.w	lr, r7
 8000a18:	fb08 c116 	mls	r1, r8, r6, ip
 8000a1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a20:	fb06 f10e 	mul.w	r1, r6, lr
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d909      	bls.n	8000a3c <__udivmoddi4+0x60>
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2e:	f080 8119 	bcs.w	8000c64 <__udivmoddi4+0x288>
 8000a32:	4299      	cmp	r1, r3
 8000a34:	f240 8116 	bls.w	8000c64 <__udivmoddi4+0x288>
 8000a38:	3e02      	subs	r6, #2
 8000a3a:	443b      	add	r3, r7
 8000a3c:	1a5b      	subs	r3, r3, r1
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a44:	fb08 3310 	mls	r3, r8, r0, r3
 8000a48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x8c>
 8000a54:	193c      	adds	r4, r7, r4
 8000a56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a5a:	f080 8105 	bcs.w	8000c68 <__udivmoddi4+0x28c>
 8000a5e:	45a6      	cmp	lr, r4
 8000a60:	f240 8102 	bls.w	8000c68 <__udivmoddi4+0x28c>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	2600      	movs	r6, #0
 8000a72:	b11d      	cbz	r5, 8000a7c <__udivmoddi4+0xa0>
 8000a74:	40d4      	lsrs	r4, r2
 8000a76:	2300      	movs	r3, #0
 8000a78:	e9c5 4300 	strd	r4, r3, [r5]
 8000a7c:	4631      	mov	r1, r6
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	b902      	cbnz	r2, 8000a86 <__udivmoddi4+0xaa>
 8000a84:	deff      	udf	#255	; 0xff
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d150      	bne.n	8000b30 <__udivmoddi4+0x154>
 8000a8e:	1bcb      	subs	r3, r1, r7
 8000a90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a94:	fa1f f887 	uxth.w	r8, r7
 8000a98:	2601      	movs	r6, #1
 8000a9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a9e:	0c21      	lsrs	r1, r4, #16
 8000aa0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb08 f30c 	mul.w	r3, r8, ip
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0xe4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0xe2>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	f200 80e9 	bhi.w	8000c90 <__udivmoddi4+0x2b4>
 8000abe:	4684      	mov	ip, r0
 8000ac0:	1ac9      	subs	r1, r1, r3
 8000ac2:	b2a3      	uxth	r3, r4
 8000ac4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000acc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad0:	fb08 f800 	mul.w	r8, r8, r0
 8000ad4:	45a0      	cmp	r8, r4
 8000ad6:	d907      	bls.n	8000ae8 <__udivmoddi4+0x10c>
 8000ad8:	193c      	adds	r4, r7, r4
 8000ada:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0x10a>
 8000ae0:	45a0      	cmp	r8, r4
 8000ae2:	f200 80d9 	bhi.w	8000c98 <__udivmoddi4+0x2bc>
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	eba4 0408 	sub.w	r4, r4, r8
 8000aec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af0:	e7bf      	b.n	8000a72 <__udivmoddi4+0x96>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x12e>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	f000 80b1 	beq.w	8000c5e <__udivmoddi4+0x282>
 8000afc:	2600      	movs	r6, #0
 8000afe:	e9c5 0100 	strd	r0, r1, [r5]
 8000b02:	4630      	mov	r0, r6
 8000b04:	4631      	mov	r1, r6
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f683 	clz	r6, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d14a      	bne.n	8000ba8 <__udivmoddi4+0x1cc>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0x140>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80b8 	bhi.w	8000c8c <__udivmoddi4+0x2b0>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	468c      	mov	ip, r1
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d0a8      	beq.n	8000a7c <__udivmoddi4+0xa0>
 8000b2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b2e:	e7a5      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000b30:	f1c2 0320 	rsb	r3, r2, #32
 8000b34:	fa20 f603 	lsr.w	r6, r0, r3
 8000b38:	4097      	lsls	r7, r2
 8000b3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b42:	40d9      	lsrs	r1, r3
 8000b44:	4330      	orrs	r0, r6
 8000b46:	0c03      	lsrs	r3, r0, #16
 8000b48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b4c:	fa1f f887 	uxth.w	r8, r7
 8000b50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb06 f108 	mul.w	r1, r6, r8
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x19c>
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b6a:	f080 808d 	bcs.w	8000c88 <__udivmoddi4+0x2ac>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 808a 	bls.w	8000c88 <__udivmoddi4+0x2ac>
 8000b74:	3e02      	subs	r6, #2
 8000b76:	443b      	add	r3, r7
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b281      	uxth	r1, r0
 8000b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b88:	fb00 f308 	mul.w	r3, r0, r8
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x1c4>
 8000b90:	1879      	adds	r1, r7, r1
 8000b92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b96:	d273      	bcs.n	8000c80 <__udivmoddi4+0x2a4>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d971      	bls.n	8000c80 <__udivmoddi4+0x2a4>
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	4439      	add	r1, r7
 8000ba0:	1acb      	subs	r3, r1, r3
 8000ba2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ba6:	e778      	b.n	8000a9a <__udivmoddi4+0xbe>
 8000ba8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bac:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bb4:	431c      	orrs	r4, r3
 8000bb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bba:	fa01 f306 	lsl.w	r3, r1, r6
 8000bbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bc6:	431f      	orrs	r7, r3
 8000bc8:	0c3b      	lsrs	r3, r7, #16
 8000bca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bce:	fa1f f884 	uxth.w	r8, r4
 8000bd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bda:	fb09 fa08 	mul.w	sl, r9, r8
 8000bde:	458a      	cmp	sl, r1
 8000be0:	fa02 f206 	lsl.w	r2, r2, r6
 8000be4:	fa00 f306 	lsl.w	r3, r0, r6
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x220>
 8000bea:	1861      	adds	r1, r4, r1
 8000bec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf0:	d248      	bcs.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf2:	458a      	cmp	sl, r1
 8000bf4:	d946      	bls.n	8000c84 <__udivmoddi4+0x2a8>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4421      	add	r1, r4
 8000bfc:	eba1 010a 	sub.w	r1, r1, sl
 8000c00:	b2bf      	uxth	r7, r7
 8000c02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c0e:	fb00 f808 	mul.w	r8, r0, r8
 8000c12:	45b8      	cmp	r8, r7
 8000c14:	d907      	bls.n	8000c26 <__udivmoddi4+0x24a>
 8000c16:	19e7      	adds	r7, r4, r7
 8000c18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1c:	d22e      	bcs.n	8000c7c <__udivmoddi4+0x2a0>
 8000c1e:	45b8      	cmp	r8, r7
 8000c20:	d92c      	bls.n	8000c7c <__udivmoddi4+0x2a0>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4427      	add	r7, r4
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	eba7 0708 	sub.w	r7, r7, r8
 8000c2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c32:	454f      	cmp	r7, r9
 8000c34:	46c6      	mov	lr, r8
 8000c36:	4649      	mov	r1, r9
 8000c38:	d31a      	bcc.n	8000c70 <__udivmoddi4+0x294>
 8000c3a:	d017      	beq.n	8000c6c <__udivmoddi4+0x290>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x27a>
 8000c3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c42:	eb67 0701 	sbc.w	r7, r7, r1
 8000c46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c4a:	40f2      	lsrs	r2, r6
 8000c4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c50:	40f7      	lsrs	r7, r6
 8000c52:	e9c5 2700 	strd	r2, r7, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	462e      	mov	r6, r5
 8000c60:	4628      	mov	r0, r5
 8000c62:	e70b      	b.n	8000a7c <__udivmoddi4+0xa0>
 8000c64:	4606      	mov	r6, r0
 8000c66:	e6e9      	b.n	8000a3c <__udivmoddi4+0x60>
 8000c68:	4618      	mov	r0, r3
 8000c6a:	e6fd      	b.n	8000a68 <__udivmoddi4+0x8c>
 8000c6c:	4543      	cmp	r3, r8
 8000c6e:	d2e5      	bcs.n	8000c3c <__udivmoddi4+0x260>
 8000c70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c74:	eb69 0104 	sbc.w	r1, r9, r4
 8000c78:	3801      	subs	r0, #1
 8000c7a:	e7df      	b.n	8000c3c <__udivmoddi4+0x260>
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	e7d2      	b.n	8000c26 <__udivmoddi4+0x24a>
 8000c80:	4660      	mov	r0, ip
 8000c82:	e78d      	b.n	8000ba0 <__udivmoddi4+0x1c4>
 8000c84:	4681      	mov	r9, r0
 8000c86:	e7b9      	b.n	8000bfc <__udivmoddi4+0x220>
 8000c88:	4666      	mov	r6, ip
 8000c8a:	e775      	b.n	8000b78 <__udivmoddi4+0x19c>
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	e74a      	b.n	8000b26 <__udivmoddi4+0x14a>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	4439      	add	r1, r7
 8000c96:	e713      	b.n	8000ac0 <__udivmoddi4+0xe4>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	e724      	b.n	8000ae8 <__udivmoddi4+0x10c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <ADC_DMA_average>:
void i2c_select(uint8_t mux_addr, uint8_t i);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_DMA_average(int channel) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum;
	int i;

	adc_sum = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
	if (channel < NUM_ADC_CHANNELS) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	dc14      	bgt.n	8000ce0 <ADC_DMA_average+0x3c>
		for (i = 0; i < NUM_ADC_SAMPLES; i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	e00d      	b.n	8000cd8 <ADC_DMA_average+0x34>
			adc_sum += adcBuf[channel + i * NUM_ADC_CHANNELS];
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	009a      	lsls	r2, r3, #2
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <ADC_DMA_average+0x54>)
 8000cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < NUM_ADC_SAMPLES; i++)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b1f      	cmp	r3, #31
 8000cdc:	ddee      	ble.n	8000cbc <ADC_DMA_average+0x18>
 8000cde:	e001      	b.n	8000ce4 <ADC_DMA_average+0x40>
	} else
		return 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e002      	b.n	8000cea <ADC_DMA_average+0x46>

	return adc_sum / NUM_ADC_SAMPLES;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	b29b      	uxth	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000328 	.word	0x20000328
 8000cfc:	00000000 	.word	0x00000000

08000d00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d00:	b5b0      	push	{r4, r5, r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d06:	f000 fe47 	bl	8001998 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d0a:	f000 f9fd 	bl	8001108 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d0e:	f000 fb71 	bl	80013f4 <MX_GPIO_Init>
	MX_RTC_Init();
 8000d12:	f000 fb29 	bl	8001368 <MX_RTC_Init>
	MX_DMA_Init();
 8000d16:	f000 fb4d 	bl	80013b4 <MX_DMA_Init>
	MX_ADC1_Init();
 8000d1a:	f000 fa7b 	bl	8001214 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000d1e:	f000 faf5 	bl	800130c <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 8000d22:	f008 f81d 	bl	8008d60 <MX_USB_DEVICE_Init>
	//MX_SDIO_SD_Init();

	/* USER CODE BEGIN 2 */
	i2c_select(I2C_MUX_MASTER, 0);
 8000d26:	2100      	movs	r1, #0
 8000d28:	20e2      	movs	r0, #226	; 0xe2
 8000d2a:	f000 fbdd 	bl	80014e8 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, 0);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	20e0      	movs	r0, #224	; 0xe0
 8000d32:	f000 fbd9 	bl	80014e8 <i2c_select>
	ssd1306_Init(&hi2c1, I2C_OLED_ADDR);
 8000d36:	2178      	movs	r1, #120	; 0x78
 8000d38:	4881      	ldr	r0, [pc, #516]	; (8000f40 <main+0x240>)
 8000d3a:	f007 fd39 	bl	80087b0 <ssd1306_Init>
	HAL_Delay(1000);
 8000d3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d42:	f000 fe9b 	bl	8001a7c <HAL_Delay>
	ssd1306_Fill(Black);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f007 fe8e 	bl	8008a68 <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000d4c:	2178      	movs	r1, #120	; 0x78
 8000d4e:	487c      	ldr	r0, [pc, #496]	; (8000f40 <main+0x240>)
 8000d50:	f007 feae 	bl	8008ab0 <ssd1306_UpdateScreen>

	i2c_select(I2C_MUX_MASTER, 0);
 8000d54:	2100      	movs	r1, #0
 8000d56:	20e2      	movs	r0, #226	; 0xe2
 8000d58:	f000 fbc6 	bl	80014e8 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, 1);
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	20e0      	movs	r0, #224	; 0xe0
 8000d60:	f000 fbc2 	bl	80014e8 <i2c_select>
	ssd1306_Init(&hi2c1, I2C_OLED_ADDR);
 8000d64:	2178      	movs	r1, #120	; 0x78
 8000d66:	4876      	ldr	r0, [pc, #472]	; (8000f40 <main+0x240>)
 8000d68:	f007 fd22 	bl	80087b0 <ssd1306_Init>
	HAL_Delay(1000);
 8000d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d70:	f000 fe84 	bl	8001a7c <HAL_Delay>
	ssd1306_Fill(Black);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f007 fe77 	bl	8008a68 <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000d7a:	2178      	movs	r1, #120	; 0x78
 8000d7c:	4870      	ldr	r0, [pc, #448]	; (8000f40 <main+0x240>)
 8000d7e:	f007 fe97 	bl	8008ab0 <ssd1306_UpdateScreen>

	i2c_select(I2C_MUX_MASTER, 1);
 8000d82:	2101      	movs	r1, #1
 8000d84:	20e2      	movs	r0, #226	; 0xe2
 8000d86:	f000 fbaf 	bl	80014e8 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, 0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	20e0      	movs	r0, #224	; 0xe0
 8000d8e:	f000 fbab 	bl	80014e8 <i2c_select>
	ssd1306_Init(&hi2c1, I2C_OLED_ADDR);
 8000d92:	2178      	movs	r1, #120	; 0x78
 8000d94:	486a      	ldr	r0, [pc, #424]	; (8000f40 <main+0x240>)
 8000d96:	f007 fd0b 	bl	80087b0 <ssd1306_Init>
	HAL_Delay(1000);
 8000d9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9e:	f000 fe6d 	bl	8001a7c <HAL_Delay>
	ssd1306_Fill(Black);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f007 fe60 	bl	8008a68 <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000da8:	2178      	movs	r1, #120	; 0x78
 8000daa:	4865      	ldr	r0, [pc, #404]	; (8000f40 <main+0x240>)
 8000dac:	f007 fe80 	bl	8008ab0 <ssd1306_UpdateScreen>

	i2c_select(I2C_MUX_MASTER, 1);
 8000db0:	2101      	movs	r1, #1
 8000db2:	20e2      	movs	r0, #226	; 0xe2
 8000db4:	f000 fb98 	bl	80014e8 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, 1);
 8000db8:	2101      	movs	r1, #1
 8000dba:	20e0      	movs	r0, #224	; 0xe0
 8000dbc:	f000 fb94 	bl	80014e8 <i2c_select>
	ssd1306_Init(&hi2c1, I2C_OLED_ADDR);
 8000dc0:	2178      	movs	r1, #120	; 0x78
 8000dc2:	485f      	ldr	r0, [pc, #380]	; (8000f40 <main+0x240>)
 8000dc4:	f007 fcf4 	bl	80087b0 <ssd1306_Init>
	HAL_Delay(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f000 fe56 	bl	8001a7c <HAL_Delay>
	ssd1306_Fill(Black);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f007 fe49 	bl	8008a68 <ssd1306_Fill>
	ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 8000dd6:	2178      	movs	r1, #120	; 0x78
 8000dd8:	4859      	ldr	r0, [pc, #356]	; (8000f40 <main+0x240>)
 8000dda:	f007 fe69 	bl	8008ab0 <ssd1306_UpdateScreen>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_ADC_Start(&hadc1);
 8000dde:	4859      	ldr	r0, [pc, #356]	; (8000f44 <main+0x244>)
 8000de0:	f000 feb4 	bl	8001b4c <HAL_ADC_Start>
	while (1) {
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	4958      	ldr	r1, [pc, #352]	; (8000f48 <main+0x248>)
 8000de8:	4856      	ldr	r0, [pc, #344]	; (8000f44 <main+0x244>)
 8000dea:	f000 ff63 	bl	8001cb4 <HAL_ADC_Start_DMA>
		for (int i = 0; i < 4; i++) {
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e16c      	b.n	80010ce <main+0x3ce>
			adcFilteredPrev[i] = adcFiltered[i];
 8000df4:	4a55      	ldr	r2, [pc, #340]	; (8000f4c <main+0x24c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dfc:	4a54      	ldr	r2, [pc, #336]	; (8000f50 <main+0x250>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			midiValuesPrev[i] = midiValues[i];
 8000e04:	4a53      	ldr	r2, [pc, #332]	; (8000f54 <main+0x254>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e0c:	4952      	ldr	r1, [pc, #328]	; (8000f58 <main+0x258>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			adcFiltered[i] = ADC_DMA_average(i);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff45 	bl	8000ca4 <ADC_DMA_average>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4a4b      	ldr	r2, [pc, #300]	; (8000f4c <main+0x24c>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			midiValues[i] = MIN((EMA_A_M * slope * adcFiltered[i]) + ((1 - EMA_A_M) * midiValues[i]), 127);
 8000e26:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <main+0x25c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fcbe 	bl	80007ac <__aeabi_f2d>
 8000e30:	4b4b      	ldr	r3, [pc, #300]	; (8000f60 <main+0x260>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f7ff fa2b 	bl	8000290 <__aeabi_dmul>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4614      	mov	r4, r2
 8000e40:	461d      	mov	r5, r3
 8000e42:	4a42      	ldr	r2, [pc, #264]	; (8000f4c <main+0x24c>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fc9c 	bl	8000788 <__aeabi_i2d>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4620      	mov	r0, r4
 8000e56:	4629      	mov	r1, r5
 8000e58:	f7ff fa1a 	bl	8000290 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4614      	mov	r4, r2
 8000e62:	461d      	mov	r5, r3
 8000e64:	4b3d      	ldr	r3, [pc, #244]	; (8000f5c <main+0x25c>)
 8000e66:	edd3 7a00 	vldr	s15, [r3]
 8000e6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e72:	4a38      	ldr	r2, [pc, #224]	; (8000f54 <main+0x254>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	ee17 0a90 	vmov	r0, s15
 8000e8a:	f7ff fc8f 	bl	80007ac <__aeabi_f2d>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4620      	mov	r0, r4
 8000e94:	4629      	mov	r1, r5
 8000e96:	f7ff fb2b 	bl	80004f0 <__adddf3>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	a325      	add	r3, pc, #148	; (adr r3, 8000f38 <main+0x238>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fd38 	bl	800091c <__aeabi_dcmplt>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d058      	beq.n	8000f64 <main+0x264>
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <main+0x25c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fc78 	bl	80007ac <__aeabi_f2d>
 8000ebc:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <main+0x260>)
 8000ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec2:	f7ff f9e5 	bl	8000290 <__aeabi_dmul>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4614      	mov	r4, r2
 8000ecc:	461d      	mov	r5, r3
 8000ece:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <main+0x24c>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fc56 	bl	8000788 <__aeabi_i2d>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	4629      	mov	r1, r5
 8000ee4:	f7ff f9d4 	bl	8000290 <__aeabi_dmul>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4614      	mov	r4, r2
 8000eee:	461d      	mov	r5, r3
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <main+0x25c>)
 8000ef2:	edd3 7a00 	vldr	s15, [r3]
 8000ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000efa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <main+0x254>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f12:	ee17 0a90 	vmov	r0, s15
 8000f16:	f7ff fc49 	bl	80007ac <__aeabi_f2d>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4620      	mov	r0, r4
 8000f20:	4629      	mov	r1, r5
 8000f22:	f7ff fae5 	bl	80004f0 <__adddf3>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f7ff fd1d 	bl	800096c <__aeabi_d2uiz>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e017      	b.n	8000f66 <main+0x266>
 8000f36:	bf00      	nop
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	405fc000 	.word	0x405fc000
 8000f40:	20002424 	.word	0x20002424
 8000f44:	20002498 	.word	0x20002498
 8000f48:	20000328 	.word	0x20000328
 8000f4c:	20000428 	.word	0x20000428
 8000f50:	20000430 	.word	0x20000430
 8000f54:	20002488 	.word	0x20002488
 8000f58:	200025f4 	.word	0x200025f4
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000000 	.word	0x20000000
 8000f64:	237f      	movs	r3, #127	; 0x7f
 8000f66:	495c      	ldr	r1, [pc, #368]	; (80010d8 <main+0x3d8>)
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
			if (midiValuesPrev[i] != midiValues[i]) {
 8000f6e:	4a5b      	ldr	r2, [pc, #364]	; (80010dc <main+0x3dc>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f76:	4958      	ldr	r1, [pc, #352]	; (80010d8 <main+0x3d8>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	f000 80a2 	beq.w	80010c8 <main+0x3c8>
				sprintf(adcStrings[i], "%.3d", (int) adcFiltered[i]);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4a55      	ldr	r2, [pc, #340]	; (80010e0 <main+0x3e0>)
 8000f8a:	1898      	adds	r0, r3, r2
 8000f8c:	4a55      	ldr	r2, [pc, #340]	; (80010e4 <main+0x3e4>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4954      	ldr	r1, [pc, #336]	; (80010e8 <main+0x3e8>)
 8000f98:	f008 fc5e 	bl	8009858 <siprintf>
				sprintf(midiStrings[i], "%.3d", (int) midiValues[i]);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4a52      	ldr	r2, [pc, #328]	; (80010ec <main+0x3ec>)
 8000fa2:	1898      	adds	r0, r3, r2
 8000fa4:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <main+0x3d8>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	461a      	mov	r2, r3
 8000fae:	494e      	ldr	r1, [pc, #312]	; (80010e8 <main+0x3e8>)
 8000fb0:	f008 fc52 	bl	8009858 <siprintf>
				dmux_select(i);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 fa61 	bl	800147c <dmux_select>
				ssd1306_Fill(Black);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f007 fd54 	bl	8008a68 <ssd1306_Fill>

				// Draw top line
				ssd1306_SetCursor(0, 0);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f007 feb4 	bl	8008d30 <ssd1306_SetCursor>
				ssd1306_WriteString(topLineStrings[i], Font_7x10, White);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	015b      	lsls	r3, r3, #5
 8000fcc:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <main+0x3f0>)
 8000fce:	1898      	adds	r0, r3, r2
 8000fd0:	4a48      	ldr	r2, [pc, #288]	; (80010f4 <main+0x3f4>)
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	ca06      	ldmia	r2, {r1, r2}
 8000fd6:	f007 fe85 	bl	8008ce4 <ssd1306_WriteString>
				ssd1306_SetCursor(105, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2069      	movs	r0, #105	; 0x69
 8000fde:	f007 fea7 	bl	8008d30 <ssd1306_SetCursor>
				ssd1306_WriteString(midiStrings[i], Font_7x10, White);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4a41      	ldr	r2, [pc, #260]	; (80010ec <main+0x3ec>)
 8000fe8:	1898      	adds	r0, r3, r2
 8000fea:	4a42      	ldr	r2, [pc, #264]	; (80010f4 <main+0x3f4>)
 8000fec:	2301      	movs	r3, #1
 8000fee:	ca06      	ldmia	r2, {r1, r2}
 8000ff0:	f007 fe78 	bl	8008ce4 <ssd1306_WriteString>

				// Draw first label
				uint8_t x = ((14 - strlen(labelStrings[i])) / 2) * 9;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	4a3f      	ldr	r2, [pc, #252]	; (80010f8 <main+0x3f8>)
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff f8ef 	bl	80001e0 <strlen>
 8001002:	4603      	mov	r3, r0
 8001004:	f1c3 030e 	rsb	r3, r3, #14
 8001008:	085b      	lsrs	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	00d2      	lsls	r2, r2, #3
 8001010:	4413      	add	r3, r2
 8001012:	70fb      	strb	r3, [r7, #3]
				if (strlen(labelStrings[i]) % 2 != 0) x += 5;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	015b      	lsls	r3, r3, #5
 8001018:	4a37      	ldr	r2, [pc, #220]	; (80010f8 <main+0x3f8>)
 800101a:	4413      	add	r3, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f8df 	bl	80001e0 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <main+0x332>
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	3305      	adds	r3, #5
 8001030:	70fb      	strb	r3, [r7, #3]
				ssd1306_SetCursor(x, 16);
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	2110      	movs	r1, #16
 8001036:	4618      	mov	r0, r3
 8001038:	f007 fe7a 	bl	8008d30 <ssd1306_SetCursor>
				ssd1306_WriteString(labelStrings[i], Font_9x18, White);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	015b      	lsls	r3, r3, #5
 8001040:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <main+0x3f8>)
 8001042:	1898      	adds	r0, r3, r2
 8001044:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <main+0x3fc>)
 8001046:	2301      	movs	r3, #1
 8001048:	ca06      	ldmia	r2, {r1, r2}
 800104a:	f007 fe4b 	bl	8008ce4 <ssd1306_WriteString>

				// Draw second label
				x = ((14 - strlen(labelStrings2[i])) / 2) * 9;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	015b      	lsls	r3, r3, #5
 8001052:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <main+0x400>)
 8001054:	4413      	add	r3, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f8c2 	bl	80001e0 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	f1c3 030e 	rsb	r3, r3, #14
 8001062:	085b      	lsrs	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	4413      	add	r3, r2
 800106c:	70fb      	strb	r3, [r7, #3]
				if (strlen(labelStrings2[i]) % 2 != 0) x += 5;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	015b      	lsls	r3, r3, #5
 8001072:	4a23      	ldr	r2, [pc, #140]	; (8001100 <main+0x400>)
 8001074:	4413      	add	r3, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f8b2 	bl	80001e0 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <main+0x38c>
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	3305      	adds	r3, #5
 800108a:	70fb      	strb	r3, [r7, #3]
				ssd1306_SetCursor(x, 40);
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	2128      	movs	r1, #40	; 0x28
 8001090:	4618      	mov	r0, r3
 8001092:	f007 fe4d 	bl	8008d30 <ssd1306_SetCursor>
				ssd1306_WriteString(labelStrings2[i], Font_9x18, White);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <main+0x400>)
 800109c:	1898      	adds	r0, r3, r2
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <main+0x3fc>)
 80010a0:	2301      	movs	r3, #1
 80010a2:	ca06      	ldmia	r2, {r1, r2}
 80010a4:	f007 fe1e 	bl	8008ce4 <ssd1306_WriteString>

				//ssd1306_SetCursor(0, 36);
				//ssd1306_WriteString(adcStrings[i], Font_11x18, White);
				ssd1306_UpdateScreen(&hi2c1, I2C_OLED_ADDR);
 80010a8:	2178      	movs	r1, #120	; 0x78
 80010aa:	4816      	ldr	r0, [pc, #88]	; (8001104 <main+0x404>)
 80010ac:	f007 fd00 	bl	8008ab0 <ssd1306_UpdateScreen>
				MX_USB_Send_Midi((uint8_t) midiValues[i], i + 17);
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <main+0x3d8>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3311      	adds	r3, #17
 80010c0:	4619      	mov	r1, r3
 80010c2:	4610      	mov	r0, r2
 80010c4:	f007 fe7c 	bl	8008dc0 <MX_USB_Send_Midi>
		for (int i = 0; i < 4; i++) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3301      	adds	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	f77f ae8f 	ble.w	8000df4 <main+0xf4>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 80010d6:	e685      	b.n	8000de4 <main+0xe4>
 80010d8:	20002488 	.word	0x20002488
 80010dc:	200025f4 	.word	0x200025f4
 80010e0:	200025e4 	.word	0x200025e4
 80010e4:	20000428 	.word	0x20000428
 80010e8:	0800a7dc 	.word	0x0800a7dc
 80010ec:	20002478 	.word	0x20002478
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000244 	.word	0x20000244
 80010f8:	2000008c 	.word	0x2000008c
 80010fc:	2000024c 	.word	0x2000024c
 8001100:	2000010c 	.word	0x2000010c
 8001104:	20002424 	.word	0x20002424

08001108 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b09a      	sub	sp, #104	; 0x68
 800110c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800110e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f008 fb20 	bl	800975c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <SystemClock_Config+0x104>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a31      	ldr	r2, [pc, #196]	; (800120c <SystemClock_Config+0x104>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <SystemClock_Config+0x104>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <SystemClock_Config+0x108>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a2b      	ldr	r2, [pc, #172]	; (8001210 <SystemClock_Config+0x108>)
 8001164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <SystemClock_Config+0x108>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001176:	230b      	movs	r3, #11
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001180:	2301      	movs	r3, #1
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001184:	2310      	movs	r3, #16
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001190:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001194:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 15;
 8001196:	230f      	movs	r3, #15
 8001198:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 144;
 800119a:	2390      	movs	r3, #144	; 0x90
 800119c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80011a2:	2305      	movs	r3, #5
 80011a4:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 ff5a 	bl	8005064 <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xb2>
		Error_Handler();
 80011b6:	f000 f9ce 	bl	8001556 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011ba:	230f      	movs	r3, #15
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 f9bd 	bl	8005554 <HAL_RCC_ClockConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0xdc>
		Error_Handler();
 80011e0:	f000 f9b9 	bl	8001556 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011e4:	2302      	movs	r3, #2
 80011e6:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ec:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fb6a 	bl	80058cc <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xfa>
		Error_Handler();
 80011fe:	f000 f9aa 	bl	8001556 <Error_Handler>
	}
}
 8001202:	bf00      	nop
 8001204:	3768      	adds	r7, #104	; 0x68
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40007000 	.word	0x40007000

08001214 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <MX_ADC1_Init+0xec>)
 8001228:	4a36      	ldr	r2, [pc, #216]	; (8001304 <MX_ADC1_Init+0xf0>)
 800122a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800122c:	4b34      	ldr	r3, [pc, #208]	; (8001300 <MX_ADC1_Init+0xec>)
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <MX_ADC1_Init+0xec>)
 8001234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001238:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <MX_ADC1_Init+0xec>)
 800123c:	2201      	movs	r2, #1
 800123e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <MX_ADC1_Init+0xec>)
 8001242:	2201      	movs	r2, #1
 8001244:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <MX_ADC1_Init+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <MX_ADC1_Init+0xec>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <MX_ADC1_Init+0xec>)
 8001256:	4a2c      	ldr	r2, [pc, #176]	; (8001308 <MX_ADC1_Init+0xf4>)
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_ADC1_Init+0xec>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <MX_ADC1_Init+0xec>)
 8001262:	2204      	movs	r2, #4
 8001264:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_ADC1_Init+0xec>)
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <MX_ADC1_Init+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001274:	4822      	ldr	r0, [pc, #136]	; (8001300 <MX_ADC1_Init+0xec>)
 8001276:	f000 fc25 	bl	8001ac4 <HAL_ADC_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001280:	f000 f969 	bl	8001556 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800128c:	2301      	movs	r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	481a      	ldr	r0, [pc, #104]	; (8001300 <MX_ADC1_Init+0xec>)
 8001296:	f000 fe61 	bl	8001f5c <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x90>
		Error_Handler();
 80012a0:	f000 f959 	bl	8001556 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_ADC1_Init+0xec>)
 80012b2:	f000 fe53 	bl	8001f5c <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0xac>
		Error_Handler();
 80012bc:	f000 f94b 	bl	8001556 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80012c4:	2303      	movs	r3, #3
 80012c6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_ADC1_Init+0xec>)
 80012ce:	f000 fe45 	bl	8001f5c <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0xc8>
		Error_Handler();
 80012d8:	f000 f93d 	bl	8001556 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80012dc:	2303      	movs	r3, #3
 80012de:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 80012e0:	2304      	movs	r3, #4
 80012e2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_ADC1_Init+0xec>)
 80012ea:	f000 fe37 	bl	8001f5c <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0xe4>
		Error_Handler();
 80012f4:	f000 f92f 	bl	8001556 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20002498 	.word	0x20002498
 8001304:	40012000 	.word	0x40012000
 8001308:	0f000001 	.word	0x0f000001

0800130c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_I2C1_Init+0x50>)
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <MX_I2C1_Init+0x54>)
 8001314:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_I2C1_Init+0x50>)
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_I2C1_Init+0x58>)
 800131a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_I2C1_Init+0x50>)
 800132a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_I2C1_Init+0x50>)
 800134a:	f001 ff2d 	bl	80031a8 <HAL_I2C_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001354:	f000 f8ff 	bl	8001556 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20002424 	.word	0x20002424
 8001360:	40005400 	.word	0x40005400
 8001364:	00061a80 	.word	0x00061a80

08001368 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_RTC_Init+0x44>)
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <MX_RTC_Init+0x48>)
 8001370:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_RTC_Init+0x44>)
 8001374:	2200      	movs	r2, #0
 8001376:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_RTC_Init+0x44>)
 800137a:	227f      	movs	r2, #127	; 0x7f
 800137c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_RTC_Init+0x44>)
 8001380:	22ff      	movs	r2, #255	; 0xff
 8001382:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_RTC_Init+0x44>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_RTC_Init+0x44>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_RTC_Init+0x44>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_RTC_Init+0x44>)
 8001398:	f004 fb88 	bl	8005aac <HAL_RTC_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_RTC_Init+0x3e>
		Error_Handler();
 80013a2:	f000 f8d8 	bl	8001556 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20002540 	.word	0x20002540
 80013b0:	40002800 	.word	0x40002800

080013b4 <MX_DMA_Init>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_DMA_Init+0x3c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <MX_DMA_Init+0x3c>)
 80013c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_DMA_Init+0x3c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2038      	movs	r0, #56	; 0x38
 80013dc:	f001 f949 	bl	8002672 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013e0:	2038      	movs	r0, #56	; 0x38
 80013e2:	f001 f962 	bl	80026aa <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_GPIO_Init+0x84>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <MX_GPIO_Init+0x84>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_GPIO_Init+0x84>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_GPIO_Init+0x84>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <MX_GPIO_Init+0x84>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_GPIO_Init+0x84>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_GPIO_Init+0x84>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <MX_GPIO_Init+0x84>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <MX_GPIO_Init+0x84>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_GPIO_Init+0x84>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <MX_GPIO_Init+0x84>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_GPIO_Init+0x84>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <dmux_select>:

void dmux_select(uint8_t n) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	uint8_t master_mux_i;
	uint8_t slave_mux_i;
	switch (n) {
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d81f      	bhi.n	80014cc <dmux_select+0x50>
 800148c:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <dmux_select+0x18>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014a5 	.word	0x080014a5
 8001498:	080014af 	.word	0x080014af
 800149c:	080014b9 	.word	0x080014b9
 80014a0:	080014c3 	.word	0x080014c3
	case 0:
		master_mux_i = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
		slave_mux_i = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73bb      	strb	r3, [r7, #14]
		break;
 80014ac:	e00e      	b.n	80014cc <dmux_select+0x50>
	case 1:
		master_mux_i = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
		slave_mux_i = 1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73bb      	strb	r3, [r7, #14]
		break;
 80014b6:	e009      	b.n	80014cc <dmux_select+0x50>
	case 2:
		master_mux_i = 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
		slave_mux_i = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	73bb      	strb	r3, [r7, #14]
		break;
 80014c0:	e004      	b.n	80014cc <dmux_select+0x50>
	case 3:
		master_mux_i = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
		slave_mux_i = 1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73bb      	strb	r3, [r7, #14]
		break;
 80014ca:	bf00      	nop
	}
	i2c_select(I2C_MUX_MASTER, master_mux_i);
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	4619      	mov	r1, r3
 80014d0:	20e2      	movs	r0, #226	; 0xe2
 80014d2:	f000 f809 	bl	80014e8 <i2c_select>
	i2c_select(I2C_MUX_SLAVE, slave_mux_i);
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	4619      	mov	r1, r3
 80014da:	20e0      	movs	r0, #224	; 0xe0
 80014dc:	f000 f804 	bl	80014e8 <i2c_select>
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <i2c_select>:

/* USER CODE BEGIN 4 */
void i2c_select(uint8_t mux_addr, uint8_t i) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	4603      	mov	r3, r0
 80014f0:	460a      	mov	r2, r1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	4613      	mov	r3, r2
 80014f6:	71bb      	strb	r3, [r7, #6]
	if (i > 7) return;
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	d810      	bhi.n	8001520 <i2c_select+0x38>
	unsigned char temp[1];
	temp[0] = 1 << i;
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	2201      	movs	r2, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	b299      	uxth	r1, r3
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	2364      	movs	r3, #100	; 0x64
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2301      	movs	r3, #1
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <i2c_select+0x40>)
 800151a:	f001 ff89 	bl	8003430 <HAL_I2C_Master_Transmit>
 800151e:	e000      	b.n	8001522 <i2c_select+0x3a>
	if (i > 7) return;
 8001520:	bf00      	nop
}
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20002424 	.word	0x20002424

0800152c <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fca3 	bl	8001e94 <HAL_ADC_Stop_DMA>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155a:	b672      	cpsid	i
}
 800155c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800155e:	e7fe      	b.n	800155e <Error_Handler+0x8>

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <HAL_MspInit+0x4c>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_MspInit+0x4c>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a2f      	ldr	r2, [pc, #188]	; (800168c <HAL_ADC_MspInit+0xdc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d157      	bne.n	8001682 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <HAL_ADC_MspInit+0xe0>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a2d      	ldr	r2, [pc, #180]	; (8001690 <HAL_ADC_MspInit+0xe0>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <HAL_ADC_MspInit+0xe0>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HAL_ADC_MspInit+0xe0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a26      	ldr	r2, [pc, #152]	; (8001690 <HAL_ADC_MspInit+0xe0>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_ADC_MspInit+0xe0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800160a:	230f      	movs	r3, #15
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160e:	2303      	movs	r3, #3
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	481d      	ldr	r0, [pc, #116]	; (8001694 <HAL_ADC_MspInit+0xe4>)
 800161e:	f001 fc3f 	bl	8002ea0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_ADC_MspInit+0xec>)
 8001626:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 800163c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001640:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 8001644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001648:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 800164c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001650:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 8001654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001658:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001666:	480c      	ldr	r0, [pc, #48]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 8001668:	f001 f83a 	bl	80026e0 <HAL_DMA_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001672:	f7ff ff70 	bl	8001556 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 800167a:	639a      	str	r2, [r3, #56]	; 0x38
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_ADC_MspInit+0xe8>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40012000 	.word	0x40012000
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000
 8001698:	200024e0 	.word	0x200024e0
 800169c:	40026410 	.word	0x40026410

080016a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <HAL_I2C_MspInit+0x84>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12b      	bne.n	800171a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_I2C_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a17      	ldr	r2, [pc, #92]	; (8001728 <HAL_I2C_MspInit+0x88>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_I2C_MspInit+0x88>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016de:	23c0      	movs	r3, #192	; 0xc0
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ee:	2304      	movs	r3, #4
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <HAL_I2C_MspInit+0x8c>)
 80016fa:	f001 fbd1 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_I2C_MspInit+0x88>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_I2C_MspInit+0x88>)
 8001708:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_I2C_MspInit+0x88>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40005400 	.word	0x40005400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020400 	.word	0x40020400

08001730 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a05      	ldr	r2, [pc, #20]	; (8001754 <HAL_RTC_MspInit+0x24>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d102      	bne.n	8001748 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_RTC_MspInit+0x28>)
 8001744:	2201      	movs	r2, #1
 8001746:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40002800 	.word	0x40002800
 8001758:	42470e3c 	.word	0x42470e3c

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <NMI_Handler+0x4>

08001762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <MemManage_Handler+0x4>

0800176e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <UsageFault_Handler+0x4>

0800177a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a8:	f000 f948 	bl	8001a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA2_Stream0_IRQHandler+0x10>)
 80017b6:	f001 f909 	bl	80029cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200024e0 	.word	0x200024e0

080017c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <OTG_FS_IRQHandler+0x10>)
 80017ca:	f002 fc18 	bl	8003ffe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20002ad8 	.word	0x20002ad8

080017d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
	}

return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e009      	b.n	8001838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf1      	blt.n	8001824 <_write+0x12>
	}
	return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_close>:

int _close(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	605a      	str	r2, [r3, #4]
	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_isatty>:

int _isatty(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f007 ff10 	bl	8009708 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20020000 	.word	0x20020000
 8001914:	00000400 	.word	0x00000400
 8001918:	20000438 	.word	0x20000438
 800191c:	20002ef0 	.word	0x20002ef0

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	; (8001984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	; (8001990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800196e:	f7ff ffd7 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f007 fecf 	bl	8009714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff f9c3 	bl	8000d00 <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	2000030c 	.word	0x2000030c
  ldr r2, =_sidata
 8001988:	0800bdfc 	.word	0x0800bdfc
  ldr r2, =_sbss
 800198c:	2000030c 	.word	0x2000030c
  ldr r4, =_ebss
 8001990:	20002ef0 	.word	0x20002ef0

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <HAL_Init+0x40>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <HAL_Init+0x40>)
 80019ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_Init+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_Init+0x40>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f000 fe4b 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f000 f808 	bl	80019dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019cc:	f7ff fdc8 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_InitTick+0x54>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x58>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fe63 	bl	80026c6 <HAL_SYSTICK_Config>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00e      	b.n	8001a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b0f      	cmp	r3, #15
 8001a0e:	d80a      	bhi.n	8001a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a10:	2200      	movs	r2, #0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f000 fe2b 	bl	8002672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <HAL_InitTick+0x5c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000018c 	.word	0x2000018c
 8001a34:	20000194 	.word	0x20000194
 8001a38:	20000190 	.word	0x20000190

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000194 	.word	0x20000194
 8001a60:	20002604 	.word	0x20002604

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20002604 	.word	0x20002604

08001a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff ffee 	bl	8001a64 <HAL_GetTick>
 8001a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d005      	beq.n	8001aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_Delay+0x44>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aa2:	bf00      	nop
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d8f7      	bhi.n	8001aa4 <HAL_Delay+0x28>
  {
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000194 	.word	0x20000194

08001ac4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e033      	b.n	8001b42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fd64 	bl	80015b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b0a:	f023 0302 	bic.w	r3, r3, #2
 8001b0e:	f043 0202 	orr.w	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fb52 	bl	80021c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
 8001b32:	e001      	b.n	8001b38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_Start+0x1a>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e097      	b.n	8001c96 <HAL_ADC_Start+0x14a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d018      	beq.n	8001bae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8c:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <HAL_ADC_Start+0x158>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a45      	ldr	r2, [pc, #276]	; (8001ca8 <HAL_ADC_Start+0x15c>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9a      	lsrs	r2, r3, #18
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ba0:	e002      	b.n	8001ba8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f9      	bne.n	8001ba2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d15f      	bne.n	8001c7c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001be6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bfa:	d106      	bne.n	8001c0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f023 0206 	bic.w	r2, r3, #6
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	645a      	str	r2, [r3, #68]	; 0x44
 8001c08:	e002      	b.n	8001c10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_ADC_Start+0x160>)
 8001c1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d129      	bne.n	8001c94 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	e020      	b.n	8001c94 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <HAL_ADC_Start+0x164>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d11b      	bne.n	8001c94 <HAL_ADC_Start+0x148>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d114      	bne.n	8001c94 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	e00b      	b.n	8001c94 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f043 0210 	orr.w	r2, r3, #16
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	2000018c 	.word	0x2000018c
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	40012000 	.word	0x40012000

08001cb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Start_DMA+0x1e>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e0ce      	b.n	8001e70 <HAL_ADC_Start_DMA+0x1bc>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d018      	beq.n	8001d1a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf8:	4b5f      	ldr	r3, [pc, #380]	; (8001e78 <HAL_ADC_Start_DMA+0x1c4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a5f      	ldr	r2, [pc, #380]	; (8001e7c <HAL_ADC_Start_DMA+0x1c8>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0c9a      	lsrs	r2, r3, #18
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d28:	d107      	bne.n	8001d3a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d38:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f040 8086 	bne.w	8001e56 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d88:	d106      	bne.n	8001d98 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f023 0206 	bic.w	r2, r3, #6
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
 8001d96:	e002      	b.n	8001d9e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_ADC_Start_DMA+0x1cc>)
 8001da8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dae:	4a35      	ldr	r2, [pc, #212]	; (8001e84 <HAL_ADC_Start_DMA+0x1d0>)
 8001db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db6:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <HAL_ADC_Start_DMA+0x1d4>)
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbe:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_ADC_Start_DMA+0x1d8>)
 8001dc0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001dda:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	334c      	adds	r3, #76	; 0x4c
 8001df6:	4619      	mov	r1, r3
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f000 fd1e 	bl	800283c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10f      	bne.n	8001e2c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d129      	bne.n	8001e6e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	e020      	b.n	8001e6e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HAL_ADC_Start_DMA+0x1dc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d11b      	bne.n	8001e6e <HAL_ADC_Start_DMA+0x1ba>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d114      	bne.n	8001e6e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e00b      	b.n	8001e6e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f043 0210 	orr.w	r2, r3, #16
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2000018c 	.word	0x2000018c
 8001e7c:	431bde83 	.word	0x431bde83
 8001e80:	40012300 	.word	0x40012300
 8001e84:	080023b9 	.word	0x080023b9
 8001e88:	08002473 	.word	0x08002473
 8001e8c:	0800248f 	.word	0x0800248f
 8001e90:	40012000 	.word	0x40012000

08001e94 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_Stop_DMA+0x1a>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e048      	b.n	8001f40 <HAL_ADC_Stop_DMA+0xac>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0201 	bic.w	r2, r2, #1
 8001ec4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d130      	bne.n	8001f36 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ee2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d10f      	bne.n	8001f12 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fcf8 	bl	80028ec <HAL_DMA_Abort>
 8001efc:	4603      	mov	r3, r0
 8001efe:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001f20:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x1c>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e113      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x244>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b09      	cmp	r3, #9
 8001f86:	d925      	bls.n	8001fd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68d9      	ldr	r1, [r3, #12]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b1e      	subs	r3, #30
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	400a      	ands	r2, r1
 8001fac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68d9      	ldr	r1, [r3, #12]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4403      	add	r3, r0
 8001fc6:	3b1e      	subs	r3, #30
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	e022      	b.n	800201a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6919      	ldr	r1, [r3, #16]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	2207      	movs	r2, #7
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6919      	ldr	r1, [r3, #16]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	4603      	mov	r3, r0
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4403      	add	r3, r0
 8002010:	409a      	lsls	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b06      	cmp	r3, #6
 8002020:	d824      	bhi.n	800206c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b05      	subs	r3, #5
 8002034:	221f      	movs	r2, #31
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	400a      	ands	r2, r1
 8002042:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	3b05      	subs	r3, #5
 800205e:	fa00 f203 	lsl.w	r2, r0, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	635a      	str	r2, [r3, #52]	; 0x34
 800206a:	e04c      	b.n	8002106 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b0c      	cmp	r3, #12
 8002072:	d824      	bhi.n	80020be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b23      	subs	r3, #35	; 0x23
 8002086:	221f      	movs	r2, #31
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43da      	mvns	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	400a      	ands	r2, r1
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b23      	subs	r3, #35	; 0x23
 80020b0:	fa00 f203 	lsl.w	r2, r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
 80020bc:	e023      	b.n	8002106 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b41      	subs	r3, #65	; 0x41
 80020d0:	221f      	movs	r2, #31
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	400a      	ands	r2, r1
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b41      	subs	r3, #65	; 0x41
 80020fa:	fa00 f203 	lsl.w	r2, r0, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_ADC_ConfigChannel+0x250>)
 8002108:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <HAL_ADC_ConfigChannel+0x254>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d10f      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x1d8>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b12      	cmp	r3, #18
 800211a:	d10b      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <HAL_ADC_ConfigChannel+0x254>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d12b      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x23a>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <HAL_ADC_ConfigChannel+0x258>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d003      	beq.n	8002150 <HAL_ADC_ConfigChannel+0x1f4>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b11      	cmp	r3, #17
 800214e:	d122      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <HAL_ADC_ConfigChannel+0x258>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d111      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_ADC_ConfigChannel+0x25c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_ADC_ConfigChannel+0x260>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	0c9a      	lsrs	r2, r3, #18
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002188:	e002      	b.n	8002190 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3b01      	subs	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40012300 	.word	0x40012300
 80021b0:	40012000 	.word	0x40012000
 80021b4:	10000012 	.word	0x10000012
 80021b8:	2000018c 	.word	0x2000018c
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c8:	4b79      	ldr	r3, [pc, #484]	; (80023b0 <ADC_Init+0x1f0>)
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	021a      	lsls	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <ADC_Init+0x1f4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002266:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e00f      	b.n	80022be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0202 	bic.w	r2, r2, #2
 80022cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7e1b      	ldrb	r3, [r3, #24]
 80022d8:	005a      	lsls	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01b      	beq.n	8002324 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800230a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	3b01      	subs	r3, #1
 8002318:	035a      	lsls	r2, r3, #13
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e007      	b.n	8002334 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002332:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	3b01      	subs	r3, #1
 8002350:	051a      	lsls	r2, r3, #20
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002376:	025a      	lsls	r2, r3, #9
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	029a      	lsls	r2, r3, #10
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40012300 	.word	0x40012300
 80023b4:	0f000001 	.word	0x0f000001

080023b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d13c      	bne.n	800244c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d12b      	bne.n	8002444 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d127      	bne.n	8002444 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d006      	beq.n	8002410 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800240c:	2b00      	cmp	r3, #0
 800240e:	d119      	bne.n	8002444 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0220 	bic.w	r2, r2, #32
 800241e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f043 0201 	orr.w	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f7ff f87b 	bl	8001540 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800244a:	e00e      	b.n	800246a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff fd75 	bl	8001f48 <HAL_ADC_ErrorCallback>
}
 800245e:	e004      	b.n	800246a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	4798      	blx	r3
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7ff f853 	bl	800152c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f043 0204 	orr.w	r2, r3, #4
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff fd4a 	bl	8001f48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	db0b      	blt.n	800254a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <__NVIC_EnableIRQ+0x38>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2001      	movs	r0, #1
 8002542:	fa00 f202 	lsl.w	r2, r0, r2
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100

0800255c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0a      	blt.n	8002586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	490c      	ldr	r1, [pc, #48]	; (80025a8 <__NVIC_SetPriority+0x4c>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	440b      	add	r3, r1
 8002580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002584:	e00a      	b.n	800259c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <__NVIC_SetPriority+0x50>)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3b04      	subs	r3, #4
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	440b      	add	r3, r1
 800259a:	761a      	strb	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000e100 	.word	0xe000e100
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f1c3 0307 	rsb	r3, r3, #7
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf28      	it	cs
 80025ce:	2304      	movcs	r3, #4
 80025d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d902      	bls.n	80025e0 <NVIC_EncodePriority+0x30>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3b03      	subs	r3, #3
 80025de:	e000      	b.n	80025e2 <NVIC_EncodePriority+0x32>
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43d9      	mvns	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	4313      	orrs	r3, r2
         );
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002628:	d301      	bcc.n	800262e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262a:	2301      	movs	r3, #1
 800262c:	e00f      	b.n	800264e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <SysTick_Config+0x40>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002636:	210f      	movs	r1, #15
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f7ff ff8e 	bl	800255c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <SysTick_Config+0x40>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <SysTick_Config+0x40>)
 8002648:	2207      	movs	r2, #7
 800264a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	e000e010 	.word	0xe000e010

0800265c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff29 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002684:	f7ff ff3e 	bl	8002504 <__NVIC_GetPriorityGrouping>
 8002688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f7ff ff8e 	bl	80025b0 <NVIC_EncodePriority>
 8002694:	4602      	mov	r2, r0
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5d 	bl	800255c <__NVIC_SetPriority>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff31 	bl	8002520 <__NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffa2 	bl	8002618 <SysTick_Config>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff f9ba 	bl	8001a64 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e099      	b.n	8002830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271c:	e00f      	b.n	800273e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800271e:	f7ff f9a1 	bl	8001a64 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b05      	cmp	r3, #5
 800272a:	d908      	bls.n	800273e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e078      	b.n	8002830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e8      	bne.n	800271e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_DMA_Init+0x158>)
 8002758:	4013      	ands	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b04      	cmp	r3, #4
 8002796:	d107      	bne.n	80027a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	4313      	orrs	r3, r2
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f023 0307 	bic.w	r3, r3, #7
 80027be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d117      	bne.n	8002802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fadf 	bl	8002da8 <DMA_CheckFifoParam>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027fe:	2301      	movs	r3, #1
 8002800:	e016      	b.n	8002830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa96 	bl	8002d3c <DMA_CalcBaseAndBitshift>
 8002810:	4603      	mov	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	223f      	movs	r2, #63	; 0x3f
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	f010803f 	.word	0xf010803f

0800283c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_DMA_Start_IT+0x26>
 800285e:	2302      	movs	r3, #2
 8002860:	e040      	b.n	80028e4 <HAL_DMA_Start_IT+0xa8>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d12f      	bne.n	80028d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fa28 	bl	8002ce0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	223f      	movs	r2, #63	; 0x3f
 8002896:	409a      	lsls	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0216 	orr.w	r2, r2, #22
 80028aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0208 	orr.w	r2, r2, #8
 80028c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e005      	b.n	80028e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028de:	2302      	movs	r3, #2
 80028e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028fa:	f7ff f8b3 	bl	8001a64 <HAL_GetTick>
 80028fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d008      	beq.n	800291e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e052      	b.n	80029c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0216 	bic.w	r2, r2, #22
 800292c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_DMA_Abort+0x62>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0208 	bic.w	r2, r2, #8
 800295c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296e:	e013      	b.n	8002998 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002970:	f7ff f878 	bl	8001a64 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b05      	cmp	r3, #5
 800297c:	d90c      	bls.n	8002998 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2203      	movs	r2, #3
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e015      	b.n	80029c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e4      	bne.n	8002970 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	223f      	movs	r2, #63	; 0x3f
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029d8:	4b92      	ldr	r3, [pc, #584]	; (8002c24 <HAL_DMA_IRQHandler+0x258>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a92      	ldr	r2, [pc, #584]	; (8002c28 <HAL_DMA_IRQHandler+0x25c>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0a9b      	lsrs	r3, r3, #10
 80029e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	2208      	movs	r2, #8
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d01a      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0204 	bic.w	r2, r2, #4
 8002a1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	2208      	movs	r2, #8
 8002a26:	409a      	lsls	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d012      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	f043 0202 	orr.w	r2, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	2204      	movs	r2, #4
 8002a74:	409a      	lsls	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d012      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	2204      	movs	r2, #4
 8002a92:	409a      	lsls	r2, r3
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	f043 0204 	orr.w	r2, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d043      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d03c      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d018      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d108      	bne.n	8002afc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d024      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
 8002afa:	e01f      	b.n	8002b3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
 8002b0c:	e016      	b.n	8002b3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0208 	bic.w	r2, r2, #8
 8002b2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	2220      	movs	r2, #32
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 808e 	beq.w	8002c6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8086 	beq.w	8002c6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	2220      	movs	r2, #32
 8002b64:	409a      	lsls	r2, r3
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d136      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0216 	bic.w	r2, r2, #22
 8002b84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d103      	bne.n	8002ba6 <HAL_DMA_IRQHandler+0x1da>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0208 	bic.w	r2, r2, #8
 8002bb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	223f      	movs	r2, #63	; 0x3f
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d07d      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
        }
        return;
 8002be2:	e078      	b.n	8002cd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01c      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d108      	bne.n	8002c12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d030      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
 8002c10:	e02b      	b.n	8002c6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d027      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
 8002c22:	e022      	b.n	8002c6a <HAL_DMA_IRQHandler+0x29e>
 8002c24:	2000018c 	.word	0x2000018c
 8002c28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0210 	bic.w	r2, r2, #16
 8002c48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d032      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d022      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2205      	movs	r2, #5
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d307      	bcc.n	8002cb2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f2      	bne.n	8002c96 <HAL_DMA_IRQHandler+0x2ca>
 8002cb0:	e000      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cb2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
 8002cd4:	e000      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cd6:	bf00      	nop
    }
  }
}
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop

08002ce0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d108      	bne.n	8002d20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d1e:	e007      	b.n	8002d30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	3b10      	subs	r3, #16
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d56:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <DMA_CalcBaseAndBitshift+0x68>)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d909      	bls.n	8002d7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	1d1a      	adds	r2, r3, #4
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d7c:	e007      	b.n	8002d8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d86:	f023 0303 	bic.w	r3, r3, #3
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	aaaaaaab 	.word	0xaaaaaaab
 8002da4:	0800a884 	.word	0x0800a884

08002da8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d11f      	bne.n	8002e02 <DMA_CheckFifoParam+0x5a>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d856      	bhi.n	8002e76 <DMA_CheckFifoParam+0xce>
 8002dc8:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <DMA_CheckFifoParam+0x28>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002df3 	.word	0x08002df3
 8002dd8:	08002de1 	.word	0x08002de1
 8002ddc:	08002e77 	.word	0x08002e77
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d046      	beq.n	8002e7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df0:	e043      	b.n	8002e7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dfa:	d140      	bne.n	8002e7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e00:	e03d      	b.n	8002e7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0a:	d121      	bne.n	8002e50 <DMA_CheckFifoParam+0xa8>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d837      	bhi.n	8002e82 <DMA_CheckFifoParam+0xda>
 8002e12:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <DMA_CheckFifoParam+0x70>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e29 	.word	0x08002e29
 8002e1c:	08002e2f 	.word	0x08002e2f
 8002e20:	08002e29 	.word	0x08002e29
 8002e24:	08002e41 	.word	0x08002e41
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2c:	e030      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d025      	beq.n	8002e86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3e:	e022      	b.n	8002e86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e48:	d11f      	bne.n	8002e8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e4e:	e01c      	b.n	8002e8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d903      	bls.n	8002e5e <DMA_CheckFifoParam+0xb6>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d003      	beq.n	8002e64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e5c:	e018      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
      break;
 8002e62:	e015      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00e      	beq.n	8002e8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	e00b      	b.n	8002e8e <DMA_CheckFifoParam+0xe6>
      break;
 8002e76:	bf00      	nop
 8002e78:	e00a      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e008      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e006      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e82:	bf00      	nop
 8002e84:	e004      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e86:	bf00      	nop
 8002e88:	e002      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <DMA_CheckFifoParam+0xe8>
      break;
 8002e8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	e159      	b.n	8003170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	f040 8148 	bne.w	800316a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d005      	beq.n	8002ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d130      	bne.n	8002f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 0201 	and.w	r2, r3, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d017      	beq.n	8002f90 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d123      	bne.n	8002fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	08da      	lsrs	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3208      	adds	r2, #8
 8002fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	220f      	movs	r2, #15
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	08da      	lsrs	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3208      	adds	r2, #8
 8002fde:	69b9      	ldr	r1, [r7, #24]
 8002fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0203 	and.w	r2, r3, #3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80a2 	beq.w	800316a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b57      	ldr	r3, [pc, #348]	; (8003188 <HAL_GPIO_Init+0x2e8>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	4a56      	ldr	r2, [pc, #344]	; (8003188 <HAL_GPIO_Init+0x2e8>)
 8003030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003034:	6453      	str	r3, [r2, #68]	; 0x44
 8003036:	4b54      	ldr	r3, [pc, #336]	; (8003188 <HAL_GPIO_Init+0x2e8>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003042:	4a52      	ldr	r2, [pc, #328]	; (800318c <HAL_GPIO_Init+0x2ec>)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	3302      	adds	r3, #2
 800304a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	220f      	movs	r2, #15
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a49      	ldr	r2, [pc, #292]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d019      	beq.n	80030a2 <HAL_GPIO_Init+0x202>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a48      	ldr	r2, [pc, #288]	; (8003194 <HAL_GPIO_Init+0x2f4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0x1fe>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a47      	ldr	r2, [pc, #284]	; (8003198 <HAL_GPIO_Init+0x2f8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00d      	beq.n	800309a <HAL_GPIO_Init+0x1fa>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a46      	ldr	r2, [pc, #280]	; (800319c <HAL_GPIO_Init+0x2fc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <HAL_GPIO_Init+0x1f6>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a45      	ldr	r2, [pc, #276]	; (80031a0 <HAL_GPIO_Init+0x300>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_GPIO_Init+0x1f2>
 800308e:	2304      	movs	r3, #4
 8003090:	e008      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 8003092:	2307      	movs	r3, #7
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 8003096:	2303      	movs	r3, #3
 8003098:	e004      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 800309a:	2302      	movs	r3, #2
 800309c:	e002      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 80030a2:	2300      	movs	r3, #0
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	f002 0203 	and.w	r2, r2, #3
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	4093      	lsls	r3, r2
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b4:	4935      	ldr	r1, [pc, #212]	; (800318c <HAL_GPIO_Init+0x2ec>)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c2:	4b38      	ldr	r3, [pc, #224]	; (80031a4 <HAL_GPIO_Init+0x304>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030e6:	4a2f      	ldr	r2, [pc, #188]	; (80031a4 <HAL_GPIO_Init+0x304>)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_GPIO_Init+0x304>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003110:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_GPIO_Init+0x304>)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003164:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	f67f aea2 	bls.w	8002ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	40013800 	.word	0x40013800
 8003190:	40020000 	.word	0x40020000
 8003194:	40020400 	.word	0x40020400
 8003198:	40020800 	.word	0x40020800
 800319c:	40020c00 	.word	0x40020c00
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40013c00 	.word	0x40013c00

080031a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e12b      	b.n	8003412 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe fa66 	bl	80016a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800320a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800320c:	f002 fb4a 	bl	80058a4 <HAL_RCC_GetPCLK1Freq>
 8003210:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4a81      	ldr	r2, [pc, #516]	; (800341c <HAL_I2C_Init+0x274>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d807      	bhi.n	800322c <HAL_I2C_Init+0x84>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a80      	ldr	r2, [pc, #512]	; (8003420 <HAL_I2C_Init+0x278>)
 8003220:	4293      	cmp	r3, r2
 8003222:	bf94      	ite	ls
 8003224:	2301      	movls	r3, #1
 8003226:	2300      	movhi	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e006      	b.n	800323a <HAL_I2C_Init+0x92>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a7d      	ldr	r2, [pc, #500]	; (8003424 <HAL_I2C_Init+0x27c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	bf94      	ite	ls
 8003234:	2301      	movls	r3, #1
 8003236:	2300      	movhi	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0e7      	b.n	8003412 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a78      	ldr	r2, [pc, #480]	; (8003428 <HAL_I2C_Init+0x280>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0c9b      	lsrs	r3, r3, #18
 800324c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4a6a      	ldr	r2, [pc, #424]	; (800341c <HAL_I2C_Init+0x274>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d802      	bhi.n	800327c <HAL_I2C_Init+0xd4>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	3301      	adds	r3, #1
 800327a:	e009      	b.n	8003290 <HAL_I2C_Init+0xe8>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	4a69      	ldr	r2, [pc, #420]	; (800342c <HAL_I2C_Init+0x284>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	099b      	lsrs	r3, r3, #6
 800328e:	3301      	adds	r3, #1
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	430b      	orrs	r3, r1
 8003296:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	495c      	ldr	r1, [pc, #368]	; (800341c <HAL_I2C_Init+0x274>)
 80032ac:	428b      	cmp	r3, r1
 80032ae:	d819      	bhi.n	80032e4 <HAL_I2C_Init+0x13c>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e59      	subs	r1, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80032be:	1c59      	adds	r1, r3, #1
 80032c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032c4:	400b      	ands	r3, r1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_I2C_Init+0x138>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1e59      	subs	r1, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d8:	3301      	adds	r3, #1
 80032da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032de:	e051      	b.n	8003384 <HAL_I2C_Init+0x1dc>
 80032e0:	2304      	movs	r3, #4
 80032e2:	e04f      	b.n	8003384 <HAL_I2C_Init+0x1dc>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <HAL_I2C_Init+0x168>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e012      	b.n	8003336 <HAL_I2C_Init+0x18e>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1e58      	subs	r0, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	0099      	lsls	r1, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Init+0x196>
 800333a:	2301      	movs	r3, #1
 800333c:	e022      	b.n	8003384 <HAL_I2C_Init+0x1dc>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10e      	bne.n	8003364 <HAL_I2C_Init+0x1bc>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1e58      	subs	r0, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	440b      	add	r3, r1
 8003354:	fbb0 f3f3 	udiv	r3, r0, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003362:	e00f      	b.n	8003384 <HAL_I2C_Init+0x1dc>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1e58      	subs	r0, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	0099      	lsls	r1, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	fbb0 f3f3 	udiv	r3, r0, r3
 800337a:	3301      	adds	r3, #1
 800337c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	6809      	ldr	r1, [r1, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6911      	ldr	r1, [r2, #16]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68d2      	ldr	r2, [r2, #12]
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	000186a0 	.word	0x000186a0
 8003420:	001e847f 	.word	0x001e847f
 8003424:	003d08ff 	.word	0x003d08ff
 8003428:	431bde83 	.word	0x431bde83
 800342c:	10624dd3 	.word	0x10624dd3

08003430 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	461a      	mov	r2, r3
 800343c:	460b      	mov	r3, r1
 800343e:	817b      	strh	r3, [r7, #10]
 8003440:	4613      	mov	r3, r2
 8003442:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7fe fb0e 	bl	8001a64 <HAL_GetTick>
 8003448:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b20      	cmp	r3, #32
 8003454:	f040 80e0 	bne.w	8003618 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2319      	movs	r3, #25
 800345e:	2201      	movs	r2, #1
 8003460:	4970      	ldr	r1, [pc, #448]	; (8003624 <HAL_I2C_Master_Transmit+0x1f4>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 faf4 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	e0d3      	b.n	800361a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_I2C_Master_Transmit+0x50>
 800347c:	2302      	movs	r3, #2
 800347e:	e0cc      	b.n	800361a <HAL_I2C_Master_Transmit+0x1ea>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d007      	beq.n	80034a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0201 	orr.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2221      	movs	r2, #33	; 0x21
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2210      	movs	r2, #16
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	893a      	ldrh	r2, [r7, #8]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a50      	ldr	r2, [pc, #320]	; (8003628 <HAL_I2C_Master_Transmit+0x1f8>)
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034e8:	8979      	ldrh	r1, [r7, #10]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	6a3a      	ldr	r2, [r7, #32]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f996 	bl	8003820 <I2C_MasterRequestWrite>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e08d      	b.n	800361a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fe:	2300      	movs	r3, #0
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003514:	e066      	b.n	80035e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	6a39      	ldr	r1, [r7, #32]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fb6e 	bl	8003bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b04      	cmp	r3, #4
 800352c:	d107      	bne.n	800353e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e06b      	b.n	800361a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d11b      	bne.n	80035b8 <HAL_I2C_Master_Transmit+0x188>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003584:	2b00      	cmp	r3, #0
 8003586:	d017      	beq.n	80035b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	6a39      	ldr	r1, [r7, #32]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fb5e 	bl	8003c7e <I2C_WaitOnBTFFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00d      	beq.n	80035e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d107      	bne.n	80035e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e01a      	b.n	800361a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d194      	bne.n	8003516 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e000      	b.n	800361a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	00100002 	.word	0x00100002
 8003628:	ffff0000 	.word	0xffff0000

0800362c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	460b      	mov	r3, r1
 8003640:	813b      	strh	r3, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003646:	f7fe fa0d 	bl	8001a64 <HAL_GetTick>
 800364a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b20      	cmp	r3, #32
 8003656:	f040 80d9 	bne.w	800380c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	2319      	movs	r3, #25
 8003660:	2201      	movs	r2, #1
 8003662:	496d      	ldr	r1, [pc, #436]	; (8003818 <HAL_I2C_Mem_Write+0x1ec>)
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f9f3 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
 8003672:	e0cc      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_I2C_Mem_Write+0x56>
 800367e:	2302      	movs	r3, #2
 8003680:	e0c5      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d007      	beq.n	80036a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2221      	movs	r2, #33	; 0x21
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2240      	movs	r2, #64	; 0x40
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a4d      	ldr	r2, [pc, #308]	; (800381c <HAL_I2C_Mem_Write+0x1f0>)
 80036e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ea:	88f8      	ldrh	r0, [r7, #6]
 80036ec:	893a      	ldrh	r2, [r7, #8]
 80036ee:	8979      	ldrh	r1, [r7, #10]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	4603      	mov	r3, r0
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f912 	bl	8003924 <I2C_RequestMemoryWrite>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d052      	beq.n	80037ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e081      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fa74 	bl	8003bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	2b04      	cmp	r3, #4
 8003720:	d107      	bne.n	8003732 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e06b      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b04      	cmp	r3, #4
 8003772:	d11b      	bne.n	80037ac <HAL_I2C_Mem_Write+0x180>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d017      	beq.n	80037ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1aa      	bne.n	800370a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fa60 	bl	8003c7e <I2C_WaitOnBTFFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d107      	bne.n	80037dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e016      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	00100002 	.word	0x00100002
 800381c:	ffff0000 	.word	0xffff0000

08003820 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	460b      	mov	r3, r1
 800382e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d006      	beq.n	800384a <I2C_MasterRequestWrite+0x2a>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d003      	beq.n	800384a <I2C_MasterRequestWrite+0x2a>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003848:	d108      	bne.n	800385c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e00b      	b.n	8003874 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	2b12      	cmp	r3, #18
 8003862:	d107      	bne.n	8003874 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003872:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f8e5 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800389a:	d103      	bne.n	80038a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e035      	b.n	8003914 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b0:	d108      	bne.n	80038c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038b2:	897b      	ldrh	r3, [r7, #10]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	e01b      	b.n	80038fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038c4:	897b      	ldrh	r3, [r7, #10]
 80038c6:	11db      	asrs	r3, r3, #7
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 0306 	and.w	r3, r3, #6
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f063 030f 	orn	r3, r3, #15
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	490e      	ldr	r1, [pc, #56]	; (800391c <I2C_MasterRequestWrite+0xfc>)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f90b 	bl	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e010      	b.n	8003914 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038f2:	897b      	ldrh	r3, [r7, #10]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4907      	ldr	r1, [pc, #28]	; (8003920 <I2C_MasterRequestWrite+0x100>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f8fb 	bl	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	00010008 	.word	0x00010008
 8003920:	00010002 	.word	0x00010002

08003924 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	4608      	mov	r0, r1
 800392e:	4611      	mov	r1, r2
 8003930:	461a      	mov	r2, r3
 8003932:	4603      	mov	r3, r0
 8003934:	817b      	strh	r3, [r7, #10]
 8003936:	460b      	mov	r3, r1
 8003938:	813b      	strh	r3, [r7, #8]
 800393a:	4613      	mov	r3, r2
 800393c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	2200      	movs	r2, #0
 8003956:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f878 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003974:	d103      	bne.n	800397e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e05f      	b.n	8003a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	6a3a      	ldr	r2, [r7, #32]
 8003996:	492d      	ldr	r1, [pc, #180]	; (8003a4c <I2C_RequestMemoryWrite+0x128>)
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f8b0 	bl	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e04c      	b.n	8003a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c0:	6a39      	ldr	r1, [r7, #32]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f91a 	bl	8003bfc <I2C_WaitOnTXEFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d107      	bne.n	80039e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e02b      	b.n	8003a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d105      	bne.n	80039fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039f0:	893b      	ldrh	r3, [r7, #8]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]
 80039fa:	e021      	b.n	8003a40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039fc:	893b      	ldrh	r3, [r7, #8]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	6a39      	ldr	r1, [r7, #32]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f8f4 	bl	8003bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d107      	bne.n	8003a32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e005      	b.n	8003a42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a36:	893b      	ldrh	r3, [r7, #8]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	00010002 	.word	0x00010002

08003a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a60:	e025      	b.n	8003aae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d021      	beq.n	8003aae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fd fffb 	bl	8001a64 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d116      	bne.n	8003aae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e023      	b.n	8003af6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d10d      	bne.n	8003ad4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	e00c      	b.n	8003aee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	43da      	mvns	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	2300      	movne	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d0b6      	beq.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b0c:	e051      	b.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1c:	d123      	bne.n	8003b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0204 	orr.w	r2, r3, #4
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e046      	b.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d021      	beq.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fd ff79 	bl	8001a64 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d116      	bne.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e020      	b.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10c      	bne.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e00b      	b.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4013      	ands	r3, r2
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d18d      	bne.n	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c08:	e02d      	b.n	8003c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f878 	bl	8003d00 <I2C_IsAcknowledgeFailed>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e02d      	b.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d021      	beq.n	8003c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fd ff1f 	bl	8001a64 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d116      	bne.n	8003c66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e007      	b.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b80      	cmp	r3, #128	; 0x80
 8003c72:	d1ca      	bne.n	8003c0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c8a:	e02d      	b.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f837 	bl	8003d00 <I2C_IsAcknowledgeFailed>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e02d      	b.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d021      	beq.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca4:	f7fd fede 	bl	8001a64 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d116      	bne.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e007      	b.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d1ca      	bne.n	8003c8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d16:	d11b      	bne.n	8003d50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d60:	b08f      	sub	sp, #60	; 0x3c
 8003d62:	af0a      	add	r7, sp, #40	; 0x28
 8003d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e10f      	b.n	8003f90 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f005 f9bc 	bl	8009108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2203      	movs	r2, #3
 8003d94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d102      	bne.n	8003daa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f002 f875 	bl	8005e9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	687e      	ldr	r6, [r7, #4]
 8003dbc:	466d      	mov	r5, sp
 8003dbe:	f106 0410 	add.w	r4, r6, #16
 8003dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dce:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dd2:	1d33      	adds	r3, r6, #4
 8003dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd6:	6838      	ldr	r0, [r7, #0]
 8003dd8:	f001 ff4d 	bl	8005c76 <USB_CoreInit>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0d0      	b.n	8003f90 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f002 f863 	bl	8005ec0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
 8003dfe:	e04a      	b.n	8003e96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	333d      	adds	r3, #61	; 0x3d
 8003e10:	2201      	movs	r2, #1
 8003e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	333c      	adds	r3, #60	; 0x3c
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	b298      	uxth	r0, r3
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	3342      	adds	r3, #66	; 0x42
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	333f      	adds	r3, #63	; 0x3f
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3344      	adds	r3, #68	; 0x44
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	3348      	adds	r3, #72	; 0x48
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	3350      	adds	r3, #80	; 0x50
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	3301      	adds	r3, #1
 8003e94:	73fb      	strb	r3, [r7, #15]
 8003e96:	7bfa      	ldrb	r2, [r7, #15]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d3af      	bcc.n	8003e00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	e044      	b.n	8003f30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ed2:	7bfa      	ldrb	r2, [r7, #15]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003efe:	7bfa      	ldrb	r2, [r7, #15]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f14:	7bfa      	ldrb	r2, [r7, #15]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d3b5      	bcc.n	8003ea6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	687e      	ldr	r6, [r7, #4]
 8003f42:	466d      	mov	r5, sp
 8003f44:	f106 0410 	add.w	r4, r6, #16
 8003f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f58:	1d33      	adds	r3, r6, #4
 8003f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5c:	6838      	ldr	r0, [r7, #0]
 8003f5e:	f001 ffd9 	bl	8005f14 <USB_DevInit>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e00d      	b.n	8003f90 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f003 f821 	bl	8006fd0 <USB_DevDisconnect>

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_PCD_Start+0x1c>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e020      	b.n	8003ff6 <HAL_PCD_Start+0x5e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d109      	bne.n	8003fd8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d005      	beq.n	8003fd8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f001 ff4d 	bl	8005e7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f002 ffd1 	bl	8006f8e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ffe:	b590      	push	{r4, r7, lr}
 8004000:	b08d      	sub	sp, #52	; 0x34
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f003 f88f 	bl	8007138 <USB_GetMode>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	f040 839d 	bne.w	800475c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f002 fff3 	bl	8007012 <USB_ReadInterrupts>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8393 	beq.w	800475a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f002 ffea 	bl	8007012 <USB_ReadInterrupts>
 800403e:	4603      	mov	r3, r0
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d107      	bne.n	8004058 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f002 0202 	and.w	r2, r2, #2
 8004056:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f002 ffd8 	bl	8007012 <USB_ReadInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b10      	cmp	r3, #16
 800406a:	d161      	bne.n	8004130 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0210 	bic.w	r2, r2, #16
 800407a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4413      	add	r3, r2
 8004098:	3304      	adds	r3, #4
 800409a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	0c5b      	lsrs	r3, r3, #17
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d124      	bne.n	80040f2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d035      	beq.n	8004120 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	6a38      	ldr	r0, [r7, #32]
 80040c8:	f002 fe3e 	bl	8006d48 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040d8:	441a      	add	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ea:	441a      	add	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	619a      	str	r2, [r3, #24]
 80040f0:	e016      	b.n	8004120 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	0c5b      	lsrs	r3, r3, #17
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d110      	bne.n	8004120 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004104:	2208      	movs	r2, #8
 8004106:	4619      	mov	r1, r3
 8004108:	6a38      	ldr	r0, [r7, #32]
 800410a:	f002 fe1d 	bl	8006d48 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800411a:	441a      	add	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0210 	orr.w	r2, r2, #16
 800412e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f002 ff6c 	bl	8007012 <USB_ReadInterrupts>
 800413a:	4603      	mov	r3, r0
 800413c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004140:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004144:	d16e      	bne.n	8004224 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f002 ff72 	bl	8007038 <USB_ReadDevAllOutEpInterrupt>
 8004154:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004156:	e062      	b.n	800421e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d057      	beq.n	8004212 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	4611      	mov	r1, r2
 800416c:	4618      	mov	r0, r3
 800416e:	f002 ff97 	bl	80070a0 <USB_ReadDevOutEPInterrupt>
 8004172:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418a:	461a      	mov	r2, r3
 800418c:	2301      	movs	r3, #1
 800418e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fdb0 	bl	8004cf8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	461a      	mov	r2, r3
 80041b0:	2308      	movs	r3, #8
 80041b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 feaa 	bl	8004f10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d2:	461a      	mov	r2, r3
 80041d4:	2310      	movs	r3, #16
 80041d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	461a      	mov	r2, r3
 80041f0:	2320      	movs	r3, #32
 80041f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	461a      	mov	r2, r3
 800420c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004210:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	3301      	adds	r3, #1
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d199      	bne.n	8004158 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f002 fef2 	bl	8007012 <USB_ReadInterrupts>
 800422e:	4603      	mov	r3, r0
 8004230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004234:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004238:	f040 80c0 	bne.w	80043bc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f002 ff13 	bl	800706c <USB_ReadDevAllInEpInterrupt>
 8004246:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800424c:	e0b2      	b.n	80043b4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80a7 	beq.w	80043a8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	4611      	mov	r1, r2
 8004264:	4618      	mov	r0, r3
 8004266:	f002 ff39 	bl	80070dc <USB_ReadDevInEPInterrupt>
 800426a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d057      	beq.n	8004326 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	2201      	movs	r2, #1
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43db      	mvns	r3, r3
 8004290:	69f9      	ldr	r1, [r7, #28]
 8004292:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004296:	4013      	ands	r3, r2
 8004298:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a6:	461a      	mov	r2, r3
 80042a8:	2301      	movs	r3, #1
 80042aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d132      	bne.n	800431a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	3348      	adds	r3, #72	; 0x48
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ca:	4613      	mov	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4403      	add	r3, r0
 80042d4:	3344      	adds	r3, #68	; 0x44
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4419      	add	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4403      	add	r3, r0
 80042e8:	3348      	adds	r3, #72	; 0x48
 80042ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d113      	bne.n	800431a <HAL_PCD_IRQHandler+0x31c>
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	3350      	adds	r3, #80	; 0x50
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d108      	bne.n	800431a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004312:	461a      	mov	r2, r3
 8004314:	2101      	movs	r1, #1
 8004316:	f002 ff41 	bl	800719c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	b2db      	uxtb	r3, r3
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f004 ff72 	bl	800920a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	461a      	mov	r2, r3
 800433e:	2308      	movs	r3, #8
 8004340:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	461a      	mov	r2, r3
 800435a:	2310      	movs	r3, #16
 800435c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	2340      	movs	r3, #64	; 0x40
 8004378:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	461a      	mov	r2, r3
 8004392:	2302      	movs	r3, #2
 8004394:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fc1b 	bl	8004bde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	3301      	adds	r3, #1
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f47f af49 	bne.w	800424e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f002 fe26 	bl	8007012 <USB_ReadInterrupts>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d0:	d122      	bne.n	8004418 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d108      	bne.n	8004402 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80043f8:	2100      	movs	r1, #0
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fe26 	bl	800504c <HAL_PCDEx_LPM_Callback>
 8004400:	e002      	b.n	8004408 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f004 ff6e 	bl	80092e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004416:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f002 fdf8 	bl	8007012 <USB_ReadInterrupts>
 8004422:	4603      	mov	r3, r0
 8004424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442c:	d112      	bne.n	8004454 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d102      	bne.n	8004444 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f004 ff2a 	bl	8009298 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004452:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f002 fdda 	bl	8007012 <USB_ReadInterrupts>
 800445e:	4603      	mov	r3, r0
 8004460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004468:	f040 80c7 	bne.w	80045fa <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2110      	movs	r1, #16
 8004486:	4618      	mov	r0, r3
 8004488:	f001 fea8 	bl	80061dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448c:	2300      	movs	r3, #0
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004490:	e056      	b.n	8004540 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449e:	461a      	mov	r2, r3
 80044a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044c4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	461a      	mov	r2, r3
 80044f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800450a:	0151      	lsls	r1, r2, #5
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	440a      	add	r2, r1
 8004510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004514:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004518:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800452a:	0151      	lsls	r1, r2, #5
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	440a      	add	r2, r1
 8004530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004538:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	3301      	adds	r3, #1
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004546:	429a      	cmp	r2, r3
 8004548:	d3a3      	bcc.n	8004492 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004558:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800455c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004576:	f043 030b 	orr.w	r3, r3, #11
 800457a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800458c:	f043 030b 	orr.w	r3, r3, #11
 8004590:	6453      	str	r3, [r2, #68]	; 0x44
 8004592:	e015      	b.n	80045c0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80045aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ba:	f043 030b 	orr.w	r3, r3, #11
 80045be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80045d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045e4:	461a      	mov	r2, r3
 80045e6:	f002 fdd9 	bl	800719c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80045f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f002 fd07 	bl	8007012 <USB_ReadInterrupts>
 8004604:	4603      	mov	r3, r0
 8004606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800460a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460e:	d124      	bne.n	800465a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f002 fd9d 	bl	8007154 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f001 fe3d 	bl	800629e <USB_GetDevSpeed>
 8004624:	4603      	mov	r3, r0
 8004626:	461a      	mov	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681c      	ldr	r4, [r3, #0]
 8004630:	f001 f92c 	bl	800588c <HAL_RCC_GetHCLKFreq>
 8004634:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	4620      	mov	r0, r4
 8004640:	f001 fb7a 	bl	8005d38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f004 fe08 	bl	800925a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004658:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f002 fcd7 	bl	8007012 <USB_ReadInterrupts>
 8004664:	4603      	mov	r3, r0
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b08      	cmp	r3, #8
 800466c:	d10a      	bne.n	8004684 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f004 fde5 	bl	800923e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f002 0208 	and.w	r2, r2, #8
 8004682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f002 fcc2 	bl	8007012 <USB_ReadInterrupts>
 800468e:	4603      	mov	r3, r0
 8004690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004698:	d10f      	bne.n	80046ba <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f004 fe3d 	bl	8009324 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80046b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f002 fca7 	bl	8007012 <USB_ReadInterrupts>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046ce:	d10f      	bne.n	80046f0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f004 fe10 	bl	8009300 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80046ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f002 fc8c 	bl	8007012 <USB_ReadInterrupts>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d10a      	bne.n	800471c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f004 fe1e 	bl	8009348 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800471a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f002 fc76 	bl	8007012 <USB_ReadInterrupts>
 8004726:	4603      	mov	r3, r0
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d115      	bne.n	800475c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f004 fe0e 	bl	8009364 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	e000      	b.n	800475c <HAL_PCD_IRQHandler+0x75e>
      return;
 800475a:	bf00      	nop
    }
  }
}
 800475c:	3734      	adds	r7, #52	; 0x34
 800475e:	46bd      	mov	sp, r7
 8004760:	bd90      	pop	{r4, r7, pc}

08004762 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_PCD_SetAddress+0x1a>
 8004778:	2302      	movs	r3, #2
 800477a:	e013      	b.n	80047a4 <HAL_PCD_SetAddress+0x42>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f002 fbd4 	bl	8006f42 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	4608      	mov	r0, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	461a      	mov	r2, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	70fb      	strb	r3, [r7, #3]
 80047be:	460b      	mov	r3, r1
 80047c0:	803b      	strh	r3, [r7, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	da0f      	bge.n	80047f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	f003 020f 	and.w	r2, r3, #15
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	3338      	adds	r3, #56	; 0x38
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	3304      	adds	r3, #4
 80047e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	705a      	strb	r2, [r3, #1]
 80047f0:	e00f      	b.n	8004812 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	4413      	add	r3, r2
 8004808:	3304      	adds	r3, #4
 800480a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800481e:	883a      	ldrh	r2, [r7, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	78ba      	ldrb	r2, [r7, #2]
 8004828:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800483c:	78bb      	ldrb	r3, [r7, #2]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d102      	bne.n	8004848 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_PCD_EP_Open+0xaa>
 8004852:	2302      	movs	r3, #2
 8004854:	e00e      	b.n	8004874 <HAL_PCD_EP_Open+0xc8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	4618      	mov	r0, r3
 8004866:	f001 fd3f 	bl	80062e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004872:	7afb      	ldrb	r3, [r7, #11]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800488c:	2b00      	cmp	r3, #0
 800488e:	da0f      	bge.n	80048b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	3338      	adds	r3, #56	; 0x38
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4413      	add	r3, r2
 80048a4:	3304      	adds	r3, #4
 80048a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	705a      	strb	r2, [r3, #1]
 80048ae:	e00f      	b.n	80048d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	f003 020f 	and.w	r2, r3, #15
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	3304      	adds	r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_PCD_EP_Close+0x6e>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e00e      	b.n	8004908 <HAL_PCD_EP_Close+0x8c>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68f9      	ldr	r1, [r7, #12]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fd7d 	bl	80063f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	460b      	mov	r3, r1
 800491e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004920:	7afb      	ldrb	r3, [r7, #11]
 8004922:	f003 020f 	and.w	r2, r3, #15
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	3304      	adds	r3, #4
 8004938:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2200      	movs	r2, #0
 800494a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2200      	movs	r2, #0
 8004950:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004952:	7afb      	ldrb	r3, [r7, #11]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	b2da      	uxtb	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800496c:	7afb      	ldrb	r3, [r7, #11]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	f002 f858 	bl	8006a38 <USB_EP0StartXfer>
 8004988:	e008      	b.n	800499c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	6979      	ldr	r1, [r7, #20]
 8004998:	f001 fe0a 	bl	80065b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	f003 020f 	and.w	r2, r3, #15
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80049c8:	681b      	ldr	r3, [r3, #0]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b086      	sub	sp, #24
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
 80049e2:	460b      	mov	r3, r1
 80049e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e6:	7afb      	ldrb	r3, [r7, #11]
 80049e8:	f003 020f 	and.w	r2, r3, #15
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	3338      	adds	r3, #56	; 0x38
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4413      	add	r3, r2
 80049fa:	3304      	adds	r3, #4
 80049fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2201      	movs	r2, #1
 8004a14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d102      	bne.n	8004a30 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a30:	7afb      	ldrb	r3, [r7, #11]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	6979      	ldr	r1, [r7, #20]
 8004a48:	f001 fff6 	bl	8006a38 <USB_EP0StartXfer>
 8004a4c:	e008      	b.n	8004a60 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6979      	ldr	r1, [r7, #20]
 8004a5c:	f001 fda8 	bl	80065b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	460b      	mov	r3, r1
 8004a74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	f003 020f 	and.w	r2, r3, #15
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d901      	bls.n	8004a88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e050      	b.n	8004b2a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	da0f      	bge.n	8004ab0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	f003 020f 	and.w	r2, r3, #15
 8004a96:	4613      	mov	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	3338      	adds	r3, #56	; 0x38
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	705a      	strb	r2, [r3, #1]
 8004aae:	e00d      	b.n	8004acc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_PCD_EP_SetStall+0x82>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e01e      	b.n	8004b2a <HAL_PCD_EP_SetStall+0xc0>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f002 f94d 	bl	8006d9a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	b2d9      	uxtb	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f002 fb3e 	bl	800719c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	f003 020f 	and.w	r2, r3, #15
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d901      	bls.n	8004b50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e042      	b.n	8004bd6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	da0f      	bge.n	8004b78 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	f003 020f 	and.w	r2, r3, #15
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	3338      	adds	r3, #56	; 0x38
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	705a      	strb	r2, [r3, #1]
 8004b76:	e00f      	b.n	8004b98 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	f003 020f 	and.w	r2, r3, #15
 8004b7e:	4613      	mov	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3304      	adds	r3, #4
 8004b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_PCD_EP_ClrStall+0x86>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e00e      	b.n	8004bd6 <HAL_PCD_EP_ClrStall+0xa4>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68f9      	ldr	r1, [r7, #12]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f002 f955 	bl	8006e76 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b08a      	sub	sp, #40	; 0x28
 8004be2:	af02      	add	r7, sp, #8
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	3338      	adds	r3, #56	; 0x38
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	3304      	adds	r3, #4
 8004c04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d901      	bls.n	8004c16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e06c      	b.n	8004cf0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d902      	bls.n	8004c32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3303      	adds	r3, #3
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c3a:	e02b      	b.n	8004c94 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d902      	bls.n	8004c58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	3303      	adds	r3, #3
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68d9      	ldr	r1, [r3, #12]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	4603      	mov	r3, r0
 8004c76:	6978      	ldr	r0, [r7, #20]
 8004c78:	f002 f831 	bl	8006cde <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	441a      	add	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	699a      	ldr	r2, [r3, #24]
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	441a      	add	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d809      	bhi.n	8004cbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d203      	bcs.n	8004cbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1be      	bne.n	8004c3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d811      	bhi.n	8004cee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	6939      	ldr	r1, [r7, #16]
 8004ce6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cea:	4013      	ands	r3, r2
 8004cec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	333c      	adds	r3, #60	; 0x3c
 8004d10:	3304      	adds	r3, #4
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	f040 80a0 	bne.w	8004e70 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d015      	beq.n	8004d66 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a72      	ldr	r2, [pc, #456]	; (8004f08 <PCD_EP_OutXfrComplete_int+0x210>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	f240 80dd 	bls.w	8004efe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80d7 	beq.w	8004efe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d62:	6093      	str	r3, [r2, #8]
 8004d64:	e0cb      	b.n	8004efe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2320      	movs	r3, #32
 8004d80:	6093      	str	r3, [r2, #8]
 8004d82:	e0bc      	b.n	8004efe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f040 80b7 	bne.w	8004efe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a5d      	ldr	r2, [pc, #372]	; (8004f08 <PCD_EP_OutXfrComplete_int+0x210>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d90f      	bls.n	8004db8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dae:	461a      	mov	r2, r3
 8004db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db4:	6093      	str	r3, [r2, #8]
 8004db6:	e0a2      	b.n	8004efe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004dca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	0159      	lsls	r1, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	440b      	add	r3, r1
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004dde:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	4613      	mov	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4403      	add	r3, r0
 8004dee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004df2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e06:	6819      	ldr	r1, [r3, #0]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4403      	add	r3, r0
 8004e16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4419      	add	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	4613      	mov	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4403      	add	r3, r0
 8004e2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e30:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d114      	bne.n	8004e62 <PCD_EP_OutXfrComplete_int+0x16a>
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d108      	bne.n	8004e62 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	f002 f99d 	bl	800719c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f004 f9b3 	bl	80091d4 <HAL_PCD_DataOutStageCallback>
 8004e6e:	e046      	b.n	8004efe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a26      	ldr	r2, [pc, #152]	; (8004f0c <PCD_EP_OutXfrComplete_int+0x214>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d124      	bne.n	8004ec2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e94:	6093      	str	r3, [r2, #8]
 8004e96:	e032      	b.n	8004efe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f004 f98a 	bl	80091d4 <HAL_PCD_DataOutStageCallback>
 8004ec0:	e01d      	b.n	8004efe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d114      	bne.n	8004ef2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004eea:	461a      	mov	r2, r3
 8004eec:	2100      	movs	r1, #0
 8004eee:	f002 f955 	bl	800719c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f004 f96b 	bl	80091d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	4f54300a 	.word	0x4f54300a
 8004f0c:	4f54310a 	.word	0x4f54310a

08004f10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	333c      	adds	r3, #60	; 0x3c
 8004f28:	3304      	adds	r3, #4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d90e      	bls.n	8004f64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f004 f923 	bl	80091b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d90c      	bls.n	8004f8c <PCD_EP_OutSetupPacket_int+0x7c>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d108      	bne.n	8004f8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f84:	461a      	mov	r2, r3
 8004f86:	2101      	movs	r1, #1
 8004f88:	f002 f908 	bl	800719c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	4f54300a 	.word	0x4f54300a

08004f9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d107      	bne.n	8004fca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fba:	883b      	ldrh	r3, [r7, #0]
 8004fbc:	0419      	lsls	r1, r3, #16
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fc8:	e028      	b.n	800501c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	e00d      	b.n	8004ffa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	3340      	adds	r3, #64	; 0x40
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	0c1b      	lsrs	r3, r3, #16
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
 8004ffa:	7bfa      	ldrb	r2, [r7, #15]
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	429a      	cmp	r2, r3
 8005002:	d3ec      	bcc.n	8004fde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005004:	883b      	ldrh	r3, [r7, #0]
 8005006:	0418      	lsls	r0, r3, #16
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6819      	ldr	r1, [r3, #0]
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	3b01      	subs	r3, #1
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	4302      	orrs	r2, r0
 8005014:	3340      	adds	r3, #64	; 0x40
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	887a      	ldrh	r2, [r7, #2]
 800503c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e264      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d075      	beq.n	800516e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005082:	4ba3      	ldr	r3, [pc, #652]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b04      	cmp	r3, #4
 800508c:	d00c      	beq.n	80050a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800508e:	4ba0      	ldr	r3, [pc, #640]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005096:	2b08      	cmp	r3, #8
 8005098:	d112      	bne.n	80050c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800509a:	4b9d      	ldr	r3, [pc, #628]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a6:	d10b      	bne.n	80050c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a8:	4b99      	ldr	r3, [pc, #612]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d05b      	beq.n	800516c <HAL_RCC_OscConfig+0x108>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d157      	bne.n	800516c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e23f      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d106      	bne.n	80050d8 <HAL_RCC_OscConfig+0x74>
 80050ca:	4b91      	ldr	r3, [pc, #580]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a90      	ldr	r2, [pc, #576]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	e01d      	b.n	8005114 <HAL_RCC_OscConfig+0xb0>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050e0:	d10c      	bne.n	80050fc <HAL_RCC_OscConfig+0x98>
 80050e2:	4b8b      	ldr	r3, [pc, #556]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a8a      	ldr	r2, [pc, #552]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	4b88      	ldr	r3, [pc, #544]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a87      	ldr	r2, [pc, #540]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e00b      	b.n	8005114 <HAL_RCC_OscConfig+0xb0>
 80050fc:	4b84      	ldr	r3, [pc, #528]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a83      	ldr	r2, [pc, #524]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	4b81      	ldr	r3, [pc, #516]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a80      	ldr	r2, [pc, #512]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 800510e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d013      	beq.n	8005144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fc fca2 	bl	8001a64 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005124:	f7fc fc9e 	bl	8001a64 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e204      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	4b76      	ldr	r3, [pc, #472]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0xc0>
 8005142:	e014      	b.n	800516e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005144:	f7fc fc8e 	bl	8001a64 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800514c:	f7fc fc8a 	bl	8001a64 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b64      	cmp	r3, #100	; 0x64
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e1f0      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515e:	4b6c      	ldr	r3, [pc, #432]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0xe8>
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800516c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d063      	beq.n	8005242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800517a:	4b65      	ldr	r3, [pc, #404]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005186:	4b62      	ldr	r3, [pc, #392]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800518e:	2b08      	cmp	r3, #8
 8005190:	d11c      	bne.n	80051cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005192:	4b5f      	ldr	r3, [pc, #380]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d116      	bne.n	80051cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519e:	4b5c      	ldr	r3, [pc, #368]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_RCC_OscConfig+0x152>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d001      	beq.n	80051b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e1c4      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b6:	4b56      	ldr	r3, [pc, #344]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4952      	ldr	r1, [pc, #328]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ca:	e03a      	b.n	8005242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d020      	beq.n	8005216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051d4:	4b4f      	ldr	r3, [pc, #316]	; (8005314 <HAL_RCC_OscConfig+0x2b0>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051da:	f7fc fc43 	bl	8001a64 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e2:	f7fc fc3f 	bl	8001a64 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e1a5      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f4:	4b46      	ldr	r3, [pc, #280]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005200:	4b43      	ldr	r3, [pc, #268]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4940      	ldr	r1, [pc, #256]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005210:	4313      	orrs	r3, r2
 8005212:	600b      	str	r3, [r1, #0]
 8005214:	e015      	b.n	8005242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005216:	4b3f      	ldr	r3, [pc, #252]	; (8005314 <HAL_RCC_OscConfig+0x2b0>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fc fc22 	bl	8001a64 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005224:	f7fc fc1e 	bl	8001a64 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e184      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005236:	4b36      	ldr	r3, [pc, #216]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d030      	beq.n	80052b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d016      	beq.n	8005284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005256:	4b30      	ldr	r3, [pc, #192]	; (8005318 <HAL_RCC_OscConfig+0x2b4>)
 8005258:	2201      	movs	r2, #1
 800525a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525c:	f7fc fc02 	bl	8001a64 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005264:	f7fc fbfe 	bl	8001a64 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e164      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005276:	4b26      	ldr	r3, [pc, #152]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 8005278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0x200>
 8005282:	e015      	b.n	80052b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <HAL_RCC_OscConfig+0x2b4>)
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528a:	f7fc fbeb 	bl	8001a64 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005292:	f7fc fbe7 	bl	8001a64 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e14d      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a4:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80052a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f0      	bne.n	8005292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80a0 	beq.w	80053fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052c2:	4b13      	ldr	r3, [pc, #76]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10f      	bne.n	80052ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ce:	2300      	movs	r3, #0
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4a0e      	ldr	r2, [pc, #56]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052dc:	6413      	str	r3, [r2, #64]	; 0x40
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ee:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_RCC_OscConfig+0x2b8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d121      	bne.n	800533e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052fa:	4b08      	ldr	r3, [pc, #32]	; (800531c <HAL_RCC_OscConfig+0x2b8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a07      	ldr	r2, [pc, #28]	; (800531c <HAL_RCC_OscConfig+0x2b8>)
 8005300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005306:	f7fc fbad 	bl	8001a64 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530c:	e011      	b.n	8005332 <HAL_RCC_OscConfig+0x2ce>
 800530e:	bf00      	nop
 8005310:	40023800 	.word	0x40023800
 8005314:	42470000 	.word	0x42470000
 8005318:	42470e80 	.word	0x42470e80
 800531c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005320:	f7fc fba0 	bl	8001a64 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e106      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005332:	4b85      	ldr	r3, [pc, #532]	; (8005548 <HAL_RCC_OscConfig+0x4e4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d106      	bne.n	8005354 <HAL_RCC_OscConfig+0x2f0>
 8005346:	4b81      	ldr	r3, [pc, #516]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	4a80      	ldr	r2, [pc, #512]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	6713      	str	r3, [r2, #112]	; 0x70
 8005352:	e01c      	b.n	800538e <HAL_RCC_OscConfig+0x32a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2b05      	cmp	r3, #5
 800535a:	d10c      	bne.n	8005376 <HAL_RCC_OscConfig+0x312>
 800535c:	4b7b      	ldr	r3, [pc, #492]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	4a7a      	ldr	r2, [pc, #488]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 8005362:	f043 0304 	orr.w	r3, r3, #4
 8005366:	6713      	str	r3, [r2, #112]	; 0x70
 8005368:	4b78      	ldr	r3, [pc, #480]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536c:	4a77      	ldr	r2, [pc, #476]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	6713      	str	r3, [r2, #112]	; 0x70
 8005374:	e00b      	b.n	800538e <HAL_RCC_OscConfig+0x32a>
 8005376:	4b75      	ldr	r3, [pc, #468]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	4a74      	ldr	r2, [pc, #464]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	6713      	str	r3, [r2, #112]	; 0x70
 8005382:	4b72      	ldr	r3, [pc, #456]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	4a71      	ldr	r2, [pc, #452]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d015      	beq.n	80053c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005396:	f7fc fb65 	bl	8001a64 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539c:	e00a      	b.n	80053b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539e:	f7fc fb61 	bl	8001a64 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0c5      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b4:	4b65      	ldr	r3, [pc, #404]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0ee      	beq.n	800539e <HAL_RCC_OscConfig+0x33a>
 80053c0:	e014      	b.n	80053ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c2:	f7fc fb4f 	bl	8001a64 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fc fb4b 	bl	8001a64 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e0af      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e0:	4b5a      	ldr	r3, [pc, #360]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1ee      	bne.n	80053ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d105      	bne.n	80053fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f2:	4b56      	ldr	r3, [pc, #344]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	4a55      	ldr	r2, [pc, #340]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 80053f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 809b 	beq.w	800553e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005408:	4b50      	ldr	r3, [pc, #320]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 030c 	and.w	r3, r3, #12
 8005410:	2b08      	cmp	r3, #8
 8005412:	d05c      	beq.n	80054ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d141      	bne.n	80054a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541c:	4b4c      	ldr	r3, [pc, #304]	; (8005550 <HAL_RCC_OscConfig+0x4ec>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005422:	f7fc fb1f 	bl	8001a64 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542a:	f7fc fb1b 	bl	8001a64 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e081      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543c:	4b43      	ldr	r3, [pc, #268]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	019b      	lsls	r3, r3, #6
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	3b01      	subs	r3, #1
 8005462:	041b      	lsls	r3, r3, #16
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546a:	061b      	lsls	r3, r3, #24
 800546c:	4937      	ldr	r1, [pc, #220]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 800546e:	4313      	orrs	r3, r2
 8005470:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005472:	4b37      	ldr	r3, [pc, #220]	; (8005550 <HAL_RCC_OscConfig+0x4ec>)
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fc faf4 	bl	8001a64 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005480:	f7fc faf0 	bl	8001a64 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e056      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005492:	4b2e      	ldr	r3, [pc, #184]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0x41c>
 800549e:	e04e      	b.n	800553e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a0:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <HAL_RCC_OscConfig+0x4ec>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a6:	f7fc fadd 	bl	8001a64 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ae:	f7fc fad9 	bl	8001a64 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e03f      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c0:	4b22      	ldr	r3, [pc, #136]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f0      	bne.n	80054ae <HAL_RCC_OscConfig+0x44a>
 80054cc:	e037      	b.n	800553e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e032      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054da:	4b1c      	ldr	r3, [pc, #112]	; (800554c <HAL_RCC_OscConfig+0x4e8>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d028      	beq.n	800553a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d121      	bne.n	800553a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d11a      	bne.n	800553a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800550a:	4013      	ands	r3, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005510:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005512:	4293      	cmp	r3, r2
 8005514:	d111      	bne.n	800553a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	3b01      	subs	r3, #1
 8005524:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d107      	bne.n	800553a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005536:	429a      	cmp	r2, r3
 8005538:	d001      	beq.n	800553e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40007000 	.word	0x40007000
 800554c:	40023800 	.word	0x40023800
 8005550:	42470060 	.word	0x42470060

08005554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0cc      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005568:	4b68      	ldr	r3, [pc, #416]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d90c      	bls.n	8005590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b65      	ldr	r3, [pc, #404]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b63      	ldr	r3, [pc, #396]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0b8      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d020      	beq.n	80055de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055a8:	4b59      	ldr	r3, [pc, #356]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	4a58      	ldr	r2, [pc, #352]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c0:	4b53      	ldr	r3, [pc, #332]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4a52      	ldr	r2, [pc, #328]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055cc:	4b50      	ldr	r3, [pc, #320]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	494d      	ldr	r1, [pc, #308]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d044      	beq.n	8005674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f2:	4b47      	ldr	r3, [pc, #284]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d119      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e07f      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d003      	beq.n	8005612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800560e:	2b03      	cmp	r3, #3
 8005610:	d107      	bne.n	8005622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005612:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d109      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e06f      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005622:	4b3b      	ldr	r3, [pc, #236]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e067      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005632:	4b37      	ldr	r3, [pc, #220]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f023 0203 	bic.w	r2, r3, #3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	4934      	ldr	r1, [pc, #208]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 8005640:	4313      	orrs	r3, r2
 8005642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005644:	f7fc fa0e 	bl	8001a64 <HAL_GetTick>
 8005648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564a:	e00a      	b.n	8005662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800564c:	f7fc fa0a 	bl	8001a64 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f241 3288 	movw	r2, #5000	; 0x1388
 800565a:	4293      	cmp	r3, r2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e04f      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005662:	4b2b      	ldr	r3, [pc, #172]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 020c 	and.w	r2, r3, #12
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	429a      	cmp	r2, r3
 8005672:	d1eb      	bne.n	800564c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005674:	4b25      	ldr	r3, [pc, #148]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d20c      	bcs.n	800569c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b22      	ldr	r3, [pc, #136]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568a:	4b20      	ldr	r3, [pc, #128]	; (800570c <HAL_RCC_ClockConfig+0x1b8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e032      	b.n	8005702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056a8:	4b19      	ldr	r3, [pc, #100]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4916      	ldr	r1, [pc, #88]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d009      	beq.n	80056da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	490e      	ldr	r1, [pc, #56]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056da:	f000 f821 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80056de:	4602      	mov	r2, r0
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	490a      	ldr	r1, [pc, #40]	; (8005714 <HAL_RCC_ClockConfig+0x1c0>)
 80056ec:	5ccb      	ldrb	r3, [r1, r3]
 80056ee:	fa22 f303 	lsr.w	r3, r2, r3
 80056f2:	4a09      	ldr	r2, [pc, #36]	; (8005718 <HAL_RCC_ClockConfig+0x1c4>)
 80056f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <HAL_RCC_ClockConfig+0x1c8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fc f96e 	bl	80019dc <HAL_InitTick>

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40023c00 	.word	0x40023c00
 8005710:	40023800 	.word	0x40023800
 8005714:	0800a86c 	.word	0x0800a86c
 8005718:	2000018c 	.word	0x2000018c
 800571c:	20000190 	.word	0x20000190

08005720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005720:	b5b0      	push	{r4, r5, r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005726:	2100      	movs	r1, #0
 8005728:	6079      	str	r1, [r7, #4]
 800572a:	2100      	movs	r1, #0
 800572c:	60f9      	str	r1, [r7, #12]
 800572e:	2100      	movs	r1, #0
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005732:	2100      	movs	r1, #0
 8005734:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005736:	4952      	ldr	r1, [pc, #328]	; (8005880 <HAL_RCC_GetSysClockFreq+0x160>)
 8005738:	6889      	ldr	r1, [r1, #8]
 800573a:	f001 010c 	and.w	r1, r1, #12
 800573e:	2908      	cmp	r1, #8
 8005740:	d00d      	beq.n	800575e <HAL_RCC_GetSysClockFreq+0x3e>
 8005742:	2908      	cmp	r1, #8
 8005744:	f200 8094 	bhi.w	8005870 <HAL_RCC_GetSysClockFreq+0x150>
 8005748:	2900      	cmp	r1, #0
 800574a:	d002      	beq.n	8005752 <HAL_RCC_GetSysClockFreq+0x32>
 800574c:	2904      	cmp	r1, #4
 800574e:	d003      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x38>
 8005750:	e08e      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005752:	4b4c      	ldr	r3, [pc, #304]	; (8005884 <HAL_RCC_GetSysClockFreq+0x164>)
 8005754:	60bb      	str	r3, [r7, #8]
       break;
 8005756:	e08e      	b.n	8005876 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005758:	4b4b      	ldr	r3, [pc, #300]	; (8005888 <HAL_RCC_GetSysClockFreq+0x168>)
 800575a:	60bb      	str	r3, [r7, #8]
      break;
 800575c:	e08b      	b.n	8005876 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800575e:	4948      	ldr	r1, [pc, #288]	; (8005880 <HAL_RCC_GetSysClockFreq+0x160>)
 8005760:	6849      	ldr	r1, [r1, #4]
 8005762:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005766:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005768:	4945      	ldr	r1, [pc, #276]	; (8005880 <HAL_RCC_GetSysClockFreq+0x160>)
 800576a:	6849      	ldr	r1, [r1, #4]
 800576c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005770:	2900      	cmp	r1, #0
 8005772:	d024      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005774:	4942      	ldr	r1, [pc, #264]	; (8005880 <HAL_RCC_GetSysClockFreq+0x160>)
 8005776:	6849      	ldr	r1, [r1, #4]
 8005778:	0989      	lsrs	r1, r1, #6
 800577a:	4608      	mov	r0, r1
 800577c:	f04f 0100 	mov.w	r1, #0
 8005780:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005784:	f04f 0500 	mov.w	r5, #0
 8005788:	ea00 0204 	and.w	r2, r0, r4
 800578c:	ea01 0305 	and.w	r3, r1, r5
 8005790:	493d      	ldr	r1, [pc, #244]	; (8005888 <HAL_RCC_GetSysClockFreq+0x168>)
 8005792:	fb01 f003 	mul.w	r0, r1, r3
 8005796:	2100      	movs	r1, #0
 8005798:	fb01 f102 	mul.w	r1, r1, r2
 800579c:	1844      	adds	r4, r0, r1
 800579e:	493a      	ldr	r1, [pc, #232]	; (8005888 <HAL_RCC_GetSysClockFreq+0x168>)
 80057a0:	fba2 0101 	umull	r0, r1, r2, r1
 80057a4:	1863      	adds	r3, r4, r1
 80057a6:	4619      	mov	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	f7fb f8fc 	bl	80009ac <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4613      	mov	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e04a      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057be:	4b30      	ldr	r3, [pc, #192]	; (8005880 <HAL_RCC_GetSysClockFreq+0x160>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	099b      	lsrs	r3, r3, #6
 80057c4:	461a      	mov	r2, r3
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ce:	f04f 0100 	mov.w	r1, #0
 80057d2:	ea02 0400 	and.w	r4, r2, r0
 80057d6:	ea03 0501 	and.w	r5, r3, r1
 80057da:	4620      	mov	r0, r4
 80057dc:	4629      	mov	r1, r5
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	014b      	lsls	r3, r1, #5
 80057e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057ec:	0142      	lsls	r2, r0, #5
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	1b00      	subs	r0, r0, r4
 80057f4:	eb61 0105 	sbc.w	r1, r1, r5
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	018b      	lsls	r3, r1, #6
 8005802:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005806:	0182      	lsls	r2, r0, #6
 8005808:	1a12      	subs	r2, r2, r0
 800580a:	eb63 0301 	sbc.w	r3, r3, r1
 800580e:	f04f 0000 	mov.w	r0, #0
 8005812:	f04f 0100 	mov.w	r1, #0
 8005816:	00d9      	lsls	r1, r3, #3
 8005818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800581c:	00d0      	lsls	r0, r2, #3
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	1912      	adds	r2, r2, r4
 8005824:	eb45 0303 	adc.w	r3, r5, r3
 8005828:	f04f 0000 	mov.w	r0, #0
 800582c:	f04f 0100 	mov.w	r1, #0
 8005830:	0299      	lsls	r1, r3, #10
 8005832:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005836:	0290      	lsls	r0, r2, #10
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4610      	mov	r0, r2
 800583e:	4619      	mov	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	461a      	mov	r2, r3
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	f7fb f8b0 	bl	80009ac <__aeabi_uldivmod>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4613      	mov	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <HAL_RCC_GetSysClockFreq+0x160>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	3301      	adds	r3, #1
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	60bb      	str	r3, [r7, #8]
      break;
 800586e:	e002      	b.n	8005876 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005870:	4b04      	ldr	r3, [pc, #16]	; (8005884 <HAL_RCC_GetSysClockFreq+0x164>)
 8005872:	60bb      	str	r3, [r7, #8]
      break;
 8005874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005876:	68bb      	ldr	r3, [r7, #8]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bdb0      	pop	{r4, r5, r7, pc}
 8005880:	40023800 	.word	0x40023800
 8005884:	00f42400 	.word	0x00f42400
 8005888:	017d7840 	.word	0x017d7840

0800588c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005890:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	2000018c 	.word	0x2000018c

080058a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058a8:	f7ff fff0 	bl	800588c <HAL_RCC_GetHCLKFreq>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0a9b      	lsrs	r3, r3, #10
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	4903      	ldr	r1, [pc, #12]	; (80058c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ba:	5ccb      	ldrb	r3, [r1, r3]
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40023800 	.word	0x40023800
 80058c8:	0800a87c 	.word	0x0800a87c

080058cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d038      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058f4:	4b68      	ldr	r3, [pc, #416]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058fa:	f7fc f8b3 	bl	8001a64 <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005900:	e008      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005902:	f7fc f8af 	bl	8001a64 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e0bd      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005914:	4b61      	ldr	r3, [pc, #388]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f0      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	019b      	lsls	r3, r3, #6
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	071b      	lsls	r3, r3, #28
 8005932:	495a      	ldr	r1, [pc, #360]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800593a:	4b57      	ldr	r3, [pc, #348]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005940:	f7fc f890 	bl	8001a64 <HAL_GetTick>
 8005944:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005946:	e008      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005948:	f7fc f88c 	bl	8001a64 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e09a      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800595a:	4b50      	ldr	r3, [pc, #320]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8083 	beq.w	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	4b48      	ldr	r3, [pc, #288]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	4a47      	ldr	r2, [pc, #284]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005982:	6413      	str	r3, [r2, #64]	; 0x40
 8005984:	4b45      	ldr	r3, [pc, #276]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005990:	4b43      	ldr	r3, [pc, #268]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a42      	ldr	r2, [pc, #264]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800599a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800599c:	f7fc f862 	bl	8001a64 <HAL_GetTick>
 80059a0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059a2:	e008      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059a4:	f7fc f85e 	bl	8001a64 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e06c      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059b6:	4b3a      	ldr	r3, [pc, #232]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059c2:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ca:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d02f      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d028      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059e0:	4b2e      	ldr	r3, [pc, #184]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059ea:	4b2e      	ldr	r3, [pc, #184]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059f0:	4b2c      	ldr	r3, [pc, #176]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059f6:	4a29      	ldr	r2, [pc, #164]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059fc:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d114      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a08:	f7fc f82c 	bl	8001a64 <HAL_GetTick>
 8005a0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a10:	f7fc f828 	bl	8001a64 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e034      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0ee      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3e:	d10d      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005a40:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a54:	4911      	ldr	r1, [pc, #68]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	608b      	str	r3, [r1, #8]
 8005a5a:	e005      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a66:	6093      	str	r3, [r2, #8]
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a74:	4909      	ldr	r1, [pc, #36]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	7d1a      	ldrb	r2, [r3, #20]
 8005a8a:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005a8c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	42470068 	.word	0x42470068
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40007000 	.word	0x40007000
 8005aa4:	42470e40 	.word	0x42470e40
 8005aa8:	424711e0 	.word	0x424711e0

08005aac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e083      	b.n	8005bc6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	7f5b      	ldrb	r3, [r3, #29]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fb fe2e 	bl	8001730 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	22ca      	movs	r2, #202	; 0xca
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2253      	movs	r2, #83	; 0x53
 8005ae8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f897 	bl	8005c1e <RTC_EnterInitMode>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2204      	movs	r2, #4
 8005b02:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e05e      	b.n	8005bc6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6899      	ldr	r1, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	68d2      	ldr	r2, [r2, #12]
 8005b42:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6919      	ldr	r1, [r3, #16]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	041a      	lsls	r2, r3, #16
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b66:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10e      	bne.n	8005b94 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f829 	bl	8005bce <HAL_RTC_WaitForSynchro>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d008      	beq.n	8005b94 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	22ff      	movs	r2, #255	; 0xff
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e018      	b.n	8005bc6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	22ff      	movs	r2, #255	; 0xff
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
  }
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005be8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bea:	f7fb ff3b 	bl	8001a64 <HAL_GetTick>
 8005bee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005bf0:	e009      	b.n	8005c06 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bf2:	f7fb ff37 	bl	8001a64 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c00:	d901      	bls.n	8005c06 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e007      	b.n	8005c16 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0ee      	beq.n	8005bf2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d119      	bne.n	8005c6c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c40:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c42:	f7fb ff0f 	bl	8001a64 <HAL_GetTick>
 8005c46:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c48:	e009      	b.n	8005c5e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c4a:	f7fb ff0b 	bl	8001a64 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c58:	d901      	bls.n	8005c5e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e007      	b.n	8005c6e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ee      	beq.n	8005c4a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c76:	b084      	sub	sp, #16
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	f107 001c 	add.w	r0, r7, #28
 8005c84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d122      	bne.n	8005cd4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d105      	bne.n	8005cc8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 fac5 	bl	8007258 <USB_CoreReset>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73fb      	strb	r3, [r7, #15]
 8005cd2:	e01a      	b.n	8005d0a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 fab9 	bl	8007258 <USB_CoreReset>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8005cfc:	e005      	b.n	8005d0a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10b      	bne.n	8005d28 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f043 0206 	orr.w	r2, r3, #6
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f043 0220 	orr.w	r2, r3, #32
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d34:	b004      	add	sp, #16
 8005d36:	4770      	bx	lr

08005d38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	4613      	mov	r3, r2
 8005d44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d165      	bne.n	8005e18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4a41      	ldr	r2, [pc, #260]	; (8005e54 <USB_SetTurnaroundTime+0x11c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d906      	bls.n	8005d62 <USB_SetTurnaroundTime+0x2a>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4a40      	ldr	r2, [pc, #256]	; (8005e58 <USB_SetTurnaroundTime+0x120>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d202      	bcs.n	8005d62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d5c:	230f      	movs	r3, #15
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	e062      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4a3c      	ldr	r2, [pc, #240]	; (8005e58 <USB_SetTurnaroundTime+0x120>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d306      	bcc.n	8005d78 <USB_SetTurnaroundTime+0x40>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4a3b      	ldr	r2, [pc, #236]	; (8005e5c <USB_SetTurnaroundTime+0x124>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d202      	bcs.n	8005d78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005d72:	230e      	movs	r3, #14
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	e057      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4a38      	ldr	r2, [pc, #224]	; (8005e5c <USB_SetTurnaroundTime+0x124>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d306      	bcc.n	8005d8e <USB_SetTurnaroundTime+0x56>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4a37      	ldr	r2, [pc, #220]	; (8005e60 <USB_SetTurnaroundTime+0x128>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d202      	bcs.n	8005d8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005d88:	230d      	movs	r3, #13
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	e04c      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4a33      	ldr	r2, [pc, #204]	; (8005e60 <USB_SetTurnaroundTime+0x128>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d306      	bcc.n	8005da4 <USB_SetTurnaroundTime+0x6c>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4a32      	ldr	r2, [pc, #200]	; (8005e64 <USB_SetTurnaroundTime+0x12c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d802      	bhi.n	8005da4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005d9e:	230c      	movs	r3, #12
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e041      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4a2f      	ldr	r2, [pc, #188]	; (8005e64 <USB_SetTurnaroundTime+0x12c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d906      	bls.n	8005dba <USB_SetTurnaroundTime+0x82>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4a2e      	ldr	r2, [pc, #184]	; (8005e68 <USB_SetTurnaroundTime+0x130>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d802      	bhi.n	8005dba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005db4:	230b      	movs	r3, #11
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e036      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4a2a      	ldr	r2, [pc, #168]	; (8005e68 <USB_SetTurnaroundTime+0x130>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d906      	bls.n	8005dd0 <USB_SetTurnaroundTime+0x98>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	4a29      	ldr	r2, [pc, #164]	; (8005e6c <USB_SetTurnaroundTime+0x134>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d802      	bhi.n	8005dd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005dca:	230a      	movs	r3, #10
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	e02b      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4a26      	ldr	r2, [pc, #152]	; (8005e6c <USB_SetTurnaroundTime+0x134>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d906      	bls.n	8005de6 <USB_SetTurnaroundTime+0xae>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4a25      	ldr	r2, [pc, #148]	; (8005e70 <USB_SetTurnaroundTime+0x138>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d202      	bcs.n	8005de6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005de0:	2309      	movs	r3, #9
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	e020      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4a21      	ldr	r2, [pc, #132]	; (8005e70 <USB_SetTurnaroundTime+0x138>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d306      	bcc.n	8005dfc <USB_SetTurnaroundTime+0xc4>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <USB_SetTurnaroundTime+0x13c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d802      	bhi.n	8005dfc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005df6:	2308      	movs	r3, #8
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	e015      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4a1d      	ldr	r2, [pc, #116]	; (8005e74 <USB_SetTurnaroundTime+0x13c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d906      	bls.n	8005e12 <USB_SetTurnaroundTime+0xda>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <USB_SetTurnaroundTime+0x140>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d202      	bcs.n	8005e12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e0c:	2307      	movs	r3, #7
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	e00a      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e12:	2306      	movs	r3, #6
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e007      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e1e:	2309      	movs	r3, #9
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e001      	b.n	8005e28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e24:	2309      	movs	r3, #9
 8005e26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	029b      	lsls	r3, r3, #10
 8005e3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e40:	431a      	orrs	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	00d8acbf 	.word	0x00d8acbf
 8005e58:	00e4e1c0 	.word	0x00e4e1c0
 8005e5c:	00f42400 	.word	0x00f42400
 8005e60:	01067380 	.word	0x01067380
 8005e64:	011a499f 	.word	0x011a499f
 8005e68:	01312cff 	.word	0x01312cff
 8005e6c:	014ca43f 	.word	0x014ca43f
 8005e70:	016e3600 	.word	0x016e3600
 8005e74:	01a6ab1f 	.word	0x01a6ab1f
 8005e78:	01e84800 	.word	0x01e84800

08005e7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f043 0201 	orr.w	r2, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f023 0201 	bic.w	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d106      	bne.n	8005eec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60da      	str	r2, [r3, #12]
 8005eea:	e00b      	b.n	8005f04 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60da      	str	r2, [r3, #12]
 8005efe:	e001      	b.n	8005f04 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e003      	b.n	8005f0c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005f04:	2032      	movs	r0, #50	; 0x32
 8005f06:	f7fb fdb9 	bl	8001a7c <HAL_Delay>

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f14:	b084      	sub	sp, #16
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b086      	sub	sp, #24
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	e009      	b.n	8005f48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	3340      	adds	r3, #64	; 0x40
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	2200      	movs	r2, #0
 8005f40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3301      	adds	r3, #1
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2b0e      	cmp	r3, #14
 8005f4c:	d9f2      	bls.n	8005f34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11c      	bne.n	8005f8e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f62:	f043 0302 	orr.w	r3, r3, #2
 8005f66:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8005f8c:	e00b      	b.n	8005fa6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fac:	461a      	mov	r2, r3
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb8:	4619      	mov	r1, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	680b      	ldr	r3, [r1, #0]
 8005fc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d10c      	bne.n	8005fe6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f949 	bl	800626c <USB_SetDevSpeed>
 8005fda:	e008      	b.n	8005fee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fdc:	2101      	movs	r1, #1
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f944 	bl	800626c <USB_SetDevSpeed>
 8005fe4:	e003      	b.n	8005fee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fe6:	2103      	movs	r1, #3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f93f 	bl	800626c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fee:	2110      	movs	r1, #16
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8f3 	bl	80061dc <USB_FlushTxFifo>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f911 	bl	8006228 <USB_FlushRxFifo>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	461a      	mov	r2, r3
 8006018:	2300      	movs	r3, #0
 800601a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	461a      	mov	r2, r3
 8006024:	2300      	movs	r3, #0
 8006026:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602e:	461a      	mov	r2, r3
 8006030:	2300      	movs	r3, #0
 8006032:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	e043      	b.n	80060c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800604c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006050:	d118      	bne.n	8006084 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	461a      	mov	r2, r3
 8006066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	e013      	b.n	8006096 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607a:	461a      	mov	r2, r3
 800607c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	e008      	b.n	8006096 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	461a      	mov	r2, r3
 8006092:	2300      	movs	r3, #0
 8006094:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	461a      	mov	r2, r3
 80060a4:	2300      	movs	r3, #0
 80060a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b4:	461a      	mov	r2, r3
 80060b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	3301      	adds	r3, #1
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d3b7      	bcc.n	800603a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	e043      	b.n	8006158 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e6:	d118      	bne.n	800611a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10a      	bne.n	8006104 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	461a      	mov	r2, r3
 80060fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e013      	b.n	800612c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006110:	461a      	mov	r2, r3
 8006112:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	e008      	b.n	800612c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006126:	461a      	mov	r2, r3
 8006128:	2300      	movs	r3, #0
 800612a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	461a      	mov	r2, r3
 800613a:	2300      	movs	r3, #0
 800613c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614a:	461a      	mov	r2, r3
 800614c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006150:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3301      	adds	r3, #1
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	d3b7      	bcc.n	80060d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800616e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006172:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006180:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	f043 0210 	orr.w	r2, r3, #16
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699a      	ldr	r2, [r3, #24]
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <USB_DevInit+0x2c4>)
 800619a:	4313      	orrs	r3, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f043 0208 	orr.w	r2, r3, #8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d107      	bne.n	80061c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c0:	f043 0304 	orr.w	r3, r3, #4
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061d4:	b004      	add	sp, #16
 80061d6:	4770      	bx	lr
 80061d8:	803c3800 	.word	0x803c3800

080061dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	019b      	lsls	r3, r3, #6
 80061ee:	f043 0220 	orr.w	r2, r3, #32
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4a09      	ldr	r2, [pc, #36]	; (8006224 <USB_FlushTxFifo+0x48>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d901      	bls.n	8006208 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e006      	b.n	8006216 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d0f0      	beq.n	80061f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	00030d40 	.word	0x00030d40

08006228 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2210      	movs	r2, #16
 8006238:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a09      	ldr	r2, [pc, #36]	; (8006268 <USB_FlushRxFifo+0x40>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d901      	bls.n	800624c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e006      	b.n	800625a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b10      	cmp	r3, #16
 8006256:	d0f0      	beq.n	800623a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	00030d40 	.word	0x00030d40

0800626c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800628c:	4313      	orrs	r3, r2
 800628e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800629e:	b480      	push	{r7}
 80062a0:	b087      	sub	sp, #28
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0306 	and.w	r3, r3, #6
 80062b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80062be:	2300      	movs	r3, #0
 80062c0:	75fb      	strb	r3, [r7, #23]
 80062c2:	e00a      	b.n	80062da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d002      	beq.n	80062d0 <USB_GetDevSpeed+0x32>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b06      	cmp	r3, #6
 80062ce:	d102      	bne.n	80062d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80062d0:	2302      	movs	r3, #2
 80062d2:	75fb      	strb	r3, [r7, #23]
 80062d4:	e001      	b.n	80062da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80062d6:	230f      	movs	r3, #15
 80062d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80062da:	7dfb      	ldrb	r3, [r7, #23]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d13a      	bne.n	800637a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	2101      	movs	r1, #1
 8006316:	fa01 f303 	lsl.w	r3, r1, r3
 800631a:	b29b      	uxth	r3, r3
 800631c:	68f9      	ldr	r1, [r7, #12]
 800631e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006322:	4313      	orrs	r3, r2
 8006324:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d155      	bne.n	80063e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	78db      	ldrb	r3, [r3, #3]
 8006356:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006358:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	059b      	lsls	r3, r3, #22
 800635e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006360:	4313      	orrs	r3, r2
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e036      	b.n	80063e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006380:	69da      	ldr	r2, [r3, #28]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	2101      	movs	r1, #1
 800638c:	fa01 f303 	lsl.w	r3, r1, r3
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006398:	4313      	orrs	r3, r2
 800639a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d11a      	bne.n	80063e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	78db      	ldrb	r3, [r3, #3]
 80063cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063ce:	430b      	orrs	r3, r1
 80063d0:	4313      	orrs	r3, r2
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	785b      	ldrb	r3, [r3, #1]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d161      	bne.n	80064d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800642a:	d11f      	bne.n	800646c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	440a      	add	r2, r1
 8006442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800644a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	0151      	lsls	r1, r2, #5
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	440a      	add	r2, r1
 8006462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800646a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	2101      	movs	r1, #1
 800647e:	fa01 f303 	lsl.w	r3, r1, r3
 8006482:	b29b      	uxth	r3, r3
 8006484:	43db      	mvns	r3, r3
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800648c:	4013      	ands	r3, r2
 800648e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	69da      	ldr	r2, [r3, #28]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	2101      	movs	r1, #1
 80064a2:	fa01 f303 	lsl.w	r3, r1, r3
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	43db      	mvns	r3, r3
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064b0:	4013      	ands	r3, r2
 80064b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	0159      	lsls	r1, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	440b      	add	r3, r1
 80064ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ce:	4619      	mov	r1, r3
 80064d0:	4b35      	ldr	r3, [pc, #212]	; (80065a8 <USB_DeactivateEndpoint+0x1b0>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	600b      	str	r3, [r1, #0]
 80064d6:	e060      	b.n	800659a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ee:	d11f      	bne.n	8006530 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800650a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800650e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800652e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	2101      	movs	r1, #1
 8006542:	fa01 f303 	lsl.w	r3, r1, r3
 8006546:	041b      	lsls	r3, r3, #16
 8006548:	43db      	mvns	r3, r3
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006550:	4013      	ands	r3, r2
 8006552:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	2101      	movs	r1, #1
 8006566:	fa01 f303 	lsl.w	r3, r1, r3
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	43db      	mvns	r3, r3
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006574:	4013      	ands	r3, r2
 8006576:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	0159      	lsls	r1, r3, #5
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	440b      	add	r3, r1
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	4619      	mov	r1, r3
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <USB_DeactivateEndpoint+0x1b4>)
 8006596:	4013      	ands	r3, r2
 8006598:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	ec337800 	.word	0xec337800
 80065ac:	eff37800 	.word	0xeff37800

080065b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	785b      	ldrb	r3, [r3, #1]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	f040 815c 	bne.w	800688a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d132      	bne.n	8006640 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	0151      	lsls	r1, r2, #5
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	440a      	add	r2, r1
 80065f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800661c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006638:	0cdb      	lsrs	r3, r3, #19
 800663a:	04db      	lsls	r3, r3, #19
 800663c:	6113      	str	r3, [r2, #16]
 800663e:	e074      	b.n	800672a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665a:	0cdb      	lsrs	r3, r3, #19
 800665c:	04db      	lsls	r3, r3, #19
 800665e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800667e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	6959      	ldr	r1, [r3, #20]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	440b      	add	r3, r1
 800669c:	1e59      	subs	r1, r3, #1
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80066a6:	04d9      	lsls	r1, r3, #19
 80066a8:	4b9d      	ldr	r3, [pc, #628]	; (8006920 <USB_EPStartXfer+0x370>)
 80066aa:	400b      	ands	r3, r1
 80066ac:	69b9      	ldr	r1, [r7, #24]
 80066ae:	0148      	lsls	r0, r1, #5
 80066b0:	69f9      	ldr	r1, [r7, #28]
 80066b2:	4401      	add	r1, r0
 80066b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066b8:	4313      	orrs	r3, r2
 80066ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d2:	69b9      	ldr	r1, [r7, #24]
 80066d4:	0148      	lsls	r0, r1, #5
 80066d6:	69f9      	ldr	r1, [r7, #28]
 80066d8:	4401      	add	r1, r0
 80066da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066de:	4313      	orrs	r3, r2
 80066e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	78db      	ldrb	r3, [r3, #3]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d11f      	bne.n	800672a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006704:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006708:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	440a      	add	r2, r1
 8006720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006724:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006728:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d14b      	bne.n	80067c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d009      	beq.n	800674c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006744:	461a      	mov	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	78db      	ldrb	r3, [r3, #3]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d128      	bne.n	80067a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d110      	bne.n	8006786 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	0151      	lsls	r1, r2, #5
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	440a      	add	r2, r1
 800677a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800677e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	e00f      	b.n	80067a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	0151      	lsls	r1, r2, #5
 8006798:	69fa      	ldr	r2, [r7, #28]
 800679a:	440a      	add	r2, r1
 800679c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	e12f      	b.n	8006a28 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	78db      	ldrb	r3, [r3, #3]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d015      	beq.n	800681c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8117 	beq.w	8006a28 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	2101      	movs	r1, #1
 800680c:	fa01 f303 	lsl.w	r3, r1, r3
 8006810:	69f9      	ldr	r1, [r7, #28]
 8006812:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006816:	4313      	orrs	r3, r2
 8006818:	634b      	str	r3, [r1, #52]	; 0x34
 800681a:	e105      	b.n	8006a28 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006828:	2b00      	cmp	r3, #0
 800682a:	d110      	bne.n	800684e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006846:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	e00f      	b.n	800686e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	440a      	add	r2, r1
 8006864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800686c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	68d9      	ldr	r1, [r3, #12]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	b298      	uxth	r0, r3
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	4603      	mov	r3, r0
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 fa2b 	bl	8006cde <USB_WritePacket>
 8006888:	e0ce      	b.n	8006a28 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a4:	0cdb      	lsrs	r3, r3, #19
 80068a6:	04db      	lsls	r3, r3, #19
 80068a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d126      	bne.n	8006924 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ec:	69b9      	ldr	r1, [r7, #24]
 80068ee:	0148      	lsls	r0, r1, #5
 80068f0:	69f9      	ldr	r1, [r7, #28]
 80068f2:	4401      	add	r1, r0
 80068f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068f8:	4313      	orrs	r3, r2
 80068fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	440a      	add	r2, r1
 8006912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800691a:	6113      	str	r3, [r2, #16]
 800691c:	e036      	b.n	800698c <USB_EPStartXfer+0x3dc>
 800691e:	bf00      	nop
 8006920:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	4413      	add	r3, r2
 800692e:	1e5a      	subs	r2, r3, #1
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	fbb2 f3f3 	udiv	r3, r2, r3
 8006938:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	8afb      	ldrh	r3, [r7, #22]
 800694a:	04d9      	lsls	r1, r3, #19
 800694c:	4b39      	ldr	r3, [pc, #228]	; (8006a34 <USB_EPStartXfer+0x484>)
 800694e:	400b      	ands	r3, r1
 8006950:	69b9      	ldr	r1, [r7, #24]
 8006952:	0148      	lsls	r0, r1, #5
 8006954:	69f9      	ldr	r1, [r7, #28]
 8006956:	4401      	add	r1, r0
 8006958:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800695c:	4313      	orrs	r3, r2
 800695e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	8af9      	ldrh	r1, [r7, #22]
 8006974:	fb01 f303 	mul.w	r3, r1, r3
 8006978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800697c:	69b9      	ldr	r1, [r7, #24]
 800697e:	0148      	lsls	r0, r1, #5
 8006980:	69f9      	ldr	r1, [r7, #28]
 8006982:	4401      	add	r1, r0
 8006984:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006988:	4313      	orrs	r3, r2
 800698a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800698c:	79fb      	ldrb	r3, [r7, #7]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d10d      	bne.n	80069ae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	68d9      	ldr	r1, [r3, #12]
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	460a      	mov	r2, r1
 80069ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	78db      	ldrb	r3, [r3, #3]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d128      	bne.n	8006a08 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d110      	bne.n	80069e8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	e00f      	b.n	8006a08 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	0151      	lsls	r1, r2, #5
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	440a      	add	r2, r1
 80069fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	1ff80000 	.word	0x1ff80000

08006a38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	f040 80cd 	bne.w	8006bf4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d132      	bne.n	8006ac8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	0151      	lsls	r1, r2, #5
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	440a      	add	r2, r1
 8006abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac0:	0cdb      	lsrs	r3, r3, #19
 8006ac2:	04db      	lsls	r3, r3, #19
 8006ac4:	6113      	str	r3, [r2, #16]
 8006ac6:	e04e      	b.n	8006b66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	0151      	lsls	r1, r2, #5
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	440a      	add	r2, r1
 8006ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae2:	0cdb      	lsrs	r3, r3, #19
 8006ae4:	04db      	lsls	r3, r3, #19
 8006ae6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	0151      	lsls	r1, r2, #5
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	440a      	add	r2, r1
 8006afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	695a      	ldr	r2, [r3, #20]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d903      	bls.n	8006b20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4c:	691a      	ldr	r2, [r3, #16]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b56:	6939      	ldr	r1, [r7, #16]
 8006b58:	0148      	lsls	r0, r1, #5
 8006b5a:	6979      	ldr	r1, [r7, #20]
 8006b5c:	4401      	add	r1, r0
 8006b5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b62:	4313      	orrs	r3, r2
 8006b64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d11e      	bne.n	8006baa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b80:	461a      	mov	r2, r3
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	e092      	b.n	8006cd0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bc8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d07e      	beq.n	8006cd0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	2101      	movs	r1, #1
 8006be4:	fa01 f303 	lsl.w	r3, r1, r3
 8006be8:	6979      	ldr	r1, [r7, #20]
 8006bea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	634b      	str	r3, [r1, #52]	; 0x34
 8006bf2:	e06d      	b.n	8006cd0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c0e:	0cdb      	lsrs	r3, r3, #19
 8006c10:	04db      	lsls	r3, r3, #19
 8006c12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	0151      	lsls	r1, r2, #5
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	440a      	add	r2, r1
 8006c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c36:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c7e:	6939      	ldr	r1, [r7, #16]
 8006c80:	0148      	lsls	r0, r1, #5
 8006c82:	6979      	ldr	r1, [r7, #20]
 8006c84:	4401      	add	r1, r0
 8006c86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d10d      	bne.n	8006cb0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d009      	beq.n	8006cb0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	68d9      	ldr	r1, [r3, #12]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cac:	460a      	mov	r2, r1
 8006cae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b089      	sub	sp, #36	; 0x24
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	4611      	mov	r1, r2
 8006cea:	461a      	mov	r2, r3
 8006cec:	460b      	mov	r3, r1
 8006cee:	71fb      	strb	r3, [r7, #7]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006cfc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d11a      	bne.n	8006d3a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d04:	88bb      	ldrh	r3, [r7, #4]
 8006d06:	3303      	adds	r3, #3
 8006d08:	089b      	lsrs	r3, r3, #2
 8006d0a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	e00f      	b.n	8006d32 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	031a      	lsls	r2, r3, #12
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d1e:	461a      	mov	r2, r3
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d3eb      	bcc.n	8006d12 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3724      	adds	r7, #36	; 0x24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b089      	sub	sp, #36	; 0x24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	4613      	mov	r3, r2
 8006d54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006d5e:	88fb      	ldrh	r3, [r7, #6]
 8006d60:	3303      	adds	r3, #3
 8006d62:	089b      	lsrs	r3, r3, #2
 8006d64:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006d66:	2300      	movs	r3, #0
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	e00b      	b.n	8006d84 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	3301      	adds	r3, #1
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d3ef      	bcc.n	8006d6c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3724      	adds	r7, #36	; 0x24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d12c      	bne.n	8006e10 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	db12      	blt.n	8006dee <USB_EPSetStall+0x54>
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00f      	beq.n	8006dee <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dec:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	e02b      	b.n	8006e68 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	db12      	blt.n	8006e48 <USB_EPSetStall+0xae>
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00f      	beq.n	8006e48 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e46:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d128      	bne.n	8006ee4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	0151      	lsls	r1, r2, #5
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	440a      	add	r2, r1
 8006ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006eb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	78db      	ldrb	r3, [r3, #3]
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d003      	beq.n	8006ec2 <USB_EPClearStall+0x4c>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	78db      	ldrb	r3, [r3, #3]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d138      	bne.n	8006f34 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	e027      	b.n	8006f34 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006efe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	78db      	ldrb	r3, [r3, #3]
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d003      	beq.n	8006f14 <USB_EPClearStall+0x9e>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	78db      	ldrb	r3, [r3, #3]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d10f      	bne.n	8006f34 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f32:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f60:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f64:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	78fb      	ldrb	r3, [r7, #3]
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f76:	68f9      	ldr	r1, [r7, #12]
 8006f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fa8:	f023 0303 	bic.w	r3, r3, #3
 8006fac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fbc:	f023 0302 	bic.w	r3, r3, #2
 8006fc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ffe:	f043 0302 	orr.w	r3, r3, #2
 8007002:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4013      	ands	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800702a:	68fb      	ldr	r3, [r7, #12]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	4013      	ands	r3, r2
 800705a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	0c1b      	lsrs	r3, r3, #16
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	4013      	ands	r3, r2
 800708e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	b29b      	uxth	r3, r3
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070b0:	78fb      	ldrb	r3, [r7, #3]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	4013      	ands	r3, r2
 80070cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070ce:	68bb      	ldr	r3, [r7, #8]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	fa22 f303 	lsr.w	r3, r2, r3
 800710c:	01db      	lsls	r3, r3, #7
 800710e:	b2db      	uxtb	r3, r3
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4013      	ands	r3, r2
 8007128:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800712a:	68bb      	ldr	r3, [r7, #8]
}
 800712c:	4618      	mov	r0, r3
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	f003 0301 	and.w	r3, r3, #1
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800716e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007172:	f023 0307 	bic.w	r3, r3, #7
 8007176:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800718a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	460b      	mov	r3, r1
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	333c      	adds	r3, #60	; 0x3c
 80071b2:	3304      	adds	r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	4a26      	ldr	r2, [pc, #152]	; (8007254 <USB_EP0_OutStart+0xb8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d90a      	bls.n	80071d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071d0:	d101      	bne.n	80071d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	e037      	b.n	8007246 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	461a      	mov	r2, r3
 80071de:	2300      	movs	r3, #0
 80071e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007204:	f043 0318 	orr.w	r3, r3, #24
 8007208:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007218:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800721c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800721e:	7afb      	ldrb	r3, [r7, #11]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d10f      	bne.n	8007244 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722a:	461a      	mov	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007242:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	4f54300a 	.word	0x4f54300a

08007258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a13      	ldr	r2, [pc, #76]	; (80072bc <USB_CoreReset+0x64>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e01b      	b.n	80072ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	daf2      	bge.n	8007264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f043 0201 	orr.w	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a09      	ldr	r2, [pc, #36]	; (80072bc <USB_CoreReset+0x64>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d901      	bls.n	80072a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e006      	b.n	80072ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d0f0      	beq.n	800728e <USB_CoreReset+0x36>

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	00030d40 	.word	0x00030d40

080072c0 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 80072cc:	2044      	movs	r0, #68	; 0x44
 80072ce:	f002 f9e1 	bl	8009694 <USBD_static_malloc>
 80072d2:	4602      	mov	r2, r0
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e016      	b.n	8007316 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	2202      	movs	r2, #2
 80072f4:	2181      	movs	r1, #129	; 0x81
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f002 f8a9 	bl	800944e <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 80072fc:	2340      	movs	r3, #64	; 0x40
 80072fe:	2202      	movs	r2, #2
 8007300:	2101      	movs	r1, #1
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f002 f8a3 	bl	800944e <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8007308:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 800730a:	2340      	movs	r3, #64	; 0x40
 800730c:	2101      	movs	r1, #1
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f002 f98c 	bl	800962c <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
  }
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 800732a:	2181      	movs	r1, #129	; 0x81
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f002 f8b4 	bl	800949a <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 8007332:	2101      	movs	r1, #1
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f002 f8b0 	bl	800949a <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <USBD_Midi_Setup+0x26>
 800735a:	2b20      	cmp	r3, #32
 800735c:	d10b      	bne.n	8007376 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 f937 	bl	80085d4 <USBD_CtlError>
      return USBD_FAIL;
 8007366:	2303      	movs	r3, #3
 8007368:	e006      	b.n	8007378 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f931 	bl	80085d4 <USBD_CtlError>
      return USBD_FAIL;
 8007372:	2303      	movs	r3, #3
 8007374:	e000      	b.n	8007378 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2265      	movs	r2, #101	; 0x65
 800738c:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 800738e:	4b03      	ldr	r3, [pc, #12]	; (800739c <USBD_Midi_GetCfgDesc+0x1c>)
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	200001d0 	.word	0x200001d0

080073a0 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	460b      	mov	r3, r1
 8007420:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007442:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f002 f910 	bl	800966e <USBD_LL_GetRxDataSize>
 800744e:	4602      	mov	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e00c      	b.n	8007478 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	440a      	add	r2, r1
 800746c:	2104      	movs	r1, #4
 800746e:	4610      	mov	r0, r2
 8007470:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	3304      	adds	r3, #4
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	429a      	cmp	r2, r3
 8007480:	d3ed      	bcc.n	800745e <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 8007482:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 8007484:	2340      	movs	r3, #64	; 0x40
 8007486:	2101      	movs	r1, #1
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f002 f8cf 	bl	800962c <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	220a      	movs	r2, #10
 80074a4:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 80074a6:	4b03      	ldr	r3, [pc, #12]	; (80074b4 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20000238 	.word	0x20000238

080074b8 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80074c2:	2303      	movs	r3, #3
 80074c4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b086      	sub	sp, #24
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	4613      	mov	r3, r2
 80074f2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e01f      	b.n	800753e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	79fa      	ldrb	r2, [r7, #7]
 8007530:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f001 ff24 	bl	8009380 <USBD_LL_Init>
 8007538:	4603      	mov	r3, r0
 800753a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800755a:	2303      	movs	r3, #3
 800755c:	e016      	b.n	800758c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00b      	beq.n	800758a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	f107 020e 	add.w	r2, r7, #14
 800757e:	4610      	mov	r0, r2
 8007580:	4798      	blx	r3
 8007582:	4602      	mov	r2, r0
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 ff3b 	bl	8009418 <USBD_LL_Start>
 80075a2:	4603      	mov	r3, r0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80075ce:	2303      	movs	r3, #3
 80075d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	4611      	mov	r1, r2
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760c:	2b00      	cmp	r3, #0
 800760e:	d007      	beq.n	8007620 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	4611      	mov	r1, r2
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 ff8f 	bl	8008560 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007650:	461a      	mov	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800765e:	f003 031f 	and.w	r3, r3, #31
 8007662:	2b02      	cmp	r3, #2
 8007664:	d01a      	beq.n	800769c <USBD_LL_SetupStage+0x72>
 8007666:	2b02      	cmp	r3, #2
 8007668:	d822      	bhi.n	80076b0 <USBD_LL_SetupStage+0x86>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <USBD_LL_SetupStage+0x4a>
 800766e:	2b01      	cmp	r3, #1
 8007670:	d00a      	beq.n	8007688 <USBD_LL_SetupStage+0x5e>
 8007672:	e01d      	b.n	80076b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fa61 	bl	8007b44 <USBD_StdDevReq>
 8007682:	4603      	mov	r3, r0
 8007684:	73fb      	strb	r3, [r7, #15]
      break;
 8007686:	e020      	b.n	80076ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fac5 	bl	8007c20 <USBD_StdItfReq>
 8007696:	4603      	mov	r3, r0
 8007698:	73fb      	strb	r3, [r7, #15]
      break;
 800769a:	e016      	b.n	80076ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fb04 	bl	8007cb2 <USBD_StdEPReq>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73fb      	strb	r3, [r7, #15]
      break;
 80076ae:	e00c      	b.n	80076ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 ff0a 	bl	80094d8 <USBD_LL_StallEP>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]
      break;
 80076c8:	bf00      	nop
  }

  return ret;
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	460b      	mov	r3, r1
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d138      	bne.n	800775a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80076ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d14a      	bne.n	8007790 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	429a      	cmp	r2, r3
 8007704:	d913      	bls.n	800772e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	4293      	cmp	r3, r2
 800771e:	bf28      	it	cs
 8007720:	4613      	movcs	r3, r2
 8007722:	461a      	mov	r2, r3
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fff1 	bl	800870e <USBD_CtlContinueRx>
 800772c:	e030      	b.n	8007790 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b03      	cmp	r3, #3
 8007738:	d10b      	bne.n	8007752 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 ffec 	bl	8008730 <USBD_CtlSendStatus>
 8007758:	e01a      	b.n	8007790 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b03      	cmp	r3, #3
 8007764:	d114      	bne.n	8007790 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00e      	beq.n	8007790 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	7afa      	ldrb	r2, [r7, #11]
 800777c:	4611      	mov	r1, r2
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	4798      	blx	r3
 8007782:	4603      	mov	r3, r0
 8007784:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007786:	7dfb      	ldrb	r3, [r7, #23]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	e000      	b.n	8007792 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b086      	sub	sp, #24
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	460b      	mov	r3, r1
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d16b      	bne.n	8007886 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3314      	adds	r3, #20
 80077b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d156      	bne.n	800786c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d914      	bls.n	80077f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	1ad2      	subs	r2, r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	461a      	mov	r2, r3
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 ff83 	bl	80086ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077e6:	2300      	movs	r3, #0
 80077e8:	2200      	movs	r2, #0
 80077ea:	2100      	movs	r1, #0
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f001 ff1d 	bl	800962c <USBD_LL_PrepareReceive>
 80077f2:	e03b      	b.n	800786c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d11c      	bne.n	800783a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007808:	429a      	cmp	r2, r3
 800780a:	d316      	bcc.n	800783a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007816:	429a      	cmp	r2, r3
 8007818:	d20f      	bcs.n	800783a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800781a:	2200      	movs	r2, #0
 800781c:	2100      	movs	r1, #0
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 ff64 	bl	80086ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800782c:	2300      	movs	r3, #0
 800782e:	2200      	movs	r2, #0
 8007830:	2100      	movs	r1, #0
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f001 fefa 	bl	800962c <USBD_LL_PrepareReceive>
 8007838:	e018      	b.n	800786c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b03      	cmp	r3, #3
 8007844:	d10b      	bne.n	800785e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d005      	beq.n	800785e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800785e:	2180      	movs	r1, #128	; 0x80
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f001 fe39 	bl	80094d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 ff75 	bl	8008756 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007872:	2b01      	cmp	r3, #1
 8007874:	d122      	bne.n	80078bc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7ff fe98 	bl	80075ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007884:	e01a      	b.n	80078bc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b03      	cmp	r3, #3
 8007890:	d114      	bne.n	80078bc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00e      	beq.n	80078bc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	7afa      	ldrb	r2, [r7, #11]
 80078a8:	4611      	mov	r1, r2
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	4798      	blx	r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	e000      	b.n	80078be <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e02f      	b.n	800795a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00f      	beq.n	8007924 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d009      	beq.n	8007924 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6852      	ldr	r2, [r2, #4]
 800791c:	b2d2      	uxtb	r2, r2
 800791e:	4611      	mov	r1, r2
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007924:	2340      	movs	r3, #64	; 0x40
 8007926:	2200      	movs	r2, #0
 8007928:	2100      	movs	r1, #0
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 fd8f 	bl	800944e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2240      	movs	r2, #64	; 0x40
 800793c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007940:	2340      	movs	r3, #64	; 0x40
 8007942:	2200      	movs	r2, #0
 8007944:	2180      	movs	r1, #128	; 0x80
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 fd81 	bl	800944e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2240      	movs	r2, #64	; 0x40
 8007956:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	78fa      	ldrb	r2, [r7, #3]
 8007972:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007990:	b2da      	uxtb	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2204      	movs	r2, #4
 800799c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d106      	bne.n	80079d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e012      	b.n	8007a1a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d10b      	bne.n	8007a18 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e014      	b.n	8007a66 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d10d      	bne.n	8007a64 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d007      	beq.n	8007a64 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	78fa      	ldrb	r2, [r7, #3]
 8007a5e:	4611      	mov	r1, r2
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b082      	sub	sp, #8
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e014      	b.n	8007ab2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d10d      	bne.n	8007ab0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d007      	beq.n	8007ab0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	78fa      	ldrb	r2, [r7, #3]
 8007aaa:	4611      	mov	r1, r2
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d009      	beq.n	8007afe <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6852      	ldr	r2, [r2, #4]
 8007af6:	b2d2      	uxtb	r2, r2
 8007af8:	4611      	mov	r1, r2
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
  }

  return USBD_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b26:	8a3b      	ldrh	r3, [r7, #16]
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	b21a      	sxth	r2, r3
 8007b2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	b21b      	sxth	r3, r3
 8007b34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b36:	89fb      	ldrh	r3, [r7, #14]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	371c      	adds	r7, #28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d005      	beq.n	8007b6a <USBD_StdDevReq+0x26>
 8007b5e:	2b40      	cmp	r3, #64	; 0x40
 8007b60:	d853      	bhi.n	8007c0a <USBD_StdDevReq+0xc6>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00b      	beq.n	8007b7e <USBD_StdDevReq+0x3a>
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	d14f      	bne.n	8007c0a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4798      	blx	r3
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b7c:	e04a      	b.n	8007c14 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	785b      	ldrb	r3, [r3, #1]
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d83b      	bhi.n	8007bfe <USBD_StdDevReq+0xba>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <USBD_StdDevReq+0x48>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007be1 	.word	0x08007be1
 8007b90:	08007bf5 	.word	0x08007bf5
 8007b94:	08007bff 	.word	0x08007bff
 8007b98:	08007beb 	.word	0x08007beb
 8007b9c:	08007bff 	.word	0x08007bff
 8007ba0:	08007bbf 	.word	0x08007bbf
 8007ba4:	08007bb5 	.word	0x08007bb5
 8007ba8:	08007bff 	.word	0x08007bff
 8007bac:	08007bd7 	.word	0x08007bd7
 8007bb0:	08007bc9 	.word	0x08007bc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f9de 	bl	8007f78 <USBD_GetDescriptor>
          break;
 8007bbc:	e024      	b.n	8007c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fb43 	bl	800824c <USBD_SetAddress>
          break;
 8007bc6:	e01f      	b.n	8007c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fb82 	bl	80082d4 <USBD_SetConfig>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]
          break;
 8007bd4:	e018      	b.n	8007c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fc21 	bl	8008420 <USBD_GetConfig>
          break;
 8007bde:	e013      	b.n	8007c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fc52 	bl	800848c <USBD_GetStatus>
          break;
 8007be8:	e00e      	b.n	8007c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fc81 	bl	80084f4 <USBD_SetFeature>
          break;
 8007bf2:	e009      	b.n	8007c08 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fc90 	bl	800851c <USBD_ClrFeature>
          break;
 8007bfc:	e004      	b.n	8007c08 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fce7 	bl	80085d4 <USBD_CtlError>
          break;
 8007c06:	bf00      	nop
      }
      break;
 8007c08:	e004      	b.n	8007c14 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fce1 	bl	80085d4 <USBD_CtlError>
      break;
 8007c12:	bf00      	nop
  }

  return ret;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop

08007c20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	d005      	beq.n	8007c46 <USBD_StdItfReq+0x26>
 8007c3a:	2b40      	cmp	r3, #64	; 0x40
 8007c3c:	d82f      	bhi.n	8007c9e <USBD_StdItfReq+0x7e>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <USBD_StdItfReq+0x26>
 8007c42:	2b20      	cmp	r3, #32
 8007c44:	d12b      	bne.n	8007c9e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d81d      	bhi.n	8007c90 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	889b      	ldrh	r3, [r3, #4]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d813      	bhi.n	8007c86 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	4798      	blx	r3
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	88db      	ldrh	r3, [r3, #6]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d110      	bne.n	8007c9a <USBD_StdItfReq+0x7a>
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10d      	bne.n	8007c9a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fd56 	bl	8008730 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c84:	e009      	b.n	8007c9a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fca3 	bl	80085d4 <USBD_CtlError>
          break;
 8007c8e:	e004      	b.n	8007c9a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fc9e 	bl	80085d4 <USBD_CtlError>
          break;
 8007c98:	e000      	b.n	8007c9c <USBD_StdItfReq+0x7c>
          break;
 8007c9a:	bf00      	nop
      }
      break;
 8007c9c:	e004      	b.n	8007ca8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fc97 	bl	80085d4 <USBD_CtlError>
      break;
 8007ca6:	bf00      	nop
  }

  return ret;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	889b      	ldrh	r3, [r3, #4]
 8007cc4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d007      	beq.n	8007ce2 <USBD_StdEPReq+0x30>
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	f200 8145 	bhi.w	8007f62 <USBD_StdEPReq+0x2b0>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00c      	beq.n	8007cf6 <USBD_StdEPReq+0x44>
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	f040 8140 	bne.w	8007f62 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf4:	e13a      	b.n	8007f6c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	785b      	ldrb	r3, [r3, #1]
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d007      	beq.n	8007d0e <USBD_StdEPReq+0x5c>
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	f300 8129 	bgt.w	8007f56 <USBD_StdEPReq+0x2a4>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d07f      	beq.n	8007e08 <USBD_StdEPReq+0x156>
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d03c      	beq.n	8007d86 <USBD_StdEPReq+0xd4>
 8007d0c:	e123      	b.n	8007f56 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d002      	beq.n	8007d20 <USBD_StdEPReq+0x6e>
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d016      	beq.n	8007d4c <USBD_StdEPReq+0x9a>
 8007d1e:	e02c      	b.n	8007d7a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00d      	beq.n	8007d42 <USBD_StdEPReq+0x90>
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	2b80      	cmp	r3, #128	; 0x80
 8007d2a:	d00a      	beq.n	8007d42 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 fbd1 	bl	80094d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d36:	2180      	movs	r1, #128	; 0x80
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 fbcd 	bl	80094d8 <USBD_LL_StallEP>
 8007d3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d40:	e020      	b.n	8007d84 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fc45 	bl	80085d4 <USBD_CtlError>
              break;
 8007d4a:	e01b      	b.n	8007d84 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	885b      	ldrh	r3, [r3, #2]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10e      	bne.n	8007d72 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <USBD_StdEPReq+0xc0>
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b80      	cmp	r3, #128	; 0x80
 8007d5e:	d008      	beq.n	8007d72 <USBD_StdEPReq+0xc0>
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	88db      	ldrh	r3, [r3, #6]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d104      	bne.n	8007d72 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 fbb3 	bl	80094d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fcdc 	bl	8008730 <USBD_CtlSendStatus>

              break;
 8007d78:	e004      	b.n	8007d84 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fc29 	bl	80085d4 <USBD_CtlError>
              break;
 8007d82:	bf00      	nop
          }
          break;
 8007d84:	e0ec      	b.n	8007f60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d002      	beq.n	8007d98 <USBD_StdEPReq+0xe6>
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d016      	beq.n	8007dc4 <USBD_StdEPReq+0x112>
 8007d96:	e030      	b.n	8007dfa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d98:	7bbb      	ldrb	r3, [r7, #14]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00d      	beq.n	8007dba <USBD_StdEPReq+0x108>
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b80      	cmp	r3, #128	; 0x80
 8007da2:	d00a      	beq.n	8007dba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 fb95 	bl	80094d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dae:	2180      	movs	r1, #128	; 0x80
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 fb91 	bl	80094d8 <USBD_LL_StallEP>
 8007db6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007db8:	e025      	b.n	8007e06 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc09 	bl	80085d4 <USBD_CtlError>
              break;
 8007dc2:	e020      	b.n	8007e06 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	885b      	ldrh	r3, [r3, #2]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11b      	bne.n	8007e04 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d004      	beq.n	8007de0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 fb9b 	bl	8009516 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fca5 	bl	8008730 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	4798      	blx	r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007df8:	e004      	b.n	8007e04 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fbe9 	bl	80085d4 <USBD_CtlError>
              break;
 8007e02:	e000      	b.n	8007e06 <USBD_StdEPReq+0x154>
              break;
 8007e04:	bf00      	nop
          }
          break;
 8007e06:	e0ab      	b.n	8007f60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d002      	beq.n	8007e1a <USBD_StdEPReq+0x168>
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d032      	beq.n	8007e7e <USBD_StdEPReq+0x1cc>
 8007e18:	e097      	b.n	8007f4a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d007      	beq.n	8007e30 <USBD_StdEPReq+0x17e>
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	2b80      	cmp	r3, #128	; 0x80
 8007e24:	d004      	beq.n	8007e30 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fbd3 	bl	80085d4 <USBD_CtlError>
                break;
 8007e2e:	e091      	b.n	8007f54 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	da0b      	bge.n	8007e50 <USBD_StdEPReq+0x19e>
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e3e:	4613      	mov	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	3310      	adds	r3, #16
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	e00b      	b.n	8007e68 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	4413      	add	r3, r2
 8007e66:	3304      	adds	r3, #4
 8007e68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2202      	movs	r2, #2
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fc1d 	bl	80086b6 <USBD_CtlSendData>
              break;
 8007e7c:	e06a      	b.n	8007f54 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da11      	bge.n	8007eaa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	f003 020f 	and.w	r2, r3, #15
 8007e8c:	6879      	ldr	r1, [r7, #4]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	440b      	add	r3, r1
 8007e98:	3324      	adds	r3, #36	; 0x24
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d117      	bne.n	8007ed0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fb96 	bl	80085d4 <USBD_CtlError>
                  break;
 8007ea8:	e054      	b.n	8007f54 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	f003 020f 	and.w	r2, r3, #15
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fb83 	bl	80085d4 <USBD_CtlError>
                  break;
 8007ece:	e041      	b.n	8007f54 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	da0b      	bge.n	8007ef0 <USBD_StdEPReq+0x23e>
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	3310      	adds	r3, #16
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	4413      	add	r3, r2
 8007eec:	3304      	adds	r3, #4
 8007eee:	e00b      	b.n	8007f08 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	4413      	add	r3, r2
 8007f06:	3304      	adds	r3, #4
 8007f08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <USBD_StdEPReq+0x264>
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	2b80      	cmp	r3, #128	; 0x80
 8007f14:	d103      	bne.n	8007f1e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	e00e      	b.n	8007f3c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 fb16 	bl	8009554 <USBD_LL_IsStallEP>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2201      	movs	r2, #1
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e002      	b.n	8007f3c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fbb7 	bl	80086b6 <USBD_CtlSendData>
              break;
 8007f48:	e004      	b.n	8007f54 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fb41 	bl	80085d4 <USBD_CtlError>
              break;
 8007f52:	bf00      	nop
          }
          break;
 8007f54:	e004      	b.n	8007f60 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fb3b 	bl	80085d4 <USBD_CtlError>
          break;
 8007f5e:	bf00      	nop
      }
      break;
 8007f60:	e004      	b.n	8007f6c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fb35 	bl	80085d4 <USBD_CtlError>
      break;
 8007f6a:	bf00      	nop
  }

  return ret;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	885b      	ldrh	r3, [r3, #2]
 8007f92:	0a1b      	lsrs	r3, r3, #8
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	3b01      	subs	r3, #1
 8007f98:	2b06      	cmp	r3, #6
 8007f9a:	f200 8128 	bhi.w	80081ee <USBD_GetDescriptor+0x276>
 8007f9e:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <USBD_GetDescriptor+0x2c>)
 8007fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa4:	08007fc1 	.word	0x08007fc1
 8007fa8:	08007fd9 	.word	0x08007fd9
 8007fac:	08008019 	.word	0x08008019
 8007fb0:	080081ef 	.word	0x080081ef
 8007fb4:	080081ef 	.word	0x080081ef
 8007fb8:	0800818f 	.word	0x0800818f
 8007fbc:	080081bb 	.word	0x080081bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	7c12      	ldrb	r2, [r2, #16]
 8007fcc:	f107 0108 	add.w	r1, r7, #8
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4798      	blx	r3
 8007fd4:	60f8      	str	r0, [r7, #12]
      break;
 8007fd6:	e112      	b.n	80081fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	7c1b      	ldrb	r3, [r3, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10d      	bne.n	8007ffc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe8:	f107 0208 	add.w	r2, r7, #8
 8007fec:	4610      	mov	r0, r2
 8007fee:	4798      	blx	r3
 8007ff0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ffa:	e100      	b.n	80081fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008004:	f107 0208 	add.w	r2, r7, #8
 8008008:	4610      	mov	r0, r2
 800800a:	4798      	blx	r3
 800800c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3301      	adds	r3, #1
 8008012:	2202      	movs	r2, #2
 8008014:	701a      	strb	r2, [r3, #0]
      break;
 8008016:	e0f2      	b.n	80081fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	885b      	ldrh	r3, [r3, #2]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b05      	cmp	r3, #5
 8008020:	f200 80ac 	bhi.w	800817c <USBD_GetDescriptor+0x204>
 8008024:	a201      	add	r2, pc, #4	; (adr r2, 800802c <USBD_GetDescriptor+0xb4>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	08008045 	.word	0x08008045
 8008030:	08008079 	.word	0x08008079
 8008034:	080080ad 	.word	0x080080ad
 8008038:	080080e1 	.word	0x080080e1
 800803c:	08008115 	.word	0x08008115
 8008040:	08008149 	.word	0x08008149
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	7c12      	ldrb	r2, [r2, #16]
 800805c:	f107 0108 	add.w	r1, r7, #8
 8008060:	4610      	mov	r0, r2
 8008062:	4798      	blx	r3
 8008064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008066:	e091      	b.n	800818c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fab2 	bl	80085d4 <USBD_CtlError>
            err++;
 8008070:	7afb      	ldrb	r3, [r7, #11]
 8008072:	3301      	adds	r3, #1
 8008074:	72fb      	strb	r3, [r7, #11]
          break;
 8008076:	e089      	b.n	800818c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	7c12      	ldrb	r2, [r2, #16]
 8008090:	f107 0108 	add.w	r1, r7, #8
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800809a:	e077      	b.n	800818c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fa98 	bl	80085d4 <USBD_CtlError>
            err++;
 80080a4:	7afb      	ldrb	r3, [r7, #11]
 80080a6:	3301      	adds	r3, #1
 80080a8:	72fb      	strb	r3, [r7, #11]
          break;
 80080aa:	e06f      	b.n	800818c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7c12      	ldrb	r2, [r2, #16]
 80080c4:	f107 0108 	add.w	r1, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ce:	e05d      	b.n	800818c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa7e 	bl	80085d4 <USBD_CtlError>
            err++;
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	3301      	adds	r3, #1
 80080dc:	72fb      	strb	r3, [r7, #11]
          break;
 80080de:	e055      	b.n	800818c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	7c12      	ldrb	r2, [r2, #16]
 80080f8:	f107 0108 	add.w	r1, r7, #8
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008102:	e043      	b.n	800818c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa64 	bl	80085d4 <USBD_CtlError>
            err++;
 800810c:	7afb      	ldrb	r3, [r7, #11]
 800810e:	3301      	adds	r3, #1
 8008110:	72fb      	strb	r3, [r7, #11]
          break;
 8008112:	e03b      	b.n	800818c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	7c12      	ldrb	r2, [r2, #16]
 800812c:	f107 0108 	add.w	r1, r7, #8
 8008130:	4610      	mov	r0, r2
 8008132:	4798      	blx	r3
 8008134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008136:	e029      	b.n	800818c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa4a 	bl	80085d4 <USBD_CtlError>
            err++;
 8008140:	7afb      	ldrb	r3, [r7, #11]
 8008142:	3301      	adds	r3, #1
 8008144:	72fb      	strb	r3, [r7, #11]
          break;
 8008146:	e021      	b.n	800818c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	f107 0108 	add.w	r1, r7, #8
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816a:	e00f      	b.n	800818c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fa30 	bl	80085d4 <USBD_CtlError>
            err++;
 8008174:	7afb      	ldrb	r3, [r7, #11]
 8008176:	3301      	adds	r3, #1
 8008178:	72fb      	strb	r3, [r7, #11]
          break;
 800817a:	e007      	b.n	800818c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa28 	bl	80085d4 <USBD_CtlError>
          err++;
 8008184:	7afb      	ldrb	r3, [r7, #11]
 8008186:	3301      	adds	r3, #1
 8008188:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800818a:	bf00      	nop
      }
      break;
 800818c:	e037      	b.n	80081fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	7c1b      	ldrb	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819e:	f107 0208 	add.w	r2, r7, #8
 80081a2:	4610      	mov	r0, r2
 80081a4:	4798      	blx	r3
 80081a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081a8:	e029      	b.n	80081fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fa11 	bl	80085d4 <USBD_CtlError>
        err++;
 80081b2:	7afb      	ldrb	r3, [r7, #11]
 80081b4:	3301      	adds	r3, #1
 80081b6:	72fb      	strb	r3, [r7, #11]
      break;
 80081b8:	e021      	b.n	80081fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	7c1b      	ldrb	r3, [r3, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10d      	bne.n	80081de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	f107 0208 	add.w	r2, r7, #8
 80081ce:	4610      	mov	r0, r2
 80081d0:	4798      	blx	r3
 80081d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	2207      	movs	r2, #7
 80081da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081dc:	e00f      	b.n	80081fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f9f7 	bl	80085d4 <USBD_CtlError>
        err++;
 80081e6:	7afb      	ldrb	r3, [r7, #11]
 80081e8:	3301      	adds	r3, #1
 80081ea:	72fb      	strb	r3, [r7, #11]
      break;
 80081ec:	e007      	b.n	80081fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f9ef 	bl	80085d4 <USBD_CtlError>
      err++;
 80081f6:	7afb      	ldrb	r3, [r7, #11]
 80081f8:	3301      	adds	r3, #1
 80081fa:	72fb      	strb	r3, [r7, #11]
      break;
 80081fc:	bf00      	nop
  }

  if (err != 0U)
 80081fe:	7afb      	ldrb	r3, [r7, #11]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d11e      	bne.n	8008242 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	88db      	ldrh	r3, [r3, #6]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d016      	beq.n	800823a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800820c:	893b      	ldrh	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00e      	beq.n	8008230 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	88da      	ldrh	r2, [r3, #6]
 8008216:	893b      	ldrh	r3, [r7, #8]
 8008218:	4293      	cmp	r3, r2
 800821a:	bf28      	it	cs
 800821c:	4613      	movcs	r3, r2
 800821e:	b29b      	uxth	r3, r3
 8008220:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008222:	893b      	ldrh	r3, [r7, #8]
 8008224:	461a      	mov	r2, r3
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fa44 	bl	80086b6 <USBD_CtlSendData>
 800822e:	e009      	b.n	8008244 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f9ce 	bl	80085d4 <USBD_CtlError>
 8008238:	e004      	b.n	8008244 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa78 	bl	8008730 <USBD_CtlSendStatus>
 8008240:	e000      	b.n	8008244 <USBD_GetDescriptor+0x2cc>
    return;
 8008242:	bf00      	nop
  }
}
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop

0800824c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	889b      	ldrh	r3, [r3, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d131      	bne.n	80082c2 <USBD_SetAddress+0x76>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	88db      	ldrh	r3, [r3, #6]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d12d      	bne.n	80082c2 <USBD_SetAddress+0x76>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	885b      	ldrh	r3, [r3, #2]
 800826a:	2b7f      	cmp	r3, #127	; 0x7f
 800826c:	d829      	bhi.n	80082c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008278:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b03      	cmp	r3, #3
 8008284:	d104      	bne.n	8008290 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9a3 	bl	80085d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828e:	e01d      	b.n	80082cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	7bfa      	ldrb	r2, [r7, #15]
 8008294:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 f985 	bl	80095ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa44 	bl	8008730 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d004      	beq.n	80082b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b6:	e009      	b.n	80082cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c0:	e004      	b.n	80082cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f985 	bl	80085d4 <USBD_CtlError>
  }
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	885b      	ldrh	r3, [r3, #2]
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	4b4c      	ldr	r3, [pc, #304]	; (800841c <USBD_SetConfig+0x148>)
 80082ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80082ec:	4b4b      	ldr	r3, [pc, #300]	; (800841c <USBD_SetConfig+0x148>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d905      	bls.n	8008300 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f96c 	bl	80085d4 <USBD_CtlError>
    return USBD_FAIL;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e088      	b.n	8008412 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b02      	cmp	r3, #2
 800830a:	d002      	beq.n	8008312 <USBD_SetConfig+0x3e>
 800830c:	2b03      	cmp	r3, #3
 800830e:	d025      	beq.n	800835c <USBD_SetConfig+0x88>
 8008310:	e071      	b.n	80083f6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008312:	4b42      	ldr	r3, [pc, #264]	; (800841c <USBD_SetConfig+0x148>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01c      	beq.n	8008354 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800831a:	4b40      	ldr	r3, [pc, #256]	; (800841c <USBD_SetConfig+0x148>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008324:	4b3d      	ldr	r3, [pc, #244]	; (800841c <USBD_SetConfig+0x148>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7ff f949 	bl	80075c2 <USBD_SetClassConfig>
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d004      	beq.n	8008344 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f949 	bl	80085d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008342:	e065      	b.n	8008410 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f9f3 	bl	8008730 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2203      	movs	r2, #3
 800834e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008352:	e05d      	b.n	8008410 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f9eb 	bl	8008730 <USBD_CtlSendStatus>
      break;
 800835a:	e059      	b.n	8008410 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800835c:	4b2f      	ldr	r3, [pc, #188]	; (800841c <USBD_SetConfig+0x148>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d112      	bne.n	800838a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800836c:	4b2b      	ldr	r3, [pc, #172]	; (800841c <USBD_SetConfig+0x148>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008376:	4b29      	ldr	r3, [pc, #164]	; (800841c <USBD_SetConfig+0x148>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff f93c 	bl	80075fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f9d4 	bl	8008730 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008388:	e042      	b.n	8008410 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800838a:	4b24      	ldr	r3, [pc, #144]	; (800841c <USBD_SetConfig+0x148>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	429a      	cmp	r2, r3
 8008396:	d02a      	beq.n	80083ee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	b2db      	uxtb	r3, r3
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7ff f92a 	bl	80075fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083a6:	4b1d      	ldr	r3, [pc, #116]	; (800841c <USBD_SetConfig+0x148>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083b0:	4b1a      	ldr	r3, [pc, #104]	; (800841c <USBD_SetConfig+0x148>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff f903 	bl	80075c2 <USBD_SetClassConfig>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00f      	beq.n	80083e6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f903 	bl	80085d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff f90f 	bl	80075fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80083e4:	e014      	b.n	8008410 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f9a2 	bl	8008730 <USBD_CtlSendStatus>
      break;
 80083ec:	e010      	b.n	8008410 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f99e 	bl	8008730 <USBD_CtlSendStatus>
      break;
 80083f4:	e00c      	b.n	8008410 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f8eb 	bl	80085d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083fe:	4b07      	ldr	r3, [pc, #28]	; (800841c <USBD_SetConfig+0x148>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff f8f8 	bl	80075fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800840a:	2303      	movs	r3, #3
 800840c:	73fb      	strb	r3, [r7, #15]
      break;
 800840e:	bf00      	nop
  }

  return ret;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	2000043c 	.word	0x2000043c

08008420 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	88db      	ldrh	r3, [r3, #6]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d004      	beq.n	800843c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f8cd 	bl	80085d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800843a:	e023      	b.n	8008484 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b02      	cmp	r3, #2
 8008446:	dc02      	bgt.n	800844e <USBD_GetConfig+0x2e>
 8008448:	2b00      	cmp	r3, #0
 800844a:	dc03      	bgt.n	8008454 <USBD_GetConfig+0x34>
 800844c:	e015      	b.n	800847a <USBD_GetConfig+0x5a>
 800844e:	2b03      	cmp	r3, #3
 8008450:	d00b      	beq.n	800846a <USBD_GetConfig+0x4a>
 8008452:	e012      	b.n	800847a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3308      	adds	r3, #8
 800845e:	2201      	movs	r2, #1
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f927 	bl	80086b6 <USBD_CtlSendData>
        break;
 8008468:	e00c      	b.n	8008484 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3304      	adds	r3, #4
 800846e:	2201      	movs	r2, #1
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f91f 	bl	80086b6 <USBD_CtlSendData>
        break;
 8008478:	e004      	b.n	8008484 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f8a9 	bl	80085d4 <USBD_CtlError>
        break;
 8008482:	bf00      	nop
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800849c:	b2db      	uxtb	r3, r3
 800849e:	3b01      	subs	r3, #1
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d81e      	bhi.n	80084e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	88db      	ldrh	r3, [r3, #6]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d004      	beq.n	80084b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f890 	bl	80085d4 <USBD_CtlError>
        break;
 80084b4:	e01a      	b.n	80084ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f043 0202 	orr.w	r2, r3, #2
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	330c      	adds	r3, #12
 80084d6:	2202      	movs	r2, #2
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f8eb 	bl	80086b6 <USBD_CtlSendData>
      break;
 80084e0:	e004      	b.n	80084ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f875 	bl	80085d4 <USBD_CtlError>
      break;
 80084ea:	bf00      	nop
  }
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	885b      	ldrh	r3, [r3, #2]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d106      	bne.n	8008514 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f90e 	bl	8008730 <USBD_CtlSendStatus>
  }
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852c:	b2db      	uxtb	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	2b02      	cmp	r3, #2
 8008532:	d80b      	bhi.n	800854c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	885b      	ldrh	r3, [r3, #2]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d10c      	bne.n	8008556 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f8f3 	bl	8008730 <USBD_CtlSendStatus>
      }
      break;
 800854a:	e004      	b.n	8008556 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f840 	bl	80085d4 <USBD_CtlError>
      break;
 8008554:	e000      	b.n	8008558 <USBD_ClrFeature+0x3c>
      break;
 8008556:	bf00      	nop
  }
}
 8008558:	bf00      	nop
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	781a      	ldrb	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	781a      	ldrb	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3301      	adds	r3, #1
 8008588:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7ff fabc 	bl	8007b08 <SWAPBYTE>
 8008590:	4603      	mov	r3, r0
 8008592:	461a      	mov	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3301      	adds	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3301      	adds	r3, #1
 80085a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff faaf 	bl	8007b08 <SWAPBYTE>
 80085aa:	4603      	mov	r3, r0
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3301      	adds	r3, #1
 80085bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff faa2 	bl	8007b08 <SWAPBYTE>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	80da      	strh	r2, [r3, #6]
}
 80085cc:	bf00      	nop
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085de:	2180      	movs	r1, #128	; 0x80
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 ff79 	bl	80094d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085e6:	2100      	movs	r1, #0
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 ff75 	bl	80094d8 <USBD_LL_StallEP>
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b086      	sub	sp, #24
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d036      	beq.n	800867a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008610:	6938      	ldr	r0, [r7, #16]
 8008612:	f000 f836 	bl	8008682 <USBD_GetLen>
 8008616:	4603      	mov	r3, r0
 8008618:	3301      	adds	r3, #1
 800861a:	b29b      	uxth	r3, r3
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	4413      	add	r3, r2
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	7812      	ldrb	r2, [r2, #0]
 800862e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	3301      	adds	r3, #1
 8008634:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	4413      	add	r3, r2
 800863c:	2203      	movs	r2, #3
 800863e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	3301      	adds	r3, #1
 8008644:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008646:	e013      	b.n	8008670 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4413      	add	r3, r2
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	7812      	ldrb	r2, [r2, #0]
 8008652:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	3301      	adds	r3, #1
 8008658:	613b      	str	r3, [r7, #16]
    idx++;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	3301      	adds	r3, #1
 800865e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	4413      	add	r3, r2
 8008666:	2200      	movs	r2, #0
 8008668:	701a      	strb	r2, [r3, #0]
    idx++;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	3301      	adds	r3, #1
 800866e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e7      	bne.n	8008648 <USBD_GetString+0x52>
 8008678:	e000      	b.n	800867c <USBD_GetString+0x86>
    return;
 800867a:	bf00      	nop
  }
}
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008682:	b480      	push	{r7}
 8008684:	b085      	sub	sp, #20
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008692:	e005      	b.n	80086a0 <USBD_GetLen+0x1e>
  {
    len++;
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	3301      	adds	r3, #1
 8008698:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	3301      	adds	r3, #1
 800869e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1f5      	bne.n	8008694 <USBD_GetLen+0x12>
  }

  return len;
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b084      	sub	sp, #16
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2202      	movs	r2, #2
 80086c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	2100      	movs	r1, #0
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 ff84 	bl	80095ea <USBD_LL_Transmit>

  return USBD_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	2100      	movs	r1, #0
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 ff73 	bl	80095ea <USBD_LL_Transmit>

  return USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	2100      	movs	r1, #0
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 ff83 	bl	800962c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2204      	movs	r2, #4
 800873c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008740:	2300      	movs	r3, #0
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 ff4f 	bl	80095ea <USBD_LL_Transmit>

  return USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2205      	movs	r2, #5
 8008762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008766:	2300      	movs	r3, #0
 8008768:	2200      	movs	r2, #0
 800876a:	2100      	movs	r1, #0
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 ff5d 	bl	800962c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t i2c_addr, uint8_t command)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af04      	add	r7, sp, #16
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
 8008788:	4613      	mov	r3, r2
 800878a:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, 0x00, 1, &command, 1, 10);
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	b299      	uxth	r1, r3
 8008790:	230a      	movs	r3, #10
 8008792:	9302      	str	r3, [sp, #8]
 8008794:	2301      	movs	r3, #1
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	1cbb      	adds	r3, r7, #2
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	2301      	movs	r3, #1
 800879e:	2200      	movs	r2, #0
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7fa ff43 	bl	800362c <HAL_I2C_Mem_Write>
 80087a6:	4603      	mov	r3, r0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, uint8_t i2c_addr)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
    // Wait for the screen to boot
    HAL_Delay(100);
 80087bc:	2064      	movs	r0, #100	; 0x64
 80087be:	f7f9 f95d 	bl	8001a7c <HAL_Delay>
    int status = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xAE);   // Display off
 80087c6:	78fb      	ldrb	r3, [r7, #3]
 80087c8:	22ae      	movs	r2, #174	; 0xae
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff ffd5 	bl	800877c <ssd1306_WriteCommand>
 80087d2:	4603      	mov	r3, r0
 80087d4:	461a      	mov	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4413      	add	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x20);   // Set Memory Addressing Mode
 80087dc:	78fb      	ldrb	r3, [r7, #3]
 80087de:	2220      	movs	r2, #32
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff ffca 	bl	800877c <ssd1306_WriteCommand>
 80087e8:	4603      	mov	r3, r0
 80087ea:	461a      	mov	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80087f2:	78fb      	ldrb	r3, [r7, #3]
 80087f4:	2210      	movs	r2, #16
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff ffbf 	bl	800877c <ssd1306_WriteCommand>
 80087fe:	4603      	mov	r3, r0
 8008800:	461a      	mov	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4413      	add	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8008808:	78fb      	ldrb	r3, [r7, #3]
 800880a:	22b0      	movs	r2, #176	; 0xb0
 800880c:	4619      	mov	r1, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff ffb4 	bl	800877c <ssd1306_WriteCommand>
 8008814:	4603      	mov	r3, r0
 8008816:	461a      	mov	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4413      	add	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xC8);   // Set COM Output Scan Direction
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	22c8      	movs	r2, #200	; 0xc8
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff ffa9 	bl	800877c <ssd1306_WriteCommand>
 800882a:	4603      	mov	r3, r0
 800882c:	461a      	mov	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4413      	add	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x00);   // Set low column address
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	2200      	movs	r2, #0
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff ff9e 	bl	800877c <ssd1306_WriteCommand>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x10);   // Set high column address
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	2210      	movs	r2, #16
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ff93 	bl	800877c <ssd1306_WriteCommand>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x40);   // Set start line address
 8008860:	78fb      	ldrb	r3, [r7, #3]
 8008862:	2240      	movs	r2, #64	; 0x40
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff ff88 	bl	800877c <ssd1306_WriteCommand>
 800886c:	4603      	mov	r3, r0
 800886e:	461a      	mov	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4413      	add	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x81);   // set contrast control register
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	2281      	movs	r2, #129	; 0x81
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff ff7d 	bl	800877c <ssd1306_WriteCommand>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x40);
 800888c:	78fb      	ldrb	r3, [r7, #3]
 800888e:	2240      	movs	r2, #64	; 0x40
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7ff ff72 	bl	800877c <ssd1306_WriteCommand>
 8008898:	4603      	mov	r3, r0
 800889a:	461a      	mov	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA1);   // Set segment re-map 0 to 127
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	22a1      	movs	r2, #161	; 0xa1
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff ff67 	bl	800877c <ssd1306_WriteCommand>
 80088ae:	4603      	mov	r3, r0
 80088b0:	461a      	mov	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4413      	add	r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA6);   // Set normal display
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	22a6      	movs	r2, #166	; 0xa6
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7ff ff5c 	bl	800877c <ssd1306_WriteCommand>
 80088c4:	4603      	mov	r3, r0
 80088c6:	461a      	mov	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA8);   // Set multiplex ratio(1 to 64)
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	22a8      	movs	r2, #168	; 0xa8
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff ff51 	bl	800877c <ssd1306_WriteCommand>
 80088da:	4603      	mov	r3, r0
 80088dc:	461a      	mov	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4413      	add	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, SSD1306_HEIGHT - 1);
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	223f      	movs	r2, #63	; 0x3f
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff ff46 	bl	800877c <ssd1306_WriteCommand>
 80088f0:	4603      	mov	r3, r0
 80088f2:	461a      	mov	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80088fa:	78fb      	ldrb	r3, [r7, #3]
 80088fc:	22a4      	movs	r2, #164	; 0xa4
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff ff3b 	bl	800877c <ssd1306_WriteCommand>
 8008906:	4603      	mov	r3, r0
 8008908:	461a      	mov	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4413      	add	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xD3);   // Set display offset
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	22d3      	movs	r2, #211	; 0xd3
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff ff30 	bl	800877c <ssd1306_WriteCommand>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x00);   // No offset
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	2200      	movs	r2, #0
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff ff25 	bl	800877c <ssd1306_WriteCommand>
 8008932:	4603      	mov	r3, r0
 8008934:	461a      	mov	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4413      	add	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xD5);   // Set display clock divide ratio/oscillator frequency
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	22d5      	movs	r2, #213	; 0xd5
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff ff1a 	bl	800877c <ssd1306_WriteCommand>
 8008948:	4603      	mov	r3, r0
 800894a:	461a      	mov	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4413      	add	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xF0);   // Set divide ratio
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	22f0      	movs	r2, #240	; 0xf0
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff ff0f 	bl	800877c <ssd1306_WriteCommand>
 800895e:	4603      	mov	r3, r0
 8008960:	461a      	mov	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4413      	add	r3, r2
 8008966:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xD9);   // Set pre-charge period
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	22d9      	movs	r2, #217	; 0xd9
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff ff04 	bl	800877c <ssd1306_WriteCommand>
 8008974:	4603      	mov	r3, r0
 8008976:	461a      	mov	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x22);
 800897e:	78fb      	ldrb	r3, [r7, #3]
 8008980:	2222      	movs	r2, #34	; 0x22
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff fef9 	bl	800877c <ssd1306_WriteCommand>
 800898a:	4603      	mov	r3, r0
 800898c:	461a      	mov	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	4413      	add	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xDA);   // Set com pins hardware configuration
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	22da      	movs	r2, #218	; 0xda
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff feee 	bl	800877c <ssd1306_WriteCommand>
 80089a0:	4603      	mov	r3, r0
 80089a2:	461a      	mov	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4413      	add	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x12);   // Do not use COM left/right remap
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	2212      	movs	r2, #18
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff fee3 	bl	800877c <ssd1306_WriteCommand>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461a      	mov	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4413      	add	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xDB);   // Set vcomh
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	22db      	movs	r2, #219	; 0xdb
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff fed8 	bl	800877c <ssd1306_WriteCommand>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461a      	mov	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x20);   // 0x20,0.77xVcc
 80089d6:	78fb      	ldrb	r3, [r7, #3]
 80089d8:	2220      	movs	r2, #32
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fecd 	bl	800877c <ssd1306_WriteCommand>
 80089e2:	4603      	mov	r3, r0
 80089e4:	461a      	mov	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4413      	add	r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x8D);   // Set DC-DC enable
 80089ec:	78fb      	ldrb	r3, [r7, #3]
 80089ee:	228d      	movs	r2, #141	; 0x8d
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff fec2 	bl	800877c <ssd1306_WriteCommand>
 80089f8:	4603      	mov	r3, r0
 80089fa:	461a      	mov	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0x14);   //
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	2214      	movs	r2, #20
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff feb7 	bl	800877c <ssd1306_WriteCommand>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	461a      	mov	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4413      	add	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, i2c_addr, 0xAF);   // Turn on SSD1306 panel
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	22af      	movs	r2, #175	; 0xaf
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7ff feac 	bl	800877c <ssd1306_WriteCommand>
 8008a24:	4603      	mov	r3, r0
 8008a26:	461a      	mov	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <ssd1306_Init+0x288>
        return 1;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e011      	b.n	8008a5c <ssd1306_Init+0x2ac>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8008a38:	2000      	movs	r0, #0
 8008a3a:	f000 f815 	bl	8008a68 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c, i2c_addr);
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f834 	bl	8008ab0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8008a48:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <ssd1306_Init+0x2b4>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <ssd1306_Init+0x2b4>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8008a54:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <ssd1306_Init+0x2b4>)
 8008a56:	2201      	movs	r2, #1
 8008a58:	715a      	strb	r2, [r3, #5]

    return 0;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20000840 	.word	0x20000840

08008a68 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	e00d      	b.n	8008a94 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <ssd1306_Fill+0x1a>
 8008a7e:	2100      	movs	r1, #0
 8008a80:	e000      	b.n	8008a84 <ssd1306_Fill+0x1c>
 8008a82:	21ff      	movs	r1, #255	; 0xff
 8008a84:	4a09      	ldr	r2, [pc, #36]	; (8008aac <ssd1306_Fill+0x44>)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	460a      	mov	r2, r1
 8008a8c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3301      	adds	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a9a:	d3ed      	bcc.n	8008a78 <ssd1306_Fill+0x10>
    }
}
 8008a9c:	bf00      	nop
 8008a9e:	bf00      	nop
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	20000440 	.word	0x20000440

08008ab0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c, uint8_t i2c_addr)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af04      	add	r7, sp, #16
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
 8008ac0:	e026      	b.n	8008b10 <ssd1306_UpdateScreen+0x60>
        ssd1306_WriteCommand(hi2c, i2c_addr, 0xB0 + i);
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	3b50      	subs	r3, #80	; 0x50
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7ff fe55 	bl	800877c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, i2c_addr, 0x00);
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7ff fe4f 	bl	800877c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, i2c_addr, 0x10);
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	2210      	movs	r2, #16
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff fe49 	bl	800877c <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, i2c_addr, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8008aea:	78fb      	ldrb	r3, [r7, #3]
 8008aec:	b299      	uxth	r1, r3
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	01db      	lsls	r3, r3, #7
 8008af2:	4a0b      	ldr	r2, [pc, #44]	; (8008b20 <ssd1306_UpdateScreen+0x70>)
 8008af4:	4413      	add	r3, r2
 8008af6:	2264      	movs	r2, #100	; 0x64
 8008af8:	9202      	str	r2, [sp, #8]
 8008afa:	2280      	movs	r2, #128	; 0x80
 8008afc:	9201      	str	r2, [sp, #4]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	2301      	movs	r3, #1
 8008b02:	2240      	movs	r2, #64	; 0x40
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7fa fd91 	bl	800362c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	73fb      	strb	r3, [r7, #15]
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	2b07      	cmp	r3, #7
 8008b14:	d9d5      	bls.n	8008ac2 <ssd1306_UpdateScreen+0x12>
    }
}
 8008b16:	bf00      	nop
 8008b18:	bf00      	nop
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000440 	.word	0x20000440

08008b24 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	71fb      	strb	r3, [r7, #7]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	71bb      	strb	r3, [r7, #6]
 8008b32:	4613      	mov	r3, r2
 8008b34:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8008b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	db48      	blt.n	8008bd0 <ssd1306_DrawPixel+0xac>
 8008b3e:	79bb      	ldrb	r3, [r7, #6]
 8008b40:	2b3f      	cmp	r3, #63	; 0x3f
 8008b42:	d845      	bhi.n	8008bd0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8008b44:	4b25      	ldr	r3, [pc, #148]	; (8008bdc <ssd1306_DrawPixel+0xb8>)
 8008b46:	791b      	ldrb	r3, [r3, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d006      	beq.n	8008b5a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8008b4c:	797b      	ldrb	r3, [r7, #5]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	bf0c      	ite	eq
 8008b52:	2301      	moveq	r3, #1
 8008b54:	2300      	movne	r3, #0
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8008b5a:	797b      	ldrb	r3, [r7, #5]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d11a      	bne.n	8008b96 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008b60:	79fa      	ldrb	r2, [r7, #7]
 8008b62:	79bb      	ldrb	r3, [r7, #6]
 8008b64:	08db      	lsrs	r3, r3, #3
 8008b66:	b2d8      	uxtb	r0, r3
 8008b68:	4603      	mov	r3, r0
 8008b6a:	01db      	lsls	r3, r3, #7
 8008b6c:	4413      	add	r3, r2
 8008b6e:	4a1c      	ldr	r2, [pc, #112]	; (8008be0 <ssd1306_DrawPixel+0xbc>)
 8008b70:	5cd3      	ldrb	r3, [r2, r3]
 8008b72:	b25a      	sxtb	r2, r3
 8008b74:	79bb      	ldrb	r3, [r7, #6]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b80:	b25b      	sxtb	r3, r3
 8008b82:	4313      	orrs	r3, r2
 8008b84:	b259      	sxtb	r1, r3
 8008b86:	79fa      	ldrb	r2, [r7, #7]
 8008b88:	4603      	mov	r3, r0
 8008b8a:	01db      	lsls	r3, r3, #7
 8008b8c:	4413      	add	r3, r2
 8008b8e:	b2c9      	uxtb	r1, r1
 8008b90:	4a13      	ldr	r2, [pc, #76]	; (8008be0 <ssd1306_DrawPixel+0xbc>)
 8008b92:	54d1      	strb	r1, [r2, r3]
 8008b94:	e01d      	b.n	8008bd2 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008b96:	79fa      	ldrb	r2, [r7, #7]
 8008b98:	79bb      	ldrb	r3, [r7, #6]
 8008b9a:	08db      	lsrs	r3, r3, #3
 8008b9c:	b2d8      	uxtb	r0, r3
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	01db      	lsls	r3, r3, #7
 8008ba2:	4413      	add	r3, r2
 8008ba4:	4a0e      	ldr	r2, [pc, #56]	; (8008be0 <ssd1306_DrawPixel+0xbc>)
 8008ba6:	5cd3      	ldrb	r3, [r2, r3]
 8008ba8:	b25a      	sxtb	r2, r3
 8008baa:	79bb      	ldrb	r3, [r7, #6]
 8008bac:	f003 0307 	and.w	r3, r3, #7
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb6:	b25b      	sxtb	r3, r3
 8008bb8:	43db      	mvns	r3, r3
 8008bba:	b25b      	sxtb	r3, r3
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	b259      	sxtb	r1, r3
 8008bc0:	79fa      	ldrb	r2, [r7, #7]
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	01db      	lsls	r3, r3, #7
 8008bc6:	4413      	add	r3, r2
 8008bc8:	b2c9      	uxtb	r1, r1
 8008bca:	4a05      	ldr	r2, [pc, #20]	; (8008be0 <ssd1306_DrawPixel+0xbc>)
 8008bcc:	54d1      	strb	r1, [r2, r3]
 8008bce:	e000      	b.n	8008bd2 <ssd1306_DrawPixel+0xae>
        return;
 8008bd0:	bf00      	nop
    }
}
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	20000840 	.word	0x20000840
 8008be0:	20000440 	.word	0x20000440

08008be4 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8008be4:	b590      	push	{r4, r7, lr}
 8008be6:	b089      	sub	sp, #36	; 0x24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4604      	mov	r4, r0
 8008bec:	1d38      	adds	r0, r7, #4
 8008bee:	e880 0006 	stmia.w	r0, {r1, r2}
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	73fb      	strb	r3, [r7, #15]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8008bfc:	4b38      	ldr	r3, [pc, #224]	; (8008ce0 <ssd1306_WriteChar+0xfc>)
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	461a      	mov	r2, r3
 8008c02:	793b      	ldrb	r3, [r7, #4]
 8008c04:	4413      	add	r3, r2
 8008c06:	2b7f      	cmp	r3, #127	; 0x7f
 8008c08:	dc06      	bgt.n	8008c18 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8008c0a:	4b35      	ldr	r3, [pc, #212]	; (8008ce0 <ssd1306_WriteChar+0xfc>)
 8008c0c:	885b      	ldrh	r3, [r3, #2]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	797b      	ldrb	r3, [r7, #5]
 8008c12:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8008c14:	2b3f      	cmp	r3, #63	; 0x3f
 8008c16:	dd01      	ble.n	8008c1c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e05d      	b.n	8008cd8 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61fb      	str	r3, [r7, #28]
 8008c20:	e04c      	b.n	8008cbc <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	3b20      	subs	r3, #32
 8008c28:	7979      	ldrb	r1, [r7, #5]
 8008c2a:	fb01 f303 	mul.w	r3, r1, r3
 8008c2e:	4619      	mov	r1, r3
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	440b      	add	r3, r1
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	4413      	add	r3, r2
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	61bb      	str	r3, [r7, #24]
 8008c40:	e034      	b.n	8008cac <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d012      	beq.n	8008c78 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008c52:	4b23      	ldr	r3, [pc, #140]	; (8008ce0 <ssd1306_WriteChar+0xfc>)
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	4413      	add	r3, r2
 8008c5e:	b2d8      	uxtb	r0, r3
 8008c60:	4b1f      	ldr	r3, [pc, #124]	; (8008ce0 <ssd1306_WriteChar+0xfc>)
 8008c62:	885b      	ldrh	r3, [r3, #2]
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	7bba      	ldrb	r2, [r7, #14]
 8008c70:	4619      	mov	r1, r3
 8008c72:	f7ff ff57 	bl	8008b24 <ssd1306_DrawPixel>
 8008c76:	e016      	b.n	8008ca6 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008c78:	4b19      	ldr	r3, [pc, #100]	; (8008ce0 <ssd1306_WriteChar+0xfc>)
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	4413      	add	r3, r2
 8008c84:	b2d8      	uxtb	r0, r3
 8008c86:	4b16      	ldr	r3, [pc, #88]	; (8008ce0 <ssd1306_WriteChar+0xfc>)
 8008c88:	885b      	ldrh	r3, [r3, #2]
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	4413      	add	r3, r2
 8008c92:	b2d9      	uxtb	r1, r3
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bf0c      	ite	eq
 8008c9a:	2301      	moveq	r3, #1
 8008c9c:	2300      	movne	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	f7ff ff3f 	bl	8008b24 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	61bb      	str	r3, [r7, #24]
 8008cac:	793b      	ldrb	r3, [r7, #4]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d3c5      	bcc.n	8008c42 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	61fb      	str	r3, [r7, #28]
 8008cbc:	797b      	ldrb	r3, [r7, #5]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d3ad      	bcc.n	8008c22 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008cc6:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <ssd1306_WriteChar+0xfc>)
 8008cc8:	881a      	ldrh	r2, [r3, #0]
 8008cca:	793b      	ldrb	r3, [r7, #4]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	4413      	add	r3, r2
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	4b03      	ldr	r3, [pc, #12]	; (8008ce0 <ssd1306_WriteChar+0xfc>)
 8008cd4:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3724      	adds	r7, #36	; 0x24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd90      	pop	{r4, r7, pc}
 8008ce0:	20000840 	.word	0x20000840

08008ce4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	1d38      	adds	r0, r7, #4
 8008cee:	e880 0006 	stmia.w	r0, {r1, r2}
 8008cf2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8008cf4:	e012      	b.n	8008d1c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	7818      	ldrb	r0, [r3, #0]
 8008cfa:	78fb      	ldrb	r3, [r7, #3]
 8008cfc:	1d3a      	adds	r2, r7, #4
 8008cfe:	ca06      	ldmia	r2, {r1, r2}
 8008d00:	f7ff ff70 	bl	8008be4 <ssd1306_WriteChar>
 8008d04:	4603      	mov	r3, r0
 8008d06:	461a      	mov	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d002      	beq.n	8008d16 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	e008      	b.n	8008d28 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60fb      	str	r3, [r7, #12]
    while (*str)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e8      	bne.n	8008cf6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	781b      	ldrb	r3, [r3, #0]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	460a      	mov	r2, r1
 8008d3a:	71fb      	strb	r3, [r7, #7]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <ssd1306_SetCursor+0x2c>)
 8008d46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008d48:	79bb      	ldrb	r3, [r7, #6]
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	4b03      	ldr	r3, [pc, #12]	; (8008d5c <ssd1306_SetCursor+0x2c>)
 8008d4e:	805a      	strh	r2, [r3, #2]
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	20000840 	.word	0x20000840

08008d60 <MX_USB_DEVICE_Init>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d64:	2200      	movs	r2, #0
 8008d66:	4912      	ldr	r1, [pc, #72]	; (8008db0 <MX_USB_DEVICE_Init+0x50>)
 8008d68:	4812      	ldr	r0, [pc, #72]	; (8008db4 <MX_USB_DEVICE_Init+0x54>)
 8008d6a:	f7fe fbbc 	bl	80074e6 <USBD_Init>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d74:	f7f8 fbef 	bl	8001556 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK)
 8008d78:	490f      	ldr	r1, [pc, #60]	; (8008db8 <MX_USB_DEVICE_Init+0x58>)
 8008d7a:	480e      	ldr	r0, [pc, #56]	; (8008db4 <MX_USB_DEVICE_Init+0x54>)
 8008d7c:	f7fe fbe3 	bl	8007546 <USBD_RegisterClass>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d86:	f7f8 fbe6 	bl	8001556 <Error_Handler>
  }
  if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK)
 8008d8a:	490c      	ldr	r1, [pc, #48]	; (8008dbc <MX_USB_DEVICE_Init+0x5c>)
 8008d8c:	4809      	ldr	r0, [pc, #36]	; (8008db4 <MX_USB_DEVICE_Init+0x54>)
 8008d8e:	f7fe fb93 	bl	80074b8 <USBD_Midi_RegisterInterface>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d98:	f7f8 fbdd 	bl	8001556 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d9c:	4805      	ldr	r0, [pc, #20]	; (8008db4 <MX_USB_DEVICE_Init+0x54>)
 8008d9e:	f7fe fbf9 	bl	8007594 <USBD_Start>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008da8:	f7f8 fbd5 	bl	8001556 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008dac:	bf00      	nop
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000254 	.word	0x20000254
 8008db4:	20002608 	.word	0x20002608
 8008db8:	20000198 	.word	0x20000198
 8008dbc:	200002a4 	.word	0x200002a4

08008dc0 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t value, uint8_t cc) {
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	460a      	mov	r2, r1
 8008dca:	71fb      	strb	r3, [r7, #7]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	71bb      	strb	r3, [r7, #6]
		  uint8_t buffer[4];
		  const uint8_t usbFrame = (0 << 4) | 0x0B;
 8008dd0:	230b      	movs	r3, #11
 8008dd2:	73fb      	strb	r3, [r7, #15]
		  const uint8_t midiCommand = 0xB0 | 0x00;
 8008dd4:	23b0      	movs	r3, #176	; 0xb0
 8008dd6:	73bb      	strb	r3, [r7, #14]
		  const uint8_t controlChannel = cc;
 8008dd8:	79bb      	ldrb	r3, [r7, #6]
 8008dda:	737b      	strb	r3, [r7, #13]
		  //const uint8_t value = 30;
		  buffer[0] = usbFrame;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	723b      	strb	r3, [r7, #8]
		  buffer[1] = midiCommand;
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	727b      	strb	r3, [r7, #9]
		  buffer[2] = controlChannel;
 8008de4:	7b7b      	ldrb	r3, [r7, #13]
 8008de6:	72bb      	strb	r3, [r7, #10]
		  buffer[3] = value;
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	72fb      	strb	r3, [r7, #11]

		  switch(USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4))
 8008dec:	f107 0208 	add.w	r2, r7, #8
 8008df0:	2304      	movs	r3, #4
 8008df2:	2181      	movs	r1, #129	; 0x81
 8008df4:	4810      	ldr	r0, [pc, #64]	; (8008e38 <MX_USB_Send_Midi+0x78>)
 8008df6:	f000 fbf8 	bl	80095ea <USBD_LL_Transmit>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d00a      	beq.n	8008e16 <MX_USB_Send_Midi+0x56>
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	dc10      	bgt.n	8008e26 <MX_USB_Send_Midi+0x66>
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <MX_USB_Send_Midi+0x4e>
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d008      	beq.n	8008e1e <MX_USB_Send_Midi+0x5e>
 8008e0c:	e00b      	b.n	8008e26 <MX_USB_Send_Midi+0x66>
		  {
		  	  //FIXME use errorhandler!
		  	  case USBD_OK:
		  		  printf("ok\n");
 8008e0e:	480b      	ldr	r0, [pc, #44]	; (8008e3c <MX_USB_Send_Midi+0x7c>)
 8008e10:	f000 fd1a 	bl	8009848 <puts>
		  		  break;
 8008e14:	e00b      	b.n	8008e2e <MX_USB_Send_Midi+0x6e>
		  	  case USBD_FAIL:
		  		  printf("USB SEND FAIL\n");
 8008e16:	480a      	ldr	r0, [pc, #40]	; (8008e40 <MX_USB_Send_Midi+0x80>)
 8008e18:	f000 fd16 	bl	8009848 <puts>
		  		  break;
 8008e1c:	e007      	b.n	8008e2e <MX_USB_Send_Midi+0x6e>
		  	  case USBD_BUSY:
		  		  printf("USB SEND BUS\n");
 8008e1e:	4809      	ldr	r0, [pc, #36]	; (8008e44 <MX_USB_Send_Midi+0x84>)
 8008e20:	f000 fd12 	bl	8009848 <puts>
		  		  break;
 8008e24:	e003      	b.n	8008e2e <MX_USB_Send_Midi+0x6e>
		  	  default:
		  		  printf("USB SEND ERROR DEFAULT CASE\n");
 8008e26:	4808      	ldr	r0, [pc, #32]	; (8008e48 <MX_USB_Send_Midi+0x88>)
 8008e28:	f000 fd0e 	bl	8009848 <puts>
		  }
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20002608 	.word	0x20002608
 8008e3c:	0800a7e4 	.word	0x0800a7e4
 8008e40:	0800a7e8 	.word	0x0800a7e8
 8008e44:	0800a7f8 	.word	0x0800a7f8
 8008e48:	0800a808 	.word	0x0800a808

08008e4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	6039      	str	r1, [r7, #0]
 8008e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2212      	movs	r2, #18
 8008e5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e5e:	4b03      	ldr	r3, [pc, #12]	; (8008e6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	20000270 	.word	0x20000270

08008e70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	6039      	str	r1, [r7, #0]
 8008e7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2204      	movs	r2, #4
 8008e80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e82:	4b03      	ldr	r3, [pc, #12]	; (8008e90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	20000284 	.word	0x20000284

08008e94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	6039      	str	r1, [r7, #0]
 8008e9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d105      	bne.n	8008eb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	4907      	ldr	r1, [pc, #28]	; (8008ec8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008eaa:	4808      	ldr	r0, [pc, #32]	; (8008ecc <USBD_FS_ProductStrDescriptor+0x38>)
 8008eac:	f7ff fba3 	bl	80085f6 <USBD_GetString>
 8008eb0:	e004      	b.n	8008ebc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	4904      	ldr	r1, [pc, #16]	; (8008ec8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008eb6:	4805      	ldr	r0, [pc, #20]	; (8008ecc <USBD_FS_ProductStrDescriptor+0x38>)
 8008eb8:	f7ff fb9d 	bl	80085f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ebc:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	200028d8 	.word	0x200028d8
 8008ecc:	0800a824 	.word	0x0800a824

08008ed0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	6039      	str	r1, [r7, #0]
 8008eda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	4904      	ldr	r1, [pc, #16]	; (8008ef0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ee0:	4804      	ldr	r0, [pc, #16]	; (8008ef4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ee2:	f7ff fb88 	bl	80085f6 <USBD_GetString>
  return USBD_StrDesc;
 8008ee6:	4b02      	ldr	r3, [pc, #8]	; (8008ef0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	200028d8 	.word	0x200028d8
 8008ef4:	0800a838 	.word	0x0800a838

08008ef8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	6039      	str	r1, [r7, #0]
 8008f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	221a      	movs	r2, #26
 8008f08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f0a:	f000 f843 	bl	8008f94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f0e:	4b02      	ldr	r3, [pc, #8]	; (8008f18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20000288 	.word	0x20000288

08008f1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	4603      	mov	r3, r0
 8008f24:	6039      	str	r1, [r7, #0]
 8008f26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d105      	bne.n	8008f3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	4907      	ldr	r1, [pc, #28]	; (8008f50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f32:	4808      	ldr	r0, [pc, #32]	; (8008f54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f34:	f7ff fb5f 	bl	80085f6 <USBD_GetString>
 8008f38:	e004      	b.n	8008f44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	4904      	ldr	r1, [pc, #16]	; (8008f50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f3e:	4805      	ldr	r0, [pc, #20]	; (8008f54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f40:	f7ff fb59 	bl	80085f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f44:	4b02      	ldr	r3, [pc, #8]	; (8008f50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	200028d8 	.word	0x200028d8
 8008f54:	0800a84c 	.word	0x0800a84c

08008f58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	6039      	str	r1, [r7, #0]
 8008f62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d105      	bne.n	8008f76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	4907      	ldr	r1, [pc, #28]	; (8008f8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f6e:	4808      	ldr	r0, [pc, #32]	; (8008f90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f70:	f7ff fb41 	bl	80085f6 <USBD_GetString>
 8008f74:	e004      	b.n	8008f80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	4904      	ldr	r1, [pc, #16]	; (8008f8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f7a:	4805      	ldr	r0, [pc, #20]	; (8008f90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f7c:	f7ff fb3b 	bl	80085f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f80:	4b02      	ldr	r3, [pc, #8]	; (8008f8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	200028d8 	.word	0x200028d8
 8008f90:	0800a85c 	.word	0x0800a85c

08008f94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f9a:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <Get_SerialNum+0x44>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fa0:	4b0e      	ldr	r3, [pc, #56]	; (8008fdc <Get_SerialNum+0x48>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fa6:	4b0e      	ldr	r3, [pc, #56]	; (8008fe0 <Get_SerialNum+0x4c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d009      	beq.n	8008fce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fba:	2208      	movs	r2, #8
 8008fbc:	4909      	ldr	r1, [pc, #36]	; (8008fe4 <Get_SerialNum+0x50>)
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 f814 	bl	8008fec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fc4:	2204      	movs	r2, #4
 8008fc6:	4908      	ldr	r1, [pc, #32]	; (8008fe8 <Get_SerialNum+0x54>)
 8008fc8:	68b8      	ldr	r0, [r7, #8]
 8008fca:	f000 f80f 	bl	8008fec <IntToUnicode>
  }
}
 8008fce:	bf00      	nop
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	1fff7a10 	.word	0x1fff7a10
 8008fdc:	1fff7a14 	.word	0x1fff7a14
 8008fe0:	1fff7a18 	.word	0x1fff7a18
 8008fe4:	2000028a 	.word	0x2000028a
 8008fe8:	2000029a 	.word	0x2000029a

08008fec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ffe:	2300      	movs	r3, #0
 8009000:	75fb      	strb	r3, [r7, #23]
 8009002:	e027      	b.n	8009054 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	0f1b      	lsrs	r3, r3, #28
 8009008:	2b09      	cmp	r3, #9
 800900a:	d80b      	bhi.n	8009024 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	0f1b      	lsrs	r3, r3, #28
 8009010:	b2da      	uxtb	r2, r3
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	4619      	mov	r1, r3
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	440b      	add	r3, r1
 800901c:	3230      	adds	r2, #48	; 0x30
 800901e:	b2d2      	uxtb	r2, r2
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	e00a      	b.n	800903a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	0f1b      	lsrs	r3, r3, #28
 8009028:	b2da      	uxtb	r2, r3
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	005b      	lsls	r3, r3, #1
 800902e:	4619      	mov	r1, r3
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	440b      	add	r3, r1
 8009034:	3237      	adds	r2, #55	; 0x37
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009040:	7dfb      	ldrb	r3, [r7, #23]
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	3301      	adds	r3, #1
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	4413      	add	r3, r2
 800904a:	2200      	movs	r2, #0
 800904c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	3301      	adds	r3, #1
 8009052:	75fb      	strb	r3, [r7, #23]
 8009054:	7dfa      	ldrb	r2, [r7, #23]
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	429a      	cmp	r2, r3
 800905a:	d3d3      	bcc.n	8009004 <IntToUnicode+0x18>
  }
}
 800905c:	bf00      	nop
 800905e:	bf00      	nop
 8009060:	371c      	adds	r7, #28
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 800906a:	b480      	push	{r7}
 800906c:	b085      	sub	sp, #20
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	6039      	str	r1, [r7, #0]

	uint8_t chan = msg[1] & 0xf;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3301      	adds	r3, #1
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	f003 030f 	and.w	r3, r3, #15
 800907e:	73fb      	strb	r3, [r7, #15]
	uint8_t msgtype = msg[1] & 0xf0;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3301      	adds	r3, #1
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	f023 030f 	bic.w	r3, r3, #15
 800908a:	73bb      	strb	r3, [r7, #14]
	uint8_t b1 =  msg[2];
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	789b      	ldrb	r3, [r3, #2]
 8009090:	737b      	strb	r3, [r7, #13]
	uint8_t b2 =  msg[3];
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	78db      	ldrb	r3, [r3, #3]
 8009096:	733b      	strb	r3, [r7, #12]
	uint16_t b = ((b2 & 0x7f) << 7) | (b1 & 0x7f);
 8009098:	7b3b      	ldrb	r3, [r7, #12]
 800909a:	01db      	lsls	r3, r3, #7
 800909c:	b21b      	sxth	r3, r3
 800909e:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 80090a2:	b21a      	sxth	r2, r3
 80090a4:	7b7b      	ldrb	r3, [r7, #13]
 80090a6:	b21b      	sxth	r3, r3
 80090a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ac:	b21b      	sxth	r3, r3
 80090ae:	4313      	orrs	r3, r2
 80090b0:	b21b      	sxth	r3, r3
 80090b2:	817b      	strh	r3, [r7, #10]

	switch (msgtype) {
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	2be0      	cmp	r3, #224	; 0xe0
 80090b8:	d012      	beq.n	80090e0 <Midi_Receive+0x76>
 80090ba:	2be0      	cmp	r3, #224	; 0xe0
 80090bc:	dc12      	bgt.n	80090e4 <Midi_Receive+0x7a>
 80090be:	2bd0      	cmp	r3, #208	; 0xd0
 80090c0:	d012      	beq.n	80090e8 <Midi_Receive+0x7e>
 80090c2:	2bd0      	cmp	r3, #208	; 0xd0
 80090c4:	dc0e      	bgt.n	80090e4 <Midi_Receive+0x7a>
 80090c6:	2bc0      	cmp	r3, #192	; 0xc0
 80090c8:	d010      	beq.n	80090ec <Midi_Receive+0x82>
 80090ca:	2bc0      	cmp	r3, #192	; 0xc0
 80090cc:	dc0a      	bgt.n	80090e4 <Midi_Receive+0x7a>
 80090ce:	2bb0      	cmp	r3, #176	; 0xb0
 80090d0:	d00e      	beq.n	80090f0 <Midi_Receive+0x86>
 80090d2:	2bb0      	cmp	r3, #176	; 0xb0
 80090d4:	dc06      	bgt.n	80090e4 <Midi_Receive+0x7a>
 80090d6:	2b80      	cmp	r3, #128	; 0x80
 80090d8:	d00c      	beq.n	80090f4 <Midi_Receive+0x8a>
 80090da:	2b90      	cmp	r3, #144	; 0x90
 80090dc:	d00c      	beq.n	80090f8 <Midi_Receive+0x8e>
		break;
	case 0xE0:
//		fluid_synth_pitch_bend(synth, chan, b);
		break;
	default:
		break;
 80090de:	e001      	b.n	80090e4 <Midi_Receive+0x7a>
		break;
 80090e0:	bf00      	nop
 80090e2:	e00a      	b.n	80090fa <Midi_Receive+0x90>
		break;
 80090e4:	bf00      	nop
 80090e6:	e008      	b.n	80090fa <Midi_Receive+0x90>
		break;
 80090e8:	bf00      	nop
 80090ea:	e006      	b.n	80090fa <Midi_Receive+0x90>
		break;
 80090ec:	bf00      	nop
 80090ee:	e004      	b.n	80090fa <Midi_Receive+0x90>
		break;
 80090f0:	bf00      	nop
 80090f2:	e002      	b.n	80090fa <Midi_Receive+0x90>
		break;
 80090f4:	bf00      	nop
 80090f6:	e000      	b.n	80090fa <Midi_Receive+0x90>
		break;
 80090f8:	bf00      	nop
	}

	return 0;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08a      	sub	sp, #40	; 0x28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009110:	f107 0314 	add.w	r3, r7, #20
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	609a      	str	r2, [r3, #8]
 800911c:	60da      	str	r2, [r3, #12]
 800911e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009128:	d13a      	bne.n	80091a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]
 800912e:	4b1e      	ldr	r3, [pc, #120]	; (80091a8 <HAL_PCD_MspInit+0xa0>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009132:	4a1d      	ldr	r2, [pc, #116]	; (80091a8 <HAL_PCD_MspInit+0xa0>)
 8009134:	f043 0301 	orr.w	r3, r3, #1
 8009138:	6313      	str	r3, [r2, #48]	; 0x30
 800913a:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <HAL_PCD_MspInit+0xa0>)
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8009146:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800914a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800914c:	2302      	movs	r3, #2
 800914e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009150:	2300      	movs	r3, #0
 8009152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009154:	2300      	movs	r3, #0
 8009156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009158:	230a      	movs	r3, #10
 800915a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800915c:	f107 0314 	add.w	r3, r7, #20
 8009160:	4619      	mov	r1, r3
 8009162:	4812      	ldr	r0, [pc, #72]	; (80091ac <HAL_PCD_MspInit+0xa4>)
 8009164:	f7f9 fe9c 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009168:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <HAL_PCD_MspInit+0xa0>)
 800916a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916c:	4a0e      	ldr	r2, [pc, #56]	; (80091a8 <HAL_PCD_MspInit+0xa0>)
 800916e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009172:	6353      	str	r3, [r2, #52]	; 0x34
 8009174:	2300      	movs	r3, #0
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	4b0b      	ldr	r3, [pc, #44]	; (80091a8 <HAL_PCD_MspInit+0xa0>)
 800917a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917c:	4a0a      	ldr	r2, [pc, #40]	; (80091a8 <HAL_PCD_MspInit+0xa0>)
 800917e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009182:	6453      	str	r3, [r2, #68]	; 0x44
 8009184:	4b08      	ldr	r3, [pc, #32]	; (80091a8 <HAL_PCD_MspInit+0xa0>)
 8009186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800918c:	60fb      	str	r3, [r7, #12]
 800918e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009190:	2200      	movs	r2, #0
 8009192:	2100      	movs	r1, #0
 8009194:	2043      	movs	r0, #67	; 0x43
 8009196:	f7f9 fa6c 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800919a:	2043      	movs	r0, #67	; 0x43
 800919c:	f7f9 fa85 	bl	80026aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091a0:	bf00      	nop
 80091a2:	3728      	adds	r7, #40	; 0x28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	40023800 	.word	0x40023800
 80091ac:	40020000 	.word	0x40020000

080091b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f7fe fa2f 	bl	800762a <USBD_LL_SetupStage>
}
 80091cc:	bf00      	nop
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80091e6:	78fa      	ldrb	r2, [r7, #3]
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	4619      	mov	r1, r3
 80091fe:	f7fe fa69 	bl	80076d4 <USBD_LL_DataOutStage>
}
 8009202:	bf00      	nop
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	460b      	mov	r3, r1
 8009214:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800921c:	78fa      	ldrb	r2, [r7, #3]
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	4613      	mov	r3, r2
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	440b      	add	r3, r1
 800922a:	3348      	adds	r3, #72	; 0x48
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	78fb      	ldrb	r3, [r7, #3]
 8009230:	4619      	mov	r1, r3
 8009232:	f7fe fab2 	bl	800779a <USBD_LL_DataInStage>
}
 8009236:	bf00      	nop
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe fbc6 	bl	80079de <USBD_LL_SOF>
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009262:	2301      	movs	r3, #1
 8009264:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	2b02      	cmp	r3, #2
 800926c:	d001      	beq.n	8009272 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800926e:	f7f8 f972 	bl	8001556 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009278:	7bfa      	ldrb	r2, [r7, #15]
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fb70 	bl	8007962 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe fb1c 	bl	80078c6 <USBD_LL_Reset>
}
 800928e:	bf00      	nop
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe fb6b 	bl	8007982 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092be:	f043 0301 	orr.w	r3, r3, #1
 80092c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d005      	beq.n	80092d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092cc:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <HAL_PCD_SuspendCallback+0x48>)
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	4a03      	ldr	r2, [pc, #12]	; (80092e0 <HAL_PCD_SuspendCallback+0x48>)
 80092d2:	f043 0306 	orr.w	r3, r3, #6
 80092d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092d8:	bf00      	nop
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	e000ed00 	.word	0xe000ed00

080092e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe fb5b 	bl	80079ae <USBD_LL_Resume>
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009312:	78fa      	ldrb	r2, [r7, #3]
 8009314:	4611      	mov	r1, r2
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fba9 	bl	8007a6e <USBD_LL_IsoOUTIncomplete>
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe fb71 	bl	8007a22 <USBD_LL_IsoINIncomplete>
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fbaf 	bl	8007aba <USBD_LL_DevConnected>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fbac 	bl	8007ad0 <USBD_LL_DevDisconnected>
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d13c      	bne.n	800940a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009390:	4a20      	ldr	r2, [pc, #128]	; (8009414 <USBD_LL_Init+0x94>)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a1e      	ldr	r2, [pc, #120]	; (8009414 <USBD_LL_Init+0x94>)
 800939c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093a0:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <USBD_LL_Init+0x94>)
 80093a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093a8:	4b1a      	ldr	r3, [pc, #104]	; (8009414 <USBD_LL_Init+0x94>)
 80093aa:	2204      	movs	r2, #4
 80093ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093ae:	4b19      	ldr	r3, [pc, #100]	; (8009414 <USBD_LL_Init+0x94>)
 80093b0:	2202      	movs	r2, #2
 80093b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093b4:	4b17      	ldr	r3, [pc, #92]	; (8009414 <USBD_LL_Init+0x94>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093ba:	4b16      	ldr	r3, [pc, #88]	; (8009414 <USBD_LL_Init+0x94>)
 80093bc:	2202      	movs	r2, #2
 80093be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093c0:	4b14      	ldr	r3, [pc, #80]	; (8009414 <USBD_LL_Init+0x94>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093c6:	4b13      	ldr	r3, [pc, #76]	; (8009414 <USBD_LL_Init+0x94>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093cc:	4b11      	ldr	r3, [pc, #68]	; (8009414 <USBD_LL_Init+0x94>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <USBD_LL_Init+0x94>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80093d8:	4b0e      	ldr	r3, [pc, #56]	; (8009414 <USBD_LL_Init+0x94>)
 80093da:	2200      	movs	r2, #0
 80093dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80093de:	480d      	ldr	r0, [pc, #52]	; (8009414 <USBD_LL_Init+0x94>)
 80093e0:	f7fa fcbd 	bl	8003d5e <HAL_PCD_Init>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80093ea:	f7f8 f8b4 	bl	8001556 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80093ee:	2180      	movs	r1, #128	; 0x80
 80093f0:	4808      	ldr	r0, [pc, #32]	; (8009414 <USBD_LL_Init+0x94>)
 80093f2:	f7fb fe1a 	bl	800502a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80093f6:	2240      	movs	r2, #64	; 0x40
 80093f8:	2100      	movs	r1, #0
 80093fa:	4806      	ldr	r0, [pc, #24]	; (8009414 <USBD_LL_Init+0x94>)
 80093fc:	f7fb fdce 	bl	8004f9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009400:	2280      	movs	r2, #128	; 0x80
 8009402:	2101      	movs	r1, #1
 8009404:	4803      	ldr	r0, [pc, #12]	; (8009414 <USBD_LL_Init+0x94>)
 8009406:	f7fb fdc9 	bl	8004f9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	20002ad8 	.word	0x20002ad8

08009418 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800942e:	4618      	mov	r0, r3
 8009430:	f7fa fdb2 	bl	8003f98 <HAL_PCD_Start>
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f938 	bl	80096b0 <USBD_Get_USB_Status>
 8009440:	4603      	mov	r3, r0
 8009442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009444:	7bbb      	ldrb	r3, [r7, #14]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	4608      	mov	r0, r1
 8009458:	4611      	mov	r1, r2
 800945a:	461a      	mov	r2, r3
 800945c:	4603      	mov	r3, r0
 800945e:	70fb      	strb	r3, [r7, #3]
 8009460:	460b      	mov	r3, r1
 8009462:	70bb      	strb	r3, [r7, #2]
 8009464:	4613      	mov	r3, r2
 8009466:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009476:	78bb      	ldrb	r3, [r7, #2]
 8009478:	883a      	ldrh	r2, [r7, #0]
 800947a:	78f9      	ldrb	r1, [r7, #3]
 800947c:	f7fb f996 	bl	80047ac <HAL_PCD_EP_Open>
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f912 	bl	80096b0 <USBD_Get_USB_Status>
 800948c:	4603      	mov	r3, r0
 800948e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009490:	7bbb      	ldrb	r3, [r7, #14]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094b4:	78fa      	ldrb	r2, [r7, #3]
 80094b6:	4611      	mov	r1, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fb f9df 	bl	800487c <HAL_PCD_EP_Close>
 80094be:	4603      	mov	r3, r0
 80094c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 f8f3 	bl	80096b0 <USBD_Get_USB_Status>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094f2:	78fa      	ldrb	r2, [r7, #3]
 80094f4:	4611      	mov	r1, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fb fab7 	bl	8004a6a <HAL_PCD_EP_SetStall>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 f8d4 	bl	80096b0 <USBD_Get_USB_Status>
 8009508:	4603      	mov	r3, r0
 800950a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800950c:	7bbb      	ldrb	r3, [r7, #14]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	4611      	mov	r1, r2
 8009534:	4618      	mov	r0, r3
 8009536:	f7fb fafc 	bl	8004b32 <HAL_PCD_EP_ClrStall>
 800953a:	4603      	mov	r3, r0
 800953c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	4618      	mov	r0, r3
 8009542:	f000 f8b5 	bl	80096b0 <USBD_Get_USB_Status>
 8009546:	4603      	mov	r3, r0
 8009548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800954a:	7bbb      	ldrb	r3, [r7, #14]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009566:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800956c:	2b00      	cmp	r3, #0
 800956e:	da0b      	bge.n	8009588 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	4613      	mov	r3, r2
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	1a9b      	subs	r3, r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	333e      	adds	r3, #62	; 0x3e
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	e00b      	b.n	80095a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009588:	78fb      	ldrb	r3, [r7, #3]
 800958a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800958e:	68f9      	ldr	r1, [r7, #12]
 8009590:	4613      	mov	r3, r2
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800959e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fb f8c9 	bl	8004762 <HAL_PCD_SetAddress>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f86a 	bl	80096b0 <USBD_Get_USB_Status>
 80095dc:	4603      	mov	r3, r0
 80095de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
 80095f6:	460b      	mov	r3, r1
 80095f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009608:	7af9      	ldrb	r1, [r7, #11]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	f7fb f9e2 	bl	80049d6 <HAL_PCD_EP_Transmit>
 8009612:	4603      	mov	r3, r0
 8009614:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f849 	bl	80096b0 <USBD_Get_USB_Status>
 800961e:	4603      	mov	r3, r0
 8009620:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009622:	7dbb      	ldrb	r3, [r7, #22]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	607a      	str	r2, [r7, #4]
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	460b      	mov	r3, r1
 800963a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800964a:	7af9      	ldrb	r1, [r7, #11]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	f7fb f95e 	bl	8004910 <HAL_PCD_EP_Receive>
 8009654:	4603      	mov	r3, r0
 8009656:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f828 	bl	80096b0 <USBD_Get_USB_Status>
 8009660:	4603      	mov	r3, r0
 8009662:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009664:	7dbb      	ldrb	r3, [r7, #22]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	460b      	mov	r3, r1
 8009678:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009680:	78fa      	ldrb	r2, [r7, #3]
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f7fb f98e 	bl	80049a6 <HAL_PCD_EP_GetRxCount>
 800968a:	4603      	mov	r3, r0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800969c:	4b03      	ldr	r3, [pc, #12]	; (80096ac <USBD_static_malloc+0x18>)
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	20000848 	.word	0x20000848

080096b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d817      	bhi.n	80096f4 <USBD_Get_USB_Status+0x44>
 80096c4:	a201      	add	r2, pc, #4	; (adr r2, 80096cc <USBD_Get_USB_Status+0x1c>)
 80096c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ca:	bf00      	nop
 80096cc:	080096dd 	.word	0x080096dd
 80096d0:	080096e3 	.word	0x080096e3
 80096d4:	080096e9 	.word	0x080096e9
 80096d8:	080096ef 	.word	0x080096ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
    break;
 80096e0:	e00b      	b.n	80096fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096e2:	2303      	movs	r3, #3
 80096e4:	73fb      	strb	r3, [r7, #15]
    break;
 80096e6:	e008      	b.n	80096fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096e8:	2301      	movs	r3, #1
 80096ea:	73fb      	strb	r3, [r7, #15]
    break;
 80096ec:	e005      	b.n	80096fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096ee:	2303      	movs	r3, #3
 80096f0:	73fb      	strb	r3, [r7, #15]
    break;
 80096f2:	e002      	b.n	80096fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80096f4:	2303      	movs	r3, #3
 80096f6:	73fb      	strb	r3, [r7, #15]
    break;
 80096f8:	bf00      	nop
  }
  return usb_status;
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <__errno>:
 8009708:	4b01      	ldr	r3, [pc, #4]	; (8009710 <__errno+0x8>)
 800970a:	6818      	ldr	r0, [r3, #0]
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	200002a8 	.word	0x200002a8

08009714 <__libc_init_array>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	4d0d      	ldr	r5, [pc, #52]	; (800974c <__libc_init_array+0x38>)
 8009718:	4c0d      	ldr	r4, [pc, #52]	; (8009750 <__libc_init_array+0x3c>)
 800971a:	1b64      	subs	r4, r4, r5
 800971c:	10a4      	asrs	r4, r4, #2
 800971e:	2600      	movs	r6, #0
 8009720:	42a6      	cmp	r6, r4
 8009722:	d109      	bne.n	8009738 <__libc_init_array+0x24>
 8009724:	4d0b      	ldr	r5, [pc, #44]	; (8009754 <__libc_init_array+0x40>)
 8009726:	4c0c      	ldr	r4, [pc, #48]	; (8009758 <__libc_init_array+0x44>)
 8009728:	f001 f84c 	bl	800a7c4 <_init>
 800972c:	1b64      	subs	r4, r4, r5
 800972e:	10a4      	asrs	r4, r4, #2
 8009730:	2600      	movs	r6, #0
 8009732:	42a6      	cmp	r6, r4
 8009734:	d105      	bne.n	8009742 <__libc_init_array+0x2e>
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	f855 3b04 	ldr.w	r3, [r5], #4
 800973c:	4798      	blx	r3
 800973e:	3601      	adds	r6, #1
 8009740:	e7ee      	b.n	8009720 <__libc_init_array+0xc>
 8009742:	f855 3b04 	ldr.w	r3, [r5], #4
 8009746:	4798      	blx	r3
 8009748:	3601      	adds	r6, #1
 800974a:	e7f2      	b.n	8009732 <__libc_init_array+0x1e>
 800974c:	0800bdf4 	.word	0x0800bdf4
 8009750:	0800bdf4 	.word	0x0800bdf4
 8009754:	0800bdf4 	.word	0x0800bdf4
 8009758:	0800bdf8 	.word	0x0800bdf8

0800975c <memset>:
 800975c:	4402      	add	r2, r0
 800975e:	4603      	mov	r3, r0
 8009760:	4293      	cmp	r3, r2
 8009762:	d100      	bne.n	8009766 <memset+0xa>
 8009764:	4770      	bx	lr
 8009766:	f803 1b01 	strb.w	r1, [r3], #1
 800976a:	e7f9      	b.n	8009760 <memset+0x4>

0800976c <_puts_r>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	460e      	mov	r6, r1
 8009770:	4605      	mov	r5, r0
 8009772:	b118      	cbz	r0, 800977c <_puts_r+0x10>
 8009774:	6983      	ldr	r3, [r0, #24]
 8009776:	b90b      	cbnz	r3, 800977c <_puts_r+0x10>
 8009778:	f000 fa68 	bl	8009c4c <__sinit>
 800977c:	69ab      	ldr	r3, [r5, #24]
 800977e:	68ac      	ldr	r4, [r5, #8]
 8009780:	b913      	cbnz	r3, 8009788 <_puts_r+0x1c>
 8009782:	4628      	mov	r0, r5
 8009784:	f000 fa62 	bl	8009c4c <__sinit>
 8009788:	4b2c      	ldr	r3, [pc, #176]	; (800983c <_puts_r+0xd0>)
 800978a:	429c      	cmp	r4, r3
 800978c:	d120      	bne.n	80097d0 <_puts_r+0x64>
 800978e:	686c      	ldr	r4, [r5, #4]
 8009790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009792:	07db      	lsls	r3, r3, #31
 8009794:	d405      	bmi.n	80097a2 <_puts_r+0x36>
 8009796:	89a3      	ldrh	r3, [r4, #12]
 8009798:	0598      	lsls	r0, r3, #22
 800979a:	d402      	bmi.n	80097a2 <_puts_r+0x36>
 800979c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800979e:	f000 faf3 	bl	8009d88 <__retarget_lock_acquire_recursive>
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	0719      	lsls	r1, r3, #28
 80097a6:	d51d      	bpl.n	80097e4 <_puts_r+0x78>
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	b1db      	cbz	r3, 80097e4 <_puts_r+0x78>
 80097ac:	3e01      	subs	r6, #1
 80097ae:	68a3      	ldr	r3, [r4, #8]
 80097b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097b4:	3b01      	subs	r3, #1
 80097b6:	60a3      	str	r3, [r4, #8]
 80097b8:	bb39      	cbnz	r1, 800980a <_puts_r+0x9e>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	da38      	bge.n	8009830 <_puts_r+0xc4>
 80097be:	4622      	mov	r2, r4
 80097c0:	210a      	movs	r1, #10
 80097c2:	4628      	mov	r0, r5
 80097c4:	f000 f868 	bl	8009898 <__swbuf_r>
 80097c8:	3001      	adds	r0, #1
 80097ca:	d011      	beq.n	80097f0 <_puts_r+0x84>
 80097cc:	250a      	movs	r5, #10
 80097ce:	e011      	b.n	80097f4 <_puts_r+0x88>
 80097d0:	4b1b      	ldr	r3, [pc, #108]	; (8009840 <_puts_r+0xd4>)
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d101      	bne.n	80097da <_puts_r+0x6e>
 80097d6:	68ac      	ldr	r4, [r5, #8]
 80097d8:	e7da      	b.n	8009790 <_puts_r+0x24>
 80097da:	4b1a      	ldr	r3, [pc, #104]	; (8009844 <_puts_r+0xd8>)
 80097dc:	429c      	cmp	r4, r3
 80097de:	bf08      	it	eq
 80097e0:	68ec      	ldreq	r4, [r5, #12]
 80097e2:	e7d5      	b.n	8009790 <_puts_r+0x24>
 80097e4:	4621      	mov	r1, r4
 80097e6:	4628      	mov	r0, r5
 80097e8:	f000 f8a8 	bl	800993c <__swsetup_r>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d0dd      	beq.n	80097ac <_puts_r+0x40>
 80097f0:	f04f 35ff 	mov.w	r5, #4294967295
 80097f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097f6:	07da      	lsls	r2, r3, #31
 80097f8:	d405      	bmi.n	8009806 <_puts_r+0x9a>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	059b      	lsls	r3, r3, #22
 80097fe:	d402      	bmi.n	8009806 <_puts_r+0x9a>
 8009800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009802:	f000 fac2 	bl	8009d8a <__retarget_lock_release_recursive>
 8009806:	4628      	mov	r0, r5
 8009808:	bd70      	pop	{r4, r5, r6, pc}
 800980a:	2b00      	cmp	r3, #0
 800980c:	da04      	bge.n	8009818 <_puts_r+0xac>
 800980e:	69a2      	ldr	r2, [r4, #24]
 8009810:	429a      	cmp	r2, r3
 8009812:	dc06      	bgt.n	8009822 <_puts_r+0xb6>
 8009814:	290a      	cmp	r1, #10
 8009816:	d004      	beq.n	8009822 <_puts_r+0xb6>
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	1c5a      	adds	r2, r3, #1
 800981c:	6022      	str	r2, [r4, #0]
 800981e:	7019      	strb	r1, [r3, #0]
 8009820:	e7c5      	b.n	80097ae <_puts_r+0x42>
 8009822:	4622      	mov	r2, r4
 8009824:	4628      	mov	r0, r5
 8009826:	f000 f837 	bl	8009898 <__swbuf_r>
 800982a:	3001      	adds	r0, #1
 800982c:	d1bf      	bne.n	80097ae <_puts_r+0x42>
 800982e:	e7df      	b.n	80097f0 <_puts_r+0x84>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	250a      	movs	r5, #10
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	6022      	str	r2, [r4, #0]
 8009838:	701d      	strb	r5, [r3, #0]
 800983a:	e7db      	b.n	80097f4 <_puts_r+0x88>
 800983c:	0800bd78 	.word	0x0800bd78
 8009840:	0800bd98 	.word	0x0800bd98
 8009844:	0800bd58 	.word	0x0800bd58

08009848 <puts>:
 8009848:	4b02      	ldr	r3, [pc, #8]	; (8009854 <puts+0xc>)
 800984a:	4601      	mov	r1, r0
 800984c:	6818      	ldr	r0, [r3, #0]
 800984e:	f7ff bf8d 	b.w	800976c <_puts_r>
 8009852:	bf00      	nop
 8009854:	200002a8 	.word	0x200002a8

08009858 <siprintf>:
 8009858:	b40e      	push	{r1, r2, r3}
 800985a:	b500      	push	{lr}
 800985c:	b09c      	sub	sp, #112	; 0x70
 800985e:	ab1d      	add	r3, sp, #116	; 0x74
 8009860:	9002      	str	r0, [sp, #8]
 8009862:	9006      	str	r0, [sp, #24]
 8009864:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009868:	4809      	ldr	r0, [pc, #36]	; (8009890 <siprintf+0x38>)
 800986a:	9107      	str	r1, [sp, #28]
 800986c:	9104      	str	r1, [sp, #16]
 800986e:	4909      	ldr	r1, [pc, #36]	; (8009894 <siprintf+0x3c>)
 8009870:	f853 2b04 	ldr.w	r2, [r3], #4
 8009874:	9105      	str	r1, [sp, #20]
 8009876:	6800      	ldr	r0, [r0, #0]
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	a902      	add	r1, sp, #8
 800987c:	f000 fbf0 	bl	800a060 <_svfiprintf_r>
 8009880:	9b02      	ldr	r3, [sp, #8]
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	b01c      	add	sp, #112	; 0x70
 8009888:	f85d eb04 	ldr.w	lr, [sp], #4
 800988c:	b003      	add	sp, #12
 800988e:	4770      	bx	lr
 8009890:	200002a8 	.word	0x200002a8
 8009894:	ffff0208 	.word	0xffff0208

08009898 <__swbuf_r>:
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989a:	460e      	mov	r6, r1
 800989c:	4614      	mov	r4, r2
 800989e:	4605      	mov	r5, r0
 80098a0:	b118      	cbz	r0, 80098aa <__swbuf_r+0x12>
 80098a2:	6983      	ldr	r3, [r0, #24]
 80098a4:	b90b      	cbnz	r3, 80098aa <__swbuf_r+0x12>
 80098a6:	f000 f9d1 	bl	8009c4c <__sinit>
 80098aa:	4b21      	ldr	r3, [pc, #132]	; (8009930 <__swbuf_r+0x98>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	d12b      	bne.n	8009908 <__swbuf_r+0x70>
 80098b0:	686c      	ldr	r4, [r5, #4]
 80098b2:	69a3      	ldr	r3, [r4, #24]
 80098b4:	60a3      	str	r3, [r4, #8]
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	071a      	lsls	r2, r3, #28
 80098ba:	d52f      	bpl.n	800991c <__swbuf_r+0x84>
 80098bc:	6923      	ldr	r3, [r4, #16]
 80098be:	b36b      	cbz	r3, 800991c <__swbuf_r+0x84>
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	6820      	ldr	r0, [r4, #0]
 80098c4:	1ac0      	subs	r0, r0, r3
 80098c6:	6963      	ldr	r3, [r4, #20]
 80098c8:	b2f6      	uxtb	r6, r6
 80098ca:	4283      	cmp	r3, r0
 80098cc:	4637      	mov	r7, r6
 80098ce:	dc04      	bgt.n	80098da <__swbuf_r+0x42>
 80098d0:	4621      	mov	r1, r4
 80098d2:	4628      	mov	r0, r5
 80098d4:	f000 f926 	bl	8009b24 <_fflush_r>
 80098d8:	bb30      	cbnz	r0, 8009928 <__swbuf_r+0x90>
 80098da:	68a3      	ldr	r3, [r4, #8]
 80098dc:	3b01      	subs	r3, #1
 80098de:	60a3      	str	r3, [r4, #8]
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	6022      	str	r2, [r4, #0]
 80098e6:	701e      	strb	r6, [r3, #0]
 80098e8:	6963      	ldr	r3, [r4, #20]
 80098ea:	3001      	adds	r0, #1
 80098ec:	4283      	cmp	r3, r0
 80098ee:	d004      	beq.n	80098fa <__swbuf_r+0x62>
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	07db      	lsls	r3, r3, #31
 80098f4:	d506      	bpl.n	8009904 <__swbuf_r+0x6c>
 80098f6:	2e0a      	cmp	r6, #10
 80098f8:	d104      	bne.n	8009904 <__swbuf_r+0x6c>
 80098fa:	4621      	mov	r1, r4
 80098fc:	4628      	mov	r0, r5
 80098fe:	f000 f911 	bl	8009b24 <_fflush_r>
 8009902:	b988      	cbnz	r0, 8009928 <__swbuf_r+0x90>
 8009904:	4638      	mov	r0, r7
 8009906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009908:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <__swbuf_r+0x9c>)
 800990a:	429c      	cmp	r4, r3
 800990c:	d101      	bne.n	8009912 <__swbuf_r+0x7a>
 800990e:	68ac      	ldr	r4, [r5, #8]
 8009910:	e7cf      	b.n	80098b2 <__swbuf_r+0x1a>
 8009912:	4b09      	ldr	r3, [pc, #36]	; (8009938 <__swbuf_r+0xa0>)
 8009914:	429c      	cmp	r4, r3
 8009916:	bf08      	it	eq
 8009918:	68ec      	ldreq	r4, [r5, #12]
 800991a:	e7ca      	b.n	80098b2 <__swbuf_r+0x1a>
 800991c:	4621      	mov	r1, r4
 800991e:	4628      	mov	r0, r5
 8009920:	f000 f80c 	bl	800993c <__swsetup_r>
 8009924:	2800      	cmp	r0, #0
 8009926:	d0cb      	beq.n	80098c0 <__swbuf_r+0x28>
 8009928:	f04f 37ff 	mov.w	r7, #4294967295
 800992c:	e7ea      	b.n	8009904 <__swbuf_r+0x6c>
 800992e:	bf00      	nop
 8009930:	0800bd78 	.word	0x0800bd78
 8009934:	0800bd98 	.word	0x0800bd98
 8009938:	0800bd58 	.word	0x0800bd58

0800993c <__swsetup_r>:
 800993c:	4b32      	ldr	r3, [pc, #200]	; (8009a08 <__swsetup_r+0xcc>)
 800993e:	b570      	push	{r4, r5, r6, lr}
 8009940:	681d      	ldr	r5, [r3, #0]
 8009942:	4606      	mov	r6, r0
 8009944:	460c      	mov	r4, r1
 8009946:	b125      	cbz	r5, 8009952 <__swsetup_r+0x16>
 8009948:	69ab      	ldr	r3, [r5, #24]
 800994a:	b913      	cbnz	r3, 8009952 <__swsetup_r+0x16>
 800994c:	4628      	mov	r0, r5
 800994e:	f000 f97d 	bl	8009c4c <__sinit>
 8009952:	4b2e      	ldr	r3, [pc, #184]	; (8009a0c <__swsetup_r+0xd0>)
 8009954:	429c      	cmp	r4, r3
 8009956:	d10f      	bne.n	8009978 <__swsetup_r+0x3c>
 8009958:	686c      	ldr	r4, [r5, #4]
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009960:	0719      	lsls	r1, r3, #28
 8009962:	d42c      	bmi.n	80099be <__swsetup_r+0x82>
 8009964:	06dd      	lsls	r5, r3, #27
 8009966:	d411      	bmi.n	800998c <__swsetup_r+0x50>
 8009968:	2309      	movs	r3, #9
 800996a:	6033      	str	r3, [r6, #0]
 800996c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	f04f 30ff 	mov.w	r0, #4294967295
 8009976:	e03e      	b.n	80099f6 <__swsetup_r+0xba>
 8009978:	4b25      	ldr	r3, [pc, #148]	; (8009a10 <__swsetup_r+0xd4>)
 800997a:	429c      	cmp	r4, r3
 800997c:	d101      	bne.n	8009982 <__swsetup_r+0x46>
 800997e:	68ac      	ldr	r4, [r5, #8]
 8009980:	e7eb      	b.n	800995a <__swsetup_r+0x1e>
 8009982:	4b24      	ldr	r3, [pc, #144]	; (8009a14 <__swsetup_r+0xd8>)
 8009984:	429c      	cmp	r4, r3
 8009986:	bf08      	it	eq
 8009988:	68ec      	ldreq	r4, [r5, #12]
 800998a:	e7e6      	b.n	800995a <__swsetup_r+0x1e>
 800998c:	0758      	lsls	r0, r3, #29
 800998e:	d512      	bpl.n	80099b6 <__swsetup_r+0x7a>
 8009990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009992:	b141      	cbz	r1, 80099a6 <__swsetup_r+0x6a>
 8009994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009998:	4299      	cmp	r1, r3
 800999a:	d002      	beq.n	80099a2 <__swsetup_r+0x66>
 800999c:	4630      	mov	r0, r6
 800999e:	f000 fa59 	bl	8009e54 <_free_r>
 80099a2:	2300      	movs	r3, #0
 80099a4:	6363      	str	r3, [r4, #52]	; 0x34
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099ac:	81a3      	strh	r3, [r4, #12]
 80099ae:	2300      	movs	r3, #0
 80099b0:	6063      	str	r3, [r4, #4]
 80099b2:	6923      	ldr	r3, [r4, #16]
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	f043 0308 	orr.w	r3, r3, #8
 80099bc:	81a3      	strh	r3, [r4, #12]
 80099be:	6923      	ldr	r3, [r4, #16]
 80099c0:	b94b      	cbnz	r3, 80099d6 <__swsetup_r+0x9a>
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099cc:	d003      	beq.n	80099d6 <__swsetup_r+0x9a>
 80099ce:	4621      	mov	r1, r4
 80099d0:	4630      	mov	r0, r6
 80099d2:	f000 f9ff 	bl	8009dd4 <__smakebuf_r>
 80099d6:	89a0      	ldrh	r0, [r4, #12]
 80099d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099dc:	f010 0301 	ands.w	r3, r0, #1
 80099e0:	d00a      	beq.n	80099f8 <__swsetup_r+0xbc>
 80099e2:	2300      	movs	r3, #0
 80099e4:	60a3      	str	r3, [r4, #8]
 80099e6:	6963      	ldr	r3, [r4, #20]
 80099e8:	425b      	negs	r3, r3
 80099ea:	61a3      	str	r3, [r4, #24]
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	b943      	cbnz	r3, 8009a02 <__swsetup_r+0xc6>
 80099f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099f4:	d1ba      	bne.n	800996c <__swsetup_r+0x30>
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	0781      	lsls	r1, r0, #30
 80099fa:	bf58      	it	pl
 80099fc:	6963      	ldrpl	r3, [r4, #20]
 80099fe:	60a3      	str	r3, [r4, #8]
 8009a00:	e7f4      	b.n	80099ec <__swsetup_r+0xb0>
 8009a02:	2000      	movs	r0, #0
 8009a04:	e7f7      	b.n	80099f6 <__swsetup_r+0xba>
 8009a06:	bf00      	nop
 8009a08:	200002a8 	.word	0x200002a8
 8009a0c:	0800bd78 	.word	0x0800bd78
 8009a10:	0800bd98 	.word	0x0800bd98
 8009a14:	0800bd58 	.word	0x0800bd58

08009a18 <__sflush_r>:
 8009a18:	898a      	ldrh	r2, [r1, #12]
 8009a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1e:	4605      	mov	r5, r0
 8009a20:	0710      	lsls	r0, r2, #28
 8009a22:	460c      	mov	r4, r1
 8009a24:	d458      	bmi.n	8009ad8 <__sflush_r+0xc0>
 8009a26:	684b      	ldr	r3, [r1, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	dc05      	bgt.n	8009a38 <__sflush_r+0x20>
 8009a2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	dc02      	bgt.n	8009a38 <__sflush_r+0x20>
 8009a32:	2000      	movs	r0, #0
 8009a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	d0f9      	beq.n	8009a32 <__sflush_r+0x1a>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a44:	682f      	ldr	r7, [r5, #0]
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	d032      	beq.n	8009ab0 <__sflush_r+0x98>
 8009a4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	075a      	lsls	r2, r3, #29
 8009a50:	d505      	bpl.n	8009a5e <__sflush_r+0x46>
 8009a52:	6863      	ldr	r3, [r4, #4]
 8009a54:	1ac0      	subs	r0, r0, r3
 8009a56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a58:	b10b      	cbz	r3, 8009a5e <__sflush_r+0x46>
 8009a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a5c:	1ac0      	subs	r0, r0, r3
 8009a5e:	2300      	movs	r3, #0
 8009a60:	4602      	mov	r2, r0
 8009a62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a64:	6a21      	ldr	r1, [r4, #32]
 8009a66:	4628      	mov	r0, r5
 8009a68:	47b0      	blx	r6
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	d106      	bne.n	8009a7e <__sflush_r+0x66>
 8009a70:	6829      	ldr	r1, [r5, #0]
 8009a72:	291d      	cmp	r1, #29
 8009a74:	d82c      	bhi.n	8009ad0 <__sflush_r+0xb8>
 8009a76:	4a2a      	ldr	r2, [pc, #168]	; (8009b20 <__sflush_r+0x108>)
 8009a78:	40ca      	lsrs	r2, r1
 8009a7a:	07d6      	lsls	r6, r2, #31
 8009a7c:	d528      	bpl.n	8009ad0 <__sflush_r+0xb8>
 8009a7e:	2200      	movs	r2, #0
 8009a80:	6062      	str	r2, [r4, #4]
 8009a82:	04d9      	lsls	r1, r3, #19
 8009a84:	6922      	ldr	r2, [r4, #16]
 8009a86:	6022      	str	r2, [r4, #0]
 8009a88:	d504      	bpl.n	8009a94 <__sflush_r+0x7c>
 8009a8a:	1c42      	adds	r2, r0, #1
 8009a8c:	d101      	bne.n	8009a92 <__sflush_r+0x7a>
 8009a8e:	682b      	ldr	r3, [r5, #0]
 8009a90:	b903      	cbnz	r3, 8009a94 <__sflush_r+0x7c>
 8009a92:	6560      	str	r0, [r4, #84]	; 0x54
 8009a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a96:	602f      	str	r7, [r5, #0]
 8009a98:	2900      	cmp	r1, #0
 8009a9a:	d0ca      	beq.n	8009a32 <__sflush_r+0x1a>
 8009a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	d002      	beq.n	8009aaa <__sflush_r+0x92>
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 f9d5 	bl	8009e54 <_free_r>
 8009aaa:	2000      	movs	r0, #0
 8009aac:	6360      	str	r0, [r4, #52]	; 0x34
 8009aae:	e7c1      	b.n	8009a34 <__sflush_r+0x1c>
 8009ab0:	6a21      	ldr	r1, [r4, #32]
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	47b0      	blx	r6
 8009ab8:	1c41      	adds	r1, r0, #1
 8009aba:	d1c7      	bne.n	8009a4c <__sflush_r+0x34>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d0c4      	beq.n	8009a4c <__sflush_r+0x34>
 8009ac2:	2b1d      	cmp	r3, #29
 8009ac4:	d001      	beq.n	8009aca <__sflush_r+0xb2>
 8009ac6:	2b16      	cmp	r3, #22
 8009ac8:	d101      	bne.n	8009ace <__sflush_r+0xb6>
 8009aca:	602f      	str	r7, [r5, #0]
 8009acc:	e7b1      	b.n	8009a32 <__sflush_r+0x1a>
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad4:	81a3      	strh	r3, [r4, #12]
 8009ad6:	e7ad      	b.n	8009a34 <__sflush_r+0x1c>
 8009ad8:	690f      	ldr	r7, [r1, #16]
 8009ada:	2f00      	cmp	r7, #0
 8009adc:	d0a9      	beq.n	8009a32 <__sflush_r+0x1a>
 8009ade:	0793      	lsls	r3, r2, #30
 8009ae0:	680e      	ldr	r6, [r1, #0]
 8009ae2:	bf08      	it	eq
 8009ae4:	694b      	ldreq	r3, [r1, #20]
 8009ae6:	600f      	str	r7, [r1, #0]
 8009ae8:	bf18      	it	ne
 8009aea:	2300      	movne	r3, #0
 8009aec:	eba6 0807 	sub.w	r8, r6, r7
 8009af0:	608b      	str	r3, [r1, #8]
 8009af2:	f1b8 0f00 	cmp.w	r8, #0
 8009af6:	dd9c      	ble.n	8009a32 <__sflush_r+0x1a>
 8009af8:	6a21      	ldr	r1, [r4, #32]
 8009afa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009afc:	4643      	mov	r3, r8
 8009afe:	463a      	mov	r2, r7
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b0      	blx	r6
 8009b04:	2800      	cmp	r0, #0
 8009b06:	dc06      	bgt.n	8009b16 <__sflush_r+0xfe>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b0e:	81a3      	strh	r3, [r4, #12]
 8009b10:	f04f 30ff 	mov.w	r0, #4294967295
 8009b14:	e78e      	b.n	8009a34 <__sflush_r+0x1c>
 8009b16:	4407      	add	r7, r0
 8009b18:	eba8 0800 	sub.w	r8, r8, r0
 8009b1c:	e7e9      	b.n	8009af2 <__sflush_r+0xda>
 8009b1e:	bf00      	nop
 8009b20:	20400001 	.word	0x20400001

08009b24 <_fflush_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	690b      	ldr	r3, [r1, #16]
 8009b28:	4605      	mov	r5, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	b913      	cbnz	r3, 8009b34 <_fflush_r+0x10>
 8009b2e:	2500      	movs	r5, #0
 8009b30:	4628      	mov	r0, r5
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	b118      	cbz	r0, 8009b3e <_fflush_r+0x1a>
 8009b36:	6983      	ldr	r3, [r0, #24]
 8009b38:	b90b      	cbnz	r3, 8009b3e <_fflush_r+0x1a>
 8009b3a:	f000 f887 	bl	8009c4c <__sinit>
 8009b3e:	4b14      	ldr	r3, [pc, #80]	; (8009b90 <_fflush_r+0x6c>)
 8009b40:	429c      	cmp	r4, r3
 8009b42:	d11b      	bne.n	8009b7c <_fflush_r+0x58>
 8009b44:	686c      	ldr	r4, [r5, #4]
 8009b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0ef      	beq.n	8009b2e <_fflush_r+0xa>
 8009b4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b50:	07d0      	lsls	r0, r2, #31
 8009b52:	d404      	bmi.n	8009b5e <_fflush_r+0x3a>
 8009b54:	0599      	lsls	r1, r3, #22
 8009b56:	d402      	bmi.n	8009b5e <_fflush_r+0x3a>
 8009b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b5a:	f000 f915 	bl	8009d88 <__retarget_lock_acquire_recursive>
 8009b5e:	4628      	mov	r0, r5
 8009b60:	4621      	mov	r1, r4
 8009b62:	f7ff ff59 	bl	8009a18 <__sflush_r>
 8009b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b68:	07da      	lsls	r2, r3, #31
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	d4e0      	bmi.n	8009b30 <_fflush_r+0xc>
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	059b      	lsls	r3, r3, #22
 8009b72:	d4dd      	bmi.n	8009b30 <_fflush_r+0xc>
 8009b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b76:	f000 f908 	bl	8009d8a <__retarget_lock_release_recursive>
 8009b7a:	e7d9      	b.n	8009b30 <_fflush_r+0xc>
 8009b7c:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <_fflush_r+0x70>)
 8009b7e:	429c      	cmp	r4, r3
 8009b80:	d101      	bne.n	8009b86 <_fflush_r+0x62>
 8009b82:	68ac      	ldr	r4, [r5, #8]
 8009b84:	e7df      	b.n	8009b46 <_fflush_r+0x22>
 8009b86:	4b04      	ldr	r3, [pc, #16]	; (8009b98 <_fflush_r+0x74>)
 8009b88:	429c      	cmp	r4, r3
 8009b8a:	bf08      	it	eq
 8009b8c:	68ec      	ldreq	r4, [r5, #12]
 8009b8e:	e7da      	b.n	8009b46 <_fflush_r+0x22>
 8009b90:	0800bd78 	.word	0x0800bd78
 8009b94:	0800bd98 	.word	0x0800bd98
 8009b98:	0800bd58 	.word	0x0800bd58

08009b9c <std>:
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	b510      	push	{r4, lr}
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009baa:	6083      	str	r3, [r0, #8]
 8009bac:	8181      	strh	r1, [r0, #12]
 8009bae:	6643      	str	r3, [r0, #100]	; 0x64
 8009bb0:	81c2      	strh	r2, [r0, #14]
 8009bb2:	6183      	str	r3, [r0, #24]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	2208      	movs	r2, #8
 8009bb8:	305c      	adds	r0, #92	; 0x5c
 8009bba:	f7ff fdcf 	bl	800975c <memset>
 8009bbe:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <std+0x38>)
 8009bc0:	6263      	str	r3, [r4, #36]	; 0x24
 8009bc2:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <std+0x3c>)
 8009bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bc6:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <std+0x40>)
 8009bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <std+0x44>)
 8009bcc:	6224      	str	r4, [r4, #32]
 8009bce:	6323      	str	r3, [r4, #48]	; 0x30
 8009bd0:	bd10      	pop	{r4, pc}
 8009bd2:	bf00      	nop
 8009bd4:	0800a5a9 	.word	0x0800a5a9
 8009bd8:	0800a5cb 	.word	0x0800a5cb
 8009bdc:	0800a603 	.word	0x0800a603
 8009be0:	0800a627 	.word	0x0800a627

08009be4 <_cleanup_r>:
 8009be4:	4901      	ldr	r1, [pc, #4]	; (8009bec <_cleanup_r+0x8>)
 8009be6:	f000 b8af 	b.w	8009d48 <_fwalk_reent>
 8009bea:	bf00      	nop
 8009bec:	08009b25 	.word	0x08009b25

08009bf0 <__sfmoreglue>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	1e4a      	subs	r2, r1, #1
 8009bf4:	2568      	movs	r5, #104	; 0x68
 8009bf6:	4355      	muls	r5, r2
 8009bf8:	460e      	mov	r6, r1
 8009bfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bfe:	f000 f979 	bl	8009ef4 <_malloc_r>
 8009c02:	4604      	mov	r4, r0
 8009c04:	b140      	cbz	r0, 8009c18 <__sfmoreglue+0x28>
 8009c06:	2100      	movs	r1, #0
 8009c08:	e9c0 1600 	strd	r1, r6, [r0]
 8009c0c:	300c      	adds	r0, #12
 8009c0e:	60a0      	str	r0, [r4, #8]
 8009c10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c14:	f7ff fda2 	bl	800975c <memset>
 8009c18:	4620      	mov	r0, r4
 8009c1a:	bd70      	pop	{r4, r5, r6, pc}

08009c1c <__sfp_lock_acquire>:
 8009c1c:	4801      	ldr	r0, [pc, #4]	; (8009c24 <__sfp_lock_acquire+0x8>)
 8009c1e:	f000 b8b3 	b.w	8009d88 <__retarget_lock_acquire_recursive>
 8009c22:	bf00      	nop
 8009c24:	20002ee8 	.word	0x20002ee8

08009c28 <__sfp_lock_release>:
 8009c28:	4801      	ldr	r0, [pc, #4]	; (8009c30 <__sfp_lock_release+0x8>)
 8009c2a:	f000 b8ae 	b.w	8009d8a <__retarget_lock_release_recursive>
 8009c2e:	bf00      	nop
 8009c30:	20002ee8 	.word	0x20002ee8

08009c34 <__sinit_lock_acquire>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__sinit_lock_acquire+0x8>)
 8009c36:	f000 b8a7 	b.w	8009d88 <__retarget_lock_acquire_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	20002ee3 	.word	0x20002ee3

08009c40 <__sinit_lock_release>:
 8009c40:	4801      	ldr	r0, [pc, #4]	; (8009c48 <__sinit_lock_release+0x8>)
 8009c42:	f000 b8a2 	b.w	8009d8a <__retarget_lock_release_recursive>
 8009c46:	bf00      	nop
 8009c48:	20002ee3 	.word	0x20002ee3

08009c4c <__sinit>:
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	4604      	mov	r4, r0
 8009c50:	f7ff fff0 	bl	8009c34 <__sinit_lock_acquire>
 8009c54:	69a3      	ldr	r3, [r4, #24]
 8009c56:	b11b      	cbz	r3, 8009c60 <__sinit+0x14>
 8009c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c5c:	f7ff bff0 	b.w	8009c40 <__sinit_lock_release>
 8009c60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c64:	6523      	str	r3, [r4, #80]	; 0x50
 8009c66:	4b13      	ldr	r3, [pc, #76]	; (8009cb4 <__sinit+0x68>)
 8009c68:	4a13      	ldr	r2, [pc, #76]	; (8009cb8 <__sinit+0x6c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	bf04      	itt	eq
 8009c72:	2301      	moveq	r3, #1
 8009c74:	61a3      	streq	r3, [r4, #24]
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 f820 	bl	8009cbc <__sfp>
 8009c7c:	6060      	str	r0, [r4, #4]
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 f81c 	bl	8009cbc <__sfp>
 8009c84:	60a0      	str	r0, [r4, #8]
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 f818 	bl	8009cbc <__sfp>
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	60e0      	str	r0, [r4, #12]
 8009c90:	2104      	movs	r1, #4
 8009c92:	6860      	ldr	r0, [r4, #4]
 8009c94:	f7ff ff82 	bl	8009b9c <std>
 8009c98:	68a0      	ldr	r0, [r4, #8]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	2109      	movs	r1, #9
 8009c9e:	f7ff ff7d 	bl	8009b9c <std>
 8009ca2:	68e0      	ldr	r0, [r4, #12]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	2112      	movs	r1, #18
 8009ca8:	f7ff ff78 	bl	8009b9c <std>
 8009cac:	2301      	movs	r3, #1
 8009cae:	61a3      	str	r3, [r4, #24]
 8009cb0:	e7d2      	b.n	8009c58 <__sinit+0xc>
 8009cb2:	bf00      	nop
 8009cb4:	0800bd54 	.word	0x0800bd54
 8009cb8:	08009be5 	.word	0x08009be5

08009cbc <__sfp>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	f7ff ffac 	bl	8009c1c <__sfp_lock_acquire>
 8009cc4:	4b1e      	ldr	r3, [pc, #120]	; (8009d40 <__sfp+0x84>)
 8009cc6:	681e      	ldr	r6, [r3, #0]
 8009cc8:	69b3      	ldr	r3, [r6, #24]
 8009cca:	b913      	cbnz	r3, 8009cd2 <__sfp+0x16>
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f7ff ffbd 	bl	8009c4c <__sinit>
 8009cd2:	3648      	adds	r6, #72	; 0x48
 8009cd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	d503      	bpl.n	8009ce4 <__sfp+0x28>
 8009cdc:	6833      	ldr	r3, [r6, #0]
 8009cde:	b30b      	cbz	r3, 8009d24 <__sfp+0x68>
 8009ce0:	6836      	ldr	r6, [r6, #0]
 8009ce2:	e7f7      	b.n	8009cd4 <__sfp+0x18>
 8009ce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ce8:	b9d5      	cbnz	r5, 8009d20 <__sfp+0x64>
 8009cea:	4b16      	ldr	r3, [pc, #88]	; (8009d44 <__sfp+0x88>)
 8009cec:	60e3      	str	r3, [r4, #12]
 8009cee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cf2:	6665      	str	r5, [r4, #100]	; 0x64
 8009cf4:	f000 f847 	bl	8009d86 <__retarget_lock_init_recursive>
 8009cf8:	f7ff ff96 	bl	8009c28 <__sfp_lock_release>
 8009cfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d04:	6025      	str	r5, [r4, #0]
 8009d06:	61a5      	str	r5, [r4, #24]
 8009d08:	2208      	movs	r2, #8
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d10:	f7ff fd24 	bl	800975c <memset>
 8009d14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d20:	3468      	adds	r4, #104	; 0x68
 8009d22:	e7d9      	b.n	8009cd8 <__sfp+0x1c>
 8009d24:	2104      	movs	r1, #4
 8009d26:	4638      	mov	r0, r7
 8009d28:	f7ff ff62 	bl	8009bf0 <__sfmoreglue>
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	6030      	str	r0, [r6, #0]
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d1d5      	bne.n	8009ce0 <__sfp+0x24>
 8009d34:	f7ff ff78 	bl	8009c28 <__sfp_lock_release>
 8009d38:	230c      	movs	r3, #12
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	e7ee      	b.n	8009d1c <__sfp+0x60>
 8009d3e:	bf00      	nop
 8009d40:	0800bd54 	.word	0x0800bd54
 8009d44:	ffff0001 	.word	0xffff0001

08009d48 <_fwalk_reent>:
 8009d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	4688      	mov	r8, r1
 8009d50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d54:	2700      	movs	r7, #0
 8009d56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d5a:	f1b9 0901 	subs.w	r9, r9, #1
 8009d5e:	d505      	bpl.n	8009d6c <_fwalk_reent+0x24>
 8009d60:	6824      	ldr	r4, [r4, #0]
 8009d62:	2c00      	cmp	r4, #0
 8009d64:	d1f7      	bne.n	8009d56 <_fwalk_reent+0xe>
 8009d66:	4638      	mov	r0, r7
 8009d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d6c:	89ab      	ldrh	r3, [r5, #12]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d907      	bls.n	8009d82 <_fwalk_reent+0x3a>
 8009d72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d76:	3301      	adds	r3, #1
 8009d78:	d003      	beq.n	8009d82 <_fwalk_reent+0x3a>
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	47c0      	blx	r8
 8009d80:	4307      	orrs	r7, r0
 8009d82:	3568      	adds	r5, #104	; 0x68
 8009d84:	e7e9      	b.n	8009d5a <_fwalk_reent+0x12>

08009d86 <__retarget_lock_init_recursive>:
 8009d86:	4770      	bx	lr

08009d88 <__retarget_lock_acquire_recursive>:
 8009d88:	4770      	bx	lr

08009d8a <__retarget_lock_release_recursive>:
 8009d8a:	4770      	bx	lr

08009d8c <__swhatbuf_r>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	460e      	mov	r6, r1
 8009d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d94:	2900      	cmp	r1, #0
 8009d96:	b096      	sub	sp, #88	; 0x58
 8009d98:	4614      	mov	r4, r2
 8009d9a:	461d      	mov	r5, r3
 8009d9c:	da07      	bge.n	8009dae <__swhatbuf_r+0x22>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	602b      	str	r3, [r5, #0]
 8009da2:	89b3      	ldrh	r3, [r6, #12]
 8009da4:	061a      	lsls	r2, r3, #24
 8009da6:	d410      	bmi.n	8009dca <__swhatbuf_r+0x3e>
 8009da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dac:	e00e      	b.n	8009dcc <__swhatbuf_r+0x40>
 8009dae:	466a      	mov	r2, sp
 8009db0:	f000 fc60 	bl	800a674 <_fstat_r>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	dbf2      	blt.n	8009d9e <__swhatbuf_r+0x12>
 8009db8:	9a01      	ldr	r2, [sp, #4]
 8009dba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dc2:	425a      	negs	r2, r3
 8009dc4:	415a      	adcs	r2, r3
 8009dc6:	602a      	str	r2, [r5, #0]
 8009dc8:	e7ee      	b.n	8009da8 <__swhatbuf_r+0x1c>
 8009dca:	2340      	movs	r3, #64	; 0x40
 8009dcc:	2000      	movs	r0, #0
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	b016      	add	sp, #88	; 0x58
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}

08009dd4 <__smakebuf_r>:
 8009dd4:	898b      	ldrh	r3, [r1, #12]
 8009dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dd8:	079d      	lsls	r5, r3, #30
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460c      	mov	r4, r1
 8009dde:	d507      	bpl.n	8009df0 <__smakebuf_r+0x1c>
 8009de0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	6123      	str	r3, [r4, #16]
 8009de8:	2301      	movs	r3, #1
 8009dea:	6163      	str	r3, [r4, #20]
 8009dec:	b002      	add	sp, #8
 8009dee:	bd70      	pop	{r4, r5, r6, pc}
 8009df0:	ab01      	add	r3, sp, #4
 8009df2:	466a      	mov	r2, sp
 8009df4:	f7ff ffca 	bl	8009d8c <__swhatbuf_r>
 8009df8:	9900      	ldr	r1, [sp, #0]
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f000 f879 	bl	8009ef4 <_malloc_r>
 8009e02:	b948      	cbnz	r0, 8009e18 <__smakebuf_r+0x44>
 8009e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e08:	059a      	lsls	r2, r3, #22
 8009e0a:	d4ef      	bmi.n	8009dec <__smakebuf_r+0x18>
 8009e0c:	f023 0303 	bic.w	r3, r3, #3
 8009e10:	f043 0302 	orr.w	r3, r3, #2
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	e7e3      	b.n	8009de0 <__smakebuf_r+0xc>
 8009e18:	4b0d      	ldr	r3, [pc, #52]	; (8009e50 <__smakebuf_r+0x7c>)
 8009e1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	6020      	str	r0, [r4, #0]
 8009e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e24:	81a3      	strh	r3, [r4, #12]
 8009e26:	9b00      	ldr	r3, [sp, #0]
 8009e28:	6163      	str	r3, [r4, #20]
 8009e2a:	9b01      	ldr	r3, [sp, #4]
 8009e2c:	6120      	str	r0, [r4, #16]
 8009e2e:	b15b      	cbz	r3, 8009e48 <__smakebuf_r+0x74>
 8009e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e34:	4630      	mov	r0, r6
 8009e36:	f000 fc2f 	bl	800a698 <_isatty_r>
 8009e3a:	b128      	cbz	r0, 8009e48 <__smakebuf_r+0x74>
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	f023 0303 	bic.w	r3, r3, #3
 8009e42:	f043 0301 	orr.w	r3, r3, #1
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	89a0      	ldrh	r0, [r4, #12]
 8009e4a:	4305      	orrs	r5, r0
 8009e4c:	81a5      	strh	r5, [r4, #12]
 8009e4e:	e7cd      	b.n	8009dec <__smakebuf_r+0x18>
 8009e50:	08009be5 	.word	0x08009be5

08009e54 <_free_r>:
 8009e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e56:	2900      	cmp	r1, #0
 8009e58:	d048      	beq.n	8009eec <_free_r+0x98>
 8009e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e5e:	9001      	str	r0, [sp, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f1a1 0404 	sub.w	r4, r1, #4
 8009e66:	bfb8      	it	lt
 8009e68:	18e4      	addlt	r4, r4, r3
 8009e6a:	f000 fc5f 	bl	800a72c <__malloc_lock>
 8009e6e:	4a20      	ldr	r2, [pc, #128]	; (8009ef0 <_free_r+0x9c>)
 8009e70:	9801      	ldr	r0, [sp, #4]
 8009e72:	6813      	ldr	r3, [r2, #0]
 8009e74:	4615      	mov	r5, r2
 8009e76:	b933      	cbnz	r3, 8009e86 <_free_r+0x32>
 8009e78:	6063      	str	r3, [r4, #4]
 8009e7a:	6014      	str	r4, [r2, #0]
 8009e7c:	b003      	add	sp, #12
 8009e7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e82:	f000 bc59 	b.w	800a738 <__malloc_unlock>
 8009e86:	42a3      	cmp	r3, r4
 8009e88:	d90b      	bls.n	8009ea2 <_free_r+0x4e>
 8009e8a:	6821      	ldr	r1, [r4, #0]
 8009e8c:	1862      	adds	r2, r4, r1
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	bf04      	itt	eq
 8009e92:	681a      	ldreq	r2, [r3, #0]
 8009e94:	685b      	ldreq	r3, [r3, #4]
 8009e96:	6063      	str	r3, [r4, #4]
 8009e98:	bf04      	itt	eq
 8009e9a:	1852      	addeq	r2, r2, r1
 8009e9c:	6022      	streq	r2, [r4, #0]
 8009e9e:	602c      	str	r4, [r5, #0]
 8009ea0:	e7ec      	b.n	8009e7c <_free_r+0x28>
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	b10b      	cbz	r3, 8009eac <_free_r+0x58>
 8009ea8:	42a3      	cmp	r3, r4
 8009eaa:	d9fa      	bls.n	8009ea2 <_free_r+0x4e>
 8009eac:	6811      	ldr	r1, [r2, #0]
 8009eae:	1855      	adds	r5, r2, r1
 8009eb0:	42a5      	cmp	r5, r4
 8009eb2:	d10b      	bne.n	8009ecc <_free_r+0x78>
 8009eb4:	6824      	ldr	r4, [r4, #0]
 8009eb6:	4421      	add	r1, r4
 8009eb8:	1854      	adds	r4, r2, r1
 8009eba:	42a3      	cmp	r3, r4
 8009ebc:	6011      	str	r1, [r2, #0]
 8009ebe:	d1dd      	bne.n	8009e7c <_free_r+0x28>
 8009ec0:	681c      	ldr	r4, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	6053      	str	r3, [r2, #4]
 8009ec6:	4421      	add	r1, r4
 8009ec8:	6011      	str	r1, [r2, #0]
 8009eca:	e7d7      	b.n	8009e7c <_free_r+0x28>
 8009ecc:	d902      	bls.n	8009ed4 <_free_r+0x80>
 8009ece:	230c      	movs	r3, #12
 8009ed0:	6003      	str	r3, [r0, #0]
 8009ed2:	e7d3      	b.n	8009e7c <_free_r+0x28>
 8009ed4:	6825      	ldr	r5, [r4, #0]
 8009ed6:	1961      	adds	r1, r4, r5
 8009ed8:	428b      	cmp	r3, r1
 8009eda:	bf04      	itt	eq
 8009edc:	6819      	ldreq	r1, [r3, #0]
 8009ede:	685b      	ldreq	r3, [r3, #4]
 8009ee0:	6063      	str	r3, [r4, #4]
 8009ee2:	bf04      	itt	eq
 8009ee4:	1949      	addeq	r1, r1, r5
 8009ee6:	6021      	streq	r1, [r4, #0]
 8009ee8:	6054      	str	r4, [r2, #4]
 8009eea:	e7c7      	b.n	8009e7c <_free_r+0x28>
 8009eec:	b003      	add	sp, #12
 8009eee:	bd30      	pop	{r4, r5, pc}
 8009ef0:	2000241c 	.word	0x2000241c

08009ef4 <_malloc_r>:
 8009ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef6:	1ccd      	adds	r5, r1, #3
 8009ef8:	f025 0503 	bic.w	r5, r5, #3
 8009efc:	3508      	adds	r5, #8
 8009efe:	2d0c      	cmp	r5, #12
 8009f00:	bf38      	it	cc
 8009f02:	250c      	movcc	r5, #12
 8009f04:	2d00      	cmp	r5, #0
 8009f06:	4606      	mov	r6, r0
 8009f08:	db01      	blt.n	8009f0e <_malloc_r+0x1a>
 8009f0a:	42a9      	cmp	r1, r5
 8009f0c:	d903      	bls.n	8009f16 <_malloc_r+0x22>
 8009f0e:	230c      	movs	r3, #12
 8009f10:	6033      	str	r3, [r6, #0]
 8009f12:	2000      	movs	r0, #0
 8009f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f16:	f000 fc09 	bl	800a72c <__malloc_lock>
 8009f1a:	4921      	ldr	r1, [pc, #132]	; (8009fa0 <_malloc_r+0xac>)
 8009f1c:	680a      	ldr	r2, [r1, #0]
 8009f1e:	4614      	mov	r4, r2
 8009f20:	b99c      	cbnz	r4, 8009f4a <_malloc_r+0x56>
 8009f22:	4f20      	ldr	r7, [pc, #128]	; (8009fa4 <_malloc_r+0xb0>)
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	b923      	cbnz	r3, 8009f32 <_malloc_r+0x3e>
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f000 fb2c 	bl	800a588 <_sbrk_r>
 8009f30:	6038      	str	r0, [r7, #0]
 8009f32:	4629      	mov	r1, r5
 8009f34:	4630      	mov	r0, r6
 8009f36:	f000 fb27 	bl	800a588 <_sbrk_r>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d123      	bne.n	8009f86 <_malloc_r+0x92>
 8009f3e:	230c      	movs	r3, #12
 8009f40:	6033      	str	r3, [r6, #0]
 8009f42:	4630      	mov	r0, r6
 8009f44:	f000 fbf8 	bl	800a738 <__malloc_unlock>
 8009f48:	e7e3      	b.n	8009f12 <_malloc_r+0x1e>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	1b5b      	subs	r3, r3, r5
 8009f4e:	d417      	bmi.n	8009f80 <_malloc_r+0x8c>
 8009f50:	2b0b      	cmp	r3, #11
 8009f52:	d903      	bls.n	8009f5c <_malloc_r+0x68>
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	441c      	add	r4, r3
 8009f58:	6025      	str	r5, [r4, #0]
 8009f5a:	e004      	b.n	8009f66 <_malloc_r+0x72>
 8009f5c:	6863      	ldr	r3, [r4, #4]
 8009f5e:	42a2      	cmp	r2, r4
 8009f60:	bf0c      	ite	eq
 8009f62:	600b      	streq	r3, [r1, #0]
 8009f64:	6053      	strne	r3, [r2, #4]
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 fbe6 	bl	800a738 <__malloc_unlock>
 8009f6c:	f104 000b 	add.w	r0, r4, #11
 8009f70:	1d23      	adds	r3, r4, #4
 8009f72:	f020 0007 	bic.w	r0, r0, #7
 8009f76:	1ac2      	subs	r2, r0, r3
 8009f78:	d0cc      	beq.n	8009f14 <_malloc_r+0x20>
 8009f7a:	1a1b      	subs	r3, r3, r0
 8009f7c:	50a3      	str	r3, [r4, r2]
 8009f7e:	e7c9      	b.n	8009f14 <_malloc_r+0x20>
 8009f80:	4622      	mov	r2, r4
 8009f82:	6864      	ldr	r4, [r4, #4]
 8009f84:	e7cc      	b.n	8009f20 <_malloc_r+0x2c>
 8009f86:	1cc4      	adds	r4, r0, #3
 8009f88:	f024 0403 	bic.w	r4, r4, #3
 8009f8c:	42a0      	cmp	r0, r4
 8009f8e:	d0e3      	beq.n	8009f58 <_malloc_r+0x64>
 8009f90:	1a21      	subs	r1, r4, r0
 8009f92:	4630      	mov	r0, r6
 8009f94:	f000 faf8 	bl	800a588 <_sbrk_r>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d1dd      	bne.n	8009f58 <_malloc_r+0x64>
 8009f9c:	e7cf      	b.n	8009f3e <_malloc_r+0x4a>
 8009f9e:	bf00      	nop
 8009fa0:	2000241c 	.word	0x2000241c
 8009fa4:	20002420 	.word	0x20002420

08009fa8 <__ssputs_r>:
 8009fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fac:	688e      	ldr	r6, [r1, #8]
 8009fae:	429e      	cmp	r6, r3
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	4690      	mov	r8, r2
 8009fb6:	461f      	mov	r7, r3
 8009fb8:	d838      	bhi.n	800a02c <__ssputs_r+0x84>
 8009fba:	898a      	ldrh	r2, [r1, #12]
 8009fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fc0:	d032      	beq.n	800a028 <__ssputs_r+0x80>
 8009fc2:	6825      	ldr	r5, [r4, #0]
 8009fc4:	6909      	ldr	r1, [r1, #16]
 8009fc6:	eba5 0901 	sub.w	r9, r5, r1
 8009fca:	6965      	ldr	r5, [r4, #20]
 8009fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	444b      	add	r3, r9
 8009fd8:	106d      	asrs	r5, r5, #1
 8009fda:	429d      	cmp	r5, r3
 8009fdc:	bf38      	it	cc
 8009fde:	461d      	movcc	r5, r3
 8009fe0:	0553      	lsls	r3, r2, #21
 8009fe2:	d531      	bpl.n	800a048 <__ssputs_r+0xa0>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7ff ff85 	bl	8009ef4 <_malloc_r>
 8009fea:	4606      	mov	r6, r0
 8009fec:	b950      	cbnz	r0, 800a004 <__ssputs_r+0x5c>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	f8ca 3000 	str.w	r3, [sl]
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a004:	6921      	ldr	r1, [r4, #16]
 800a006:	464a      	mov	r2, r9
 800a008:	f000 fb68 	bl	800a6dc <memcpy>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	6126      	str	r6, [r4, #16]
 800a01a:	6165      	str	r5, [r4, #20]
 800a01c:	444e      	add	r6, r9
 800a01e:	eba5 0509 	sub.w	r5, r5, r9
 800a022:	6026      	str	r6, [r4, #0]
 800a024:	60a5      	str	r5, [r4, #8]
 800a026:	463e      	mov	r6, r7
 800a028:	42be      	cmp	r6, r7
 800a02a:	d900      	bls.n	800a02e <__ssputs_r+0x86>
 800a02c:	463e      	mov	r6, r7
 800a02e:	4632      	mov	r2, r6
 800a030:	6820      	ldr	r0, [r4, #0]
 800a032:	4641      	mov	r1, r8
 800a034:	f000 fb60 	bl	800a6f8 <memmove>
 800a038:	68a3      	ldr	r3, [r4, #8]
 800a03a:	6822      	ldr	r2, [r4, #0]
 800a03c:	1b9b      	subs	r3, r3, r6
 800a03e:	4432      	add	r2, r6
 800a040:	60a3      	str	r3, [r4, #8]
 800a042:	6022      	str	r2, [r4, #0]
 800a044:	2000      	movs	r0, #0
 800a046:	e7db      	b.n	800a000 <__ssputs_r+0x58>
 800a048:	462a      	mov	r2, r5
 800a04a:	f000 fb7b 	bl	800a744 <_realloc_r>
 800a04e:	4606      	mov	r6, r0
 800a050:	2800      	cmp	r0, #0
 800a052:	d1e1      	bne.n	800a018 <__ssputs_r+0x70>
 800a054:	6921      	ldr	r1, [r4, #16]
 800a056:	4650      	mov	r0, sl
 800a058:	f7ff fefc 	bl	8009e54 <_free_r>
 800a05c:	e7c7      	b.n	8009fee <__ssputs_r+0x46>
	...

0800a060 <_svfiprintf_r>:
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	4698      	mov	r8, r3
 800a066:	898b      	ldrh	r3, [r1, #12]
 800a068:	061b      	lsls	r3, r3, #24
 800a06a:	b09d      	sub	sp, #116	; 0x74
 800a06c:	4607      	mov	r7, r0
 800a06e:	460d      	mov	r5, r1
 800a070:	4614      	mov	r4, r2
 800a072:	d50e      	bpl.n	800a092 <_svfiprintf_r+0x32>
 800a074:	690b      	ldr	r3, [r1, #16]
 800a076:	b963      	cbnz	r3, 800a092 <_svfiprintf_r+0x32>
 800a078:	2140      	movs	r1, #64	; 0x40
 800a07a:	f7ff ff3b 	bl	8009ef4 <_malloc_r>
 800a07e:	6028      	str	r0, [r5, #0]
 800a080:	6128      	str	r0, [r5, #16]
 800a082:	b920      	cbnz	r0, 800a08e <_svfiprintf_r+0x2e>
 800a084:	230c      	movs	r3, #12
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	f04f 30ff 	mov.w	r0, #4294967295
 800a08c:	e0d1      	b.n	800a232 <_svfiprintf_r+0x1d2>
 800a08e:	2340      	movs	r3, #64	; 0x40
 800a090:	616b      	str	r3, [r5, #20]
 800a092:	2300      	movs	r3, #0
 800a094:	9309      	str	r3, [sp, #36]	; 0x24
 800a096:	2320      	movs	r3, #32
 800a098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a09c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0a0:	2330      	movs	r3, #48	; 0x30
 800a0a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a24c <_svfiprintf_r+0x1ec>
 800a0a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0aa:	f04f 0901 	mov.w	r9, #1
 800a0ae:	4623      	mov	r3, r4
 800a0b0:	469a      	mov	sl, r3
 800a0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b6:	b10a      	cbz	r2, 800a0bc <_svfiprintf_r+0x5c>
 800a0b8:	2a25      	cmp	r2, #37	; 0x25
 800a0ba:	d1f9      	bne.n	800a0b0 <_svfiprintf_r+0x50>
 800a0bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a0c0:	d00b      	beq.n	800a0da <_svfiprintf_r+0x7a>
 800a0c2:	465b      	mov	r3, fp
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	4638      	mov	r0, r7
 800a0ca:	f7ff ff6d 	bl	8009fa8 <__ssputs_r>
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f000 80aa 	beq.w	800a228 <_svfiprintf_r+0x1c8>
 800a0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0d6:	445a      	add	r2, fp
 800a0d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a0da:	f89a 3000 	ldrb.w	r3, [sl]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 80a2 	beq.w	800a228 <_svfiprintf_r+0x1c8>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ee:	f10a 0a01 	add.w	sl, sl, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	9307      	str	r3, [sp, #28]
 800a0f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0fa:	931a      	str	r3, [sp, #104]	; 0x68
 800a0fc:	4654      	mov	r4, sl
 800a0fe:	2205      	movs	r2, #5
 800a100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a104:	4851      	ldr	r0, [pc, #324]	; (800a24c <_svfiprintf_r+0x1ec>)
 800a106:	f7f6 f873 	bl	80001f0 <memchr>
 800a10a:	9a04      	ldr	r2, [sp, #16]
 800a10c:	b9d8      	cbnz	r0, 800a146 <_svfiprintf_r+0xe6>
 800a10e:	06d0      	lsls	r0, r2, #27
 800a110:	bf44      	itt	mi
 800a112:	2320      	movmi	r3, #32
 800a114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a118:	0711      	lsls	r1, r2, #28
 800a11a:	bf44      	itt	mi
 800a11c:	232b      	movmi	r3, #43	; 0x2b
 800a11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a122:	f89a 3000 	ldrb.w	r3, [sl]
 800a126:	2b2a      	cmp	r3, #42	; 0x2a
 800a128:	d015      	beq.n	800a156 <_svfiprintf_r+0xf6>
 800a12a:	9a07      	ldr	r2, [sp, #28]
 800a12c:	4654      	mov	r4, sl
 800a12e:	2000      	movs	r0, #0
 800a130:	f04f 0c0a 	mov.w	ip, #10
 800a134:	4621      	mov	r1, r4
 800a136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a13a:	3b30      	subs	r3, #48	; 0x30
 800a13c:	2b09      	cmp	r3, #9
 800a13e:	d94e      	bls.n	800a1de <_svfiprintf_r+0x17e>
 800a140:	b1b0      	cbz	r0, 800a170 <_svfiprintf_r+0x110>
 800a142:	9207      	str	r2, [sp, #28]
 800a144:	e014      	b.n	800a170 <_svfiprintf_r+0x110>
 800a146:	eba0 0308 	sub.w	r3, r0, r8
 800a14a:	fa09 f303 	lsl.w	r3, r9, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	46a2      	mov	sl, r4
 800a154:	e7d2      	b.n	800a0fc <_svfiprintf_r+0x9c>
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	1d19      	adds	r1, r3, #4
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	9103      	str	r1, [sp, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bfbb      	ittet	lt
 800a162:	425b      	neglt	r3, r3
 800a164:	f042 0202 	orrlt.w	r2, r2, #2
 800a168:	9307      	strge	r3, [sp, #28]
 800a16a:	9307      	strlt	r3, [sp, #28]
 800a16c:	bfb8      	it	lt
 800a16e:	9204      	strlt	r2, [sp, #16]
 800a170:	7823      	ldrb	r3, [r4, #0]
 800a172:	2b2e      	cmp	r3, #46	; 0x2e
 800a174:	d10c      	bne.n	800a190 <_svfiprintf_r+0x130>
 800a176:	7863      	ldrb	r3, [r4, #1]
 800a178:	2b2a      	cmp	r3, #42	; 0x2a
 800a17a:	d135      	bne.n	800a1e8 <_svfiprintf_r+0x188>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	1d1a      	adds	r2, r3, #4
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	9203      	str	r2, [sp, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfb8      	it	lt
 800a188:	f04f 33ff 	movlt.w	r3, #4294967295
 800a18c:	3402      	adds	r4, #2
 800a18e:	9305      	str	r3, [sp, #20]
 800a190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a25c <_svfiprintf_r+0x1fc>
 800a194:	7821      	ldrb	r1, [r4, #0]
 800a196:	2203      	movs	r2, #3
 800a198:	4650      	mov	r0, sl
 800a19a:	f7f6 f829 	bl	80001f0 <memchr>
 800a19e:	b140      	cbz	r0, 800a1b2 <_svfiprintf_r+0x152>
 800a1a0:	2340      	movs	r3, #64	; 0x40
 800a1a2:	eba0 000a 	sub.w	r0, r0, sl
 800a1a6:	fa03 f000 	lsl.w	r0, r3, r0
 800a1aa:	9b04      	ldr	r3, [sp, #16]
 800a1ac:	4303      	orrs	r3, r0
 800a1ae:	3401      	adds	r4, #1
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b6:	4826      	ldr	r0, [pc, #152]	; (800a250 <_svfiprintf_r+0x1f0>)
 800a1b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1bc:	2206      	movs	r2, #6
 800a1be:	f7f6 f817 	bl	80001f0 <memchr>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d038      	beq.n	800a238 <_svfiprintf_r+0x1d8>
 800a1c6:	4b23      	ldr	r3, [pc, #140]	; (800a254 <_svfiprintf_r+0x1f4>)
 800a1c8:	bb1b      	cbnz	r3, 800a212 <_svfiprintf_r+0x1b2>
 800a1ca:	9b03      	ldr	r3, [sp, #12]
 800a1cc:	3307      	adds	r3, #7
 800a1ce:	f023 0307 	bic.w	r3, r3, #7
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	9303      	str	r3, [sp, #12]
 800a1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d8:	4433      	add	r3, r6
 800a1da:	9309      	str	r3, [sp, #36]	; 0x24
 800a1dc:	e767      	b.n	800a0ae <_svfiprintf_r+0x4e>
 800a1de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	e7a5      	b.n	800a134 <_svfiprintf_r+0xd4>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	3401      	adds	r4, #1
 800a1ec:	9305      	str	r3, [sp, #20]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	f04f 0c0a 	mov.w	ip, #10
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1fa:	3a30      	subs	r2, #48	; 0x30
 800a1fc:	2a09      	cmp	r2, #9
 800a1fe:	d903      	bls.n	800a208 <_svfiprintf_r+0x1a8>
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0c5      	beq.n	800a190 <_svfiprintf_r+0x130>
 800a204:	9105      	str	r1, [sp, #20]
 800a206:	e7c3      	b.n	800a190 <_svfiprintf_r+0x130>
 800a208:	fb0c 2101 	mla	r1, ip, r1, r2
 800a20c:	4604      	mov	r4, r0
 800a20e:	2301      	movs	r3, #1
 800a210:	e7f0      	b.n	800a1f4 <_svfiprintf_r+0x194>
 800a212:	ab03      	add	r3, sp, #12
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	462a      	mov	r2, r5
 800a218:	4b0f      	ldr	r3, [pc, #60]	; (800a258 <_svfiprintf_r+0x1f8>)
 800a21a:	a904      	add	r1, sp, #16
 800a21c:	4638      	mov	r0, r7
 800a21e:	f3af 8000 	nop.w
 800a222:	1c42      	adds	r2, r0, #1
 800a224:	4606      	mov	r6, r0
 800a226:	d1d6      	bne.n	800a1d6 <_svfiprintf_r+0x176>
 800a228:	89ab      	ldrh	r3, [r5, #12]
 800a22a:	065b      	lsls	r3, r3, #25
 800a22c:	f53f af2c 	bmi.w	800a088 <_svfiprintf_r+0x28>
 800a230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a232:	b01d      	add	sp, #116	; 0x74
 800a234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a238:	ab03      	add	r3, sp, #12
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	462a      	mov	r2, r5
 800a23e:	4b06      	ldr	r3, [pc, #24]	; (800a258 <_svfiprintf_r+0x1f8>)
 800a240:	a904      	add	r1, sp, #16
 800a242:	4638      	mov	r0, r7
 800a244:	f000 f87a 	bl	800a33c <_printf_i>
 800a248:	e7eb      	b.n	800a222 <_svfiprintf_r+0x1c2>
 800a24a:	bf00      	nop
 800a24c:	0800bdb8 	.word	0x0800bdb8
 800a250:	0800bdc2 	.word	0x0800bdc2
 800a254:	00000000 	.word	0x00000000
 800a258:	08009fa9 	.word	0x08009fa9
 800a25c:	0800bdbe 	.word	0x0800bdbe

0800a260 <_printf_common>:
 800a260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a264:	4616      	mov	r6, r2
 800a266:	4699      	mov	r9, r3
 800a268:	688a      	ldr	r2, [r1, #8]
 800a26a:	690b      	ldr	r3, [r1, #16]
 800a26c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a270:	4293      	cmp	r3, r2
 800a272:	bfb8      	it	lt
 800a274:	4613      	movlt	r3, r2
 800a276:	6033      	str	r3, [r6, #0]
 800a278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a27c:	4607      	mov	r7, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	b10a      	cbz	r2, 800a286 <_printf_common+0x26>
 800a282:	3301      	adds	r3, #1
 800a284:	6033      	str	r3, [r6, #0]
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	0699      	lsls	r1, r3, #26
 800a28a:	bf42      	ittt	mi
 800a28c:	6833      	ldrmi	r3, [r6, #0]
 800a28e:	3302      	addmi	r3, #2
 800a290:	6033      	strmi	r3, [r6, #0]
 800a292:	6825      	ldr	r5, [r4, #0]
 800a294:	f015 0506 	ands.w	r5, r5, #6
 800a298:	d106      	bne.n	800a2a8 <_printf_common+0x48>
 800a29a:	f104 0a19 	add.w	sl, r4, #25
 800a29e:	68e3      	ldr	r3, [r4, #12]
 800a2a0:	6832      	ldr	r2, [r6, #0]
 800a2a2:	1a9b      	subs	r3, r3, r2
 800a2a4:	42ab      	cmp	r3, r5
 800a2a6:	dc26      	bgt.n	800a2f6 <_printf_common+0x96>
 800a2a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2ac:	1e13      	subs	r3, r2, #0
 800a2ae:	6822      	ldr	r2, [r4, #0]
 800a2b0:	bf18      	it	ne
 800a2b2:	2301      	movne	r3, #1
 800a2b4:	0692      	lsls	r2, r2, #26
 800a2b6:	d42b      	bmi.n	800a310 <_printf_common+0xb0>
 800a2b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2bc:	4649      	mov	r1, r9
 800a2be:	4638      	mov	r0, r7
 800a2c0:	47c0      	blx	r8
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	d01e      	beq.n	800a304 <_printf_common+0xa4>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	68e5      	ldr	r5, [r4, #12]
 800a2ca:	6832      	ldr	r2, [r6, #0]
 800a2cc:	f003 0306 	and.w	r3, r3, #6
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	bf08      	it	eq
 800a2d4:	1aad      	subeq	r5, r5, r2
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	6922      	ldr	r2, [r4, #16]
 800a2da:	bf0c      	ite	eq
 800a2dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2e0:	2500      	movne	r5, #0
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	bfc4      	itt	gt
 800a2e6:	1a9b      	subgt	r3, r3, r2
 800a2e8:	18ed      	addgt	r5, r5, r3
 800a2ea:	2600      	movs	r6, #0
 800a2ec:	341a      	adds	r4, #26
 800a2ee:	42b5      	cmp	r5, r6
 800a2f0:	d11a      	bne.n	800a328 <_printf_common+0xc8>
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	e008      	b.n	800a308 <_printf_common+0xa8>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4652      	mov	r2, sl
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	47c0      	blx	r8
 800a300:	3001      	adds	r0, #1
 800a302:	d103      	bne.n	800a30c <_printf_common+0xac>
 800a304:	f04f 30ff 	mov.w	r0, #4294967295
 800a308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30c:	3501      	adds	r5, #1
 800a30e:	e7c6      	b.n	800a29e <_printf_common+0x3e>
 800a310:	18e1      	adds	r1, r4, r3
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	2030      	movs	r0, #48	; 0x30
 800a316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a31a:	4422      	add	r2, r4
 800a31c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a324:	3302      	adds	r3, #2
 800a326:	e7c7      	b.n	800a2b8 <_printf_common+0x58>
 800a328:	2301      	movs	r3, #1
 800a32a:	4622      	mov	r2, r4
 800a32c:	4649      	mov	r1, r9
 800a32e:	4638      	mov	r0, r7
 800a330:	47c0      	blx	r8
 800a332:	3001      	adds	r0, #1
 800a334:	d0e6      	beq.n	800a304 <_printf_common+0xa4>
 800a336:	3601      	adds	r6, #1
 800a338:	e7d9      	b.n	800a2ee <_printf_common+0x8e>
	...

0800a33c <_printf_i>:
 800a33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	460c      	mov	r4, r1
 800a342:	4691      	mov	r9, r2
 800a344:	7e27      	ldrb	r7, [r4, #24]
 800a346:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a348:	2f78      	cmp	r7, #120	; 0x78
 800a34a:	4680      	mov	r8, r0
 800a34c:	469a      	mov	sl, r3
 800a34e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a352:	d807      	bhi.n	800a364 <_printf_i+0x28>
 800a354:	2f62      	cmp	r7, #98	; 0x62
 800a356:	d80a      	bhi.n	800a36e <_printf_i+0x32>
 800a358:	2f00      	cmp	r7, #0
 800a35a:	f000 80d8 	beq.w	800a50e <_printf_i+0x1d2>
 800a35e:	2f58      	cmp	r7, #88	; 0x58
 800a360:	f000 80a3 	beq.w	800a4aa <_printf_i+0x16e>
 800a364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a36c:	e03a      	b.n	800a3e4 <_printf_i+0xa8>
 800a36e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a372:	2b15      	cmp	r3, #21
 800a374:	d8f6      	bhi.n	800a364 <_printf_i+0x28>
 800a376:	a001      	add	r0, pc, #4	; (adr r0, 800a37c <_printf_i+0x40>)
 800a378:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a37c:	0800a3d5 	.word	0x0800a3d5
 800a380:	0800a3e9 	.word	0x0800a3e9
 800a384:	0800a365 	.word	0x0800a365
 800a388:	0800a365 	.word	0x0800a365
 800a38c:	0800a365 	.word	0x0800a365
 800a390:	0800a365 	.word	0x0800a365
 800a394:	0800a3e9 	.word	0x0800a3e9
 800a398:	0800a365 	.word	0x0800a365
 800a39c:	0800a365 	.word	0x0800a365
 800a3a0:	0800a365 	.word	0x0800a365
 800a3a4:	0800a365 	.word	0x0800a365
 800a3a8:	0800a4f5 	.word	0x0800a4f5
 800a3ac:	0800a419 	.word	0x0800a419
 800a3b0:	0800a4d7 	.word	0x0800a4d7
 800a3b4:	0800a365 	.word	0x0800a365
 800a3b8:	0800a365 	.word	0x0800a365
 800a3bc:	0800a517 	.word	0x0800a517
 800a3c0:	0800a365 	.word	0x0800a365
 800a3c4:	0800a419 	.word	0x0800a419
 800a3c8:	0800a365 	.word	0x0800a365
 800a3cc:	0800a365 	.word	0x0800a365
 800a3d0:	0800a4df 	.word	0x0800a4df
 800a3d4:	680b      	ldr	r3, [r1, #0]
 800a3d6:	1d1a      	adds	r2, r3, #4
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	600a      	str	r2, [r1, #0]
 800a3dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a3e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e0a3      	b.n	800a530 <_printf_i+0x1f4>
 800a3e8:	6825      	ldr	r5, [r4, #0]
 800a3ea:	6808      	ldr	r0, [r1, #0]
 800a3ec:	062e      	lsls	r6, r5, #24
 800a3ee:	f100 0304 	add.w	r3, r0, #4
 800a3f2:	d50a      	bpl.n	800a40a <_printf_i+0xce>
 800a3f4:	6805      	ldr	r5, [r0, #0]
 800a3f6:	600b      	str	r3, [r1, #0]
 800a3f8:	2d00      	cmp	r5, #0
 800a3fa:	da03      	bge.n	800a404 <_printf_i+0xc8>
 800a3fc:	232d      	movs	r3, #45	; 0x2d
 800a3fe:	426d      	negs	r5, r5
 800a400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a404:	485e      	ldr	r0, [pc, #376]	; (800a580 <_printf_i+0x244>)
 800a406:	230a      	movs	r3, #10
 800a408:	e019      	b.n	800a43e <_printf_i+0x102>
 800a40a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a40e:	6805      	ldr	r5, [r0, #0]
 800a410:	600b      	str	r3, [r1, #0]
 800a412:	bf18      	it	ne
 800a414:	b22d      	sxthne	r5, r5
 800a416:	e7ef      	b.n	800a3f8 <_printf_i+0xbc>
 800a418:	680b      	ldr	r3, [r1, #0]
 800a41a:	6825      	ldr	r5, [r4, #0]
 800a41c:	1d18      	adds	r0, r3, #4
 800a41e:	6008      	str	r0, [r1, #0]
 800a420:	0628      	lsls	r0, r5, #24
 800a422:	d501      	bpl.n	800a428 <_printf_i+0xec>
 800a424:	681d      	ldr	r5, [r3, #0]
 800a426:	e002      	b.n	800a42e <_printf_i+0xf2>
 800a428:	0669      	lsls	r1, r5, #25
 800a42a:	d5fb      	bpl.n	800a424 <_printf_i+0xe8>
 800a42c:	881d      	ldrh	r5, [r3, #0]
 800a42e:	4854      	ldr	r0, [pc, #336]	; (800a580 <_printf_i+0x244>)
 800a430:	2f6f      	cmp	r7, #111	; 0x6f
 800a432:	bf0c      	ite	eq
 800a434:	2308      	moveq	r3, #8
 800a436:	230a      	movne	r3, #10
 800a438:	2100      	movs	r1, #0
 800a43a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a43e:	6866      	ldr	r6, [r4, #4]
 800a440:	60a6      	str	r6, [r4, #8]
 800a442:	2e00      	cmp	r6, #0
 800a444:	bfa2      	ittt	ge
 800a446:	6821      	ldrge	r1, [r4, #0]
 800a448:	f021 0104 	bicge.w	r1, r1, #4
 800a44c:	6021      	strge	r1, [r4, #0]
 800a44e:	b90d      	cbnz	r5, 800a454 <_printf_i+0x118>
 800a450:	2e00      	cmp	r6, #0
 800a452:	d04d      	beq.n	800a4f0 <_printf_i+0x1b4>
 800a454:	4616      	mov	r6, r2
 800a456:	fbb5 f1f3 	udiv	r1, r5, r3
 800a45a:	fb03 5711 	mls	r7, r3, r1, r5
 800a45e:	5dc7      	ldrb	r7, [r0, r7]
 800a460:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a464:	462f      	mov	r7, r5
 800a466:	42bb      	cmp	r3, r7
 800a468:	460d      	mov	r5, r1
 800a46a:	d9f4      	bls.n	800a456 <_printf_i+0x11a>
 800a46c:	2b08      	cmp	r3, #8
 800a46e:	d10b      	bne.n	800a488 <_printf_i+0x14c>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	07df      	lsls	r7, r3, #31
 800a474:	d508      	bpl.n	800a488 <_printf_i+0x14c>
 800a476:	6923      	ldr	r3, [r4, #16]
 800a478:	6861      	ldr	r1, [r4, #4]
 800a47a:	4299      	cmp	r1, r3
 800a47c:	bfde      	ittt	le
 800a47e:	2330      	movle	r3, #48	; 0x30
 800a480:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a484:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a488:	1b92      	subs	r2, r2, r6
 800a48a:	6122      	str	r2, [r4, #16]
 800a48c:	f8cd a000 	str.w	sl, [sp]
 800a490:	464b      	mov	r3, r9
 800a492:	aa03      	add	r2, sp, #12
 800a494:	4621      	mov	r1, r4
 800a496:	4640      	mov	r0, r8
 800a498:	f7ff fee2 	bl	800a260 <_printf_common>
 800a49c:	3001      	adds	r0, #1
 800a49e:	d14c      	bne.n	800a53a <_printf_i+0x1fe>
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	b004      	add	sp, #16
 800a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4aa:	4835      	ldr	r0, [pc, #212]	; (800a580 <_printf_i+0x244>)
 800a4ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	680e      	ldr	r6, [r1, #0]
 800a4b4:	061f      	lsls	r7, r3, #24
 800a4b6:	f856 5b04 	ldr.w	r5, [r6], #4
 800a4ba:	600e      	str	r6, [r1, #0]
 800a4bc:	d514      	bpl.n	800a4e8 <_printf_i+0x1ac>
 800a4be:	07d9      	lsls	r1, r3, #31
 800a4c0:	bf44      	itt	mi
 800a4c2:	f043 0320 	orrmi.w	r3, r3, #32
 800a4c6:	6023      	strmi	r3, [r4, #0]
 800a4c8:	b91d      	cbnz	r5, 800a4d2 <_printf_i+0x196>
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	f023 0320 	bic.w	r3, r3, #32
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	2310      	movs	r3, #16
 800a4d4:	e7b0      	b.n	800a438 <_printf_i+0xfc>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	f043 0320 	orr.w	r3, r3, #32
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	2378      	movs	r3, #120	; 0x78
 800a4e0:	4828      	ldr	r0, [pc, #160]	; (800a584 <_printf_i+0x248>)
 800a4e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4e6:	e7e3      	b.n	800a4b0 <_printf_i+0x174>
 800a4e8:	065e      	lsls	r6, r3, #25
 800a4ea:	bf48      	it	mi
 800a4ec:	b2ad      	uxthmi	r5, r5
 800a4ee:	e7e6      	b.n	800a4be <_printf_i+0x182>
 800a4f0:	4616      	mov	r6, r2
 800a4f2:	e7bb      	b.n	800a46c <_printf_i+0x130>
 800a4f4:	680b      	ldr	r3, [r1, #0]
 800a4f6:	6826      	ldr	r6, [r4, #0]
 800a4f8:	6960      	ldr	r0, [r4, #20]
 800a4fa:	1d1d      	adds	r5, r3, #4
 800a4fc:	600d      	str	r5, [r1, #0]
 800a4fe:	0635      	lsls	r5, r6, #24
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	d501      	bpl.n	800a508 <_printf_i+0x1cc>
 800a504:	6018      	str	r0, [r3, #0]
 800a506:	e002      	b.n	800a50e <_printf_i+0x1d2>
 800a508:	0671      	lsls	r1, r6, #25
 800a50a:	d5fb      	bpl.n	800a504 <_printf_i+0x1c8>
 800a50c:	8018      	strh	r0, [r3, #0]
 800a50e:	2300      	movs	r3, #0
 800a510:	6123      	str	r3, [r4, #16]
 800a512:	4616      	mov	r6, r2
 800a514:	e7ba      	b.n	800a48c <_printf_i+0x150>
 800a516:	680b      	ldr	r3, [r1, #0]
 800a518:	1d1a      	adds	r2, r3, #4
 800a51a:	600a      	str	r2, [r1, #0]
 800a51c:	681e      	ldr	r6, [r3, #0]
 800a51e:	6862      	ldr	r2, [r4, #4]
 800a520:	2100      	movs	r1, #0
 800a522:	4630      	mov	r0, r6
 800a524:	f7f5 fe64 	bl	80001f0 <memchr>
 800a528:	b108      	cbz	r0, 800a52e <_printf_i+0x1f2>
 800a52a:	1b80      	subs	r0, r0, r6
 800a52c:	6060      	str	r0, [r4, #4]
 800a52e:	6863      	ldr	r3, [r4, #4]
 800a530:	6123      	str	r3, [r4, #16]
 800a532:	2300      	movs	r3, #0
 800a534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a538:	e7a8      	b.n	800a48c <_printf_i+0x150>
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	4632      	mov	r2, r6
 800a53e:	4649      	mov	r1, r9
 800a540:	4640      	mov	r0, r8
 800a542:	47d0      	blx	sl
 800a544:	3001      	adds	r0, #1
 800a546:	d0ab      	beq.n	800a4a0 <_printf_i+0x164>
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	079b      	lsls	r3, r3, #30
 800a54c:	d413      	bmi.n	800a576 <_printf_i+0x23a>
 800a54e:	68e0      	ldr	r0, [r4, #12]
 800a550:	9b03      	ldr	r3, [sp, #12]
 800a552:	4298      	cmp	r0, r3
 800a554:	bfb8      	it	lt
 800a556:	4618      	movlt	r0, r3
 800a558:	e7a4      	b.n	800a4a4 <_printf_i+0x168>
 800a55a:	2301      	movs	r3, #1
 800a55c:	4632      	mov	r2, r6
 800a55e:	4649      	mov	r1, r9
 800a560:	4640      	mov	r0, r8
 800a562:	47d0      	blx	sl
 800a564:	3001      	adds	r0, #1
 800a566:	d09b      	beq.n	800a4a0 <_printf_i+0x164>
 800a568:	3501      	adds	r5, #1
 800a56a:	68e3      	ldr	r3, [r4, #12]
 800a56c:	9903      	ldr	r1, [sp, #12]
 800a56e:	1a5b      	subs	r3, r3, r1
 800a570:	42ab      	cmp	r3, r5
 800a572:	dcf2      	bgt.n	800a55a <_printf_i+0x21e>
 800a574:	e7eb      	b.n	800a54e <_printf_i+0x212>
 800a576:	2500      	movs	r5, #0
 800a578:	f104 0619 	add.w	r6, r4, #25
 800a57c:	e7f5      	b.n	800a56a <_printf_i+0x22e>
 800a57e:	bf00      	nop
 800a580:	0800bdc9 	.word	0x0800bdc9
 800a584:	0800bdda 	.word	0x0800bdda

0800a588 <_sbrk_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d06      	ldr	r5, [pc, #24]	; (800a5a4 <_sbrk_r+0x1c>)
 800a58c:	2300      	movs	r3, #0
 800a58e:	4604      	mov	r4, r0
 800a590:	4608      	mov	r0, r1
 800a592:	602b      	str	r3, [r5, #0]
 800a594:	f7f7 f98e 	bl	80018b4 <_sbrk>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_sbrk_r+0x1a>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_sbrk_r+0x1a>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	20002eec 	.word	0x20002eec

0800a5a8 <__sread>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b0:	f000 f8ee 	bl	800a790 <_read_r>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	bfab      	itete	ge
 800a5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a5bc:	181b      	addge	r3, r3, r0
 800a5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5c2:	bfac      	ite	ge
 800a5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5c6:	81a3      	strhlt	r3, [r4, #12]
 800a5c8:	bd10      	pop	{r4, pc}

0800a5ca <__swrite>:
 800a5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	898b      	ldrh	r3, [r1, #12]
 800a5d2:	05db      	lsls	r3, r3, #23
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	4616      	mov	r6, r2
 800a5da:	d505      	bpl.n	800a5e8 <__swrite+0x1e>
 800a5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f000 f868 	bl	800a6b8 <_lseek_r>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5f2:	81a3      	strh	r3, [r4, #12]
 800a5f4:	4632      	mov	r2, r6
 800a5f6:	463b      	mov	r3, r7
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fe:	f000 b817 	b.w	800a630 <_write_r>

0800a602 <__sseek>:
 800a602:	b510      	push	{r4, lr}
 800a604:	460c      	mov	r4, r1
 800a606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60a:	f000 f855 	bl	800a6b8 <_lseek_r>
 800a60e:	1c43      	adds	r3, r0, #1
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	bf15      	itete	ne
 800a614:	6560      	strne	r0, [r4, #84]	; 0x54
 800a616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a61e:	81a3      	strheq	r3, [r4, #12]
 800a620:	bf18      	it	ne
 800a622:	81a3      	strhne	r3, [r4, #12]
 800a624:	bd10      	pop	{r4, pc}

0800a626 <__sclose>:
 800a626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62a:	f000 b813 	b.w	800a654 <_close_r>
	...

0800a630 <_write_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d07      	ldr	r5, [pc, #28]	; (800a650 <_write_r+0x20>)
 800a634:	4604      	mov	r4, r0
 800a636:	4608      	mov	r0, r1
 800a638:	4611      	mov	r1, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f7f7 f8e7 	bl	8001812 <_write>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_write_r+0x1e>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_write_r+0x1e>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20002eec 	.word	0x20002eec

0800a654 <_close_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4d06      	ldr	r5, [pc, #24]	; (800a670 <_close_r+0x1c>)
 800a658:	2300      	movs	r3, #0
 800a65a:	4604      	mov	r4, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	602b      	str	r3, [r5, #0]
 800a660:	f7f7 f8f3 	bl	800184a <_close>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_close_r+0x1a>
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_close_r+0x1a>
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	20002eec 	.word	0x20002eec

0800a674 <_fstat_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d07      	ldr	r5, [pc, #28]	; (800a694 <_fstat_r+0x20>)
 800a678:	2300      	movs	r3, #0
 800a67a:	4604      	mov	r4, r0
 800a67c:	4608      	mov	r0, r1
 800a67e:	4611      	mov	r1, r2
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	f7f7 f8ee 	bl	8001862 <_fstat>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	d102      	bne.n	800a690 <_fstat_r+0x1c>
 800a68a:	682b      	ldr	r3, [r5, #0]
 800a68c:	b103      	cbz	r3, 800a690 <_fstat_r+0x1c>
 800a68e:	6023      	str	r3, [r4, #0]
 800a690:	bd38      	pop	{r3, r4, r5, pc}
 800a692:	bf00      	nop
 800a694:	20002eec 	.word	0x20002eec

0800a698 <_isatty_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d06      	ldr	r5, [pc, #24]	; (800a6b4 <_isatty_r+0x1c>)
 800a69c:	2300      	movs	r3, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	602b      	str	r3, [r5, #0]
 800a6a4:	f7f7 f8ed 	bl	8001882 <_isatty>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d102      	bne.n	800a6b2 <_isatty_r+0x1a>
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	b103      	cbz	r3, 800a6b2 <_isatty_r+0x1a>
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	20002eec 	.word	0x20002eec

0800a6b8 <_lseek_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d07      	ldr	r5, [pc, #28]	; (800a6d8 <_lseek_r+0x20>)
 800a6bc:	4604      	mov	r4, r0
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f7f7 f8e6 	bl	8001898 <_lseek>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_lseek_r+0x1e>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_lseek_r+0x1e>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	20002eec 	.word	0x20002eec

0800a6dc <memcpy>:
 800a6dc:	440a      	add	r2, r1
 800a6de:	4291      	cmp	r1, r2
 800a6e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6e4:	d100      	bne.n	800a6e8 <memcpy+0xc>
 800a6e6:	4770      	bx	lr
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6f2:	4291      	cmp	r1, r2
 800a6f4:	d1f9      	bne.n	800a6ea <memcpy+0xe>
 800a6f6:	bd10      	pop	{r4, pc}

0800a6f8 <memmove>:
 800a6f8:	4288      	cmp	r0, r1
 800a6fa:	b510      	push	{r4, lr}
 800a6fc:	eb01 0402 	add.w	r4, r1, r2
 800a700:	d902      	bls.n	800a708 <memmove+0x10>
 800a702:	4284      	cmp	r4, r0
 800a704:	4623      	mov	r3, r4
 800a706:	d807      	bhi.n	800a718 <memmove+0x20>
 800a708:	1e43      	subs	r3, r0, #1
 800a70a:	42a1      	cmp	r1, r4
 800a70c:	d008      	beq.n	800a720 <memmove+0x28>
 800a70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a712:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a716:	e7f8      	b.n	800a70a <memmove+0x12>
 800a718:	4402      	add	r2, r0
 800a71a:	4601      	mov	r1, r0
 800a71c:	428a      	cmp	r2, r1
 800a71e:	d100      	bne.n	800a722 <memmove+0x2a>
 800a720:	bd10      	pop	{r4, pc}
 800a722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a72a:	e7f7      	b.n	800a71c <memmove+0x24>

0800a72c <__malloc_lock>:
 800a72c:	4801      	ldr	r0, [pc, #4]	; (800a734 <__malloc_lock+0x8>)
 800a72e:	f7ff bb2b 	b.w	8009d88 <__retarget_lock_acquire_recursive>
 800a732:	bf00      	nop
 800a734:	20002ee4 	.word	0x20002ee4

0800a738 <__malloc_unlock>:
 800a738:	4801      	ldr	r0, [pc, #4]	; (800a740 <__malloc_unlock+0x8>)
 800a73a:	f7ff bb26 	b.w	8009d8a <__retarget_lock_release_recursive>
 800a73e:	bf00      	nop
 800a740:	20002ee4 	.word	0x20002ee4

0800a744 <_realloc_r>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	4607      	mov	r7, r0
 800a748:	4614      	mov	r4, r2
 800a74a:	460e      	mov	r6, r1
 800a74c:	b921      	cbnz	r1, 800a758 <_realloc_r+0x14>
 800a74e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a752:	4611      	mov	r1, r2
 800a754:	f7ff bbce 	b.w	8009ef4 <_malloc_r>
 800a758:	b922      	cbnz	r2, 800a764 <_realloc_r+0x20>
 800a75a:	f7ff fb7b 	bl	8009e54 <_free_r>
 800a75e:	4625      	mov	r5, r4
 800a760:	4628      	mov	r0, r5
 800a762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a764:	f000 f826 	bl	800a7b4 <_malloc_usable_size_r>
 800a768:	42a0      	cmp	r0, r4
 800a76a:	d20f      	bcs.n	800a78c <_realloc_r+0x48>
 800a76c:	4621      	mov	r1, r4
 800a76e:	4638      	mov	r0, r7
 800a770:	f7ff fbc0 	bl	8009ef4 <_malloc_r>
 800a774:	4605      	mov	r5, r0
 800a776:	2800      	cmp	r0, #0
 800a778:	d0f2      	beq.n	800a760 <_realloc_r+0x1c>
 800a77a:	4631      	mov	r1, r6
 800a77c:	4622      	mov	r2, r4
 800a77e:	f7ff ffad 	bl	800a6dc <memcpy>
 800a782:	4631      	mov	r1, r6
 800a784:	4638      	mov	r0, r7
 800a786:	f7ff fb65 	bl	8009e54 <_free_r>
 800a78a:	e7e9      	b.n	800a760 <_realloc_r+0x1c>
 800a78c:	4635      	mov	r5, r6
 800a78e:	e7e7      	b.n	800a760 <_realloc_r+0x1c>

0800a790 <_read_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4d07      	ldr	r5, [pc, #28]	; (800a7b0 <_read_r+0x20>)
 800a794:	4604      	mov	r4, r0
 800a796:	4608      	mov	r0, r1
 800a798:	4611      	mov	r1, r2
 800a79a:	2200      	movs	r2, #0
 800a79c:	602a      	str	r2, [r5, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f7f7 f81a 	bl	80017d8 <_read>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_read_r+0x1e>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_read_r+0x1e>
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	20002eec 	.word	0x20002eec

0800a7b4 <_malloc_usable_size_r>:
 800a7b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7b8:	1f18      	subs	r0, r3, #4
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	bfbc      	itt	lt
 800a7be:	580b      	ldrlt	r3, [r1, r0]
 800a7c0:	18c0      	addlt	r0, r0, r3
 800a7c2:	4770      	bx	lr

0800a7c4 <_init>:
 800a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c6:	bf00      	nop
 800a7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ca:	bc08      	pop	{r3}
 800a7cc:	469e      	mov	lr, r3
 800a7ce:	4770      	bx	lr

0800a7d0 <_fini>:
 800a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d2:	bf00      	nop
 800a7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7d6:	bc08      	pop	{r3}
 800a7d8:	469e      	mov	lr, r3
 800a7da:	4770      	bx	lr
