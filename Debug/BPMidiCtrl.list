
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dfc  08013958  08013958  00023958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015754  08015754  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08015754  08015754  00025754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801575c  0801575c  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801575c  0801575c  0002575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015760  08015760  00025760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08015764  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a4  20000334  08015a98  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034d8  08015a98  000334d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e328  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006311  00000000  00000000  0005e68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  000649a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020f17  00000000  00000000  000666a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000285e5  00000000  00000000  000875b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6dab  00000000  00000000  000afb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00156947  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001b08  00000000  00000000  001569a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008c2c  00000000  00000000  001584a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000334 	.word	0x20000334
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801393c 	.word	0x0801393c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000338 	.word	0x20000338
 80001dc:	0801393c 	.word	0x0801393c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a4 	b.w	8000fec <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468c      	mov	ip, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8083 	bne.w	8000e3e <__udivmoddi4+0x116>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d947      	bls.n	8000dce <__udivmoddi4+0xa6>
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b142      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	f1c2 0020 	rsb	r0, r2, #32
 8000d48:	fa24 f000 	lsr.w	r0, r4, r0
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	4097      	lsls	r7, r2
 8000d50:	ea40 0c01 	orr.w	ip, r0, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d60:	fa1f fe87 	uxth.w	lr, r7
 8000d64:	fb08 c116 	mls	r1, r8, r6, ip
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 8119 	bcs.w	8000fb0 <__udivmoddi4+0x288>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8116 	bls.w	8000fb0 <__udivmoddi4+0x288>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8105 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f240 8102 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xaa>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d150      	bne.n	8000e7c <__udivmoddi4+0x154>
 8000dda:	1bcb      	subs	r3, r1, r7
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fa1f f887 	uxth.w	r8, r7
 8000de4:	2601      	movs	r6, #1
 8000de6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dea:	0c21      	lsrs	r1, r4, #16
 8000dec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb08 f30c 	mul.w	r3, r8, ip
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0xe2>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	f200 80e9 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1ac9      	subs	r1, r1, r3
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x10a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80d9 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e7bf      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x12e>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80b1 	beq.w	8000faa <__udivmoddi4+0x282>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x1cc>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x140>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80b8 	bhi.w	8000fd8 <__udivmoddi4+0x2b0>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	468c      	mov	ip, r1
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0a8      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7a:	e7a5      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f603 	lsr.w	r6, r0, r3
 8000e84:	4097      	lsls	r7, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	4330      	orrs	r0, r6
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea4:	fb06 f108 	mul.w	r1, r6, r8
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	fa04 f402 	lsl.w	r4, r4, r2
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x19c>
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb6:	f080 808d 	bcs.w	8000fd4 <__udivmoddi4+0x2ac>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 808a 	bls.w	8000fd4 <__udivmoddi4+0x2ac>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	443b      	add	r3, r7
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b281      	uxth	r1, r0
 8000ec8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ecc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed4:	fb00 f308 	mul.w	r3, r0, r8
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d907      	bls.n	8000eec <__udivmoddi4+0x1c4>
 8000edc:	1879      	adds	r1, r7, r1
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d273      	bcs.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d971      	bls.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4439      	add	r1, r7
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef2:	e778      	b.n	8000de6 <__udivmoddi4+0xbe>
 8000ef4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef8:	fa03 f406 	lsl.w	r4, r3, r6
 8000efc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f00:	431c      	orrs	r4, r3
 8000f02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0c3b      	lsrs	r3, r7, #16
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fa1f f884 	uxth.w	r8, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f26:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f30:	fa00 f306 	lsl.w	r3, r0, r6
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x220>
 8000f36:	1861      	adds	r1, r4, r1
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d248      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f3e:	458a      	cmp	sl, r1
 8000f40:	d946      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	4421      	add	r1, r4
 8000f48:	eba1 010a 	sub.w	r1, r1, sl
 8000f4c:	b2bf      	uxth	r7, r7
 8000f4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x24a>
 8000f62:	19e7      	adds	r7, r4, r7
 8000f64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f68:	d22e      	bcs.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d92c      	bls.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	4427      	add	r7, r4
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba7 0708 	sub.w	r7, r7, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454f      	cmp	r7, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	d31a      	bcc.n	8000fbc <__udivmoddi4+0x294>
 8000f86:	d017      	beq.n	8000fb8 <__udivmoddi4+0x290>
 8000f88:	b15d      	cbz	r5, 8000fa2 <__udivmoddi4+0x27a>
 8000f8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f96:	40f2      	lsrs	r2, r6
 8000f98:	ea4c 0202 	orr.w	r2, ip, r2
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e70b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6fd      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fb8:	4543      	cmp	r3, r8
 8000fba:	d2e5      	bcs.n	8000f88 <__udivmoddi4+0x260>
 8000fbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7df      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e7d2      	b.n	8000f72 <__udivmoddi4+0x24a>
 8000fcc:	4660      	mov	r0, ip
 8000fce:	e78d      	b.n	8000eec <__udivmoddi4+0x1c4>
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	e7b9      	b.n	8000f48 <__udivmoddi4+0x220>
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	e775      	b.n	8000ec4 <__udivmoddi4+0x19c>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	e74a      	b.n	8000e72 <__udivmoddi4+0x14a>
 8000fdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe0:	4439      	add	r1, r7
 8000fe2:	e713      	b.n	8000e0c <__udivmoddi4+0xe4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	443c      	add	r4, r7
 8000fe8:	e724      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <Knob_Map>:
void Knob_Free(Knob *k) {
    free(k->sub_labels);
}

// Maps values from (0, max_values-1) to (0, m)
uint8_t Knob_Map(Knob *k, uint8_t value, uint8_t m) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	78ba      	ldrb	r2, [r7, #2]
 8001004:	fb02 f203 	mul.w	r2, r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7f1b      	ldrb	r3, [r3, #28]
 800100c:	3b01      	subs	r3, #1
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ffc2 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80010be:	f001 ff9f 	bl	8003000 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80010c2:	f000 f8bb 	bl	800123c <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80010c6:	f000 fa03 	bl	80014d0 <MX_GPIO_Init>
    MX_ADC1_Init();
 80010ca:	f000 f939 	bl	8001340 <MX_ADC1_Init>
    MX_I2C1_Init();
 80010ce:	f000 f98b 	bl	80013e8 <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 80010d2:	f00d fc65 	bl	800e9a0 <MX_USB_DEVICE_Init>
    MX_SDIO_SD_Init();
 80010d6:	f000 f9db 	bl	8001490 <MX_SDIO_SD_Init>
    MX_RTC_Init();
 80010da:	f000 f9b3 	bl	8001444 <MX_RTC_Init>
    MX_FATFS_Init();
 80010de:	f008 fe83 	bl	8009de8 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 80010e2:	f001 fee3 	bl	8002eac <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 80010e6:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <main+0x16c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <main+0x170>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffbe 	bl	8001074 <SysTick_Config>

    SD_LoadPreset("knobs1.json");
 80010f8:	484c      	ldr	r0, [pc, #304]	; (800122c <main+0x174>)
 80010fa:	f000 fe67 	bl	8001dcc <SD_LoadPreset>

    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	e010      	b.n	8001126 <main+0x6e>
        ssd1306_Init(&knobs[i]);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	015b      	lsls	r3, r3, #5
 8001108:	4a49      	ldr	r2, [pc, #292]	; (8001230 <main+0x178>)
 800110a:	4413      	add	r3, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fef3 	bl	8001ef8 <ssd1306_Init>
        ssd1306_WriteKnob(&knobs[i]);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	4a46      	ldr	r2, [pc, #280]	; (8001230 <main+0x178>)
 8001118:	4413      	add	r3, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 f84a 	bl	80021b4 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	3301      	adds	r3, #1
 8001124:	71fb      	strb	r3, [r7, #7]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d9eb      	bls.n	8001104 <main+0x4c>
    }

    while (1) {
        ADC_Read_Knobs();
 800112c:	f000 fa92 	bl	8001654 <ADC_Read_Knobs>

        if (isMenuActive) {
 8001130:	4b40      	ldr	r3, [pc, #256]	; (8001234 <main+0x17c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d019      	beq.n	800116c <main+0xb4>
            SD_FetchPresetNames();
 8001138:	f000 fd12 	bl	8001b60 <SD_FetchPresetNames>

            ssd1306_WritePresets(knobs);
 800113c:	483c      	ldr	r0, [pc, #240]	; (8001230 <main+0x178>)
 800113e:	f001 f98d 	bl	800245c <ssd1306_WritePresets>

            while (isMenuActive) {
 8001142:	bf00      	nop
 8001144:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <main+0x17c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1fb      	bne.n	8001144 <main+0x8c>
            }

            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	71bb      	strb	r3, [r7, #6]
 8001150:	e009      	b.n	8001166 <main+0xae>
                ssd1306_WriteKnob(&knobs[i]);
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	015b      	lsls	r3, r3, #5
 8001156:	4a36      	ldr	r2, [pc, #216]	; (8001230 <main+0x178>)
 8001158:	4413      	add	r3, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f001 f82a 	bl	80021b4 <ssd1306_WriteKnob>
            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	3301      	adds	r3, #1
 8001164:	71bb      	strb	r3, [r7, #6]
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d9f2      	bls.n	8001152 <main+0x9a>
            }
        }

        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 800116c:	2300      	movs	r3, #0
 800116e:	717b      	strb	r3, [r7, #5]
 8001170:	e053      	b.n	800121a <main+0x162>
            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 8001172:	797b      	ldrb	r3, [r7, #5]
 8001174:	015b      	lsls	r3, r3, #5
 8001176:	4a2e      	ldr	r2, [pc, #184]	; (8001230 <main+0x178>)
 8001178:	441a      	add	r2, r3
 800117a:	797b      	ldrb	r3, [r7, #5]
 800117c:	492e      	ldr	r1, [pc, #184]	; (8001238 <main+0x180>)
 800117e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4619      	mov	r1, r3
 8001186:	4610      	mov	r0, r2
 8001188:	f000 fb0c 	bl	80017a4 <MIDI_Scale_And_Filter>
 800118c:	4603      	mov	r3, r0
 800118e:	713b      	strb	r3, [r7, #4]

            if (curr_MIDI_val != knobs[i].value) {
 8001190:	797b      	ldrb	r3, [r7, #5]
 8001192:	4a27      	ldr	r2, [pc, #156]	; (8001230 <main+0x178>)
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	4413      	add	r3, r2
 8001198:	331b      	adds	r3, #27
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	793a      	ldrb	r2, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d038      	beq.n	8001214 <main+0x15c>
                knobs[i].value = curr_MIDI_val;
 80011a2:	797b      	ldrb	r3, [r7, #5]
 80011a4:	4a22      	ldr	r2, [pc, #136]	; (8001230 <main+0x178>)
 80011a6:	015b      	lsls	r3, r3, #5
 80011a8:	4413      	add	r3, r2
 80011aa:	331b      	adds	r3, #27
 80011ac:	793a      	ldrb	r2, [r7, #4]
 80011ae:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&knobs[i]);
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	015b      	lsls	r3, r3, #5
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <main+0x178>)
 80011b6:	4413      	add	r3, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fffb 	bl	80021b4 <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <main+0x178>)
 80011c2:	015b      	lsls	r3, r3, #5
 80011c4:	4413      	add	r3, r2
 80011c6:	331b      	adds	r3, #27
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	797b      	ldrb	r3, [r7, #5]
 80011cc:	4918      	ldr	r1, [pc, #96]	; (8001230 <main+0x178>)
 80011ce:	015b      	lsls	r3, r3, #5
 80011d0:	440b      	add	r3, r1
 80011d2:	331a      	adds	r3, #26
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d106      	bne.n	80011e8 <main+0x130>
 80011da:	797b      	ldrb	r3, [r7, #5]
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <main+0x178>)
 80011de:	015b      	lsls	r3, r3, #5
 80011e0:	4413      	add	r3, r2
 80011e2:	331e      	adds	r3, #30
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 80011e8:	797b      	ldrb	r3, [r7, #5]
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <main+0x178>)
 80011ec:	015b      	lsls	r3, r3, #5
 80011ee:	4413      	add	r3, r2
 80011f0:	331e      	adds	r3, #30
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10d      	bne.n	8001214 <main+0x15c>
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	015b      	lsls	r3, r3, #5
 80011fc:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <main+0x178>)
 80011fe:	441a      	add	r2, r3
 8001200:	797b      	ldrb	r3, [r7, #5]
 8001202:	490b      	ldr	r1, [pc, #44]	; (8001230 <main+0x178>)
 8001204:	015b      	lsls	r3, r3, #5
 8001206:	440b      	add	r3, r1
 8001208:	331b      	adds	r3, #27
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	4610      	mov	r0, r2
 8001210:	f000 faad 	bl	800176e <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	3301      	adds	r3, #1
 8001218:	717b      	strb	r3, [r7, #5]
 800121a:	797b      	ldrb	r3, [r7, #5]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d9a8      	bls.n	8001172 <main+0xba>
        ADC_Read_Knobs();
 8001220:	e784      	b.n	800112c <main+0x74>
 8001222:	bf00      	nop
 8001224:	20000048 	.word	0x20000048
 8001228:	cccccccd 	.word	0xcccccccd
 800122c:	08013958 	.word	0x08013958
 8001230:	20002580 	.word	0x20002580
 8001234:	2000269c 	.word	0x2000269c
 8001238:	20000350 	.word	0x20000350

0800123c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09a      	sub	sp, #104	; 0x68
 8001240:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001242:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001246:	2230      	movs	r2, #48	; 0x30
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f00f f914 	bl	8010478 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <SystemClock_Config+0xfc>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a2f      	ldr	r2, [pc, #188]	; (8001338 <SystemClock_Config+0xfc>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <SystemClock_Config+0xfc>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b2a      	ldr	r3, [pc, #168]	; (800133c <SystemClock_Config+0x100>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a29      	ldr	r2, [pc, #164]	; (800133c <SystemClock_Config+0x100>)
 8001298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <SystemClock_Config+0x100>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80012aa:	2309      	movs	r3, #9
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012b4:	2301      	movs	r3, #1
 80012b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c0:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 25;
 80012c2:	2319      	movs	r3, #25
 80012c4:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 192;
 80012c6:	23c0      	movs	r3, #192	; 0xc0
 80012c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ca:	2302      	movs	r3, #2
 80012cc:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ce:	2304      	movs	r3, #4
 80012d0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d6:	4618      	mov	r0, r3
 80012d8:	f004 fd5a 	bl	8005d90 <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xaa>
            {
        Error_Handler();
 80012e2:	f000 fa3f 	bl	8001764 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	2103      	movs	r1, #3
 8001302:	4618      	mov	r0, r3
 8001304:	f004 ffbc 	bl	8006280 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xd6>
            {
        Error_Handler();
 800130e:	f000 fa29 	bl	8001764 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001312:	2302      	movs	r3, #2
 8001314:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800131a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4618      	mov	r0, r3
 8001322:	f005 f969 	bl	80065f8 <HAL_RCCEx_PeriphCLKConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0xf4>
            {
        Error_Handler();
 800132c:	f000 fa1a 	bl	8001764 <Error_Handler>
    }
}
 8001330:	bf00      	nop
 8001332:	3768      	adds	r7, #104	; 0x68
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40007000 	.word	0x40007000

08001340 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <MX_ADC1_Init+0xa0>)
 8001356:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <MX_ADC1_Init+0x9c>)
 800135a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800135e:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001366:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_ADC1_Init+0x9c>)
 800136a:	2201      	movs	r2, #1
 800136c:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001370:	2201      	movs	r2, #1
 8001372:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_ADC1_Init+0x9c>)
 800137e:	2200      	movs	r2, #0
 8001380:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001384:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <MX_ADC1_Init+0xa4>)
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_ADC1_Init+0x9c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001390:	2201      	movs	r2, #1
 8001392:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_ADC1_Init+0x9c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a2:	480e      	ldr	r0, [pc, #56]	; (80013dc <MX_ADC1_Init+0x9c>)
 80013a4:	f001 fec2 	bl	800312c <HAL_ADC_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0x72>
            {
        Error_Handler();
 80013ae:	f000 f9d9 	bl	8001764 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_ADC1_Init+0x9c>)
 80013c4:	f002 f876 	bl	80034b4 <HAL_ADC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0x92>
            {
        Error_Handler();
 80013ce:	f000 f9c9 	bl	8001764 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20002654 	.word	0x20002654
 80013e0:	40012000 	.word	0x40012000
 80013e4:	0f000001 	.word	0x0f000001

080013e8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_I2C1_Init+0x50>)
 80013ee:	4a13      	ldr	r2, [pc, #76]	; (800143c <MX_I2C1_Init+0x54>)
 80013f0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 800000;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_I2C1_Init+0x50>)
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_I2C1_Init+0x58>)
 80013f6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_I2C1_Init+0x50>)
 8001406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_I2C1_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_I2C1_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_I2C1_Init+0x50>)
 8001426:	f002 fd55 	bl	8003ed4 <HAL_I2C_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x4c>
            {
        Error_Handler();
 8001430:	f000 f998 	bl	8001764 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20002600 	.word	0x20002600
 800143c:	40005400 	.word	0x40005400
 8001440:	000c3500 	.word	0x000c3500

08001444 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_RTC_Init+0x44>)
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <MX_RTC_Init+0x48>)
 800144c:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_RTC_Init+0x44>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_RTC_Init+0x44>)
 8001456:	227f      	movs	r2, #127	; 0x7f
 8001458:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_RTC_Init+0x44>)
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_RTC_Init+0x44>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_RTC_Init+0x44>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_RTC_Init+0x44>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_RTC_Init+0x44>)
 8001474:	f005 f9b0 	bl	80067d8 <HAL_RTC_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_RTC_Init+0x3e>
            {
        Error_Handler();
 800147e:	f000 f971 	bl	8001764 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200026a0 	.word	0x200026a0
 800148c:	40002800 	.word	0x40002800

08001490 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 8001496:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <MX_SDIO_SD_Init+0x3c>)
 8001498:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 12;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	200026fc 	.word	0x200026fc
 80014cc:	40012c00 	.word	0x40012c00

080014d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <MX_GPIO_Init+0x108>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a3a      	ldr	r2, [pc, #232]	; (80015d8 <MX_GPIO_Init+0x108>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <MX_GPIO_Init+0x108>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a33      	ldr	r2, [pc, #204]	; (80015d8 <MX_GPIO_Init+0x108>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <MX_GPIO_Init+0x108>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001556:	2200      	movs	r2, #0
 8001558:	f247 710f 	movw	r1, #30479	; 0x770f
 800155c:	481f      	ldr	r0, [pc, #124]	; (80015dc <MX_GPIO_Init+0x10c>)
 800155e:	f002 fc85 	bl	8003e6c <HAL_GPIO_WritePin>
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : Detect_SDIO_Pin */
    GPIO_InitStruct.Pin = Detect_SDIO_Pin;
 8001562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800156c:	2302      	movs	r3, #2
 800156e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Detect_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	481a      	ldr	r0, [pc, #104]	; (80015e0 <MX_GPIO_Init+0x110>)
 8001578:	f002 fadc 	bl	8003b34 <HAL_GPIO_Init>

    /*Configure GPIO pin : Button_6_Pin */
    GPIO_InitStruct.Pin = Button_6_Pin;
 800157c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001586:	2301      	movs	r3, #1
 8001588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Button_6_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <MX_GPIO_Init+0x110>)
 8001592:	f002 facf 	bl	8003b34 <HAL_GPIO_Init>

    /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
     Button_5_Pin */
    GPIO_InitStruct.Pin = Button_1_Pin | Button_2_Pin | Button_3_Pin | Button_4_Pin
 8001596:	f248 43b0 	movw	r3, #33968	; 0x84b0
 800159a:	617b      	str	r3, [r7, #20]
            | Button_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <MX_GPIO_Init+0x114>)
 80015ac:	f002 fac2 	bl	8003b34 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
     LED_5_Pin LED_6_Pin AMUX_S1_Pin AMUX_S0_Pin
     AMUX_S2_Pin AMUX_S3_Pin */
    GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 80015b0:	f247 730f 	movw	r3, #30479	; 0x770f
 80015b4:	617b      	str	r3, [r7, #20]
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_GPIO_Init+0x10c>)
 80015ca:	f002 fab3 	bl	8003b34 <HAL_GPIO_Init>

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020000 	.word	0x40020000

080015e8 <ADC_Mux_Select>:

/* USER CODE BEGIN 4 */
void ADC_Mux_Select(uint8_t c) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
    if (c > NUM_ADC_CHANNELS) return;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d824      	bhi.n	8001642 <ADC_Mux_Select+0x5a>

    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e01d      	b.n	800163a <ADC_Mux_Select+0x52>
        if (c & (1 << i)) {
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	fa42 f303 	asr.w	r3, r2, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <ADC_Mux_Select+0x3a>
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_SET);
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <ADC_Mux_Select+0x64>)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <ADC_Mux_Select+0x68>)
 800161c:	f002 fc26 	bl	8003e6c <HAL_GPIO_WritePin>
 8001620:	e008      	b.n	8001634 <ADC_Mux_Select+0x4c>
        } else {
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_RESET);
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <ADC_Mux_Select+0x64>)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	4808      	ldr	r0, [pc, #32]	; (8001650 <ADC_Mux_Select+0x68>)
 8001630:	f002 fc1c 	bl	8003e6c <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b03      	cmp	r3, #3
 800163e:	ddde      	ble.n	80015fe <ADC_Mux_Select+0x16>
 8001640:	e000      	b.n	8001644 <ADC_Mux_Select+0x5c>
    if (c > NUM_ADC_CHANNELS) return;
 8001642:	bf00      	nop
        }
    }
}
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	08014ea8 	.word	0x08014ea8
 8001650:	40020400 	.word	0x40020400

08001654 <ADC_Read_Knobs>:

void ADC_Read_Knobs() {
 8001654:	b580      	push	{r7, lr}
 8001656:	b096      	sub	sp, #88	; 0x58
 8001658:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001660:	e070      	b.n	8001744 <ADC_Read_Knobs+0xf0>
        uint16_t adcBuf[NUM_ADC_SAMPLES];

        ADC_Mux_Select(channel);
 8001662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ffbe 	bl	80015e8 <ADC_Mux_Select>

        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 800166c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 800167a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800167e:	4a36      	ldr	r2, [pc, #216]	; (8001758 <ADC_Read_Knobs+0x104>)
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	643b      	str	r3, [r7, #64]	; 0x40
        sConfig.Rank = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	647b      	str	r3, [r7, #68]	; 0x44
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800168a:	2300      	movs	r3, #0
 800168c:	64bb      	str	r3, [r7, #72]	; 0x48
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800168e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001692:	4619      	mov	r1, r3
 8001694:	4831      	ldr	r0, [pc, #196]	; (800175c <ADC_Read_Knobs+0x108>)
 8001696:	f001 ff0d 	bl	80034b4 <HAL_ADC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <ADC_Read_Knobs+0x50>
            Error_Handler();
 80016a0:	f000 f860 	bl	8001764 <Error_Handler>
        }

        // Sample the channel NUM_ADC_SAMPLES times to the buffer
        HAL_ADC_Start(&hadc1);
 80016a4:	482d      	ldr	r0, [pc, #180]	; (800175c <ADC_Read_Knobs+0x108>)
 80016a6:	f001 fd85 	bl	80031b4 <HAL_ADC_Start>
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80016b0:	e016      	b.n	80016e0 <ADC_Read_Knobs+0x8c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 80016b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b6:	4829      	ldr	r0, [pc, #164]	; (800175c <ADC_Read_Knobs+0x108>)
 80016b8:	f001 fe63 	bl	8003382 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 80016bc:	4827      	ldr	r0, [pc, #156]	; (800175c <ADC_Read_Knobs+0x108>)
 80016be:	f001 feeb 	bl	8003498 <HAL_ADC_GetValue>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016c8:	b292      	uxth	r2, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80016d0:	440b      	add	r3, r1
 80016d2:	f823 2c58 	strh.w	r2, [r3, #-88]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80016d6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80016e0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	d9e4      	bls.n	80016b2 <ADC_Read_Knobs+0x5e>
        }
        HAL_ADC_Stop(&hadc1);
 80016e8:	481c      	ldr	r0, [pc, #112]	; (800175c <ADC_Read_Knobs+0x108>)
 80016ea:	f001 fe17 	bl	800331c <HAL_ADC_Stop>

        // Calculate average of all samples for the channel
        uint16_t adc_sum = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80016fa:	e011      	b.n	8001720 <ADC_Read_Knobs+0xcc>
            adc_sum += adcBuf[i];
 80016fc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001706:	4413      	add	r3, r2
 8001708:	f833 2c58 	ldrh.w	r2, [r3, #-88]
 800170c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001710:	4413      	add	r3, r2
 8001712:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001716:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800171a:	3301      	adds	r3, #1
 800171c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8001720:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001724:	2b1f      	cmp	r3, #31
 8001726:	d9e9      	bls.n	80016fc <ADC_Read_Knobs+0xa8>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 8001728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800172c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001730:	0952      	lsrs	r2, r2, #5
 8001732:	b291      	uxth	r1, r2
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <ADC_Read_Knobs+0x10c>)
 8001736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 800173a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800173e:	3301      	adds	r3, #1
 8001740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001748:	2b03      	cmp	r3, #3
 800174a:	d98a      	bls.n	8001662 <ADC_Read_Knobs+0xe>
    }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3758      	adds	r7, #88	; 0x58
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000010 	.word	0x20000010
 800175c:	20002654 	.word	0x20002654
 8001760:	20000350 	.word	0x20000350

08001764 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    __disable_irq();
    while (1) {
 800176c:	e7fe      	b.n	800176c <Error_Handler+0x8>

0800176e <MIDI_Send>:

#include "midi.h"
#include "usb_device.h"

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 800176e:	b5b0      	push	{r4, r5, r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, Knob_Map(k, value, k->max_range));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7e1c      	ldrb	r4, [r3, #24]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7e5d      	ldrb	r5, [r3, #25]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7f5a      	ldrb	r2, [r3, #29]
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	4619      	mov	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fc30 	bl	8000ff0 <Knob_Map>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	4629      	mov	r1, r5
 8001796:	4620      	mov	r0, r4
 8001798:	f00d f932 	bl	800ea00 <MX_USB_Send_Midi>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}

080017a4 <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7f1b      	ldrb	r3, [r3, #28]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fecd 	bl	8000554 <__aeabi_i2d>
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <MIDI_Scale_And_Filter+0x130>)
 80017c0:	f7ff f85c 	bl	800087c <__aeabi_ddiv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff fa0e 	bl	8000bec <__aeabi_d2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7fe fecf 	bl	8000578 <__aeabi_f2d>
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b3e      	ldr	r3, [pc, #248]	; (80018d8 <MIDI_Scale_And_Filter+0x134>)
 80017e0:	f7fe ff22 	bl	8000628 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	461d      	mov	r5, r3
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe feb0 	bl	8000554 <__aeabi_i2d>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4620      	mov	r0, r4
 80017fa:	4629      	mov	r1, r5
 80017fc:	f7fe ff14 	bl	8000628 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4614      	mov	r4, r2
 8001806:	461d      	mov	r5, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7edb      	ldrb	r3, [r3, #27]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fea1 	bl	8000554 <__aeabi_i2d>
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <MIDI_Scale_And_Filter+0x134>)
 8001818:	f7fe ff06 	bl	8000628 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4620      	mov	r0, r4
 8001822:	4629      	mov	r1, r5
 8001824:	f7fe fd4a 	bl	80002bc <__adddf3>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4614      	mov	r4, r2
 800182e:	461d      	mov	r5, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7f5b      	ldrb	r3, [r3, #29]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe8d 	bl	8000554 <__aeabi_i2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7ff f963 	bl	8000b0c <__aeabi_dcmplt>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d032      	beq.n	80018b2 <MIDI_Scale_And_Filter+0x10e>
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7fe fe93 	bl	8000578 <__aeabi_f2d>
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <MIDI_Scale_And_Filter+0x134>)
 8001858:	f7fe fee6 	bl	8000628 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe74 	bl	8000554 <__aeabi_i2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fed8 	bl	8000628 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7edb      	ldrb	r3, [r3, #27]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe65 	bl	8000554 <__aeabi_i2d>
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MIDI_Scale_And_Filter+0x134>)
 8001890:	f7fe feca 	bl	8000628 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fd0e 	bl	80002bc <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f980 	bl	8000bac <__aeabi_d2uiz>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	e00c      	b.n	80018cc <MIDI_Scale_And_Filter+0x128>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7f5b      	ldrb	r3, [r3, #29]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe4c 	bl	8000554 <__aeabi_i2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f972 	bl	8000bac <__aeabi_d2uiz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b2db      	uxtb	r3, r3
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bdb0      	pop	{r4, r5, r7, pc}
 80018d4:	406f4000 	.word	0x406f4000
 80018d8:	3fe00000 	.word	0x3fe00000

080018dc <Preset_GetName>:
#include "preset.h"

void Preset_GetName(char *file_buffer, char *name_buffer) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    cJSON *preset_json = cJSON_Parse(file_buffer);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f00e fa6a 	bl	800fdc0 <cJSON_Parse>
 80018ec:	60f8      	str	r0, [r7, #12]
    if (preset_json == NULL) return;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d012      	beq.n	800191a <Preset_GetName+0x3e>
    printf("test");
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <Preset_GetName+0x48>)
 80018f6:	f00e fe71 	bl	80105dc <iprintf>
    const cJSON *name = cJSON_GetObjectItemCaseSensitive(preset_json, "name");
 80018fa:	490b      	ldr	r1, [pc, #44]	; (8001928 <Preset_GetName+0x4c>)
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f00e fd64 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 8001902:	60b8      	str	r0, [r7, #8]
    snprintf(name_buffer, MAX_LABEL_CHARS+1, "%s", name->valuestring);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4a08      	ldr	r2, [pc, #32]	; (800192c <Preset_GetName+0x50>)
 800190a:	210f      	movs	r1, #15
 800190c:	6838      	ldr	r0, [r7, #0]
 800190e:	f00f f895 	bl	8010a3c <sniprintf>

    cJSON_Delete(preset_json);
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f00d fd58 	bl	800f3c8 <cJSON_Delete>
 8001918:	e000      	b.n	800191c <Preset_GetName+0x40>
    if (preset_json == NULL) return;
 800191a:	bf00      	nop
}
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	08013964 	.word	0x08013964
 8001928:	0801396c 	.word	0x0801396c
 800192c:	08013974 	.word	0x08013974

08001930 <Preset_Load>:

void Preset_Load(Knob *knobs, char *buffer) {
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b093      	sub	sp, #76	; 0x4c
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
    cJSON *preset_json = cJSON_Parse(buffer);
 800193a:	6838      	ldr	r0, [r7, #0]
 800193c:	f00e fa40 	bl	800fdc0 <cJSON_Parse>
 8001940:	6378      	str	r0, [r7, #52]	; 0x34
    if (preset_json == NULL) return;
 8001942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80ed 	beq.w	8001b24 <Preset_Load+0x1f4>

    const cJSON *knobs_json = cJSON_GetObjectItemCaseSensitive(preset_json, "knobs");
 800194a:	4979      	ldr	r1, [pc, #484]	; (8001b30 <Preset_Load+0x200>)
 800194c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800194e:	f00e fd3c 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 8001952:	6338      	str	r0, [r7, #48]	; 0x30
    const cJSON *knob_json = NULL;
 8001954:	2300      	movs	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	; 0x44

    uint8_t i = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <Preset_Load+0x3a>
 8001964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	e000      	b.n	800196c <Preset_Load+0x3c>
 800196a:	2300      	movs	r3, #0
 800196c:	647b      	str	r3, [r7, #68]	; 0x44
 800196e:	e0d1      	b.n	8001b14 <Preset_Load+0x1e4>
    {
        if (i >= NUM_KNOBS) return;
 8001970:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001974:	2b03      	cmp	r3, #3
 8001976:	f200 80d7 	bhi.w	8001b28 <Preset_Load+0x1f8>

        const cJSON *row = cJSON_GetObjectItemCaseSensitive(knob_json, "row");
 800197a:	496e      	ldr	r1, [pc, #440]	; (8001b34 <Preset_Load+0x204>)
 800197c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800197e:	f00e fd24 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 8001982:	62f8      	str	r0, [r7, #44]	; 0x2c
        const cJSON *col = cJSON_GetObjectItemCaseSensitive(knob_json, "col");
 8001984:	496c      	ldr	r1, [pc, #432]	; (8001b38 <Preset_Load+0x208>)
 8001986:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001988:	f00e fd1f 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 800198c:	62b8      	str	r0, [r7, #40]	; 0x28
        const cJSON *label = cJSON_GetObjectItemCaseSensitive(knob_json, "label");
 800198e:	496b      	ldr	r1, [pc, #428]	; (8001b3c <Preset_Load+0x20c>)
 8001990:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001992:	f00e fd1a 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 8001996:	6278      	str	r0, [r7, #36]	; 0x24
        const cJSON *channel = cJSON_GetObjectItemCaseSensitive(knob_json, "channel");
 8001998:	4969      	ldr	r1, [pc, #420]	; (8001b40 <Preset_Load+0x210>)
 800199a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800199c:	f00e fd15 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 80019a0:	6238      	str	r0, [r7, #32]
        const cJSON *cc = cJSON_GetObjectItemCaseSensitive(knob_json, "cc");
 80019a2:	4968      	ldr	r1, [pc, #416]	; (8001b44 <Preset_Load+0x214>)
 80019a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019a6:	f00e fd10 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 80019aa:	61f8      	str	r0, [r7, #28]
        const cJSON *init_value = cJSON_GetObjectItemCaseSensitive(knob_json, "init_value");
 80019ac:	4966      	ldr	r1, [pc, #408]	; (8001b48 <Preset_Load+0x218>)
 80019ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019b0:	f00e fd0b 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 80019b4:	61b8      	str	r0, [r7, #24]
        const cJSON *max_values = cJSON_GetObjectItemCaseSensitive(knob_json, "max_values");
 80019b6:	4965      	ldr	r1, [pc, #404]	; (8001b4c <Preset_Load+0x21c>)
 80019b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019ba:	f00e fd06 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 80019be:	6178      	str	r0, [r7, #20]
        const cJSON *max_range = cJSON_GetObjectItemCaseSensitive(knob_json, "max_range");
 80019c0:	4963      	ldr	r1, [pc, #396]	; (8001b50 <Preset_Load+0x220>)
 80019c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019c4:	f00e fd01 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 80019c8:	6138      	str	r0, [r7, #16]
        const cJSON *isLocked = cJSON_GetObjectItemCaseSensitive(knob_json, "isLocked");
 80019ca:	4962      	ldr	r1, [pc, #392]	; (8001b54 <Preset_Load+0x224>)
 80019cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019ce:	f00e fcfc 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 80019d2:	60f8      	str	r0, [r7, #12]

        knobs[i].row = row->valueint;
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	6959      	ldr	r1, [r3, #20]
 80019d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019dc:	015b      	lsls	r3, r3, #5
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]
        knobs[i].col = col->valueint;
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	6959      	ldr	r1, [r3, #20]
 80019ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019ee:	015b      	lsls	r3, r3, #5
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	b2ca      	uxtb	r2, r1
 80019f6:	705a      	strb	r2, [r3, #1]
        snprintf(knobs[i].label, sizeof(knobs[i].label) / sizeof(knobs[i].label[0]), "%s", label->valuestring);
 80019f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019fc:	015b      	lsls	r3, r3, #5
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	1c98      	adds	r0, r3, #2
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	4a53      	ldr	r2, [pc, #332]	; (8001b58 <Preset_Load+0x228>)
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f00f f816 	bl	8010a3c <sniprintf>
        knobs[i].channel = channel->valueint;
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	6959      	ldr	r1, [r3, #20]
 8001a14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a18:	015b      	lsls	r3, r3, #5
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b2ca      	uxtb	r2, r1
 8001a20:	761a      	strb	r2, [r3, #24]
        knobs[i].cc = cc->valueint;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	6959      	ldr	r1, [r3, #20]
 8001a26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a2a:	015b      	lsls	r3, r3, #5
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	b2ca      	uxtb	r2, r1
 8001a32:	765a      	strb	r2, [r3, #25]
        knobs[i].init_value = init_value->valueint;
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6959      	ldr	r1, [r3, #20]
 8001a38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a3c:	015b      	lsls	r3, r3, #5
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	769a      	strb	r2, [r3, #26]
        knobs[i].max_values = max_values->valueint;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	6959      	ldr	r1, [r3, #20]
 8001a4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a4e:	015b      	lsls	r3, r3, #5
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	b2ca      	uxtb	r2, r1
 8001a56:	771a      	strb	r2, [r3, #28]
        knobs[i].max_range = max_range->valueint;
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6959      	ldr	r1, [r3, #20]
 8001a5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a60:	015b      	lsls	r3, r3, #5
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	775a      	strb	r2, [r3, #29]
        knobs[i].isLocked = isLocked->valueint;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6959      	ldr	r1, [r3, #20]
 8001a6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a72:	015b      	lsls	r3, r3, #5
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	b2ca      	uxtb	r2, r1
 8001a7a:	779a      	strb	r2, [r3, #30]

        const cJSON *sub_labels = cJSON_GetObjectItemCaseSensitive(knob_json, "sub_labels");
 8001a7c:	4937      	ldr	r1, [pc, #220]	; (8001b5c <Preset_Load+0x22c>)
 8001a7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a80:	f00e fca3 	bl	80103ca <cJSON_GetObjectItemCaseSensitive>
 8001a84:	60b8      	str	r0, [r7, #8]
        const cJSON *sub_label = NULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 8001a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a8e:	015b      	lsls	r3, r3, #5
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	7f1b      	ldrb	r3, [r3, #28]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	1a99      	subs	r1, r3, r2
 8001a9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001aa2:	015b      	lsls	r3, r3, #5
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	18d4      	adds	r4, r2, r3
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	f00e fcc7 	bl	801043c <malloc>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6163      	str	r3, [r4, #20]

        uint8_t label_index = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <Preset_Load+0x194>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	e000      	b.n	8001ac6 <Preset_Load+0x196>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ac8:	e019      	b.n	8001afe <Preset_Load+0x1ce>
        {
            snprintf(knobs[i].sub_labels[label_index], sizeof(knobs[i].sub_labels[0]) / sizeof(knobs[i].sub_labels[0][0]), "%s", sub_label->valuestring);
 8001aca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ace:	015b      	lsls	r3, r3, #5
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	6959      	ldr	r1, [r3, #20]
 8001ad6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001ada:	4613      	mov	r3, r2
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	18c8      	adds	r0, r1, r3
 8001ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <Preset_Load+0x228>)
 8001ae8:	210f      	movs	r1, #15
 8001aea:	f00e ffa7 	bl	8010a3c <sniprintf>
            label_index++;
 8001aee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001af2:	3301      	adds	r3, #1
 8001af4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e2      	bne.n	8001aca <Preset_Load+0x19a>
        }
        i++;
 8001b04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 8001b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
 8001b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f47f af2a 	bne.w	8001970 <Preset_Load+0x40>
    }

    cJSON_Delete(preset_json);
 8001b1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b1e:	f00d fc53 	bl	800f3c8 <cJSON_Delete>
 8001b22:	e002      	b.n	8001b2a <Preset_Load+0x1fa>
    if (preset_json == NULL) return;
 8001b24:	bf00      	nop
 8001b26:	e000      	b.n	8001b2a <Preset_Load+0x1fa>
        if (i >= NUM_KNOBS) return;
 8001b28:	bf00      	nop
}
 8001b2a:	374c      	adds	r7, #76	; 0x4c
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd90      	pop	{r4, r7, pc}
 8001b30:	08013978 	.word	0x08013978
 8001b34:	08013980 	.word	0x08013980
 8001b38:	08013984 	.word	0x08013984
 8001b3c:	08013988 	.word	0x08013988
 8001b40:	08013990 	.word	0x08013990
 8001b44:	08013998 	.word	0x08013998
 8001b48:	0801399c 	.word	0x0801399c
 8001b4c:	080139a8 	.word	0x080139a8
 8001b50:	080139b4 	.word	0x080139b4
 8001b54:	080139c0 	.word	0x080139c0
 8001b58:	08013974 	.word	0x08013974
 8001b5c:	080139cc 	.word	0x080139cc

08001b60 <SD_FetchPresetNames>:
 */
#include "stm32f4xx_hal.h"
#include "sd.h"
#include "ssd1306.h"

void SD_FetchPresetNames() {
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	b0df      	sub	sp, #380	; 0x17c
 8001b64:	af00      	add	r7, sp, #0
    DIR root;
    FILINFO root_info;
    retSD = f_mount(&SDFatFS, "", 1);
 8001b66:	2201      	movs	r2, #1
 8001b68:	4990      	ldr	r1, [pc, #576]	; (8001dac <SD_FetchPresetNames+0x24c>)
 8001b6a:	4891      	ldr	r0, [pc, #580]	; (8001db0 <SD_FetchPresetNames+0x250>)
 8001b6c:	f00c f8ee 	bl	800dd4c <f_mount>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b8f      	ldr	r3, [pc, #572]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001b76:	701a      	strb	r2, [r3, #0]

    uint8_t presetCount = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
    retSD = f_findfirst(&root, &root_info, "", "*.json");
 8001b7e:	f107 0114 	add.w	r1, r7, #20
 8001b82:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001b86:	4b8c      	ldr	r3, [pc, #560]	; (8001db8 <SD_FetchPresetNames+0x258>)
 8001b88:	4a88      	ldr	r2, [pc, #544]	; (8001dac <SD_FetchPresetNames+0x24c>)
 8001b8a:	f00c fdc8 	bl	800e71e <f_findfirst>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001b94:	701a      	strb	r2, [r3, #0]

    while (retSD == FR_OK && root_info.fname[0]) {
 8001b96:	e010      	b.n	8001bba <SD_FetchPresetNames+0x5a>
        presetCount++;
 8001b98:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
        retSD = f_findnext(&root, &root_info);
 8001ba2:	f107 0214 	add.w	r2, r7, #20
 8001ba6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00c fd8e 	bl	800e6ce <f_findnext>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b7f      	ldr	r3, [pc, #508]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001bb8:	701a      	strb	r2, [r3, #0]
    while (retSD == FR_OK && root_info.fname[0]) {
 8001bba:	4b7e      	ldr	r3, [pc, #504]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d104      	bne.n	8001bcc <SD_FetchPresetNames+0x6c>
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	7d9b      	ldrb	r3, [r3, #22]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1e5      	bne.n	8001b98 <SD_FetchPresetNames+0x38>
    }
    f_closedir(&root);
 8001bcc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f00c fd19 	bl	800e608 <f_closedir>

    char filenames[presetCount][_MAX_LFN+1];
 8001bd6:	f897 4176 	ldrb.w	r4, [r7, #374]	; 0x176
 8001bda:	466b      	mov	r3, sp
 8001bdc:	461d      	mov	r5, r3
 8001bde:	4623      	mov	r3, r4
 8001be0:	3b01      	subs	r3, #1
 8001be2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001be6:	b2e0      	uxtb	r0, r4
 8001be8:	f04f 0100 	mov.w	r1, #0
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	02cb      	lsls	r3, r1, #11
 8001bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001bfa:	02c2      	lsls	r2, r0, #11
 8001bfc:	b2e0      	uxtb	r0, r4
 8001bfe:	f04f 0100 	mov.w	r1, #0
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	02cb      	lsls	r3, r1, #11
 8001c0c:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001c10:	02c2      	lsls	r2, r0, #11
 8001c12:	4623      	mov	r3, r4
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	3307      	adds	r3, #7
 8001c18:	08db      	lsrs	r3, r3, #3
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	ebad 0d03 	sub.w	sp, sp, r3
 8001c20:	466b      	mov	r3, sp
 8001c22:	3300      	adds	r3, #0
 8001c24:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    uint8_t i = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    retSD = f_findfirst(&root, &root_info, "", "*.json");
 8001c2e:	f107 0114 	add.w	r1, r7, #20
 8001c32:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001c36:	4b60      	ldr	r3, [pc, #384]	; (8001db8 <SD_FetchPresetNames+0x258>)
 8001c38:	4a5c      	ldr	r2, [pc, #368]	; (8001dac <SD_FetchPresetNames+0x24c>)
 8001c3a:	f00c fd70 	bl	800e71e <f_findfirst>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b5c      	ldr	r3, [pc, #368]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001c44:	701a      	strb	r2, [r3, #0]
    while (retSD == FR_OK && root_info.fname[0]) {
 8001c46:	e01e      	b.n	8001c86 <SD_FetchPresetNames+0x126>
        snprintf(filenames[i], _MAX_LFN+1, "%s", root_info.fname);
 8001c48:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001c52:	18d0      	adds	r0, r2, r3
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	3316      	adds	r3, #22
 8001c5a:	4a58      	ldr	r2, [pc, #352]	; (8001dbc <SD_FetchPresetNames+0x25c>)
 8001c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c60:	f00e feec 	bl	8010a3c <sniprintf>
        retSD = f_findnext(&root, &root_info);
 8001c64:	f107 0214 	add.w	r2, r7, #20
 8001c68:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f00c fd2d 	bl	800e6ce <f_findnext>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b4e      	ldr	r3, [pc, #312]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001c7a:	701a      	strb	r2, [r3, #0]
        i++;
 8001c7c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001c80:	3301      	adds	r3, #1
 8001c82:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    while (retSD == FR_OK && root_info.fname[0]) {
 8001c86:	4b4b      	ldr	r3, [pc, #300]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d104      	bne.n	8001c98 <SD_FetchPresetNames+0x138>
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	7d9b      	ldrb	r3, [r3, #22]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1d7      	bne.n	8001c48 <SD_FetchPresetNames+0xe8>
    }

    qsort(filenames, presetCount, sizeof(filenames[0]), qsort_cmp);
 8001c98:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8001c9c:	f897 1176 	ldrb.w	r1, [r7, #374]	; 0x176
 8001ca0:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <SD_FetchPresetNames+0x260>)
 8001ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca6:	f00e fd60 	bl	801076a <qsort>

    for (i = 0; i < presetCount; i++) {
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001cb0:	e067      	b.n	8001d82 <SD_FetchPresetNames+0x222>
 8001cb2:	466b      	mov	r3, sp
 8001cb4:	461e      	mov	r6, r3
        retSD = f_open(&SDFile, filenames[i], FA_READ);
 8001cb6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001cc0:	4413      	add	r3, r2
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	483f      	ldr	r0, [pc, #252]	; (8001dc4 <SD_FetchPresetNames+0x264>)
 8001cc8:	f00c f886 	bl	800ddd8 <f_open>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001cd2:	701a      	strb	r2, [r3, #0]

        char presetBuffer[f_size(&SDFile) + 1];
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <SD_FetchPresetNames+0x264>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	1c5c      	adds	r4, r3, #1
 8001cda:	4623      	mov	r3, r4
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f04f 0100 	mov.w	r1, #0
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	00cb      	lsls	r3, r1, #3
 8001cf2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cf6:	00c2      	lsls	r2, r0, #3
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	00cb      	lsls	r3, r1, #3
 8001d08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d0c:	00c2      	lsls	r2, r0, #3
 8001d0e:	1de3      	adds	r3, r4, #7
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	ebad 0d03 	sub.w	sp, sp, r3
 8001d18:	466b      	mov	r3, sp
 8001d1a:	3300      	adds	r3, #0
 8001d1c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        char nameBuffer[MAX_LABEL_CHARS + 1];
        unsigned int bytesRead;
        retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001d20:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8001d24:	1e62      	subs	r2, r4, #1
 8001d26:	463b      	mov	r3, r7
 8001d28:	4826      	ldr	r0, [pc, #152]	; (8001dc4 <SD_FetchPresetNames+0x264>)
 8001d2a:	f00c fa13 	bl	800e154 <f_read>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001d34:	701a      	strb	r2, [r3, #0]
        presetBuffer[bytesRead] = '\0';
 8001d36:	463b      	mov	r3, r7
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001d3e:	2100      	movs	r1, #0
 8001d40:	54d1      	strb	r1, [r2, r3]

        Preset_GetName(presetBuffer, nameBuffer);
 8001d42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d46:	1d3a      	adds	r2, r7, #4
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fdc6 	bl	80018dc <Preset_GetName>

        snprintf(presets[i], MAX_LABEL_CHARS + 1, "%s", nameBuffer);
 8001d50:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8001d54:	4613      	mov	r3, r2
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	1a9b      	subs	r3, r3, r2
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <SD_FetchPresetNames+0x268>)
 8001d5c:	1898      	adds	r0, r3, r2
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <SD_FetchPresetNames+0x25c>)
 8001d62:	210f      	movs	r1, #15
 8001d64:	f00e fe6a 	bl	8010a3c <sniprintf>
        retSD = f_close(&SDFile);
 8001d68:	4816      	ldr	r0, [pc, #88]	; (8001dc4 <SD_FetchPresetNames+0x264>)
 8001d6a:	f00c fbb0 	bl	800e4ce <f_close>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	46b5      	mov	sp, r6
    for (i = 0; i < presetCount; i++) {
 8001d78:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001d82:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8001d86:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d391      	bcc.n	8001cb2 <SD_FetchPresetNames+0x152>
    }

    retSD = f_mount(NULL, "", 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4906      	ldr	r1, [pc, #24]	; (8001dac <SD_FetchPresetNames+0x24c>)
 8001d92:	2000      	movs	r0, #0
 8001d94:	f00b ffda 	bl	800dd4c <f_mount>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SD_FetchPresetNames+0x254>)
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	46ad      	mov	sp, r5
}
 8001da2:	bf00      	nop
 8001da4:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dac:	080139d8 	.word	0x080139d8
 8001db0:	200029bc 	.word	0x200029bc
 8001db4:	20002784 	.word	0x20002784
 8001db8:	080139dc 	.word	0x080139dc
 8001dbc:	080139e4 	.word	0x080139e4
 8001dc0:	08001ead 	.word	0x08001ead
 8001dc4:	2000278c 	.word	0x2000278c
 8001dc8:	200026c0 	.word	0x200026c0

08001dcc <SD_LoadPreset>:

void SD_LoadPreset(char *filename) {
 8001dcc:	b5b0      	push	{r4, r5, r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	466b      	mov	r3, sp
 8001dd6:	461d      	mov	r5, r3
    //SD_Enable();

    retSD = f_mount(&SDFatFS, "", 1);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	492f      	ldr	r1, [pc, #188]	; (8001e98 <SD_LoadPreset+0xcc>)
 8001ddc:	482f      	ldr	r0, [pc, #188]	; (8001e9c <SD_LoadPreset+0xd0>)
 8001dde:	f00b ffb5 	bl	800dd4c <f_mount>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <SD_LoadPreset+0xd4>)
 8001de8:	701a      	strb	r2, [r3, #0]
    retSD = f_open(&SDFile, filename, FA_READ);
 8001dea:	2201      	movs	r2, #1
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	482d      	ldr	r0, [pc, #180]	; (8001ea4 <SD_LoadPreset+0xd8>)
 8001df0:	f00b fff2 	bl	800ddd8 <f_open>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <SD_LoadPreset+0xd4>)
 8001dfa:	701a      	strb	r2, [r3, #0]

    char presetBuffer[f_size(&SDFile) + 1];
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <SD_LoadPreset+0xd8>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	1c5c      	adds	r4, r3, #1
 8001e02:	4623      	mov	r3, r4
 8001e04:	3b01      	subs	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	00cb      	lsls	r3, r1, #3
 8001e18:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e1c:	00c2      	lsls	r2, r0, #3
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	00cb      	lsls	r3, r1, #3
 8001e2e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e32:	00c2      	lsls	r2, r0, #3
 8001e34:	1de3      	adds	r3, r4, #7
 8001e36:	08db      	lsrs	r3, r3, #3
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	ebad 0d03 	sub.w	sp, sp, r3
 8001e3e:	466b      	mov	r3, sp
 8001e40:	3300      	adds	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
    unsigned int bytesRead;

    retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001e44:	6939      	ldr	r1, [r7, #16]
 8001e46:	1e62      	subs	r2, r4, #1
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	4815      	ldr	r0, [pc, #84]	; (8001ea4 <SD_LoadPreset+0xd8>)
 8001e4e:	f00c f981 	bl	800e154 <f_read>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <SD_LoadPreset+0xd4>)
 8001e58:	701a      	strb	r2, [r3, #0]
    presetBuffer[bytesRead] = '\0';
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	2100      	movs	r1, #0
 8001e60:	54d1      	strb	r1, [r2, r3]

    Preset_Load(knobs, presetBuffer);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4619      	mov	r1, r3
 8001e66:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <SD_LoadPreset+0xdc>)
 8001e68:	f7ff fd62 	bl	8001930 <Preset_Load>

    retSD = f_close(&SDFile);
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <SD_LoadPreset+0xd8>)
 8001e6e:	f00c fb2e 	bl	800e4ce <f_close>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <SD_LoadPreset+0xd4>)
 8001e78:	701a      	strb	r2, [r3, #0]
    retSD = f_mount(NULL, "", 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	4906      	ldr	r1, [pc, #24]	; (8001e98 <SD_LoadPreset+0xcc>)
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f00b ff64 	bl	800dd4c <f_mount>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SD_LoadPreset+0xd4>)
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	46ad      	mov	sp, r5

    //SD_Disable();
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bdb0      	pop	{r4, r5, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	080139d8 	.word	0x080139d8
 8001e9c:	200029bc 	.word	0x200029bc
 8001ea0:	20002784 	.word	0x20002784
 8001ea4:	2000278c 	.word	0x2000278c
 8001ea8:	20002580 	.word	0x20002580

08001eac <qsort_cmp>:
void SD_Disable() {
    __HAL_SD_DISABLE(hsd);
    hsd.State = HAL_SD_STATE_RESET;
}

int qsort_cmp(const void *lhs, const void *rhs) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
    return strcmp(lhs, rhs);
 8001eb6:	6839      	ldr	r1, [r7, #0]
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7fe f991 	bl	80001e0 <strcmp>
 8001ebe:	4603      	mov	r3, r0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(uint8_t command) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af04      	add	r7, sp, #16
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	9302      	str	r3, [sp, #8]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2301      	movs	r3, #1
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2178      	movs	r1, #120	; 0x78
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <ssd1306_WriteCommand+0x2c>)
 8001ee6:	f002 fa37 	bl	8004358 <HAL_I2C_Mem_Write>
 8001eea:	4603      	mov	r3, r0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20002600 	.word	0x20002600

08001ef8 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(Knob *k) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    int status = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(k);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fc3f 	bl	8002788 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(0xAE);   // Display off
 8001f0a:	20ae      	movs	r0, #174	; 0xae
 8001f0c:	f7ff ffdc 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // Set Memory Addressing Mode
 8001f1a:	2020      	movs	r0, #32
 8001f1c:	f7ff ffd4 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f2a:	2010      	movs	r0, #16
 8001f2c:	f7ff ffcc 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001f3a:	20b0      	movs	r0, #176	; 0xb0
 8001f3c:	f7ff ffc4 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xC8);   // Set COM Output Scan Direction
 8001f4a:	20c8      	movs	r0, #200	; 0xc8
 8001f4c:	f7ff ffbc 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // Set low column address
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7ff ffb4 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // Set high column address
 8001f6a:	2010      	movs	r0, #16
 8001f6c:	f7ff ffac 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);   // Set start line address
 8001f7a:	2040      	movs	r0, #64	; 0x40
 8001f7c:	f7ff ffa4 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x81);   // set contrast control register
 8001f8a:	2081      	movs	r0, #129	; 0x81
 8001f8c:	f7ff ff9c 	bl	8001ec8 <ssd1306_WriteCommand>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);
 8001f9a:	2040      	movs	r0, #64	; 0x40
 8001f9c:	f7ff ff94 	bl	8001ec8 <ssd1306_WriteCommand>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA1);   // Set segment re-map 0 to 127
 8001faa:	20a1      	movs	r0, #161	; 0xa1
 8001fac:	f7ff ff8c 	bl	8001ec8 <ssd1306_WriteCommand>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA6);   // Set normal display
 8001fba:	20a6      	movs	r0, #166	; 0xa6
 8001fbc:	f7ff ff84 	bl	8001ec8 <ssd1306_WriteCommand>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA8);   // Set multiplex ratio(1 to 64)
 8001fca:	20a8      	movs	r0, #168	; 0xa8
 8001fcc:	f7ff ff7c 	bl	8001ec8 <ssd1306_WriteCommand>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(SSD1306_HEIGHT - 1);
 8001fda:	203f      	movs	r0, #63	; 0x3f
 8001fdc:	f7ff ff74 	bl	8001ec8 <ssd1306_WriteCommand>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fea:	20a4      	movs	r0, #164	; 0xa4
 8001fec:	f7ff ff6c 	bl	8001ec8 <ssd1306_WriteCommand>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD3);   // Set display offset
 8001ffa:	20d3      	movs	r0, #211	; 0xd3
 8001ffc:	f7ff ff64 	bl	8001ec8 <ssd1306_WriteCommand>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // No offset
 800200a:	2000      	movs	r0, #0
 800200c:	f7ff ff5c 	bl	8001ec8 <ssd1306_WriteCommand>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD5);   // Set display clock divide ratio/oscillator frequency
 800201a:	20d5      	movs	r0, #213	; 0xd5
 800201c:	f7ff ff54 	bl	8001ec8 <ssd1306_WriteCommand>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xF0);   // Set divide ratio
 800202a:	20f0      	movs	r0, #240	; 0xf0
 800202c:	f7ff ff4c 	bl	8001ec8 <ssd1306_WriteCommand>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD9);   // Set pre-charge period
 800203a:	20d9      	movs	r0, #217	; 0xd9
 800203c:	f7ff ff44 	bl	8001ec8 <ssd1306_WriteCommand>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x22);
 800204a:	2022      	movs	r0, #34	; 0x22
 800204c:	f7ff ff3c 	bl	8001ec8 <ssd1306_WriteCommand>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xDA);   // Set com pins hardware configuration
 800205a:	20da      	movs	r0, #218	; 0xda
 800205c:	f7ff ff34 	bl	8001ec8 <ssd1306_WriteCommand>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(0x12);   // Do not use COM left/right remap
 800206a:	2012      	movs	r0, #18
 800206c:	f7ff ff2c 	bl	8001ec8 <ssd1306_WriteCommand>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(0xDB);   // Set vcomh
 800207a:	20db      	movs	r0, #219	; 0xdb
 800207c:	f7ff ff24 	bl	8001ec8 <ssd1306_WriteCommand>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // 0x20,0.77xVcc
 800208a:	2020      	movs	r0, #32
 800208c:	f7ff ff1c 	bl	8001ec8 <ssd1306_WriteCommand>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x8D);   // Set DC-DC enable
 800209a:	208d      	movs	r0, #141	; 0x8d
 800209c:	f7ff ff14 	bl	8001ec8 <ssd1306_WriteCommand>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x14);   //
 80020aa:	2014      	movs	r0, #20
 80020ac:	f7ff ff0c 	bl	8001ec8 <ssd1306_WriteCommand>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xAF);   // Turn on SSD1306 panel
 80020ba:	20af      	movs	r0, #175	; 0xaf
 80020bc:	f7ff ff04 	bl	8001ec8 <ssd1306_WriteCommand>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <ssd1306_Init+0x1dc>
        return 1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e012      	b.n	80020fa <ssd1306_Init+0x202>
    }

    ssd1306_Fill(Black);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f000 f819 	bl	800210c <ssd1306_Fill>
    ssd1306_AdjustBrightness(0x63);
 80020da:	2063      	movs	r0, #99	; 0x63
 80020dc:	f000 fb2a 	bl	8002734 <ssd1306_AdjustBrightness>
    ssd1306_UpdateScreen(&hi2c1);
 80020e0:	4808      	ldr	r0, [pc, #32]	; (8002104 <ssd1306_Init+0x20c>)
 80020e2:	f000 f837 	bl	8002154 <ssd1306_UpdateScreen>

    SSD1306.CurrentX = 0;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <ssd1306_Init+0x210>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <ssd1306_Init+0x210>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <ssd1306_Init+0x210>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	715a      	strb	r2, [r3, #5]

    return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20002600 	.word	0x20002600
 8002108:	20000758 	.word	0x20000758

0800210c <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e00d      	b.n	8002138 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <ssd1306_Fill+0x1a>
 8002122:	2100      	movs	r1, #0
 8002124:	e000      	b.n	8002128 <ssd1306_Fill+0x1c>
 8002126:	21ff      	movs	r1, #255	; 0xff
 8002128:	4a09      	ldr	r2, [pc, #36]	; (8002150 <ssd1306_Fill+0x44>)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	460a      	mov	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3301      	adds	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213e:	d3ed      	bcc.n	800211c <ssd1306_Fill+0x10>
    }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000358 	.word	0x20000358

08002154 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen() {
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af04      	add	r7, sp, #16
    for (uint8_t i = 0; i < 8; i++) {
 800215a:	2300      	movs	r3, #0
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	e01d      	b.n	800219c <ssd1306_UpdateScreen+0x48>
        ssd1306_WriteCommand(0xB0 + i);
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	3b50      	subs	r3, #80	; 0x50
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff feae 	bl	8001ec8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800216c:	2000      	movs	r0, #0
 800216e:	f7ff feab 	bl	8001ec8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002172:	2010      	movs	r0, #16
 8002174:	f7ff fea8 	bl	8001ec8 <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	01db      	lsls	r3, r3, #7
 800217c:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <ssd1306_UpdateScreen+0x58>)
 800217e:	4413      	add	r3, r2
 8002180:	2264      	movs	r2, #100	; 0x64
 8002182:	9202      	str	r2, [sp, #8]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	9201      	str	r2, [sp, #4]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	2178      	movs	r1, #120	; 0x78
 8002190:	4807      	ldr	r0, [pc, #28]	; (80021b0 <ssd1306_UpdateScreen+0x5c>)
 8002192:	f002 f8e1 	bl	8004358 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	3301      	adds	r3, #1
 800219a:	71fb      	strb	r3, [r7, #7]
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	2b07      	cmp	r3, #7
 80021a0:	d9de      	bls.n	8002160 <ssd1306_UpdateScreen+0xc>
    }
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000358 	.word	0x20000358
 80021b0:	20002600 	.word	0x20002600

080021b4 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(Knob *k) {
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b08d      	sub	sp, #52	; 0x34
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    ssd1306_Select(k);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fae3 	bl	8002788 <ssd1306_Select>
    ssd1306_Fill(Black);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff ffa2 	bl	800210c <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 80021c8:	4b9d      	ldr	r3, [pc, #628]	; (8002440 <ssd1306_WriteKnob+0x28c>)
 80021ca:	f107 0410 	add.w	r4, r7, #16
 80021ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7e1b      	ldrb	r3, [r3, #24]
 80021d8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80021dc:	4a99      	ldr	r2, [pc, #612]	; (8002444 <ssd1306_WriteKnob+0x290>)
 80021de:	2103      	movs	r1, #3
 80021e0:	f00e fc2c 	bl	8010a3c <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7e5b      	ldrb	r3, [r3, #25]
 80021e8:	f107 0020 	add.w	r0, r7, #32
 80021ec:	4a96      	ldr	r2, [pc, #600]	; (8002448 <ssd1306_WriteKnob+0x294>)
 80021ee:	2104      	movs	r1, #4
 80021f0:	f00e fc24 	bl	8010a3c <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fd fffb 	bl	80001f4 <strlen>
 80021fe:	4604      	mov	r4, r0
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 faf7 	bl	80027f4 <update_init_indicator>
 8002206:	4603      	mov	r3, r0
 8002208:	f107 0010 	add.w	r0, r7, #16
 800220c:	4a8f      	ldr	r2, [pc, #572]	; (800244c <ssd1306_WriteKnob+0x298>)
 800220e:	4621      	mov	r1, r4
 8002210:	f00e fc14 	bl	8010a3c <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) Knob_Map(k, k->value, k->max_range));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7ed9      	ldrb	r1, [r3, #27]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7f5b      	ldrb	r3, [r3, #29]
 800221c:	461a      	mov	r2, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fee6 	bl	8000ff0 <Knob_Map>
 8002224:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8002226:	f107 000c 	add.w	r0, r7, #12
 800222a:	4a87      	ldr	r2, [pc, #540]	; (8002448 <ssd1306_WriteKnob+0x294>)
 800222c:	2104      	movs	r1, #4
 800222e:	f00e fc05 	bl	8010a3c <sniprintf>

    ssd1306_SetCursor(0, 0);
 8002232:	2100      	movs	r1, #0
 8002234:	2000      	movs	r0, #0
 8002236:	f000 fa65 	bl	8002704 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 800223a:	4a85      	ldr	r2, [pc, #532]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 800223c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002240:	2301      	movs	r3, #1
 8002242:	ca06      	ldmia	r2, {r1, r2}
 8002244:	f000 fa38 	bl	80026b8 <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 8002248:	4b81      	ldr	r3, [pc, #516]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	3301      	adds	r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4619      	mov	r1, r3
 8002252:	2000      	movs	r0, #0
 8002254:	f000 fa56 	bl	8002704 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8002258:	4a7d      	ldr	r2, [pc, #500]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 800225a:	f107 0020 	add.w	r0, r7, #32
 800225e:	2301      	movs	r3, #1
 8002260:	ca06      	ldmia	r2, {r1, r2}
 8002262:	f000 fa29 	bl	80026b8 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f7fd ffc2 	bl	80001f4 <strlen>
 8002270:	4603      	mov	r3, r0
 8002272:	4a77      	ldr	r2, [pc, #476]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	b2d8      	uxtb	r0, r3
 8002282:	4b73      	ldr	r3, [pc, #460]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 8002284:	785b      	ldrb	r3, [r3, #1]
 8002286:	3301      	adds	r3, #1
 8002288:	0fda      	lsrs	r2, r3, #31
 800228a:	4413      	add	r3, r2
 800228c:	105b      	asrs	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4619      	mov	r1, r3
 8002292:	f000 fa37 	bl	8002704 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8002296:	4a6e      	ldr	r2, [pc, #440]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 8002298:	f107 0010 	add.w	r0, r7, #16
 800229c:	2301      	movs	r3, #1
 800229e:	ca06      	ldmia	r2, {r1, r2}
 80022a0:	f000 fa0a 	bl	80026b8 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f1c3 0320 	rsb	r3, r3, #32
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b2d8      	uxtb	r0, r3
 80022b6:	4b66      	ldr	r3, [pc, #408]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	3301      	adds	r3, #1
 80022bc:	0fda      	lsrs	r2, r3, #31
 80022be:	4413      	add	r3, r2
 80022c0:	105b      	asrs	r3, r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	f000 fa1d 	bl	8002704 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 80022ca:	4a61      	ldr	r2, [pc, #388]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 80022cc:	f107 000c 	add.w	r0, r7, #12
 80022d0:	2301      	movs	r3, #1
 80022d2:	ca06      	ldmia	r2, {r1, r2}
 80022d4:	f000 f9f0 	bl	80026b8 <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80022de:	e013      	b.n	8002308 <ssd1306_WriteKnob+0x154>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 80022e0:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <ssd1306_WriteKnob+0x2a0>)
 80022e2:	885b      	ldrh	r3, [r3, #2]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 80022e8:	785b      	ldrb	r3, [r3, #1]
 80022ea:	4413      	add	r3, r2
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3304      	adds	r3, #4
 80022f0:	b2d9      	uxtb	r1, r3
 80022f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022f6:	2201      	movs	r2, #1
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f8fd 	bl	80024f8 <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 80022fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002302:	3301      	adds	r3, #1
 8002304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002308:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800230c:	2b00      	cmp	r3, #0
 800230e:	dae7      	bge.n	80022e0 <ssd1306_WriteKnob+0x12c>
    }

    uint8_t len_label = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t x = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t y = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 8002322:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <ssd1306_WriteKnob+0x29c>)
 8002324:	785b      	ldrb	r3, [r3, #1]
 8002326:	f1c3 0320 	rsb	r3, r3, #32
 800232a:	b2db      	uxtb	r3, r3
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    // Draw main label
    len_label = strlen(k->label);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3302      	adds	r3, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f7fd ff5c 	bl	80001f4 <strlen>
 800233c:	4603      	mov	r3, r0
 800233e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8002342:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002346:	4a44      	ldr	r2, [pc, #272]	; (8002458 <ssd1306_WriteKnob+0x2a4>)
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002352:	0fda      	lsrs	r2, r3, #31
 8002354:	4413      	add	r3, r2
 8002356:	105b      	asrs	r3, r3, #1
 8002358:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 800235c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002368:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800236c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002370:	4b39      	ldr	r3, [pc, #228]	; (8002458 <ssd1306_WriteKnob+0x2a4>)
 8002372:	785b      	ldrb	r3, [r3, #1]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	ee07 3a90 	vmov	s15, r3
 800237c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002388:	edc7 7a00 	vstr	s15, [r7]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 8002392:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002396:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f9b1 	bl	8002704 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	1c98      	adds	r0, r3, #2
 80023a6:	4a2c      	ldr	r2, [pc, #176]	; (8002458 <ssd1306_WriteKnob+0x2a4>)
 80023a8:	2301      	movs	r3, #1
 80023aa:	ca06      	ldmia	r2, {r1, r2}
 80023ac:	f000 f984 	bl	80026b8 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7f1b      	ldrb	r3, [r3, #28]
 80023b4:	b25b      	sxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db02      	blt.n	80023c0 <ssd1306_WriteKnob+0x20c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7edb      	ldrb	r3, [r3, #27]
 80023be:	e000      	b.n	80023c2 <ssd1306_WriteKnob+0x20e>
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    len_label = strlen(k->sub_labels[sl_index]);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6959      	ldr	r1, [r3, #20]
 80023ca:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fd ff0c 	bl	80001f4 <strlen>
 80023dc:	4603      	mov	r3, r0
 80023de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 80023e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023e6:	4a1c      	ldr	r2, [pc, #112]	; (8002458 <ssd1306_WriteKnob+0x2a4>)
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80023f2:	0fda      	lsrs	r2, r3, #31
 80023f4:	4413      	add	r3, r2
 80023f6:	105b      	asrs	r3, r3, #1
 80023f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <ssd1306_WriteKnob+0x2a4>)
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002404:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 8002408:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800240c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f976 	bl	8002704 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6959      	ldr	r1, [r3, #20]
 800241c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	18c8      	adds	r0, r1, r3
 8002428:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <ssd1306_WriteKnob+0x2a4>)
 800242a:	2301      	movs	r3, #1
 800242c:	ca06      	ldmia	r2, {r1, r2}
 800242e:	f000 f943 	bl	80026b8 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8002432:	f7ff fe8f 	bl	8002154 <ssd1306_UpdateScreen>
}
 8002436:	bf00      	nop
 8002438:	3734      	adds	r7, #52	; 0x34
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}
 800243e:	bf00      	nop
 8002440:	080139fc 	.word	0x080139fc
 8002444:	080139e8 	.word	0x080139e8
 8002448:	080139f0 	.word	0x080139f0
 800244c:	080139f8 	.word	0x080139f8
 8002450:	20000000 	.word	0x20000000
 8002454:	20000758 	.word	0x20000758
 8002458:	20000008 	.word	0x20000008

0800245c <ssd1306_WritePresets>:

void ssd1306_WritePresets() {
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8002462:	2300      	movs	r3, #0
 8002464:	71fb      	strb	r3, [r7, #7]
 8002466:	e038      	b.n	80024da <ssd1306_WritePresets+0x7e>
        ssd1306_Select(&knobs[i]);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	015b      	lsls	r3, r3, #5
 800246c:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <ssd1306_WritePresets+0x90>)
 800246e:	4413      	add	r3, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f000 f989 	bl	8002788 <ssd1306_Select>
        ssd1306_Fill(Black);
 8002476:	2000      	movs	r0, #0
 8002478:	f7ff fe48 	bl	800210c <ssd1306_Fill>
        uint8_t x = (SSD1306_WIDTH - strlen(presets[i]) * Font_10x18.FontWidth) / 2;
 800247c:	79fa      	ldrb	r2, [r7, #7]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <ssd1306_WritePresets+0x94>)
 8002486:	4413      	add	r3, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7fd feb3 	bl	80001f4 <strlen>
 800248e:	4603      	mov	r3, r0
 8002490:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <ssd1306_WritePresets+0x98>)
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	71bb      	strb	r3, [r7, #6]
        uint8_t y = SSD1306_HEIGHT / 2 - Font_10x18.FontHeight / 2;
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <ssd1306_WritePresets+0x98>)
 80024a2:	785b      	ldrb	r3, [r3, #1]
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f1c3 0320 	rsb	r3, r3, #32
 80024ac:	717b      	strb	r3, [r7, #5]
        ssd1306_SetCursor(x, y);
 80024ae:	797a      	ldrb	r2, [r7, #5]
 80024b0:	79bb      	ldrb	r3, [r7, #6]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f925 	bl	8002704 <ssd1306_SetCursor>
        ssd1306_WriteString(presets[i], Font_10x18, White);
 80024ba:	79fa      	ldrb	r2, [r7, #7]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <ssd1306_WritePresets+0x94>)
 80024c4:	1898      	adds	r0, r3, r2
 80024c6:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <ssd1306_WritePresets+0x98>)
 80024c8:	2301      	movs	r3, #1
 80024ca:	ca06      	ldmia	r2, {r1, r2}
 80024cc:	f000 f8f4 	bl	80026b8 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80024d0:	f7ff fe40 	bl	8002154 <ssd1306_UpdateScreen>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	3301      	adds	r3, #1
 80024d8:	71fb      	strb	r3, [r7, #7]
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d9c3      	bls.n	8002468 <ssd1306_WritePresets+0xc>
    }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20002580 	.word	0x20002580
 80024f0:	200026c0 	.word	0x200026c0
 80024f4:	20000008 	.word	0x20000008

080024f8 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
 8002502:	460b      	mov	r3, r1
 8002504:	71bb      	strb	r3, [r7, #6]
 8002506:	4613      	mov	r3, r2
 8002508:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db48      	blt.n	80025a4 <ssd1306_DrawPixel+0xac>
 8002512:	79bb      	ldrb	r3, [r7, #6]
 8002514:	2b3f      	cmp	r3, #63	; 0x3f
 8002516:	d845      	bhi.n	80025a4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <ssd1306_DrawPixel+0xb8>)
 800251a:	791b      	ldrb	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8002520:	797b      	ldrb	r3, [r7, #5]
 8002522:	2b00      	cmp	r3, #0
 8002524:	bf0c      	ite	eq
 8002526:	2301      	moveq	r3, #1
 8002528:	2300      	movne	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 800252e:	797b      	ldrb	r3, [r7, #5]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d11a      	bne.n	800256a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002534:	79fa      	ldrb	r2, [r7, #7]
 8002536:	79bb      	ldrb	r3, [r7, #6]
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	b2d8      	uxtb	r0, r3
 800253c:	4603      	mov	r3, r0
 800253e:	01db      	lsls	r3, r3, #7
 8002540:	4413      	add	r3, r2
 8002542:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <ssd1306_DrawPixel+0xbc>)
 8002544:	5cd3      	ldrb	r3, [r2, r3]
 8002546:	b25a      	sxtb	r2, r3
 8002548:	79bb      	ldrb	r3, [r7, #6]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	b25b      	sxtb	r3, r3
 8002556:	4313      	orrs	r3, r2
 8002558:	b259      	sxtb	r1, r3
 800255a:	79fa      	ldrb	r2, [r7, #7]
 800255c:	4603      	mov	r3, r0
 800255e:	01db      	lsls	r3, r3, #7
 8002560:	4413      	add	r3, r2
 8002562:	b2c9      	uxtb	r1, r1
 8002564:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <ssd1306_DrawPixel+0xbc>)
 8002566:	54d1      	strb	r1, [r2, r3]
 8002568:	e01d      	b.n	80025a6 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800256a:	79fa      	ldrb	r2, [r7, #7]
 800256c:	79bb      	ldrb	r3, [r7, #6]
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	b2d8      	uxtb	r0, r3
 8002572:	4603      	mov	r3, r0
 8002574:	01db      	lsls	r3, r3, #7
 8002576:	4413      	add	r3, r2
 8002578:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <ssd1306_DrawPixel+0xbc>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	b25a      	sxtb	r2, r3
 800257e:	79bb      	ldrb	r3, [r7, #6]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	b25b      	sxtb	r3, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	b25b      	sxtb	r3, r3
 8002590:	4013      	ands	r3, r2
 8002592:	b259      	sxtb	r1, r3
 8002594:	79fa      	ldrb	r2, [r7, #7]
 8002596:	4603      	mov	r3, r0
 8002598:	01db      	lsls	r3, r3, #7
 800259a:	4413      	add	r3, r2
 800259c:	b2c9      	uxtb	r1, r1
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <ssd1306_DrawPixel+0xbc>)
 80025a0:	54d1      	strb	r1, [r2, r3]
 80025a2:	e000      	b.n	80025a6 <ssd1306_DrawPixel+0xae>
        return;
 80025a4:	bf00      	nop
    }
}
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	20000758 	.word	0x20000758
 80025b4:	20000358 	.word	0x20000358

080025b8 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4604      	mov	r4, r0
 80025c0:	1d38      	adds	r0, r7, #4
 80025c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80025c6:	461a      	mov	r2, r3
 80025c8:	4623      	mov	r3, r4
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	4613      	mov	r3, r2
 80025ce:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80025d0:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <ssd1306_WriteChar+0xfc>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	793b      	ldrb	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	2b7f      	cmp	r3, #127	; 0x7f
 80025dc:	dc06      	bgt.n	80025ec <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 80025de:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <ssd1306_WriteChar+0xfc>)
 80025e0:	885b      	ldrh	r3, [r3, #2]
 80025e2:	461a      	mov	r2, r3
 80025e4:	797b      	ldrb	r3, [r7, #5]
 80025e6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80025e8:	2b3f      	cmp	r3, #63	; 0x3f
 80025ea:	dd01      	ble.n	80025f0 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e05d      	b.n	80026ac <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	e04c      	b.n	8002690 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	3b20      	subs	r3, #32
 80025fc:	7979      	ldrb	r1, [r7, #5]
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4619      	mov	r1, r3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	440b      	add	r3, r1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	e034      	b.n	8002680 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d012      	beq.n	800264c <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002626:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <ssd1306_WriteChar+0xfc>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4413      	add	r3, r2
 8002632:	b2d8      	uxtb	r0, r3
 8002634:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <ssd1306_WriteChar+0xfc>)
 8002636:	885b      	ldrh	r3, [r3, #2]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4413      	add	r3, r2
 8002640:	b2db      	uxtb	r3, r3
 8002642:	7bba      	ldrb	r2, [r7, #14]
 8002644:	4619      	mov	r1, r3
 8002646:	f7ff ff57 	bl	80024f8 <ssd1306_DrawPixel>
 800264a:	e016      	b.n	800267a <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <ssd1306_WriteChar+0xfc>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4413      	add	r3, r2
 8002658:	b2d8      	uxtb	r0, r3
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <ssd1306_WriteChar+0xfc>)
 800265c:	885b      	ldrh	r3, [r3, #2]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4413      	add	r3, r2
 8002666:	b2d9      	uxtb	r1, r3
 8002668:	7bbb      	ldrb	r3, [r7, #14]
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	f7ff ff3f 	bl	80024f8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	3301      	adds	r3, #1
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	793b      	ldrb	r3, [r7, #4]
 8002682:	461a      	mov	r2, r3
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4293      	cmp	r3, r2
 8002688:	d3c5      	bcc.n	8002616 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3301      	adds	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	797b      	ldrb	r3, [r7, #5]
 8002692:	461a      	mov	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	4293      	cmp	r3, r2
 8002698:	d3ad      	bcc.n	80025f6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <ssd1306_WriteChar+0xfc>)
 800269c:	881a      	ldrh	r2, [r3, #0]
 800269e:	793b      	ldrb	r3, [r7, #4]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <ssd1306_WriteChar+0xfc>)
 80026a8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3724      	adds	r7, #36	; 0x24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}
 80026b4:	20000758 	.word	0x20000758

080026b8 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	1d38      	adds	r0, r7, #4
 80026c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80026c6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80026c8:	e012      	b.n	80026f0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	7818      	ldrb	r0, [r3, #0]
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	1d3a      	adds	r2, r7, #4
 80026d2:	ca06      	ldmia	r2, {r1, r2}
 80026d4:	f7ff ff70 	bl	80025b8 <ssd1306_WriteChar>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d002      	beq.n	80026ea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	e008      	b.n	80026fc <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3301      	adds	r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e8      	bne.n	80026ca <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	781b      	ldrb	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	460a      	mov	r2, r1
 800270e:	71fb      	strb	r3, [r7, #7]
 8002710:	4613      	mov	r3, r2
 8002712:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	b29a      	uxth	r2, r3
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <ssd1306_SetCursor+0x2c>)
 800271a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800271c:	79bb      	ldrb	r3, [r7, #6]
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <ssd1306_SetCursor+0x2c>)
 8002722:	805a      	strh	r2, [r3, #2]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	20000758 	.word	0x20000758

08002734 <ssd1306_AdjustBrightness>:

// Adjust brightness
void ssd1306_AdjustBrightness(uint8_t brightness) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af04      	add	r7, sp, #16
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
    uint8_t contrast_cmd = 0x81;
 800273e:	2381      	movs	r3, #129	; 0x81
 8002740:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast_level = brightness;
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_cmd, 1, 10);
 8002746:	230a      	movs	r3, #10
 8002748:	9302      	str	r3, [sp, #8]
 800274a:	2301      	movs	r3, #1
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	f107 030f 	add.w	r3, r7, #15
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2301      	movs	r3, #1
 8002756:	2200      	movs	r2, #0
 8002758:	2178      	movs	r1, #120	; 0x78
 800275a:	480a      	ldr	r0, [pc, #40]	; (8002784 <ssd1306_AdjustBrightness+0x50>)
 800275c:	f001 fdfc 	bl	8004358 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_level, 1, 10);
 8002760:	230a      	movs	r3, #10
 8002762:	9302      	str	r3, [sp, #8]
 8002764:	2301      	movs	r3, #1
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	f107 030e 	add.w	r3, r7, #14
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	2200      	movs	r2, #0
 8002772:	2178      	movs	r1, #120	; 0x78
 8002774:	4803      	ldr	r0, [pc, #12]	; (8002784 <ssd1306_AdjustBrightness+0x50>)
 8002776:	f001 fdef 	bl	8004358 <HAL_I2C_Mem_Write>
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20002600 	.word	0x20002600

08002788 <ssd1306_Select>:

// Select a display
void ssd1306_Select(Knob *k) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
    i2c_Select(I2C_MUX_MASTER_ADDR, k->row);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	20e2      	movs	r0, #226	; 0xe2
 8002798:	f000 f80a 	bl	80027b0 <i2c_Select>
    i2c_Select(I2C_MUX_SLAVE_ADDR, k->col);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	785b      	ldrb	r3, [r3, #1]
 80027a0:	4619      	mov	r1, r3
 80027a2:	20e0      	movs	r0, #224	; 0xe0
 80027a4:	f000 f804 	bl	80027b0 <i2c_Select>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(uint8_t mux_addr, uint8_t i) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	4603      	mov	r3, r0
 80027b8:	460a      	mov	r2, r1
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	4613      	mov	r3, r2
 80027be:	71bb      	strb	r3, [r7, #6]
    if (i > 7) return;
 80027c0:	79bb      	ldrb	r3, [r7, #6]
 80027c2:	2b07      	cmp	r3, #7
 80027c4:	d810      	bhi.n	80027e8 <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 80027c6:	79bb      	ldrb	r3, [r7, #6]
 80027c8:	2201      	movs	r2, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	b299      	uxth	r1, r3
 80027d6:	f107 020c 	add.w	r2, r7, #12
 80027da:	2364      	movs	r3, #100	; 0x64
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2301      	movs	r3, #1
 80027e0:	4803      	ldr	r0, [pc, #12]	; (80027f0 <i2c_Select+0x40>)
 80027e2:	f001 fcbb 	bl	800415c <HAL_I2C_Master_Transmit>
 80027e6:	e000      	b.n	80027ea <i2c_Select+0x3a>
    if (i > 7) return;
 80027e8:	bf00      	nop
}
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20002600 	.word	0x20002600

080027f4 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
    int8_t init_diff = Knob_Map(k, k->init_value, MIDI_MAX) - Knob_Map(k, k->value, MIDI_MAX);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7e9b      	ldrb	r3, [r3, #26]
 8002800:	227f      	movs	r2, #127	; 0x7f
 8002802:	4619      	mov	r1, r3
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7fe fbf3 	bl	8000ff0 <Knob_Map>
 800280a:	4603      	mov	r3, r0
 800280c:	461c      	mov	r4, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7edb      	ldrb	r3, [r3, #27]
 8002812:	227f      	movs	r2, #127	; 0x7f
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fbea 	bl	8000ff0 <Knob_Map>
 800281c:	4603      	mov	r3, r0
 800281e:	1ae3      	subs	r3, r4, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	bfb8      	it	lt
 800282c:	425b      	neglt	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002838:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002924 <update_init_indicator+0x130>
 800283c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002840:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002928 <update_init_indicator+0x134>
 8002844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800284c:	edc7 7a00 	vstr	s15, [r7]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 8002854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <update_init_indicator+0x6c>
 800285c:	4b33      	ldr	r3, [pc, #204]	; (800292c <update_init_indicator+0x138>)
 800285e:	e05c      	b.n	800291a <update_init_indicator+0x126>

    if (init_pct < 15) {
 8002860:	7bbb      	ldrb	r3, [r7, #14]
 8002862:	2b0e      	cmp	r3, #14
 8002864:	d807      	bhi.n	8002876 <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 8002866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286a:	2b00      	cmp	r3, #0
 800286c:	dd01      	ble.n	8002872 <update_init_indicator+0x7e>
 800286e:	4b30      	ldr	r3, [pc, #192]	; (8002930 <update_init_indicator+0x13c>)
 8002870:	e053      	b.n	800291a <update_init_indicator+0x126>
        else return "        <      ";
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <update_init_indicator+0x140>)
 8002874:	e051      	b.n	800291a <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 8002876:	7bbb      	ldrb	r3, [r7, #14]
 8002878:	2b0e      	cmp	r3, #14
 800287a:	d90a      	bls.n	8002892 <update_init_indicator+0x9e>
 800287c:	7bbb      	ldrb	r3, [r7, #14]
 800287e:	2b1d      	cmp	r3, #29
 8002880:	d807      	bhi.n	8002892 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	dd01      	ble.n	800288e <update_init_indicator+0x9a>
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <update_init_indicator+0x144>)
 800288c:	e045      	b.n	800291a <update_init_indicator+0x126>
        else return "        <<     ";
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <update_init_indicator+0x148>)
 8002890:	e043      	b.n	800291a <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 8002892:	7bbb      	ldrb	r3, [r7, #14]
 8002894:	2b1d      	cmp	r3, #29
 8002896:	d90a      	bls.n	80028ae <update_init_indicator+0xba>
 8002898:	7bbb      	ldrb	r3, [r7, #14]
 800289a:	2b2c      	cmp	r3, #44	; 0x2c
 800289c:	d807      	bhi.n	80028ae <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 800289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	dd01      	ble.n	80028aa <update_init_indicator+0xb6>
 80028a6:	4b26      	ldr	r3, [pc, #152]	; (8002940 <update_init_indicator+0x14c>)
 80028a8:	e037      	b.n	800291a <update_init_indicator+0x126>
        else return "        <<<    ";
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <update_init_indicator+0x150>)
 80028ac:	e035      	b.n	800291a <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 80028ae:	7bbb      	ldrb	r3, [r7, #14]
 80028b0:	2b2c      	cmp	r3, #44	; 0x2c
 80028b2:	d90a      	bls.n	80028ca <update_init_indicator+0xd6>
 80028b4:	7bbb      	ldrb	r3, [r7, #14]
 80028b6:	2b3c      	cmp	r3, #60	; 0x3c
 80028b8:	d807      	bhi.n	80028ca <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dd01      	ble.n	80028c6 <update_init_indicator+0xd2>
 80028c2:	4b21      	ldr	r3, [pc, #132]	; (8002948 <update_init_indicator+0x154>)
 80028c4:	e029      	b.n	800291a <update_init_indicator+0x126>
        else return "        <<<<   ";
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <update_init_indicator+0x158>)
 80028c8:	e027      	b.n	800291a <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 80028ca:	7bbb      	ldrb	r3, [r7, #14]
 80028cc:	2b3c      	cmp	r3, #60	; 0x3c
 80028ce:	d90a      	bls.n	80028e6 <update_init_indicator+0xf2>
 80028d0:	7bbb      	ldrb	r3, [r7, #14]
 80028d2:	2b4c      	cmp	r3, #76	; 0x4c
 80028d4:	d807      	bhi.n	80028e6 <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	dd01      	ble.n	80028e2 <update_init_indicator+0xee>
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <update_init_indicator+0x15c>)
 80028e0:	e01b      	b.n	800291a <update_init_indicator+0x126>
        else return "        <<<<<  ";
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <update_init_indicator+0x160>)
 80028e4:	e019      	b.n	800291a <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 80028e6:	7bbb      	ldrb	r3, [r7, #14]
 80028e8:	2b4c      	cmp	r3, #76	; 0x4c
 80028ea:	d90a      	bls.n	8002902 <update_init_indicator+0x10e>
 80028ec:	7bbb      	ldrb	r3, [r7, #14]
 80028ee:	2b5c      	cmp	r3, #92	; 0x5c
 80028f0:	d807      	bhi.n	8002902 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	dd01      	ble.n	80028fe <update_init_indicator+0x10a>
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <update_init_indicator+0x164>)
 80028fc:	e00d      	b.n	800291a <update_init_indicator+0x126>
        else return "        <<<<<< ";
 80028fe:	4b17      	ldr	r3, [pc, #92]	; (800295c <update_init_indicator+0x168>)
 8002900:	e00b      	b.n	800291a <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002902:	7bbb      	ldrb	r3, [r7, #14]
 8002904:	2b5c      	cmp	r3, #92	; 0x5c
 8002906:	d907      	bls.n	8002918 <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	dd01      	ble.n	8002914 <update_init_indicator+0x120>
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <update_init_indicator+0x16c>)
 8002912:	e002      	b.n	800291a <update_init_indicator+0x126>
        else return "        <<<<<<<";
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <update_init_indicator+0x170>)
 8002916:	e000      	b.n	800291a <update_init_indicator+0x126>
    } else {
        return " ";
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <update_init_indicator+0x174>)
    }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	bf00      	nop
 8002924:	42fe0000 	.word	0x42fe0000
 8002928:	42c80000 	.word	0x42c80000
 800292c:	080139fc 	.word	0x080139fc
 8002930:	08013a1c 	.word	0x08013a1c
 8002934:	08013a2c 	.word	0x08013a2c
 8002938:	08013a3c 	.word	0x08013a3c
 800293c:	08013a4c 	.word	0x08013a4c
 8002940:	08013a5c 	.word	0x08013a5c
 8002944:	08013a6c 	.word	0x08013a6c
 8002948:	08013a7c 	.word	0x08013a7c
 800294c:	08013a8c 	.word	0x08013a8c
 8002950:	08013a9c 	.word	0x08013a9c
 8002954:	08013aac 	.word	0x08013aac
 8002958:	08013abc 	.word	0x08013abc
 800295c:	08013acc 	.word	0x08013acc
 8002960:	08013adc 	.word	0x08013adc
 8002964:	08013aec 	.word	0x08013aec
 8002968:	08013afc 	.word	0x08013afc

0800296c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_MspInit+0x4c>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <HAL_MspInit+0x4c>)
 800297c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002980:	6453      	str	r3, [r2, #68]	; 0x44
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_MspInit+0x4c>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_MspInit+0x4c>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <HAL_MspInit+0x4c>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_MspInit+0x4c>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800

080029bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <HAL_ADC_MspInit+0x7c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d127      	bne.n	8002a2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_ADC_MspInit+0x80>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <HAL_ADC_MspInit+0x80>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_ADC_MspInit+0x80>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <HAL_ADC_MspInit+0x80>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <HAL_ADC_MspInit+0x80>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <HAL_ADC_MspInit+0x80>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a16:	230f      	movs	r3, #15
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	4805      	ldr	r0, [pc, #20]	; (8002a40 <HAL_ADC_MspInit+0x84>)
 8002a2a:	f001 f883 	bl	8003b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a2e:	bf00      	nop
 8002a30:	3728      	adds	r7, #40	; 0x28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40012000 	.word	0x40012000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40020000 	.word	0x40020000

08002a44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_I2C_MspInit+0x84>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d12b      	bne.n	8002abe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_I2C_MspInit+0x88>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a17      	ldr	r2, [pc, #92]	; (8002acc <HAL_I2C_MspInit+0x88>)
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_I2C_MspInit+0x88>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a82:	23c0      	movs	r3, #192	; 0xc0
 8002a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a86:	2312      	movs	r3, #18
 8002a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a92:	2304      	movs	r3, #4
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <HAL_I2C_MspInit+0x8c>)
 8002a9e:	f001 f849 	bl	8003b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_I2C_MspInit+0x88>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_I2C_MspInit+0x88>)
 8002aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_I2C_MspInit+0x88>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002abe:	bf00      	nop
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40005400 	.word	0x40005400
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020400 	.word	0x40020400

08002ad4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <HAL_RTC_MspInit+0x24>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d102      	bne.n	8002aec <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RTC_MspInit+0x28>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40002800 	.word	0x40002800
 8002afc:	42470e3c 	.word	0x42470e3c

08002b00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <HAL_SD_MspInit+0xc4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d14b      	bne.n	8002bba <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_SD_MspInit+0xc8>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <HAL_SD_MspInit+0xc8>)
 8002b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_SD_MspInit+0xc8>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <HAL_SD_MspInit+0xc8>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <HAL_SD_MspInit+0xc8>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <HAL_SD_MspInit+0xc8>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_SD_MspInit+0xc8>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4a19      	ldr	r2, [pc, #100]	; (8002bc8 <HAL_SD_MspInit+0xc8>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_SD_MspInit+0xc8>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002b76:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002b88:	230c      	movs	r3, #12
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	480e      	ldr	r0, [pc, #56]	; (8002bcc <HAL_SD_MspInit+0xcc>)
 8002b94:	f000 ffce 	bl	8003b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8002b98:	f248 0330 	movw	r3, #32816	; 0x8030
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002baa:	230c      	movs	r3, #12
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4806      	ldr	r0, [pc, #24]	; (8002bd0 <HAL_SD_MspInit+0xd0>)
 8002bb6:	f000 ffbd 	bl	8003b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002bba:	bf00      	nop
 8002bbc:	3728      	adds	r7, #40	; 0x28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40020400 	.word	0x40020400

08002bd4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <NMI_Handler+0x4>

08002bda <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8002bde:	e7fe      	b.n	8002bde <HardFault_Handler+0x4>

08002be0 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8002be4:	e7fe      	b.n	8002be4 <MemManage_Handler+0x4>

08002be6 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8002bea:	e7fe      	b.n	8002bea <BusFault_Handler+0x4>

08002bec <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <UsageFault_Handler+0x4>

08002bf2 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	e046      	b.n	8002cb6 <SysTick_Handler+0x9a>
        GPIO_TypeDef *t = (i == BUTTON_MENU) ? GPIO_PORT_BUTTON_6 : GPIO_PORT_BUTTONS_1TO5;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d101      	bne.n	8002c32 <SysTick_Handler+0x16>
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <SysTick_Handler+0xac>)
 8002c30:	e000      	b.n	8002c34 <SysTick_Handler+0x18>
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <SysTick_Handler+0xb0>)
 8002c34:	60bb      	str	r3, [r7, #8]
        uint8_t reading = HAL_GPIO_ReadPin(t, btnPins[i]);
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	4a25      	ldr	r2, [pc, #148]	; (8002cd0 <SysTick_Handler+0xb4>)
 8002c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	f001 f8fb 	bl	8003e3c <HAL_GPIO_ReadPin>
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]

        if (reading == btnStatesLast[i] && reading != btnStates[i]) {
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <SysTick_Handler+0xb8>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	79fa      	ldrb	r2, [r7, #7]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d128      	bne.n	8002ca8 <SysTick_Handler+0x8c>
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <SysTick_Handler+0xbc>)
 8002c5a:	5cd3      	ldrb	r3, [r2, r3]
 8002c5c:	79fa      	ldrb	r2, [r7, #7]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d022      	beq.n	8002ca8 <SysTick_Handler+0x8c>
            btnStates[i] = reading;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	491c      	ldr	r1, [pc, #112]	; (8002cd8 <SysTick_Handler+0xbc>)
 8002c66:	79fa      	ldrb	r2, [r7, #7]
 8002c68:	54ca      	strb	r2, [r1, r3]

            if (btnStates[i] == GPIO_PIN_RESET) {
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <SysTick_Handler+0xbc>)
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d119      	bne.n	8002ca8 <SysTick_Handler+0x8c>
                if (i == BUTTON_MENU) {
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d10e      	bne.n	8002c98 <SysTick_Handler+0x7c>
                    isMenuActive = !isMenuActive;
 8002c7a:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <SysTick_Handler+0xc0>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <SysTick_Handler+0xc0>)
 8002c96:	701a      	strb	r2, [r3, #0]
                }
                HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <SysTick_Handler+0xc4>)
 8002c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4810      	ldr	r0, [pc, #64]	; (8002ce4 <SysTick_Handler+0xc8>)
 8002ca4:	f001 f8fb 	bl	8003e9e <HAL_GPIO_TogglePin>
            }
        }

        btnStatesLast[i] = reading;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	490a      	ldr	r1, [pc, #40]	; (8002cd4 <SysTick_Handler+0xb8>)
 8002cac:	79fa      	ldrb	r2, [r7, #7]
 8002cae:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d9b5      	bls.n	8002c28 <SysTick_Handler+0xc>
    }
    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002cbc:	f000 f9f2 	bl	80030a4 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40020800 	.word	0x40020800
 8002ccc:	40020000 	.word	0x40020000
 8002cd0:	20000030 	.word	0x20000030
 8002cd4:	20000028 	.word	0x20000028
 8002cd8:	20000020 	.word	0x20000020
 8002cdc:	2000269c 	.word	0x2000269c
 8002ce0:	2000003c 	.word	0x2000003c
 8002ce4:	40020400 	.word	0x40020400

08002ce8 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <OTG_FS_IRQHandler+0x10>)
 8002cee:	f002 f81c 	bl	8004d2a <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200030c0 	.word	0x200030c0

08002cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
	return 1;
 8002d00:	2301      	movs	r3, #1
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <_kill>:

int _kill(int pid, int sig)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d16:	f00d fb67 	bl	80103e8 <__errno>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2216      	movs	r2, #22
 8002d1e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_exit>:

void _exit (int status)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ffe7 	bl	8002d0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d3e:	e7fe      	b.n	8002d3e <_exit+0x12>

08002d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e00a      	b.n	8002d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d52:	f3af 8000 	nop.w
 8002d56:	4601      	mov	r1, r0
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	60ba      	str	r2, [r7, #8]
 8002d5e:	b2ca      	uxtb	r2, r1
 8002d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	3301      	adds	r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	dbf0      	blt.n	8002d52 <_read+0x12>
	}

return len;
 8002d70:	687b      	ldr	r3, [r7, #4]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e009      	b.n	8002da0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	60ba      	str	r2, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	dbf1      	blt.n	8002d8c <_write+0x12>
	}
	return len;
 8002da8:	687b      	ldr	r3, [r7, #4]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <_close>:

int _close(int file)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
	return -1;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dda:	605a      	str	r2, [r3, #4]
	return 0;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <_isatty>:

int _isatty(int file)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
	return 1;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <_sbrk+0x5c>)
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <_sbrk+0x60>)
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <_sbrk+0x64>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <_sbrk+0x68>)
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <_sbrk+0x64>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d207      	bcs.n	8002e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e4c:	f00d facc 	bl	80103e8 <__errno>
 8002e50:	4603      	mov	r3, r0
 8002e52:	220c      	movs	r2, #12
 8002e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e009      	b.n	8002e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <_sbrk+0x64>)
 8002e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20020000 	.word	0x20020000
 8002e7c:	00000400 	.word	0x00000400
 8002e80:	20000760 	.word	0x20000760
 8002e84:	200034d8 	.word	0x200034d8

08002e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <SystemInit+0x20>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <SystemInit+0x20>)
 8002e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	2302      	movs	r3, #2
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002ec6:	4b34      	ldr	r3, [pc, #208]	; (8002f98 <SystemCoreClockUpdate+0xec>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d011      	beq.n	8002efa <SystemCoreClockUpdate+0x4e>
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d844      	bhi.n	8002f66 <SystemCoreClockUpdate+0xba>
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <SystemCoreClockUpdate+0x3e>
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d004      	beq.n	8002ef2 <SystemCoreClockUpdate+0x46>
 8002ee8:	e03d      	b.n	8002f66 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002eea:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <SystemCoreClockUpdate+0xf0>)
 8002eec:	4a2c      	ldr	r2, [pc, #176]	; (8002fa0 <SystemCoreClockUpdate+0xf4>)
 8002eee:	601a      	str	r2, [r3, #0]
      break;
 8002ef0:	e03d      	b.n	8002f6e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <SystemCoreClockUpdate+0xf0>)
 8002ef4:	4a2b      	ldr	r2, [pc, #172]	; (8002fa4 <SystemCoreClockUpdate+0xf8>)
 8002ef6:	601a      	str	r2, [r3, #0]
      break;
 8002ef8:	e039      	b.n	8002f6e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002efa:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <SystemCoreClockUpdate+0xec>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0d9b      	lsrs	r3, r3, #22
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <SystemCoreClockUpdate+0xec>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00c      	beq.n	8002f30 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002f16:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <SystemCoreClockUpdate+0xf8>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <SystemCoreClockUpdate+0xec>)
 8002f20:	6852      	ldr	r2, [r2, #4]
 8002f22:	0992      	lsrs	r2, r2, #6
 8002f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f28:	fb02 f303 	mul.w	r3, r2, r3
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	e00b      	b.n	8002f48 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002f30:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <SystemCoreClockUpdate+0xf4>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <SystemCoreClockUpdate+0xec>)
 8002f3a:	6852      	ldr	r2, [r2, #4]
 8002f3c:	0992      	lsrs	r2, r2, #6
 8002f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <SystemCoreClockUpdate+0xec>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	3301      	adds	r3, #1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <SystemCoreClockUpdate+0xf0>)
 8002f62:	6013      	str	r3, [r2, #0]
      break;
 8002f64:	e003      	b.n	8002f6e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <SystemCoreClockUpdate+0xf0>)
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <SystemCoreClockUpdate+0xf4>)
 8002f6a:	601a      	str	r2, [r3, #0]
      break;
 8002f6c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <SystemCoreClockUpdate+0xec>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <SystemCoreClockUpdate+0xfc>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002f7e:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <SystemCoreClockUpdate+0xf0>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <SystemCoreClockUpdate+0xf0>)
 8002f8a:	6013      	str	r3, [r2, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	20000048 	.word	0x20000048
 8002fa0:	00f42400 	.word	0x00f42400
 8002fa4:	017d7840 	.word	0x017d7840
 8002fa8:	08014eb0 	.word	0x08014eb0

08002fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fe4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb0:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fb2:	490e      	ldr	r1, [pc, #56]	; (8002fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb8:	e002      	b.n	8002fc0 <LoopCopyDataInit>

08002fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fbe:	3304      	adds	r3, #4

08002fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc4:	d3f9      	bcc.n	8002fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fc8:	4c0b      	ldr	r4, [pc, #44]	; (8002ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fcc:	e001      	b.n	8002fd2 <LoopFillZerobss>

08002fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd0:	3204      	adds	r2, #4

08002fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd4:	d3fb      	bcc.n	8002fce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fd6:	f7ff ff57 	bl	8002e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fda:	f00d fa0b 	bl	80103f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fde:	f7fe f86b 	bl	80010b8 <main>
  bx  lr    
 8002fe2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fec:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8002ff0:	08015764 	.word	0x08015764
  ldr r2, =_sbss
 8002ff4:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8002ff8:	200034d8 	.word	0x200034d8

08002ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ffc:	e7fe      	b.n	8002ffc <ADC_IRQHandler>
	...

08003000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003004:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <HAL_Init+0x40>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <HAL_Init+0x40>)
 800300a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800300e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_Init+0x40>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <HAL_Init+0x40>)
 8003016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800301c:	4b08      	ldr	r3, [pc, #32]	; (8003040 <HAL_Init+0x40>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a07      	ldr	r2, [pc, #28]	; (8003040 <HAL_Init+0x40>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003028:	2003      	movs	r0, #3
 800302a:	f000 fd41 	bl	8003ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800302e:	2000      	movs	r0, #0
 8003030:	f000 f808 	bl	8003044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003034:	f7ff fc9a 	bl	800296c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023c00 	.word	0x40023c00

08003044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800304c:	4b12      	ldr	r3, [pc, #72]	; (8003098 <HAL_InitTick+0x54>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_InitTick+0x58>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800305a:	fbb3 f3f1 	udiv	r3, r3, r1
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fd59 	bl	8003b1a <HAL_SYSTICK_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e00e      	b.n	8003090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d80a      	bhi.n	800308e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003078:	2200      	movs	r2, #0
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	f000 fd21 	bl	8003ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003084:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <HAL_InitTick+0x5c>)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e000      	b.n	8003090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000048 	.word	0x20000048
 800309c:	20000050 	.word	0x20000050
 80030a0:	2000004c 	.word	0x2000004c

080030a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_IncTick+0x20>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_IncTick+0x24>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4413      	add	r3, r2
 80030b4:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <HAL_IncTick+0x24>)
 80030b6:	6013      	str	r3, [r2, #0]
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000050 	.word	0x20000050
 80030c8:	20002780 	.word	0x20002780

080030cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return uwTick;
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_GetTick+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20002780 	.word	0x20002780

080030e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030ec:	f7ff ffee 	bl	80030cc <HAL_GetTick>
 80030f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d005      	beq.n	800310a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_Delay+0x44>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800310a:	bf00      	nop
 800310c:	f7ff ffde 	bl	80030cc <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	429a      	cmp	r2, r3
 800311a:	d8f7      	bhi.n	800310c <HAL_Delay+0x28>
  {
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000050 	.word	0x20000050

0800312c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e033      	b.n	80031aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fc36 	bl	80029bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d118      	bne.n	800319c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003172:	f023 0302 	bic.w	r3, r3, #2
 8003176:	f043 0202 	orr.w	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 faca 	bl	8003718 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
 800319a:	e001      	b.n	80031a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_Start+0x1a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e097      	b.n	80032fe <HAL_ADC_Start+0x14a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d018      	beq.n	8003216 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <HAL_ADC_Start+0x158>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a45      	ldr	r2, [pc, #276]	; (8003310 <HAL_ADC_Start+0x15c>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0c9a      	lsrs	r2, r3, #18
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003208:	e002      	b.n	8003210 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	3b01      	subs	r3, #1
 800320e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f9      	bne.n	800320a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d15f      	bne.n	80032e4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800324e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d106      	bne.n	8003272 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f023 0206 	bic.w	r2, r3, #6
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
 8003270:	e002      	b.n	8003278 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_ADC_Start+0x160>)
 8003282:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800328c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10f      	bne.n	80032ba <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d129      	bne.n	80032fc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	e020      	b.n	80032fc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a16      	ldr	r2, [pc, #88]	; (8003318 <HAL_ADC_Start+0x164>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d11b      	bne.n	80032fc <HAL_ADC_Start+0x148>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d114      	bne.n	80032fc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	e00b      	b.n	80032fc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 0210 	orr.w	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000048 	.word	0x20000048
 8003310:	431bde83 	.word	0x431bde83
 8003314:	40012300 	.word	0x40012300
 8003318:	40012000 	.word	0x40012000

0800331c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_ADC_Stop+0x16>
 800332e:	2302      	movs	r3, #2
 8003330:	e021      	b.n	8003376 <HAL_ADC_Stop+0x5a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d113      	bne.n	80033c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ae:	d10b      	bne.n	80033c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e063      	b.n	8003490 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033c8:	f7ff fe80 	bl	80030cc <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033ce:	e021      	b.n	8003414 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d01d      	beq.n	8003414 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_ADC_PollForConversion+0x6c>
 80033de:	f7ff fe75 	bl	80030cc <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d212      	bcs.n	8003414 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d00b      	beq.n	8003414 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f043 0204 	orr.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e03d      	b.n	8003490 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d1d6      	bne.n	80033d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f06f 0212 	mvn.w	r2, #18
 800342a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d123      	bne.n	800348e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11f      	bne.n	800348e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003466:	2b00      	cmp	r3, #0
 8003468:	d111      	bne.n	800348e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x1c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e113      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x244>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b09      	cmp	r3, #9
 80034de:	d925      	bls.n	800352c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68d9      	ldr	r1, [r3, #12]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	3b1e      	subs	r3, #30
 80034f6:	2207      	movs	r2, #7
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43da      	mvns	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	400a      	ands	r2, r1
 8003504:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68d9      	ldr	r1, [r3, #12]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	4618      	mov	r0, r3
 8003518:	4603      	mov	r3, r0
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4403      	add	r3, r0
 800351e:	3b1e      	subs	r3, #30
 8003520:	409a      	lsls	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	e022      	b.n	8003572 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6919      	ldr	r1, [r3, #16]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	2207      	movs	r2, #7
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	400a      	ands	r2, r1
 800354e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6919      	ldr	r1, [r3, #16]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	4618      	mov	r0, r3
 8003562:	4603      	mov	r3, r0
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4403      	add	r3, r0
 8003568:	409a      	lsls	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b06      	cmp	r3, #6
 8003578:	d824      	bhi.n	80035c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	3b05      	subs	r3, #5
 800358c:	221f      	movs	r2, #31
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	400a      	ands	r2, r1
 800359a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	4618      	mov	r0, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	3b05      	subs	r3, #5
 80035b6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34
 80035c2:	e04c      	b.n	800365e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d824      	bhi.n	8003616 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	3b23      	subs	r3, #35	; 0x23
 80035de:	221f      	movs	r2, #31
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43da      	mvns	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	400a      	ands	r2, r1
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	3b23      	subs	r3, #35	; 0x23
 8003608:	fa00 f203 	lsl.w	r2, r0, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
 8003614:	e023      	b.n	800365e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	3b41      	subs	r3, #65	; 0x41
 8003628:	221f      	movs	r2, #31
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43da      	mvns	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	400a      	ands	r2, r1
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	4618      	mov	r0, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	3b41      	subs	r3, #65	; 0x41
 8003652:	fa00 f203 	lsl.w	r2, r0, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_ADC_ConfigChannel+0x250>)
 8003660:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a28      	ldr	r2, [pc, #160]	; (8003708 <HAL_ADC_ConfigChannel+0x254>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10f      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1d8>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b12      	cmp	r3, #18
 8003672:	d10b      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_ADC_ConfigChannel+0x254>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12b      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_ADC_ConfigChannel+0x258>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <HAL_ADC_ConfigChannel+0x1f4>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b11      	cmp	r3, #17
 80036a6:	d122      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a11      	ldr	r2, [pc, #68]	; (800370c <HAL_ADC_ConfigChannel+0x258>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d111      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_ADC_ConfigChannel+0x25c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <HAL_ADC_ConfigChannel+0x260>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	0c9a      	lsrs	r2, r3, #18
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036e0:	e002      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f9      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40012300 	.word	0x40012300
 8003708:	40012000 	.word	0x40012000
 800370c:	10000012 	.word	0x10000012
 8003710:	20000048 	.word	0x20000048
 8003714:	431bde83 	.word	0x431bde83

08003718 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003720:	4b79      	ldr	r3, [pc, #484]	; (8003908 <ADC_Init+0x1f0>)
 8003722:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800374c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	021a      	lsls	r2, r3, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	4a58      	ldr	r2, [pc, #352]	; (800390c <ADC_Init+0x1f4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d022      	beq.n	80037f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6899      	ldr	r1, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	e00f      	b.n	8003816 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003814:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0202 	bic.w	r2, r2, #2
 8003824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	7e1b      	ldrb	r3, [r3, #24]
 8003830:	005a      	lsls	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01b      	beq.n	800387c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003852:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003862:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	3b01      	subs	r3, #1
 8003870:	035a      	lsls	r2, r3, #13
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	e007      	b.n	800388c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800388a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	051a      	lsls	r2, r3, #20
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6899      	ldr	r1, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038ce:	025a      	lsls	r2, r3, #9
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6899      	ldr	r1, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	029a      	lsls	r2, r3, #10
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40012300 	.word	0x40012300
 800390c:	0f000001 	.word	0x0f000001

08003910 <__NVIC_SetPriorityGrouping>:
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800392c:	4013      	ands	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800393c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003942:	4a04      	ldr	r2, [pc, #16]	; (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60d3      	str	r3, [r2, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_GetPriorityGrouping>:
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <__NVIC_GetPriorityGrouping+0x18>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	f003 0307 	and.w	r3, r3, #7
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <__NVIC_EnableIRQ>:
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db0b      	blt.n	800399e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4907      	ldr	r1, [pc, #28]	; (80039ac <__NVIC_EnableIRQ+0x38>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2001      	movs	r0, #1
 8003996:	fa00 f202 	lsl.w	r2, r0, r2
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000e100 	.word	0xe000e100

080039b0 <__NVIC_SetPriority>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	db0a      	blt.n	80039da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	490c      	ldr	r1, [pc, #48]	; (80039fc <__NVIC_SetPriority+0x4c>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	0112      	lsls	r2, r2, #4
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	440b      	add	r3, r1
 80039d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039d8:	e00a      	b.n	80039f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4908      	ldr	r1, [pc, #32]	; (8003a00 <__NVIC_SetPriority+0x50>)
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	3b04      	subs	r3, #4
 80039e8:	0112      	lsls	r2, r2, #4
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	440b      	add	r3, r1
 80039ee:	761a      	strb	r2, [r3, #24]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000e100 	.word	0xe000e100
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <NVIC_EncodePriority>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	; 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f1c3 0307 	rsb	r3, r3, #7
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	bf28      	it	cs
 8003a22:	2304      	movcs	r3, #4
 8003a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d902      	bls.n	8003a34 <NVIC_EncodePriority+0x30>
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3b03      	subs	r3, #3
 8003a32:	e000      	b.n	8003a36 <NVIC_EncodePriority+0x32>
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	401a      	ands	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	43d9      	mvns	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	4313      	orrs	r3, r2
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3724      	adds	r7, #36	; 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <SysTick_Config>:
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a7c:	d301      	bcc.n	8003a82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00f      	b.n	8003aa2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <SysTick_Config+0x40>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a8a:	210f      	movs	r1, #15
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	f7ff ff8e 	bl	80039b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <SysTick_Config+0x40>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a9a:	4b04      	ldr	r3, [pc, #16]	; (8003aac <SysTick_Config+0x40>)
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	e000e010 	.word	0xe000e010

08003ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff29 	bl	8003910 <__NVIC_SetPriorityGrouping>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad8:	f7ff ff3e 	bl	8003958 <__NVIC_GetPriorityGrouping>
 8003adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff ff8e 	bl	8003a04 <NVIC_EncodePriority>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff5d 	bl	80039b0 <__NVIC_SetPriority>
}
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff31 	bl	8003974 <__NVIC_EnableIRQ>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ffa2 	bl	8003a6c <SysTick_Config>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	e159      	b.n	8003e04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	f040 8148 	bne.w	8003dfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d005      	beq.n	8003b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d130      	bne.n	8003be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	2203      	movs	r2, #3
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 0201 	and.w	r2, r3, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d017      	beq.n	8003c24 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d123      	bne.n	8003c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	220f      	movs	r2, #15
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	08da      	lsrs	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3208      	adds	r2, #8
 8003c72:	69b9      	ldr	r1, [r7, #24]
 8003c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	2203      	movs	r2, #3
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 0203 	and.w	r2, r3, #3
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a2 	beq.w	8003dfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	4b57      	ldr	r3, [pc, #348]	; (8003e1c <HAL_GPIO_Init+0x2e8>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	4a56      	ldr	r2, [pc, #344]	; (8003e1c <HAL_GPIO_Init+0x2e8>)
 8003cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cca:	4b54      	ldr	r3, [pc, #336]	; (8003e1c <HAL_GPIO_Init+0x2e8>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cd6:	4a52      	ldr	r2, [pc, #328]	; (8003e20 <HAL_GPIO_Init+0x2ec>)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	3302      	adds	r3, #2
 8003cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	220f      	movs	r2, #15
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a49      	ldr	r2, [pc, #292]	; (8003e24 <HAL_GPIO_Init+0x2f0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d019      	beq.n	8003d36 <HAL_GPIO_Init+0x202>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a48      	ldr	r2, [pc, #288]	; (8003e28 <HAL_GPIO_Init+0x2f4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_GPIO_Init+0x1fe>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a47      	ldr	r2, [pc, #284]	; (8003e2c <HAL_GPIO_Init+0x2f8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00d      	beq.n	8003d2e <HAL_GPIO_Init+0x1fa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a46      	ldr	r2, [pc, #280]	; (8003e30 <HAL_GPIO_Init+0x2fc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <HAL_GPIO_Init+0x1f6>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a45      	ldr	r2, [pc, #276]	; (8003e34 <HAL_GPIO_Init+0x300>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d101      	bne.n	8003d26 <HAL_GPIO_Init+0x1f2>
 8003d22:	2304      	movs	r3, #4
 8003d24:	e008      	b.n	8003d38 <HAL_GPIO_Init+0x204>
 8003d26:	2307      	movs	r3, #7
 8003d28:	e006      	b.n	8003d38 <HAL_GPIO_Init+0x204>
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e004      	b.n	8003d38 <HAL_GPIO_Init+0x204>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e002      	b.n	8003d38 <HAL_GPIO_Init+0x204>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_GPIO_Init+0x204>
 8003d36:	2300      	movs	r3, #0
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	f002 0203 	and.w	r2, r2, #3
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	4093      	lsls	r3, r2
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d48:	4935      	ldr	r1, [pc, #212]	; (8003e20 <HAL_GPIO_Init+0x2ec>)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d56:	4b38      	ldr	r3, [pc, #224]	; (8003e38 <HAL_GPIO_Init+0x304>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d7a:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <HAL_GPIO_Init+0x304>)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d80:	4b2d      	ldr	r3, [pc, #180]	; (8003e38 <HAL_GPIO_Init+0x304>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003da4:	4a24      	ldr	r2, [pc, #144]	; (8003e38 <HAL_GPIO_Init+0x304>)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <HAL_GPIO_Init+0x304>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dce:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <HAL_GPIO_Init+0x304>)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dd4:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <HAL_GPIO_Init+0x304>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003df8:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <HAL_GPIO_Init+0x304>)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3301      	adds	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b0f      	cmp	r3, #15
 8003e08:	f67f aea2 	bls.w	8003b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40013800 	.word	0x40013800
 8003e24:	40020000 	.word	0x40020000
 8003e28:	40020400 	.word	0x40020400
 8003e2c:	40020800 	.word	0x40020800
 8003e30:	40020c00 	.word	0x40020c00
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40013c00 	.word	0x40013c00

08003e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	887b      	ldrh	r3, [r7, #2]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
 8003e58:	e001      	b.n	8003e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	807b      	strh	r3, [r7, #2]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e7c:	787b      	ldrb	r3, [r7, #1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e88:	e003      	b.n	8003e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	041a      	lsls	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	619a      	str	r2, [r3, #24]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eb0:	887a      	ldrh	r2, [r7, #2]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	041a      	lsls	r2, r3, #16
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	43d9      	mvns	r1, r3
 8003ebc:	887b      	ldrh	r3, [r7, #2]
 8003ebe:	400b      	ands	r3, r1
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	619a      	str	r2, [r3, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e12b      	b.n	800413e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fe fda2 	bl	8002a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2224      	movs	r2, #36	; 0x24
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f38:	f002 fb4a 	bl	80065d0 <HAL_RCC_GetPCLK1Freq>
 8003f3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4a81      	ldr	r2, [pc, #516]	; (8004148 <HAL_I2C_Init+0x274>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d807      	bhi.n	8003f58 <HAL_I2C_Init+0x84>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a80      	ldr	r2, [pc, #512]	; (800414c <HAL_I2C_Init+0x278>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	bf94      	ite	ls
 8003f50:	2301      	movls	r3, #1
 8003f52:	2300      	movhi	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e006      	b.n	8003f66 <HAL_I2C_Init+0x92>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a7d      	ldr	r2, [pc, #500]	; (8004150 <HAL_I2C_Init+0x27c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	bf94      	ite	ls
 8003f60:	2301      	movls	r3, #1
 8003f62:	2300      	movhi	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0e7      	b.n	800413e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4a78      	ldr	r2, [pc, #480]	; (8004154 <HAL_I2C_Init+0x280>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0c9b      	lsrs	r3, r3, #18
 8003f78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a6a      	ldr	r2, [pc, #424]	; (8004148 <HAL_I2C_Init+0x274>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d802      	bhi.n	8003fa8 <HAL_I2C_Init+0xd4>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	e009      	b.n	8003fbc <HAL_I2C_Init+0xe8>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	4a69      	ldr	r2, [pc, #420]	; (8004158 <HAL_I2C_Init+0x284>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	3301      	adds	r3, #1
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	495c      	ldr	r1, [pc, #368]	; (8004148 <HAL_I2C_Init+0x274>)
 8003fd8:	428b      	cmp	r3, r1
 8003fda:	d819      	bhi.n	8004010 <HAL_I2C_Init+0x13c>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1e59      	subs	r1, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fea:	1c59      	adds	r1, r3, #1
 8003fec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ff0:	400b      	ands	r3, r1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_I2C_Init+0x138>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1e59      	subs	r1, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	fbb1 f3f3 	udiv	r3, r1, r3
 8004004:	3301      	adds	r3, #1
 8004006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400a:	e051      	b.n	80040b0 <HAL_I2C_Init+0x1dc>
 800400c:	2304      	movs	r3, #4
 800400e:	e04f      	b.n	80040b0 <HAL_I2C_Init+0x1dc>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d111      	bne.n	800403c <HAL_I2C_Init+0x168>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1e58      	subs	r0, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	440b      	add	r3, r1
 8004026:	fbb0 f3f3 	udiv	r3, r0, r3
 800402a:	3301      	adds	r3, #1
 800402c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004030:	2b00      	cmp	r3, #0
 8004032:	bf0c      	ite	eq
 8004034:	2301      	moveq	r3, #1
 8004036:	2300      	movne	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e012      	b.n	8004062 <HAL_I2C_Init+0x18e>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1e58      	subs	r0, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	0099      	lsls	r1, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004052:	3301      	adds	r3, #1
 8004054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Init+0x196>
 8004066:	2301      	movs	r3, #1
 8004068:	e022      	b.n	80040b0 <HAL_I2C_Init+0x1dc>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10e      	bne.n	8004090 <HAL_I2C_Init+0x1bc>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1e58      	subs	r0, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	440b      	add	r3, r1
 8004080:	fbb0 f3f3 	udiv	r3, r0, r3
 8004084:	3301      	adds	r3, #1
 8004086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408e:	e00f      	b.n	80040b0 <HAL_I2C_Init+0x1dc>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1e58      	subs	r0, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	0099      	lsls	r1, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a6:	3301      	adds	r3, #1
 80040a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	6809      	ldr	r1, [r1, #0]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69da      	ldr	r2, [r3, #28]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6911      	ldr	r1, [r2, #16]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68d2      	ldr	r2, [r2, #12]
 80040ea:	4311      	orrs	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	430b      	orrs	r3, r1
 80040f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	000186a0 	.word	0x000186a0
 800414c:	001e847f 	.word	0x001e847f
 8004150:	003d08ff 	.word	0x003d08ff
 8004154:	431bde83 	.word	0x431bde83
 8004158:	10624dd3 	.word	0x10624dd3

0800415c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	461a      	mov	r2, r3
 8004168:	460b      	mov	r3, r1
 800416a:	817b      	strh	r3, [r7, #10]
 800416c:	4613      	mov	r3, r2
 800416e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004170:	f7fe ffac 	bl	80030cc <HAL_GetTick>
 8004174:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b20      	cmp	r3, #32
 8004180:	f040 80e0 	bne.w	8004344 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	2319      	movs	r3, #25
 800418a:	2201      	movs	r2, #1
 800418c:	4970      	ldr	r1, [pc, #448]	; (8004350 <HAL_I2C_Master_Transmit+0x1f4>)
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 faf4 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800419a:	2302      	movs	r3, #2
 800419c:	e0d3      	b.n	8004346 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_I2C_Master_Transmit+0x50>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e0cc      	b.n	8004346 <HAL_I2C_Master_Transmit+0x1ea>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d007      	beq.n	80041d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2221      	movs	r2, #33	; 0x21
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2210      	movs	r2, #16
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	893a      	ldrh	r2, [r7, #8]
 8004202:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a50      	ldr	r2, [pc, #320]	; (8004354 <HAL_I2C_Master_Transmit+0x1f8>)
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004214:	8979      	ldrh	r1, [r7, #10]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	6a3a      	ldr	r2, [r7, #32]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f996 	bl	800454c <I2C_MasterRequestWrite>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e08d      	b.n	8004346 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004240:	e066      	b.n	8004310 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	6a39      	ldr	r1, [r7, #32]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fb6e 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b04      	cmp	r3, #4
 8004258:	d107      	bne.n	800426a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004268:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e06b      	b.n	8004346 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d11b      	bne.n	80042e4 <HAL_I2C_Master_Transmit+0x188>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d017      	beq.n	80042e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	781a      	ldrb	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	6a39      	ldr	r1, [r7, #32]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fb5e 	bl	80049aa <I2C_WaitOnBTFFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d107      	bne.n	800430c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e01a      	b.n	8004346 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d194      	bne.n	8004242 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e000      	b.n	8004346 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	00100002 	.word	0x00100002
 8004354:	ffff0000 	.word	0xffff0000

08004358 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	4608      	mov	r0, r1
 8004362:	4611      	mov	r1, r2
 8004364:	461a      	mov	r2, r3
 8004366:	4603      	mov	r3, r0
 8004368:	817b      	strh	r3, [r7, #10]
 800436a:	460b      	mov	r3, r1
 800436c:	813b      	strh	r3, [r7, #8]
 800436e:	4613      	mov	r3, r2
 8004370:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004372:	f7fe feab 	bl	80030cc <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b20      	cmp	r3, #32
 8004382:	f040 80d9 	bne.w	8004538 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2319      	movs	r3, #25
 800438c:	2201      	movs	r2, #1
 800438e:	496d      	ldr	r1, [pc, #436]	; (8004544 <HAL_I2C_Mem_Write+0x1ec>)
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f9f3 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
 800439e:	e0cc      	b.n	800453a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_I2C_Mem_Write+0x56>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e0c5      	b.n	800453a <HAL_I2C_Mem_Write+0x1e2>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d007      	beq.n	80043d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2221      	movs	r2, #33	; 0x21
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2240      	movs	r2, #64	; 0x40
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a4d      	ldr	r2, [pc, #308]	; (8004548 <HAL_I2C_Mem_Write+0x1f0>)
 8004414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004416:	88f8      	ldrh	r0, [r7, #6]
 8004418:	893a      	ldrh	r2, [r7, #8]
 800441a:	8979      	ldrh	r1, [r7, #10]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	4603      	mov	r3, r0
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f912 	bl	8004650 <I2C_RequestMemoryWrite>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d052      	beq.n	80044d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e081      	b.n	800453a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fa74 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	2b04      	cmp	r3, #4
 800444c:	d107      	bne.n	800445e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e06b      	b.n	800453a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	781a      	ldrb	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b04      	cmp	r3, #4
 800449e:	d11b      	bne.n	80044d8 <HAL_I2C_Mem_Write+0x180>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d017      	beq.n	80044d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1aa      	bne.n	8004436 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fa60 	bl	80049aa <I2C_WaitOnBTFFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d107      	bne.n	8004508 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004506:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e016      	b.n	800453a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	e000      	b.n	800453a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
  }
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	00100002 	.word	0x00100002
 8004548:	ffff0000 	.word	0xffff0000

0800454c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	460b      	mov	r3, r1
 800455a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d006      	beq.n	8004576 <I2C_MasterRequestWrite+0x2a>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d003      	beq.n	8004576 <I2C_MasterRequestWrite+0x2a>
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004574:	d108      	bne.n	8004588 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e00b      	b.n	80045a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	2b12      	cmp	r3, #18
 800458e:	d107      	bne.n	80045a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800459e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f8e5 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00d      	beq.n	80045d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c6:	d103      	bne.n	80045d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e035      	b.n	8004640 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045dc:	d108      	bne.n	80045f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045de:	897b      	ldrh	r3, [r7, #10]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045ec:	611a      	str	r2, [r3, #16]
 80045ee:	e01b      	b.n	8004628 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045f0:	897b      	ldrh	r3, [r7, #10]
 80045f2:	11db      	asrs	r3, r3, #7
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 0306 	and.w	r3, r3, #6
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f063 030f 	orn	r3, r3, #15
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	490e      	ldr	r1, [pc, #56]	; (8004648 <I2C_MasterRequestWrite+0xfc>)
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f90b 	bl	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e010      	b.n	8004640 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800461e:	897b      	ldrh	r3, [r7, #10]
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4907      	ldr	r1, [pc, #28]	; (800464c <I2C_MasterRequestWrite+0x100>)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f8fb 	bl	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	00010008 	.word	0x00010008
 800464c:	00010002 	.word	0x00010002

08004650 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	4608      	mov	r0, r1
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	4603      	mov	r3, r0
 8004660:	817b      	strh	r3, [r7, #10]
 8004662:	460b      	mov	r3, r1
 8004664:	813b      	strh	r3, [r7, #8]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004678:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	2200      	movs	r2, #0
 8004682:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f878 	bl	800477c <I2C_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00d      	beq.n	80046ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a0:	d103      	bne.n	80046aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e05f      	b.n	800476e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ae:	897b      	ldrh	r3, [r7, #10]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	6a3a      	ldr	r2, [r7, #32]
 80046c2:	492d      	ldr	r1, [pc, #180]	; (8004778 <I2C_RequestMemoryWrite+0x128>)
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f8b0 	bl	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e04c      	b.n	800476e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ec:	6a39      	ldr	r1, [r7, #32]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f91a 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d107      	bne.n	8004712 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004710:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e02b      	b.n	800476e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800471c:	893b      	ldrh	r3, [r7, #8]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	611a      	str	r2, [r3, #16]
 8004726:	e021      	b.n	800476c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004728:	893b      	ldrh	r3, [r7, #8]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	b29b      	uxth	r3, r3
 800472e:	b2da      	uxtb	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004738:	6a39      	ldr	r1, [r7, #32]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f8f4 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b04      	cmp	r3, #4
 800474c:	d107      	bne.n	800475e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e005      	b.n	800476e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004762:	893b      	ldrh	r3, [r7, #8]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	00010002 	.word	0x00010002

0800477c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800478c:	e025      	b.n	80047da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d021      	beq.n	80047da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004796:	f7fe fc99 	bl	80030cc <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d302      	bcc.n	80047ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d116      	bne.n	80047da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f043 0220 	orr.w	r2, r3, #32
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e023      	b.n	8004822 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d10d      	bne.n	8004800 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	43da      	mvns	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4013      	ands	r3, r2
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf0c      	ite	eq
 80047f6:	2301      	moveq	r3, #1
 80047f8:	2300      	movne	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	e00c      	b.n	800481a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	43da      	mvns	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	429a      	cmp	r2, r3
 800481e:	d0b6      	beq.n	800478e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004838:	e051      	b.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004848:	d123      	bne.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004858:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004862:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f043 0204 	orr.w	r2, r3, #4
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e046      	b.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d021      	beq.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489a:	f7fe fc17 	bl	80030cc <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d302      	bcc.n	80048b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d116      	bne.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f043 0220 	orr.w	r2, r3, #32
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e020      	b.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d10c      	bne.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	43da      	mvns	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bf14      	ite	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	2300      	moveq	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e00b      	b.n	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	43da      	mvns	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4013      	ands	r3, r2
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d18d      	bne.n	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004934:	e02d      	b.n	8004992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f878 	bl	8004a2c <I2C_IsAcknowledgeFailed>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e02d      	b.n	80049a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d021      	beq.n	8004992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494e:	f7fe fbbd 	bl	80030cc <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d116      	bne.n	8004992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e007      	b.n	80049a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b80      	cmp	r3, #128	; 0x80
 800499e:	d1ca      	bne.n	8004936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049b6:	e02d      	b.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f837 	bl	8004a2c <I2C_IsAcknowledgeFailed>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e02d      	b.n	8004a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d021      	beq.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d0:	f7fe fb7c 	bl	80030cc <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d116      	bne.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e007      	b.n	8004a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d1ca      	bne.n	80049b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a42:	d11b      	bne.n	8004a7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	f043 0204 	orr.w	r2, r3, #4
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8c:	b08f      	sub	sp, #60	; 0x3c
 8004a8e:	af0a      	add	r7, sp, #40	; 0x28
 8004a90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e10f      	b.n	8004cbc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f00a f904 	bl	800ecc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2203      	movs	r2, #3
 8004ac0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f003 ff73 	bl	80089c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	687e      	ldr	r6, [r7, #4]
 8004ae8:	466d      	mov	r5, sp
 8004aea:	f106 0410 	add.w	r4, r6, #16
 8004aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004afa:	e885 0003 	stmia.w	r5, {r0, r1}
 8004afe:	1d33      	adds	r3, r6, #4
 8004b00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b02:	6838      	ldr	r0, [r7, #0]
 8004b04:	f003 fe4a 	bl	800879c <USB_CoreInit>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e0d0      	b.n	8004cbc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f003 ff61 	bl	80089e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
 8004b2a:	e04a      	b.n	8004bc2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b2c:	7bfa      	ldrb	r2, [r7, #15]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	333d      	adds	r3, #61	; 0x3d
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b40:	7bfa      	ldrb	r2, [r7, #15]
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	333c      	adds	r3, #60	; 0x3c
 8004b50:	7bfa      	ldrb	r2, [r7, #15]
 8004b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b54:	7bfa      	ldrb	r2, [r7, #15]
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	b298      	uxth	r0, r3
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	3342      	adds	r3, #66	; 0x42
 8004b68:	4602      	mov	r2, r0
 8004b6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b6c:	7bfa      	ldrb	r2, [r7, #15]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	333f      	adds	r3, #63	; 0x3f
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b80:	7bfa      	ldrb	r2, [r7, #15]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	3344      	adds	r3, #68	; 0x44
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b94:	7bfa      	ldrb	r2, [r7, #15]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	3348      	adds	r3, #72	; 0x48
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ba8:	7bfa      	ldrb	r2, [r7, #15]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3350      	adds	r3, #80	; 0x50
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
 8004bc2:	7bfa      	ldrb	r2, [r7, #15]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d3af      	bcc.n	8004b2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	73fb      	strb	r3, [r7, #15]
 8004bd0:	e044      	b.n	8004c5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bd2:	7bfa      	ldrb	r2, [r7, #15]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004be8:	7bfa      	ldrb	r2, [r7, #15]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004bfa:	7bfa      	ldrb	r2, [r7, #15]
 8004bfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bfe:	7bfa      	ldrb	r2, [r7, #15]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c2a:	7bfa      	ldrb	r2, [r7, #15]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c40:	7bfa      	ldrb	r2, [r7, #15]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	7bfa      	ldrb	r2, [r7, #15]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d3b5      	bcc.n	8004bd2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	687e      	ldr	r6, [r7, #4]
 8004c6e:	466d      	mov	r5, sp
 8004c70:	f106 0410 	add.w	r4, r6, #16
 8004c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c80:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c84:	1d33      	adds	r3, r6, #4
 8004c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c88:	6838      	ldr	r0, [r7, #0]
 8004c8a:	f003 fed7 	bl	8008a3c <USB_DevInit>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e00d      	b.n	8004cbc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f004 ff1f 	bl	8009af8 <USB_DevDisconnect>

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cc4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_PCD_Start+0x1c>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e020      	b.n	8004d22 <HAL_PCD_Start+0x5e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d109      	bne.n	8004d04 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d005      	beq.n	8004d04 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f003 fe4b 	bl	80089a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f004 fecf 	bl	8009ab6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d2a:	b590      	push	{r4, r7, lr}
 8004d2c:	b08d      	sub	sp, #52	; 0x34
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f004 ff8d 	bl	8009c60 <USB_GetMode>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f040 839d 	bne.w	8005488 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f004 fef1 	bl	8009b3a <USB_ReadInterrupts>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8393 	beq.w	8005486 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f004 fee8 	bl	8009b3a <USB_ReadInterrupts>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d107      	bne.n	8004d84 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f002 0202 	and.w	r2, r2, #2
 8004d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f004 fed6 	bl	8009b3a <USB_ReadInterrupts>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d161      	bne.n	8004e5c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0210 	bic.w	r2, r2, #16
 8004da6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f003 020f 	and.w	r2, r3, #15
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	0c5b      	lsrs	r3, r3, #17
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d124      	bne.n	8004e1e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d035      	beq.n	8004e4c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	6a38      	ldr	r0, [r7, #32]
 8004df4:	f004 fd3c 	bl	8009870 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	091b      	lsrs	r3, r3, #4
 8004e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e04:	441a      	add	r2, r3
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e16:	441a      	add	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	619a      	str	r2, [r3, #24]
 8004e1c:	e016      	b.n	8004e4c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	0c5b      	lsrs	r3, r3, #17
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	2b06      	cmp	r3, #6
 8004e28:	d110      	bne.n	8004e4c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e30:	2208      	movs	r2, #8
 8004e32:	4619      	mov	r1, r3
 8004e34:	6a38      	ldr	r0, [r7, #32]
 8004e36:	f004 fd1b 	bl	8009870 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e46:	441a      	add	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0210 	orr.w	r2, r2, #16
 8004e5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f004 fe6a 	bl	8009b3a <USB_ReadInterrupts>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e70:	d16e      	bne.n	8004f50 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f004 fe70 	bl	8009b60 <USB_ReadDevAllOutEpInterrupt>
 8004e80:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004e82:	e062      	b.n	8004f4a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d057      	beq.n	8004f3e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	4611      	mov	r1, r2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f004 fe95 	bl	8009bc8 <USB_ReadDevOutEPInterrupt>
 8004e9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00c      	beq.n	8004ec4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2301      	movs	r3, #1
 8004eba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fdb0 	bl	8005a24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eda:	461a      	mov	r2, r3
 8004edc:	2308      	movs	r3, #8
 8004ede:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 feaa 	bl	8005c3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d008      	beq.n	8004f04 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	461a      	mov	r2, r3
 8004f00:	2310      	movs	r3, #16
 8004f02:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	461a      	mov	r2, r3
 8004f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f3c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	3301      	adds	r3, #1
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	085b      	lsrs	r3, r3, #1
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d199      	bne.n	8004e84 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f004 fdf0 	bl	8009b3a <USB_ReadInterrupts>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f64:	f040 80c0 	bne.w	80050e8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f004 fe11 	bl	8009b94 <USB_ReadDevAllInEpInterrupt>
 8004f72:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004f78:	e0b2      	b.n	80050e0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80a7 	beq.w	80050d4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f004 fe37 	bl	8009c04 <USB_ReadDevInEPInterrupt>
 8004f96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d057      	beq.n	8005052 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	2201      	movs	r2, #1
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69f9      	ldr	r1, [r7, #28]
 8004fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d132      	bne.n	8005046 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	3348      	adds	r3, #72	; 0x48
 8004ff0:	6819      	ldr	r1, [r3, #0]
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4403      	add	r3, r0
 8005000:	3344      	adds	r3, #68	; 0x44
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4419      	add	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	4613      	mov	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4403      	add	r3, r0
 8005014:	3348      	adds	r3, #72	; 0x48
 8005016:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	2b00      	cmp	r3, #0
 800501c:	d113      	bne.n	8005046 <HAL_PCD_IRQHandler+0x31c>
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3350      	adds	r3, #80	; 0x50
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d108      	bne.n	8005046 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800503e:	461a      	mov	r2, r3
 8005040:	2101      	movs	r1, #1
 8005042:	f004 fe3f 	bl	8009cc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	b2db      	uxtb	r3, r3
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f009 feba 	bl	800edc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	461a      	mov	r2, r3
 800506a:	2308      	movs	r3, #8
 800506c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	461a      	mov	r2, r3
 8005086:	2310      	movs	r3, #16
 8005088:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	461a      	mov	r2, r3
 80050a2:	2340      	movs	r3, #64	; 0x40
 80050a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	461a      	mov	r2, r3
 80050be:	2302      	movs	r3, #2
 80050c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80050cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fc1b 	bl	800590a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	3301      	adds	r3, #1
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	085b      	lsrs	r3, r3, #1
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f47f af49 	bne.w	8004f7a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f004 fd24 	bl	8009b3a <USB_ReadInterrupts>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fc:	d122      	bne.n	8005144 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005118:	2b01      	cmp	r3, #1
 800511a:	d108      	bne.n	800512e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005124:	2100      	movs	r1, #0
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fe26 	bl	8005d78 <HAL_PCDEx_LPM_Callback>
 800512c:	e002      	b.n	8005134 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f009 feb6 	bl	800eea0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f004 fcf6 	bl	8009b3a <USB_ReadInterrupts>
 800514e:	4603      	mov	r3, r0
 8005150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005158:	d112      	bne.n	8005180 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b01      	cmp	r3, #1
 8005168:	d102      	bne.n	8005170 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f009 fe72 	bl	800ee54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800517e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f004 fcd8 	bl	8009b3a <USB_ReadInterrupts>
 800518a:	4603      	mov	r3, r0
 800518c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005194:	f040 80c7 	bne.w	8005326 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2110      	movs	r1, #16
 80051b2:	4618      	mov	r0, r3
 80051b4:	f003 fda6 	bl	8008d04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051bc:	e056      	b.n	800526c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	461a      	mov	r2, r3
 80051cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051f0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	440a      	add	r2, r1
 8005208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005210:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521e:	461a      	mov	r2, r3
 8005220:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005224:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005240:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005244:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005260:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005264:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	3301      	adds	r3, #1
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005272:	429a      	cmp	r2, r3
 8005274:	d3a3      	bcc.n	80051be <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005284:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005288:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	2b00      	cmp	r3, #0
 8005290:	d016      	beq.n	80052c0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a2:	f043 030b 	orr.w	r3, r3, #11
 80052a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b8:	f043 030b 	orr.w	r3, r3, #11
 80052bc:	6453      	str	r3, [r2, #68]	; 0x44
 80052be:	e015      	b.n	80052ec <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052d2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80052d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e6:	f043 030b 	orr.w	r3, r3, #11
 80052ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005310:	461a      	mov	r2, r3
 8005312:	f004 fcd7 	bl	8009cc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f004 fc05 	bl	8009b3a <USB_ReadInterrupts>
 8005330:	4603      	mov	r3, r0
 8005332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533a:	d124      	bne.n	8005386 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f004 fc9b 	bl	8009c7c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f003 fd3b 	bl	8008dc6 <USB_GetDevSpeed>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681c      	ldr	r4, [r3, #0]
 800535c:	f001 f92c 	bl	80065b8 <HAL_RCC_GetHCLKFreq>
 8005360:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005366:	b2db      	uxtb	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	4620      	mov	r0, r4
 800536c:	f003 fa78 	bl	8008860 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f009 fd50 	bl	800ee16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005384:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f004 fbd5 	bl	8009b3a <USB_ReadInterrupts>
 8005390:	4603      	mov	r3, r0
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b08      	cmp	r3, #8
 8005398:	d10a      	bne.n	80053b0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f009 fd2d 	bl	800edfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f002 0208 	and.w	r2, r2, #8
 80053ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f004 fbc0 	bl	8009b3a <USB_ReadInterrupts>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c4:	d10f      	bne.n	80053e6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f009 fd85 	bl	800eee0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695a      	ldr	r2, [r3, #20]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80053e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f004 fba5 	bl	8009b3a <USB_ReadInterrupts>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053fa:	d10f      	bne.n	800541c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	b2db      	uxtb	r3, r3
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f009 fd58 	bl	800eebc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800541a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f004 fb8a 	bl	8009b3a <USB_ReadInterrupts>
 8005426:	4603      	mov	r3, r0
 8005428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d10a      	bne.n	8005448 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f009 fd66 	bl	800ef04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005446:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f004 fb74 	bl	8009b3a <USB_ReadInterrupts>
 8005452:	4603      	mov	r3, r0
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b04      	cmp	r3, #4
 800545a:	d115      	bne.n	8005488 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f009 fd56 	bl	800ef20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
 8005484:	e000      	b.n	8005488 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005486:	bf00      	nop
    }
  }
}
 8005488:	3734      	adds	r7, #52	; 0x34
 800548a:	46bd      	mov	sp, r7
 800548c:	bd90      	pop	{r4, r7, pc}

0800548e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	460b      	mov	r3, r1
 8005498:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_PCD_SetAddress+0x1a>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e013      	b.n	80054d0 <HAL_PCD_SetAddress+0x42>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	4611      	mov	r1, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f004 fad2 	bl	8009a6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	4608      	mov	r0, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	70fb      	strb	r3, [r7, #3]
 80054ea:	460b      	mov	r3, r1
 80054ec:	803b      	strh	r3, [r7, #0]
 80054ee:	4613      	mov	r3, r2
 80054f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	da0f      	bge.n	800551e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	f003 020f 	and.w	r2, r3, #15
 8005504:	4613      	mov	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	3338      	adds	r3, #56	; 0x38
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	3304      	adds	r3, #4
 8005514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	705a      	strb	r2, [r3, #1]
 800551c:	e00f      	b.n	800553e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	f003 020f 	and.w	r2, r3, #15
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4413      	add	r3, r2
 8005534:	3304      	adds	r3, #4
 8005536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800554a:	883a      	ldrh	r2, [r7, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	78ba      	ldrb	r2, [r7, #2]
 8005554:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d004      	beq.n	8005568 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005568:	78bb      	ldrb	r3, [r7, #2]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d102      	bne.n	8005574 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_PCD_EP_Open+0xaa>
 800557e:	2302      	movs	r3, #2
 8005580:	e00e      	b.n	80055a0 <HAL_PCD_EP_Open+0xc8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	4618      	mov	r0, r3
 8005592:	f003 fc3d 	bl	8008e10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800559e:	7afb      	ldrb	r3, [r7, #11]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	da0f      	bge.n	80055dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	f003 020f 	and.w	r2, r3, #15
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	3338      	adds	r3, #56	; 0x38
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	4413      	add	r3, r2
 80055d0:	3304      	adds	r3, #4
 80055d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	705a      	strb	r2, [r3, #1]
 80055da:	e00f      	b.n	80055fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	f003 020f 	and.w	r2, r3, #15
 80055e2:	4613      	mov	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	4413      	add	r3, r2
 80055f2:	3304      	adds	r3, #4
 80055f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	b2da      	uxtb	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_PCD_EP_Close+0x6e>
 8005612:	2302      	movs	r3, #2
 8005614:	e00e      	b.n	8005634 <HAL_PCD_EP_Close+0x8c>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68f9      	ldr	r1, [r7, #12]
 8005624:	4618      	mov	r0, r3
 8005626:	f003 fc7b 	bl	8008f20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	607a      	str	r2, [r7, #4]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	460b      	mov	r3, r1
 800564a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800564c:	7afb      	ldrb	r3, [r7, #11]
 800564e:	f003 020f 	and.w	r2, r3, #15
 8005652:	4613      	mov	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	1a9b      	subs	r3, r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	3304      	adds	r3, #4
 8005664:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2200      	movs	r2, #0
 8005676:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2200      	movs	r2, #0
 800567c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	b2da      	uxtb	r2, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d102      	bne.n	8005698 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	6979      	ldr	r1, [r7, #20]
 80056b0:	f003 ff56 	bl	8009560 <USB_EP0StartXfer>
 80056b4:	e008      	b.n	80056c8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	6979      	ldr	r1, [r7, #20]
 80056c4:	f003 fd08 	bl	80090d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	f003 020f 	and.w	r2, r3, #15
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	440b      	add	r3, r1
 80056f0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80056f4:	681b      	ldr	r3, [r3, #0]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b086      	sub	sp, #24
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
 800570e:	460b      	mov	r3, r1
 8005710:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	f003 020f 	and.w	r2, r3, #15
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	3338      	adds	r3, #56	; 0x38
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	3304      	adds	r3, #4
 8005728:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2201      	movs	r2, #1
 8005740:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005742:	7afb      	ldrb	r3, [r7, #11]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	b2da      	uxtb	r2, r3
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d102      	bne.n	800575c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800575c:	7afb      	ldrb	r3, [r7, #11]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	6979      	ldr	r1, [r7, #20]
 8005774:	f003 fef4 	bl	8009560 <USB_EP0StartXfer>
 8005778:	e008      	b.n	800578c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	f003 fca6 	bl	80090d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	f003 020f 	and.w	r2, r3, #15
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d901      	bls.n	80057b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e050      	b.n	8005856 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da0f      	bge.n	80057dc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	f003 020f 	and.w	r2, r3, #15
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	1a9b      	subs	r3, r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	3338      	adds	r3, #56	; 0x38
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4413      	add	r3, r2
 80057d0:	3304      	adds	r3, #4
 80057d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	705a      	strb	r2, [r3, #1]
 80057da:	e00d      	b.n	80057f8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057dc:	78fa      	ldrb	r2, [r7, #3]
 80057de:	4613      	mov	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	3304      	adds	r3, #4
 80057f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	b2da      	uxtb	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_PCD_EP_SetStall+0x82>
 8005814:	2302      	movs	r3, #2
 8005816:	e01e      	b.n	8005856 <HAL_PCD_EP_SetStall+0xc0>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68f9      	ldr	r1, [r7, #12]
 8005826:	4618      	mov	r0, r3
 8005828:	f004 f84b 	bl	80098c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	b2d9      	uxtb	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005846:	461a      	mov	r2, r3
 8005848:	f004 fa3c 	bl	8009cc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	460b      	mov	r3, r1
 8005868:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	f003 020f 	and.w	r2, r3, #15
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	429a      	cmp	r2, r3
 8005876:	d901      	bls.n	800587c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e042      	b.n	8005902 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800587c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005880:	2b00      	cmp	r3, #0
 8005882:	da0f      	bge.n	80058a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	f003 020f 	and.w	r2, r3, #15
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	3338      	adds	r3, #56	; 0x38
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	3304      	adds	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	705a      	strb	r2, [r3, #1]
 80058a2:	e00f      	b.n	80058c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	f003 020f 	and.w	r2, r3, #15
 80058aa:	4613      	mov	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	1a9b      	subs	r3, r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	3304      	adds	r3, #4
 80058bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_PCD_EP_ClrStall+0x86>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e00e      	b.n	8005902 <HAL_PCD_EP_ClrStall+0xa4>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68f9      	ldr	r1, [r7, #12]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f004 f853 	bl	800999e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b08a      	sub	sp, #40	; 0x28
 800590e:	af02      	add	r7, sp, #8
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	3338      	adds	r3, #56	; 0x38
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	429a      	cmp	r2, r3
 800593c:	d901      	bls.n	8005942 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e06c      	b.n	8005a1c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	429a      	cmp	r2, r3
 8005956:	d902      	bls.n	800595e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	3303      	adds	r3, #3
 8005962:	089b      	lsrs	r3, r3, #2
 8005964:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005966:	e02b      	b.n	80059c0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	429a      	cmp	r2, r3
 800597c:	d902      	bls.n	8005984 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	3303      	adds	r3, #3
 8005988:	089b      	lsrs	r3, r3, #2
 800598a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68d9      	ldr	r1, [r3, #12]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	b2da      	uxtb	r2, r3
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800599c:	b2db      	uxtb	r3, r3
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	4603      	mov	r3, r0
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f003 ff2f 	bl	8009806 <USB_WritePacket>

    ep->xfer_buff  += len;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	441a      	add	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	441a      	add	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d809      	bhi.n	80059ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059de:	429a      	cmp	r2, r3
 80059e0:	d203      	bcs.n	80059ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1be      	bne.n	8005968 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d811      	bhi.n	8005a1a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	2201      	movs	r2, #1
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	6939      	ldr	r1, [r7, #16]
 8005a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a16:	4013      	ands	r3, r2
 8005a18:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	333c      	adds	r3, #60	; 0x3c
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	f040 80a0 	bne.w	8005b9c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d015      	beq.n	8005a92 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a72      	ldr	r2, [pc, #456]	; (8005c34 <PCD_EP_OutXfrComplete_int+0x210>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	f240 80dd 	bls.w	8005c2a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 80d7 	beq.w	8005c2a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a8e:	6093      	str	r3, [r2, #8]
 8005a90:	e0cb      	b.n	8005c2a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d009      	beq.n	8005ab0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2320      	movs	r3, #32
 8005aac:	6093      	str	r3, [r2, #8]
 8005aae:	e0bc      	b.n	8005c2a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 80b7 	bne.w	8005c2a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a5d      	ldr	r2, [pc, #372]	; (8005c34 <PCD_EP_OutXfrComplete_int+0x210>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d90f      	bls.n	8005ae4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	461a      	mov	r2, r3
 8005adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ae0:	6093      	str	r3, [r2, #8]
 8005ae2:	e0a2      	b.n	8005c2a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005af6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	0159      	lsls	r1, r3, #5
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	440b      	add	r3, r1
 8005b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005b0a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	4613      	mov	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	1a9b      	subs	r3, r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4403      	add	r3, r0
 8005b1a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005b1e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	1a9b      	subs	r3, r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b32:	6819      	ldr	r1, [r3, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4403      	add	r3, r0
 8005b42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4419      	add	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4403      	add	r3, r0
 8005b58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b5c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d114      	bne.n	8005b8e <PCD_EP_OutXfrComplete_int+0x16a>
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d108      	bne.n	8005b8e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b86:	461a      	mov	r2, r3
 8005b88:	2101      	movs	r1, #1
 8005b8a:	f004 f89b 	bl	8009cc4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f009 f8fb 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
 8005b9a:	e046      	b.n	8005c2a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4a26      	ldr	r2, [pc, #152]	; (8005c38 <PCD_EP_OutXfrComplete_int+0x214>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d124      	bne.n	8005bee <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc0:	6093      	str	r3, [r2, #8]
 8005bc2:	e032      	b.n	8005c2a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d008      	beq.n	8005be0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	461a      	mov	r2, r3
 8005bdc:	2320      	movs	r3, #32
 8005bde:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f009 f8d2 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
 8005bec:	e01d      	b.n	8005c2a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d114      	bne.n	8005c1e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d108      	bne.n	8005c1e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c16:	461a      	mov	r2, r3
 8005c18:	2100      	movs	r1, #0
 8005c1a:	f004 f853 	bl	8009cc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f009 f8b3 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	4f54300a 	.word	0x4f54300a
 8005c38:	4f54310a 	.word	0x4f54310a

08005c3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	333c      	adds	r3, #60	; 0x3c
 8005c54:	3304      	adds	r3, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d90e      	bls.n	8005c90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d009      	beq.n	8005c90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f009 f86b 	bl	800ed6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d90c      	bls.n	8005cb8 <PCD_EP_OutSetupPacket_int+0x7c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d108      	bne.n	8005cb8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	f004 f806 	bl	8009cc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	4f54300a 	.word	0x4f54300a

08005cc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ce6:	883b      	ldrh	r3, [r7, #0]
 8005ce8:	0419      	lsls	r1, r3, #16
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf4:	e028      	b.n	8005d48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	4413      	add	r3, r2
 8005d02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d04:	2300      	movs	r3, #0
 8005d06:	73fb      	strb	r3, [r7, #15]
 8005d08:	e00d      	b.n	8005d26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	3340      	adds	r3, #64	; 0x40
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	3301      	adds	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
 8005d26:	7bfa      	ldrb	r2, [r7, #15]
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d3ec      	bcc.n	8005d0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d30:	883b      	ldrh	r3, [r7, #0]
 8005d32:	0418      	lsls	r0, r3, #16
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6819      	ldr	r1, [r3, #0]
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	4302      	orrs	r2, r0
 8005d40:	3340      	adds	r3, #64	; 0x40
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	887a      	ldrh	r2, [r7, #2]
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e264      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d075      	beq.n	8005e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dae:	4ba3      	ldr	r3, [pc, #652]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d00c      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dba:	4ba0      	ldr	r3, [pc, #640]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d112      	bne.n	8005dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dc6:	4b9d      	ldr	r3, [pc, #628]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dd2:	d10b      	bne.n	8005dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd4:	4b99      	ldr	r3, [pc, #612]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d05b      	beq.n	8005e98 <HAL_RCC_OscConfig+0x108>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d157      	bne.n	8005e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e23f      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df4:	d106      	bne.n	8005e04 <HAL_RCC_OscConfig+0x74>
 8005df6:	4b91      	ldr	r3, [pc, #580]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a90      	ldr	r2, [pc, #576]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e01d      	b.n	8005e40 <HAL_RCC_OscConfig+0xb0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x98>
 8005e0e:	4b8b      	ldr	r3, [pc, #556]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a8a      	ldr	r2, [pc, #552]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b88      	ldr	r3, [pc, #544]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a87      	ldr	r2, [pc, #540]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e00b      	b.n	8005e40 <HAL_RCC_OscConfig+0xb0>
 8005e28:	4b84      	ldr	r3, [pc, #528]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a83      	ldr	r2, [pc, #524]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4b81      	ldr	r3, [pc, #516]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a80      	ldr	r2, [pc, #512]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fd f940 	bl	80030cc <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fd f93c 	bl	80030cc <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	; 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e204      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	4b76      	ldr	r3, [pc, #472]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0xc0>
 8005e6e:	e014      	b.n	8005e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fd f92c 	bl	80030cc <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fd f928 	bl	80030cc <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e1f0      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8a:	4b6c      	ldr	r3, [pc, #432]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0xe8>
 8005e96:	e000      	b.n	8005e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d063      	beq.n	8005f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ea6:	4b65      	ldr	r3, [pc, #404]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eb2:	4b62      	ldr	r3, [pc, #392]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d11c      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ebe:	4b5f      	ldr	r3, [pc, #380]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d116      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eca:	4b5c      	ldr	r3, [pc, #368]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x152>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e1c4      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee2:	4b56      	ldr	r3, [pc, #344]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4952      	ldr	r1, [pc, #328]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef6:	e03a      	b.n	8005f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d020      	beq.n	8005f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f00:	4b4f      	ldr	r3, [pc, #316]	; (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fd f8e1 	bl	80030cc <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f0e:	f7fd f8dd 	bl	80030cc <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e1a5      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f20:	4b46      	ldr	r3, [pc, #280]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2c:	4b43      	ldr	r3, [pc, #268]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4940      	ldr	r1, [pc, #256]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	600b      	str	r3, [r1, #0]
 8005f40:	e015      	b.n	8005f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f42:	4b3f      	ldr	r3, [pc, #252]	; (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fd f8c0 	bl	80030cc <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f50:	f7fd f8bc 	bl	80030cc <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e184      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f62:	4b36      	ldr	r3, [pc, #216]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d030      	beq.n	8005fdc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d016      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f82:	4b30      	ldr	r3, [pc, #192]	; (8006044 <HAL_RCC_OscConfig+0x2b4>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f88:	f7fd f8a0 	bl	80030cc <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f90:	f7fd f89c 	bl	80030cc <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e164      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x200>
 8005fae:	e015      	b.n	8005fdc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb0:	4b24      	ldr	r3, [pc, #144]	; (8006044 <HAL_RCC_OscConfig+0x2b4>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb6:	f7fd f889 	bl	80030cc <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fbe:	f7fd f885 	bl	80030cc <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e14d      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f0      	bne.n	8005fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80a0 	beq.w	800612a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fea:	2300      	movs	r3, #0
 8005fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fee:	4b13      	ldr	r3, [pc, #76]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10f      	bne.n	800601a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	4a0e      	ldr	r2, [pc, #56]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8006004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006008:	6413      	str	r3, [r2, #64]	; 0x40
 800600a:	4b0c      	ldr	r3, [pc, #48]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	60bb      	str	r3, [r7, #8]
 8006014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006016:	2301      	movs	r3, #1
 8006018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_RCC_OscConfig+0x2b8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d121      	bne.n	800606a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <HAL_RCC_OscConfig+0x2b8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a07      	ldr	r2, [pc, #28]	; (8006048 <HAL_RCC_OscConfig+0x2b8>)
 800602c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006032:	f7fd f84b 	bl	80030cc <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006038:	e011      	b.n	800605e <HAL_RCC_OscConfig+0x2ce>
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800
 8006040:	42470000 	.word	0x42470000
 8006044:	42470e80 	.word	0x42470e80
 8006048:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800604c:	f7fd f83e 	bl	80030cc <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e106      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800605e:	4b85      	ldr	r3, [pc, #532]	; (8006274 <HAL_RCC_OscConfig+0x4e4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d106      	bne.n	8006080 <HAL_RCC_OscConfig+0x2f0>
 8006072:	4b81      	ldr	r3, [pc, #516]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 8006074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006076:	4a80      	ldr	r2, [pc, #512]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	6713      	str	r3, [r2, #112]	; 0x70
 800607e:	e01c      	b.n	80060ba <HAL_RCC_OscConfig+0x32a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b05      	cmp	r3, #5
 8006086:	d10c      	bne.n	80060a2 <HAL_RCC_OscConfig+0x312>
 8006088:	4b7b      	ldr	r3, [pc, #492]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 800608a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608c:	4a7a      	ldr	r2, [pc, #488]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 800608e:	f043 0304 	orr.w	r3, r3, #4
 8006092:	6713      	str	r3, [r2, #112]	; 0x70
 8006094:	4b78      	ldr	r3, [pc, #480]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 8006096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006098:	4a77      	ldr	r2, [pc, #476]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6713      	str	r3, [r2, #112]	; 0x70
 80060a0:	e00b      	b.n	80060ba <HAL_RCC_OscConfig+0x32a>
 80060a2:	4b75      	ldr	r3, [pc, #468]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	4a74      	ldr	r2, [pc, #464]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	6713      	str	r3, [r2, #112]	; 0x70
 80060ae:	4b72      	ldr	r3, [pc, #456]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 80060b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b2:	4a71      	ldr	r2, [pc, #452]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 80060b4:	f023 0304 	bic.w	r3, r3, #4
 80060b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d015      	beq.n	80060ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c2:	f7fd f803 	bl	80030cc <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c8:	e00a      	b.n	80060e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ca:	f7fc ffff 	bl	80030cc <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d8:	4293      	cmp	r3, r2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e0c5      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e0:	4b65      	ldr	r3, [pc, #404]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 80060e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0ee      	beq.n	80060ca <HAL_RCC_OscConfig+0x33a>
 80060ec:	e014      	b.n	8006118 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ee:	f7fc ffed 	bl	80030cc <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060f4:	e00a      	b.n	800610c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f6:	f7fc ffe9 	bl	80030cc <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	f241 3288 	movw	r2, #5000	; 0x1388
 8006104:	4293      	cmp	r3, r2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e0af      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800610c:	4b5a      	ldr	r3, [pc, #360]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1ee      	bne.n	80060f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006118:	7dfb      	ldrb	r3, [r7, #23]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d105      	bne.n	800612a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800611e:	4b56      	ldr	r3, [pc, #344]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	4a55      	ldr	r2, [pc, #340]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 8006124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006128:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 809b 	beq.w	800626a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006134:	4b50      	ldr	r3, [pc, #320]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 030c 	and.w	r3, r3, #12
 800613c:	2b08      	cmp	r3, #8
 800613e:	d05c      	beq.n	80061fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d141      	bne.n	80061cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006148:	4b4c      	ldr	r3, [pc, #304]	; (800627c <HAL_RCC_OscConfig+0x4ec>)
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614e:	f7fc ffbd 	bl	80030cc <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006156:	f7fc ffb9 	bl	80030cc <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e081      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006168:	4b43      	ldr	r3, [pc, #268]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f0      	bne.n	8006156 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	019b      	lsls	r3, r3, #6
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	3b01      	subs	r3, #1
 800618e:	041b      	lsls	r3, r3, #16
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	061b      	lsls	r3, r3, #24
 8006198:	4937      	ldr	r1, [pc, #220]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 800619a:	4313      	orrs	r3, r2
 800619c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800619e:	4b37      	ldr	r3, [pc, #220]	; (800627c <HAL_RCC_OscConfig+0x4ec>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a4:	f7fc ff92 	bl	80030cc <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ac:	f7fc ff8e 	bl	80030cc <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e056      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061be:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f0      	beq.n	80061ac <HAL_RCC_OscConfig+0x41c>
 80061ca:	e04e      	b.n	800626a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061cc:	4b2b      	ldr	r3, [pc, #172]	; (800627c <HAL_RCC_OscConfig+0x4ec>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d2:	f7fc ff7b 	bl	80030cc <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061da:	f7fc ff77 	bl	80030cc <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e03f      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ec:	4b22      	ldr	r3, [pc, #136]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f0      	bne.n	80061da <HAL_RCC_OscConfig+0x44a>
 80061f8:	e037      	b.n	800626a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e032      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006206:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <HAL_RCC_OscConfig+0x4e8>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d028      	beq.n	8006266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800621e:	429a      	cmp	r2, r3
 8006220:	d121      	bne.n	8006266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d11a      	bne.n	8006266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006236:	4013      	ands	r3, r2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800623c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800623e:	4293      	cmp	r3, r2
 8006240:	d111      	bne.n	8006266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	3b01      	subs	r3, #1
 8006250:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006252:	429a      	cmp	r2, r3
 8006254:	d107      	bne.n	8006266 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006262:	429a      	cmp	r2, r3
 8006264:	d001      	beq.n	800626a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40007000 	.word	0x40007000
 8006278:	40023800 	.word	0x40023800
 800627c:	42470060 	.word	0x42470060

08006280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0cc      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006294:	4b68      	ldr	r3, [pc, #416]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d90c      	bls.n	80062bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b65      	ldr	r3, [pc, #404]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b63      	ldr	r3, [pc, #396]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0b8      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d020      	beq.n	800630a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062d4:	4b59      	ldr	r3, [pc, #356]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4a58      	ldr	r2, [pc, #352]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062ec:	4b53      	ldr	r3, [pc, #332]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4a52      	ldr	r2, [pc, #328]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f8:	4b50      	ldr	r3, [pc, #320]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	494d      	ldr	r1, [pc, #308]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	4313      	orrs	r3, r2
 8006308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d044      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d107      	bne.n	800632e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631e:	4b47      	ldr	r3, [pc, #284]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d119      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e07f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d003      	beq.n	800633e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800633a:	2b03      	cmp	r3, #3
 800633c:	d107      	bne.n	800634e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800633e:	4b3f      	ldr	r3, [pc, #252]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e06f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634e:	4b3b      	ldr	r3, [pc, #236]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e067      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800635e:	4b37      	ldr	r3, [pc, #220]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f023 0203 	bic.w	r2, r3, #3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4934      	ldr	r1, [pc, #208]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	4313      	orrs	r3, r2
 800636e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006370:	f7fc feac 	bl	80030cc <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006376:	e00a      	b.n	800638e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006378:	f7fc fea8 	bl	80030cc <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	f241 3288 	movw	r2, #5000	; 0x1388
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e04f      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638e:	4b2b      	ldr	r3, [pc, #172]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 020c 	and.w	r2, r3, #12
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	429a      	cmp	r2, r3
 800639e:	d1eb      	bne.n	8006378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063a0:	4b25      	ldr	r3, [pc, #148]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20c      	bcs.n	80063c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b22      	ldr	r3, [pc, #136]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b20      	ldr	r3, [pc, #128]	; (8006438 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e032      	b.n	800642e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063d4:	4b19      	ldr	r3, [pc, #100]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4916      	ldr	r1, [pc, #88]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	490e      	ldr	r1, [pc, #56]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	4313      	orrs	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006406:	f000 f821 	bl	800644c <HAL_RCC_GetSysClockFreq>
 800640a:	4602      	mov	r2, r0
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	490a      	ldr	r1, [pc, #40]	; (8006440 <HAL_RCC_ClockConfig+0x1c0>)
 8006418:	5ccb      	ldrb	r3, [r1, r3]
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	4a09      	ldr	r2, [pc, #36]	; (8006444 <HAL_RCC_ClockConfig+0x1c4>)
 8006420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_RCC_ClockConfig+0x1c8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fc fe0c 	bl	8003044 <HAL_InitTick>

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40023c00 	.word	0x40023c00
 800643c:	40023800 	.word	0x40023800
 8006440:	08014eb0 	.word	0x08014eb0
 8006444:	20000048 	.word	0x20000048
 8006448:	2000004c 	.word	0x2000004c

0800644c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800644c:	b5b0      	push	{r4, r5, r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006452:	2100      	movs	r1, #0
 8006454:	6079      	str	r1, [r7, #4]
 8006456:	2100      	movs	r1, #0
 8006458:	60f9      	str	r1, [r7, #12]
 800645a:	2100      	movs	r1, #0
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800645e:	2100      	movs	r1, #0
 8006460:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006462:	4952      	ldr	r1, [pc, #328]	; (80065ac <HAL_RCC_GetSysClockFreq+0x160>)
 8006464:	6889      	ldr	r1, [r1, #8]
 8006466:	f001 010c 	and.w	r1, r1, #12
 800646a:	2908      	cmp	r1, #8
 800646c:	d00d      	beq.n	800648a <HAL_RCC_GetSysClockFreq+0x3e>
 800646e:	2908      	cmp	r1, #8
 8006470:	f200 8094 	bhi.w	800659c <HAL_RCC_GetSysClockFreq+0x150>
 8006474:	2900      	cmp	r1, #0
 8006476:	d002      	beq.n	800647e <HAL_RCC_GetSysClockFreq+0x32>
 8006478:	2904      	cmp	r1, #4
 800647a:	d003      	beq.n	8006484 <HAL_RCC_GetSysClockFreq+0x38>
 800647c:	e08e      	b.n	800659c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800647e:	4b4c      	ldr	r3, [pc, #304]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x164>)
 8006480:	60bb      	str	r3, [r7, #8]
       break;
 8006482:	e08e      	b.n	80065a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006484:	4b4b      	ldr	r3, [pc, #300]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x168>)
 8006486:	60bb      	str	r3, [r7, #8]
      break;
 8006488:	e08b      	b.n	80065a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800648a:	4948      	ldr	r1, [pc, #288]	; (80065ac <HAL_RCC_GetSysClockFreq+0x160>)
 800648c:	6849      	ldr	r1, [r1, #4]
 800648e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006492:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006494:	4945      	ldr	r1, [pc, #276]	; (80065ac <HAL_RCC_GetSysClockFreq+0x160>)
 8006496:	6849      	ldr	r1, [r1, #4]
 8006498:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800649c:	2900      	cmp	r1, #0
 800649e:	d024      	beq.n	80064ea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064a0:	4942      	ldr	r1, [pc, #264]	; (80065ac <HAL_RCC_GetSysClockFreq+0x160>)
 80064a2:	6849      	ldr	r1, [r1, #4]
 80064a4:	0989      	lsrs	r1, r1, #6
 80064a6:	4608      	mov	r0, r1
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	f240 14ff 	movw	r4, #511	; 0x1ff
 80064b0:	f04f 0500 	mov.w	r5, #0
 80064b4:	ea00 0204 	and.w	r2, r0, r4
 80064b8:	ea01 0305 	and.w	r3, r1, r5
 80064bc:	493d      	ldr	r1, [pc, #244]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80064be:	fb01 f003 	mul.w	r0, r1, r3
 80064c2:	2100      	movs	r1, #0
 80064c4:	fb01 f102 	mul.w	r1, r1, r2
 80064c8:	1844      	adds	r4, r0, r1
 80064ca:	493a      	ldr	r1, [pc, #232]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x168>)
 80064cc:	fba2 0101 	umull	r0, r1, r2, r1
 80064d0:	1863      	adds	r3, r4, r1
 80064d2:	4619      	mov	r1, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	f7fa fbd6 	bl	8000c8c <__aeabi_uldivmod>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4613      	mov	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e04a      	b.n	8006580 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ea:	4b30      	ldr	r3, [pc, #192]	; (80065ac <HAL_RCC_GetSysClockFreq+0x160>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	099b      	lsrs	r3, r3, #6
 80064f0:	461a      	mov	r2, r3
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064fa:	f04f 0100 	mov.w	r1, #0
 80064fe:	ea02 0400 	and.w	r4, r2, r0
 8006502:	ea03 0501 	and.w	r5, r3, r1
 8006506:	4620      	mov	r0, r4
 8006508:	4629      	mov	r1, r5
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	014b      	lsls	r3, r1, #5
 8006514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006518:	0142      	lsls	r2, r0, #5
 800651a:	4610      	mov	r0, r2
 800651c:	4619      	mov	r1, r3
 800651e:	1b00      	subs	r0, r0, r4
 8006520:	eb61 0105 	sbc.w	r1, r1, r5
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	018b      	lsls	r3, r1, #6
 800652e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006532:	0182      	lsls	r2, r0, #6
 8006534:	1a12      	subs	r2, r2, r0
 8006536:	eb63 0301 	sbc.w	r3, r3, r1
 800653a:	f04f 0000 	mov.w	r0, #0
 800653e:	f04f 0100 	mov.w	r1, #0
 8006542:	00d9      	lsls	r1, r3, #3
 8006544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006548:	00d0      	lsls	r0, r2, #3
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	1912      	adds	r2, r2, r4
 8006550:	eb45 0303 	adc.w	r3, r5, r3
 8006554:	f04f 0000 	mov.w	r0, #0
 8006558:	f04f 0100 	mov.w	r1, #0
 800655c:	0299      	lsls	r1, r3, #10
 800655e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006562:	0290      	lsls	r0, r2, #10
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4610      	mov	r0, r2
 800656a:	4619      	mov	r1, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	461a      	mov	r2, r3
 8006570:	f04f 0300 	mov.w	r3, #0
 8006574:	f7fa fb8a 	bl	8000c8c <__aeabi_uldivmod>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4613      	mov	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006580:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <HAL_RCC_GetSysClockFreq+0x160>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	0c1b      	lsrs	r3, r3, #16
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	3301      	adds	r3, #1
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	fbb2 f3f3 	udiv	r3, r2, r3
 8006598:	60bb      	str	r3, [r7, #8]
      break;
 800659a:	e002      	b.n	80065a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800659c:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x164>)
 800659e:	60bb      	str	r3, [r7, #8]
      break;
 80065a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065a2:	68bb      	ldr	r3, [r7, #8]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bdb0      	pop	{r4, r5, r7, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	00f42400 	.word	0x00f42400
 80065b4:	017d7840 	.word	0x017d7840

080065b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065bc:	4b03      	ldr	r3, [pc, #12]	; (80065cc <HAL_RCC_GetHCLKFreq+0x14>)
 80065be:	681b      	ldr	r3, [r3, #0]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20000048 	.word	0x20000048

080065d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065d4:	f7ff fff0 	bl	80065b8 <HAL_RCC_GetHCLKFreq>
 80065d8:	4602      	mov	r2, r0
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	0a9b      	lsrs	r3, r3, #10
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	4903      	ldr	r1, [pc, #12]	; (80065f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065e6:	5ccb      	ldrb	r3, [r1, r3]
 80065e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40023800 	.word	0x40023800
 80065f4:	08014ec0 	.word	0x08014ec0

080065f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800661c:	2b00      	cmp	r3, #0
 800661e:	d038      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006620:	4b68      	ldr	r3, [pc, #416]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006626:	f7fc fd51 	bl	80030cc <HAL_GetTick>
 800662a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800662e:	f7fc fd4d 	bl	80030cc <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e0bd      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006640:	4b61      	ldr	r3, [pc, #388]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f0      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	019b      	lsls	r3, r3, #6
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	071b      	lsls	r3, r3, #28
 800665e:	495a      	ldr	r1, [pc, #360]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006666:	4b57      	ldr	r3, [pc, #348]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006668:	2201      	movs	r2, #1
 800666a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800666c:	f7fc fd2e 	bl	80030cc <HAL_GetTick>
 8006670:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006674:	f7fc fd2a 	bl	80030cc <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e09a      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006686:	4b50      	ldr	r3, [pc, #320]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8083 	beq.w	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	4b48      	ldr	r3, [pc, #288]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	4a47      	ldr	r2, [pc, #284]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ae:	6413      	str	r3, [r2, #64]	; 0x40
 80066b0:	4b45      	ldr	r3, [pc, #276]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80066bc:	4b43      	ldr	r3, [pc, #268]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a42      	ldr	r2, [pc, #264]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066c8:	f7fc fd00 	bl	80030cc <HAL_GetTick>
 80066cc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80066d0:	f7fc fcfc 	bl	80030cc <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e06c      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80066e2:	4b3a      	ldr	r3, [pc, #232]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066ee:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d02f      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	429a      	cmp	r2, r3
 800670a:	d028      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800670c:	4b2e      	ldr	r3, [pc, #184]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006714:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006716:	4b2e      	ldr	r3, [pc, #184]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006718:	2201      	movs	r2, #1
 800671a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800671c:	4b2c      	ldr	r3, [pc, #176]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006722:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006728:	4b27      	ldr	r3, [pc, #156]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	d114      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006734:	f7fc fcca 	bl	80030cc <HAL_GetTick>
 8006738:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673a:	e00a      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673c:	f7fc fcc6 	bl	80030cc <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f241 3288 	movw	r2, #5000	; 0x1388
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e034      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006752:	4b1d      	ldr	r3, [pc, #116]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0ee      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676a:	d10d      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800676c:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	4911      	ldr	r1, [pc, #68]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006782:	4313      	orrs	r3, r2
 8006784:	608b      	str	r3, [r1, #8]
 8006786:	e005      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006788:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	4a0e      	ldr	r2, [pc, #56]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006792:	6093      	str	r3, [r2, #8]
 8006794:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006796:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a0:	4909      	ldr	r1, [pc, #36]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0308 	and.w	r3, r3, #8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7d1a      	ldrb	r2, [r3, #20]
 80067b6:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80067b8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	42470068 	.word	0x42470068
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40007000 	.word	0x40007000
 80067d0:	42470e40 	.word	0x42470e40
 80067d4:	424711e0 	.word	0x424711e0

080067d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e083      	b.n	80068f2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	7f5b      	ldrb	r3, [r3, #29]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fc f96a 	bl	8002ad4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	22ca      	movs	r2, #202	; 0xca
 800680c:	625a      	str	r2, [r3, #36]	; 0x24
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2253      	movs	r2, #83	; 0x53
 8006814:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f897 	bl	800694a <RTC_EnterInitMode>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d008      	beq.n	8006834 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	22ff      	movs	r2, #255	; 0xff
 8006828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2204      	movs	r2, #4
 800682e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e05e      	b.n	80068f2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006846:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6899      	ldr	r1, [r3, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	431a      	orrs	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68d2      	ldr	r2, [r2, #12]
 800686e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6919      	ldr	r1, [r3, #16]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	041a      	lsls	r2, r3, #16
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006892:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10e      	bne.n	80068c0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f829 	bl	80068fa <HAL_RTC_WaitForSynchro>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d008      	beq.n	80068c0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	22ff      	movs	r2, #255	; 0xff
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2204      	movs	r2, #4
 80068ba:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e018      	b.n	80068f2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	22ff      	movs	r2, #255	; 0xff
 80068e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80068f0:	2300      	movs	r3, #0
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006914:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006916:	f7fc fbd9 	bl	80030cc <HAL_GetTick>
 800691a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800691c:	e009      	b.n	8006932 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800691e:	f7fc fbd5 	bl	80030cc <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800692c:	d901      	bls.n	8006932 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e007      	b.n	8006942 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0ee      	beq.n	800691e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d119      	bne.n	8006998 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f04f 32ff 	mov.w	r2, #4294967295
 800696c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800696e:	f7fc fbad 	bl	80030cc <HAL_GetTick>
 8006972:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006974:	e009      	b.n	800698a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006976:	f7fc fba9 	bl	80030cc <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006984:	d901      	bls.n	800698a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e007      	b.n	800699a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0ee      	beq.n	8006976 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e022      	b.n	80069fa <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fc f89a 	bl	8002b00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2203      	movs	r2, #3
 80069d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f815 	bl	8006a04 <HAL_SD_InitCard>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e00a      	b.n	80069fa <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a04:	b5b0      	push	{r4, r5, r7, lr}
 8006a06:	b08e      	sub	sp, #56	; 0x38
 8006a08:	af04      	add	r7, sp, #16
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006a20:	2376      	movs	r3, #118	; 0x76
 8006a22:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681d      	ldr	r5, [r3, #0]
 8006a28:	466c      	mov	r4, sp
 8006a2a:	f107 0314 	add.w	r3, r7, #20
 8006a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a36:	f107 0308 	add.w	r3, r7, #8
 8006a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f001 f938 	bl	8007cb2 <SDIO_Init>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e04c      	b.n	8006aee <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006a54:	4b28      	ldr	r3, [pc, #160]	; (8006af8 <HAL_SD_InitCard+0xf4>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f001 f970 	bl	8007d44 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006a64:	4b24      	ldr	r3, [pc, #144]	; (8006af8 <HAL_SD_InitCard+0xf4>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 ff02 	bl	8007874 <SD_PowerON>
 8006a70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e02e      	b.n	8006aee <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fe23 	bl	80076dc <SD_InitCard>
 8006a96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00b      	beq.n	8006ab6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e01b      	b.n	8006aee <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f001 f9d3 	bl	8007e6a <SDMMC_CmdBlockLength>
 8006ac4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00f      	beq.n	8006aec <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <HAL_SD_InitCard+0xf8>)
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3728      	adds	r7, #40	; 0x28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bdb0      	pop	{r4, r5, r7, pc}
 8006af6:	bf00      	nop
 8006af8:	422580a0 	.word	0x422580a0
 8006afc:	004005ff 	.word	0x004005ff

08006b00 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b092      	sub	sp, #72	; 0x48
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b0e:	f7fc fadd 	bl	80030cc <HAL_GetTick>
 8006b12:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d107      	bne.n	8006b32 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e1bd      	b.n	8006eae <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	f040 81b0 	bne.w	8006ea0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	441a      	add	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d907      	bls.n	8006b64 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e1a4      	b.n	8006eae <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2203      	movs	r2, #3
 8006b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2200      	movs	r2, #0
 8006b72:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d002      	beq.n	8006b82 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	025b      	lsls	r3, r3, #9
 8006b80:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b82:	f04f 33ff 	mov.w	r3, #4294967295
 8006b86:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	025b      	lsls	r3, r3, #9
 8006b8c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006b8e:	2390      	movs	r3, #144	; 0x90
 8006b90:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006b92:	2302      	movs	r3, #2
 8006b94:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f107 0214 	add.w	r2, r7, #20
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f932 	bl	8007e12 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d90a      	bls.n	8006bca <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 f996 	bl	8007ef2 <SDMMC_CmdReadMultiBlock>
 8006bc6:	6478      	str	r0, [r7, #68]	; 0x44
 8006bc8:	e009      	b.n	8006bde <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 f969 	bl	8007eae <SDMMC_CmdReadSingleBlock>
 8006bdc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d012      	beq.n	8006c0a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a7a      	ldr	r2, [pc, #488]	; (8006dd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e151      	b.n	8006eae <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006c0e:	e061      	b.n	8006cd4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d03c      	beq.n	8006c98 <HAL_SD_ReadBlocks+0x198>
 8006c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d039      	beq.n	8006c98 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006c24:	2300      	movs	r3, #0
 8006c26:	643b      	str	r3, [r7, #64]	; 0x40
 8006c28:	e033      	b.n	8006c92 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 f86a 	bl	8007d08 <SDIO_ReadFIFO>
 8006c34:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c40:	3301      	adds	r3, #1
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c46:	3b01      	subs	r3, #1
 8006c48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	0a1b      	lsrs	r3, r3, #8
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c56:	3301      	adds	r3, #1
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	0c1b      	lsrs	r3, r3, #16
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c72:	3b01      	subs	r3, #1
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	0e1b      	lsrs	r3, r3, #24
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c82:	3301      	adds	r3, #1
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c8e:	3301      	adds	r3, #1
 8006c90:	643b      	str	r3, [r7, #64]	; 0x40
 8006c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c94:	2b07      	cmp	r3, #7
 8006c96:	d9c8      	bls.n	8006c2a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006c98:	f7fc fa18 	bl	80030cc <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d902      	bls.n	8006cae <HAL_SD_ReadBlocks+0x1ae>
 8006ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d112      	bne.n	8006cd4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a48      	ldr	r2, [pc, #288]	; (8006dd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e0ec      	b.n	8006eae <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cda:	f240 332a 	movw	r3, #810	; 0x32a
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d095      	beq.n	8006c10 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d022      	beq.n	8006d38 <HAL_SD_ReadBlocks+0x238>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d91f      	bls.n	8006d38 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d01b      	beq.n	8006d38 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 f95b 	bl	8007fc0 <SDMMC_CmdStopTransfer>
 8006d0a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d012      	beq.n	8006d38 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2f      	ldr	r2, [pc, #188]	; (8006dd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d20:	431a      	orrs	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0ba      	b.n	8006eae <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d012      	beq.n	8006d6c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a22      	ldr	r2, [pc, #136]	; (8006dd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	f043 0208 	orr.w	r2, r3, #8
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0a0      	b.n	8006eae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d012      	beq.n	8006da0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a15      	ldr	r2, [pc, #84]	; (8006dd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	f043 0202 	orr.w	r2, r3, #2
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e086      	b.n	8006eae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d063      	beq.n	8006e76 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a08      	ldr	r2, [pc, #32]	; (8006dd4 <HAL_SD_ReadBlocks+0x2d4>)
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	f043 0220 	orr.w	r2, r3, #32
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e06c      	b.n	8006eae <HAL_SD_ReadBlocks+0x3ae>
 8006dd4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 ff93 	bl	8007d08 <SDIO_ReadFIFO>
 8006de2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dee:	3301      	adds	r3, #1
 8006df0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df4:	3b01      	subs	r3, #1
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	0a1b      	lsrs	r3, r3, #8
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e04:	3301      	adds	r3, #1
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	0c1b      	lsrs	r3, r3, #16
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e16:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e20:	3b01      	subs	r3, #1
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	0e1b      	lsrs	r3, r3, #24
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e30:	3301      	adds	r3, #1
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e36:	3b01      	subs	r3, #1
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e3a:	f7fc f947 	bl	80030cc <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d902      	bls.n	8006e50 <HAL_SD_ReadBlocks+0x350>
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d112      	bne.n	8006e76 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <HAL_SD_ReadBlocks+0x3b8>)
 8006e56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e01b      	b.n	8006eae <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <HAL_SD_ReadBlocks+0x38a>
 8006e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1a6      	bne.n	8006dd8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e006      	b.n	8006eae <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
  }
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3748      	adds	r7, #72	; 0x48
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	004005ff 	.word	0x004005ff

08006ebc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b092      	sub	sp, #72	; 0x48
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006eca:	f7fc f8ff 	bl	80030cc <HAL_GetTick>
 8006ece:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d107      	bne.n	8006eee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e166      	b.n	80071bc <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	f040 8159 	bne.w	80071ae <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	441a      	add	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d907      	bls.n	8006f20 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e14d      	b.n	80071bc <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2203      	movs	r2, #3
 8006f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d002      	beq.n	8006f3e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	025b      	lsls	r3, r3, #9
 8006f3c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f42:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	025b      	lsls	r3, r3, #9
 8006f48:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006f4a:	2390      	movs	r3, #144	; 0x90
 8006f4c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006f56:	2301      	movs	r3, #1
 8006f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f107 0218 	add.w	r2, r7, #24
 8006f62:	4611      	mov	r1, r2
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 ff54 	bl	8007e12 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d90a      	bls.n	8006f86 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fffc 	bl	8007f7a <SDMMC_CmdWriteMultiBlock>
 8006f82:	6478      	str	r0, [r7, #68]	; 0x44
 8006f84:	e009      	b.n	8006f9a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2210      	movs	r2, #16
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 ffcf 	bl	8007f36 <SDMMC_CmdWriteSingleBlock>
 8006f98:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d012      	beq.n	8006fc6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a87      	ldr	r2, [pc, #540]	; (80071c4 <HAL_SD_WriteBlocks+0x308>)
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e0fa      	b.n	80071bc <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006fca:	e065      	b.n	8007098 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d040      	beq.n	800705c <HAL_SD_WriteBlocks+0x1a0>
 8006fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d03d      	beq.n	800705c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fe4:	e037      	b.n	8007056 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	3301      	adds	r3, #1
 8006ff0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	021a      	lsls	r2, r3, #8
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007006:	3301      	adds	r3, #1
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800700a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700c:	3b01      	subs	r3, #1
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	041a      	lsls	r2, r3, #16
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	3301      	adds	r3, #1
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007024:	3b01      	subs	r3, #1
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	061a      	lsls	r2, r3, #24
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007036:	3301      	adds	r3, #1
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800703a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703c:	3b01      	subs	r3, #1
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f107 0214 	add.w	r2, r7, #20
 8007048:	4611      	mov	r1, r2
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fe69 	bl	8007d22 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007052:	3301      	adds	r3, #1
 8007054:	643b      	str	r3, [r7, #64]	; 0x40
 8007056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007058:	2b07      	cmp	r3, #7
 800705a:	d9c4      	bls.n	8006fe6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800705c:	f7fc f836 	bl	80030cc <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007068:	429a      	cmp	r2, r3
 800706a:	d902      	bls.n	8007072 <HAL_SD_WriteBlocks+0x1b6>
 800706c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706e:	2b00      	cmp	r3, #0
 8007070:	d112      	bne.n	8007098 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a53      	ldr	r2, [pc, #332]	; (80071c4 <HAL_SD_WriteBlocks+0x308>)
 8007078:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007080:	431a      	orrs	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e091      	b.n	80071bc <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800709e:	f240 331a 	movw	r3, #794	; 0x31a
 80070a2:	4013      	ands	r3, r2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d091      	beq.n	8006fcc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d022      	beq.n	80070fc <HAL_SD_WriteBlocks+0x240>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d91f      	bls.n	80070fc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d01b      	beq.n	80070fc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 ff79 	bl	8007fc0 <SDMMC_CmdStopTransfer>
 80070ce:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80070d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d012      	beq.n	80070fc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a3a      	ldr	r2, [pc, #232]	; (80071c4 <HAL_SD_WriteBlocks+0x308>)
 80070dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070e4:	431a      	orrs	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e05f      	b.n	80071bc <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d012      	beq.n	8007130 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a2d      	ldr	r2, [pc, #180]	; (80071c4 <HAL_SD_WriteBlocks+0x308>)
 8007110:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	f043 0208 	orr.w	r2, r3, #8
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e045      	b.n	80071bc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d012      	beq.n	8007164 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a20      	ldr	r2, [pc, #128]	; (80071c4 <HAL_SD_WriteBlocks+0x308>)
 8007144:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	f043 0202 	orr.w	r2, r3, #2
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e02b      	b.n	80071bc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	f003 0310 	and.w	r3, r3, #16
 800716e:	2b00      	cmp	r3, #0
 8007170:	d012      	beq.n	8007198 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a13      	ldr	r2, [pc, #76]	; (80071c4 <HAL_SD_WriteBlocks+0x308>)
 8007178:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	f043 0210 	orr.w	r2, r3, #16
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e011      	b.n	80071bc <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f240 523a 	movw	r2, #1338	; 0x53a
 80071a0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e006      	b.n	80071bc <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
  }
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3748      	adds	r7, #72	; 0x48
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	004005ff 	.word	0x004005ff

080071c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d6:	0f9b      	lsrs	r3, r3, #30
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e2:	0e9b      	lsrs	r3, r3, #26
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f4:	0e1b      	lsrs	r3, r3, #24
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f003 0303 	and.w	r3, r3, #3
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007206:	0c1b      	lsrs	r3, r3, #16
 8007208:	b2da      	uxtb	r2, r3
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007212:	0a1b      	lsrs	r3, r3, #8
 8007214:	b2da      	uxtb	r2, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007228:	0d1b      	lsrs	r3, r3, #20
 800722a:	b29a      	uxth	r2, r3
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007234:	0c1b      	lsrs	r3, r3, #16
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	b2da      	uxtb	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007246:	0bdb      	lsrs	r3, r3, #15
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007258:	0b9b      	lsrs	r3, r3, #14
 800725a:	b2db      	uxtb	r3, r3
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	b2da      	uxtb	r2, r3
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800726a:	0b5b      	lsrs	r3, r3, #13
 800726c:	b2db      	uxtb	r3, r3
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	b2da      	uxtb	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800727c:	0b1b      	lsrs	r3, r3, #12
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	b2da      	uxtb	r2, r3
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2200      	movs	r2, #0
 800728e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007294:	2b00      	cmp	r3, #0
 8007296:	d163      	bne.n	8007360 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800729c:	009a      	lsls	r2, r3, #2
 800729e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80072a2:	4013      	ands	r3, r2
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80072a8:	0f92      	lsrs	r2, r2, #30
 80072aa:	431a      	orrs	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b4:	0edb      	lsrs	r3, r3, #27
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c6:	0e1b      	lsrs	r3, r3, #24
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d8:	0d5b      	lsrs	r3, r3, #21
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	f003 0307 	and.w	r3, r3, #7
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ea:	0c9b      	lsrs	r3, r3, #18
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fc:	0bdb      	lsrs	r3, r3, #15
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	b2da      	uxtb	r2, r3
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	7e1b      	ldrb	r3, [r3, #24]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	3302      	adds	r3, #2
 8007320:	2201      	movs	r2, #1
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800732a:	fb02 f203 	mul.w	r2, r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	7a1b      	ldrb	r3, [r3, #8]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f003 030f 	and.w	r3, r3, #15
 800733c:	2201      	movs	r2, #1
 800733e:	409a      	lsls	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800734c:	0a52      	lsrs	r2, r2, #9
 800734e:	fb02 f203 	mul.w	r2, r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800735c:	661a      	str	r2, [r3, #96]	; 0x60
 800735e:	e031      	b.n	80073c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007364:	2b01      	cmp	r3, #1
 8007366:	d11d      	bne.n	80073a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	431a      	orrs	r2, r3
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	3301      	adds	r3, #1
 8007384:	029a      	lsls	r2, r3, #10
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007398:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	661a      	str	r2, [r3, #96]	; 0x60
 80073a2:	e00f      	b.n	80073c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a58      	ldr	r2, [pc, #352]	; (800750c <HAL_SD_GetCardCSD+0x344>)
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e09d      	b.n	8007500 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c8:	0b9b      	lsrs	r3, r3, #14
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073da:	09db      	lsrs	r3, r3, #7
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fc:	0fdb      	lsrs	r3, r3, #31
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007408:	0f5b      	lsrs	r3, r3, #29
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	b2da      	uxtb	r2, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741a:	0e9b      	lsrs	r3, r3, #26
 800741c:	b2db      	uxtb	r3, r3
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	b2da      	uxtb	r2, r3
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742c:	0d9b      	lsrs	r3, r3, #22
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	b2da      	uxtb	r2, r3
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743e:	0d5b      	lsrs	r3, r3, #21
 8007440:	b2db      	uxtb	r3, r3
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	b2da      	uxtb	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745a:	0c1b      	lsrs	r3, r3, #16
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	b2da      	uxtb	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	0bdb      	lsrs	r3, r3, #15
 8007470:	b2db      	uxtb	r3, r3
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	b2da      	uxtb	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	0b9b      	lsrs	r3, r3, #14
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	b2da      	uxtb	r2, r3
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007496:	0b5b      	lsrs	r3, r3, #13
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074aa:	0b1b      	lsrs	r3, r3, #12
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	0a9b      	lsrs	r3, r3, #10
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d2:	0a1b      	lsrs	r3, r3, #8
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e6:	085b      	lsrs	r3, r3, #1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	004005ff 	.word	0x004005ff

08007510 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007568:	b5b0      	push	{r4, r5, r7, lr}
 800756a:	b08e      	sub	sp, #56	; 0x38
 800756c:	af04      	add	r7, sp, #16
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2203      	movs	r2, #3
 800757c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007584:	2b03      	cmp	r3, #3
 8007586:	d02e      	beq.n	80075e6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758e:	d106      	bne.n	800759e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	639a      	str	r2, [r3, #56]	; 0x38
 800759c:	e029      	b.n	80075f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a4:	d10a      	bne.n	80075bc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa1a 	bl	80079e0 <SD_WideBus_Enable>
 80075ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
 80075ba:	e01a      	b.n	80075f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10a      	bne.n	80075d8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa57 	bl	8007a76 <SD_WideBus_Disable>
 80075c8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	639a      	str	r2, [r3, #56]	; 0x38
 80075d6:	e00c      	b.n	80075f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38
 80075e4:	e005      	b.n	80075f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00b      	beq.n	8007612 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a26      	ldr	r2, [pc, #152]	; (8007698 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007600:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007610:	e01f      	b.n	8007652 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681d      	ldr	r5, [r3, #0]
 8007638:	466c      	mov	r4, sp
 800763a:	f107 0314 	add.w	r3, r7, #20
 800763e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007646:	f107 0308 	add.w	r3, r7, #8
 800764a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800764c:	4628      	mov	r0, r5
 800764e:	f000 fb30 	bl	8007cb2 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fc05 	bl	8007e6a <SDMMC_CmdBlockLength>
 8007660:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00c      	beq.n	8007682 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a0a      	ldr	r2, [pc, #40]	; (8007698 <HAL_SD_ConfigWideBusOperation+0x130>)
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800768a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800768e:	4618      	mov	r0, r3
 8007690:	3728      	adds	r7, #40	; 0x28
 8007692:	46bd      	mov	sp, r7
 8007694:	bdb0      	pop	{r4, r5, r7, pc}
 8007696:	bf00      	nop
 8007698:	004005ff 	.word	0x004005ff

0800769c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80076a8:	f107 030c 	add.w	r3, r7, #12
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f96e 	bl	8007990 <SD_SendStatus>
 80076b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	0a5b      	lsrs	r3, r3, #9
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80076d2:	693b      	ldr	r3, [r7, #16]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076dc:	b5b0      	push	{r4, r5, r7, lr}
 80076de:	b094      	sub	sp, #80	; 0x50
 80076e0:	af04      	add	r7, sp, #16
 80076e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80076e4:	2301      	movs	r3, #1
 80076e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fb38 	bl	8007d62 <SDIO_GetPowerState>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80076f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80076fc:	e0b6      	b.n	800786c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	2b03      	cmp	r3, #3
 8007704:	d02f      	beq.n	8007766 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fd62 	bl	80081d4 <SDMMC_CmdSendCID>
 8007710:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <SD_InitCard+0x40>
    {
      return errorstate;
 8007718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771a:	e0a7      	b.n	800786c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2100      	movs	r1, #0
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fb62 	bl	8007dec <SDIO_GetResponse>
 8007728:	4602      	mov	r2, r0
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2104      	movs	r1, #4
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fb59 	bl	8007dec <SDIO_GetResponse>
 800773a:	4602      	mov	r2, r0
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2108      	movs	r1, #8
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fb50 	bl	8007dec <SDIO_GetResponse>
 800774c:	4602      	mov	r2, r0
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	210c      	movs	r1, #12
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fb47 	bl	8007dec <SDIO_GetResponse>
 800775e:	4602      	mov	r2, r0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776a:	2b03      	cmp	r3, #3
 800776c:	d00d      	beq.n	800778a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f107 020e 	add.w	r2, r7, #14
 8007776:	4611      	mov	r1, r2
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fd68 	bl	800824e <SDMMC_CmdSetRelAdd>
 800777e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <SD_InitCard+0xae>
    {
      return errorstate;
 8007786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007788:	e070      	b.n	800786c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778e:	2b03      	cmp	r3, #3
 8007790:	d036      	beq.n	8007800 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007792:	89fb      	ldrh	r3, [r7, #14]
 8007794:	461a      	mov	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a2:	041b      	lsls	r3, r3, #16
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f000 fd32 	bl	8008210 <SDMMC_CmdSendCSD>
 80077ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80077b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b6:	e059      	b.n	800786c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2100      	movs	r1, #0
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fb14 	bl	8007dec <SDIO_GetResponse>
 80077c4:	4602      	mov	r2, r0
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2104      	movs	r1, #4
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fb0b 	bl	8007dec <SDIO_GetResponse>
 80077d6:	4602      	mov	r2, r0
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2108      	movs	r1, #8
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fb02 	bl	8007dec <SDIO_GetResponse>
 80077e8:	4602      	mov	r2, r0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	210c      	movs	r1, #12
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 faf9 	bl	8007dec <SDIO_GetResponse>
 80077fa:	4602      	mov	r2, r0
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2104      	movs	r1, #4
 8007806:	4618      	mov	r0, r3
 8007808:	f000 faf0 	bl	8007dec <SDIO_GetResponse>
 800780c:	4603      	mov	r3, r0
 800780e:	0d1a      	lsrs	r2, r3, #20
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007814:	f107 0310 	add.w	r3, r7, #16
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff fcd4 	bl	80071c8 <HAL_SD_GetCardCSD>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007826:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800782a:	e01f      	b.n	800786c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6819      	ldr	r1, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007834:	041b      	lsls	r3, r3, #16
 8007836:	461a      	mov	r2, r3
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	4608      	mov	r0, r1
 800783e:	f000 fbe1 	bl	8008004 <SDMMC_CmdSelDesel>
 8007842:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <SD_InitCard+0x172>
  {
    return errorstate;
 800784a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800784c:	e00e      	b.n	800786c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681d      	ldr	r5, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	466c      	mov	r4, sp
 8007856:	f103 0210 	add.w	r2, r3, #16
 800785a:	ca07      	ldmia	r2, {r0, r1, r2}
 800785c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007860:	3304      	adds	r3, #4
 8007862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007864:	4628      	mov	r0, r5
 8007866:	f000 fa24 	bl	8007cb2 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3740      	adds	r7, #64	; 0x40
 8007870:	46bd      	mov	sp, r7
 8007872:	bdb0      	pop	{r4, r5, r7, pc}

08007874 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	2300      	movs	r3, #0
 8007886:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4618      	mov	r0, r3
 800788e:	f000 fbdc 	bl	800804a <SDMMC_CmdGoIdleState>
 8007892:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <SD_PowerON+0x2a>
  {
    return errorstate;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	e072      	b.n	8007984 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fbef 	bl	8008086 <SDMMC_CmdOperCond>
 80078a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00d      	beq.n	80078cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fbc5 	bl	800804a <SDMMC_CmdGoIdleState>
 80078c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d004      	beq.n	80078d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	e05b      	b.n	8007984 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d137      	bne.n	800794a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2100      	movs	r1, #0
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 fbef 	bl	80080c4 <SDMMC_CmdAppCommand>
 80078e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d02d      	beq.n	800794a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078f2:	e047      	b.n	8007984 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2100      	movs	r1, #0
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fbe2 	bl	80080c4 <SDMMC_CmdAppCommand>
 8007900:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <SD_PowerON+0x98>
    {
      return errorstate;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	e03b      	b.n	8007984 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	491e      	ldr	r1, [pc, #120]	; (800798c <SD_PowerON+0x118>)
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fbf8 	bl	8008108 <SDMMC_CmdAppOperCommand>
 8007918:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007924:	e02e      	b.n	8007984 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2100      	movs	r1, #0
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fa5d 	bl	8007dec <SDIO_GetResponse>
 8007932:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	0fdb      	lsrs	r3, r3, #31
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <SD_PowerON+0xcc>
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <SD_PowerON+0xce>
 8007940:	2300      	movs	r3, #0
 8007942:	613b      	str	r3, [r7, #16]

    count++;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	3301      	adds	r3, #1
 8007948:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007950:	4293      	cmp	r3, r2
 8007952:	d802      	bhi.n	800795a <SD_PowerON+0xe6>
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0cc      	beq.n	80078f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007960:	4293      	cmp	r3, r2
 8007962:	d902      	bls.n	800796a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007968:	e00c      	b.n	8007984 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	645a      	str	r2, [r3, #68]	; 0x44
 800797a:	e002      	b.n	8007982 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	c1100000 	.word	0xc1100000

08007990 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80079a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079a4:	e018      	b.n	80079d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ae:	041b      	lsls	r3, r3, #16
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f000 fc6c 	bl	8008290 <SDMMC_CmdSendStatus>
 80079b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	e009      	b.n	80079d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2100      	movs	r1, #0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fa0e 	bl	8007dec <SDIO_GetResponse>
 80079d0:	4602      	mov	r2, r0
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	2300      	movs	r3, #0
 80079ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2100      	movs	r1, #0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 f9f8 	bl	8007dec <SDIO_GetResponse>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a06:	d102      	bne.n	8007a0e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a0c:	e02f      	b.n	8007a6e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a0e:	f107 030c 	add.w	r3, r7, #12
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f879 	bl	8007b0c <SD_FindSCR>
 8007a1a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	e023      	b.n	8007a6e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01c      	beq.n	8007a6a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a38:	041b      	lsls	r3, r3, #16
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f000 fb41 	bl	80080c4 <SDMMC_CmdAppCommand>
 8007a42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	e00f      	b.n	8007a6e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2102      	movs	r1, #2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f000 fb7a 	bl	800814e <SDMMC_CmdBusWidth>
 8007a5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	e003      	b.n	8007a6e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e001      	b.n	8007a6e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	2300      	movs	r3, #0
 8007a84:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 f9ad 	bl	8007dec <SDIO_GetResponse>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a9c:	d102      	bne.n	8007aa4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007aa2:	e02f      	b.n	8007b04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007aa4:	f107 030c 	add.w	r3, r7, #12
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f82e 	bl	8007b0c <SD_FindSCR>
 8007ab0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	e023      	b.n	8007b04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01c      	beq.n	8007b00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	f000 faf6 	bl	80080c4 <SDMMC_CmdAppCommand>
 8007ad8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	e00f      	b.n	8007b04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2100      	movs	r1, #0
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fb2f 	bl	800814e <SDMMC_CmdBusWidth>
 8007af0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	e003      	b.n	8007b04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e001      	b.n	8007b04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b0c:	b590      	push	{r4, r7, lr}
 8007b0e:	b08f      	sub	sp, #60	; 0x3c
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b16:	f7fb fad9 	bl	80030cc <HAL_GetTick>
 8007b1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007b20:	2300      	movs	r3, #0
 8007b22:	60bb      	str	r3, [r7, #8]
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2108      	movs	r1, #8
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 f999 	bl	8007e6a <SDMMC_CmdBlockLength>
 8007b38:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	e0b2      	b.n	8007caa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4c:	041b      	lsls	r3, r3, #16
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4610      	mov	r0, r2
 8007b52:	f000 fab7 	bl	80080c4 <SDMMC_CmdAppCommand>
 8007b56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	e0a3      	b.n	8007caa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b62:	f04f 33ff 	mov.w	r3, #4294967295
 8007b66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007b68:	2308      	movs	r3, #8
 8007b6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007b6c:	2330      	movs	r3, #48	; 0x30
 8007b6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007b70:	2302      	movs	r3, #2
 8007b72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f107 0210 	add.w	r2, r7, #16
 8007b84:	4611      	mov	r1, r2
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 f943 	bl	8007e12 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fafe 	bl	8008192 <SDMMC_CmdSendSCR>
 8007b96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d02a      	beq.n	8007bf4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	e083      	b.n	8007caa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00f      	beq.n	8007bd0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	f107 0208 	add.w	r2, r7, #8
 8007bbc:	18d4      	adds	r4, r2, r3
 8007bbe:	4608      	mov	r0, r1
 8007bc0:	f000 f8a2 	bl	8007d08 <SDIO_ReadFIFO>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	6023      	str	r3, [r4, #0]
      index++;
 8007bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bca:	3301      	adds	r3, #1
 8007bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bce:	e006      	b.n	8007bde <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d012      	beq.n	8007c04 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007bde:	f7fb fa75 	bl	80030cc <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d102      	bne.n	8007bf4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007bee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bf2:	e05a      	b.n	8007caa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0cf      	beq.n	8007ba2 <SD_FindSCR+0x96>
 8007c02:	e000      	b.n	8007c06 <SD_FindSCR+0xfa>
      break;
 8007c04:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d005      	beq.n	8007c20 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2208      	movs	r2, #8
 8007c1a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	e044      	b.n	8007caa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2202      	movs	r2, #2
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c36:	2302      	movs	r3, #2
 8007c38:	e037      	b.n	8007caa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007c50:	2320      	movs	r3, #32
 8007c52:	e02a      	b.n	8007caa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	061a      	lsls	r2, r3, #24
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c6a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	0a1b      	lsrs	r3, r3, #8
 8007c70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	0e1b      	lsrs	r3, r3, #24
 8007c7a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	601a      	str	r2, [r3, #0]
    scr++;
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	3304      	adds	r3, #4
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	061a      	lsls	r2, r3, #24
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c92:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	0a1b      	lsrs	r3, r3, #8
 8007c98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	0e1b      	lsrs	r3, r3, #24
 8007ca2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	373c      	adds	r7, #60	; 0x3c
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd90      	pop	{r4, r7, pc}

08007cb2 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	f107 001c 	add.w	r0, r7, #28
 8007cc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007cc8:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007cca:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007ccc:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007cd0:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007cd4:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007cd8:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007cdc:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007cec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	b004      	add	sp, #16
 8007d06:	4770      	bx	lr

08007d08 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2203      	movs	r2, #3
 8007d50:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007d52:	2002      	movs	r0, #2
 8007d54:	f7fb f9c6 	bl	80030e4 <HAL_Delay>
  
  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0303 	and.w	r3, r3, #3
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d9c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007da2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007da8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007db8:	f023 030f 	bic.w	r3, r3, #15
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	b2db      	uxtb	r3, r3
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3314      	adds	r3, #20
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	4413      	add	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
}  
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b085      	sub	sp, #20
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e38:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007e3e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007e44:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0

}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b088      	sub	sp, #32
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007e78:	2310      	movs	r3, #16
 8007e7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e7c:	2340      	movs	r3, #64	; 0x40
 8007e7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e80:	2300      	movs	r3, #0
 8007e82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e8a:	f107 0308 	add.w	r3, r7, #8
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff ff74 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9a:	2110      	movs	r1, #16
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fa45 	bl	800832c <SDMMC_GetCmdResp1>
 8007ea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b088      	sub	sp, #32
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007ebc:	2311      	movs	r3, #17
 8007ebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ec0:	2340      	movs	r3, #64	; 0x40
 8007ec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ecc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ece:	f107 0308 	add.w	r3, r7, #8
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff ff52 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ede:	2111      	movs	r1, #17
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fa23 	bl	800832c <SDMMC_GetCmdResp1>
 8007ee6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3720      	adds	r7, #32
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b088      	sub	sp, #32
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007f00:	2312      	movs	r3, #18
 8007f02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f04:	2340      	movs	r3, #64	; 0x40
 8007f06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f12:	f107 0308 	add.w	r3, r7, #8
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff ff30 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f22:	2112      	movs	r1, #18
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa01 	bl	800832c <SDMMC_GetCmdResp1>
 8007f2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3720      	adds	r7, #32
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b088      	sub	sp, #32
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007f44:	2318      	movs	r3, #24
 8007f46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f48:	2340      	movs	r3, #64	; 0x40
 8007f4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f56:	f107 0308 	add.w	r3, r7, #8
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff ff0e 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f66:	2118      	movs	r1, #24
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f9df 	bl	800832c <SDMMC_GetCmdResp1>
 8007f6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f70:	69fb      	ldr	r3, [r7, #28]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3720      	adds	r7, #32
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b088      	sub	sp, #32
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007f88:	2319      	movs	r3, #25
 8007f8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f8c:	2340      	movs	r3, #64	; 0x40
 8007f8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f90:	2300      	movs	r3, #0
 8007f92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f9a:	f107 0308 	add.w	r3, r7, #8
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff feec 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007faa:	2119      	movs	r1, #25
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f9bd 	bl	800832c <SDMMC_GetCmdResp1>
 8007fb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fb4:	69fb      	ldr	r3, [r7, #28]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3720      	adds	r7, #32
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007fcc:	230c      	movs	r3, #12
 8007fce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fd0:	2340      	movs	r3, #64	; 0x40
 8007fd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fde:	f107 0308 	add.w	r3, r7, #8
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff feca 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007fea:	4a05      	ldr	r2, [pc, #20]	; (8008000 <SDMMC_CmdStopTransfer+0x40>)
 8007fec:	210c      	movs	r1, #12
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f99c 	bl	800832c <SDMMC_GetCmdResp1>
 8007ff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	05f5e100 	.word	0x05f5e100

08008004 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	; 0x28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008014:	2307      	movs	r3, #7
 8008016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008018:	2340      	movs	r3, #64	; 0x40
 800801a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800801c:	2300      	movs	r3, #0
 800801e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008024:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008026:	f107 0310 	add.w	r3, r7, #16
 800802a:	4619      	mov	r1, r3
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7ff fea6 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008032:	f241 3288 	movw	r2, #5000	; 0x1388
 8008036:	2107      	movs	r1, #7
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 f977 	bl	800832c <SDMMC_GetCmdResp1>
 800803e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008042:	4618      	mov	r0, r3
 8008044:	3728      	adds	r7, #40	; 0x28
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b088      	sub	sp, #32
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008056:	2300      	movs	r3, #0
 8008058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800805a:	2300      	movs	r3, #0
 800805c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008066:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008068:	f107 0308 	add.w	r3, r7, #8
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff fe85 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f92d 	bl	80082d4 <SDMMC_GetCmdError>
 800807a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800807c:	69fb      	ldr	r3, [r7, #28]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3720      	adds	r7, #32
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b088      	sub	sp, #32
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800808e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008094:	2308      	movs	r3, #8
 8008096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008098:	2340      	movs	r3, #64	; 0x40
 800809a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800809c:	2300      	movs	r3, #0
 800809e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080a6:	f107 0308 	add.w	r3, r7, #8
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff fe66 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fb24 	bl	8008700 <SDMMC_GetCmdResp7>
 80080b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080ba:	69fb      	ldr	r3, [r7, #28]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3720      	adds	r7, #32
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80080d2:	2337      	movs	r3, #55	; 0x37
 80080d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080d6:	2340      	movs	r3, #64	; 0x40
 80080d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080e4:	f107 0308 	add.w	r3, r7, #8
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff fe47 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80080f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f4:	2137      	movs	r1, #55	; 0x37
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f918 	bl	800832c <SDMMC_GetCmdResp1>
 80080fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080fe:	69fb      	ldr	r3, [r7, #28]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3720      	adds	r7, #32
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800811c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800811e:	2329      	movs	r3, #41	; 0x29
 8008120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008122:	2340      	movs	r3, #64	; 0x40
 8008124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800812a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800812e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff fe21 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fa2b 	bl	8008598 <SDMMC_GetCmdResp3>
 8008142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008144:	69fb      	ldr	r3, [r7, #28]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3720      	adds	r7, #32
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b088      	sub	sp, #32
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800815c:	2306      	movs	r3, #6
 800815e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008160:	2340      	movs	r3, #64	; 0x40
 8008162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008164:	2300      	movs	r3, #0
 8008166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800816c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff fe02 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800817a:	f241 3288 	movw	r2, #5000	; 0x1388
 800817e:	2106      	movs	r1, #6
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f8d3 	bl	800832c <SDMMC_GetCmdResp1>
 8008186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008188:	69fb      	ldr	r3, [r7, #28]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b088      	sub	sp, #32
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800819e:	2333      	movs	r3, #51	; 0x33
 80081a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081a2:	2340      	movs	r3, #64	; 0x40
 80081a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081a6:	2300      	movs	r3, #0
 80081a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081b0:	f107 0308 	add.w	r3, r7, #8
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fde1 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80081bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c0:	2133      	movs	r1, #51	; 0x33
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f8b2 	bl	800832c <SDMMC_GetCmdResp1>
 80081c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081ca:	69fb      	ldr	r3, [r7, #28]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80081e0:	2302      	movs	r3, #2
 80081e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80081e4:	23c0      	movs	r3, #192	; 0xc0
 80081e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081e8:	2300      	movs	r3, #0
 80081ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081f2:	f107 0308 	add.w	r3, r7, #8
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff fdc0 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f982 	bl	8008508 <SDMMC_GetCmdResp2>
 8008204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008206:	69fb      	ldr	r3, [r7, #28]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3720      	adds	r7, #32
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b088      	sub	sp, #32
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800821e:	2309      	movs	r3, #9
 8008220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008222:	23c0      	movs	r3, #192	; 0xc0
 8008224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800822a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800822e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008230:	f107 0308 	add.w	r3, r7, #8
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff fda1 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f963 	bl	8008508 <SDMMC_GetCmdResp2>
 8008242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008244:	69fb      	ldr	r3, [r7, #28]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3720      	adds	r7, #32
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b088      	sub	sp, #32
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800825c:	2303      	movs	r3, #3
 800825e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008260:	2340      	movs	r3, #64	; 0x40
 8008262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800826c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800826e:	f107 0308 	add.w	r3, r7, #8
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff fd82 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	2103      	movs	r1, #3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f9c8 	bl	8008614 <SDMMC_GetCmdResp6>
 8008284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008286:	69fb      	ldr	r3, [r7, #28]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3720      	adds	r7, #32
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b088      	sub	sp, #32
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800829e:	230d      	movs	r3, #13
 80082a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082a2:	2340      	movs	r3, #64	; 0x40
 80082a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082b0:	f107 0308 	add.w	r3, r7, #8
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fd61 	bl	8007d7e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80082bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80082c0:	210d      	movs	r1, #13
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f832 	bl	800832c <SDMMC_GetCmdResp1>
 80082c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082ca:	69fb      	ldr	r3, [r7, #28]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3720      	adds	r7, #32
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082dc:	4b11      	ldr	r3, [pc, #68]	; (8008324 <SDMMC_GetCmdError+0x50>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a11      	ldr	r2, [pc, #68]	; (8008328 <SDMMC_GetCmdError+0x54>)
 80082e2:	fba2 2303 	umull	r2, r3, r2, r3
 80082e6:	0a5b      	lsrs	r3, r3, #9
 80082e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ec:	fb02 f303 	mul.w	r3, r2, r3
 80082f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	1e5a      	subs	r2, r3, #1
 80082f6:	60fa      	str	r2, [r7, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008300:	e009      	b.n	8008316 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800830a:	2b00      	cmp	r3, #0
 800830c:	d0f1      	beq.n	80082f2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	22c5      	movs	r2, #197	; 0xc5
 8008312:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	20000048 	.word	0x20000048
 8008328:	10624dd3 	.word	0x10624dd3

0800832c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b088      	sub	sp, #32
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	460b      	mov	r3, r1
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800833a:	4b70      	ldr	r3, [pc, #448]	; (80084fc <SDMMC_GetCmdResp1+0x1d0>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a70      	ldr	r2, [pc, #448]	; (8008500 <SDMMC_GetCmdResp1+0x1d4>)
 8008340:	fba2 2303 	umull	r2, r3, r2, r3
 8008344:	0a5a      	lsrs	r2, r3, #9
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	fb02 f303 	mul.w	r3, r2, r3
 800834c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	1e5a      	subs	r2, r3, #1
 8008352:	61fa      	str	r2, [r7, #28]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d102      	bne.n	800835e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800835c:	e0c9      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008362:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0ef      	beq.n	800834e <SDMMC_GetCmdResp1+0x22>
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1ea      	bne.n	800834e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d004      	beq.n	800838e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2204      	movs	r2, #4
 8008388:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800838a:	2304      	movs	r3, #4
 800838c:	e0b1      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d004      	beq.n	80083a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e0a6      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	22c5      	movs	r2, #197	; 0xc5
 80083a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff fd11 	bl	8007dd2 <SDIO_GetCommandResponse>
 80083b0:	4603      	mov	r3, r0
 80083b2:	461a      	mov	r2, r3
 80083b4:	7afb      	ldrb	r3, [r7, #11]
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d001      	beq.n	80083be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e099      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80083be:	2100      	movs	r1, #0
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7ff fd13 	bl	8007dec <SDIO_GetResponse>
 80083c6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4b4e      	ldr	r3, [pc, #312]	; (8008504 <SDMMC_GetCmdResp1+0x1d8>)
 80083cc:	4013      	ands	r3, r2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80083d2:	2300      	movs	r3, #0
 80083d4:	e08d      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	da02      	bge.n	80083e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80083dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083e0:	e087      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80083ec:	2340      	movs	r3, #64	; 0x40
 80083ee:	e080      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80083fa:	2380      	movs	r3, #128	; 0x80
 80083fc:	e079      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d002      	beq.n	800840e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800840c:	e071      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800841c:	e069      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800842c:	e061      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800843c:	e059      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800844c:	e051      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800845c:	e049      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008468:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800846c:	e041      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800847c:	e039      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800848c:	e031      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008498:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800849c:	e029      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80084a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084ac:	e021      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80084b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80084bc:	e019      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80084c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80084cc:	e011      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80084d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80084dc:	e009      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f003 0308 	and.w	r3, r3, #8
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80084e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80084ec:	e001      	b.n	80084f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80084ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3720      	adds	r7, #32
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000048 	.word	0x20000048
 8008500:	10624dd3 	.word	0x10624dd3
 8008504:	fdffe008 	.word	0xfdffe008

08008508 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008510:	4b1f      	ldr	r3, [pc, #124]	; (8008590 <SDMMC_GetCmdResp2+0x88>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a1f      	ldr	r2, [pc, #124]	; (8008594 <SDMMC_GetCmdResp2+0x8c>)
 8008516:	fba2 2303 	umull	r2, r3, r2, r3
 800851a:	0a5b      	lsrs	r3, r3, #9
 800851c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008520:	fb02 f303 	mul.w	r3, r2, r3
 8008524:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	1e5a      	subs	r2, r3, #1
 800852a:	60fa      	str	r2, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d102      	bne.n	8008536 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008534:	e026      	b.n	8008584 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0ef      	beq.n	8008526 <SDMMC_GetCmdResp2+0x1e>
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1ea      	bne.n	8008526 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d004      	beq.n	8008566 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2204      	movs	r2, #4
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008562:	2304      	movs	r3, #4
 8008564:	e00e      	b.n	8008584 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008578:	2301      	movs	r3, #1
 800857a:	e003      	b.n	8008584 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	22c5      	movs	r2, #197	; 0xc5
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	20000048 	.word	0x20000048
 8008594:	10624dd3 	.word	0x10624dd3

08008598 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085a0:	4b1a      	ldr	r3, [pc, #104]	; (800860c <SDMMC_GetCmdResp3+0x74>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1a      	ldr	r2, [pc, #104]	; (8008610 <SDMMC_GetCmdResp3+0x78>)
 80085a6:	fba2 2303 	umull	r2, r3, r2, r3
 80085aa:	0a5b      	lsrs	r3, r3, #9
 80085ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b0:	fb02 f303 	mul.w	r3, r2, r3
 80085b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	1e5a      	subs	r2, r3, #1
 80085ba:	60fa      	str	r2, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d102      	bne.n	80085c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085c4:	e01b      	b.n	80085fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0ef      	beq.n	80085b6 <SDMMC_GetCmdResp3+0x1e>
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1ea      	bne.n	80085b6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2204      	movs	r2, #4
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085f2:	2304      	movs	r3, #4
 80085f4:	e003      	b.n	80085fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	22c5      	movs	r2, #197	; 0xc5
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000048 	.word	0x20000048
 8008610:	10624dd3 	.word	0x10624dd3

08008614 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	460b      	mov	r3, r1
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008622:	4b35      	ldr	r3, [pc, #212]	; (80086f8 <SDMMC_GetCmdResp6+0xe4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a35      	ldr	r2, [pc, #212]	; (80086fc <SDMMC_GetCmdResp6+0xe8>)
 8008628:	fba2 2303 	umull	r2, r3, r2, r3
 800862c:	0a5b      	lsrs	r3, r3, #9
 800862e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008632:	fb02 f303 	mul.w	r3, r2, r3
 8008636:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	1e5a      	subs	r2, r3, #1
 800863c:	61fa      	str	r2, [r7, #28]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d102      	bne.n	8008648 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008642:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008646:	e052      	b.n	80086ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0ef      	beq.n	8008638 <SDMMC_GetCmdResp6+0x24>
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1ea      	bne.n	8008638 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008666:	f003 0304 	and.w	r3, r3, #4
 800866a:	2b00      	cmp	r3, #0
 800866c:	d004      	beq.n	8008678 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2204      	movs	r2, #4
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008674:	2304      	movs	r3, #4
 8008676:	e03a      	b.n	80086ee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800868a:	2301      	movs	r3, #1
 800868c:	e02f      	b.n	80086ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f7ff fb9f 	bl	8007dd2 <SDIO_GetCommandResponse>
 8008694:	4603      	mov	r3, r0
 8008696:	461a      	mov	r2, r3
 8008698:	7afb      	ldrb	r3, [r7, #11]
 800869a:	4293      	cmp	r3, r2
 800869c:	d001      	beq.n	80086a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800869e:	2301      	movs	r3, #1
 80086a0:	e025      	b.n	80086ee <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	22c5      	movs	r2, #197	; 0xc5
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80086a8:	2100      	movs	r1, #0
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff fb9e 	bl	8007dec <SDIO_GetResponse>
 80086b0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d106      	bne.n	80086ca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	0c1b      	lsrs	r3, r3, #16
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	e011      	b.n	80086ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80086d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086d8:	e009      	b.n	80086ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80086e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086e8:	e001      	b.n	80086ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80086ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000048 	.word	0x20000048
 80086fc:	10624dd3 	.word	0x10624dd3

08008700 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008708:	4b22      	ldr	r3, [pc, #136]	; (8008794 <SDMMC_GetCmdResp7+0x94>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a22      	ldr	r2, [pc, #136]	; (8008798 <SDMMC_GetCmdResp7+0x98>)
 800870e:	fba2 2303 	umull	r2, r3, r2, r3
 8008712:	0a5b      	lsrs	r3, r3, #9
 8008714:	f241 3288 	movw	r2, #5000	; 0x1388
 8008718:	fb02 f303 	mul.w	r3, r2, r3
 800871c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	1e5a      	subs	r2, r3, #1
 8008722:	60fa      	str	r2, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d102      	bne.n	800872e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800872c:	e02c      	b.n	8008788 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0ef      	beq.n	800871e <SDMMC_GetCmdResp7+0x1e>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1ea      	bne.n	800871e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2204      	movs	r2, #4
 8008758:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800875a:	2304      	movs	r3, #4
 800875c:	e014      	b.n	8008788 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d004      	beq.n	8008774 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008770:	2301      	movs	r3, #1
 8008772:	e009      	b.n	8008788 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2240      	movs	r2, #64	; 0x40
 8008784:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008786:	2300      	movs	r3, #0
  
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	20000048 	.word	0x20000048
 8008798:	10624dd3 	.word	0x10624dd3

0800879c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800879c:	b084      	sub	sp, #16
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	f107 001c 	add.w	r0, r7, #28
 80087aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d122      	bne.n	80087fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80087c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80087dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d105      	bne.n	80087ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 fac6 	bl	8009d80 <USB_CoreReset>
 80087f4:	4603      	mov	r3, r0
 80087f6:	73fb      	strb	r3, [r7, #15]
 80087f8:	e01a      	b.n	8008830 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 faba 	bl	8009d80 <USB_CoreReset>
 800880c:	4603      	mov	r3, r0
 800880e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d106      	bne.n	8008824 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
 8008822:	e005      	b.n	8008830 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008828:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	2b01      	cmp	r3, #1
 8008834:	d10b      	bne.n	800884e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f043 0206 	orr.w	r2, r3, #6
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f043 0220 	orr.w	r2, r3, #32
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800884e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800885a:	b004      	add	sp, #16
 800885c:	4770      	bx	lr
	...

08008860 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	4613      	mov	r3, r2
 800886c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d165      	bne.n	8008940 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	4a41      	ldr	r2, [pc, #260]	; (800897c <USB_SetTurnaroundTime+0x11c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d906      	bls.n	800888a <USB_SetTurnaroundTime+0x2a>
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4a40      	ldr	r2, [pc, #256]	; (8008980 <USB_SetTurnaroundTime+0x120>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d202      	bcs.n	800888a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008884:	230f      	movs	r3, #15
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e062      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	4a3c      	ldr	r2, [pc, #240]	; (8008980 <USB_SetTurnaroundTime+0x120>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d306      	bcc.n	80088a0 <USB_SetTurnaroundTime+0x40>
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	4a3b      	ldr	r2, [pc, #236]	; (8008984 <USB_SetTurnaroundTime+0x124>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d202      	bcs.n	80088a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800889a:	230e      	movs	r3, #14
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e057      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4a38      	ldr	r2, [pc, #224]	; (8008984 <USB_SetTurnaroundTime+0x124>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d306      	bcc.n	80088b6 <USB_SetTurnaroundTime+0x56>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4a37      	ldr	r2, [pc, #220]	; (8008988 <USB_SetTurnaroundTime+0x128>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d202      	bcs.n	80088b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80088b0:	230d      	movs	r3, #13
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	e04c      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	4a33      	ldr	r2, [pc, #204]	; (8008988 <USB_SetTurnaroundTime+0x128>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d306      	bcc.n	80088cc <USB_SetTurnaroundTime+0x6c>
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4a32      	ldr	r2, [pc, #200]	; (800898c <USB_SetTurnaroundTime+0x12c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d802      	bhi.n	80088cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80088c6:	230c      	movs	r3, #12
 80088c8:	617b      	str	r3, [r7, #20]
 80088ca:	e041      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4a2f      	ldr	r2, [pc, #188]	; (800898c <USB_SetTurnaroundTime+0x12c>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d906      	bls.n	80088e2 <USB_SetTurnaroundTime+0x82>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4a2e      	ldr	r2, [pc, #184]	; (8008990 <USB_SetTurnaroundTime+0x130>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d802      	bhi.n	80088e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80088dc:	230b      	movs	r3, #11
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e036      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	4a2a      	ldr	r2, [pc, #168]	; (8008990 <USB_SetTurnaroundTime+0x130>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d906      	bls.n	80088f8 <USB_SetTurnaroundTime+0x98>
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	4a29      	ldr	r2, [pc, #164]	; (8008994 <USB_SetTurnaroundTime+0x134>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d802      	bhi.n	80088f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80088f2:	230a      	movs	r3, #10
 80088f4:	617b      	str	r3, [r7, #20]
 80088f6:	e02b      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4a26      	ldr	r2, [pc, #152]	; (8008994 <USB_SetTurnaroundTime+0x134>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d906      	bls.n	800890e <USB_SetTurnaroundTime+0xae>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4a25      	ldr	r2, [pc, #148]	; (8008998 <USB_SetTurnaroundTime+0x138>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d202      	bcs.n	800890e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008908:	2309      	movs	r3, #9
 800890a:	617b      	str	r3, [r7, #20]
 800890c:	e020      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	4a21      	ldr	r2, [pc, #132]	; (8008998 <USB_SetTurnaroundTime+0x138>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d306      	bcc.n	8008924 <USB_SetTurnaroundTime+0xc4>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	4a20      	ldr	r2, [pc, #128]	; (800899c <USB_SetTurnaroundTime+0x13c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d802      	bhi.n	8008924 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800891e:	2308      	movs	r3, #8
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	e015      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4a1d      	ldr	r2, [pc, #116]	; (800899c <USB_SetTurnaroundTime+0x13c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d906      	bls.n	800893a <USB_SetTurnaroundTime+0xda>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4a1c      	ldr	r2, [pc, #112]	; (80089a0 <USB_SetTurnaroundTime+0x140>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d202      	bcs.n	800893a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008934:	2307      	movs	r3, #7
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	e00a      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800893a:	2306      	movs	r3, #6
 800893c:	617b      	str	r3, [r7, #20]
 800893e:	e007      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d102      	bne.n	800894c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008946:	2309      	movs	r3, #9
 8008948:	617b      	str	r3, [r7, #20]
 800894a:	e001      	b.n	8008950 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800894c:	2309      	movs	r3, #9
 800894e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	029b      	lsls	r3, r3, #10
 8008964:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008968:	431a      	orrs	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	371c      	adds	r7, #28
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	00d8acbf 	.word	0x00d8acbf
 8008980:	00e4e1c0 	.word	0x00e4e1c0
 8008984:	00f42400 	.word	0x00f42400
 8008988:	01067380 	.word	0x01067380
 800898c:	011a499f 	.word	0x011a499f
 8008990:	01312cff 	.word	0x01312cff
 8008994:	014ca43f 	.word	0x014ca43f
 8008998:	016e3600 	.word	0x016e3600
 800899c:	01a6ab1f 	.word	0x01a6ab1f
 80089a0:	01e84800 	.word	0x01e84800

080089a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f043 0201 	orr.w	r2, r3, #1
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f023 0201 	bic.w	r2, r3, #1
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d106      	bne.n	8008a14 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	60da      	str	r2, [r3, #12]
 8008a12:	e00b      	b.n	8008a2c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d106      	bne.n	8008a28 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	60da      	str	r2, [r3, #12]
 8008a26:	e001      	b.n	8008a2c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e003      	b.n	8008a34 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008a2c:	2032      	movs	r0, #50	; 0x32
 8008a2e:	f7fa fb59 	bl	80030e4 <HAL_Delay>

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b086      	sub	sp, #24
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a56:	2300      	movs	r3, #0
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	e009      	b.n	8008a70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	3340      	adds	r3, #64	; 0x40
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	2200      	movs	r2, #0
 8008a68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	613b      	str	r3, [r7, #16]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	2b0e      	cmp	r3, #14
 8008a74:	d9f2      	bls.n	8008a5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d11c      	bne.n	8008ab6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a8a:	f043 0302 	orr.w	r3, r3, #2
 8008a8e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	639a      	str	r2, [r3, #56]	; 0x38
 8008ab4:	e00b      	b.n	8008ace <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae8:	461a      	mov	r2, r3
 8008aea:	680b      	ldr	r3, [r1, #0]
 8008aec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d10c      	bne.n	8008b0e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008afa:	2100      	movs	r1, #0
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f949 	bl	8008d94 <USB_SetDevSpeed>
 8008b02:	e008      	b.n	8008b16 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b04:	2101      	movs	r1, #1
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f944 	bl	8008d94 <USB_SetDevSpeed>
 8008b0c:	e003      	b.n	8008b16 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b0e:	2103      	movs	r1, #3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f93f 	bl	8008d94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b16:	2110      	movs	r1, #16
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f8f3 	bl	8008d04 <USB_FlushTxFifo>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f911 	bl	8008d50 <USB_FlushRxFifo>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3e:	461a      	mov	r2, r3
 8008b40:	2300      	movs	r3, #0
 8008b42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b56:	461a      	mov	r2, r3
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	613b      	str	r3, [r7, #16]
 8008b60:	e043      	b.n	8008bea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b78:	d118      	bne.n	8008bac <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10a      	bne.n	8008b96 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	e013      	b.n	8008bbe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	e008      	b.n	8008bbe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb8:	461a      	mov	r2, r3
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bca:	461a      	mov	r2, r3
 8008bcc:	2300      	movs	r3, #0
 8008bce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bdc:	461a      	mov	r2, r3
 8008bde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008be2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	3301      	adds	r3, #1
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d3b7      	bcc.n	8008b62 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	613b      	str	r3, [r7, #16]
 8008bf6:	e043      	b.n	8008c80 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c0e:	d118      	bne.n	8008c42 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10a      	bne.n	8008c2c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c22:	461a      	mov	r2, r3
 8008c24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	e013      	b.n	8008c54 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	e008      	b.n	8008c54 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4e:	461a      	mov	r2, r3
 8008c50:	2300      	movs	r3, #0
 8008c52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c60:	461a      	mov	r2, r3
 8008c62:	2300      	movs	r3, #0
 8008c64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c72:	461a      	mov	r2, r3
 8008c74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	613b      	str	r3, [r7, #16]
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d3b7      	bcc.n	8008bf8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ca8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d105      	bne.n	8008cbc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	f043 0210 	orr.w	r2, r3, #16
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	699a      	ldr	r2, [r3, #24]
 8008cc0:	4b0f      	ldr	r3, [pc, #60]	; (8008d00 <USB_DevInit+0x2c4>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f043 0208 	orr.w	r2, r3, #8
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d107      	bne.n	8008cf0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ce8:	f043 0304 	orr.w	r3, r3, #4
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cfc:	b004      	add	sp, #16
 8008cfe:	4770      	bx	lr
 8008d00:	803c3800 	.word	0x803c3800

08008d04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	019b      	lsls	r3, r3, #6
 8008d16:	f043 0220 	orr.w	r2, r3, #32
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3301      	adds	r3, #1
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <USB_FlushTxFifo+0x48>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d901      	bls.n	8008d30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e006      	b.n	8008d3e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	f003 0320 	and.w	r3, r3, #32
 8008d38:	2b20      	cmp	r3, #32
 8008d3a:	d0f0      	beq.n	8008d1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	00030d40 	.word	0x00030d40

08008d50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3301      	adds	r3, #1
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <USB_FlushRxFifo+0x40>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d901      	bls.n	8008d74 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e006      	b.n	8008d82 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f003 0310 	and.w	r3, r3, #16
 8008d7c:	2b10      	cmp	r3, #16
 8008d7e:	d0f0      	beq.n	8008d62 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	00030d40 	.word	0x00030d40

08008d94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	68f9      	ldr	r1, [r7, #12]
 8008db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008db4:	4313      	orrs	r3, r2
 8008db6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b087      	sub	sp, #28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f003 0306 	and.w	r3, r3, #6
 8008dde:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008de6:	2300      	movs	r3, #0
 8008de8:	75fb      	strb	r3, [r7, #23]
 8008dea:	e00a      	b.n	8008e02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d002      	beq.n	8008df8 <USB_GetDevSpeed+0x32>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b06      	cmp	r3, #6
 8008df6:	d102      	bne.n	8008dfe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008df8:	2302      	movs	r3, #2
 8008dfa:	75fb      	strb	r3, [r7, #23]
 8008dfc:	e001      	b.n	8008e02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008dfe:	230f      	movs	r3, #15
 8008e00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	785b      	ldrb	r3, [r3, #1]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d13a      	bne.n	8008ea2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e32:	69da      	ldr	r2, [r3, #28]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	f003 030f 	and.w	r3, r3, #15
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	68f9      	ldr	r1, [r7, #12]
 8008e46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d155      	bne.n	8008f10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	78db      	ldrb	r3, [r3, #3]
 8008e7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	059b      	lsls	r3, r3, #22
 8008e86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	e036      	b.n	8008f10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea8:	69da      	ldr	r2, [r3, #28]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	f003 030f 	and.w	r3, r3, #15
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb8:	041b      	lsls	r3, r3, #16
 8008eba:	68f9      	ldr	r1, [r7, #12]
 8008ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d11a      	bne.n	8008f10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	78db      	ldrb	r3, [r3, #3]
 8008ef4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ef6:	430b      	orrs	r3, r1
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	0151      	lsls	r1, r2, #5
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	440a      	add	r2, r1
 8008f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
	...

08008f20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	785b      	ldrb	r3, [r3, #1]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d161      	bne.n	8009000 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f52:	d11f      	bne.n	8008f94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	0151      	lsls	r1, r2, #5
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	440a      	add	r2, r1
 8008f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	015a      	lsls	r2, r3, #5
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	0151      	lsls	r1, r2, #5
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	440a      	add	r2, r1
 8008f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	f003 030f 	and.w	r3, r3, #15
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	43db      	mvns	r3, r3
 8008fae:	68f9      	ldr	r1, [r7, #12]
 8008fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fbe:	69da      	ldr	r2, [r3, #28]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	f003 030f 	and.w	r3, r3, #15
 8008fc8:	2101      	movs	r1, #1
 8008fca:	fa01 f303 	lsl.w	r3, r1, r3
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	68f9      	ldr	r1, [r7, #12]
 8008fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fd8:	4013      	ands	r3, r2
 8008fda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	0159      	lsls	r1, r3, #5
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	440b      	add	r3, r1
 8008ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4b35      	ldr	r3, [pc, #212]	; (80090d0 <USB_DeactivateEndpoint+0x1b0>)
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	600b      	str	r3, [r1, #0]
 8008ffe:	e060      	b.n	80090c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009016:	d11f      	bne.n	8009058 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009032:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009036:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	440a      	add	r2, r1
 800904e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009056:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	2101      	movs	r1, #1
 800906a:	fa01 f303 	lsl.w	r3, r1, r3
 800906e:	041b      	lsls	r3, r3, #16
 8009070:	43db      	mvns	r3, r3
 8009072:	68f9      	ldr	r1, [r7, #12]
 8009074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009078:	4013      	ands	r3, r2
 800907a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009082:	69da      	ldr	r2, [r3, #28]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	f003 030f 	and.w	r3, r3, #15
 800908c:	2101      	movs	r1, #1
 800908e:	fa01 f303 	lsl.w	r3, r1, r3
 8009092:	041b      	lsls	r3, r3, #16
 8009094:	43db      	mvns	r3, r3
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800909c:	4013      	ands	r3, r2
 800909e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	0159      	lsls	r1, r3, #5
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	440b      	add	r3, r1
 80090b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ba:	4619      	mov	r1, r3
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <USB_DeactivateEndpoint+0x1b4>)
 80090be:	4013      	ands	r3, r2
 80090c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	ec337800 	.word	0xec337800
 80090d4:	eff37800 	.word	0xeff37800

080090d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af02      	add	r7, sp, #8
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	4613      	mov	r3, r2
 80090e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	f040 815c 	bne.w	80093b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d132      	bne.n	8009168 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	69ba      	ldr	r2, [r7, #24]
 8009112:	0151      	lsls	r1, r2, #5
 8009114:	69fa      	ldr	r2, [r7, #28]
 8009116:	440a      	add	r2, r1
 8009118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800911c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009120:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009124:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	0151      	lsls	r1, r2, #5
 8009138:	69fa      	ldr	r2, [r7, #28]
 800913a:	440a      	add	r2, r1
 800913c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009140:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009144:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	0151      	lsls	r1, r2, #5
 8009158:	69fa      	ldr	r2, [r7, #28]
 800915a:	440a      	add	r2, r1
 800915c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009160:	0cdb      	lsrs	r3, r3, #19
 8009162:	04db      	lsls	r3, r3, #19
 8009164:	6113      	str	r3, [r2, #16]
 8009166:	e074      	b.n	8009252 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	69ba      	ldr	r2, [r7, #24]
 8009178:	0151      	lsls	r1, r2, #5
 800917a:	69fa      	ldr	r2, [r7, #28]
 800917c:	440a      	add	r2, r1
 800917e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009182:	0cdb      	lsrs	r3, r3, #19
 8009184:	04db      	lsls	r3, r3, #19
 8009186:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	0151      	lsls	r1, r2, #5
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	440a      	add	r2, r1
 800919e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b8:	691a      	ldr	r2, [r3, #16]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6959      	ldr	r1, [r3, #20]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	440b      	add	r3, r1
 80091c4:	1e59      	subs	r1, r3, #1
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80091ce:	04d9      	lsls	r1, r3, #19
 80091d0:	4b9d      	ldr	r3, [pc, #628]	; (8009448 <USB_EPStartXfer+0x370>)
 80091d2:	400b      	ands	r3, r1
 80091d4:	69b9      	ldr	r1, [r7, #24]
 80091d6:	0148      	lsls	r0, r1, #5
 80091d8:	69f9      	ldr	r1, [r7, #28]
 80091da:	4401      	add	r1, r0
 80091dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091e0:	4313      	orrs	r3, r2
 80091e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f0:	691a      	ldr	r2, [r3, #16]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091fa:	69b9      	ldr	r1, [r7, #24]
 80091fc:	0148      	lsls	r0, r1, #5
 80091fe:	69f9      	ldr	r1, [r7, #28]
 8009200:	4401      	add	r1, r0
 8009202:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009206:	4313      	orrs	r3, r2
 8009208:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	78db      	ldrb	r3, [r3, #3]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d11f      	bne.n	8009252 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	0151      	lsls	r1, r2, #5
 8009224:	69fa      	ldr	r2, [r7, #28]
 8009226:	440a      	add	r2, r1
 8009228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800922c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009230:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	4413      	add	r3, r2
 800923a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	0151      	lsls	r1, r2, #5
 8009244:	69fa      	ldr	r2, [r7, #28]
 8009246:	440a      	add	r2, r1
 8009248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800924c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009250:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d14b      	bne.n	80092f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d009      	beq.n	8009274 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	461a      	mov	r2, r3
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	78db      	ldrb	r3, [r3, #3]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d128      	bne.n	80092ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009288:	2b00      	cmp	r3, #0
 800928a:	d110      	bne.n	80092ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	0151      	lsls	r1, r2, #5
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	440a      	add	r2, r1
 80092a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	e00f      	b.n	80092ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	0151      	lsls	r1, r2, #5
 80092c0:	69fa      	ldr	r2, [r7, #28]
 80092c2:	440a      	add	r2, r1
 80092c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	0151      	lsls	r1, r2, #5
 80092e0:	69fa      	ldr	r2, [r7, #28]
 80092e2:	440a      	add	r2, r1
 80092e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	e12f      	b.n	8009550 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	0151      	lsls	r1, r2, #5
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	440a      	add	r2, r1
 8009306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800930a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800930e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	78db      	ldrb	r3, [r3, #3]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d015      	beq.n	8009344 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 8117 	beq.w	8009550 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	f003 030f 	and.w	r3, r3, #15
 8009332:	2101      	movs	r1, #1
 8009334:	fa01 f303 	lsl.w	r3, r1, r3
 8009338:	69f9      	ldr	r1, [r7, #28]
 800933a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800933e:	4313      	orrs	r3, r2
 8009340:	634b      	str	r3, [r1, #52]	; 0x34
 8009342:	e105      	b.n	8009550 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009350:	2b00      	cmp	r3, #0
 8009352:	d110      	bne.n	8009376 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	0151      	lsls	r1, r2, #5
 8009366:	69fa      	ldr	r2, [r7, #28]
 8009368:	440a      	add	r2, r1
 800936a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800936e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	e00f      	b.n	8009396 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	69fa      	ldr	r2, [r7, #28]
 800938a:	440a      	add	r2, r1
 800938c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009394:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	68d9      	ldr	r1, [r3, #12]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	781a      	ldrb	r2, [r3, #0]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	b298      	uxth	r0, r3
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	4603      	mov	r3, r0
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 fa2b 	bl	8009806 <USB_WritePacket>
 80093b0:	e0ce      	b.n	8009550 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	0151      	lsls	r1, r2, #5
 80093c4:	69fa      	ldr	r2, [r7, #28]
 80093c6:	440a      	add	r2, r1
 80093c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093cc:	0cdb      	lsrs	r3, r3, #19
 80093ce:	04db      	lsls	r3, r3, #19
 80093d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	0151      	lsls	r1, r2, #5
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	440a      	add	r2, r1
 80093e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d126      	bne.n	800944c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	4413      	add	r3, r2
 8009406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940a:	691a      	ldr	r2, [r3, #16]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009414:	69b9      	ldr	r1, [r7, #24]
 8009416:	0148      	lsls	r0, r1, #5
 8009418:	69f9      	ldr	r1, [r7, #28]
 800941a:	4401      	add	r1, r0
 800941c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009420:	4313      	orrs	r3, r2
 8009422:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	0151      	lsls	r1, r2, #5
 8009436:	69fa      	ldr	r2, [r7, #28]
 8009438:	440a      	add	r2, r1
 800943a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800943e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009442:	6113      	str	r3, [r2, #16]
 8009444:	e036      	b.n	80094b4 <USB_EPStartXfer+0x3dc>
 8009446:	bf00      	nop
 8009448:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	695a      	ldr	r2, [r3, #20]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	4413      	add	r3, r2
 8009456:	1e5a      	subs	r2, r3, #1
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009460:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	4413      	add	r3, r2
 800946a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946e:	691a      	ldr	r2, [r3, #16]
 8009470:	8afb      	ldrh	r3, [r7, #22]
 8009472:	04d9      	lsls	r1, r3, #19
 8009474:	4b39      	ldr	r3, [pc, #228]	; (800955c <USB_EPStartXfer+0x484>)
 8009476:	400b      	ands	r3, r1
 8009478:	69b9      	ldr	r1, [r7, #24]
 800947a:	0148      	lsls	r0, r1, #5
 800947c:	69f9      	ldr	r1, [r7, #28]
 800947e:	4401      	add	r1, r0
 8009480:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009484:	4313      	orrs	r3, r2
 8009486:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009494:	691a      	ldr	r2, [r3, #16]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	8af9      	ldrh	r1, [r7, #22]
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094a4:	69b9      	ldr	r1, [r7, #24]
 80094a6:	0148      	lsls	r0, r1, #5
 80094a8:	69f9      	ldr	r1, [r7, #28]
 80094aa:	4401      	add	r1, r0
 80094ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094b0:	4313      	orrs	r3, r2
 80094b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d10d      	bne.n	80094d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	68d9      	ldr	r1, [r3, #12]
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d2:	460a      	mov	r2, r1
 80094d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	78db      	ldrb	r3, [r3, #3]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d128      	bne.n	8009530 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d110      	bne.n	8009510 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	015a      	lsls	r2, r3, #5
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	0151      	lsls	r1, r2, #5
 8009500:	69fa      	ldr	r2, [r7, #28]
 8009502:	440a      	add	r2, r1
 8009504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009508:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	e00f      	b.n	8009530 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	0151      	lsls	r1, r2, #5
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	440a      	add	r2, r1
 8009526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800952a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800952e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	0151      	lsls	r1, r2, #5
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	440a      	add	r2, r1
 8009546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800954a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800954e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3720      	adds	r7, #32
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	1ff80000 	.word	0x1ff80000

08009560 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009560:	b480      	push	{r7}
 8009562:	b087      	sub	sp, #28
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	785b      	ldrb	r3, [r3, #1]
 800957c:	2b01      	cmp	r3, #1
 800957e:	f040 80cd 	bne.w	800971c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d132      	bne.n	80095f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	4413      	add	r3, r2
 8009592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	0151      	lsls	r1, r2, #5
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	440a      	add	r2, r1
 80095a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e8:	0cdb      	lsrs	r3, r3, #19
 80095ea:	04db      	lsls	r3, r3, #19
 80095ec:	6113      	str	r3, [r2, #16]
 80095ee:	e04e      	b.n	800968e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	0151      	lsls	r1, r2, #5
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	440a      	add	r2, r1
 8009606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800960a:	0cdb      	lsrs	r3, r3, #19
 800960c:	04db      	lsls	r3, r3, #19
 800960e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	0151      	lsls	r1, r2, #5
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	440a      	add	r2, r1
 8009626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800962a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800962e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009632:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	695a      	ldr	r2, [r3, #20]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	429a      	cmp	r2, r3
 800963e:	d903      	bls.n	8009648 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	0151      	lsls	r1, r2, #5
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	440a      	add	r2, r1
 800965e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009674:	691a      	ldr	r2, [r3, #16]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800967e:	6939      	ldr	r1, [r7, #16]
 8009680:	0148      	lsls	r0, r1, #5
 8009682:	6979      	ldr	r1, [r7, #20]
 8009684:	4401      	add	r1, r0
 8009686:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800968a:	4313      	orrs	r3, r2
 800968c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d11e      	bne.n	80096d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d009      	beq.n	80096b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a8:	461a      	mov	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	e092      	b.n	80097f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d07e      	beq.n	80097f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	f003 030f 	and.w	r3, r3, #15
 800970a:	2101      	movs	r1, #1
 800970c:	fa01 f303 	lsl.w	r3, r1, r3
 8009710:	6979      	ldr	r1, [r7, #20]
 8009712:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009716:	4313      	orrs	r3, r2
 8009718:	634b      	str	r3, [r1, #52]	; 0x34
 800971a:	e06d      	b.n	80097f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	0151      	lsls	r1, r2, #5
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	440a      	add	r2, r1
 8009732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009736:	0cdb      	lsrs	r3, r3, #19
 8009738:	04db      	lsls	r3, r3, #19
 800973a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	015a      	lsls	r2, r3, #5
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	4413      	add	r3, r2
 8009744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	0151      	lsls	r1, r2, #5
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	440a      	add	r2, r1
 8009752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009756:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800975a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800975e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	0151      	lsls	r1, r2, #5
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	440a      	add	r2, r1
 8009786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800978a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800978e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979c:	691a      	ldr	r2, [r3, #16]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097a6:	6939      	ldr	r1, [r7, #16]
 80097a8:	0148      	lsls	r0, r1, #5
 80097aa:	6979      	ldr	r1, [r7, #20]
 80097ac:	4401      	add	r1, r0
 80097ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097b2:	4313      	orrs	r3, r2
 80097b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80097b6:	79fb      	ldrb	r3, [r7, #7]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d10d      	bne.n	80097d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d009      	beq.n	80097d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	68d9      	ldr	r1, [r3, #12]
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d4:	460a      	mov	r2, r1
 80097d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	0151      	lsls	r1, r2, #5
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	440a      	add	r2, r1
 80097ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009806:	b480      	push	{r7}
 8009808:	b089      	sub	sp, #36	; 0x24
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	4611      	mov	r1, r2
 8009812:	461a      	mov	r2, r3
 8009814:	460b      	mov	r3, r1
 8009816:	71fb      	strb	r3, [r7, #7]
 8009818:	4613      	mov	r3, r2
 800981a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009824:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009828:	2b00      	cmp	r3, #0
 800982a:	d11a      	bne.n	8009862 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800982c:	88bb      	ldrh	r3, [r7, #4]
 800982e:	3303      	adds	r3, #3
 8009830:	089b      	lsrs	r3, r3, #2
 8009832:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009834:	2300      	movs	r3, #0
 8009836:	61bb      	str	r3, [r7, #24]
 8009838:	e00f      	b.n	800985a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	031a      	lsls	r2, r3, #12
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	4413      	add	r3, r2
 8009842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009846:	461a      	mov	r2, r3
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	3304      	adds	r3, #4
 8009852:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	3301      	adds	r3, #1
 8009858:	61bb      	str	r3, [r7, #24]
 800985a:	69ba      	ldr	r2, [r7, #24]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	429a      	cmp	r2, r3
 8009860:	d3eb      	bcc.n	800983a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3724      	adds	r7, #36	; 0x24
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009870:	b480      	push	{r7}
 8009872:	b089      	sub	sp, #36	; 0x24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	4613      	mov	r3, r2
 800987c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	3303      	adds	r3, #3
 800988a:	089b      	lsrs	r3, r3, #2
 800988c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800988e:	2300      	movs	r3, #0
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	e00b      	b.n	80098ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	601a      	str	r2, [r3, #0]
    pDest++;
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	3304      	adds	r3, #4
 80098a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	3301      	adds	r3, #1
 80098aa:	61bb      	str	r3, [r7, #24]
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d3ef      	bcc.n	8009894 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80098b4:	69fb      	ldr	r3, [r7, #28]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3724      	adds	r7, #36	; 0x24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b085      	sub	sp, #20
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d12c      	bne.n	8009938 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	db12      	blt.n	8009916 <USB_EPSetStall+0x54>
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00f      	beq.n	8009916 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	0151      	lsls	r1, r2, #5
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	440a      	add	r2, r1
 800990c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009910:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009914:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	0151      	lsls	r1, r2, #5
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	440a      	add	r2, r1
 800992c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	e02b      	b.n	8009990 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	db12      	blt.n	8009970 <USB_EPSetStall+0xae>
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00f      	beq.n	8009970 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4413      	add	r3, r2
 8009958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	0151      	lsls	r1, r2, #5
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	440a      	add	r2, r1
 8009966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800996a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800996e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	015a      	lsls	r2, r3, #5
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	4413      	add	r3, r2
 8009978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	0151      	lsls	r1, r2, #5
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	440a      	add	r2, r1
 8009986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800998a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800998e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800999e:	b480      	push	{r7}
 80099a0:	b085      	sub	sp, #20
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	785b      	ldrb	r3, [r3, #1]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d128      	bne.n	8009a0c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	0151      	lsls	r1, r2, #5
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	440a      	add	r2, r1
 80099d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	78db      	ldrb	r3, [r3, #3]
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d003      	beq.n	80099ea <USB_EPClearStall+0x4c>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	78db      	ldrb	r3, [r3, #3]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d138      	bne.n	8009a5c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	0151      	lsls	r1, r2, #5
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	440a      	add	r2, r1
 8009a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	e027      	b.n	8009a5c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	0151      	lsls	r1, r2, #5
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	440a      	add	r2, r1
 8009a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	78db      	ldrb	r3, [r3, #3]
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d003      	beq.n	8009a3c <USB_EPClearStall+0x9e>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	78db      	ldrb	r3, [r3, #3]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d10f      	bne.n	8009a5c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	0151      	lsls	r1, r2, #5
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	440a      	add	r2, r1
 8009a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a5a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b085      	sub	sp, #20
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	460b      	mov	r3, r1
 8009a74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009a8c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	78fb      	ldrb	r3, [r7, #3]
 8009a98:	011b      	lsls	r3, r3, #4
 8009a9a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009a9e:	68f9      	ldr	r1, [r7, #12]
 8009aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b085      	sub	sp, #20
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ad0:	f023 0303 	bic.w	r3, r3, #3
 8009ad4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ae4:	f023 0302 	bic.w	r3, r3, #2
 8009ae8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b12:	f023 0303 	bic.w	r3, r3, #3
 8009b16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b26:	f043 0302 	orr.w	r3, r3, #2
 8009b2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	4013      	ands	r3, r2
 8009b50:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009b52:	68fb      	ldr	r3, [r7, #12]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	4013      	ands	r3, r2
 8009b82:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	0c1b      	lsrs	r3, r3, #16
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	b29b      	uxth	r3, r3
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c26:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	f003 030f 	and.w	r3, r3, #15
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	fa22 f303 	lsr.w	r3, r2, r3
 8009c34:	01db      	lsls	r3, r3, #7
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009c3e:	78fb      	ldrb	r3, [r7, #3]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	4013      	ands	r3, r2
 8009c50:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c52:	68bb      	ldr	r3, [r7, #8]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	371c      	adds	r7, #28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	f003 0301 	and.w	r3, r3, #1
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009c9a:	f023 0307 	bic.w	r3, r3, #7
 8009c9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
	...

08009cc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	607a      	str	r2, [r7, #4]
 8009cd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	333c      	adds	r3, #60	; 0x3c
 8009cda:	3304      	adds	r3, #4
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	4a26      	ldr	r2, [pc, #152]	; (8009d7c <USB_EP0_OutStart+0xb8>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d90a      	bls.n	8009cfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cf8:	d101      	bne.n	8009cfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e037      	b.n	8009d6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d04:	461a      	mov	r2, r3
 8009d06:	2300      	movs	r3, #0
 8009d08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d2c:	f043 0318 	orr.w	r3, r3, #24
 8009d30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009d44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009d46:	7afb      	ldrb	r3, [r7, #11]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d10f      	bne.n	8009d6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d52:	461a      	mov	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009d6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	4f54300a 	.word	0x4f54300a

08009d80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4a13      	ldr	r2, [pc, #76]	; (8009de4 <USB_CoreReset+0x64>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d901      	bls.n	8009d9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e01b      	b.n	8009dd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	daf2      	bge.n	8009d8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	f043 0201 	orr.w	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	3301      	adds	r3, #1
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4a09      	ldr	r2, [pc, #36]	; (8009de4 <USB_CoreReset+0x64>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d901      	bls.n	8009dc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e006      	b.n	8009dd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d0f0      	beq.n	8009db6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	00030d40 	.word	0x00030d40

08009de8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009dec:	4904      	ldr	r1, [pc, #16]	; (8009e00 <MX_FATFS_Init+0x18>)
 8009dee:	4805      	ldr	r0, [pc, #20]	; (8009e04 <MX_FATFS_Init+0x1c>)
 8009df0:	f004 fd00 	bl	800e7f4 <FATFS_LinkDriver>
 8009df4:	4603      	mov	r3, r0
 8009df6:	461a      	mov	r2, r3
 8009df8:	4b03      	ldr	r3, [pc, #12]	; (8009e08 <MX_FATFS_Init+0x20>)
 8009dfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009dfc:	bf00      	nop
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	20002788 	.word	0x20002788
 8009e04:	08014ec8 	.word	0x08014ec8
 8009e08:	20002784 	.word	0x20002784

08009e0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009e10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009e26:	f000 f879 	bl	8009f1c <BSP_SD_IsDetected>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d001      	beq.n	8009e34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e012      	b.n	8009e5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009e34:	480b      	ldr	r0, [pc, #44]	; (8009e64 <BSP_SD_Init+0x48>)
 8009e36:	f7fc fdb4 	bl	80069a2 <HAL_SD_Init>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009e3e:	79fb      	ldrb	r3, [r7, #7]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d109      	bne.n	8009e58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009e44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e48:	4806      	ldr	r0, [pc, #24]	; (8009e64 <BSP_SD_Init+0x48>)
 8009e4a:	f7fd fb8d 	bl	8007568 <HAL_SD_ConfigWideBusOperation>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009e58:	79fb      	ldrb	r3, [r7, #7]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	200026fc 	.word	0x200026fc

08009e68 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af02      	add	r7, sp, #8
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	68f9      	ldr	r1, [r7, #12]
 8009e84:	4806      	ldr	r0, [pc, #24]	; (8009ea0 <BSP_SD_ReadBlocks+0x38>)
 8009e86:	f7fc fe3b 	bl	8006b00 <HAL_SD_ReadBlocks>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	200026fc 	.word	0x200026fc

08009ea4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b088      	sub	sp, #32
 8009ea8:	af02      	add	r7, sp, #8
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
 8009eb0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	68f9      	ldr	r1, [r7, #12]
 8009ec0:	4806      	ldr	r0, [pc, #24]	; (8009edc <BSP_SD_WriteBlocks+0x38>)
 8009ec2:	f7fc fffb 	bl	8006ebc <HAL_SD_WriteBlocks>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	200026fc 	.word	0x200026fc

08009ee0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009ee4:	4805      	ldr	r0, [pc, #20]	; (8009efc <BSP_SD_GetCardState+0x1c>)
 8009ee6:	f7fd fbd9 	bl	800769c <HAL_SD_GetCardState>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	bf14      	ite	ne
 8009ef0:	2301      	movne	r3, #1
 8009ef2:	2300      	moveq	r3, #0
 8009ef4:	b2db      	uxtb	r3, r3
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	200026fc 	.word	0x200026fc

08009f00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	4803      	ldr	r0, [pc, #12]	; (8009f18 <BSP_SD_GetCardInfo+0x18>)
 8009f0c:	f7fd fb00 	bl	8007510 <HAL_SD_GetCardInfo>
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	200026fc 	.word	0x200026fc

08009f1c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009f22:	2301      	movs	r3, #1
 8009f24:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009f26:	f000 f80b 	bl	8009f40 <BSP_PlatformIsDetected>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009f30:	2300      	movs	r3, #0
 8009f32:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	b2db      	uxtb	r3, r3
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009f46:	2301      	movs	r3, #1
 8009f48:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f4e:	4807      	ldr	r0, [pc, #28]	; (8009f6c <BSP_PlatformIsDetected+0x2c>)
 8009f50:	f7f9 ff74 	bl	8003e3c <HAL_GPIO_ReadPin>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */
    return status;
 8009f62:	79fb      	ldrb	r3, [r7, #7]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	40020800 	.word	0x40020800

08009f70 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	4603      	mov	r3, r0
 8009f78:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009f7a:	4b0b      	ldr	r3, [pc, #44]	; (8009fa8 <SD_CheckStatus+0x38>)
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009f80:	f7ff ffae 	bl	8009ee0 <BSP_SD_GetCardState>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d107      	bne.n	8009f9a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009f8a:	4b07      	ldr	r3, [pc, #28]	; (8009fa8 <SD_CheckStatus+0x38>)
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	f023 0301 	bic.w	r3, r3, #1
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	4b04      	ldr	r3, [pc, #16]	; (8009fa8 <SD_CheckStatus+0x38>)
 8009f98:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009f9a:	4b03      	ldr	r3, [pc, #12]	; (8009fa8 <SD_CheckStatus+0x38>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	b2db      	uxtb	r3, r3
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	20000051 	.word	0x20000051

08009fac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009fb6:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <SD_initialize+0x38>)
 8009fb8:	2201      	movs	r2, #1
 8009fba:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009fbc:	f7ff ff2e 	bl	8009e1c <BSP_SD_Init>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d107      	bne.n	8009fd6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff ffd1 	bl	8009f70 <SD_CheckStatus>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4b04      	ldr	r3, [pc, #16]	; (8009fe4 <SD_initialize+0x38>)
 8009fd4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009fd6:	4b03      	ldr	r3, [pc, #12]	; (8009fe4 <SD_initialize+0x38>)
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	b2db      	uxtb	r3, r3
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20000051 	.word	0x20000051

08009fe8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	4603      	mov	r3, r0
 8009ff0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7ff ffbb 	bl	8009f70 <SD_CheckStatus>
 8009ffa:	4603      	mov	r3, r0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	4603      	mov	r3, r0
 800a012:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a018:	f04f 33ff 	mov.w	r3, #4294967295
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	68b8      	ldr	r0, [r7, #8]
 800a022:	f7ff ff21 	bl	8009e68 <BSP_SD_ReadBlocks>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d107      	bne.n	800a03c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a02c:	bf00      	nop
 800a02e:	f7ff ff57 	bl	8009ee0 <BSP_SD_GetCardState>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1fa      	bne.n	800a02e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b086      	sub	sp, #24
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
 800a052:	4603      	mov	r3, r0
 800a054:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a05a:	f04f 33ff 	mov.w	r3, #4294967295
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	68b8      	ldr	r0, [r7, #8]
 800a064:	f7ff ff1e 	bl	8009ea4 <BSP_SD_WriteBlocks>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d107      	bne.n	800a07e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a06e:	bf00      	nop
 800a070:	f7ff ff36 	bl	8009ee0 <BSP_SD_GetCardState>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1fa      	bne.n	800a070 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08c      	sub	sp, #48	; 0x30
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	603a      	str	r2, [r7, #0]
 800a092:	71fb      	strb	r3, [r7, #7]
 800a094:	460b      	mov	r3, r1
 800a096:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a09e:	4b25      	ldr	r3, [pc, #148]	; (800a134 <SD_ioctl+0xac>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f003 0301 	and.w	r3, r3, #1
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <SD_ioctl+0x28>
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e03c      	b.n	800a12a <SD_ioctl+0xa2>

  switch (cmd)
 800a0b0:	79bb      	ldrb	r3, [r7, #6]
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d834      	bhi.n	800a120 <SD_ioctl+0x98>
 800a0b6:	a201      	add	r2, pc, #4	; (adr r2, 800a0bc <SD_ioctl+0x34>)
 800a0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0bc:	0800a0cd 	.word	0x0800a0cd
 800a0c0:	0800a0d5 	.word	0x0800a0d5
 800a0c4:	0800a0ed 	.word	0x0800a0ed
 800a0c8:	0800a107 	.word	0x0800a107
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0d2:	e028      	b.n	800a126 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0d4:	f107 030c 	add.w	r3, r7, #12
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff ff11 	bl	8009f00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a0de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0ea:	e01c      	b.n	800a126 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0ec:	f107 030c 	add.w	r3, r7, #12
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff ff05 	bl	8009f00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a104:	e00f      	b.n	800a126 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a106:	f107 030c 	add.w	r3, r7, #12
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7ff fef8 	bl	8009f00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	0a5a      	lsrs	r2, r3, #9
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a11e:	e002      	b.n	800a126 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a120:	2304      	movs	r3, #4
 800a122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3730      	adds	r7, #48	; 0x30
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000051 	.word	0x20000051

0800a138 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 800a144:	2044      	movs	r0, #68	; 0x44
 800a146:	f005 f883 	bl	800f250 <USBD_static_malloc>
 800a14a:	4602      	mov	r2, r0
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e016      	b.n	800a18e <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a166:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 800a168:	2340      	movs	r3, #64	; 0x40
 800a16a:	2202      	movs	r2, #2
 800a16c:	2181      	movs	r1, #129	; 0x81
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f004 ff4b 	bl	800f00a <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 800a174:	2340      	movs	r3, #64	; 0x40
 800a176:	2202      	movs	r2, #2
 800a178:	2101      	movs	r1, #1
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f004 ff45 	bl	800f00a <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 800a180:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 800a182:	2340      	movs	r3, #64	; 0x40
 800a184:	2101      	movs	r1, #1
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f005 f82e 	bl	800f1e8 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a18c:	2300      	movs	r3, #0
  }
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 800a1a2:	2181      	movs	r1, #129	; 0x81
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f004 ff56 	bl	800f056 <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f004 ff52 	bl	800f056 <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d007      	beq.n	800a1e2 <USBD_Midi_Setup+0x26>
 800a1d2:	2b20      	cmp	r3, #32
 800a1d4:	d10b      	bne.n	800a1ee <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f001 f937 	bl	800b44c <USBD_CtlError>
      return USBD_FAIL;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e006      	b.n	800a1f0 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 f931 	bl	800b44c <USBD_CtlError>
      return USBD_FAIL;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e000      	b.n	800a1f0 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2265      	movs	r2, #101	; 0x65
 800a204:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 800a206:	4b03      	ldr	r3, [pc, #12]	; (800a214 <USBD_Midi_GetCfgDesc+0x1c>)
}
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	2000008c 	.word	0x2000008c

0800a218 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a232:	b480      	push	{r7}
 800a234:	b083      	sub	sp, #12
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 800a25e:	b480      	push	{r7}
 800a260:	b083      	sub	sp, #12
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	460b      	mov	r3, r1
 800a298:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2ba:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f004 ffb2 	bl	800f22a <USBD_LL_GetRxDataSize>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	e00c      	b.n	800a2f0 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68f9      	ldr	r1, [r7, #12]
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	440a      	add	r2, r1
 800a2e4:	2104      	movs	r1, #4
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	617b      	str	r3, [r7, #20]
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d3ed      	bcc.n	800a2d6 <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 800a2fa:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 800a2fc:	2340      	movs	r3, #64	; 0x40
 800a2fe:	2101      	movs	r1, #1
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f004 ff71 	bl	800f1e8 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	220a      	movs	r2, #10
 800a31c:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 800a31e:	4b03      	ldr	r3, [pc, #12]	; (800a32c <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	200000f4 	.word	0x200000f4

0800a330 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a33a:	2303      	movs	r3, #3
 800a33c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a350:	7bfb      	ldrb	r3, [r7, #15]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b086      	sub	sp, #24
 800a362:	af00      	add	r7, sp, #0
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	4613      	mov	r3, r2
 800a36a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d101      	bne.n	800a376 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a372:	2303      	movs	r3, #3
 800a374:	e01f      	b.n	800a3b6 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	79fa      	ldrb	r2, [r7, #7]
 800a3a8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f004 fdc6 	bl	800ef3c <USBD_LL_Init>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
 800a3c6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d101      	bne.n	800a3d6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e016      	b.n	800a404 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00b      	beq.n	800a402 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f2:	f107 020e 	add.w	r2, r7, #14
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	4798      	blx	r3
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f004 fddd 	bl	800efd4 <USBD_LL_Start>
 800a41a:	4603      	mov	r3, r0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b084      	sub	sp, #16
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	460b      	mov	r3, r1
 800a444:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a446:	2303      	movs	r3, #3
 800a448:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a450:	2b00      	cmp	r3, #0
 800a452:	d009      	beq.n	800a468 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	78fa      	ldrb	r2, [r7, #3]
 800a45e:	4611      	mov	r1, r2
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	4798      	blx	r3
 800a464:	4603      	mov	r3, r0
 800a466:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a468:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	460b      	mov	r3, r1
 800a47c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a484:	2b00      	cmp	r3, #0
 800a486:	d007      	beq.n	800a498 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	78fa      	ldrb	r2, [r7, #3]
 800a492:	4611      	mov	r1, r2
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	4798      	blx	r3
  }

  return USBD_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 ff8f 	bl	800b3d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4d6:	f003 031f 	and.w	r3, r3, #31
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d01a      	beq.n	800a514 <USBD_LL_SetupStage+0x72>
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d822      	bhi.n	800a528 <USBD_LL_SetupStage+0x86>
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d002      	beq.n	800a4ec <USBD_LL_SetupStage+0x4a>
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d00a      	beq.n	800a500 <USBD_LL_SetupStage+0x5e>
 800a4ea:	e01d      	b.n	800a528 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fa61 	bl	800a9bc <USBD_StdDevReq>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fe:	e020      	b.n	800a542 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fac5 	bl	800aa98 <USBD_StdItfReq>
 800a50e:	4603      	mov	r3, r0
 800a510:	73fb      	strb	r3, [r7, #15]
      break;
 800a512:	e016      	b.n	800a542 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fb04 	bl	800ab2a <USBD_StdEPReq>
 800a522:	4603      	mov	r3, r0
 800a524:	73fb      	strb	r3, [r7, #15]
      break;
 800a526:	e00c      	b.n	800a542 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a52e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a532:	b2db      	uxtb	r3, r3
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f004 fdac 	bl	800f094 <USBD_LL_StallEP>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]
      break;
 800a540:	bf00      	nop
  }

  return ret;
 800a542:	7bfb      	ldrb	r3, [r7, #15]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	460b      	mov	r3, r1
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a55a:	7afb      	ldrb	r3, [r7, #11]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d138      	bne.n	800a5d2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a566:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d14a      	bne.n	800a608 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d913      	bls.n	800a5a6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	689a      	ldr	r2, [r3, #8]
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	1ad2      	subs	r2, r2, r3
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	4293      	cmp	r3, r2
 800a596:	bf28      	it	cs
 800a598:	4613      	movcs	r3, r2
 800a59a:	461a      	mov	r2, r3
 800a59c:	6879      	ldr	r1, [r7, #4]
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f000 fff1 	bl	800b586 <USBD_CtlContinueRx>
 800a5a4:	e030      	b.n	800a608 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d10b      	bne.n	800a5ca <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d005      	beq.n	800a5ca <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f000 ffec 	bl	800b5a8 <USBD_CtlSendStatus>
 800a5d0:	e01a      	b.n	800a608 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b03      	cmp	r3, #3
 800a5dc:	d114      	bne.n	800a608 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00e      	beq.n	800a608 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	7afa      	ldrb	r2, [r7, #11]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	4798      	blx	r3
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a604:	7dfb      	ldrb	r3, [r7, #23]
 800a606:	e000      	b.n	800a60a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b086      	sub	sp, #24
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	460b      	mov	r3, r1
 800a61c:	607a      	str	r2, [r7, #4]
 800a61e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a620:	7afb      	ldrb	r3, [r7, #11]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d16b      	bne.n	800a6fe <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3314      	adds	r3, #20
 800a62a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a632:	2b02      	cmp	r3, #2
 800a634:	d156      	bne.n	800a6e4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	689a      	ldr	r2, [r3, #8]
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d914      	bls.n	800a66c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	689a      	ldr	r2, [r3, #8]
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	1ad2      	subs	r2, r2, r3
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	461a      	mov	r2, r3
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 ff83 	bl	800b564 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a65e:	2300      	movs	r3, #0
 800a660:	2200      	movs	r2, #0
 800a662:	2100      	movs	r1, #0
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f004 fdbf 	bl	800f1e8 <USBD_LL_PrepareReceive>
 800a66a:	e03b      	b.n	800a6e4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	429a      	cmp	r2, r3
 800a676:	d11c      	bne.n	800a6b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a680:	429a      	cmp	r2, r3
 800a682:	d316      	bcc.n	800a6b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a68e:	429a      	cmp	r2, r3
 800a690:	d20f      	bcs.n	800a6b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a692:	2200      	movs	r2, #0
 800a694:	2100      	movs	r1, #0
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 ff64 	bl	800b564 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f004 fd9c 	bl	800f1e8 <USBD_LL_PrepareReceive>
 800a6b0:	e018      	b.n	800a6e4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d10b      	bne.n	800a6d6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d005      	beq.n	800a6d6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6d6:	2180      	movs	r1, #128	; 0x80
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f004 fcdb 	bl	800f094 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f000 ff75 	bl	800b5ce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d122      	bne.n	800a734 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f7ff fe98 	bl	800a424 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a6fc:	e01a      	b.n	800a734 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b03      	cmp	r3, #3
 800a708:	d114      	bne.n	800a734 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00e      	beq.n	800a734 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	7afa      	ldrb	r2, [r7, #11]
 800a720:	4611      	mov	r1, r2
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	4798      	blx	r3
 800a726:	4603      	mov	r3, r0
 800a728:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a730:	7dfb      	ldrb	r3, [r7, #23]
 800a732:	e000      	b.n	800a736 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b082      	sub	sp, #8
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a76e:	2303      	movs	r3, #3
 800a770:	e02f      	b.n	800a7d2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00f      	beq.n	800a79c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d009      	beq.n	800a79c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	6852      	ldr	r2, [r2, #4]
 800a794:	b2d2      	uxtb	r2, r2
 800a796:	4611      	mov	r1, r2
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a79c:	2340      	movs	r3, #64	; 0x40
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f004 fc31 	bl	800f00a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2240      	movs	r2, #64	; 0x40
 800a7b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7b8:	2340      	movs	r3, #64	; 0x40
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2180      	movs	r1, #128	; 0x80
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f004 fc23 	bl	800f00a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2240      	movs	r2, #64	; 0x40
 800a7ce:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	78fa      	ldrb	r2, [r7, #3]
 800a7ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2204      	movs	r2, #4
 800a814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a826:	b480      	push	{r7}
 800a828:	b083      	sub	sp, #12
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b04      	cmp	r3, #4
 800a838:	d106      	bne.n	800a848 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a840:	b2da      	uxtb	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b082      	sub	sp, #8
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a864:	2b00      	cmp	r3, #0
 800a866:	d101      	bne.n	800a86c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a868:	2303      	movs	r3, #3
 800a86a:	e012      	b.n	800a892 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b03      	cmp	r3, #3
 800a876:	d10b      	bne.n	800a890 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87e:	69db      	ldr	r3, [r3, #28]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d005      	beq.n	800a890 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e014      	b.n	800a8de <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	d10d      	bne.n	800a8dc <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c6:	6a1b      	ldr	r3, [r3, #32]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d007      	beq.n	800a8dc <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8d2:	6a1b      	ldr	r3, [r3, #32]
 800a8d4:	78fa      	ldrb	r2, [r7, #3]
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e014      	b.n	800a92a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b03      	cmp	r3, #3
 800a90a:	d10d      	bne.n	800a928 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a920:	78fa      	ldrb	r2, [r7, #3]
 800a922:	4611      	mov	r1, r2
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d009      	beq.n	800a976 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	6852      	ldr	r2, [r2, #4]
 800a96e:	b2d2      	uxtb	r2, r2
 800a970:	4611      	mov	r1, r2
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	4798      	blx	r3
  }

  return USBD_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a980:	b480      	push	{r7}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	3301      	adds	r3, #1
 800a996:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a99e:	8a3b      	ldrh	r3, [r7, #16]
 800a9a0:	021b      	lsls	r3, r3, #8
 800a9a2:	b21a      	sxth	r2, r3
 800a9a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	b21b      	sxth	r3, r3
 800a9ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a9ae:	89fb      	ldrh	r3, [r7, #14]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	371c      	adds	r7, #28
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9d2:	2b40      	cmp	r3, #64	; 0x40
 800a9d4:	d005      	beq.n	800a9e2 <USBD_StdDevReq+0x26>
 800a9d6:	2b40      	cmp	r3, #64	; 0x40
 800a9d8:	d853      	bhi.n	800aa82 <USBD_StdDevReq+0xc6>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00b      	beq.n	800a9f6 <USBD_StdDevReq+0x3a>
 800a9de:	2b20      	cmp	r3, #32
 800a9e0:	d14f      	bne.n	800aa82 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	4798      	blx	r3
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a9f4:	e04a      	b.n	800aa8c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	785b      	ldrb	r3, [r3, #1]
 800a9fa:	2b09      	cmp	r3, #9
 800a9fc:	d83b      	bhi.n	800aa76 <USBD_StdDevReq+0xba>
 800a9fe:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <USBD_StdDevReq+0x48>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa59 	.word	0x0800aa59
 800aa08:	0800aa6d 	.word	0x0800aa6d
 800aa0c:	0800aa77 	.word	0x0800aa77
 800aa10:	0800aa63 	.word	0x0800aa63
 800aa14:	0800aa77 	.word	0x0800aa77
 800aa18:	0800aa37 	.word	0x0800aa37
 800aa1c:	0800aa2d 	.word	0x0800aa2d
 800aa20:	0800aa77 	.word	0x0800aa77
 800aa24:	0800aa4f 	.word	0x0800aa4f
 800aa28:	0800aa41 	.word	0x0800aa41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f9de 	bl	800adf0 <USBD_GetDescriptor>
          break;
 800aa34:	e024      	b.n	800aa80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fb43 	bl	800b0c4 <USBD_SetAddress>
          break;
 800aa3e:	e01f      	b.n	800aa80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fb82 	bl	800b14c <USBD_SetConfig>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	73fb      	strb	r3, [r7, #15]
          break;
 800aa4c:	e018      	b.n	800aa80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fc21 	bl	800b298 <USBD_GetConfig>
          break;
 800aa56:	e013      	b.n	800aa80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa58:	6839      	ldr	r1, [r7, #0]
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fc52 	bl	800b304 <USBD_GetStatus>
          break;
 800aa60:	e00e      	b.n	800aa80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fc81 	bl	800b36c <USBD_SetFeature>
          break;
 800aa6a:	e009      	b.n	800aa80 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fc90 	bl	800b394 <USBD_ClrFeature>
          break;
 800aa74:	e004      	b.n	800aa80 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fce7 	bl	800b44c <USBD_CtlError>
          break;
 800aa7e:	bf00      	nop
      }
      break;
 800aa80:	e004      	b.n	800aa8c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fce1 	bl	800b44c <USBD_CtlError>
      break;
 800aa8a:	bf00      	nop
  }

  return ret;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop

0800aa98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aaae:	2b40      	cmp	r3, #64	; 0x40
 800aab0:	d005      	beq.n	800aabe <USBD_StdItfReq+0x26>
 800aab2:	2b40      	cmp	r3, #64	; 0x40
 800aab4:	d82f      	bhi.n	800ab16 <USBD_StdItfReq+0x7e>
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <USBD_StdItfReq+0x26>
 800aaba:	2b20      	cmp	r3, #32
 800aabc:	d12b      	bne.n	800ab16 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	3b01      	subs	r3, #1
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d81d      	bhi.n	800ab08 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	889b      	ldrh	r3, [r3, #4]
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d813      	bhi.n	800aafe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	4798      	blx	r3
 800aae4:	4603      	mov	r3, r0
 800aae6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	88db      	ldrh	r3, [r3, #6]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d110      	bne.n	800ab12 <USBD_StdItfReq+0x7a>
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10d      	bne.n	800ab12 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fd56 	bl	800b5a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aafc:	e009      	b.n	800ab12 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fca3 	bl	800b44c <USBD_CtlError>
          break;
 800ab06:	e004      	b.n	800ab12 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fc9e 	bl	800b44c <USBD_CtlError>
          break;
 800ab10:	e000      	b.n	800ab14 <USBD_StdItfReq+0x7c>
          break;
 800ab12:	bf00      	nop
      }
      break;
 800ab14:	e004      	b.n	800ab20 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fc97 	bl	800b44c <USBD_CtlError>
      break;
 800ab1e:	bf00      	nop
  }

  return ret;
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b084      	sub	sp, #16
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	889b      	ldrh	r3, [r3, #4]
 800ab3c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab46:	2b40      	cmp	r3, #64	; 0x40
 800ab48:	d007      	beq.n	800ab5a <USBD_StdEPReq+0x30>
 800ab4a:	2b40      	cmp	r3, #64	; 0x40
 800ab4c:	f200 8145 	bhi.w	800adda <USBD_StdEPReq+0x2b0>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00c      	beq.n	800ab6e <USBD_StdEPReq+0x44>
 800ab54:	2b20      	cmp	r3, #32
 800ab56:	f040 8140 	bne.w	800adda <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	4798      	blx	r3
 800ab68:	4603      	mov	r3, r0
 800ab6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab6c:	e13a      	b.n	800ade4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	785b      	ldrb	r3, [r3, #1]
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d007      	beq.n	800ab86 <USBD_StdEPReq+0x5c>
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	f300 8129 	bgt.w	800adce <USBD_StdEPReq+0x2a4>
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d07f      	beq.n	800ac80 <USBD_StdEPReq+0x156>
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d03c      	beq.n	800abfe <USBD_StdEPReq+0xd4>
 800ab84:	e123      	b.n	800adce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d002      	beq.n	800ab98 <USBD_StdEPReq+0x6e>
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d016      	beq.n	800abc4 <USBD_StdEPReq+0x9a>
 800ab96:	e02c      	b.n	800abf2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00d      	beq.n	800abba <USBD_StdEPReq+0x90>
 800ab9e:	7bbb      	ldrb	r3, [r7, #14]
 800aba0:	2b80      	cmp	r3, #128	; 0x80
 800aba2:	d00a      	beq.n	800abba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aba4:	7bbb      	ldrb	r3, [r7, #14]
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f004 fa73 	bl	800f094 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abae:	2180      	movs	r1, #128	; 0x80
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f004 fa6f 	bl	800f094 <USBD_LL_StallEP>
 800abb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abb8:	e020      	b.n	800abfc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800abba:	6839      	ldr	r1, [r7, #0]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 fc45 	bl	800b44c <USBD_CtlError>
              break;
 800abc2:	e01b      	b.n	800abfc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	885b      	ldrh	r3, [r3, #2]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10e      	bne.n	800abea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00b      	beq.n	800abea <USBD_StdEPReq+0xc0>
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	2b80      	cmp	r3, #128	; 0x80
 800abd6:	d008      	beq.n	800abea <USBD_StdEPReq+0xc0>
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	88db      	ldrh	r3, [r3, #6]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d104      	bne.n	800abea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800abe0:	7bbb      	ldrb	r3, [r7, #14]
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f004 fa55 	bl	800f094 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fcdc 	bl	800b5a8 <USBD_CtlSendStatus>

              break;
 800abf0:	e004      	b.n	800abfc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fc29 	bl	800b44c <USBD_CtlError>
              break;
 800abfa:	bf00      	nop
          }
          break;
 800abfc:	e0ec      	b.n	800add8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d002      	beq.n	800ac10 <USBD_StdEPReq+0xe6>
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d016      	beq.n	800ac3c <USBD_StdEPReq+0x112>
 800ac0e:	e030      	b.n	800ac72 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00d      	beq.n	800ac32 <USBD_StdEPReq+0x108>
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	2b80      	cmp	r3, #128	; 0x80
 800ac1a:	d00a      	beq.n	800ac32 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f004 fa37 	bl	800f094 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac26:	2180      	movs	r1, #128	; 0x80
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f004 fa33 	bl	800f094 <USBD_LL_StallEP>
 800ac2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac30:	e025      	b.n	800ac7e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fc09 	bl	800b44c <USBD_CtlError>
              break;
 800ac3a:	e020      	b.n	800ac7e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	885b      	ldrh	r3, [r3, #2]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d11b      	bne.n	800ac7c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
 800ac46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d004      	beq.n	800ac58 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f004 fa3d 	bl	800f0d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fca5 	bl	800b5a8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	4798      	blx	r3
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ac70:	e004      	b.n	800ac7c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fbe9 	bl	800b44c <USBD_CtlError>
              break;
 800ac7a:	e000      	b.n	800ac7e <USBD_StdEPReq+0x154>
              break;
 800ac7c:	bf00      	nop
          }
          break;
 800ac7e:	e0ab      	b.n	800add8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d002      	beq.n	800ac92 <USBD_StdEPReq+0x168>
 800ac8c:	2b03      	cmp	r3, #3
 800ac8e:	d032      	beq.n	800acf6 <USBD_StdEPReq+0x1cc>
 800ac90:	e097      	b.n	800adc2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d007      	beq.n	800aca8 <USBD_StdEPReq+0x17e>
 800ac98:	7bbb      	ldrb	r3, [r7, #14]
 800ac9a:	2b80      	cmp	r3, #128	; 0x80
 800ac9c:	d004      	beq.n	800aca8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fbd3 	bl	800b44c <USBD_CtlError>
                break;
 800aca6:	e091      	b.n	800adcc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acac:	2b00      	cmp	r3, #0
 800acae:	da0b      	bge.n	800acc8 <USBD_StdEPReq+0x19e>
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	3310      	adds	r3, #16
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	4413      	add	r3, r2
 800acc4:	3304      	adds	r3, #4
 800acc6:	e00b      	b.n	800ace0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	4413      	add	r3, r2
 800acde:	3304      	adds	r3, #4
 800ace0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	2200      	movs	r2, #0
 800ace6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	2202      	movs	r2, #2
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fc1d 	bl	800b52e <USBD_CtlSendData>
              break;
 800acf4:	e06a      	b.n	800adcc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800acf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	da11      	bge.n	800ad22 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800acfe:	7bbb      	ldrb	r3, [r7, #14]
 800ad00:	f003 020f 	and.w	r2, r3, #15
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	440b      	add	r3, r1
 800ad10:	3324      	adds	r3, #36	; 0x24
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d117      	bne.n	800ad48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fb96 	bl	800b44c <USBD_CtlError>
                  break;
 800ad20:	e054      	b.n	800adcc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad22:	7bbb      	ldrb	r3, [r7, #14]
 800ad24:	f003 020f 	and.w	r2, r3, #15
 800ad28:	6879      	ldr	r1, [r7, #4]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	440b      	add	r3, r1
 800ad34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d104      	bne.n	800ad48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fb83 	bl	800b44c <USBD_CtlError>
                  break;
 800ad46:	e041      	b.n	800adcc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	da0b      	bge.n	800ad68 <USBD_StdEPReq+0x23e>
 800ad50:	7bbb      	ldrb	r3, [r7, #14]
 800ad52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad56:	4613      	mov	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	3310      	adds	r3, #16
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	4413      	add	r3, r2
 800ad64:	3304      	adds	r3, #4
 800ad66:	e00b      	b.n	800ad80 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	3304      	adds	r3, #4
 800ad80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad82:	7bbb      	ldrb	r3, [r7, #14]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <USBD_StdEPReq+0x264>
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	2b80      	cmp	r3, #128	; 0x80
 800ad8c:	d103      	bne.n	800ad96 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2200      	movs	r2, #0
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	e00e      	b.n	800adb4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f004 f9b8 	bl	800f110 <USBD_LL_IsStallEP>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d003      	beq.n	800adae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2201      	movs	r2, #1
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	e002      	b.n	800adb4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	2202      	movs	r2, #2
 800adb8:	4619      	mov	r1, r3
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fbb7 	bl	800b52e <USBD_CtlSendData>
              break;
 800adc0:	e004      	b.n	800adcc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fb41 	bl	800b44c <USBD_CtlError>
              break;
 800adca:	bf00      	nop
          }
          break;
 800adcc:	e004      	b.n	800add8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fb3b 	bl	800b44c <USBD_CtlError>
          break;
 800add6:	bf00      	nop
      }
      break;
 800add8:	e004      	b.n	800ade4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fb35 	bl	800b44c <USBD_CtlError>
      break;
 800ade2:	bf00      	nop
  }

  return ret;
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
	...

0800adf0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae02:	2300      	movs	r3, #0
 800ae04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	885b      	ldrh	r3, [r3, #2]
 800ae0a:	0a1b      	lsrs	r3, r3, #8
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	2b06      	cmp	r3, #6
 800ae12:	f200 8128 	bhi.w	800b066 <USBD_GetDescriptor+0x276>
 800ae16:	a201      	add	r2, pc, #4	; (adr r2, 800ae1c <USBD_GetDescriptor+0x2c>)
 800ae18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1c:	0800ae39 	.word	0x0800ae39
 800ae20:	0800ae51 	.word	0x0800ae51
 800ae24:	0800ae91 	.word	0x0800ae91
 800ae28:	0800b067 	.word	0x0800b067
 800ae2c:	0800b067 	.word	0x0800b067
 800ae30:	0800b007 	.word	0x0800b007
 800ae34:	0800b033 	.word	0x0800b033
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	7c12      	ldrb	r2, [r2, #16]
 800ae44:	f107 0108 	add.w	r1, r7, #8
 800ae48:	4610      	mov	r0, r2
 800ae4a:	4798      	blx	r3
 800ae4c:	60f8      	str	r0, [r7, #12]
      break;
 800ae4e:	e112      	b.n	800b076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	7c1b      	ldrb	r3, [r3, #16]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10d      	bne.n	800ae74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae60:	f107 0208 	add.w	r2, r7, #8
 800ae64:	4610      	mov	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	2202      	movs	r2, #2
 800ae70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae72:	e100      	b.n	800b076 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7c:	f107 0208 	add.w	r2, r7, #8
 800ae80:	4610      	mov	r0, r2
 800ae82:	4798      	blx	r3
 800ae84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	701a      	strb	r2, [r3, #0]
      break;
 800ae8e:	e0f2      	b.n	800b076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	885b      	ldrh	r3, [r3, #2]
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b05      	cmp	r3, #5
 800ae98:	f200 80ac 	bhi.w	800aff4 <USBD_GetDescriptor+0x204>
 800ae9c:	a201      	add	r2, pc, #4	; (adr r2, 800aea4 <USBD_GetDescriptor+0xb4>)
 800ae9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea2:	bf00      	nop
 800aea4:	0800aebd 	.word	0x0800aebd
 800aea8:	0800aef1 	.word	0x0800aef1
 800aeac:	0800af25 	.word	0x0800af25
 800aeb0:	0800af59 	.word	0x0800af59
 800aeb4:	0800af8d 	.word	0x0800af8d
 800aeb8:	0800afc1 	.word	0x0800afc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00b      	beq.n	800aee0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	7c12      	ldrb	r2, [r2, #16]
 800aed4:	f107 0108 	add.w	r1, r7, #8
 800aed8:	4610      	mov	r0, r2
 800aeda:	4798      	blx	r3
 800aedc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aede:	e091      	b.n	800b004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 fab2 	bl	800b44c <USBD_CtlError>
            err++;
 800aee8:	7afb      	ldrb	r3, [r7, #11]
 800aeea:	3301      	adds	r3, #1
 800aeec:	72fb      	strb	r3, [r7, #11]
          break;
 800aeee:	e089      	b.n	800b004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00b      	beq.n	800af14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	7c12      	ldrb	r2, [r2, #16]
 800af08:	f107 0108 	add.w	r1, r7, #8
 800af0c:	4610      	mov	r0, r2
 800af0e:	4798      	blx	r3
 800af10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af12:	e077      	b.n	800b004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fa98 	bl	800b44c <USBD_CtlError>
            err++;
 800af1c:	7afb      	ldrb	r3, [r7, #11]
 800af1e:	3301      	adds	r3, #1
 800af20:	72fb      	strb	r3, [r7, #11]
          break;
 800af22:	e06f      	b.n	800b004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00b      	beq.n	800af48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	7c12      	ldrb	r2, [r2, #16]
 800af3c:	f107 0108 	add.w	r1, r7, #8
 800af40:	4610      	mov	r0, r2
 800af42:	4798      	blx	r3
 800af44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af46:	e05d      	b.n	800b004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fa7e 	bl	800b44c <USBD_CtlError>
            err++;
 800af50:	7afb      	ldrb	r3, [r7, #11]
 800af52:	3301      	adds	r3, #1
 800af54:	72fb      	strb	r3, [r7, #11]
          break;
 800af56:	e055      	b.n	800b004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00b      	beq.n	800af7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	7c12      	ldrb	r2, [r2, #16]
 800af70:	f107 0108 	add.w	r1, r7, #8
 800af74:	4610      	mov	r0, r2
 800af76:	4798      	blx	r3
 800af78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af7a:	e043      	b.n	800b004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 fa64 	bl	800b44c <USBD_CtlError>
            err++;
 800af84:	7afb      	ldrb	r3, [r7, #11]
 800af86:	3301      	adds	r3, #1
 800af88:	72fb      	strb	r3, [r7, #11]
          break;
 800af8a:	e03b      	b.n	800b004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af9e:	695b      	ldr	r3, [r3, #20]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	7c12      	ldrb	r2, [r2, #16]
 800afa4:	f107 0108 	add.w	r1, r7, #8
 800afa8:	4610      	mov	r0, r2
 800afaa:	4798      	blx	r3
 800afac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afae:	e029      	b.n	800b004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fa4a 	bl	800b44c <USBD_CtlError>
            err++;
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	3301      	adds	r3, #1
 800afbc:	72fb      	strb	r3, [r7, #11]
          break;
 800afbe:	e021      	b.n	800b004 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00b      	beq.n	800afe4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	7c12      	ldrb	r2, [r2, #16]
 800afd8:	f107 0108 	add.w	r1, r7, #8
 800afdc:	4610      	mov	r0, r2
 800afde:	4798      	blx	r3
 800afe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afe2:	e00f      	b.n	800b004 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fa30 	bl	800b44c <USBD_CtlError>
            err++;
 800afec:	7afb      	ldrb	r3, [r7, #11]
 800afee:	3301      	adds	r3, #1
 800aff0:	72fb      	strb	r3, [r7, #11]
          break;
 800aff2:	e007      	b.n	800b004 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fa28 	bl	800b44c <USBD_CtlError>
          err++;
 800affc:	7afb      	ldrb	r3, [r7, #11]
 800affe:	3301      	adds	r3, #1
 800b000:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b002:	bf00      	nop
      }
      break;
 800b004:	e037      	b.n	800b076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	7c1b      	ldrb	r3, [r3, #16]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d109      	bne.n	800b022 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b016:	f107 0208 	add.w	r2, r7, #8
 800b01a:	4610      	mov	r0, r2
 800b01c:	4798      	blx	r3
 800b01e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b020:	e029      	b.n	800b076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 fa11 	bl	800b44c <USBD_CtlError>
        err++;
 800b02a:	7afb      	ldrb	r3, [r7, #11]
 800b02c:	3301      	adds	r3, #1
 800b02e:	72fb      	strb	r3, [r7, #11]
      break;
 800b030:	e021      	b.n	800b076 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	7c1b      	ldrb	r3, [r3, #16]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10d      	bne.n	800b056 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b042:	f107 0208 	add.w	r2, r7, #8
 800b046:	4610      	mov	r0, r2
 800b048:	4798      	blx	r3
 800b04a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	3301      	adds	r3, #1
 800b050:	2207      	movs	r2, #7
 800b052:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b054:	e00f      	b.n	800b076 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f9f7 	bl	800b44c <USBD_CtlError>
        err++;
 800b05e:	7afb      	ldrb	r3, [r7, #11]
 800b060:	3301      	adds	r3, #1
 800b062:	72fb      	strb	r3, [r7, #11]
      break;
 800b064:	e007      	b.n	800b076 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f9ef 	bl	800b44c <USBD_CtlError>
      err++;
 800b06e:	7afb      	ldrb	r3, [r7, #11]
 800b070:	3301      	adds	r3, #1
 800b072:	72fb      	strb	r3, [r7, #11]
      break;
 800b074:	bf00      	nop
  }

  if (err != 0U)
 800b076:	7afb      	ldrb	r3, [r7, #11]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d11e      	bne.n	800b0ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	88db      	ldrh	r3, [r3, #6]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d016      	beq.n	800b0b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b084:	893b      	ldrh	r3, [r7, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00e      	beq.n	800b0a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	88da      	ldrh	r2, [r3, #6]
 800b08e:	893b      	ldrh	r3, [r7, #8]
 800b090:	4293      	cmp	r3, r2
 800b092:	bf28      	it	cs
 800b094:	4613      	movcs	r3, r2
 800b096:	b29b      	uxth	r3, r3
 800b098:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b09a:	893b      	ldrh	r3, [r7, #8]
 800b09c:	461a      	mov	r2, r3
 800b09e:	68f9      	ldr	r1, [r7, #12]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fa44 	bl	800b52e <USBD_CtlSendData>
 800b0a6:	e009      	b.n	800b0bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f9ce 	bl	800b44c <USBD_CtlError>
 800b0b0:	e004      	b.n	800b0bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fa78 	bl	800b5a8 <USBD_CtlSendStatus>
 800b0b8:	e000      	b.n	800b0bc <USBD_GetDescriptor+0x2cc>
    return;
 800b0ba:	bf00      	nop
  }
}
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop

0800b0c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	889b      	ldrh	r3, [r3, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d131      	bne.n	800b13a <USBD_SetAddress+0x76>
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	88db      	ldrh	r3, [r3, #6]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d12d      	bne.n	800b13a <USBD_SetAddress+0x76>
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	885b      	ldrh	r3, [r3, #2]
 800b0e2:	2b7f      	cmp	r3, #127	; 0x7f
 800b0e4:	d829      	bhi.n	800b13a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	885b      	ldrh	r3, [r3, #2]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d104      	bne.n	800b108 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f9a3 	bl	800b44c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b106:	e01d      	b.n	800b144 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	7bfa      	ldrb	r2, [r7, #15]
 800b10c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f004 f827 	bl	800f168 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fa44 	bl	800b5a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d004      	beq.n	800b130 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2202      	movs	r2, #2
 800b12a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b12e:	e009      	b.n	800b144 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b138:	e004      	b.n	800b144 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f985 	bl	800b44c <USBD_CtlError>
  }
}
 800b142:	bf00      	nop
 800b144:	bf00      	nop
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	885b      	ldrh	r3, [r3, #2]
 800b15e:	b2da      	uxtb	r2, r3
 800b160:	4b4c      	ldr	r3, [pc, #304]	; (800b294 <USBD_SetConfig+0x148>)
 800b162:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b164:	4b4b      	ldr	r3, [pc, #300]	; (800b294 <USBD_SetConfig+0x148>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d905      	bls.n	800b178 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f96c 	bl	800b44c <USBD_CtlError>
    return USBD_FAIL;
 800b174:	2303      	movs	r3, #3
 800b176:	e088      	b.n	800b28a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b02      	cmp	r3, #2
 800b182:	d002      	beq.n	800b18a <USBD_SetConfig+0x3e>
 800b184:	2b03      	cmp	r3, #3
 800b186:	d025      	beq.n	800b1d4 <USBD_SetConfig+0x88>
 800b188:	e071      	b.n	800b26e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b18a:	4b42      	ldr	r3, [pc, #264]	; (800b294 <USBD_SetConfig+0x148>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d01c      	beq.n	800b1cc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b192:	4b40      	ldr	r3, [pc, #256]	; (800b294 <USBD_SetConfig+0x148>)
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	461a      	mov	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b19c:	4b3d      	ldr	r3, [pc, #244]	; (800b294 <USBD_SetConfig+0x148>)
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff f949 	bl	800a43a <USBD_SetClassConfig>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d004      	beq.n	800b1bc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f949 	bl	800b44c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1ba:	e065      	b.n	800b288 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f9f3 	bl	800b5a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1ca:	e05d      	b.n	800b288 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f9eb 	bl	800b5a8 <USBD_CtlSendStatus>
      break;
 800b1d2:	e059      	b.n	800b288 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b1d4:	4b2f      	ldr	r3, [pc, #188]	; (800b294 <USBD_SetConfig+0x148>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d112      	bne.n	800b202 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2202      	movs	r2, #2
 800b1e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b1e4:	4b2b      	ldr	r3, [pc, #172]	; (800b294 <USBD_SetConfig+0x148>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1ee:	4b29      	ldr	r3, [pc, #164]	; (800b294 <USBD_SetConfig+0x148>)
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7ff f93c 	bl	800a472 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f9d4 	bl	800b5a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b200:	e042      	b.n	800b288 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b202:	4b24      	ldr	r3, [pc, #144]	; (800b294 <USBD_SetConfig+0x148>)
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d02a      	beq.n	800b266 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	b2db      	uxtb	r3, r3
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f7ff f92a 	bl	800a472 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b21e:	4b1d      	ldr	r3, [pc, #116]	; (800b294 <USBD_SetConfig+0x148>)
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	461a      	mov	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b228:	4b1a      	ldr	r3, [pc, #104]	; (800b294 <USBD_SetConfig+0x148>)
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7ff f903 	bl	800a43a <USBD_SetClassConfig>
 800b234:	4603      	mov	r3, r0
 800b236:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00f      	beq.n	800b25e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f903 	bl	800b44c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	4619      	mov	r1, r3
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7ff f90f 	bl	800a472 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2202      	movs	r2, #2
 800b258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b25c:	e014      	b.n	800b288 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f9a2 	bl	800b5a8 <USBD_CtlSendStatus>
      break;
 800b264:	e010      	b.n	800b288 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f99e 	bl	800b5a8 <USBD_CtlSendStatus>
      break;
 800b26c:	e00c      	b.n	800b288 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 f8eb 	bl	800b44c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b276:	4b07      	ldr	r3, [pc, #28]	; (800b294 <USBD_SetConfig+0x148>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7ff f8f8 	bl	800a472 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b282:	2303      	movs	r3, #3
 800b284:	73fb      	strb	r3, [r7, #15]
      break;
 800b286:	bf00      	nop
  }

  return ret;
 800b288:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	20000764 	.word	0x20000764

0800b298 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	88db      	ldrh	r3, [r3, #6]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d004      	beq.n	800b2b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f8cd 	bl	800b44c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2b2:	e023      	b.n	800b2fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	dc02      	bgt.n	800b2c6 <USBD_GetConfig+0x2e>
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dc03      	bgt.n	800b2cc <USBD_GetConfig+0x34>
 800b2c4:	e015      	b.n	800b2f2 <USBD_GetConfig+0x5a>
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d00b      	beq.n	800b2e2 <USBD_GetConfig+0x4a>
 800b2ca:	e012      	b.n	800b2f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f927 	bl	800b52e <USBD_CtlSendData>
        break;
 800b2e0:	e00c      	b.n	800b2fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f91f 	bl	800b52e <USBD_CtlSendData>
        break;
 800b2f0:	e004      	b.n	800b2fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f8a9 	bl	800b44c <USBD_CtlError>
        break;
 800b2fa:	bf00      	nop
}
 800b2fc:	bf00      	nop
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b314:	b2db      	uxtb	r3, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d81e      	bhi.n	800b35a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	88db      	ldrh	r3, [r3, #6]
 800b320:	2b02      	cmp	r3, #2
 800b322:	d004      	beq.n	800b32e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f890 	bl	800b44c <USBD_CtlError>
        break;
 800b32c:	e01a      	b.n	800b364 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2201      	movs	r2, #1
 800b332:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d005      	beq.n	800b34a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	f043 0202 	orr.w	r2, r3, #2
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	330c      	adds	r3, #12
 800b34e:	2202      	movs	r2, #2
 800b350:	4619      	mov	r1, r3
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f8eb 	bl	800b52e <USBD_CtlSendData>
      break;
 800b358:	e004      	b.n	800b364 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f875 	bl	800b44c <USBD_CtlError>
      break;
 800b362:	bf00      	nop
  }
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	885b      	ldrh	r3, [r3, #2]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d106      	bne.n	800b38c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f90e 	bl	800b5a8 <USBD_CtlSendStatus>
  }
}
 800b38c:	bf00      	nop
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d80b      	bhi.n	800b3c4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	885b      	ldrh	r3, [r3, #2]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d10c      	bne.n	800b3ce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f8f3 	bl	800b5a8 <USBD_CtlSendStatus>
      }
      break;
 800b3c2:	e004      	b.n	800b3ce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f840 	bl	800b44c <USBD_CtlError>
      break;
 800b3cc:	e000      	b.n	800b3d0 <USBD_ClrFeature+0x3c>
      break;
 800b3ce:	bf00      	nop
  }
}
 800b3d0:	bf00      	nop
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	781a      	ldrb	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	781a      	ldrb	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3301      	adds	r3, #1
 800b400:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f7ff fabc 	bl	800a980 <SWAPBYTE>
 800b408:	4603      	mov	r3, r0
 800b40a:	461a      	mov	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3301      	adds	r3, #1
 800b414:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3301      	adds	r3, #1
 800b41a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff faaf 	bl	800a980 <SWAPBYTE>
 800b422:	4603      	mov	r3, r0
 800b424:	461a      	mov	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3301      	adds	r3, #1
 800b42e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	3301      	adds	r3, #1
 800b434:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f7ff faa2 	bl	800a980 <SWAPBYTE>
 800b43c:	4603      	mov	r3, r0
 800b43e:	461a      	mov	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	80da      	strh	r2, [r3, #6]
}
 800b444:	bf00      	nop
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b456:	2180      	movs	r1, #128	; 0x80
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f003 fe1b 	bl	800f094 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b45e:	2100      	movs	r1, #0
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f003 fe17 	bl	800f094 <USBD_LL_StallEP>
}
 800b466:	bf00      	nop
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b086      	sub	sp, #24
 800b472:	af00      	add	r7, sp, #0
 800b474:	60f8      	str	r0, [r7, #12]
 800b476:	60b9      	str	r1, [r7, #8]
 800b478:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b47a:	2300      	movs	r3, #0
 800b47c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d036      	beq.n	800b4f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b488:	6938      	ldr	r0, [r7, #16]
 800b48a:	f000 f836 	bl	800b4fa <USBD_GetLen>
 800b48e:	4603      	mov	r3, r0
 800b490:	3301      	adds	r3, #1
 800b492:	b29b      	uxth	r3, r3
 800b494:	005b      	lsls	r3, r3, #1
 800b496:	b29a      	uxth	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b49c:	7dfb      	ldrb	r3, [r7, #23]
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	7812      	ldrb	r2, [r2, #0]
 800b4a6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4a8:	7dfb      	ldrb	r3, [r7, #23]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b4ae:	7dfb      	ldrb	r3, [r7, #23]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	2203      	movs	r2, #3
 800b4b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b4be:	e013      	b.n	800b4e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	7812      	ldrb	r2, [r2, #0]
 800b4ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	613b      	str	r3, [r7, #16]
    idx++;
 800b4d2:	7dfb      	ldrb	r3, [r7, #23]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	4413      	add	r3, r2
 800b4de:	2200      	movs	r2, #0
 800b4e0:	701a      	strb	r2, [r3, #0]
    idx++;
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1e7      	bne.n	800b4c0 <USBD_GetString+0x52>
 800b4f0:	e000      	b.n	800b4f4 <USBD_GetString+0x86>
    return;
 800b4f2:	bf00      	nop
  }
}
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b085      	sub	sp, #20
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b50a:	e005      	b.n	800b518 <USBD_GetLen+0x1e>
  {
    len++;
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
 800b50e:	3301      	adds	r3, #1
 800b510:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	3301      	adds	r3, #1
 800b516:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1f5      	bne.n	800b50c <USBD_GetLen+0x12>
  }

  return len;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	60b9      	str	r1, [r7, #8]
 800b538:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2202      	movs	r2, #2
 800b53e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	2100      	movs	r1, #0
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f003 fe26 	bl	800f1a6 <USBD_LL_Transmit>

  return USBD_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68ba      	ldr	r2, [r7, #8]
 800b574:	2100      	movs	r1, #0
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f003 fe15 	bl	800f1a6 <USBD_LL_Transmit>

  return USBD_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	60f8      	str	r0, [r7, #12]
 800b58e:	60b9      	str	r1, [r7, #8]
 800b590:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	2100      	movs	r1, #0
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f003 fe25 	bl	800f1e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2204      	movs	r2, #4
 800b5b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	2100      	movs	r1, #0
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f003 fdf1 	bl	800f1a6 <USBD_LL_Transmit>

  return USBD_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2205      	movs	r2, #5
 800b5da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5de:	2300      	movs	r3, #0
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f003 fdff 	bl	800f1e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b5fe:	79fb      	ldrb	r3, [r7, #7]
 800b600:	4a08      	ldr	r2, [pc, #32]	; (800b624 <disk_status+0x30>)
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4413      	add	r3, r2
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	79fa      	ldrb	r2, [r7, #7]
 800b60c:	4905      	ldr	r1, [pc, #20]	; (800b624 <disk_status+0x30>)
 800b60e:	440a      	add	r2, r1
 800b610:	7a12      	ldrb	r2, [r2, #8]
 800b612:	4610      	mov	r0, r2
 800b614:	4798      	blx	r3
 800b616:	4603      	mov	r3, r0
 800b618:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	20000990 	.word	0x20000990

0800b628 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	4a0d      	ldr	r2, [pc, #52]	; (800b670 <disk_initialize+0x48>)
 800b63a:	5cd3      	ldrb	r3, [r2, r3]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d111      	bne.n	800b664 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	4a0b      	ldr	r2, [pc, #44]	; (800b670 <disk_initialize+0x48>)
 800b644:	2101      	movs	r1, #1
 800b646:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b648:	79fb      	ldrb	r3, [r7, #7]
 800b64a:	4a09      	ldr	r2, [pc, #36]	; (800b670 <disk_initialize+0x48>)
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	79fa      	ldrb	r2, [r7, #7]
 800b656:	4906      	ldr	r1, [pc, #24]	; (800b670 <disk_initialize+0x48>)
 800b658:	440a      	add	r2, r1
 800b65a:	7a12      	ldrb	r2, [r2, #8]
 800b65c:	4610      	mov	r0, r2
 800b65e:	4798      	blx	r3
 800b660:	4603      	mov	r3, r0
 800b662:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b664:	7bfb      	ldrb	r3, [r7, #15]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	20000990 	.word	0x20000990

0800b674 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b674:	b590      	push	{r4, r7, lr}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60b9      	str	r1, [r7, #8]
 800b67c:	607a      	str	r2, [r7, #4]
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	4603      	mov	r3, r0
 800b682:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	4a0a      	ldr	r2, [pc, #40]	; (800b6b0 <disk_read+0x3c>)
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	689c      	ldr	r4, [r3, #8]
 800b690:	7bfb      	ldrb	r3, [r7, #15]
 800b692:	4a07      	ldr	r2, [pc, #28]	; (800b6b0 <disk_read+0x3c>)
 800b694:	4413      	add	r3, r2
 800b696:	7a18      	ldrb	r0, [r3, #8]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	68b9      	ldr	r1, [r7, #8]
 800b69e:	47a0      	blx	r4
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	371c      	adds	r7, #28
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd90      	pop	{r4, r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000990 	.word	0x20000990

0800b6b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b6b4:	b590      	push	{r4, r7, lr}
 800b6b6:	b087      	sub	sp, #28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60b9      	str	r1, [r7, #8]
 800b6bc:	607a      	str	r2, [r7, #4]
 800b6be:	603b      	str	r3, [r7, #0]
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
 800b6c6:	4a0a      	ldr	r2, [pc, #40]	; (800b6f0 <disk_write+0x3c>)
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	4413      	add	r3, r2
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	68dc      	ldr	r4, [r3, #12]
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	4a07      	ldr	r2, [pc, #28]	; (800b6f0 <disk_write+0x3c>)
 800b6d4:	4413      	add	r3, r2
 800b6d6:	7a18      	ldrb	r0, [r3, #8]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	68b9      	ldr	r1, [r7, #8]
 800b6de:	47a0      	blx	r4
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	371c      	adds	r7, #28
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd90      	pop	{r4, r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20000990 	.word	0x20000990

0800b6f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	603a      	str	r2, [r7, #0]
 800b6fe:	71fb      	strb	r3, [r7, #7]
 800b700:	460b      	mov	r3, r1
 800b702:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	4a09      	ldr	r2, [pc, #36]	; (800b72c <disk_ioctl+0x38>)
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	79fa      	ldrb	r2, [r7, #7]
 800b712:	4906      	ldr	r1, [pc, #24]	; (800b72c <disk_ioctl+0x38>)
 800b714:	440a      	add	r2, r1
 800b716:	7a10      	ldrb	r0, [r2, #8]
 800b718:	79b9      	ldrb	r1, [r7, #6]
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	4798      	blx	r3
 800b71e:	4603      	mov	r3, r0
 800b720:	73fb      	strb	r3, [r7, #15]
  return res;
 800b722:	7bfb      	ldrb	r3, [r7, #15]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	20000990 	.word	0x20000990

0800b730 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3301      	adds	r3, #1
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b740:	89fb      	ldrh	r3, [r7, #14]
 800b742:	021b      	lsls	r3, r3, #8
 800b744:	b21a      	sxth	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	b21b      	sxth	r3, r3
 800b74c:	4313      	orrs	r3, r2
 800b74e:	b21b      	sxth	r3, r3
 800b750:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b752:	89fb      	ldrh	r3, [r7, #14]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3303      	adds	r3, #3
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	021b      	lsls	r3, r3, #8
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	3202      	adds	r2, #2
 800b778:	7812      	ldrb	r2, [r2, #0]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	021b      	lsls	r3, r3, #8
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	3201      	adds	r2, #1
 800b786:	7812      	ldrb	r2, [r2, #0]
 800b788:	4313      	orrs	r3, r2
 800b78a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	021b      	lsls	r3, r3, #8
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	7812      	ldrb	r2, [r2, #0]
 800b794:	4313      	orrs	r3, r2
 800b796:	60fb      	str	r3, [r7, #12]
	return rv;
 800b798:	68fb      	ldr	r3, [r7, #12]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b083      	sub	sp, #12
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	1c5a      	adds	r2, r3, #1
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	887a      	ldrh	r2, [r7, #2]
 800b7ba:	b2d2      	uxtb	r2, r2
 800b7bc:	701a      	strb	r2, [r3, #0]
 800b7be:	887b      	ldrh	r3, [r7, #2]
 800b7c0:	0a1b      	lsrs	r3, r3, #8
 800b7c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	607a      	str	r2, [r7, #4]
 800b7ca:	887a      	ldrh	r2, [r7, #2]
 800b7cc:	b2d2      	uxtb	r2, r2
 800b7ce:	701a      	strb	r2, [r3, #0]
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	1c5a      	adds	r2, r3, #1
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	683a      	ldr	r2, [r7, #0]
 800b7ee:	b2d2      	uxtb	r2, r2
 800b7f0:	701a      	strb	r2, [r3, #0]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	0a1b      	lsrs	r3, r3, #8
 800b7f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	1c5a      	adds	r2, r3, #1
 800b7fc:	607a      	str	r2, [r7, #4]
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	b2d2      	uxtb	r2, r2
 800b802:	701a      	strb	r2, [r3, #0]
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	0a1b      	lsrs	r3, r3, #8
 800b808:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	607a      	str	r2, [r7, #4]
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	b2d2      	uxtb	r2, r2
 800b814:	701a      	strb	r2, [r3, #0]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	0a1b      	lsrs	r3, r3, #8
 800b81a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	607a      	str	r2, [r7, #4]
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	b2d2      	uxtb	r2, r2
 800b826:	701a      	strb	r2, [r3, #0]
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b834:	b480      	push	{r7}
 800b836:	b087      	sub	sp, #28
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00d      	beq.n	800b86a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	1c53      	adds	r3, r2, #1
 800b852:	613b      	str	r3, [r7, #16]
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	1c59      	adds	r1, r3, #1
 800b858:	6179      	str	r1, [r7, #20]
 800b85a:	7812      	ldrb	r2, [r2, #0]
 800b85c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3b01      	subs	r3, #1
 800b862:	607b      	str	r3, [r7, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1f1      	bne.n	800b84e <mem_cpy+0x1a>
	}
}
 800b86a:	bf00      	nop
 800b86c:	371c      	adds	r7, #28
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b876:	b480      	push	{r7}
 800b878:	b087      	sub	sp, #28
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	60f8      	str	r0, [r7, #12]
 800b87e:	60b9      	str	r1, [r7, #8]
 800b880:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	617a      	str	r2, [r7, #20]
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	b2d2      	uxtb	r2, r2
 800b890:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	3b01      	subs	r3, #1
 800b896:	607b      	str	r3, [r7, #4]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1f3      	bne.n	800b886 <mem_set+0x10>
}
 800b89e:	bf00      	nop
 800b8a0:	bf00      	nop
 800b8a2:	371c      	adds	r7, #28
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b8ac:	b480      	push	{r7}
 800b8ae:	b089      	sub	sp, #36	; 0x24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	61fb      	str	r3, [r7, #28]
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	61fa      	str	r2, [r7, #28]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	1c5a      	adds	r2, r3, #1
 800b8d2:	61ba      	str	r2, [r7, #24]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	1acb      	subs	r3, r1, r3
 800b8d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	607b      	str	r3, [r7, #4]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <mem_cmp+0x40>
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d0eb      	beq.n	800b8c4 <mem_cmp+0x18>

	return r;
 800b8ec:	697b      	ldr	r3, [r7, #20]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3724      	adds	r7, #36	; 0x24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b8fa:	b480      	push	{r7}
 800b8fc:	b083      	sub	sp, #12
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b904:	e002      	b.n	800b90c <chk_chr+0x12>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3301      	adds	r3, #1
 800b90a:	607b      	str	r3, [r7, #4]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d005      	beq.n	800b920 <chk_chr+0x26>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	461a      	mov	r2, r3
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d1f2      	bne.n	800b906 <chk_chr+0xc>
	return *str;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	781b      	ldrb	r3, [r3, #0]
}
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b93a:	2300      	movs	r3, #0
 800b93c:	60bb      	str	r3, [r7, #8]
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	60fb      	str	r3, [r7, #12]
 800b942:	e029      	b.n	800b998 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b944:	4a27      	ldr	r2, [pc, #156]	; (800b9e4 <chk_lock+0xb4>)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	011b      	lsls	r3, r3, #4
 800b94a:	4413      	add	r3, r2
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d01d      	beq.n	800b98e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b952:	4a24      	ldr	r2, [pc, #144]	; (800b9e4 <chk_lock+0xb4>)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	011b      	lsls	r3, r3, #4
 800b958:	4413      	add	r3, r2
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	429a      	cmp	r2, r3
 800b962:	d116      	bne.n	800b992 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b964:	4a1f      	ldr	r2, [pc, #124]	; (800b9e4 <chk_lock+0xb4>)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	011b      	lsls	r3, r3, #4
 800b96a:	4413      	add	r3, r2
 800b96c:	3304      	adds	r3, #4
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b974:	429a      	cmp	r2, r3
 800b976:	d10c      	bne.n	800b992 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b978:	4a1a      	ldr	r2, [pc, #104]	; (800b9e4 <chk_lock+0xb4>)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	011b      	lsls	r3, r3, #4
 800b97e:	4413      	add	r3, r2
 800b980:	3308      	adds	r3, #8
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b988:	429a      	cmp	r2, r3
 800b98a:	d102      	bne.n	800b992 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b98c:	e007      	b.n	800b99e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b98e:	2301      	movs	r3, #1
 800b990:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	3301      	adds	r3, #1
 800b996:	60fb      	str	r3, [r7, #12]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d9d2      	bls.n	800b944 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d109      	bne.n	800b9b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d102      	bne.n	800b9b0 <chk_lock+0x80>
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d101      	bne.n	800b9b4 <chk_lock+0x84>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	e010      	b.n	800b9d6 <chk_lock+0xa6>
 800b9b4:	2312      	movs	r3, #18
 800b9b6:	e00e      	b.n	800b9d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d108      	bne.n	800b9d0 <chk_lock+0xa0>
 800b9be:	4a09      	ldr	r2, [pc, #36]	; (800b9e4 <chk_lock+0xb4>)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	011b      	lsls	r3, r3, #4
 800b9c4:	4413      	add	r3, r2
 800b9c6:	330c      	adds	r3, #12
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9ce:	d101      	bne.n	800b9d4 <chk_lock+0xa4>
 800b9d0:	2310      	movs	r3, #16
 800b9d2:	e000      	b.n	800b9d6 <chk_lock+0xa6>
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	20000770 	.word	0x20000770

0800b9e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	607b      	str	r3, [r7, #4]
 800b9f2:	e002      	b.n	800b9fa <enq_lock+0x12>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	607b      	str	r3, [r7, #4]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d806      	bhi.n	800ba0e <enq_lock+0x26>
 800ba00:	4a09      	ldr	r2, [pc, #36]	; (800ba28 <enq_lock+0x40>)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	011b      	lsls	r3, r3, #4
 800ba06:	4413      	add	r3, r2
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1f2      	bne.n	800b9f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	bf14      	ite	ne
 800ba14:	2301      	movne	r3, #1
 800ba16:	2300      	moveq	r3, #0
 800ba18:	b2db      	uxtb	r3, r3
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	20000770 	.word	0x20000770

0800ba2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba36:	2300      	movs	r3, #0
 800ba38:	60fb      	str	r3, [r7, #12]
 800ba3a:	e01f      	b.n	800ba7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ba3c:	4a41      	ldr	r2, [pc, #260]	; (800bb44 <inc_lock+0x118>)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	011b      	lsls	r3, r3, #4
 800ba42:	4413      	add	r3, r2
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d113      	bne.n	800ba76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ba4e:	4a3d      	ldr	r2, [pc, #244]	; (800bb44 <inc_lock+0x118>)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	011b      	lsls	r3, r3, #4
 800ba54:	4413      	add	r3, r2
 800ba56:	3304      	adds	r3, #4
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d109      	bne.n	800ba76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ba62:	4a38      	ldr	r2, [pc, #224]	; (800bb44 <inc_lock+0x118>)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	011b      	lsls	r3, r3, #4
 800ba68:	4413      	add	r3, r2
 800ba6a:	3308      	adds	r3, #8
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d006      	beq.n	800ba84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d9dc      	bls.n	800ba3c <inc_lock+0x10>
 800ba82:	e000      	b.n	800ba86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ba84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d132      	bne.n	800baf2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	60fb      	str	r3, [r7, #12]
 800ba90:	e002      	b.n	800ba98 <inc_lock+0x6c>
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3301      	adds	r3, #1
 800ba96:	60fb      	str	r3, [r7, #12]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d806      	bhi.n	800baac <inc_lock+0x80>
 800ba9e:	4a29      	ldr	r2, [pc, #164]	; (800bb44 <inc_lock+0x118>)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	011b      	lsls	r3, r3, #4
 800baa4:	4413      	add	r3, r2
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1f2      	bne.n	800ba92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d101      	bne.n	800bab6 <inc_lock+0x8a>
 800bab2:	2300      	movs	r3, #0
 800bab4:	e040      	b.n	800bb38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	4922      	ldr	r1, [pc, #136]	; (800bb44 <inc_lock+0x118>)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	011b      	lsls	r3, r3, #4
 800bac0:	440b      	add	r3, r1
 800bac2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689a      	ldr	r2, [r3, #8]
 800bac8:	491e      	ldr	r1, [pc, #120]	; (800bb44 <inc_lock+0x118>)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	011b      	lsls	r3, r3, #4
 800bace:	440b      	add	r3, r1
 800bad0:	3304      	adds	r3, #4
 800bad2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	695a      	ldr	r2, [r3, #20]
 800bad8:	491a      	ldr	r1, [pc, #104]	; (800bb44 <inc_lock+0x118>)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	011b      	lsls	r3, r3, #4
 800bade:	440b      	add	r3, r1
 800bae0:	3308      	adds	r3, #8
 800bae2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bae4:	4a17      	ldr	r2, [pc, #92]	; (800bb44 <inc_lock+0x118>)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	011b      	lsls	r3, r3, #4
 800baea:	4413      	add	r3, r2
 800baec:	330c      	adds	r3, #12
 800baee:	2200      	movs	r2, #0
 800baf0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d009      	beq.n	800bb0c <inc_lock+0xe0>
 800baf8:	4a12      	ldr	r2, [pc, #72]	; (800bb44 <inc_lock+0x118>)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	011b      	lsls	r3, r3, #4
 800bafe:	4413      	add	r3, r2
 800bb00:	330c      	adds	r3, #12
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <inc_lock+0xe0>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e015      	b.n	800bb38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d108      	bne.n	800bb24 <inc_lock+0xf8>
 800bb12:	4a0c      	ldr	r2, [pc, #48]	; (800bb44 <inc_lock+0x118>)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	011b      	lsls	r3, r3, #4
 800bb18:	4413      	add	r3, r2
 800bb1a:	330c      	adds	r3, #12
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	e001      	b.n	800bb28 <inc_lock+0xfc>
 800bb24:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb28:	4906      	ldr	r1, [pc, #24]	; (800bb44 <inc_lock+0x118>)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	011b      	lsls	r3, r3, #4
 800bb2e:	440b      	add	r3, r1
 800bb30:	330c      	adds	r3, #12
 800bb32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3301      	adds	r3, #1
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	20000770 	.word	0x20000770

0800bb48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3b01      	subs	r3, #1
 800bb54:	607b      	str	r3, [r7, #4]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d825      	bhi.n	800bba8 <dec_lock+0x60>
		n = Files[i].ctr;
 800bb5c:	4a17      	ldr	r2, [pc, #92]	; (800bbbc <dec_lock+0x74>)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	011b      	lsls	r3, r3, #4
 800bb62:	4413      	add	r3, r2
 800bb64:	330c      	adds	r3, #12
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bb6a:	89fb      	ldrh	r3, [r7, #14]
 800bb6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb70:	d101      	bne.n	800bb76 <dec_lock+0x2e>
 800bb72:	2300      	movs	r3, #0
 800bb74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bb76:	89fb      	ldrh	r3, [r7, #14]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <dec_lock+0x3a>
 800bb7c:	89fb      	ldrh	r3, [r7, #14]
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bb82:	4a0e      	ldr	r2, [pc, #56]	; (800bbbc <dec_lock+0x74>)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	011b      	lsls	r3, r3, #4
 800bb88:	4413      	add	r3, r2
 800bb8a:	330c      	adds	r3, #12
 800bb8c:	89fa      	ldrh	r2, [r7, #14]
 800bb8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bb90:	89fb      	ldrh	r3, [r7, #14]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d105      	bne.n	800bba2 <dec_lock+0x5a>
 800bb96:	4a09      	ldr	r2, [pc, #36]	; (800bbbc <dec_lock+0x74>)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	011b      	lsls	r3, r3, #4
 800bb9c:	4413      	add	r3, r2
 800bb9e:	2200      	movs	r2, #0
 800bba0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	737b      	strb	r3, [r7, #13]
 800bba6:	e001      	b.n	800bbac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bba8:	2302      	movs	r3, #2
 800bbaa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bbac:	7b7b      	ldrb	r3, [r7, #13]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	20000770 	.word	0x20000770

0800bbc0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bbc8:	2300      	movs	r3, #0
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	e010      	b.n	800bbf0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bbce:	4a0d      	ldr	r2, [pc, #52]	; (800bc04 <clear_lock+0x44>)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	011b      	lsls	r3, r3, #4
 800bbd4:	4413      	add	r3, r2
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d105      	bne.n	800bbea <clear_lock+0x2a>
 800bbde:	4a09      	ldr	r2, [pc, #36]	; (800bc04 <clear_lock+0x44>)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	011b      	lsls	r3, r3, #4
 800bbe4:	4413      	add	r3, r2
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3301      	adds	r3, #1
 800bbee:	60fb      	str	r3, [r7, #12]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d9eb      	bls.n	800bbce <clear_lock+0xe>
	}
}
 800bbf6:	bf00      	nop
 800bbf8:	bf00      	nop
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	20000770 	.word	0x20000770

0800bc08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	78db      	ldrb	r3, [r3, #3]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d034      	beq.n	800bc86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	7858      	ldrb	r0, [r3, #1]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	f7ff fd40 	bl	800b6b4 <disk_write>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d002      	beq.n	800bc40 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	73fb      	strb	r3, [r7, #15]
 800bc3e:	e022      	b.n	800bc86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	1ad2      	subs	r2, r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d217      	bcs.n	800bc86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	789b      	ldrb	r3, [r3, #2]
 800bc5a:	613b      	str	r3, [r7, #16]
 800bc5c:	e010      	b.n	800bc80 <sync_window+0x78>
					wsect += fs->fsize;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	69db      	ldr	r3, [r3, #28]
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	4413      	add	r3, r2
 800bc66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	7858      	ldrb	r0, [r3, #1]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc72:	2301      	movs	r3, #1
 800bc74:	697a      	ldr	r2, [r7, #20]
 800bc76:	f7ff fd1d 	bl	800b6b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	613b      	str	r3, [r7, #16]
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d8eb      	bhi.n	800bc5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d01b      	beq.n	800bce0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7ff ffad 	bl	800bc08 <sync_window>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d113      	bne.n	800bce0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	7858      	ldrb	r0, [r3, #1]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	f7ff fcd5 	bl	800b674 <disk_read>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d004      	beq.n	800bcda <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bcd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
	...

0800bcec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff ff87 	bl	800bc08 <sync_window>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bcfe:	7bfb      	ldrb	r3, [r7, #15]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d158      	bne.n	800bdb6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	2b03      	cmp	r3, #3
 800bd0a:	d148      	bne.n	800bd9e <sync_fs+0xb2>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	791b      	ldrb	r3, [r3, #4]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d144      	bne.n	800bd9e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	3334      	adds	r3, #52	; 0x34
 800bd18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff fda9 	bl	800b876 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3334      	adds	r3, #52	; 0x34
 800bd28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd2c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff fd38 	bl	800b7a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3334      	adds	r3, #52	; 0x34
 800bd3a:	4921      	ldr	r1, [pc, #132]	; (800bdc0 <sync_fs+0xd4>)
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7ff fd4d 	bl	800b7dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	3334      	adds	r3, #52	; 0x34
 800bd46:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bd4a:	491e      	ldr	r1, [pc, #120]	; (800bdc4 <sync_fs+0xd8>)
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7ff fd45 	bl	800b7dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3334      	adds	r3, #52	; 0x34
 800bd56:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	695b      	ldr	r3, [r3, #20]
 800bd5e:	4619      	mov	r1, r3
 800bd60:	4610      	mov	r0, r2
 800bd62:	f7ff fd3b 	bl	800b7dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3334      	adds	r3, #52	; 0x34
 800bd6a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	4619      	mov	r1, r3
 800bd74:	4610      	mov	r0, r2
 800bd76:	f7ff fd31 	bl	800b7dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	1c5a      	adds	r2, r3, #1
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	7858      	ldrb	r0, [r3, #1]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd92:	2301      	movs	r3, #1
 800bd94:	f7ff fc8e 	bl	800b6b4 <disk_write>
			fs->fsi_flag = 0;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	785b      	ldrb	r3, [r3, #1]
 800bda2:	2200      	movs	r2, #0
 800bda4:	2100      	movs	r1, #0
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff fca4 	bl	800b6f4 <disk_ioctl>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <sync_fs+0xca>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bdb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	41615252 	.word	0x41615252
 800bdc4:	61417272 	.word	0x61417272

0800bdc8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	3b02      	subs	r3, #2
 800bdd6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	699b      	ldr	r3, [r3, #24]
 800bddc:	3b02      	subs	r3, #2
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d301      	bcc.n	800bde8 <clust2sect+0x20>
 800bde4:	2300      	movs	r3, #0
 800bde6:	e008      	b.n	800bdfa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	895b      	ldrh	r3, [r3, #10]
 800bdec:	461a      	mov	r2, r3
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	fb03 f202 	mul.w	r2, r3, r2
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf8:	4413      	add	r3, r2
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	370c      	adds	r7, #12
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b086      	sub	sp, #24
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d904      	bls.n	800be26 <get_fat+0x20>
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	683a      	ldr	r2, [r7, #0]
 800be22:	429a      	cmp	r2, r3
 800be24:	d302      	bcc.n	800be2c <get_fat+0x26>
		val = 1;	/* Internal error */
 800be26:	2301      	movs	r3, #1
 800be28:	617b      	str	r3, [r7, #20]
 800be2a:	e08f      	b.n	800bf4c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800be2c:	f04f 33ff 	mov.w	r3, #4294967295
 800be30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	2b03      	cmp	r3, #3
 800be38:	d062      	beq.n	800bf00 <get_fat+0xfa>
 800be3a:	2b03      	cmp	r3, #3
 800be3c:	dc7c      	bgt.n	800bf38 <get_fat+0x132>
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d002      	beq.n	800be48 <get_fat+0x42>
 800be42:	2b02      	cmp	r3, #2
 800be44:	d042      	beq.n	800becc <get_fat+0xc6>
 800be46:	e077      	b.n	800bf38 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	085b      	lsrs	r3, r3, #1
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	4413      	add	r3, r2
 800be54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	0a5b      	lsrs	r3, r3, #9
 800be5e:	4413      	add	r3, r2
 800be60:	4619      	mov	r1, r3
 800be62:	6938      	ldr	r0, [r7, #16]
 800be64:	f7ff ff14 	bl	800bc90 <move_window>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d167      	bne.n	800bf3e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	60fa      	str	r2, [r7, #12]
 800be74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	4413      	add	r3, r2
 800be7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	0a5b      	lsrs	r3, r3, #9
 800be8a:	4413      	add	r3, r2
 800be8c:	4619      	mov	r1, r3
 800be8e:	6938      	ldr	r0, [r7, #16]
 800be90:	f7ff fefe 	bl	800bc90 <move_window>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d153      	bne.n	800bf42 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	4413      	add	r3, r2
 800bea4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bea8:	021b      	lsls	r3, r3, #8
 800beaa:	461a      	mov	r2, r3
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	4313      	orrs	r3, r2
 800beb0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <get_fat+0xbc>
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	091b      	lsrs	r3, r3, #4
 800bec0:	e002      	b.n	800bec8 <get_fat+0xc2>
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bec8:	617b      	str	r3, [r7, #20]
			break;
 800beca:	e03f      	b.n	800bf4c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	0a1b      	lsrs	r3, r3, #8
 800bed4:	4413      	add	r3, r2
 800bed6:	4619      	mov	r1, r3
 800bed8:	6938      	ldr	r0, [r7, #16]
 800beda:	f7ff fed9 	bl	800bc90 <move_window>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d130      	bne.n	800bf46 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bef2:	4413      	add	r3, r2
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7ff fc1b 	bl	800b730 <ld_word>
 800befa:	4603      	mov	r3, r0
 800befc:	617b      	str	r3, [r7, #20]
			break;
 800befe:	e025      	b.n	800bf4c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	09db      	lsrs	r3, r3, #7
 800bf08:	4413      	add	r3, r2
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6938      	ldr	r0, [r7, #16]
 800bf0e:	f7ff febf 	bl	800bc90 <move_window>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d118      	bne.n	800bf4a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bf26:	4413      	add	r3, r2
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7ff fc19 	bl	800b760 <ld_dword>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bf34:	617b      	str	r3, [r7, #20]
			break;
 800bf36:	e009      	b.n	800bf4c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bf38:	2301      	movs	r3, #1
 800bf3a:	617b      	str	r3, [r7, #20]
 800bf3c:	e006      	b.n	800bf4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf3e:	bf00      	nop
 800bf40:	e004      	b.n	800bf4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf42:	bf00      	nop
 800bf44:	e002      	b.n	800bf4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf46:	bf00      	nop
 800bf48:	e000      	b.n	800bf4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf4a:	bf00      	nop
		}
	}

	return val;
 800bf4c:	697b      	ldr	r3, [r7, #20]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3718      	adds	r7, #24
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bf56:	b590      	push	{r4, r7, lr}
 800bf58:	b089      	sub	sp, #36	; 0x24
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	60f8      	str	r0, [r7, #12]
 800bf5e:	60b9      	str	r1, [r7, #8]
 800bf60:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bf62:	2302      	movs	r3, #2
 800bf64:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	f240 80d2 	bls.w	800c112 <put_fat+0x1bc>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	f080 80cc 	bcs.w	800c112 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	2b03      	cmp	r3, #3
 800bf80:	f000 8096 	beq.w	800c0b0 <put_fat+0x15a>
 800bf84:	2b03      	cmp	r3, #3
 800bf86:	f300 80cd 	bgt.w	800c124 <put_fat+0x1ce>
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d002      	beq.n	800bf94 <put_fat+0x3e>
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d06e      	beq.n	800c070 <put_fat+0x11a>
 800bf92:	e0c7      	b.n	800c124 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	61bb      	str	r3, [r7, #24]
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	085b      	lsrs	r3, r3, #1
 800bf9c:	69ba      	ldr	r2, [r7, #24]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	0a5b      	lsrs	r3, r3, #9
 800bfaa:	4413      	add	r3, r2
 800bfac:	4619      	mov	r1, r3
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f7ff fe6e 	bl	800bc90 <move_window>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfb8:	7ffb      	ldrb	r3, [r7, #31]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f040 80ab 	bne.w	800c116 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	1c59      	adds	r1, r3, #1
 800bfca:	61b9      	str	r1, [r7, #24]
 800bfcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfd0:	4413      	add	r3, r2
 800bfd2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00d      	beq.n	800bffa <put_fat+0xa4>
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	b25b      	sxtb	r3, r3
 800bfe4:	f003 030f 	and.w	r3, r3, #15
 800bfe8:	b25a      	sxtb	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	011b      	lsls	r3, r3, #4
 800bff0:	b25b      	sxtb	r3, r3
 800bff2:	4313      	orrs	r3, r2
 800bff4:	b25b      	sxtb	r3, r3
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	e001      	b.n	800bffe <put_fat+0xa8>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2201      	movs	r2, #1
 800c006:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	0a5b      	lsrs	r3, r3, #9
 800c010:	4413      	add	r3, r2
 800c012:	4619      	mov	r1, r3
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f7ff fe3b 	bl	800bc90 <move_window>
 800c01a:	4603      	mov	r3, r0
 800c01c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c01e:	7ffb      	ldrb	r3, [r7, #31]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d17a      	bne.n	800c11a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c030:	4413      	add	r3, r2
 800c032:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	f003 0301 	and.w	r3, r3, #1
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d003      	beq.n	800c046 <put_fat+0xf0>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	091b      	lsrs	r3, r3, #4
 800c042:	b2db      	uxtb	r3, r3
 800c044:	e00e      	b.n	800c064 <put_fat+0x10e>
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	b25b      	sxtb	r3, r3
 800c04c:	f023 030f 	bic.w	r3, r3, #15
 800c050:	b25a      	sxtb	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	0a1b      	lsrs	r3, r3, #8
 800c056:	b25b      	sxtb	r3, r3
 800c058:	f003 030f 	and.w	r3, r3, #15
 800c05c:	b25b      	sxtb	r3, r3
 800c05e:	4313      	orrs	r3, r2
 800c060:	b25b      	sxtb	r3, r3
 800c062:	b2db      	uxtb	r3, r3
 800c064:	697a      	ldr	r2, [r7, #20]
 800c066:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2201      	movs	r2, #1
 800c06c:	70da      	strb	r2, [r3, #3]
			break;
 800c06e:	e059      	b.n	800c124 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	0a1b      	lsrs	r3, r3, #8
 800c078:	4413      	add	r3, r2
 800c07a:	4619      	mov	r1, r3
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f7ff fe07 	bl	800bc90 <move_window>
 800c082:	4603      	mov	r3, r0
 800c084:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c086:	7ffb      	ldrb	r3, [r7, #31]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d148      	bne.n	800c11e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	005b      	lsls	r3, r3, #1
 800c096:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c09a:	4413      	add	r3, r2
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	b292      	uxth	r2, r2
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff fb7f 	bl	800b7a6 <st_word>
			fs->wflag = 1;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	70da      	strb	r2, [r3, #3]
			break;
 800c0ae:	e039      	b.n	800c124 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	09db      	lsrs	r3, r3, #7
 800c0b8:	4413      	add	r3, r2
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f7ff fde7 	bl	800bc90 <move_window>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0c6:	7ffb      	ldrb	r3, [r7, #31]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d12a      	bne.n	800c122 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c0e0:	4413      	add	r3, r2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7ff fb3c 	bl	800b760 <ld_dword>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c0ee:	4323      	orrs	r3, r4
 800c0f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c100:	4413      	add	r3, r2
 800c102:	6879      	ldr	r1, [r7, #4]
 800c104:	4618      	mov	r0, r3
 800c106:	f7ff fb69 	bl	800b7dc <st_dword>
			fs->wflag = 1;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2201      	movs	r2, #1
 800c10e:	70da      	strb	r2, [r3, #3]
			break;
 800c110:	e008      	b.n	800c124 <put_fat+0x1ce>
		}
	}
 800c112:	bf00      	nop
 800c114:	e006      	b.n	800c124 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c116:	bf00      	nop
 800c118:	e004      	b.n	800c124 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c11a:	bf00      	nop
 800c11c:	e002      	b.n	800c124 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c11e:	bf00      	nop
 800c120:	e000      	b.n	800c124 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c122:	bf00      	nop
	return res;
 800c124:	7ffb      	ldrb	r3, [r7, #31]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3724      	adds	r7, #36	; 0x24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd90      	pop	{r4, r7, pc}

0800c12e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b088      	sub	sp, #32
 800c132:	af00      	add	r7, sp, #0
 800c134:	60f8      	str	r0, [r7, #12]
 800c136:	60b9      	str	r1, [r7, #8]
 800c138:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d904      	bls.n	800c154 <remove_chain+0x26>
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	429a      	cmp	r2, r3
 800c152:	d301      	bcc.n	800c158 <remove_chain+0x2a>
 800c154:	2302      	movs	r3, #2
 800c156:	e04b      	b.n	800c1f0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00c      	beq.n	800c178 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c15e:	f04f 32ff 	mov.w	r2, #4294967295
 800c162:	6879      	ldr	r1, [r7, #4]
 800c164:	69b8      	ldr	r0, [r7, #24]
 800c166:	f7ff fef6 	bl	800bf56 <put_fat>
 800c16a:	4603      	mov	r3, r0
 800c16c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c16e:	7ffb      	ldrb	r3, [r7, #31]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d001      	beq.n	800c178 <remove_chain+0x4a>
 800c174:	7ffb      	ldrb	r3, [r7, #31]
 800c176:	e03b      	b.n	800c1f0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c178:	68b9      	ldr	r1, [r7, #8]
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f7ff fe43 	bl	800be06 <get_fat>
 800c180:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d031      	beq.n	800c1ec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d101      	bne.n	800c192 <remove_chain+0x64>
 800c18e:	2302      	movs	r3, #2
 800c190:	e02e      	b.n	800c1f0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c198:	d101      	bne.n	800c19e <remove_chain+0x70>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e028      	b.n	800c1f0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c19e:	2200      	movs	r2, #0
 800c1a0:	68b9      	ldr	r1, [r7, #8]
 800c1a2:	69b8      	ldr	r0, [r7, #24]
 800c1a4:	f7ff fed7 	bl	800bf56 <put_fat>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c1ac:	7ffb      	ldrb	r3, [r7, #31]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d001      	beq.n	800c1b6 <remove_chain+0x88>
 800c1b2:	7ffb      	ldrb	r3, [r7, #31]
 800c1b4:	e01c      	b.n	800c1f0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	695a      	ldr	r2, [r3, #20]
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	3b02      	subs	r3, #2
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d20b      	bcs.n	800c1dc <remove_chain+0xae>
			fs->free_clst++;
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	695b      	ldr	r3, [r3, #20]
 800c1c8:	1c5a      	adds	r2, r3, #1
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	791b      	ldrb	r3, [r3, #4]
 800c1d2:	f043 0301 	orr.w	r3, r3, #1
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d3c6      	bcc.n	800c178 <remove_chain+0x4a>
 800c1ea:	e000      	b.n	800c1ee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c1ec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3720      	adds	r7, #32
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10d      	bne.n	800c22a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <create_chain+0x2c>
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	69ba      	ldr	r2, [r7, #24]
 800c220:	429a      	cmp	r2, r3
 800c222:	d31b      	bcc.n	800c25c <create_chain+0x64>
 800c224:	2301      	movs	r3, #1
 800c226:	61bb      	str	r3, [r7, #24]
 800c228:	e018      	b.n	800c25c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff fdea 	bl	800be06 <get_fat>
 800c232:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2b01      	cmp	r3, #1
 800c238:	d801      	bhi.n	800c23e <create_chain+0x46>
 800c23a:	2301      	movs	r3, #1
 800c23c:	e070      	b.n	800c320 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c244:	d101      	bne.n	800c24a <create_chain+0x52>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	e06a      	b.n	800c320 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	429a      	cmp	r2, r3
 800c252:	d201      	bcs.n	800c258 <create_chain+0x60>
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	e063      	b.n	800c320 <create_chain+0x128>
		scl = clst;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	3301      	adds	r3, #1
 800c264:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	69fa      	ldr	r2, [r7, #28]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d307      	bcc.n	800c280 <create_chain+0x88>
				ncl = 2;
 800c270:	2302      	movs	r3, #2
 800c272:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c274:	69fa      	ldr	r2, [r7, #28]
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d901      	bls.n	800c280 <create_chain+0x88>
 800c27c:	2300      	movs	r3, #0
 800c27e:	e04f      	b.n	800c320 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c280:	69f9      	ldr	r1, [r7, #28]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff fdbf 	bl	800be06 <get_fat>
 800c288:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00e      	beq.n	800c2ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d003      	beq.n	800c29e <create_chain+0xa6>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29c:	d101      	bne.n	800c2a2 <create_chain+0xaa>
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	e03e      	b.n	800c320 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c2a2:	69fa      	ldr	r2, [r7, #28]
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d1da      	bne.n	800c260 <create_chain+0x68>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	e038      	b.n	800c320 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c2ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b4:	69f9      	ldr	r1, [r7, #28]
 800c2b6:	6938      	ldr	r0, [r7, #16]
 800c2b8:	f7ff fe4d 	bl	800bf56 <put_fat>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d109      	bne.n	800c2da <create_chain+0xe2>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d006      	beq.n	800c2da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c2cc:	69fa      	ldr	r2, [r7, #28]
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6938      	ldr	r0, [r7, #16]
 800c2d2:	f7ff fe40 	bl	800bf56 <put_fat>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d116      	bne.n	800c30e <create_chain+0x116>
		fs->last_clst = ncl;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	69fa      	ldr	r2, [r7, #28]
 800c2e4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	695a      	ldr	r2, [r3, #20]
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	3b02      	subs	r3, #2
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d804      	bhi.n	800c2fe <create_chain+0x106>
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	695b      	ldr	r3, [r3, #20]
 800c2f8:	1e5a      	subs	r2, r3, #1
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	791b      	ldrb	r3, [r3, #4]
 800c302:	f043 0301 	orr.w	r3, r3, #1
 800c306:	b2da      	uxtb	r2, r3
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	711a      	strb	r2, [r3, #4]
 800c30c:	e007      	b.n	800c31e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d102      	bne.n	800c31a <create_chain+0x122>
 800c314:	f04f 33ff 	mov.w	r3, #4294967295
 800c318:	e000      	b.n	800c31c <create_chain+0x124>
 800c31a:	2301      	movs	r3, #1
 800c31c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c31e:	69fb      	ldr	r3, [r7, #28]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3720      	adds	r7, #32
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c328:	b480      	push	{r7}
 800c32a:	b087      	sub	sp, #28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33c:	3304      	adds	r3, #4
 800c33e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	0a5b      	lsrs	r3, r3, #9
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	8952      	ldrh	r2, [r2, #10]
 800c348:	fbb3 f3f2 	udiv	r3, r3, r2
 800c34c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	1d1a      	adds	r2, r3, #4
 800c352:	613a      	str	r2, [r7, #16]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <clmt_clust+0x3a>
 800c35e:	2300      	movs	r3, #0
 800c360:	e010      	b.n	800c384 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	429a      	cmp	r2, r3
 800c368:	d307      	bcc.n	800c37a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	1ad3      	subs	r3, r2, r3
 800c370:	617b      	str	r3, [r7, #20]
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	3304      	adds	r3, #4
 800c376:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c378:	e7e9      	b.n	800c34e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c37a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	4413      	add	r3, r2
}
 800c384:	4618      	mov	r0, r3
 800c386:	371c      	adds	r7, #28
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3a6:	d204      	bcs.n	800c3b2 <dir_sdi+0x22>
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	f003 031f 	and.w	r3, r3, #31
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	e063      	b.n	800c47e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d106      	bne.n	800c3d6 <dir_sdi+0x46>
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d902      	bls.n	800c3d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10c      	bne.n	800c3f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	095b      	lsrs	r3, r3, #5
 800c3e0:	693a      	ldr	r2, [r7, #16]
 800c3e2:	8912      	ldrh	r2, [r2, #8]
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d301      	bcc.n	800c3ec <dir_sdi+0x5c>
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	e048      	b.n	800c47e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	61da      	str	r2, [r3, #28]
 800c3f4:	e029      	b.n	800c44a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	895b      	ldrh	r3, [r3, #10]
 800c3fa:	025b      	lsls	r3, r3, #9
 800c3fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3fe:	e019      	b.n	800c434 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6979      	ldr	r1, [r7, #20]
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff fcfe 	bl	800be06 <get_fat>
 800c40a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c412:	d101      	bne.n	800c418 <dir_sdi+0x88>
 800c414:	2301      	movs	r3, #1
 800c416:	e032      	b.n	800c47e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d904      	bls.n	800c428 <dir_sdi+0x98>
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	699b      	ldr	r3, [r3, #24]
 800c422:	697a      	ldr	r2, [r7, #20]
 800c424:	429a      	cmp	r2, r3
 800c426:	d301      	bcc.n	800c42c <dir_sdi+0x9c>
 800c428:	2302      	movs	r3, #2
 800c42a:	e028      	b.n	800c47e <dir_sdi+0xee>
			ofs -= csz;
 800c42c:	683a      	ldr	r2, [r7, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	1ad3      	subs	r3, r2, r3
 800c432:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d2e1      	bcs.n	800c400 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c43c:	6979      	ldr	r1, [r7, #20]
 800c43e:	6938      	ldr	r0, [r7, #16]
 800c440:	f7ff fcc2 	bl	800bdc8 <clust2sect>
 800c444:	4602      	mov	r2, r0
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	697a      	ldr	r2, [r7, #20]
 800c44e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	69db      	ldr	r3, [r3, #28]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <dir_sdi+0xcc>
 800c458:	2302      	movs	r3, #2
 800c45a:	e010      	b.n	800c47e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	69da      	ldr	r2, [r3, #28]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	0a5b      	lsrs	r3, r3, #9
 800c464:	441a      	add	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c476:	441a      	add	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b086      	sub	sp, #24
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	3320      	adds	r3, #32
 800c49c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <dir_next+0x28>
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4ac:	d301      	bcc.n	800c4b2 <dir_next+0x2c>
 800c4ae:	2304      	movs	r3, #4
 800c4b0:	e0aa      	b.n	800c608 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f040 8098 	bne.w	800c5ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	69db      	ldr	r3, [r3, #28]
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10b      	bne.n	800c4e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	095b      	lsrs	r3, r3, #5
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	8912      	ldrh	r2, [r2, #8]
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	f0c0 8088 	bcc.w	800c5ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	61da      	str	r2, [r3, #28]
 800c4e4:	2304      	movs	r3, #4
 800c4e6:	e08f      	b.n	800c608 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	0a5b      	lsrs	r3, r3, #9
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	8952      	ldrh	r2, [r2, #10]
 800c4f0:	3a01      	subs	r2, #1
 800c4f2:	4013      	ands	r3, r2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d17a      	bne.n	800c5ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	4619      	mov	r1, r3
 800c500:	4610      	mov	r0, r2
 800c502:	f7ff fc80 	bl	800be06 <get_fat>
 800c506:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d801      	bhi.n	800c512 <dir_next+0x8c>
 800c50e:	2302      	movs	r3, #2
 800c510:	e07a      	b.n	800c608 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c518:	d101      	bne.n	800c51e <dir_next+0x98>
 800c51a:	2301      	movs	r3, #1
 800c51c:	e074      	b.n	800c608 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	697a      	ldr	r2, [r7, #20]
 800c524:	429a      	cmp	r2, r3
 800c526:	d358      	bcc.n	800c5da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d104      	bne.n	800c538 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	61da      	str	r2, [r3, #28]
 800c534:	2304      	movs	r3, #4
 800c536:	e067      	b.n	800c608 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	4619      	mov	r1, r3
 800c540:	4610      	mov	r0, r2
 800c542:	f7ff fe59 	bl	800c1f8 <create_chain>
 800c546:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d101      	bne.n	800c552 <dir_next+0xcc>
 800c54e:	2307      	movs	r3, #7
 800c550:	e05a      	b.n	800c608 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d101      	bne.n	800c55c <dir_next+0xd6>
 800c558:	2302      	movs	r3, #2
 800c55a:	e055      	b.n	800c608 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c562:	d101      	bne.n	800c568 <dir_next+0xe2>
 800c564:	2301      	movs	r3, #1
 800c566:	e04f      	b.n	800c608 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f7ff fb4d 	bl	800bc08 <sync_window>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d001      	beq.n	800c578 <dir_next+0xf2>
 800c574:	2301      	movs	r3, #1
 800c576:	e047      	b.n	800c608 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3334      	adds	r3, #52	; 0x34
 800c57c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c580:	2100      	movs	r1, #0
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff f977 	bl	800b876 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]
 800c58c:	6979      	ldr	r1, [r7, #20]
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f7ff fc1a 	bl	800bdc8 <clust2sect>
 800c594:	4602      	mov	r2, r0
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	631a      	str	r2, [r3, #48]	; 0x30
 800c59a:	e012      	b.n	800c5c2 <dir_next+0x13c>
						fs->wflag = 1;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f7ff fb30 	bl	800bc08 <sync_window>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <dir_next+0x12c>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e02a      	b.n	800c608 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	613b      	str	r3, [r7, #16]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5bc:	1c5a      	adds	r2, r3, #1
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	631a      	str	r2, [r3, #48]	; 0x30
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	895b      	ldrh	r3, [r3, #10]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d3e6      	bcc.n	800c59c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	1ad2      	subs	r2, r2, r3
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	697a      	ldr	r2, [r7, #20]
 800c5de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c5e0:	6979      	ldr	r1, [r7, #20]
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	f7ff fbf0 	bl	800bdc8 <clust2sect>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c600:	441a      	add	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c620:	2100      	movs	r1, #0
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7ff feb4 	bl	800c390 <dir_sdi>
 800c628:	4603      	mov	r3, r0
 800c62a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c62c:	7dfb      	ldrb	r3, [r7, #23]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d12b      	bne.n	800c68a <dir_alloc+0x7a>
		n = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	69db      	ldr	r3, [r3, #28]
 800c63a:	4619      	mov	r1, r3
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f7ff fb27 	bl	800bc90 <move_window>
 800c642:	4603      	mov	r3, r0
 800c644:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c646:	7dfb      	ldrb	r3, [r7, #23]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d11d      	bne.n	800c688 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6a1b      	ldr	r3, [r3, #32]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	2be5      	cmp	r3, #229	; 0xe5
 800c654:	d004      	beq.n	800c660 <dir_alloc+0x50>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d107      	bne.n	800c670 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	3301      	adds	r3, #1
 800c664:	613b      	str	r3, [r7, #16]
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d102      	bne.n	800c674 <dir_alloc+0x64>
 800c66e:	e00c      	b.n	800c68a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c670:	2300      	movs	r3, #0
 800c672:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c674:	2101      	movs	r1, #1
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff ff05 	bl	800c486 <dir_next>
 800c67c:	4603      	mov	r3, r0
 800c67e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c680:	7dfb      	ldrb	r3, [r7, #23]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d0d7      	beq.n	800c636 <dir_alloc+0x26>
 800c686:	e000      	b.n	800c68a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c688:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
 800c68c:	2b04      	cmp	r3, #4
 800c68e:	d101      	bne.n	800c694 <dir_alloc+0x84>
 800c690:	2307      	movs	r3, #7
 800c692:	75fb      	strb	r3, [r7, #23]
	return res;
 800c694:	7dfb      	ldrb	r3, [r7, #23]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3718      	adds	r7, #24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b084      	sub	sp, #16
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	331a      	adds	r3, #26
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7ff f83f 	bl	800b730 <ld_word>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	2b03      	cmp	r3, #3
 800c6bc:	d109      	bne.n	800c6d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	3314      	adds	r3, #20
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7ff f834 	bl	800b730 <ld_word>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	041b      	lsls	r3, r3, #16
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	331a      	adds	r3, #26
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	b292      	uxth	r2, r2
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7ff f857 	bl	800b7a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b03      	cmp	r3, #3
 800c6fe:	d109      	bne.n	800c714 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	f103 0214 	add.w	r2, r3, #20
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	0c1b      	lsrs	r3, r3, #16
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	4619      	mov	r1, r3
 800c70e:	4610      	mov	r0, r2
 800c710:	f7ff f849 	bl	800b7a6 <st_word>
	}
}
 800c714:	bf00      	nop
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c71c:	b590      	push	{r4, r7, lr}
 800c71e:	b087      	sub	sp, #28
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	331a      	adds	r3, #26
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff f800 	bl	800b730 <ld_word>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <cmp_lfn+0x1e>
 800c736:	2300      	movs	r3, #0
 800c738:	e059      	b.n	800c7ee <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c742:	1e5a      	subs	r2, r3, #1
 800c744:	4613      	mov	r3, r2
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	4413      	add	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c750:	2301      	movs	r3, #1
 800c752:	81fb      	strh	r3, [r7, #14]
 800c754:	2300      	movs	r3, #0
 800c756:	613b      	str	r3, [r7, #16]
 800c758:	e033      	b.n	800c7c2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c75a:	4a27      	ldr	r2, [pc, #156]	; (800c7f8 <cmp_lfn+0xdc>)
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	4413      	add	r3, r2
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe ffe1 	bl	800b730 <ld_word>
 800c76e:	4603      	mov	r3, r0
 800c770:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c772:	89fb      	ldrh	r3, [r7, #14]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01a      	beq.n	800c7ae <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	2bfe      	cmp	r3, #254	; 0xfe
 800c77c:	d812      	bhi.n	800c7a4 <cmp_lfn+0x88>
 800c77e:	89bb      	ldrh	r3, [r7, #12]
 800c780:	4618      	mov	r0, r3
 800c782:	f002 f883 	bl	800e88c <ff_wtoupper>
 800c786:	4603      	mov	r3, r0
 800c788:	461c      	mov	r4, r3
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	617a      	str	r2, [r7, #20]
 800c790:	005b      	lsls	r3, r3, #1
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	4413      	add	r3, r2
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	4618      	mov	r0, r3
 800c79a:	f002 f877 	bl	800e88c <ff_wtoupper>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	429c      	cmp	r4, r3
 800c7a2:	d001      	beq.n	800c7a8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	e022      	b.n	800c7ee <cmp_lfn+0xd2>
			}
			wc = uc;
 800c7a8:	89bb      	ldrh	r3, [r7, #12]
 800c7aa:	81fb      	strh	r3, [r7, #14]
 800c7ac:	e006      	b.n	800c7bc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c7ae:	89bb      	ldrh	r3, [r7, #12]
 800c7b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d001      	beq.n	800c7bc <cmp_lfn+0xa0>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e018      	b.n	800c7ee <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	613b      	str	r3, [r7, #16]
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	2b0c      	cmp	r3, #12
 800c7c6:	d9c8      	bls.n	800c75a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00b      	beq.n	800c7ec <cmp_lfn+0xd0>
 800c7d4:	89fb      	ldrh	r3, [r7, #14]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d008      	beq.n	800c7ec <cmp_lfn+0xd0>
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d001      	beq.n	800c7ec <cmp_lfn+0xd0>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	e000      	b.n	800c7ee <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c7ec:	2301      	movs	r3, #1
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	371c      	adds	r7, #28
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd90      	pop	{r4, r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	08014f5c 	.word	0x08014f5c

0800c7fc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	331a      	adds	r3, #26
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe ff90 	bl	800b730 <ld_word>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d001      	beq.n	800c81a <pick_lfn+0x1e>
 800c816:	2300      	movs	r3, #0
 800c818:	e04d      	b.n	800c8b6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c822:	1e5a      	subs	r2, r3, #1
 800c824:	4613      	mov	r3, r2
 800c826:	005b      	lsls	r3, r3, #1
 800c828:	4413      	add	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c830:	2301      	movs	r3, #1
 800c832:	81fb      	strh	r3, [r7, #14]
 800c834:	2300      	movs	r3, #0
 800c836:	613b      	str	r3, [r7, #16]
 800c838:	e028      	b.n	800c88c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c83a:	4a21      	ldr	r2, [pc, #132]	; (800c8c0 <pick_lfn+0xc4>)
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	4413      	add	r3, r2
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	461a      	mov	r2, r3
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	4413      	add	r3, r2
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fe ff71 	bl	800b730 <ld_word>
 800c84e:	4603      	mov	r3, r0
 800c850:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c852:	89fb      	ldrh	r3, [r7, #14]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00f      	beq.n	800c878 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	2bfe      	cmp	r3, #254	; 0xfe
 800c85c:	d901      	bls.n	800c862 <pick_lfn+0x66>
 800c85e:	2300      	movs	r3, #0
 800c860:	e029      	b.n	800c8b6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c862:	89bb      	ldrh	r3, [r7, #12]
 800c864:	81fb      	strh	r3, [r7, #14]
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	1c5a      	adds	r2, r3, #1
 800c86a:	617a      	str	r2, [r7, #20]
 800c86c:	005b      	lsls	r3, r3, #1
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	4413      	add	r3, r2
 800c872:	89fa      	ldrh	r2, [r7, #14]
 800c874:	801a      	strh	r2, [r3, #0]
 800c876:	e006      	b.n	800c886 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c878:	89bb      	ldrh	r3, [r7, #12]
 800c87a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c87e:	4293      	cmp	r3, r2
 800c880:	d001      	beq.n	800c886 <pick_lfn+0x8a>
 800c882:	2300      	movs	r3, #0
 800c884:	e017      	b.n	800c8b6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	3301      	adds	r3, #1
 800c88a:	613b      	str	r3, [r7, #16]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	2b0c      	cmp	r3, #12
 800c890:	d9d3      	bls.n	800c83a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00a      	beq.n	800c8b4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	2bfe      	cmp	r3, #254	; 0xfe
 800c8a2:	d901      	bls.n	800c8a8 <pick_lfn+0xac>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	e006      	b.n	800c8b6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	005b      	lsls	r3, r3, #1
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	4413      	add	r3, r2
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c8b4:	2301      	movs	r3, #1
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3718      	adds	r7, #24
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	08014f5c 	.word	0x08014f5c

0800c8c4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b088      	sub	sp, #32
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	71fb      	strb	r3, [r7, #7]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	330d      	adds	r3, #13
 800c8de:	79ba      	ldrb	r2, [r7, #6]
 800c8e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	330b      	adds	r3, #11
 800c8e6:	220f      	movs	r2, #15
 800c8e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	330c      	adds	r3, #12
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	331a      	adds	r3, #26
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fe ff54 	bl	800b7a6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c8fe:	79fb      	ldrb	r3, [r7, #7]
 800c900:	1e5a      	subs	r2, r3, #1
 800c902:	4613      	mov	r3, r2
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	4413      	add	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4413      	add	r3, r2
 800c90c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	82fb      	strh	r3, [r7, #22]
 800c912:	2300      	movs	r3, #0
 800c914:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c916:	8afb      	ldrh	r3, [r7, #22]
 800c918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d007      	beq.n	800c930 <put_lfn+0x6c>
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	1c5a      	adds	r2, r3, #1
 800c924:	61fa      	str	r2, [r7, #28]
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	4413      	add	r3, r2
 800c92c:	881b      	ldrh	r3, [r3, #0]
 800c92e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c930:	4a17      	ldr	r2, [pc, #92]	; (800c990 <put_lfn+0xcc>)
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	4413      	add	r3, r2
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	461a      	mov	r2, r3
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	4413      	add	r3, r2
 800c93e:	8afa      	ldrh	r2, [r7, #22]
 800c940:	4611      	mov	r1, r2
 800c942:	4618      	mov	r0, r3
 800c944:	f7fe ff2f 	bl	800b7a6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c948:	8afb      	ldrh	r3, [r7, #22]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d102      	bne.n	800c954 <put_lfn+0x90>
 800c94e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c952:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	3301      	adds	r3, #1
 800c958:	61bb      	str	r3, [r7, #24]
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	2b0c      	cmp	r3, #12
 800c95e:	d9da      	bls.n	800c916 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c960:	8afb      	ldrh	r3, [r7, #22]
 800c962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c966:	4293      	cmp	r3, r2
 800c968:	d006      	beq.n	800c978 <put_lfn+0xb4>
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	005b      	lsls	r3, r3, #1
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	4413      	add	r3, r2
 800c972:	881b      	ldrh	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d103      	bne.n	800c980 <put_lfn+0xbc>
 800c978:	79fb      	ldrb	r3, [r7, #7]
 800c97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c97e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	79fa      	ldrb	r2, [r7, #7]
 800c984:	701a      	strb	r2, [r3, #0]
}
 800c986:	bf00      	nop
 800c988:	3720      	adds	r7, #32
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	08014f5c 	.word	0x08014f5c

0800c994 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b08c      	sub	sp, #48	; 0x30
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
 800c9a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c9a2:	220b      	movs	r2, #11
 800c9a4:	68b9      	ldr	r1, [r7, #8]
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	f7fe ff44 	bl	800b834 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b05      	cmp	r3, #5
 800c9b0:	d92b      	bls.n	800ca0a <gen_numname+0x76>
		sr = seq;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c9b6:	e022      	b.n	800c9fe <gen_numname+0x6a>
			wc = *lfn++;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	1c9a      	adds	r2, r3, #2
 800c9bc:	607a      	str	r2, [r7, #4]
 800c9be:	881b      	ldrh	r3, [r3, #0]
 800c9c0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9c6:	e017      	b.n	800c9f8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	005a      	lsls	r2, r3, #1
 800c9cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9ce:	f003 0301 	and.w	r3, r3, #1
 800c9d2:	4413      	add	r3, r2
 800c9d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c9d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9d8:	085b      	lsrs	r3, r3, #1
 800c9da:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d005      	beq.n	800c9f2 <gen_numname+0x5e>
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c9ec:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c9f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fa:	2b0f      	cmp	r3, #15
 800c9fc:	d9e4      	bls.n	800c9c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1d8      	bne.n	800c9b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ca0a:	2307      	movs	r3, #7
 800ca0c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	f003 030f 	and.w	r3, r3, #15
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	3330      	adds	r3, #48	; 0x30
 800ca1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ca1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca22:	2b39      	cmp	r3, #57	; 0x39
 800ca24:	d904      	bls.n	800ca30 <gen_numname+0x9c>
 800ca26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca2a:	3307      	adds	r3, #7
 800ca2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ca30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca32:	1e5a      	subs	r2, r3, #1
 800ca34:	62ba      	str	r2, [r7, #40]	; 0x28
 800ca36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ca3a:	4413      	add	r3, r2
 800ca3c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ca40:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	091b      	lsrs	r3, r3, #4
 800ca48:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1de      	bne.n	800ca0e <gen_numname+0x7a>
	ns[i] = '~';
 800ca50:	f107 0214 	add.w	r2, r7, #20
 800ca54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca56:	4413      	add	r3, r2
 800ca58:	227e      	movs	r2, #126	; 0x7e
 800ca5a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	627b      	str	r3, [r7, #36]	; 0x24
 800ca60:	e002      	b.n	800ca68 <gen_numname+0xd4>
 800ca62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca64:	3301      	adds	r3, #1
 800ca66:	627b      	str	r3, [r7, #36]	; 0x24
 800ca68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d205      	bcs.n	800ca7c <gen_numname+0xe8>
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca74:	4413      	add	r3, r2
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b20      	cmp	r3, #32
 800ca7a:	d1f2      	bne.n	800ca62 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	2b07      	cmp	r3, #7
 800ca80:	d808      	bhi.n	800ca94 <gen_numname+0x100>
 800ca82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca84:	1c5a      	adds	r2, r3, #1
 800ca86:	62ba      	str	r2, [r7, #40]	; 0x28
 800ca88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ca8c:	4413      	add	r3, r2
 800ca8e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ca92:	e000      	b.n	800ca96 <gen_numname+0x102>
 800ca94:	2120      	movs	r1, #32
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	1c5a      	adds	r2, r3, #1
 800ca9a:	627a      	str	r2, [r7, #36]	; 0x24
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	4413      	add	r3, r2
 800caa0:	460a      	mov	r2, r1
 800caa2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800caa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa6:	2b07      	cmp	r3, #7
 800caa8:	d9e8      	bls.n	800ca7c <gen_numname+0xe8>
}
 800caaa:	bf00      	nop
 800caac:	bf00      	nop
 800caae:	3730      	adds	r7, #48	; 0x30
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cac0:	230b      	movs	r3, #11
 800cac2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	0852      	lsrs	r2, r2, #1
 800caca:	01db      	lsls	r3, r3, #7
 800cacc:	4313      	orrs	r3, r2
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	1c59      	adds	r1, r3, #1
 800cad4:	6079      	str	r1, [r7, #4]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	4413      	add	r3, r2
 800cada:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	3b01      	subs	r3, #1
 800cae0:	60bb      	str	r3, [r7, #8]
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1ed      	bne.n	800cac4 <sum_sfn+0x10>
	return sum;
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b086      	sub	sp, #24
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cb00:	2304      	movs	r3, #4
 800cb02:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800cb0a:	23ff      	movs	r3, #255	; 0xff
 800cb0c:	757b      	strb	r3, [r7, #21]
 800cb0e:	23ff      	movs	r3, #255	; 0xff
 800cb10:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800cb12:	e081      	b.n	800cc18 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	69db      	ldr	r3, [r3, #28]
 800cb18:	4619      	mov	r1, r3
 800cb1a:	6938      	ldr	r0, [r7, #16]
 800cb1c:	f7ff f8b8 	bl	800bc90 <move_window>
 800cb20:	4603      	mov	r3, r0
 800cb22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb24:	7dfb      	ldrb	r3, [r7, #23]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d17c      	bne.n	800cc24 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800cb32:	7dbb      	ldrb	r3, [r7, #22]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d102      	bne.n	800cb3e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cb38:	2304      	movs	r3, #4
 800cb3a:	75fb      	strb	r3, [r7, #23]
 800cb3c:	e077      	b.n	800cc2e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	330b      	adds	r3, #11
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb4a:	73fb      	strb	r3, [r7, #15]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	7bfa      	ldrb	r2, [r7, #15]
 800cb50:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cb52:	7dbb      	ldrb	r3, [r7, #22]
 800cb54:	2be5      	cmp	r3, #229	; 0xe5
 800cb56:	d00e      	beq.n	800cb76 <dir_read+0x80>
 800cb58:	7dbb      	ldrb	r3, [r7, #22]
 800cb5a:	2b2e      	cmp	r3, #46	; 0x2e
 800cb5c:	d00b      	beq.n	800cb76 <dir_read+0x80>
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
 800cb60:	f023 0320 	bic.w	r3, r3, #32
 800cb64:	2b08      	cmp	r3, #8
 800cb66:	bf0c      	ite	eq
 800cb68:	2301      	moveq	r3, #1
 800cb6a:	2300      	movne	r3, #0
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	461a      	mov	r2, r3
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d002      	beq.n	800cb7c <dir_read+0x86>
				ord = 0xFF;
 800cb76:	23ff      	movs	r3, #255	; 0xff
 800cb78:	757b      	strb	r3, [r7, #21]
 800cb7a:	e044      	b.n	800cc06 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
 800cb7e:	2b0f      	cmp	r3, #15
 800cb80:	d12f      	bne.n	800cbe2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800cb82:	7dbb      	ldrb	r3, [r7, #22]
 800cb84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00d      	beq.n	800cba8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6a1b      	ldr	r3, [r3, #32]
 800cb90:	7b5b      	ldrb	r3, [r3, #13]
 800cb92:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800cb94:	7dbb      	ldrb	r3, [r7, #22]
 800cb96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb9a:	75bb      	strb	r3, [r7, #22]
 800cb9c:	7dbb      	ldrb	r3, [r7, #22]
 800cb9e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	695a      	ldr	r2, [r3, #20]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cba8:	7dba      	ldrb	r2, [r7, #22]
 800cbaa:	7d7b      	ldrb	r3, [r7, #21]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d115      	bne.n	800cbdc <dir_read+0xe6>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a1b      	ldr	r3, [r3, #32]
 800cbb4:	330d      	adds	r3, #13
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	7d3a      	ldrb	r2, [r7, #20]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d10e      	bne.n	800cbdc <dir_read+0xe6>
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	68da      	ldr	r2, [r3, #12]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a1b      	ldr	r3, [r3, #32]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	4610      	mov	r0, r2
 800cbca:	f7ff fe17 	bl	800c7fc <pick_lfn>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <dir_read+0xe6>
 800cbd4:	7d7b      	ldrb	r3, [r7, #21]
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	e000      	b.n	800cbde <dir_read+0xe8>
 800cbdc:	23ff      	movs	r3, #255	; 0xff
 800cbde:	757b      	strb	r3, [r7, #21]
 800cbe0:	e011      	b.n	800cc06 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cbe2:	7d7b      	ldrb	r3, [r7, #21]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d109      	bne.n	800cbfc <dir_read+0x106>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6a1b      	ldr	r3, [r3, #32]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7ff ff61 	bl	800cab4 <sum_sfn>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	7d3b      	ldrb	r3, [r7, #20]
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d015      	beq.n	800cc28 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cc02:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800cc04:	e010      	b.n	800cc28 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cc06:	2100      	movs	r1, #0
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff fc3c 	bl	800c486 <dir_next>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d109      	bne.n	800cc2c <dir_read+0x136>
	while (dp->sect) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	69db      	ldr	r3, [r3, #28]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f47f af79 	bne.w	800cb14 <dir_read+0x1e>
 800cc22:	e004      	b.n	800cc2e <dir_read+0x138>
		if (res != FR_OK) break;
 800cc24:	bf00      	nop
 800cc26:	e002      	b.n	800cc2e <dir_read+0x138>
					break;
 800cc28:	bf00      	nop
 800cc2a:	e000      	b.n	800cc2e <dir_read+0x138>
		if (res != FR_OK) break;
 800cc2c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <dir_read+0x144>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	61da      	str	r2, [r3, #28]
	return res;
 800cc3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3718      	adds	r7, #24
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cc52:	2100      	movs	r1, #0
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f7ff fb9b 	bl	800c390 <dir_sdi>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d001      	beq.n	800cc68 <dir_find+0x24>
 800cc64:	7dfb      	ldrb	r3, [r7, #23]
 800cc66:	e0a9      	b.n	800cdbc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc68:	23ff      	movs	r3, #255	; 0xff
 800cc6a:	753b      	strb	r3, [r7, #20]
 800cc6c:	7d3b      	ldrb	r3, [r7, #20]
 800cc6e:	757b      	strb	r3, [r7, #21]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f04f 32ff 	mov.w	r2, #4294967295
 800cc76:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	69db      	ldr	r3, [r3, #28]
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	6938      	ldr	r0, [r7, #16]
 800cc80:	f7ff f806 	bl	800bc90 <move_window>
 800cc84:	4603      	mov	r3, r0
 800cc86:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f040 8090 	bne.w	800cdb0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a1b      	ldr	r3, [r3, #32]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cc98:	7dbb      	ldrb	r3, [r7, #22]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d102      	bne.n	800cca4 <dir_find+0x60>
 800cc9e:	2304      	movs	r3, #4
 800cca0:	75fb      	strb	r3, [r7, #23]
 800cca2:	e08a      	b.n	800cdba <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a1b      	ldr	r3, [r3, #32]
 800cca8:	330b      	adds	r3, #11
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccb0:	73fb      	strb	r3, [r7, #15]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	7bfa      	ldrb	r2, [r7, #15]
 800ccb6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ccb8:	7dbb      	ldrb	r3, [r7, #22]
 800ccba:	2be5      	cmp	r3, #229	; 0xe5
 800ccbc:	d007      	beq.n	800ccce <dir_find+0x8a>
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	f003 0308 	and.w	r3, r3, #8
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d009      	beq.n	800ccdc <dir_find+0x98>
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
 800ccca:	2b0f      	cmp	r3, #15
 800cccc:	d006      	beq.n	800ccdc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ccce:	23ff      	movs	r3, #255	; 0xff
 800ccd0:	757b      	strb	r3, [r7, #21]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd8:	631a      	str	r2, [r3, #48]	; 0x30
 800ccda:	e05e      	b.n	800cd9a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
 800ccde:	2b0f      	cmp	r3, #15
 800cce0:	d136      	bne.n	800cd50 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d154      	bne.n	800cd9a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ccf0:	7dbb      	ldrb	r3, [r7, #22]
 800ccf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00d      	beq.n	800cd16 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a1b      	ldr	r3, [r3, #32]
 800ccfe:	7b5b      	ldrb	r3, [r3, #13]
 800cd00:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cd02:	7dbb      	ldrb	r3, [r7, #22]
 800cd04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd08:	75bb      	strb	r3, [r7, #22]
 800cd0a:	7dbb      	ldrb	r3, [r7, #22]
 800cd0c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	695a      	ldr	r2, [r3, #20]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd16:	7dba      	ldrb	r2, [r7, #22]
 800cd18:	7d7b      	ldrb	r3, [r7, #21]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d115      	bne.n	800cd4a <dir_find+0x106>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a1b      	ldr	r3, [r3, #32]
 800cd22:	330d      	adds	r3, #13
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	7d3a      	ldrb	r2, [r7, #20]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d10e      	bne.n	800cd4a <dir_find+0x106>
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	68da      	ldr	r2, [r3, #12]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a1b      	ldr	r3, [r3, #32]
 800cd34:	4619      	mov	r1, r3
 800cd36:	4610      	mov	r0, r2
 800cd38:	f7ff fcf0 	bl	800c71c <cmp_lfn>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d003      	beq.n	800cd4a <dir_find+0x106>
 800cd42:	7d7b      	ldrb	r3, [r7, #21]
 800cd44:	3b01      	subs	r3, #1
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	e000      	b.n	800cd4c <dir_find+0x108>
 800cd4a:	23ff      	movs	r3, #255	; 0xff
 800cd4c:	757b      	strb	r3, [r7, #21]
 800cd4e:	e024      	b.n	800cd9a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cd50:	7d7b      	ldrb	r3, [r7, #21]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d109      	bne.n	800cd6a <dir_find+0x126>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a1b      	ldr	r3, [r3, #32]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7ff feaa 	bl	800cab4 <sum_sfn>
 800cd60:	4603      	mov	r3, r0
 800cd62:	461a      	mov	r2, r3
 800cd64:	7d3b      	ldrb	r3, [r7, #20]
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d024      	beq.n	800cdb4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd70:	f003 0301 	and.w	r3, r3, #1
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10a      	bne.n	800cd8e <dir_find+0x14a>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6a18      	ldr	r0, [r3, #32]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	3324      	adds	r3, #36	; 0x24
 800cd80:	220b      	movs	r2, #11
 800cd82:	4619      	mov	r1, r3
 800cd84:	f7fe fd92 	bl	800b8ac <mem_cmp>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d014      	beq.n	800cdb8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd8e:	23ff      	movs	r3, #255	; 0xff
 800cd90:	757b      	strb	r3, [r7, #21]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f04f 32ff 	mov.w	r2, #4294967295
 800cd98:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7ff fb72 	bl	800c486 <dir_next>
 800cda2:	4603      	mov	r3, r0
 800cda4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f43f af65 	beq.w	800cc78 <dir_find+0x34>
 800cdae:	e004      	b.n	800cdba <dir_find+0x176>
		if (res != FR_OK) break;
 800cdb0:	bf00      	nop
 800cdb2:	e002      	b.n	800cdba <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cdb4:	bf00      	nop
 800cdb6:	e000      	b.n	800cdba <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cdb8:	bf00      	nop

	return res;
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3718      	adds	r7, #24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08c      	sub	sp, #48	; 0x30
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cdd8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <dir_register+0x20>
 800cde0:	2306      	movs	r3, #6
 800cde2:	e0e0      	b.n	800cfa6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cde4:	2300      	movs	r3, #0
 800cde6:	627b      	str	r3, [r7, #36]	; 0x24
 800cde8:	e002      	b.n	800cdf0 <dir_register+0x2c>
 800cdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdec:	3301      	adds	r3, #1
 800cdee:	627b      	str	r3, [r7, #36]	; 0x24
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	68da      	ldr	r2, [r3, #12]
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	4413      	add	r3, r2
 800cdfa:	881b      	ldrh	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1f4      	bne.n	800cdea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ce06:	f107 030c 	add.w	r3, r7, #12
 800ce0a:	220c      	movs	r2, #12
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7fe fd11 	bl	800b834 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ce12:	7dfb      	ldrb	r3, [r7, #23]
 800ce14:	f003 0301 	and.w	r3, r3, #1
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d032      	beq.n	800ce82 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2240      	movs	r2, #64	; 0x40
 800ce20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ce24:	2301      	movs	r3, #1
 800ce26:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce28:	e016      	b.n	800ce58 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	68da      	ldr	r2, [r3, #12]
 800ce34:	f107 010c 	add.w	r1, r7, #12
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	f7ff fdab 	bl	800c994 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7ff ff00 	bl	800cc44 <dir_find>
 800ce44:	4603      	mov	r3, r0
 800ce46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ce4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d106      	bne.n	800ce60 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ce52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce54:	3301      	adds	r3, #1
 800ce56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5a:	2b63      	cmp	r3, #99	; 0x63
 800ce5c:	d9e5      	bls.n	800ce2a <dir_register+0x66>
 800ce5e:	e000      	b.n	800ce62 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ce60:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ce62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce64:	2b64      	cmp	r3, #100	; 0x64
 800ce66:	d101      	bne.n	800ce6c <dir_register+0xa8>
 800ce68:	2307      	movs	r3, #7
 800ce6a:	e09c      	b.n	800cfa6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ce6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce70:	2b04      	cmp	r3, #4
 800ce72:	d002      	beq.n	800ce7a <dir_register+0xb6>
 800ce74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce78:	e095      	b.n	800cfa6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ce7a:	7dfa      	ldrb	r2, [r7, #23]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
 800ce84:	f003 0302 	and.w	r3, r3, #2
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d007      	beq.n	800ce9c <dir_register+0xd8>
 800ce8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8e:	330c      	adds	r3, #12
 800ce90:	4a47      	ldr	r2, [pc, #284]	; (800cfb0 <dir_register+0x1ec>)
 800ce92:	fba2 2303 	umull	r2, r3, r2, r3
 800ce96:	089b      	lsrs	r3, r3, #2
 800ce98:	3301      	adds	r3, #1
 800ce9a:	e000      	b.n	800ce9e <dir_register+0xda>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cea0:	6a39      	ldr	r1, [r7, #32]
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7ff fbb4 	bl	800c610 <dir_alloc>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ceae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d148      	bne.n	800cf48 <dir_register+0x184>
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	623b      	str	r3, [r7, #32]
 800cebc:	6a3b      	ldr	r3, [r7, #32]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d042      	beq.n	800cf48 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	695a      	ldr	r2, [r3, #20]
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	015b      	lsls	r3, r3, #5
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	4619      	mov	r1, r3
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7ff fa5e 	bl	800c390 <dir_sdi>
 800ced4:	4603      	mov	r3, r0
 800ced6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ceda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d132      	bne.n	800cf48 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	3324      	adds	r3, #36	; 0x24
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7ff fde4 	bl	800cab4 <sum_sfn>
 800ceec:	4603      	mov	r3, r0
 800ceee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	69db      	ldr	r3, [r3, #28]
 800cef4:	4619      	mov	r1, r3
 800cef6:	69f8      	ldr	r0, [r7, #28]
 800cef8:	f7fe feca 	bl	800bc90 <move_window>
 800cefc:	4603      	mov	r3, r0
 800cefe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cf02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d11d      	bne.n	800cf46 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	68d8      	ldr	r0, [r3, #12]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a19      	ldr	r1, [r3, #32]
 800cf12:	6a3b      	ldr	r3, [r7, #32]
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	7efb      	ldrb	r3, [r7, #27]
 800cf18:	f7ff fcd4 	bl	800c8c4 <put_lfn>
				fs->wflag = 1;
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cf22:	2100      	movs	r1, #0
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f7ff faae 	bl	800c486 <dir_next>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cf30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d107      	bne.n	800cf48 <dir_register+0x184>
 800cf38:	6a3b      	ldr	r3, [r7, #32]
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	623b      	str	r3, [r7, #32]
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1d5      	bne.n	800cef0 <dir_register+0x12c>
 800cf44:	e000      	b.n	800cf48 <dir_register+0x184>
				if (res != FR_OK) break;
 800cf46:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cf48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d128      	bne.n	800cfa2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	69db      	ldr	r3, [r3, #28]
 800cf54:	4619      	mov	r1, r3
 800cf56:	69f8      	ldr	r0, [r7, #28]
 800cf58:	f7fe fe9a 	bl	800bc90 <move_window>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cf62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d11b      	bne.n	800cfa2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	2220      	movs	r2, #32
 800cf70:	2100      	movs	r1, #0
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fe fc7f 	bl	800b876 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6a18      	ldr	r0, [r3, #32]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	3324      	adds	r3, #36	; 0x24
 800cf80:	220b      	movs	r2, #11
 800cf82:	4619      	mov	r1, r3
 800cf84:	f7fe fc56 	bl	800b834 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a1b      	ldr	r3, [r3, #32]
 800cf92:	330c      	adds	r3, #12
 800cf94:	f002 0218 	and.w	r2, r2, #24
 800cf98:	b2d2      	uxtb	r2, r2
 800cf9a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cfa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3730      	adds	r7, #48	; 0x30
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	4ec4ec4f 	.word	0x4ec4ec4f

0800cfb4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b088      	sub	sp, #32
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	69db      	ldr	r3, [r3, #28]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f000 80c9 	beq.w	800d166 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfdc:	d032      	beq.n	800d044 <get_fileinfo+0x90>
			i = j = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	61bb      	str	r3, [r7, #24]
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cfe6:	e01b      	b.n	800d020 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cfe8:	89fb      	ldrh	r3, [r7, #14]
 800cfea:	2100      	movs	r1, #0
 800cfec:	4618      	mov	r0, r3
 800cfee:	f001 fc11 	bl	800e814 <ff_convert>
 800cff2:	4603      	mov	r3, r0
 800cff4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800cff6:	89fb      	ldrh	r3, [r7, #14]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d102      	bne.n	800d002 <get_fileinfo+0x4e>
 800cffc:	2300      	movs	r3, #0
 800cffe:	61fb      	str	r3, [r7, #28]
 800d000:	e01a      	b.n	800d038 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	2bfe      	cmp	r3, #254	; 0xfe
 800d006:	d902      	bls.n	800d00e <get_fileinfo+0x5a>
 800d008:	2300      	movs	r3, #0
 800d00a:	61fb      	str	r3, [r7, #28]
 800d00c:	e014      	b.n	800d038 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	1c5a      	adds	r2, r3, #1
 800d012:	61fa      	str	r2, [r7, #28]
 800d014:	89fa      	ldrh	r2, [r7, #14]
 800d016:	b2d1      	uxtb	r1, r2
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	4413      	add	r3, r2
 800d01c:	460a      	mov	r2, r1
 800d01e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	68da      	ldr	r2, [r3, #12]
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	1c59      	adds	r1, r3, #1
 800d028:	61b9      	str	r1, [r7, #24]
 800d02a:	005b      	lsls	r3, r3, #1
 800d02c:	4413      	add	r3, r2
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	81fb      	strh	r3, [r7, #14]
 800d032:	89fb      	ldrh	r3, [r7, #14]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1d7      	bne.n	800cfe8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d038:	683a      	ldr	r2, [r7, #0]
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	4413      	add	r3, r2
 800d03e:	3316      	adds	r3, #22
 800d040:	2200      	movs	r2, #0
 800d042:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d044:	2300      	movs	r3, #0
 800d046:	61bb      	str	r3, [r7, #24]
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	4413      	add	r3, r2
 800d052:	3316      	adds	r3, #22
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d058:	e04c      	b.n	800d0f4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a1a      	ldr	r2, [r3, #32]
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	1c59      	adds	r1, r3, #1
 800d062:	61f9      	str	r1, [r7, #28]
 800d064:	4413      	add	r3, r2
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d06a:	7dfb      	ldrb	r3, [r7, #23]
 800d06c:	2b20      	cmp	r3, #32
 800d06e:	d100      	bne.n	800d072 <get_fileinfo+0xbe>
 800d070:	e040      	b.n	800d0f4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d072:	7dfb      	ldrb	r3, [r7, #23]
 800d074:	2b05      	cmp	r3, #5
 800d076:	d101      	bne.n	800d07c <get_fileinfo+0xc8>
 800d078:	23e5      	movs	r3, #229	; 0xe5
 800d07a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	2b09      	cmp	r3, #9
 800d080:	d10f      	bne.n	800d0a2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d082:	89bb      	ldrh	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d105      	bne.n	800d094 <get_fileinfo+0xe0>
 800d088:	683a      	ldr	r2, [r7, #0]
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	4413      	add	r3, r2
 800d08e:	3316      	adds	r3, #22
 800d090:	222e      	movs	r2, #46	; 0x2e
 800d092:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	1c5a      	adds	r2, r3, #1
 800d098:	61ba      	str	r2, [r7, #24]
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	4413      	add	r3, r2
 800d09e:	222e      	movs	r2, #46	; 0x2e
 800d0a0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	3309      	adds	r3, #9
 800d0aa:	7dfa      	ldrb	r2, [r7, #23]
 800d0ac:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d0ae:	89bb      	ldrh	r3, [r7, #12]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d11c      	bne.n	800d0ee <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d0b4:	7dfb      	ldrb	r3, [r7, #23]
 800d0b6:	2b40      	cmp	r3, #64	; 0x40
 800d0b8:	d913      	bls.n	800d0e2 <get_fileinfo+0x12e>
 800d0ba:	7dfb      	ldrb	r3, [r7, #23]
 800d0bc:	2b5a      	cmp	r3, #90	; 0x5a
 800d0be:	d810      	bhi.n	800d0e2 <get_fileinfo+0x12e>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6a1b      	ldr	r3, [r3, #32]
 800d0c4:	330c      	adds	r3, #12
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	2b08      	cmp	r3, #8
 800d0ce:	d901      	bls.n	800d0d4 <get_fileinfo+0x120>
 800d0d0:	2310      	movs	r3, #16
 800d0d2:	e000      	b.n	800d0d6 <get_fileinfo+0x122>
 800d0d4:	2308      	movs	r3, #8
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d0dc:	7dfb      	ldrb	r3, [r7, #23]
 800d0de:	3320      	adds	r3, #32
 800d0e0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	3316      	adds	r3, #22
 800d0ea:	7dfa      	ldrb	r2, [r7, #23]
 800d0ec:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	2b0a      	cmp	r3, #10
 800d0f8:	d9af      	bls.n	800d05a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d0fa:	89bb      	ldrh	r3, [r7, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10d      	bne.n	800d11c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	4413      	add	r3, r2
 800d106:	3316      	adds	r3, #22
 800d108:	2200      	movs	r2, #0
 800d10a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6a1b      	ldr	r3, [r3, #32]
 800d110:	330c      	adds	r3, #12
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <get_fileinfo+0x168>
 800d118:	2300      	movs	r3, #0
 800d11a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	4413      	add	r3, r2
 800d122:	3309      	adds	r3, #9
 800d124:	2200      	movs	r2, #0
 800d126:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6a1b      	ldr	r3, [r3, #32]
 800d12c:	7ada      	ldrb	r2, [r3, #11]
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	331c      	adds	r3, #28
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe fb11 	bl	800b760 <ld_dword>
 800d13e:	4602      	mov	r2, r0
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6a1b      	ldr	r3, [r3, #32]
 800d148:	3316      	adds	r3, #22
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fe fb08 	bl	800b760 <ld_dword>
 800d150:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	b29a      	uxth	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	80da      	strh	r2, [r3, #6]
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	0c1b      	lsrs	r3, r3, #16
 800d15e:	b29a      	uxth	r2, r3
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	809a      	strh	r2, [r3, #4]
 800d164:	e000      	b.n	800d168 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d166:	bf00      	nop
}
 800d168:	3720      	adds	r7, #32
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
	...

0800d170 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800d170:	b480      	push	{r7}
 800d172:	b085      	sub	sp, #20
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	1c59      	adds	r1, r3, #1
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	6011      	str	r1, [r2, #0]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d186:	89fb      	ldrh	r3, [r7, #14]
 800d188:	2b60      	cmp	r3, #96	; 0x60
 800d18a:	d905      	bls.n	800d198 <get_achar+0x28>
 800d18c:	89fb      	ldrh	r3, [r7, #14]
 800d18e:	2b7a      	cmp	r3, #122	; 0x7a
 800d190:	d802      	bhi.n	800d198 <get_achar+0x28>
 800d192:	89fb      	ldrh	r3, [r7, #14]
 800d194:	3b20      	subs	r3, #32
 800d196:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d198:	89fb      	ldrh	r3, [r7, #14]
 800d19a:	2b7f      	cmp	r3, #127	; 0x7f
 800d19c:	d904      	bls.n	800d1a8 <get_achar+0x38>
 800d19e:	89fb      	ldrh	r3, [r7, #14]
 800d1a0:	3b80      	subs	r3, #128	; 0x80
 800d1a2:	4a05      	ldr	r2, [pc, #20]	; (800d1b8 <get_achar+0x48>)
 800d1a4:	5cd3      	ldrb	r3, [r2, r3]
 800d1a6:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800d1a8:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3714      	adds	r7, #20
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr
 800d1b6:	bf00      	nop
 800d1b8:	08014edc 	.word	0x08014edc

0800d1bc <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b08a      	sub	sp, #40	; 0x28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
 800d1c8:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800d1ca:	e009      	b.n	800d1e0 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800d1cc:	f107 0308 	add.w	r3, r7, #8
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7ff ffcd 	bl	800d170 <get_achar>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d101      	bne.n	800d1e0 <pattern_matching+0x24>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e064      	b.n	800d2aa <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	1e5a      	subs	r2, r3, #1
 800d1e4:	607a      	str	r2, [r7, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1f0      	bne.n	800d1cc <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d104      	bne.n	800d1fc <pattern_matching+0x40>
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <pattern_matching+0x40>
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e056      	b.n	800d2aa <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	617b      	str	r3, [r7, #20]
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	2b3f      	cmp	r3, #63	; 0x3f
 800d20a:	d003      	beq.n	800d214 <pattern_matching+0x58>
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	2b2a      	cmp	r3, #42	; 0x2a
 800d212:	d126      	bne.n	800d262 <pattern_matching+0xa6>
				nm = nx = 0;
 800d214:	2300      	movs	r3, #0
 800d216:	61fb      	str	r3, [r7, #28]
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	1c5a      	adds	r2, r3, #1
 800d220:	617a      	str	r2, [r7, #20]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	2b3f      	cmp	r3, #63	; 0x3f
 800d226:	d103      	bne.n	800d230 <pattern_matching+0x74>
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	3301      	adds	r3, #1
 800d22c:	623b      	str	r3, [r7, #32]
 800d22e:	e001      	b.n	800d234 <pattern_matching+0x78>
 800d230:	2301      	movs	r3, #1
 800d232:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	2b3f      	cmp	r3, #63	; 0x3f
 800d23a:	d0ef      	beq.n	800d21c <pattern_matching+0x60>
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b2a      	cmp	r3, #42	; 0x2a
 800d242:	d0eb      	beq.n	800d21c <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800d244:	6978      	ldr	r0, [r7, #20]
 800d246:	6939      	ldr	r1, [r7, #16]
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	6a3a      	ldr	r2, [r7, #32]
 800d24c:	f7ff ffb6 	bl	800d1bc <pattern_matching>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <pattern_matching+0x9e>
 800d256:	2301      	movs	r3, #1
 800d258:	e027      	b.n	800d2aa <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d260:	e017      	b.n	800d292 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800d262:	f107 0314 	add.w	r3, r7, #20
 800d266:	4618      	mov	r0, r3
 800d268:	f7ff ff82 	bl	800d170 <get_achar>
 800d26c:	4603      	mov	r3, r0
 800d26e:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800d270:	f107 0310 	add.w	r3, r7, #16
 800d274:	4618      	mov	r0, r3
 800d276:	f7ff ff7b 	bl	800d170 <get_achar>
 800d27a:	4603      	mov	r3, r0
 800d27c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800d27e:	8b7a      	ldrh	r2, [r7, #26]
 800d280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d282:	429a      	cmp	r2, r3
 800d284:	d104      	bne.n	800d290 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800d286:	8b7b      	ldrh	r3, [r7, #26]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1bb      	bne.n	800d204 <pattern_matching+0x48>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e00c      	b.n	800d2aa <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800d290:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800d292:	f107 0308 	add.w	r3, r7, #8
 800d296:	4618      	mov	r0, r3
 800d298:	f7ff ff6a 	bl	800d170 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d002      	beq.n	800d2a8 <pattern_matching+0xec>
 800d2a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1a9      	bne.n	800d1fc <pattern_matching+0x40>

	return 0;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3728      	adds	r7, #40	; 0x28
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
	...

0800d2b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b08a      	sub	sp, #40	; 0x28
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	613b      	str	r3, [r7, #16]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	60fb      	str	r3, [r7, #12]
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	617b      	str	r3, [r7, #20]
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	61ba      	str	r2, [r7, #24]
 800d2da:	693a      	ldr	r2, [r7, #16]
 800d2dc:	4413      	add	r3, r2
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d2e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2e4:	2b1f      	cmp	r3, #31
 800d2e6:	d940      	bls.n	800d36a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d2e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2ea:	2b2f      	cmp	r3, #47	; 0x2f
 800d2ec:	d006      	beq.n	800d2fc <create_name+0x48>
 800d2ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2f0:	2b5c      	cmp	r3, #92	; 0x5c
 800d2f2:	d110      	bne.n	800d316 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d2f4:	e002      	b.n	800d2fc <create_name+0x48>
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	61bb      	str	r3, [r7, #24]
 800d2fc:	693a      	ldr	r2, [r7, #16]
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	4413      	add	r3, r2
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b2f      	cmp	r3, #47	; 0x2f
 800d306:	d0f6      	beq.n	800d2f6 <create_name+0x42>
 800d308:	693a      	ldr	r2, [r7, #16]
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	4413      	add	r3, r2
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b5c      	cmp	r3, #92	; 0x5c
 800d312:	d0f0      	beq.n	800d2f6 <create_name+0x42>
			break;
 800d314:	e02a      	b.n	800d36c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	2bfe      	cmp	r3, #254	; 0xfe
 800d31a:	d901      	bls.n	800d320 <create_name+0x6c>
 800d31c:	2306      	movs	r3, #6
 800d31e:	e177      	b.n	800d610 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d322:	b2db      	uxtb	r3, r3
 800d324:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d328:	2101      	movs	r1, #1
 800d32a:	4618      	mov	r0, r3
 800d32c:	f001 fa72 	bl	800e814 <ff_convert>
 800d330:	4603      	mov	r3, r0
 800d332:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d336:	2b00      	cmp	r3, #0
 800d338:	d101      	bne.n	800d33e <create_name+0x8a>
 800d33a:	2306      	movs	r3, #6
 800d33c:	e168      	b.n	800d610 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d33e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d340:	2b7f      	cmp	r3, #127	; 0x7f
 800d342:	d809      	bhi.n	800d358 <create_name+0xa4>
 800d344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d346:	4619      	mov	r1, r3
 800d348:	48b3      	ldr	r0, [pc, #716]	; (800d618 <create_name+0x364>)
 800d34a:	f7fe fad6 	bl	800b8fa <chk_chr>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d001      	beq.n	800d358 <create_name+0xa4>
 800d354:	2306      	movs	r3, #6
 800d356:	e15b      	b.n	800d610 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	1c5a      	adds	r2, r3, #1
 800d35c:	617a      	str	r2, [r7, #20]
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	4413      	add	r3, r2
 800d364:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d366:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d368:	e7b4      	b.n	800d2d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d36a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d36c:	693a      	ldr	r2, [r7, #16]
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	441a      	add	r2, r3
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d378:	2b1f      	cmp	r3, #31
 800d37a:	d801      	bhi.n	800d380 <create_name+0xcc>
 800d37c:	2304      	movs	r3, #4
 800d37e:	e000      	b.n	800d382 <create_name+0xce>
 800d380:	2300      	movs	r3, #0
 800d382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d386:	e011      	b.n	800d3ac <create_name+0xf8>
		w = lfn[di - 1];
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d38e:	3b01      	subs	r3, #1
 800d390:	005b      	lsls	r3, r3, #1
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	4413      	add	r3, r2
 800d396:	881b      	ldrh	r3, [r3, #0]
 800d398:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d39a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d39c:	2b20      	cmp	r3, #32
 800d39e:	d002      	beq.n	800d3a6 <create_name+0xf2>
 800d3a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a2:	2b2e      	cmp	r3, #46	; 0x2e
 800d3a4:	d106      	bne.n	800d3b4 <create_name+0x100>
		di--;
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1ea      	bne.n	800d388 <create_name+0xd4>
 800d3b2:	e000      	b.n	800d3b6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d3b4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	4413      	add	r3, r2
 800d3be:	2200      	movs	r2, #0
 800d3c0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d101      	bne.n	800d3cc <create_name+0x118>
 800d3c8:	2306      	movs	r3, #6
 800d3ca:	e121      	b.n	800d610 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	3324      	adds	r3, #36	; 0x24
 800d3d0:	220b      	movs	r2, #11
 800d3d2:	2120      	movs	r1, #32
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fe fa4e 	bl	800b876 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d3da:	2300      	movs	r3, #0
 800d3dc:	61bb      	str	r3, [r7, #24]
 800d3de:	e002      	b.n	800d3e6 <create_name+0x132>
 800d3e0:	69bb      	ldr	r3, [r7, #24]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	61bb      	str	r3, [r7, #24]
 800d3e6:	69bb      	ldr	r3, [r7, #24]
 800d3e8:	005b      	lsls	r3, r3, #1
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	2b20      	cmp	r3, #32
 800d3f2:	d0f5      	beq.n	800d3e0 <create_name+0x12c>
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	881b      	ldrh	r3, [r3, #0]
 800d3fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d400:	d0ee      	beq.n	800d3e0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d009      	beq.n	800d41c <create_name+0x168>
 800d408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d40c:	f043 0303 	orr.w	r3, r3, #3
 800d410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d414:	e002      	b.n	800d41c <create_name+0x168>
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	3b01      	subs	r3, #1
 800d41a:	617b      	str	r3, [r7, #20]
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d009      	beq.n	800d436 <create_name+0x182>
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d428:	3b01      	subs	r3, #1
 800d42a:	005b      	lsls	r3, r3, #1
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	4413      	add	r3, r2
 800d430:	881b      	ldrh	r3, [r3, #0]
 800d432:	2b2e      	cmp	r3, #46	; 0x2e
 800d434:	d1ef      	bne.n	800d416 <create_name+0x162>

	i = b = 0; ni = 8;
 800d436:	2300      	movs	r3, #0
 800d438:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d43c:	2300      	movs	r3, #0
 800d43e:	623b      	str	r3, [r7, #32]
 800d440:	2308      	movs	r3, #8
 800d442:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	1c5a      	adds	r2, r3, #1
 800d448:	61ba      	str	r2, [r7, #24]
 800d44a:	005b      	lsls	r3, r3, #1
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	4413      	add	r3, r2
 800d450:	881b      	ldrh	r3, [r3, #0]
 800d452:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d456:	2b00      	cmp	r3, #0
 800d458:	f000 8090 	beq.w	800d57c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d45c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d45e:	2b20      	cmp	r3, #32
 800d460:	d006      	beq.n	800d470 <create_name+0x1bc>
 800d462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d464:	2b2e      	cmp	r3, #46	; 0x2e
 800d466:	d10a      	bne.n	800d47e <create_name+0x1ca>
 800d468:	69ba      	ldr	r2, [r7, #24]
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d006      	beq.n	800d47e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d474:	f043 0303 	orr.w	r3, r3, #3
 800d478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d47c:	e07d      	b.n	800d57a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d47e:	6a3a      	ldr	r2, [r7, #32]
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	429a      	cmp	r2, r3
 800d484:	d203      	bcs.n	800d48e <create_name+0x1da>
 800d486:	69ba      	ldr	r2, [r7, #24]
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d123      	bne.n	800d4d6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	2b0b      	cmp	r3, #11
 800d492:	d106      	bne.n	800d4a2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d498:	f043 0303 	orr.w	r3, r3, #3
 800d49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4a0:	e06f      	b.n	800d582 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d4a2:	69ba      	ldr	r2, [r7, #24]
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d005      	beq.n	800d4b6 <create_name+0x202>
 800d4aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4ae:	f043 0303 	orr.w	r3, r3, #3
 800d4b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d4b6:	69ba      	ldr	r2, [r7, #24]
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d860      	bhi.n	800d580 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	61bb      	str	r3, [r7, #24]
 800d4c2:	2308      	movs	r3, #8
 800d4c4:	623b      	str	r3, [r7, #32]
 800d4c6:	230b      	movs	r3, #11
 800d4c8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d4ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d4d4:	e051      	b.n	800d57a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d4d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4d8:	2b7f      	cmp	r3, #127	; 0x7f
 800d4da:	d914      	bls.n	800d506 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4de:	2100      	movs	r1, #0
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f001 f997 	bl	800e814 <ff_convert>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d4ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d004      	beq.n	800d4fa <create_name+0x246>
 800d4f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4f2:	3b80      	subs	r3, #128	; 0x80
 800d4f4:	4a49      	ldr	r2, [pc, #292]	; (800d61c <create_name+0x368>)
 800d4f6:	5cd3      	ldrb	r3, [r2, r3]
 800d4f8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d4fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4fe:	f043 0302 	orr.w	r3, r3, #2
 800d502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d007      	beq.n	800d51c <create_name+0x268>
 800d50c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d50e:	4619      	mov	r1, r3
 800d510:	4843      	ldr	r0, [pc, #268]	; (800d620 <create_name+0x36c>)
 800d512:	f7fe f9f2 	bl	800b8fa <chk_chr>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d008      	beq.n	800d52e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d51c:	235f      	movs	r3, #95	; 0x5f
 800d51e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d524:	f043 0303 	orr.w	r3, r3, #3
 800d528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d52c:	e01b      	b.n	800d566 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d52e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d530:	2b40      	cmp	r3, #64	; 0x40
 800d532:	d909      	bls.n	800d548 <create_name+0x294>
 800d534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d536:	2b5a      	cmp	r3, #90	; 0x5a
 800d538:	d806      	bhi.n	800d548 <create_name+0x294>
					b |= 2;
 800d53a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d53e:	f043 0302 	orr.w	r3, r3, #2
 800d542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d546:	e00e      	b.n	800d566 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d54a:	2b60      	cmp	r3, #96	; 0x60
 800d54c:	d90b      	bls.n	800d566 <create_name+0x2b2>
 800d54e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d550:	2b7a      	cmp	r3, #122	; 0x7a
 800d552:	d808      	bhi.n	800d566 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d558:	f043 0301 	orr.w	r3, r3, #1
 800d55c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d562:	3b20      	subs	r3, #32
 800d564:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d566:	6a3b      	ldr	r3, [r7, #32]
 800d568:	1c5a      	adds	r2, r3, #1
 800d56a:	623a      	str	r2, [r7, #32]
 800d56c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d56e:	b2d1      	uxtb	r1, r2
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	4413      	add	r3, r2
 800d574:	460a      	mov	r2, r1
 800d576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d57a:	e763      	b.n	800d444 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d57c:	bf00      	nop
 800d57e:	e000      	b.n	800d582 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d580:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d588:	2be5      	cmp	r3, #229	; 0xe5
 800d58a:	d103      	bne.n	800d594 <create_name+0x2e0>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2205      	movs	r2, #5
 800d590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	2b08      	cmp	r3, #8
 800d598:	d104      	bne.n	800d5a4 <create_name+0x2f0>
 800d59a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d5a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5a8:	f003 030c 	and.w	r3, r3, #12
 800d5ac:	2b0c      	cmp	r3, #12
 800d5ae:	d005      	beq.n	800d5bc <create_name+0x308>
 800d5b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5b4:	f003 0303 	and.w	r3, r3, #3
 800d5b8:	2b03      	cmp	r3, #3
 800d5ba:	d105      	bne.n	800d5c8 <create_name+0x314>
 800d5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5c0:	f043 0302 	orr.w	r3, r3, #2
 800d5c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5cc:	f003 0302 	and.w	r3, r3, #2
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d117      	bne.n	800d604 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d5d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5d8:	f003 0303 	and.w	r3, r3, #3
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d105      	bne.n	800d5ec <create_name+0x338>
 800d5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5e4:	f043 0310 	orr.w	r3, r3, #16
 800d5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d5ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5f0:	f003 030c 	and.w	r3, r3, #12
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d105      	bne.n	800d604 <create_name+0x350>
 800d5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5fc:	f043 0308 	orr.w	r3, r3, #8
 800d600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d60a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d60e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d610:	4618      	mov	r0, r3
 800d612:	3728      	adds	r7, #40	; 0x28
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	08013b00 	.word	0x08013b00
 800d61c:	08014edc 	.word	0x08014edc
 800d620:	08013b0c 	.word	0x08013b0c

0800d624 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d638:	e002      	b.n	800d640 <follow_path+0x1c>
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	3301      	adds	r3, #1
 800d63e:	603b      	str	r3, [r7, #0]
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2b2f      	cmp	r3, #47	; 0x2f
 800d646:	d0f8      	beq.n	800d63a <follow_path+0x16>
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	2b5c      	cmp	r3, #92	; 0x5c
 800d64e:	d0f4      	beq.n	800d63a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	2200      	movs	r2, #0
 800d654:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	2b1f      	cmp	r3, #31
 800d65c:	d80a      	bhi.n	800d674 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2280      	movs	r2, #128	; 0x80
 800d662:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d666:	2100      	movs	r1, #0
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7fe fe91 	bl	800c390 <dir_sdi>
 800d66e:	4603      	mov	r3, r0
 800d670:	75fb      	strb	r3, [r7, #23]
 800d672:	e043      	b.n	800d6fc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d674:	463b      	mov	r3, r7
 800d676:	4619      	mov	r1, r3
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7ff fe1b 	bl	800d2b4 <create_name>
 800d67e:	4603      	mov	r3, r0
 800d680:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d682:	7dfb      	ldrb	r3, [r7, #23]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d134      	bne.n	800d6f2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f7ff fadb 	bl	800cc44 <dir_find>
 800d68e:	4603      	mov	r3, r0
 800d690:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d698:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d69a:	7dfb      	ldrb	r3, [r7, #23]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00a      	beq.n	800d6b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d6a0:	7dfb      	ldrb	r3, [r7, #23]
 800d6a2:	2b04      	cmp	r3, #4
 800d6a4:	d127      	bne.n	800d6f6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d6a6:	7afb      	ldrb	r3, [r7, #11]
 800d6a8:	f003 0304 	and.w	r3, r3, #4
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d122      	bne.n	800d6f6 <follow_path+0xd2>
 800d6b0:	2305      	movs	r3, #5
 800d6b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d6b4:	e01f      	b.n	800d6f6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d6b6:	7afb      	ldrb	r3, [r7, #11]
 800d6b8:	f003 0304 	and.w	r3, r3, #4
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d11c      	bne.n	800d6fa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	799b      	ldrb	r3, [r3, #6]
 800d6c4:	f003 0310 	and.w	r3, r3, #16
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d102      	bne.n	800d6d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d6cc:	2305      	movs	r3, #5
 800d6ce:	75fb      	strb	r3, [r7, #23]
 800d6d0:	e014      	b.n	800d6fc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	695b      	ldr	r3, [r3, #20]
 800d6dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e0:	4413      	add	r3, r2
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f7fe ffda 	bl	800c69e <ld_clust>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d6f0:	e7c0      	b.n	800d674 <follow_path+0x50>
			if (res != FR_OK) break;
 800d6f2:	bf00      	nop
 800d6f4:	e002      	b.n	800d6fc <follow_path+0xd8>
				break;
 800d6f6:	bf00      	nop
 800d6f8:	e000      	b.n	800d6fc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d6fa:	bf00      	nop
			}
		}
	}

	return res;
 800d6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d706:	b480      	push	{r7}
 800d708:	b087      	sub	sp, #28
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d70e:	f04f 33ff 	mov.w	r3, #4294967295
 800d712:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d031      	beq.n	800d780 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	617b      	str	r3, [r7, #20]
 800d722:	e002      	b.n	800d72a <get_ldnumber+0x24>
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	3301      	adds	r3, #1
 800d728:	617b      	str	r3, [r7, #20]
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	2b1f      	cmp	r3, #31
 800d730:	d903      	bls.n	800d73a <get_ldnumber+0x34>
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	2b3a      	cmp	r3, #58	; 0x3a
 800d738:	d1f4      	bne.n	800d724 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	2b3a      	cmp	r3, #58	; 0x3a
 800d740:	d11c      	bne.n	800d77c <get_ldnumber+0x76>
			tp = *path;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	60fa      	str	r2, [r7, #12]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	3b30      	subs	r3, #48	; 0x30
 800d752:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	2b09      	cmp	r3, #9
 800d758:	d80e      	bhi.n	800d778 <get_ldnumber+0x72>
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d10a      	bne.n	800d778 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d107      	bne.n	800d778 <get_ldnumber+0x72>
					vol = (int)i;
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	3301      	adds	r3, #1
 800d770:	617b      	str	r3, [r7, #20]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	697a      	ldr	r2, [r7, #20]
 800d776:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	e002      	b.n	800d782 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d77c:	2300      	movs	r3, #0
 800d77e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d780:	693b      	ldr	r3, [r7, #16]
}
 800d782:	4618      	mov	r0, r3
 800d784:	371c      	adds	r7, #28
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
	...

0800d790 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	70da      	strb	r2, [r3, #3]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7fe fa70 	bl	800bc90 <move_window>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <check_fs+0x2a>
 800d7b6:	2304      	movs	r3, #4
 800d7b8:	e038      	b.n	800d82c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	3334      	adds	r3, #52	; 0x34
 800d7be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fd ffb4 	bl	800b730 <ld_word>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d001      	beq.n	800d7d8 <check_fs+0x48>
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	e029      	b.n	800d82c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d7de:	2be9      	cmp	r3, #233	; 0xe9
 800d7e0:	d009      	beq.n	800d7f6 <check_fs+0x66>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d7e8:	2beb      	cmp	r3, #235	; 0xeb
 800d7ea:	d11e      	bne.n	800d82a <check_fs+0x9a>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d7f2:	2b90      	cmp	r3, #144	; 0x90
 800d7f4:	d119      	bne.n	800d82a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	3334      	adds	r3, #52	; 0x34
 800d7fa:	3336      	adds	r3, #54	; 0x36
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fd ffaf 	bl	800b760 <ld_dword>
 800d802:	4603      	mov	r3, r0
 800d804:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d808:	4a0a      	ldr	r2, [pc, #40]	; (800d834 <check_fs+0xa4>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d101      	bne.n	800d812 <check_fs+0x82>
 800d80e:	2300      	movs	r3, #0
 800d810:	e00c      	b.n	800d82c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	3334      	adds	r3, #52	; 0x34
 800d816:	3352      	adds	r3, #82	; 0x52
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fd ffa1 	bl	800b760 <ld_dword>
 800d81e:	4603      	mov	r3, r0
 800d820:	4a05      	ldr	r2, [pc, #20]	; (800d838 <check_fs+0xa8>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d101      	bne.n	800d82a <check_fs+0x9a>
 800d826:	2300      	movs	r3, #0
 800d828:	e000      	b.n	800d82c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d82a:	2302      	movs	r3, #2
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	00544146 	.word	0x00544146
 800d838:	33544146 	.word	0x33544146

0800d83c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b096      	sub	sp, #88	; 0x58
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	4613      	mov	r3, r2
 800d848:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	2200      	movs	r2, #0
 800d84e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f7ff ff58 	bl	800d706 <get_ldnumber>
 800d856:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	da01      	bge.n	800d862 <find_volume+0x26>
 800d85e:	230b      	movs	r3, #11
 800d860:	e231      	b.n	800dcc6 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d862:	4aa8      	ldr	r2, [pc, #672]	; (800db04 <find_volume+0x2c8>)
 800d864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d86a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d101      	bne.n	800d876 <find_volume+0x3a>
 800d872:	230c      	movs	r3, #12
 800d874:	e227      	b.n	800dcc6 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d87a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d87c:	79fb      	ldrb	r3, [r7, #7]
 800d87e:	f023 0301 	bic.w	r3, r3, #1
 800d882:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d01a      	beq.n	800d8c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88e:	785b      	ldrb	r3, [r3, #1]
 800d890:	4618      	mov	r0, r3
 800d892:	f7fd feaf 	bl	800b5f4 <disk_status>
 800d896:	4603      	mov	r3, r0
 800d898:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d89c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8a0:	f003 0301 	and.w	r3, r3, #1
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10c      	bne.n	800d8c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d8a8:	79fb      	ldrb	r3, [r7, #7]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d007      	beq.n	800d8be <find_volume+0x82>
 800d8ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8b2:	f003 0304 	and.w	r3, r3, #4
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d8ba:	230a      	movs	r3, #10
 800d8bc:	e203      	b.n	800dcc6 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e201      	b.n	800dcc6 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d2:	785b      	ldrb	r3, [r3, #1]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fd fea7 	bl	800b628 <disk_initialize>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d8e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8e4:	f003 0301 	and.w	r3, r3, #1
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d001      	beq.n	800d8f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	e1ea      	b.n	800dcc6 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d8f0:	79fb      	ldrb	r3, [r7, #7]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d007      	beq.n	800d906 <find_volume+0xca>
 800d8f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8fa:	f003 0304 	and.w	r3, r3, #4
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d001      	beq.n	800d906 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d902:	230a      	movs	r3, #10
 800d904:	e1df      	b.n	800dcc6 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d90a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d90c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d90e:	f7ff ff3f 	bl	800d790 <check_fs>
 800d912:	4603      	mov	r3, r0
 800d914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d918:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d91c:	2b02      	cmp	r3, #2
 800d91e:	d14b      	bne.n	800d9b8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d920:	2300      	movs	r3, #0
 800d922:	643b      	str	r3, [r7, #64]	; 0x40
 800d924:	e01f      	b.n	800d966 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d928:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d92e:	011b      	lsls	r3, r3, #4
 800d930:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d934:	4413      	add	r3, r2
 800d936:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93a:	3304      	adds	r3, #4
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d006      	beq.n	800d950 <find_volume+0x114>
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	3308      	adds	r3, #8
 800d946:	4618      	mov	r0, r3
 800d948:	f7fd ff0a 	bl	800b760 <ld_dword>
 800d94c:	4602      	mov	r2, r0
 800d94e:	e000      	b.n	800d952 <find_volume+0x116>
 800d950:	2200      	movs	r2, #0
 800d952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d95a:	440b      	add	r3, r1
 800d95c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d962:	3301      	adds	r3, #1
 800d964:	643b      	str	r3, [r7, #64]	; 0x40
 800d966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d968:	2b03      	cmp	r3, #3
 800d96a:	d9dc      	bls.n	800d926 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d96c:	2300      	movs	r3, #0
 800d96e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d972:	2b00      	cmp	r3, #0
 800d974:	d002      	beq.n	800d97c <find_volume+0x140>
 800d976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d978:	3b01      	subs	r3, #1
 800d97a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d97c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d984:	4413      	add	r3, r2
 800d986:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d98a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d005      	beq.n	800d99e <find_volume+0x162>
 800d992:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d994:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d996:	f7ff fefb 	bl	800d790 <check_fs>
 800d99a:	4603      	mov	r3, r0
 800d99c:	e000      	b.n	800d9a0 <find_volume+0x164>
 800d99e:	2303      	movs	r3, #3
 800d9a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d9a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d905      	bls.n	800d9b8 <find_volume+0x17c>
 800d9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	643b      	str	r3, [r7, #64]	; 0x40
 800d9b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b4:	2b03      	cmp	r3, #3
 800d9b6:	d9e1      	bls.n	800d97c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d9b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9bc:	2b04      	cmp	r3, #4
 800d9be:	d101      	bne.n	800d9c4 <find_volume+0x188>
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e180      	b.n	800dcc6 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d9c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d901      	bls.n	800d9d0 <find_volume+0x194>
 800d9cc:	230d      	movs	r3, #13
 800d9ce:	e17a      	b.n	800dcc6 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d2:	3334      	adds	r3, #52	; 0x34
 800d9d4:	330b      	adds	r3, #11
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fd feaa 	bl	800b730 <ld_word>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9e2:	d001      	beq.n	800d9e8 <find_volume+0x1ac>
 800d9e4:	230d      	movs	r3, #13
 800d9e6:	e16e      	b.n	800dcc6 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ea:	3334      	adds	r3, #52	; 0x34
 800d9ec:	3316      	adds	r3, #22
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fd fe9e 	bl	800b730 <ld_word>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d106      	bne.n	800da0c <find_volume+0x1d0>
 800d9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da00:	3334      	adds	r3, #52	; 0x34
 800da02:	3324      	adds	r3, #36	; 0x24
 800da04:	4618      	mov	r0, r3
 800da06:	f7fd feab 	bl	800b760 <ld_dword>
 800da0a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800da0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da10:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800da12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da14:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800da18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800da1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1e:	789b      	ldrb	r3, [r3, #2]
 800da20:	2b01      	cmp	r3, #1
 800da22:	d005      	beq.n	800da30 <find_volume+0x1f4>
 800da24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da26:	789b      	ldrb	r3, [r3, #2]
 800da28:	2b02      	cmp	r3, #2
 800da2a:	d001      	beq.n	800da30 <find_volume+0x1f4>
 800da2c:	230d      	movs	r3, #13
 800da2e:	e14a      	b.n	800dcc6 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800da30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da32:	789b      	ldrb	r3, [r3, #2]
 800da34:	461a      	mov	r2, r3
 800da36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da38:	fb02 f303 	mul.w	r3, r2, r3
 800da3c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800da3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da44:	b29a      	uxth	r2, r3
 800da46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da48:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800da4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4c:	895b      	ldrh	r3, [r3, #10]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d008      	beq.n	800da64 <find_volume+0x228>
 800da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da54:	895b      	ldrh	r3, [r3, #10]
 800da56:	461a      	mov	r2, r3
 800da58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5a:	895b      	ldrh	r3, [r3, #10]
 800da5c:	3b01      	subs	r3, #1
 800da5e:	4013      	ands	r3, r2
 800da60:	2b00      	cmp	r3, #0
 800da62:	d001      	beq.n	800da68 <find_volume+0x22c>
 800da64:	230d      	movs	r3, #13
 800da66:	e12e      	b.n	800dcc6 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800da68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6a:	3334      	adds	r3, #52	; 0x34
 800da6c:	3311      	adds	r3, #17
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fd fe5e 	bl	800b730 <ld_word>
 800da74:	4603      	mov	r3, r0
 800da76:	461a      	mov	r2, r3
 800da78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800da7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7e:	891b      	ldrh	r3, [r3, #8]
 800da80:	f003 030f 	and.w	r3, r3, #15
 800da84:	b29b      	uxth	r3, r3
 800da86:	2b00      	cmp	r3, #0
 800da88:	d001      	beq.n	800da8e <find_volume+0x252>
 800da8a:	230d      	movs	r3, #13
 800da8c:	e11b      	b.n	800dcc6 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800da8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da90:	3334      	adds	r3, #52	; 0x34
 800da92:	3313      	adds	r3, #19
 800da94:	4618      	mov	r0, r3
 800da96:	f7fd fe4b 	bl	800b730 <ld_word>
 800da9a:	4603      	mov	r3, r0
 800da9c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800da9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d106      	bne.n	800dab2 <find_volume+0x276>
 800daa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa6:	3334      	adds	r3, #52	; 0x34
 800daa8:	3320      	adds	r3, #32
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fd fe58 	bl	800b760 <ld_dword>
 800dab0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab4:	3334      	adds	r3, #52	; 0x34
 800dab6:	330e      	adds	r3, #14
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fd fe39 	bl	800b730 <ld_word>
 800dabe:	4603      	mov	r3, r0
 800dac0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dac2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d101      	bne.n	800dacc <find_volume+0x290>
 800dac8:	230d      	movs	r3, #13
 800daca:	e0fc      	b.n	800dcc6 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dacc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dad0:	4413      	add	r3, r2
 800dad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dad4:	8912      	ldrh	r2, [r2, #8]
 800dad6:	0912      	lsrs	r2, r2, #4
 800dad8:	b292      	uxth	r2, r2
 800dada:	4413      	add	r3, r2
 800dadc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d201      	bcs.n	800daea <find_volume+0x2ae>
 800dae6:	230d      	movs	r3, #13
 800dae8:	e0ed      	b.n	800dcc6 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800daea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daf2:	8952      	ldrh	r2, [r2, #10]
 800daf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800daf8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d103      	bne.n	800db08 <find_volume+0x2cc>
 800db00:	230d      	movs	r3, #13
 800db02:	e0e0      	b.n	800dcc6 <find_volume+0x48a>
 800db04:	20000768 	.word	0x20000768
		fmt = FS_FAT32;
 800db08:	2303      	movs	r3, #3
 800db0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800db0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db10:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800db14:	4293      	cmp	r3, r2
 800db16:	d802      	bhi.n	800db1e <find_volume+0x2e2>
 800db18:	2302      	movs	r3, #2
 800db1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800db1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db20:	f640 72f5 	movw	r2, #4085	; 0xff5
 800db24:	4293      	cmp	r3, r2
 800db26:	d802      	bhi.n	800db2e <find_volume+0x2f2>
 800db28:	2301      	movs	r3, #1
 800db2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	1c9a      	adds	r2, r3, #2
 800db32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db34:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800db36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db3a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800db3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800db3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db40:	441a      	add	r2, r3
 800db42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db44:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800db46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4a:	441a      	add	r2, r3
 800db4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800db50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db54:	2b03      	cmp	r3, #3
 800db56:	d11e      	bne.n	800db96 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800db58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5a:	3334      	adds	r3, #52	; 0x34
 800db5c:	332a      	adds	r3, #42	; 0x2a
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fd fde6 	bl	800b730 <ld_word>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <find_volume+0x332>
 800db6a:	230d      	movs	r3, #13
 800db6c:	e0ab      	b.n	800dcc6 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800db6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db70:	891b      	ldrh	r3, [r3, #8]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d001      	beq.n	800db7a <find_volume+0x33e>
 800db76:	230d      	movs	r3, #13
 800db78:	e0a5      	b.n	800dcc6 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800db7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7c:	3334      	adds	r3, #52	; 0x34
 800db7e:	332c      	adds	r3, #44	; 0x2c
 800db80:	4618      	mov	r0, r3
 800db82:	f7fd fded 	bl	800b760 <ld_dword>
 800db86:	4602      	mov	r2, r0
 800db88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800db8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	647b      	str	r3, [r7, #68]	; 0x44
 800db94:	e01f      	b.n	800dbd6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800db96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db98:	891b      	ldrh	r3, [r3, #8]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d101      	bne.n	800dba2 <find_volume+0x366>
 800db9e:	230d      	movs	r3, #13
 800dba0:	e091      	b.n	800dcc6 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba8:	441a      	add	r2, r3
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbac:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dbae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbb2:	2b02      	cmp	r3, #2
 800dbb4:	d103      	bne.n	800dbbe <find_volume+0x382>
 800dbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb8:	699b      	ldr	r3, [r3, #24]
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	e00a      	b.n	800dbd4 <find_volume+0x398>
 800dbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc0:	699a      	ldr	r2, [r3, #24]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	4413      	add	r3, r2
 800dbc8:	085a      	lsrs	r2, r3, #1
 800dbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbcc:	699b      	ldr	r3, [r3, #24]
 800dbce:	f003 0301 	and.w	r3, r3, #1
 800dbd2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dbd4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	69da      	ldr	r2, [r3, #28]
 800dbda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbdc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dbe0:	0a5b      	lsrs	r3, r3, #9
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d201      	bcs.n	800dbea <find_volume+0x3ae>
 800dbe6:	230d      	movs	r3, #13
 800dbe8:	e06d      	b.n	800dcc6 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbec:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf0:	615a      	str	r2, [r3, #20]
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	695a      	ldr	r2, [r3, #20]
 800dbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800dbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfc:	2280      	movs	r2, #128	; 0x80
 800dbfe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dc00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc04:	2b03      	cmp	r3, #3
 800dc06:	d149      	bne.n	800dc9c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0a:	3334      	adds	r3, #52	; 0x34
 800dc0c:	3330      	adds	r3, #48	; 0x30
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fd fd8e 	bl	800b730 <ld_word>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d140      	bne.n	800dc9c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc22:	f7fe f835 	bl	800bc90 <move_window>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d137      	bne.n	800dc9c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800dc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2e:	2200      	movs	r2, #0
 800dc30:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc34:	3334      	adds	r3, #52	; 0x34
 800dc36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fd fd78 	bl	800b730 <ld_word>
 800dc40:	4603      	mov	r3, r0
 800dc42:	461a      	mov	r2, r3
 800dc44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d127      	bne.n	800dc9c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4e:	3334      	adds	r3, #52	; 0x34
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7fd fd85 	bl	800b760 <ld_dword>
 800dc56:	4603      	mov	r3, r0
 800dc58:	4a1d      	ldr	r2, [pc, #116]	; (800dcd0 <find_volume+0x494>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d11e      	bne.n	800dc9c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc60:	3334      	adds	r3, #52	; 0x34
 800dc62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fd fd7a 	bl	800b760 <ld_dword>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	4a19      	ldr	r2, [pc, #100]	; (800dcd4 <find_volume+0x498>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d113      	bne.n	800dc9c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc76:	3334      	adds	r3, #52	; 0x34
 800dc78:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fd fd6f 	bl	800b760 <ld_dword>
 800dc82:	4602      	mov	r2, r0
 800dc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc86:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8a:	3334      	adds	r3, #52	; 0x34
 800dc8c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fd fd65 	bl	800b760 <ld_dword>
 800dc96:	4602      	mov	r2, r0
 800dc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dca2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dca4:	4b0c      	ldr	r3, [pc, #48]	; (800dcd8 <find_volume+0x49c>)
 800dca6:	881b      	ldrh	r3, [r3, #0]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	4b0a      	ldr	r3, [pc, #40]	; (800dcd8 <find_volume+0x49c>)
 800dcae:	801a      	strh	r2, [r3, #0]
 800dcb0:	4b09      	ldr	r3, [pc, #36]	; (800dcd8 <find_volume+0x49c>)
 800dcb2:	881a      	ldrh	r2, [r3, #0]
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcba:	4a08      	ldr	r2, [pc, #32]	; (800dcdc <find_volume+0x4a0>)
 800dcbc:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dcbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dcc0:	f7fd ff7e 	bl	800bbc0 <clear_lock>
#endif
	return FR_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3758      	adds	r7, #88	; 0x58
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	41615252 	.word	0x41615252
 800dcd4:	61417272 	.word	0x61417272
 800dcd8:	2000076c 	.word	0x2000076c
 800dcdc:	20000790 	.word	0x20000790

0800dce0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dcea:	2309      	movs	r3, #9
 800dcec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d01c      	beq.n	800dd2e <validate+0x4e>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d018      	beq.n	800dd2e <validate+0x4e>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d013      	beq.n	800dd2e <validate+0x4e>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	889a      	ldrh	r2, [r3, #4]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	88db      	ldrh	r3, [r3, #6]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d10c      	bne.n	800dd2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	785b      	ldrb	r3, [r3, #1]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fd fc6a 	bl	800b5f4 <disk_status>
 800dd20:	4603      	mov	r3, r0
 800dd22:	f003 0301 	and.w	r3, r3, #1
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d101      	bne.n	800dd2e <validate+0x4e>
			res = FR_OK;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dd2e:	7bfb      	ldrb	r3, [r7, #15]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d102      	bne.n	800dd3a <validate+0x5a>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	e000      	b.n	800dd3c <validate+0x5c>
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	683a      	ldr	r2, [r7, #0]
 800dd3e:	6013      	str	r3, [r2, #0]
	return res;
 800dd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
	...

0800dd4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b088      	sub	sp, #32
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	4613      	mov	r3, r2
 800dd58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dd5e:	f107 0310 	add.w	r3, r7, #16
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7ff fccf 	bl	800d706 <get_ldnumber>
 800dd68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	da01      	bge.n	800dd74 <f_mount+0x28>
 800dd70:	230b      	movs	r3, #11
 800dd72:	e02b      	b.n	800ddcc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dd74:	4a17      	ldr	r2, [pc, #92]	; (800ddd4 <f_mount+0x88>)
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d005      	beq.n	800dd90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dd84:	69b8      	ldr	r0, [r7, #24]
 800dd86:	f7fd ff1b 	bl	800bbc0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d002      	beq.n	800dd9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	490d      	ldr	r1, [pc, #52]	; (800ddd4 <f_mount+0x88>)
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d002      	beq.n	800ddb2 <f_mount+0x66>
 800ddac:	79fb      	ldrb	r3, [r7, #7]
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d001      	beq.n	800ddb6 <f_mount+0x6a>
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	e00a      	b.n	800ddcc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ddb6:	f107 010c 	add.w	r1, r7, #12
 800ddba:	f107 0308 	add.w	r3, r7, #8
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7ff fd3b 	bl	800d83c <find_volume>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ddca:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3720      	adds	r7, #32
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	20000768 	.word	0x20000768

0800ddd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b09a      	sub	sp, #104	; 0x68
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	4613      	mov	r3, r2
 800dde4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d101      	bne.n	800ddf0 <f_open+0x18>
 800ddec:	2309      	movs	r3, #9
 800ddee:	e1ad      	b.n	800e14c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddf6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ddf8:	79fa      	ldrb	r2, [r7, #7]
 800ddfa:	f107 0110 	add.w	r1, r7, #16
 800ddfe:	f107 0308 	add.w	r3, r7, #8
 800de02:	4618      	mov	r0, r3
 800de04:	f7ff fd1a 	bl	800d83c <find_volume>
 800de08:	4603      	mov	r3, r0
 800de0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800de0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de12:	2b00      	cmp	r3, #0
 800de14:	f040 8191 	bne.w	800e13a <f_open+0x362>
		dj.obj.fs = fs;
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	f107 0314 	add.w	r3, r7, #20
 800de22:	4611      	mov	r1, r2
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff fbfd 	bl	800d624 <follow_path>
 800de2a:	4603      	mov	r3, r0
 800de2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800de30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de34:	2b00      	cmp	r3, #0
 800de36:	d11a      	bne.n	800de6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800de38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de3c:	b25b      	sxtb	r3, r3
 800de3e:	2b00      	cmp	r3, #0
 800de40:	da03      	bge.n	800de4a <f_open+0x72>
				res = FR_INVALID_NAME;
 800de42:	2306      	movs	r3, #6
 800de44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800de48:	e011      	b.n	800de6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de4a:	79fb      	ldrb	r3, [r7, #7]
 800de4c:	f023 0301 	bic.w	r3, r3, #1
 800de50:	2b00      	cmp	r3, #0
 800de52:	bf14      	ite	ne
 800de54:	2301      	movne	r3, #1
 800de56:	2300      	moveq	r3, #0
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	461a      	mov	r2, r3
 800de5c:	f107 0314 	add.w	r3, r7, #20
 800de60:	4611      	mov	r1, r2
 800de62:	4618      	mov	r0, r3
 800de64:	f7fd fd64 	bl	800b930 <chk_lock>
 800de68:	4603      	mov	r3, r0
 800de6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800de6e:	79fb      	ldrb	r3, [r7, #7]
 800de70:	f003 031c 	and.w	r3, r3, #28
 800de74:	2b00      	cmp	r3, #0
 800de76:	d07f      	beq.n	800df78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800de78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d017      	beq.n	800deb0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800de80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de84:	2b04      	cmp	r3, #4
 800de86:	d10e      	bne.n	800dea6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800de88:	f7fd fdae 	bl	800b9e8 <enq_lock>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d006      	beq.n	800dea0 <f_open+0xc8>
 800de92:	f107 0314 	add.w	r3, r7, #20
 800de96:	4618      	mov	r0, r3
 800de98:	f7fe ff94 	bl	800cdc4 <dir_register>
 800de9c:	4603      	mov	r3, r0
 800de9e:	e000      	b.n	800dea2 <f_open+0xca>
 800dea0:	2312      	movs	r3, #18
 800dea2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dea6:	79fb      	ldrb	r3, [r7, #7]
 800dea8:	f043 0308 	orr.w	r3, r3, #8
 800deac:	71fb      	strb	r3, [r7, #7]
 800deae:	e010      	b.n	800ded2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800deb0:	7ebb      	ldrb	r3, [r7, #26]
 800deb2:	f003 0311 	and.w	r3, r3, #17
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d003      	beq.n	800dec2 <f_open+0xea>
					res = FR_DENIED;
 800deba:	2307      	movs	r3, #7
 800debc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dec0:	e007      	b.n	800ded2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dec2:	79fb      	ldrb	r3, [r7, #7]
 800dec4:	f003 0304 	and.w	r3, r3, #4
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d002      	beq.n	800ded2 <f_open+0xfa>
 800decc:	2308      	movs	r3, #8
 800dece:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ded2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d168      	bne.n	800dfac <f_open+0x1d4>
 800deda:	79fb      	ldrb	r3, [r7, #7]
 800dedc:	f003 0308 	and.w	r3, r3, #8
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d063      	beq.n	800dfac <f_open+0x1d4>
				dw = GET_FATTIME();
 800dee4:	f7fb ff92 	bl	8009e0c <get_fattime>
 800dee8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800deea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deec:	330e      	adds	r3, #14
 800deee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800def0:	4618      	mov	r0, r3
 800def2:	f7fd fc73 	bl	800b7dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800def6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800def8:	3316      	adds	r3, #22
 800defa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800defc:	4618      	mov	r0, r3
 800defe:	f7fd fc6d 	bl	800b7dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df04:	330b      	adds	r3, #11
 800df06:	2220      	movs	r2, #32
 800df08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df0e:	4611      	mov	r1, r2
 800df10:	4618      	mov	r0, r3
 800df12:	f7fe fbc4 	bl	800c69e <ld_clust>
 800df16:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df1c:	2200      	movs	r2, #0
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fe fbdc 	bl	800c6dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800df24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df26:	331c      	adds	r3, #28
 800df28:	2100      	movs	r1, #0
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fd fc56 	bl	800b7dc <st_dword>
					fs->wflag = 1;
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	2201      	movs	r2, #1
 800df34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800df36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d037      	beq.n	800dfac <f_open+0x1d4>
						dw = fs->winsect;
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df40:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800df42:	f107 0314 	add.w	r3, r7, #20
 800df46:	2200      	movs	r2, #0
 800df48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fe f8ef 	bl	800c12e <remove_chain>
 800df50:	4603      	mov	r3, r0
 800df52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800df56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d126      	bne.n	800dfac <f_open+0x1d4>
							res = move_window(fs, dw);
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df62:	4618      	mov	r0, r3
 800df64:	f7fd fe94 	bl	800bc90 <move_window>
 800df68:	4603      	mov	r3, r0
 800df6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df72:	3a01      	subs	r2, #1
 800df74:	611a      	str	r2, [r3, #16]
 800df76:	e019      	b.n	800dfac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800df78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d115      	bne.n	800dfac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800df80:	7ebb      	ldrb	r3, [r7, #26]
 800df82:	f003 0310 	and.w	r3, r3, #16
 800df86:	2b00      	cmp	r3, #0
 800df88:	d003      	beq.n	800df92 <f_open+0x1ba>
					res = FR_NO_FILE;
 800df8a:	2304      	movs	r3, #4
 800df8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800df90:	e00c      	b.n	800dfac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800df92:	79fb      	ldrb	r3, [r7, #7]
 800df94:	f003 0302 	and.w	r3, r3, #2
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d007      	beq.n	800dfac <f_open+0x1d4>
 800df9c:	7ebb      	ldrb	r3, [r7, #26]
 800df9e:	f003 0301 	and.w	r3, r3, #1
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d002      	beq.n	800dfac <f_open+0x1d4>
						res = FR_DENIED;
 800dfa6:	2307      	movs	r3, #7
 800dfa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800dfac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d128      	bne.n	800e006 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	f003 0308 	and.w	r3, r3, #8
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d003      	beq.n	800dfc6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dfbe:	79fb      	ldrb	r3, [r7, #7]
 800dfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfc4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dfce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dfd4:	79fb      	ldrb	r3, [r7, #7]
 800dfd6:	f023 0301 	bic.w	r3, r3, #1
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	bf14      	ite	ne
 800dfde:	2301      	movne	r3, #1
 800dfe0:	2300      	moveq	r3, #0
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	f107 0314 	add.w	r3, r7, #20
 800dfea:	4611      	mov	r1, r2
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fd fd1d 	bl	800ba2c <inc_lock>
 800dff2:	4602      	mov	r2, r0
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	691b      	ldr	r3, [r3, #16]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d102      	bne.n	800e006 <f_open+0x22e>
 800e000:	2302      	movs	r3, #2
 800e002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e006:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	f040 8095 	bne.w	800e13a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e014:	4611      	mov	r1, r2
 800e016:	4618      	mov	r0, r3
 800e018:	f7fe fb41 	bl	800c69e <ld_clust>
 800e01c:	4602      	mov	r2, r0
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e024:	331c      	adds	r3, #28
 800e026:	4618      	mov	r0, r3
 800e028:	f7fd fb9a 	bl	800b760 <ld_dword>
 800e02c:	4602      	mov	r2, r0
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2200      	movs	r2, #0
 800e036:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e038:	693a      	ldr	r2, [r7, #16]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	88da      	ldrh	r2, [r3, #6]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	79fa      	ldrb	r2, [r7, #7]
 800e04a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2200      	movs	r2, #0
 800e050:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2200      	movs	r2, #0
 800e056:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2200      	movs	r2, #0
 800e05c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	3330      	adds	r3, #48	; 0x30
 800e062:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e066:	2100      	movs	r1, #0
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fd fc04 	bl	800b876 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e06e:	79fb      	ldrb	r3, [r7, #7]
 800e070:	f003 0320 	and.w	r3, r3, #32
 800e074:	2b00      	cmp	r3, #0
 800e076:	d060      	beq.n	800e13a <f_open+0x362>
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d05c      	beq.n	800e13a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	68da      	ldr	r2, [r3, #12]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	895b      	ldrh	r3, [r3, #10]
 800e08c:	025b      	lsls	r3, r3, #9
 800e08e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e09c:	e016      	b.n	800e0cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fd feaf 	bl	800be06 <get_fat>
 800e0a8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e0aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d802      	bhi.n	800e0b6 <f_open+0x2de>
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e0b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0bc:	d102      	bne.n	800e0c4 <f_open+0x2ec>
 800e0be:	2301      	movs	r3, #1
 800e0c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e0c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d103      	bne.n	800e0dc <f_open+0x304>
 800e0d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d8e0      	bhi.n	800e09e <f_open+0x2c6>
				}
				fp->clust = clst;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e0e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e0e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d127      	bne.n	800e13a <f_open+0x362>
 800e0ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d022      	beq.n	800e13a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fd fe65 	bl	800bdc8 <clust2sect>
 800e0fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e102:	2b00      	cmp	r3, #0
 800e104:	d103      	bne.n	800e10e <f_open+0x336>
						res = FR_INT_ERR;
 800e106:	2302      	movs	r3, #2
 800e108:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e10c:	e015      	b.n	800e13a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e10e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e110:	0a5a      	lsrs	r2, r3, #9
 800e112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e114:	441a      	add	r2, r3
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	7858      	ldrb	r0, [r3, #1]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6a1a      	ldr	r2, [r3, #32]
 800e128:	2301      	movs	r3, #1
 800e12a:	f7fd faa3 	bl	800b674 <disk_read>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <f_open+0x362>
 800e134:	2301      	movs	r3, #1
 800e136:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e13a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d002      	beq.n	800e148 <f_open+0x370>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2200      	movs	r2, #0
 800e146:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e148:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3768      	adds	r7, #104	; 0x68
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b08e      	sub	sp, #56	; 0x38
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
 800e160:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	2200      	movs	r2, #0
 800e16a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f107 0214 	add.w	r2, r7, #20
 800e172:	4611      	mov	r1, r2
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fdb3 	bl	800dce0 <validate>
 800e17a:	4603      	mov	r3, r0
 800e17c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e180:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e184:	2b00      	cmp	r3, #0
 800e186:	d107      	bne.n	800e198 <f_read+0x44>
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	7d5b      	ldrb	r3, [r3, #21]
 800e18c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e190:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <f_read+0x4a>
 800e198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e19c:	e115      	b.n	800e3ca <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	7d1b      	ldrb	r3, [r3, #20]
 800e1a2:	f003 0301 	and.w	r3, r3, #1
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d101      	bne.n	800e1ae <f_read+0x5a>
 800e1aa:	2307      	movs	r3, #7
 800e1ac:	e10d      	b.n	800e3ca <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	68da      	ldr	r2, [r3, #12]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	699b      	ldr	r3, [r3, #24]
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	6a3b      	ldr	r3, [r7, #32]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	f240 80fe 	bls.w	800e3c0 <f_read+0x26c>
 800e1c4:	6a3b      	ldr	r3, [r7, #32]
 800e1c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e1c8:	e0fa      	b.n	800e3c0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	699b      	ldr	r3, [r3, #24]
 800e1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	f040 80c6 	bne.w	800e364 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	0a5b      	lsrs	r3, r3, #9
 800e1de:	697a      	ldr	r2, [r7, #20]
 800e1e0:	8952      	ldrh	r2, [r2, #10]
 800e1e2:	3a01      	subs	r2, #1
 800e1e4:	4013      	ands	r3, r2
 800e1e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d12f      	bne.n	800e24e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	699b      	ldr	r3, [r3, #24]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d103      	bne.n	800e1fe <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	633b      	str	r3, [r7, #48]	; 0x30
 800e1fc:	e013      	b.n	800e226 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e202:	2b00      	cmp	r3, #0
 800e204:	d007      	beq.n	800e216 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	699b      	ldr	r3, [r3, #24]
 800e20a:	4619      	mov	r1, r3
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f7fe f88b 	bl	800c328 <clmt_clust>
 800e212:	6338      	str	r0, [r7, #48]	; 0x30
 800e214:	e007      	b.n	800e226 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	69db      	ldr	r3, [r3, #28]
 800e21c:	4619      	mov	r1, r3
 800e21e:	4610      	mov	r0, r2
 800e220:	f7fd fdf1 	bl	800be06 <get_fat>
 800e224:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d804      	bhi.n	800e236 <f_read+0xe2>
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2202      	movs	r2, #2
 800e230:	755a      	strb	r2, [r3, #21]
 800e232:	2302      	movs	r3, #2
 800e234:	e0c9      	b.n	800e3ca <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e23c:	d104      	bne.n	800e248 <f_read+0xf4>
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2201      	movs	r2, #1
 800e242:	755a      	strb	r2, [r3, #21]
 800e244:	2301      	movs	r3, #1
 800e246:	e0c0      	b.n	800e3ca <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e24c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e24e:	697a      	ldr	r2, [r7, #20]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	69db      	ldr	r3, [r3, #28]
 800e254:	4619      	mov	r1, r3
 800e256:	4610      	mov	r0, r2
 800e258:	f7fd fdb6 	bl	800bdc8 <clust2sect>
 800e25c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d104      	bne.n	800e26e <f_read+0x11a>
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2202      	movs	r2, #2
 800e268:	755a      	strb	r2, [r3, #21]
 800e26a:	2302      	movs	r3, #2
 800e26c:	e0ad      	b.n	800e3ca <f_read+0x276>
			sect += csect;
 800e26e:	69ba      	ldr	r2, [r7, #24]
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	4413      	add	r3, r2
 800e274:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	0a5b      	lsrs	r3, r3, #9
 800e27a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d039      	beq.n	800e2f6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e282:	69fa      	ldr	r2, [r7, #28]
 800e284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e286:	4413      	add	r3, r2
 800e288:	697a      	ldr	r2, [r7, #20]
 800e28a:	8952      	ldrh	r2, [r2, #10]
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d905      	bls.n	800e29c <f_read+0x148>
					cc = fs->csize - csect;
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	895b      	ldrh	r3, [r3, #10]
 800e294:	461a      	mov	r2, r3
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	1ad3      	subs	r3, r2, r3
 800e29a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	7858      	ldrb	r0, [r3, #1]
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	69ba      	ldr	r2, [r7, #24]
 800e2a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2a6:	f7fd f9e5 	bl	800b674 <disk_read>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d004      	beq.n	800e2ba <f_read+0x166>
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	755a      	strb	r2, [r3, #21]
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e087      	b.n	800e3ca <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	7d1b      	ldrb	r3, [r3, #20]
 800e2be:	b25b      	sxtb	r3, r3
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	da14      	bge.n	800e2ee <f_read+0x19a>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6a1a      	ldr	r2, [r3, #32]
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	1ad3      	subs	r3, r2, r3
 800e2cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d90d      	bls.n	800e2ee <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6a1a      	ldr	r2, [r3, #32]
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	025b      	lsls	r3, r3, #9
 800e2dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2de:	18d0      	adds	r0, r2, r3
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	3330      	adds	r3, #48	; 0x30
 800e2e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	f7fd faa3 	bl	800b834 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f0:	025b      	lsls	r3, r3, #9
 800e2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e2f4:	e050      	b.n	800e398 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6a1b      	ldr	r3, [r3, #32]
 800e2fa:	69ba      	ldr	r2, [r7, #24]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d02e      	beq.n	800e35e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	7d1b      	ldrb	r3, [r3, #20]
 800e304:	b25b      	sxtb	r3, r3
 800e306:	2b00      	cmp	r3, #0
 800e308:	da18      	bge.n	800e33c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	7858      	ldrb	r0, [r3, #1]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6a1a      	ldr	r2, [r3, #32]
 800e318:	2301      	movs	r3, #1
 800e31a:	f7fd f9cb 	bl	800b6b4 <disk_write>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d004      	beq.n	800e32e <f_read+0x1da>
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2201      	movs	r2, #1
 800e328:	755a      	strb	r2, [r3, #21]
 800e32a:	2301      	movs	r3, #1
 800e32c:	e04d      	b.n	800e3ca <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	7d1b      	ldrb	r3, [r3, #20]
 800e332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e336:	b2da      	uxtb	r2, r3
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	7858      	ldrb	r0, [r3, #1]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e346:	2301      	movs	r3, #1
 800e348:	69ba      	ldr	r2, [r7, #24]
 800e34a:	f7fd f993 	bl	800b674 <disk_read>
 800e34e:	4603      	mov	r3, r0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d004      	beq.n	800e35e <f_read+0x20a>
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2201      	movs	r2, #1
 800e358:	755a      	strb	r2, [r3, #21]
 800e35a:	2301      	movs	r3, #1
 800e35c:	e035      	b.n	800e3ca <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	69ba      	ldr	r2, [r7, #24]
 800e362:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	699b      	ldr	r3, [r3, #24]
 800e368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e36c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e370:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	429a      	cmp	r2, r3
 800e378:	d901      	bls.n	800e37e <f_read+0x22a>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e38c:	4413      	add	r3, r2
 800e38e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e390:	4619      	mov	r1, r3
 800e392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e394:	f7fd fa4e 	bl	800b834 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	4413      	add	r3, r2
 800e39e:	627b      	str	r3, [r7, #36]	; 0x24
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	699a      	ldr	r2, [r3, #24]
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	441a      	add	r2, r3
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	619a      	str	r2, [r3, #24]
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b2:	441a      	add	r2, r3
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	601a      	str	r2, [r3, #0]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	f47f af01 	bne.w	800e1ca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3738      	adds	r7, #56	; 0x38
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b086      	sub	sp, #24
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f107 0208 	add.w	r2, r7, #8
 800e3e0:	4611      	mov	r1, r2
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7ff fc7c 	bl	800dce0 <validate>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e3ec:	7dfb      	ldrb	r3, [r7, #23]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d168      	bne.n	800e4c4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	7d1b      	ldrb	r3, [r3, #20]
 800e3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d062      	beq.n	800e4c4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	7d1b      	ldrb	r3, [r3, #20]
 800e402:	b25b      	sxtb	r3, r3
 800e404:	2b00      	cmp	r3, #0
 800e406:	da15      	bge.n	800e434 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	7858      	ldrb	r0, [r3, #1]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6a1a      	ldr	r2, [r3, #32]
 800e416:	2301      	movs	r3, #1
 800e418:	f7fd f94c 	bl	800b6b4 <disk_write>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <f_sync+0x54>
 800e422:	2301      	movs	r3, #1
 800e424:	e04f      	b.n	800e4c6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	7d1b      	ldrb	r3, [r3, #20]
 800e42a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e434:	f7fb fcea 	bl	8009e0c <get_fattime>
 800e438:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e43a:	68ba      	ldr	r2, [r7, #8]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e440:	4619      	mov	r1, r3
 800e442:	4610      	mov	r0, r2
 800e444:	f7fd fc24 	bl	800bc90 <move_window>
 800e448:	4603      	mov	r3, r0
 800e44a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e44c:	7dfb      	ldrb	r3, [r7, #23]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d138      	bne.n	800e4c4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e456:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	330b      	adds	r3, #11
 800e45c:	781a      	ldrb	r2, [r3, #0]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	330b      	adds	r3, #11
 800e462:	f042 0220 	orr.w	r2, r2, #32
 800e466:	b2d2      	uxtb	r2, r2
 800e468:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6818      	ldr	r0, [r3, #0]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	461a      	mov	r2, r3
 800e474:	68f9      	ldr	r1, [r7, #12]
 800e476:	f7fe f931 	bl	800c6dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f103 021c 	add.w	r2, r3, #28
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	4619      	mov	r1, r3
 800e486:	4610      	mov	r0, r2
 800e488:	f7fd f9a8 	bl	800b7dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	3316      	adds	r3, #22
 800e490:	6939      	ldr	r1, [r7, #16]
 800e492:	4618      	mov	r0, r3
 800e494:	f7fd f9a2 	bl	800b7dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	3312      	adds	r3, #18
 800e49c:	2100      	movs	r1, #0
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fd f981 	bl	800b7a6 <st_word>
					fs->wflag = 1;
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fd fc1d 	bl	800bcec <sync_fs>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	7d1b      	ldrb	r3, [r3, #20]
 800e4ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3718      	adds	r7, #24
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b084      	sub	sp, #16
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f7ff ff7b 	bl	800e3d2 <f_sync>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e4e0:	7bfb      	ldrb	r3, [r7, #15]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d118      	bne.n	800e518 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f107 0208 	add.w	r2, r7, #8
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7ff fbf6 	bl	800dce0 <validate>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e4f8:	7bfb      	ldrb	r3, [r7, #15]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d10c      	bne.n	800e518 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	691b      	ldr	r3, [r3, #16]
 800e502:	4618      	mov	r0, r3
 800e504:	f7fd fb20 	bl	800bb48 <dec_lock>
 800e508:	4603      	mov	r3, r0
 800e50a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e50c:	7bfb      	ldrb	r3, [r7, #15]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d102      	bne.n	800e518 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e518:	7bfb      	ldrb	r3, [r7, #15]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b086      	sub	sp, #24
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
 800e52a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d101      	bne.n	800e536 <f_opendir+0x14>
 800e532:	2309      	movs	r3, #9
 800e534:	e064      	b.n	800e600 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e53a:	f107 010c 	add.w	r1, r7, #12
 800e53e:	463b      	mov	r3, r7
 800e540:	2200      	movs	r2, #0
 800e542:	4618      	mov	r0, r3
 800e544:	f7ff f97a 	bl	800d83c <find_volume>
 800e548:	4603      	mov	r3, r0
 800e54a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e54c:	7dfb      	ldrb	r3, [r7, #23]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d14f      	bne.n	800e5f2 <f_opendir+0xd0>
		obj->fs = fs;
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	4619      	mov	r1, r3
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7ff f861 	bl	800d624 <follow_path>
 800e562:	4603      	mov	r3, r0
 800e564:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e566:	7dfb      	ldrb	r3, [r7, #23]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d13d      	bne.n	800e5e8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e572:	b25b      	sxtb	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	db12      	blt.n	800e59e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	799b      	ldrb	r3, [r3, #6]
 800e57c:	f003 0310 	and.w	r3, r3, #16
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00a      	beq.n	800e59a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6a1b      	ldr	r3, [r3, #32]
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f7fe f886 	bl	800c69e <ld_clust>
 800e592:	4602      	mov	r2, r0
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	609a      	str	r2, [r3, #8]
 800e598:	e001      	b.n	800e59e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e59a:	2305      	movs	r3, #5
 800e59c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e59e:	7dfb      	ldrb	r3, [r7, #23]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d121      	bne.n	800e5e8 <f_opendir+0xc6>
				obj->id = fs->id;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	88da      	ldrh	r2, [r3, #6]
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7fd feee 	bl	800c390 <dir_sdi>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d114      	bne.n	800e5e8 <f_opendir+0xc6>
					if (obj->sclust) {
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	689b      	ldr	r3, [r3, #8]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00d      	beq.n	800e5e2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e5c6:	2100      	movs	r1, #0
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7fd fa2f 	bl	800ba2c <inc_lock>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	691b      	ldr	r3, [r3, #16]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d105      	bne.n	800e5e8 <f_opendir+0xc6>
 800e5dc:	2312      	movs	r3, #18
 800e5de:	75fb      	strb	r3, [r7, #23]
 800e5e0:	e002      	b.n	800e5e8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e5e8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ea:	2b04      	cmp	r3, #4
 800e5ec:	d101      	bne.n	800e5f2 <f_opendir+0xd0>
 800e5ee:	2305      	movs	r3, #5
 800e5f0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e5f2:	7dfb      	ldrb	r3, [r7, #23]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <f_opendir+0xdc>
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e5fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3718      	adds	r7, #24
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f107 0208 	add.w	r2, r7, #8
 800e616:	4611      	mov	r1, r2
 800e618:	4618      	mov	r0, r3
 800e61a:	f7ff fb61 	bl	800dce0 <validate>
 800e61e:	4603      	mov	r3, r0
 800e620:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e622:	7bfb      	ldrb	r3, [r7, #15]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d110      	bne.n	800e64a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d006      	beq.n	800e63e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	691b      	ldr	r3, [r3, #16]
 800e634:	4618      	mov	r0, r3
 800e636:	f7fd fa87 	bl	800bb48 <dec_lock>
 800e63a:	4603      	mov	r3, r0
 800e63c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e63e:	7bfb      	ldrb	r3, [r7, #15]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d102      	bne.n	800e64a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f107 0208 	add.w	r2, r7, #8
 800e664:	4611      	mov	r1, r2
 800e666:	4618      	mov	r0, r3
 800e668:	f7ff fb3a 	bl	800dce0 <validate>
 800e66c:	4603      	mov	r3, r0
 800e66e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e670:	7bfb      	ldrb	r3, [r7, #15]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d126      	bne.n	800e6c4 <f_readdir+0x70>
		if (!fno) {
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d106      	bne.n	800e68a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e67c:	2100      	movs	r1, #0
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7fd fe86 	bl	800c390 <dir_sdi>
 800e684:	4603      	mov	r3, r0
 800e686:	73fb      	strb	r3, [r7, #15]
 800e688:	e01c      	b.n	800e6c4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e68a:	2100      	movs	r1, #0
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7fe fa32 	bl	800caf6 <dir_read>
 800e692:	4603      	mov	r3, r0
 800e694:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e696:	7bfb      	ldrb	r3, [r7, #15]
 800e698:	2b04      	cmp	r3, #4
 800e69a:	d101      	bne.n	800e6a0 <f_readdir+0x4c>
 800e69c:	2300      	movs	r3, #0
 800e69e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e6a0:	7bfb      	ldrb	r3, [r7, #15]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d10e      	bne.n	800e6c4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e6a6:	6839      	ldr	r1, [r7, #0]
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f7fe fc83 	bl	800cfb4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f7fd fee8 	bl	800c486 <dir_next>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e6ba:	7bfb      	ldrb	r3, [r7, #15]
 800e6bc:	2b04      	cmp	r3, #4
 800e6be:	d101      	bne.n	800e6c4 <f_readdir+0x70>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b084      	sub	sp, #16
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800e6d8:	6839      	ldr	r1, [r7, #0]
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7ff ffba 	bl	800e654 <f_readdir>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800e6e4:	7bfb      	ldrb	r3, [r7, #15]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d114      	bne.n	800e714 <f_findnext+0x46>
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d011      	beq.n	800e714 <f_findnext+0x46>
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	7d9b      	ldrb	r3, [r3, #22]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00d      	beq.n	800e714 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	f103 0116 	add.w	r1, r3, #22
 800e702:	2300      	movs	r3, #0
 800e704:	2200      	movs	r2, #0
 800e706:	f7fe fd59 	bl	800d1bc <pattern_matching>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d100      	bne.n	800e712 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800e710:	e7e2      	b.n	800e6d8 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800e712:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800e714:	7bfb      	ldrb	r3, [r7, #15]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b086      	sub	sp, #24
 800e722:	af00      	add	r7, sp, #0
 800e724:	60f8      	str	r0, [r7, #12]
 800e726:	60b9      	str	r1, [r7, #8]
 800e728:	607a      	str	r2, [r7, #4]
 800e72a:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800e732:	6879      	ldr	r1, [r7, #4]
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f7ff fef4 	bl	800e522 <f_opendir>
 800e73a:	4603      	mov	r3, r0
 800e73c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e73e:	7dfb      	ldrb	r3, [r7, #23]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d105      	bne.n	800e750 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800e744:	68b9      	ldr	r1, [r7, #8]
 800e746:	68f8      	ldr	r0, [r7, #12]
 800e748:	f7ff ffc1 	bl	800e6ce <f_findnext>
 800e74c:	4603      	mov	r3, r0
 800e74e:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800e750:	7dfb      	ldrb	r3, [r7, #23]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
	...

0800e75c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b087      	sub	sp, #28
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	4613      	mov	r3, r2
 800e768:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e76a:	2301      	movs	r3, #1
 800e76c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e772:	4b1f      	ldr	r3, [pc, #124]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e774:	7a5b      	ldrb	r3, [r3, #9]
 800e776:	b2db      	uxtb	r3, r3
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d131      	bne.n	800e7e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e77c:	4b1c      	ldr	r3, [pc, #112]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e77e:	7a5b      	ldrb	r3, [r3, #9]
 800e780:	b2db      	uxtb	r3, r3
 800e782:	461a      	mov	r2, r3
 800e784:	4b1a      	ldr	r3, [pc, #104]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e786:	2100      	movs	r1, #0
 800e788:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e78a:	4b19      	ldr	r3, [pc, #100]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e78c:	7a5b      	ldrb	r3, [r3, #9]
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	4a17      	ldr	r2, [pc, #92]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	4413      	add	r3, r2
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e79a:	4b15      	ldr	r3, [pc, #84]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e79c:	7a5b      	ldrb	r3, [r3, #9]
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	4b13      	ldr	r3, [pc, #76]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e7a4:	4413      	add	r3, r2
 800e7a6:	79fa      	ldrb	r2, [r7, #7]
 800e7a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e7aa:	4b11      	ldr	r3, [pc, #68]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e7ac:	7a5b      	ldrb	r3, [r3, #9]
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	b2d1      	uxtb	r1, r2
 800e7b4:	4a0e      	ldr	r2, [pc, #56]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e7b6:	7251      	strb	r1, [r2, #9]
 800e7b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e7ba:	7dbb      	ldrb	r3, [r7, #22]
 800e7bc:	3330      	adds	r3, #48	; 0x30
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	223a      	movs	r2, #58	; 0x3a
 800e7ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	3302      	adds	r3, #2
 800e7d0:	222f      	movs	r2, #47	; 0x2f
 800e7d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	3303      	adds	r3, #3
 800e7d8:	2200      	movs	r2, #0
 800e7da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	371c      	adds	r7, #28
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	20000990 	.word	0x20000990

0800e7f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e7fe:	2200      	movs	r2, #0
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff ffaa 	bl	800e75c <FATFS_LinkDriverEx>
 800e808:	4603      	mov	r3, r0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3708      	adds	r7, #8
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	4603      	mov	r3, r0
 800e81c:	6039      	str	r1, [r7, #0]
 800e81e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e820:	88fb      	ldrh	r3, [r7, #6]
 800e822:	2b7f      	cmp	r3, #127	; 0x7f
 800e824:	d802      	bhi.n	800e82c <ff_convert+0x18>
		c = chr;
 800e826:	88fb      	ldrh	r3, [r7, #6]
 800e828:	81fb      	strh	r3, [r7, #14]
 800e82a:	e025      	b.n	800e878 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00b      	beq.n	800e84a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e832:	88fb      	ldrh	r3, [r7, #6]
 800e834:	2bff      	cmp	r3, #255	; 0xff
 800e836:	d805      	bhi.n	800e844 <ff_convert+0x30>
 800e838:	88fb      	ldrh	r3, [r7, #6]
 800e83a:	3b80      	subs	r3, #128	; 0x80
 800e83c:	4a12      	ldr	r2, [pc, #72]	; (800e888 <ff_convert+0x74>)
 800e83e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e842:	e000      	b.n	800e846 <ff_convert+0x32>
 800e844:	2300      	movs	r3, #0
 800e846:	81fb      	strh	r3, [r7, #14]
 800e848:	e016      	b.n	800e878 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e84a:	2300      	movs	r3, #0
 800e84c:	81fb      	strh	r3, [r7, #14]
 800e84e:	e009      	b.n	800e864 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e850:	89fb      	ldrh	r3, [r7, #14]
 800e852:	4a0d      	ldr	r2, [pc, #52]	; (800e888 <ff_convert+0x74>)
 800e854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e858:	88fa      	ldrh	r2, [r7, #6]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d006      	beq.n	800e86c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e85e:	89fb      	ldrh	r3, [r7, #14]
 800e860:	3301      	adds	r3, #1
 800e862:	81fb      	strh	r3, [r7, #14]
 800e864:	89fb      	ldrh	r3, [r7, #14]
 800e866:	2b7f      	cmp	r3, #127	; 0x7f
 800e868:	d9f2      	bls.n	800e850 <ff_convert+0x3c>
 800e86a:	e000      	b.n	800e86e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e86c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e86e:	89fb      	ldrh	r3, [r7, #14]
 800e870:	3380      	adds	r3, #128	; 0x80
 800e872:	b29b      	uxth	r3, r3
 800e874:	b2db      	uxtb	r3, r3
 800e876:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e878:	89fb      	ldrh	r3, [r7, #14]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3714      	adds	r7, #20
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	08014f6c 	.word	0x08014f6c

0800e88c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b087      	sub	sp, #28
 800e890:	af00      	add	r7, sp, #0
 800e892:	4603      	mov	r3, r0
 800e894:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e896:	88fb      	ldrh	r3, [r7, #6]
 800e898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e89c:	d201      	bcs.n	800e8a2 <ff_wtoupper+0x16>
 800e89e:	4b3e      	ldr	r3, [pc, #248]	; (800e998 <ff_wtoupper+0x10c>)
 800e8a0:	e000      	b.n	800e8a4 <ff_wtoupper+0x18>
 800e8a2:	4b3e      	ldr	r3, [pc, #248]	; (800e99c <ff_wtoupper+0x110>)
 800e8a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	1c9a      	adds	r2, r3, #2
 800e8aa:	617a      	str	r2, [r7, #20]
 800e8ac:	881b      	ldrh	r3, [r3, #0]
 800e8ae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e8b0:	8a7b      	ldrh	r3, [r7, #18]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d068      	beq.n	800e988 <ff_wtoupper+0xfc>
 800e8b6:	88fa      	ldrh	r2, [r7, #6]
 800e8b8:	8a7b      	ldrh	r3, [r7, #18]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d364      	bcc.n	800e988 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	1c9a      	adds	r2, r3, #2
 800e8c2:	617a      	str	r2, [r7, #20]
 800e8c4:	881b      	ldrh	r3, [r3, #0]
 800e8c6:	823b      	strh	r3, [r7, #16]
 800e8c8:	8a3b      	ldrh	r3, [r7, #16]
 800e8ca:	0a1b      	lsrs	r3, r3, #8
 800e8cc:	81fb      	strh	r3, [r7, #14]
 800e8ce:	8a3b      	ldrh	r3, [r7, #16]
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e8d4:	88fa      	ldrh	r2, [r7, #6]
 800e8d6:	8a79      	ldrh	r1, [r7, #18]
 800e8d8:	8a3b      	ldrh	r3, [r7, #16]
 800e8da:	440b      	add	r3, r1
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	da49      	bge.n	800e974 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e8e0:	89fb      	ldrh	r3, [r7, #14]
 800e8e2:	2b08      	cmp	r3, #8
 800e8e4:	d84f      	bhi.n	800e986 <ff_wtoupper+0xfa>
 800e8e6:	a201      	add	r2, pc, #4	; (adr r2, 800e8ec <ff_wtoupper+0x60>)
 800e8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ec:	0800e911 	.word	0x0800e911
 800e8f0:	0800e923 	.word	0x0800e923
 800e8f4:	0800e939 	.word	0x0800e939
 800e8f8:	0800e941 	.word	0x0800e941
 800e8fc:	0800e949 	.word	0x0800e949
 800e900:	0800e951 	.word	0x0800e951
 800e904:	0800e959 	.word	0x0800e959
 800e908:	0800e961 	.word	0x0800e961
 800e90c:	0800e969 	.word	0x0800e969
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e910:	88fa      	ldrh	r2, [r7, #6]
 800e912:	8a7b      	ldrh	r3, [r7, #18]
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	697a      	ldr	r2, [r7, #20]
 800e91a:	4413      	add	r3, r2
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	80fb      	strh	r3, [r7, #6]
 800e920:	e027      	b.n	800e972 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e922:	88fa      	ldrh	r2, [r7, #6]
 800e924:	8a7b      	ldrh	r3, [r7, #18]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	b29b      	uxth	r3, r3
 800e92a:	f003 0301 	and.w	r3, r3, #1
 800e92e:	b29b      	uxth	r3, r3
 800e930:	88fa      	ldrh	r2, [r7, #6]
 800e932:	1ad3      	subs	r3, r2, r3
 800e934:	80fb      	strh	r3, [r7, #6]
 800e936:	e01c      	b.n	800e972 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e938:	88fb      	ldrh	r3, [r7, #6]
 800e93a:	3b10      	subs	r3, #16
 800e93c:	80fb      	strh	r3, [r7, #6]
 800e93e:	e018      	b.n	800e972 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e940:	88fb      	ldrh	r3, [r7, #6]
 800e942:	3b20      	subs	r3, #32
 800e944:	80fb      	strh	r3, [r7, #6]
 800e946:	e014      	b.n	800e972 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e948:	88fb      	ldrh	r3, [r7, #6]
 800e94a:	3b30      	subs	r3, #48	; 0x30
 800e94c:	80fb      	strh	r3, [r7, #6]
 800e94e:	e010      	b.n	800e972 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e950:	88fb      	ldrh	r3, [r7, #6]
 800e952:	3b1a      	subs	r3, #26
 800e954:	80fb      	strh	r3, [r7, #6]
 800e956:	e00c      	b.n	800e972 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e958:	88fb      	ldrh	r3, [r7, #6]
 800e95a:	3308      	adds	r3, #8
 800e95c:	80fb      	strh	r3, [r7, #6]
 800e95e:	e008      	b.n	800e972 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e960:	88fb      	ldrh	r3, [r7, #6]
 800e962:	3b50      	subs	r3, #80	; 0x50
 800e964:	80fb      	strh	r3, [r7, #6]
 800e966:	e004      	b.n	800e972 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e968:	88fb      	ldrh	r3, [r7, #6]
 800e96a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e96e:	80fb      	strh	r3, [r7, #6]
 800e970:	bf00      	nop
			}
			break;
 800e972:	e008      	b.n	800e986 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e974:	89fb      	ldrh	r3, [r7, #14]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d195      	bne.n	800e8a6 <ff_wtoupper+0x1a>
 800e97a:	8a3b      	ldrh	r3, [r7, #16]
 800e97c:	005b      	lsls	r3, r3, #1
 800e97e:	697a      	ldr	r2, [r7, #20]
 800e980:	4413      	add	r3, r2
 800e982:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e984:	e78f      	b.n	800e8a6 <ff_wtoupper+0x1a>
			break;
 800e986:	bf00      	nop
	}

	return chr;
 800e988:	88fb      	ldrh	r3, [r7, #6]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	371c      	adds	r7, #28
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	0801506c 	.word	0x0801506c
 800e99c:	08015260 	.word	0x08015260

0800e9a0 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	4912      	ldr	r1, [pc, #72]	; (800e9f0 <MX_USB_DEVICE_Init+0x50>)
 800e9a8:	4812      	ldr	r0, [pc, #72]	; (800e9f4 <MX_USB_DEVICE_Init+0x54>)
 800e9aa:	f7fb fcd8 	bl	800a35e <USBD_Init>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d001      	beq.n	800e9b8 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800e9b4:	f7f2 fed6 	bl	8001764 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 800e9b8:	490f      	ldr	r1, [pc, #60]	; (800e9f8 <MX_USB_DEVICE_Init+0x58>)
 800e9ba:	480e      	ldr	r0, [pc, #56]	; (800e9f4 <MX_USB_DEVICE_Init+0x54>)
 800e9bc:	f7fb fcff 	bl	800a3be <USBD_RegisterClass>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d001      	beq.n	800e9ca <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800e9c6:	f7f2 fecd 	bl	8001764 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 800e9ca:	490c      	ldr	r1, [pc, #48]	; (800e9fc <MX_USB_DEVICE_Init+0x5c>)
 800e9cc:	4809      	ldr	r0, [pc, #36]	; (800e9f4 <MX_USB_DEVICE_Init+0x54>)
 800e9ce:	f7fb fcaf 	bl	800a330 <USBD_Midi_RegisterInterface>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d001      	beq.n	800e9dc <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800e9d8:	f7f2 fec4 	bl	8001764 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e9dc:	4805      	ldr	r0, [pc, #20]	; (800e9f4 <MX_USB_DEVICE_Init+0x54>)
 800e9de:	f7fb fd15 	bl	800a40c <USBD_Start>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800e9e8:	f7f2 febc 	bl	8001764 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e9ec:	bf00      	nop
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	20000100 	.word	0x20000100
 800e9f4:	20002bf0 	.word	0x20002bf0
 800e9f8:	20000054 	.word	0x20000054
 800e9fc:	20000150 	.word	0x20000150

0800ea00 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	4603      	mov	r3, r0
 800ea08:	71fb      	strb	r3, [r7, #7]
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	71bb      	strb	r3, [r7, #6]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 800ea12:	230b      	movs	r3, #11
 800ea14:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 800ea16:	79fb      	ldrb	r3, [r7, #7]
 800ea18:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800ea1c:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 800ea1e:	7bfb      	ldrb	r3, [r7, #15]
 800ea20:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 800ea22:	7bbb      	ldrb	r3, [r7, #14]
 800ea24:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 800ea26:	79bb      	ldrb	r3, [r7, #6]
 800ea28:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 800ea2a:	797b      	ldrb	r3, [r7, #5]
 800ea2c:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 800ea2e:	f107 0208 	add.w	r2, r7, #8
 800ea32:	2304      	movs	r3, #4
 800ea34:	2181      	movs	r1, #129	; 0x81
 800ea36:	4810      	ldr	r0, [pc, #64]	; (800ea78 <MX_USB_Send_Midi+0x78>)
 800ea38:	f000 fbb5 	bl	800f1a6 <USBD_LL_Transmit>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2b03      	cmp	r3, #3
 800ea40:	d00a      	beq.n	800ea58 <MX_USB_Send_Midi+0x58>
 800ea42:	2b03      	cmp	r3, #3
 800ea44:	dc10      	bgt.n	800ea68 <MX_USB_Send_Midi+0x68>
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d002      	beq.n	800ea50 <MX_USB_Send_Midi+0x50>
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d008      	beq.n	800ea60 <MX_USB_Send_Midi+0x60>
 800ea4e:	e00b      	b.n	800ea68 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 800ea50:	480a      	ldr	r0, [pc, #40]	; (800ea7c <MX_USB_Send_Midi+0x7c>)
 800ea52:	f001 fe49 	bl	80106e8 <puts>
        break;
 800ea56:	e00b      	b.n	800ea70 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 800ea58:	4809      	ldr	r0, [pc, #36]	; (800ea80 <MX_USB_Send_Midi+0x80>)
 800ea5a:	f001 fe45 	bl	80106e8 <puts>
        break;
 800ea5e:	e007      	b.n	800ea70 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 800ea60:	4808      	ldr	r0, [pc, #32]	; (800ea84 <MX_USB_Send_Midi+0x84>)
 800ea62:	f001 fe41 	bl	80106e8 <puts>
        break;
 800ea66:	e003      	b.n	800ea70 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 800ea68:	4807      	ldr	r0, [pc, #28]	; (800ea88 <MX_USB_Send_Midi+0x88>)
 800ea6a:	f001 fe3d 	bl	80106e8 <puts>
    }
}
 800ea6e:	bf00      	nop
 800ea70:	bf00      	nop
 800ea72:	3710      	adds	r7, #16
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	20002bf0 	.word	0x20002bf0
 800ea7c:	08013b48 	.word	0x08013b48
 800ea80:	08013b4c 	.word	0x08013b4c
 800ea84:	08013b5c 	.word	0x08013b5c
 800ea88:	08013b6c 	.word	0x08013b6c

0800ea8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	4603      	mov	r3, r0
 800ea94:	6039      	str	r1, [r7, #0]
 800ea96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2212      	movs	r2, #18
 800ea9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ea9e:	4b03      	ldr	r3, [pc, #12]	; (800eaac <USBD_FS_DeviceDescriptor+0x20>)
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	2000011c 	.word	0x2000011c

0800eab0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	4603      	mov	r3, r0
 800eab8:	6039      	str	r1, [r7, #0]
 800eaba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	2204      	movs	r2, #4
 800eac0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eac2:	4b03      	ldr	r3, [pc, #12]	; (800ead0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr
 800ead0:	20000130 	.word	0x20000130

0800ead4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	4603      	mov	r3, r0
 800eadc:	6039      	str	r1, [r7, #0]
 800eade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eae0:	79fb      	ldrb	r3, [r7, #7]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d105      	bne.n	800eaf2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	4907      	ldr	r1, [pc, #28]	; (800eb08 <USBD_FS_ProductStrDescriptor+0x34>)
 800eaea:	4808      	ldr	r0, [pc, #32]	; (800eb0c <USBD_FS_ProductStrDescriptor+0x38>)
 800eaec:	f7fc fcbf 	bl	800b46e <USBD_GetString>
 800eaf0:	e004      	b.n	800eafc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	4904      	ldr	r1, [pc, #16]	; (800eb08 <USBD_FS_ProductStrDescriptor+0x34>)
 800eaf6:	4805      	ldr	r0, [pc, #20]	; (800eb0c <USBD_FS_ProductStrDescriptor+0x38>)
 800eaf8:	f7fc fcb9 	bl	800b46e <USBD_GetString>
  }
  return USBD_StrDesc;
 800eafc:	4b02      	ldr	r3, [pc, #8]	; (800eb08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	20002ec0 	.word	0x20002ec0
 800eb0c:	08013b88 	.word	0x08013b88

0800eb10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	4603      	mov	r3, r0
 800eb18:	6039      	str	r1, [r7, #0]
 800eb1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	4904      	ldr	r1, [pc, #16]	; (800eb30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb20:	4804      	ldr	r0, [pc, #16]	; (800eb34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb22:	f7fc fca4 	bl	800b46e <USBD_GetString>
  return USBD_StrDesc;
 800eb26:	4b02      	ldr	r3, [pc, #8]	; (800eb30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	20002ec0 	.word	0x20002ec0
 800eb34:	08013b9c 	.word	0x08013b9c

0800eb38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	4603      	mov	r3, r0
 800eb40:	6039      	str	r1, [r7, #0]
 800eb42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	221a      	movs	r2, #26
 800eb48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb4a:	f000 f843 	bl	800ebd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb4e:	4b02      	ldr	r3, [pc, #8]	; (800eb58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	20000134 	.word	0x20000134

0800eb5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	4603      	mov	r3, r0
 800eb64:	6039      	str	r1, [r7, #0]
 800eb66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d105      	bne.n	800eb7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	4907      	ldr	r1, [pc, #28]	; (800eb90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb72:	4808      	ldr	r0, [pc, #32]	; (800eb94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb74:	f7fc fc7b 	bl	800b46e <USBD_GetString>
 800eb78:	e004      	b.n	800eb84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb7a:	683a      	ldr	r2, [r7, #0]
 800eb7c:	4904      	ldr	r1, [pc, #16]	; (800eb90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb7e:	4805      	ldr	r0, [pc, #20]	; (800eb94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb80:	f7fc fc75 	bl	800b46e <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb84:	4b02      	ldr	r3, [pc, #8]	; (800eb90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	20002ec0 	.word	0x20002ec0
 800eb94:	08013bb0 	.word	0x08013bb0

0800eb98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	4603      	mov	r3, r0
 800eba0:	6039      	str	r1, [r7, #0]
 800eba2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eba4:	79fb      	ldrb	r3, [r7, #7]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d105      	bne.n	800ebb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	4907      	ldr	r1, [pc, #28]	; (800ebcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebae:	4808      	ldr	r0, [pc, #32]	; (800ebd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebb0:	f7fc fc5d 	bl	800b46e <USBD_GetString>
 800ebb4:	e004      	b.n	800ebc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebb6:	683a      	ldr	r2, [r7, #0]
 800ebb8:	4904      	ldr	r1, [pc, #16]	; (800ebcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebba:	4805      	ldr	r0, [pc, #20]	; (800ebd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebbc:	f7fc fc57 	bl	800b46e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebc0:	4b02      	ldr	r3, [pc, #8]	; (800ebcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3708      	adds	r7, #8
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	20002ec0 	.word	0x20002ec0
 800ebd0:	08013bc0 	.word	0x08013bc0

0800ebd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ebda:	4b0f      	ldr	r3, [pc, #60]	; (800ec18 <Get_SerialNum+0x44>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ebe0:	4b0e      	ldr	r3, [pc, #56]	; (800ec1c <Get_SerialNum+0x48>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ebe6:	4b0e      	ldr	r3, [pc, #56]	; (800ec20 <Get_SerialNum+0x4c>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d009      	beq.n	800ec0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ebfa:	2208      	movs	r2, #8
 800ebfc:	4909      	ldr	r1, [pc, #36]	; (800ec24 <Get_SerialNum+0x50>)
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f000 f814 	bl	800ec2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec04:	2204      	movs	r2, #4
 800ec06:	4908      	ldr	r1, [pc, #32]	; (800ec28 <Get_SerialNum+0x54>)
 800ec08:	68b8      	ldr	r0, [r7, #8]
 800ec0a:	f000 f80f 	bl	800ec2c <IntToUnicode>
  }
}
 800ec0e:	bf00      	nop
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	1fff7a10 	.word	0x1fff7a10
 800ec1c:	1fff7a14 	.word	0x1fff7a14
 800ec20:	1fff7a18 	.word	0x1fff7a18
 800ec24:	20000136 	.word	0x20000136
 800ec28:	20000146 	.word	0x20000146

0800ec2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b087      	sub	sp, #28
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	4613      	mov	r3, r2
 800ec38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec3e:	2300      	movs	r3, #0
 800ec40:	75fb      	strb	r3, [r7, #23]
 800ec42:	e027      	b.n	800ec94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	0f1b      	lsrs	r3, r3, #28
 800ec48:	2b09      	cmp	r3, #9
 800ec4a:	d80b      	bhi.n	800ec64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	0f1b      	lsrs	r3, r3, #28
 800ec50:	b2da      	uxtb	r2, r3
 800ec52:	7dfb      	ldrb	r3, [r7, #23]
 800ec54:	005b      	lsls	r3, r3, #1
 800ec56:	4619      	mov	r1, r3
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	440b      	add	r3, r1
 800ec5c:	3230      	adds	r2, #48	; 0x30
 800ec5e:	b2d2      	uxtb	r2, r2
 800ec60:	701a      	strb	r2, [r3, #0]
 800ec62:	e00a      	b.n	800ec7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	0f1b      	lsrs	r3, r3, #28
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	7dfb      	ldrb	r3, [r7, #23]
 800ec6c:	005b      	lsls	r3, r3, #1
 800ec6e:	4619      	mov	r1, r3
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	440b      	add	r3, r1
 800ec74:	3237      	adds	r2, #55	; 0x37
 800ec76:	b2d2      	uxtb	r2, r2
 800ec78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	011b      	lsls	r3, r3, #4
 800ec7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	005b      	lsls	r3, r3, #1
 800ec84:	3301      	adds	r3, #1
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	4413      	add	r3, r2
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ec8e:	7dfb      	ldrb	r3, [r7, #23]
 800ec90:	3301      	adds	r3, #1
 800ec92:	75fb      	strb	r3, [r7, #23]
 800ec94:	7dfa      	ldrb	r2, [r7, #23]
 800ec96:	79fb      	ldrb	r3, [r7, #7]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d3d3      	bcc.n	800ec44 <IntToUnicode+0x18>
  }
}
 800ec9c:	bf00      	nop
 800ec9e:	bf00      	nop
 800eca0:	371c      	adds	r7, #28
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr

0800ecaa <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 800ecaa:	b480      	push	{r7}
 800ecac:	b083      	sub	sp, #12
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
 800ecb2:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800ecb4:	2300      	movs	r3, #0
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	370c      	adds	r7, #12
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
	...

0800ecc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b08a      	sub	sp, #40	; 0x28
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eccc:	f107 0314 	add.w	r3, r7, #20
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	605a      	str	r2, [r3, #4]
 800ecd6:	609a      	str	r2, [r3, #8]
 800ecd8:	60da      	str	r2, [r3, #12]
 800ecda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ece4:	d13a      	bne.n	800ed5c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ece6:	2300      	movs	r3, #0
 800ece8:	613b      	str	r3, [r7, #16]
 800ecea:	4b1e      	ldr	r3, [pc, #120]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ecec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecee:	4a1d      	ldr	r2, [pc, #116]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ecf0:	f043 0301 	orr.w	r3, r3, #1
 800ecf4:	6313      	str	r3, [r2, #48]	; 0x30
 800ecf6:	4b1b      	ldr	r3, [pc, #108]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ecf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecfa:	f003 0301 	and.w	r3, r3, #1
 800ecfe:	613b      	str	r3, [r7, #16]
 800ed00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800ed02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ed06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed08:	2302      	movs	r3, #2
 800ed0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed10:	2300      	movs	r3, #0
 800ed12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed14:	230a      	movs	r3, #10
 800ed16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed18:	f107 0314 	add.w	r3, r7, #20
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	4812      	ldr	r0, [pc, #72]	; (800ed68 <HAL_PCD_MspInit+0xa4>)
 800ed20:	f7f4 ff08 	bl	8003b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed24:	4b0f      	ldr	r3, [pc, #60]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed28:	4a0e      	ldr	r2, [pc, #56]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed2e:	6353      	str	r3, [r2, #52]	; 0x34
 800ed30:	2300      	movs	r3, #0
 800ed32:	60fb      	str	r3, [r7, #12]
 800ed34:	4b0b      	ldr	r3, [pc, #44]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed38:	4a0a      	ldr	r2, [pc, #40]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed3e:	6453      	str	r3, [r2, #68]	; 0x44
 800ed40:	4b08      	ldr	r3, [pc, #32]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed48:	60fb      	str	r3, [r7, #12]
 800ed4a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	2100      	movs	r1, #0
 800ed50:	2043      	movs	r0, #67	; 0x43
 800ed52:	f7f4 feb8 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed56:	2043      	movs	r0, #67	; 0x43
 800ed58:	f7f4 fed1 	bl	8003afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed5c:	bf00      	nop
 800ed5e:	3728      	adds	r7, #40	; 0x28
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	40023800 	.word	0x40023800
 800ed68:	40020000 	.word	0x40020000

0800ed6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ed80:	4619      	mov	r1, r3
 800ed82:	4610      	mov	r0, r2
 800ed84:	f7fb fb8d 	bl	800a4a2 <USBD_LL_SetupStage>
}
 800ed88:	bf00      	nop
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	460b      	mov	r3, r1
 800ed9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800eda2:	78fa      	ldrb	r2, [r7, #3]
 800eda4:	6879      	ldr	r1, [r7, #4]
 800eda6:	4613      	mov	r3, r2
 800eda8:	00db      	lsls	r3, r3, #3
 800edaa:	1a9b      	subs	r3, r3, r2
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	440b      	add	r3, r1
 800edb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	78fb      	ldrb	r3, [r7, #3]
 800edb8:	4619      	mov	r1, r3
 800edba:	f7fb fbc7 	bl	800a54c <USBD_LL_DataOutStage>
}
 800edbe:	bf00      	nop
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b082      	sub	sp, #8
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	460b      	mov	r3, r1
 800edd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800edd8:	78fa      	ldrb	r2, [r7, #3]
 800edda:	6879      	ldr	r1, [r7, #4]
 800eddc:	4613      	mov	r3, r2
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	1a9b      	subs	r3, r3, r2
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	440b      	add	r3, r1
 800ede6:	3348      	adds	r3, #72	; 0x48
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	78fb      	ldrb	r3, [r7, #3]
 800edec:	4619      	mov	r1, r3
 800edee:	f7fb fc10 	bl	800a612 <USBD_LL_DataInStage>
}
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fb fd24 	bl	800a856 <USBD_LL_SOF>
}
 800ee0e:	bf00      	nop
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	2b02      	cmp	r3, #2
 800ee28:	d001      	beq.n	800ee2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ee2a:	f7f2 fc9b 	bl	8001764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee34:	7bfa      	ldrb	r2, [r7, #15]
 800ee36:	4611      	mov	r1, r2
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fb fcce 	bl	800a7da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fb fc7a 	bl	800a73e <USBD_LL_Reset>
}
 800ee4a:	bf00      	nop
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
	...

0800ee54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fb fcc9 	bl	800a7fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	6812      	ldr	r2, [r2, #0]
 800ee76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee7a:	f043 0301 	orr.w	r3, r3, #1
 800ee7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a1b      	ldr	r3, [r3, #32]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d005      	beq.n	800ee94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee88:	4b04      	ldr	r3, [pc, #16]	; (800ee9c <HAL_PCD_SuspendCallback+0x48>)
 800ee8a:	691b      	ldr	r3, [r3, #16]
 800ee8c:	4a03      	ldr	r2, [pc, #12]	; (800ee9c <HAL_PCD_SuspendCallback+0x48>)
 800ee8e:	f043 0306 	orr.w	r3, r3, #6
 800ee92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ee94:	bf00      	nop
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	e000ed00 	.word	0xe000ed00

0800eea0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fb fcb9 	bl	800a826 <USBD_LL_Resume>
}
 800eeb4:	bf00      	nop
 800eeb6:	3708      	adds	r7, #8
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	460b      	mov	r3, r1
 800eec6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eece:	78fa      	ldrb	r2, [r7, #3]
 800eed0:	4611      	mov	r1, r2
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fb fd07 	bl	800a8e6 <USBD_LL_IsoOUTIncomplete>
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	460b      	mov	r3, r1
 800eeea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eef2:	78fa      	ldrb	r2, [r7, #3]
 800eef4:	4611      	mov	r1, r2
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7fb fccf 	bl	800a89a <USBD_LL_IsoINIncomplete>
}
 800eefc:	bf00      	nop
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fb fd0d 	bl	800a932 <USBD_LL_DevConnected>
}
 800ef18:	bf00      	nop
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fb fd0a 	bl	800a948 <USBD_LL_DevDisconnected>
}
 800ef34:	bf00      	nop
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d13c      	bne.n	800efc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ef4c:	4a20      	ldr	r2, [pc, #128]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	4a1e      	ldr	r2, [pc, #120]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef5c:	4b1c      	ldr	r3, [pc, #112]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ef64:	4b1a      	ldr	r3, [pc, #104]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef66:	2204      	movs	r2, #4
 800ef68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ef6a:	4b19      	ldr	r3, [pc, #100]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef6c:	2202      	movs	r2, #2
 800ef6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef70:	4b17      	ldr	r3, [pc, #92]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef76:	4b16      	ldr	r3, [pc, #88]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef78:	2202      	movs	r2, #2
 800ef7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef7c:	4b14      	ldr	r3, [pc, #80]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef7e:	2200      	movs	r2, #0
 800ef80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ef82:	4b13      	ldr	r3, [pc, #76]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef84:	2200      	movs	r2, #0
 800ef86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ef88:	4b11      	ldr	r3, [pc, #68]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ef8e:	4b10      	ldr	r3, [pc, #64]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef90:	2200      	movs	r2, #0
 800ef92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ef94:	4b0e      	ldr	r3, [pc, #56]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef96:	2200      	movs	r2, #0
 800ef98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ef9a:	480d      	ldr	r0, [pc, #52]	; (800efd0 <USBD_LL_Init+0x94>)
 800ef9c:	f7f5 fd75 	bl	8004a8a <HAL_PCD_Init>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d001      	beq.n	800efaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800efa6:	f7f2 fbdd 	bl	8001764 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800efaa:	2180      	movs	r1, #128	; 0x80
 800efac:	4808      	ldr	r0, [pc, #32]	; (800efd0 <USBD_LL_Init+0x94>)
 800efae:	f7f6 fed2 	bl	8005d56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800efb2:	2240      	movs	r2, #64	; 0x40
 800efb4:	2100      	movs	r1, #0
 800efb6:	4806      	ldr	r0, [pc, #24]	; (800efd0 <USBD_LL_Init+0x94>)
 800efb8:	f7f6 fe86 	bl	8005cc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800efbc:	2280      	movs	r2, #128	; 0x80
 800efbe:	2101      	movs	r1, #1
 800efc0:	4803      	ldr	r0, [pc, #12]	; (800efd0 <USBD_LL_Init+0x94>)
 800efc2:	f7f6 fe81 	bl	8005cc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	200030c0 	.word	0x200030c0

0800efd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efdc:	2300      	movs	r3, #0
 800efde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efe0:	2300      	movs	r3, #0
 800efe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efea:	4618      	mov	r0, r3
 800efec:	f7f5 fe6a 	bl	8004cc4 <HAL_PCD_Start>
 800eff0:	4603      	mov	r3, r0
 800eff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eff4:	7bfb      	ldrb	r3, [r7, #15]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f000 f938 	bl	800f26c <USBD_Get_USB_Status>
 800effc:	4603      	mov	r3, r0
 800effe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f000:	7bbb      	ldrb	r3, [r7, #14]
}
 800f002:	4618      	mov	r0, r3
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f00a:	b580      	push	{r7, lr}
 800f00c:	b084      	sub	sp, #16
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
 800f012:	4608      	mov	r0, r1
 800f014:	4611      	mov	r1, r2
 800f016:	461a      	mov	r2, r3
 800f018:	4603      	mov	r3, r0
 800f01a:	70fb      	strb	r3, [r7, #3]
 800f01c:	460b      	mov	r3, r1
 800f01e:	70bb      	strb	r3, [r7, #2]
 800f020:	4613      	mov	r3, r2
 800f022:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f028:	2300      	movs	r3, #0
 800f02a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f032:	78bb      	ldrb	r3, [r7, #2]
 800f034:	883a      	ldrh	r2, [r7, #0]
 800f036:	78f9      	ldrb	r1, [r7, #3]
 800f038:	f7f6 fa4e 	bl	80054d8 <HAL_PCD_EP_Open>
 800f03c:	4603      	mov	r3, r0
 800f03e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f040:	7bfb      	ldrb	r3, [r7, #15]
 800f042:	4618      	mov	r0, r3
 800f044:	f000 f912 	bl	800f26c <USBD_Get_USB_Status>
 800f048:	4603      	mov	r3, r0
 800f04a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f04c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3710      	adds	r7, #16
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b084      	sub	sp, #16
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
 800f05e:	460b      	mov	r3, r1
 800f060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f062:	2300      	movs	r3, #0
 800f064:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f070:	78fa      	ldrb	r2, [r7, #3]
 800f072:	4611      	mov	r1, r2
 800f074:	4618      	mov	r0, r3
 800f076:	f7f6 fa97 	bl	80055a8 <HAL_PCD_EP_Close>
 800f07a:	4603      	mov	r3, r0
 800f07c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f07e:	7bfb      	ldrb	r3, [r7, #15]
 800f080:	4618      	mov	r0, r3
 800f082:	f000 f8f3 	bl	800f26c <USBD_Get_USB_Status>
 800f086:	4603      	mov	r3, r0
 800f088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f08a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0ae:	78fa      	ldrb	r2, [r7, #3]
 800f0b0:	4611      	mov	r1, r2
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7f6 fb6f 	bl	8005796 <HAL_PCD_EP_SetStall>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 f8d4 	bl	800f26c <USBD_Get_USB_Status>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3710      	adds	r7, #16
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b084      	sub	sp, #16
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
 800f0da:	460b      	mov	r3, r1
 800f0dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0ec:	78fa      	ldrb	r2, [r7, #3]
 800f0ee:	4611      	mov	r1, r2
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7f6 fbb4 	bl	800585e <HAL_PCD_EP_ClrStall>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 f8b5 	bl	800f26c <USBD_Get_USB_Status>
 800f102:	4603      	mov	r3, r0
 800f104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f106:	7bbb      	ldrb	r3, [r7, #14]
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3710      	adds	r7, #16
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	460b      	mov	r3, r1
 800f11a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f122:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	da0b      	bge.n	800f144 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f12c:	78fb      	ldrb	r3, [r7, #3]
 800f12e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f132:	68f9      	ldr	r1, [r7, #12]
 800f134:	4613      	mov	r3, r2
 800f136:	00db      	lsls	r3, r3, #3
 800f138:	1a9b      	subs	r3, r3, r2
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	440b      	add	r3, r1
 800f13e:	333e      	adds	r3, #62	; 0x3e
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	e00b      	b.n	800f15c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f144:	78fb      	ldrb	r3, [r7, #3]
 800f146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f14a:	68f9      	ldr	r1, [r7, #12]
 800f14c:	4613      	mov	r3, r2
 800f14e:	00db      	lsls	r3, r3, #3
 800f150:	1a9b      	subs	r3, r3, r2
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	440b      	add	r3, r1
 800f156:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f15a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3714      	adds	r7, #20
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	460b      	mov	r3, r1
 800f172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f174:	2300      	movs	r3, #0
 800f176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f178:	2300      	movs	r3, #0
 800f17a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f182:	78fa      	ldrb	r2, [r7, #3]
 800f184:	4611      	mov	r1, r2
 800f186:	4618      	mov	r0, r3
 800f188:	f7f6 f981 	bl	800548e <HAL_PCD_SetAddress>
 800f18c:	4603      	mov	r3, r0
 800f18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f190:	7bfb      	ldrb	r3, [r7, #15]
 800f192:	4618      	mov	r0, r3
 800f194:	f000 f86a 	bl	800f26c <USBD_Get_USB_Status>
 800f198:	4603      	mov	r3, r0
 800f19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}

0800f1a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b086      	sub	sp, #24
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	60f8      	str	r0, [r7, #12]
 800f1ae:	607a      	str	r2, [r7, #4]
 800f1b0:	603b      	str	r3, [r7, #0]
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f1c4:	7af9      	ldrb	r1, [r7, #11]
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	f7f6 fa9a 	bl	8005702 <HAL_PCD_EP_Transmit>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1d2:	7dfb      	ldrb	r3, [r7, #23]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f000 f849 	bl	800f26c <USBD_Get_USB_Status>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1de:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	607a      	str	r2, [r7, #4]
 800f1f2:	603b      	str	r3, [r7, #0]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f206:	7af9      	ldrb	r1, [r7, #11]
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	f7f6 fa16 	bl	800563c <HAL_PCD_EP_Receive>
 800f210:	4603      	mov	r3, r0
 800f212:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f214:	7dfb      	ldrb	r3, [r7, #23]
 800f216:	4618      	mov	r0, r3
 800f218:	f000 f828 	bl	800f26c <USBD_Get_USB_Status>
 800f21c:	4603      	mov	r3, r0
 800f21e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f220:	7dbb      	ldrb	r3, [r7, #22]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3718      	adds	r7, #24
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b082      	sub	sp, #8
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
 800f232:	460b      	mov	r3, r1
 800f234:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f23c:	78fa      	ldrb	r2, [r7, #3]
 800f23e:	4611      	mov	r1, r2
 800f240:	4618      	mov	r0, r3
 800f242:	f7f6 fa46 	bl	80056d2 <HAL_PCD_EP_GetRxCount>
 800f246:	4603      	mov	r3, r0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f258:	4b03      	ldr	r3, [pc, #12]	; (800f268 <USBD_static_malloc+0x18>)
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	370c      	adds	r7, #12
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop
 800f268:	2000099c 	.word	0x2000099c

0800f26c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	4603      	mov	r3, r0
 800f274:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f276:	2300      	movs	r3, #0
 800f278:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f27a:	79fb      	ldrb	r3, [r7, #7]
 800f27c:	2b03      	cmp	r3, #3
 800f27e:	d817      	bhi.n	800f2b0 <USBD_Get_USB_Status+0x44>
 800f280:	a201      	add	r2, pc, #4	; (adr r2, 800f288 <USBD_Get_USB_Status+0x1c>)
 800f282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f286:	bf00      	nop
 800f288:	0800f299 	.word	0x0800f299
 800f28c:	0800f29f 	.word	0x0800f29f
 800f290:	0800f2a5 	.word	0x0800f2a5
 800f294:	0800f2ab 	.word	0x0800f2ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f298:	2300      	movs	r3, #0
 800f29a:	73fb      	strb	r3, [r7, #15]
    break;
 800f29c:	e00b      	b.n	800f2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f29e:	2303      	movs	r3, #3
 800f2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2a2:	e008      	b.n	800f2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2a8:	e005      	b.n	800f2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2aa:	2303      	movs	r3, #3
 800f2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ae:	e002      	b.n	800f2b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2b0:	2303      	movs	r3, #3
 800f2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2b4:	bf00      	nop
  }
  return usb_status;
 800f2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3714      	adds	r7, #20
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b085      	sub	sp, #20
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d002      	beq.n	800f2da <case_insensitive_strcmp+0x16>
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d101      	bne.n	800f2de <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e056      	b.n	800f38c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d10d      	bne.n	800f302 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	e050      	b.n	800f38c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	e04a      	b.n	800f38c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	607b      	str	r3, [r7, #4]
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	3301      	adds	r3, #1
 800f300:	603b      	str	r3, [r7, #0]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	73fb      	strb	r3, [r7, #15]
 800f308:	7bfb      	ldrb	r3, [r7, #15]
 800f30a:	3301      	adds	r3, #1
 800f30c:	4a22      	ldr	r2, [pc, #136]	; (800f398 <case_insensitive_strcmp+0xd4>)
 800f30e:	4413      	add	r3, r2
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	f003 0303 	and.w	r3, r3, #3
 800f316:	2b01      	cmp	r3, #1
 800f318:	d103      	bne.n	800f322 <case_insensitive_strcmp+0x5e>
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	f103 0220 	add.w	r2, r3, #32
 800f320:	e000      	b.n	800f324 <case_insensitive_strcmp+0x60>
 800f322:	7bfa      	ldrb	r2, [r7, #15]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	73bb      	strb	r3, [r7, #14]
 800f32a:	7bbb      	ldrb	r3, [r7, #14]
 800f32c:	3301      	adds	r3, #1
 800f32e:	491a      	ldr	r1, [pc, #104]	; (800f398 <case_insensitive_strcmp+0xd4>)
 800f330:	440b      	add	r3, r1
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	f003 0303 	and.w	r3, r3, #3
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d102      	bne.n	800f342 <case_insensitive_strcmp+0x7e>
 800f33c:	7bbb      	ldrb	r3, [r7, #14]
 800f33e:	3320      	adds	r3, #32
 800f340:	e000      	b.n	800f344 <case_insensitive_strcmp+0x80>
 800f342:	7bbb      	ldrb	r3, [r7, #14]
 800f344:	429a      	cmp	r2, r3
 800f346:	d0d0      	beq.n	800f2ea <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	737b      	strb	r3, [r7, #13]
 800f34e:	7b7b      	ldrb	r3, [r7, #13]
 800f350:	3301      	adds	r3, #1
 800f352:	4a11      	ldr	r2, [pc, #68]	; (800f398 <case_insensitive_strcmp+0xd4>)
 800f354:	4413      	add	r3, r2
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	f003 0303 	and.w	r3, r3, #3
 800f35c:	2b01      	cmp	r3, #1
 800f35e:	d103      	bne.n	800f368 <case_insensitive_strcmp+0xa4>
 800f360:	7b7b      	ldrb	r3, [r7, #13]
 800f362:	f103 0220 	add.w	r2, r3, #32
 800f366:	e000      	b.n	800f36a <case_insensitive_strcmp+0xa6>
 800f368:	7b7a      	ldrb	r2, [r7, #13]
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	733b      	strb	r3, [r7, #12]
 800f370:	7b3b      	ldrb	r3, [r7, #12]
 800f372:	3301      	adds	r3, #1
 800f374:	4908      	ldr	r1, [pc, #32]	; (800f398 <case_insensitive_strcmp+0xd4>)
 800f376:	440b      	add	r3, r1
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	f003 0303 	and.w	r3, r3, #3
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d102      	bne.n	800f388 <case_insensitive_strcmp+0xc4>
 800f382:	7b3b      	ldrb	r3, [r7, #12]
 800f384:	3320      	adds	r3, #32
 800f386:	e000      	b.n	800f38a <case_insensitive_strcmp+0xc6>
 800f388:	7b3b      	ldrb	r3, [r7, #12]
 800f38a:	1ad3      	subs	r3, r2, r3
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3714      	adds	r7, #20
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr
 800f398:	0801531c 	.word	0x0801531c

0800f39c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	2028      	movs	r0, #40	; 0x28
 800f3aa:	4798      	blx	r3
 800f3ac:	60f8      	str	r0, [r7, #12]
    if (node)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d004      	beq.n	800f3be <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800f3b4:	2228      	movs	r2, #40	; 0x28
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f001 f85d 	bl	8010478 <memset>
    }

    return node;
 800f3be:	68fb      	ldr	r3, [r7, #12]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3710      	adds	r7, #16
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800f3d4:	e037      	b.n	800f446 <cJSON_Delete+0x7e>
    {
        next = item->next;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d108      	bne.n	800f3fa <cJSON_Delete+0x32>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d004      	beq.n	800f3fa <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	689b      	ldr	r3, [r3, #8]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7ff ffe7 	bl	800f3c8 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	68db      	ldr	r3, [r3, #12]
 800f3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f402:	2b00      	cmp	r3, #0
 800f404:	d109      	bne.n	800f41a <cJSON_Delete+0x52>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	691b      	ldr	r3, [r3, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d005      	beq.n	800f41a <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800f40e:	4b12      	ldr	r3, [pc, #72]	; (800f458 <cJSON_Delete+0x90>)
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	6912      	ldr	r2, [r2, #16]
 800f416:	4610      	mov	r0, r2
 800f418:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f422:	2b00      	cmp	r3, #0
 800f424:	d109      	bne.n	800f43a <cJSON_Delete+0x72>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6a1b      	ldr	r3, [r3, #32]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d005      	beq.n	800f43a <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800f42e:	4b0a      	ldr	r3, [pc, #40]	; (800f458 <cJSON_Delete+0x90>)
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	6a12      	ldr	r2, [r2, #32]
 800f436:	4610      	mov	r0, r2
 800f438:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800f43a:	4b07      	ldr	r3, [pc, #28]	; (800f458 <cJSON_Delete+0x90>)
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	4798      	blx	r3
        item = next;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1c4      	bne.n	800f3d6 <cJSON_Delete+0xe>
    }
}
 800f44c:	bf00      	nop
 800f44e:	bf00      	nop
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	20000154 	.word	0x20000154

0800f45c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800f45c:	b480      	push	{r7}
 800f45e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800f460:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800f462:	4618      	mov	r0, r3
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr
 800f46c:	0000      	movs	r0, r0
	...

0800f470 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b098      	sub	sp, #96	; 0x60
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
    double number = 0;
 800f47a:	f04f 0200 	mov.w	r2, #0
 800f47e:	f04f 0300 	mov.w	r3, #0
 800f482:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800f486:	2300      	movs	r3, #0
 800f488:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800f48a:	f7ff ffe7 	bl	800f45c <get_decimal_point>
 800f48e:	4603      	mov	r3, r0
 800f490:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800f494:	2300      	movs	r3, #0
 800f496:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d003      	beq.n	800f4a6 <parse_number+0x36>
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d101      	bne.n	800f4aa <parse_number+0x3a>
    {
        return false;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	e0c6      	b.n	800f638 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4ae:	e063      	b.n	800f578 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	6899      	ldr	r1, [r3, #8]
 800f4b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4ba:	440b      	add	r3, r1
 800f4bc:	4413      	add	r3, r2
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	2b45      	cmp	r3, #69	; 0x45
 800f4c2:	dc3d      	bgt.n	800f540 <parse_number+0xd0>
 800f4c4:	2b2b      	cmp	r3, #43	; 0x2b
 800f4c6:	db66      	blt.n	800f596 <parse_number+0x126>
 800f4c8:	3b2b      	subs	r3, #43	; 0x2b
 800f4ca:	2b1a      	cmp	r3, #26
 800f4cc:	d863      	bhi.n	800f596 <parse_number+0x126>
 800f4ce:	a201      	add	r2, pc, #4	; (adr r2, 800f4d4 <parse_number+0x64>)
 800f4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d4:	0800f545 	.word	0x0800f545
 800f4d8:	0800f597 	.word	0x0800f597
 800f4dc:	0800f545 	.word	0x0800f545
 800f4e0:	0800f563 	.word	0x0800f563
 800f4e4:	0800f597 	.word	0x0800f597
 800f4e8:	0800f545 	.word	0x0800f545
 800f4ec:	0800f545 	.word	0x0800f545
 800f4f0:	0800f545 	.word	0x0800f545
 800f4f4:	0800f545 	.word	0x0800f545
 800f4f8:	0800f545 	.word	0x0800f545
 800f4fc:	0800f545 	.word	0x0800f545
 800f500:	0800f545 	.word	0x0800f545
 800f504:	0800f545 	.word	0x0800f545
 800f508:	0800f545 	.word	0x0800f545
 800f50c:	0800f545 	.word	0x0800f545
 800f510:	0800f597 	.word	0x0800f597
 800f514:	0800f597 	.word	0x0800f597
 800f518:	0800f597 	.word	0x0800f597
 800f51c:	0800f597 	.word	0x0800f597
 800f520:	0800f597 	.word	0x0800f597
 800f524:	0800f597 	.word	0x0800f597
 800f528:	0800f597 	.word	0x0800f597
 800f52c:	0800f597 	.word	0x0800f597
 800f530:	0800f597 	.word	0x0800f597
 800f534:	0800f597 	.word	0x0800f597
 800f538:	0800f597 	.word	0x0800f597
 800f53c:	0800f545 	.word	0x0800f545
 800f540:	2b65      	cmp	r3, #101	; 0x65
 800f542:	d128      	bne.n	800f596 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	6899      	ldr	r1, [r3, #8]
 800f54c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f54e:	440b      	add	r3, r1
 800f550:	4413      	add	r3, r2
 800f552:	7819      	ldrb	r1, [r3, #0]
 800f554:	f107 0208 	add.w	r2, r7, #8
 800f558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f55a:	4413      	add	r3, r2
 800f55c:	460a      	mov	r2, r1
 800f55e:	701a      	strb	r2, [r3, #0]
                break;
 800f560:	e007      	b.n	800f572 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800f562:	f107 0208 	add.w	r2, r7, #8
 800f566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f568:	4413      	add	r3, r2
 800f56a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f56e:	701a      	strb	r2, [r3, #0]
                break;
 800f570:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800f572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f574:	3301      	adds	r3, #1
 800f576:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f57a:	2b3e      	cmp	r3, #62	; 0x3e
 800f57c:	d80d      	bhi.n	800f59a <parse_number+0x12a>
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00a      	beq.n	800f59a <parse_number+0x12a>
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	689a      	ldr	r2, [r3, #8]
 800f588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f58a:	441a      	add	r2, r3
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	429a      	cmp	r2, r3
 800f592:	d38d      	bcc.n	800f4b0 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800f594:	e001      	b.n	800f59a <parse_number+0x12a>
                goto loop_end;
 800f596:	bf00      	nop
 800f598:	e000      	b.n	800f59c <parse_number+0x12c>
loop_end:
 800f59a:	bf00      	nop
    number_c_string[i] = '\0';
 800f59c:	f107 0208 	add.w	r2, r7, #8
 800f5a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5a2:	4413      	add	r3, r2
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800f5a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f5ac:	f107 0308 	add.w	r3, r7, #8
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f002 f8f2 	bl	801179c <strtod>
 800f5b8:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800f5bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5be:	f107 0308 	add.w	r3, r7, #8
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d101      	bne.n	800f5ca <parse_number+0x15a>
    {
        return false; /* parse_error */
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	e036      	b.n	800f638 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f5d0:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800f5d4:	a31b      	add	r3, pc, #108	; (adr r3, 800f644 <parse_number+0x1d4>)
 800f5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f5de:	f7f1 faa9 	bl	8000b34 <__aeabi_dcmpge>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d004      	beq.n	800f5f2 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f5ee:	615a      	str	r2, [r3, #20]
 800f5f0:	e015      	b.n	800f61e <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800f5f2:	f04f 0200 	mov.w	r2, #0
 800f5f6:	4b12      	ldr	r3, [pc, #72]	; (800f640 <parse_number+0x1d0>)
 800f5f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f5fc:	f7f1 fa90 	bl	8000b20 <__aeabi_dcmple>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d004      	beq.n	800f610 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f60c:	615a      	str	r2, [r3, #20]
 800f60e:	e006      	b.n	800f61e <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 800f610:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f614:	f7f1 faa2 	bl	8000b5c <__aeabi_d2iz>
 800f618:	4602      	mov	r2, r0
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2208      	movs	r2, #8
 800f622:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	689b      	ldr	r3, [r3, #8]
 800f628:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f62a:	f107 0208 	add.w	r2, r7, #8
 800f62e:	1a8a      	subs	r2, r1, r2
 800f630:	441a      	add	r2, r3
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	609a      	str	r2, [r3, #8]
    return true;
 800f636:	2301      	movs	r3, #1
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3760      	adds	r7, #96	; 0x60
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	c1e00000 	.word	0xc1e00000
 800f644:	ffc00000 	.word	0xffc00000
 800f648:	41dfffff 	.word	0x41dfffff

0800f64c <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800f654:	2300      	movs	r3, #0
 800f656:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800f658:	2300      	movs	r3, #0
 800f65a:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800f65c:	2300      	movs	r3, #0
 800f65e:	60bb      	str	r3, [r7, #8]
 800f660:	e04c      	b.n	800f6fc <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	4413      	add	r3, r2
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	2b2f      	cmp	r3, #47	; 0x2f
 800f66c:	d90f      	bls.n	800f68e <parse_hex4+0x42>
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	4413      	add	r3, r2
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	2b39      	cmp	r3, #57	; 0x39
 800f678:	d809      	bhi.n	800f68e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	4413      	add	r3, r2
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	461a      	mov	r2, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	4413      	add	r3, r2
 800f688:	3b30      	subs	r3, #48	; 0x30
 800f68a:	60fb      	str	r3, [r7, #12]
 800f68c:	e02d      	b.n	800f6ea <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	4413      	add	r3, r2
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	2b40      	cmp	r3, #64	; 0x40
 800f698:	d90f      	bls.n	800f6ba <parse_hex4+0x6e>
 800f69a:	687a      	ldr	r2, [r7, #4]
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	4413      	add	r3, r2
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	2b46      	cmp	r3, #70	; 0x46
 800f6a4:	d809      	bhi.n	800f6ba <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	3b37      	subs	r3, #55	; 0x37
 800f6b6:	60fb      	str	r3, [r7, #12]
 800f6b8:	e017      	b.n	800f6ea <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	4413      	add	r3, r2
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	2b60      	cmp	r3, #96	; 0x60
 800f6c4:	d90f      	bls.n	800f6e6 <parse_hex4+0x9a>
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	4413      	add	r3, r2
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	2b66      	cmp	r3, #102	; 0x66
 800f6d0:	d809      	bhi.n	800f6e6 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	4413      	add	r3, r2
 800f6e0:	3b57      	subs	r3, #87	; 0x57
 800f6e2:	60fb      	str	r3, [r7, #12]
 800f6e4:	e001      	b.n	800f6ea <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	e00c      	b.n	800f704 <parse_hex4+0xb8>
        }

        if (i < 3)
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	2b02      	cmp	r3, #2
 800f6ee:	d802      	bhi.n	800f6f6 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	011b      	lsls	r3, r3, #4
 800f6f4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	60bb      	str	r3, [r7, #8]
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d9af      	bls.n	800f662 <parse_hex4+0x16>
        }
    }

    return h;
 800f702:	68fb      	ldr	r3, [r7, #12]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3714      	adds	r7, #20
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b08a      	sub	sp, #40	; 0x28
 800f714:	af00      	add	r7, sp, #0
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	60b9      	str	r1, [r7, #8]
 800f71a:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800f720:	2300      	movs	r3, #0
 800f722:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800f728:	2300      	movs	r3, #0
 800f72a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800f734:	2300      	movs	r3, #0
 800f736:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800f73a:	2300      	movs	r3, #0
 800f73c:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	2b05      	cmp	r3, #5
 800f748:	f340 80b7 	ble.w	800f8ba <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800f74c:	69bb      	ldr	r3, [r7, #24]
 800f74e:	3302      	adds	r3, #2
 800f750:	4618      	mov	r0, r3
 800f752:	f7ff ff7b 	bl	800f64c <parse_hex4>
 800f756:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f75e:	d304      	bcc.n	800f76a <utf16_literal_to_utf8+0x5a>
 800f760:	69fb      	ldr	r3, [r7, #28]
 800f762:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800f766:	f0c0 80aa 	bcc.w	800f8be <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800f770:	d337      	bcc.n	800f7e2 <utf16_literal_to_utf8+0xd2>
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f778:	d233      	bcs.n	800f7e2 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	3306      	adds	r3, #6
 800f77e:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800f780:	2300      	movs	r3, #0
 800f782:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800f784:	230c      	movs	r3, #12
 800f786:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800f78a:	68ba      	ldr	r2, [r7, #8]
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	1ad3      	subs	r3, r2, r3
 800f790:	2b05      	cmp	r3, #5
 800f792:	f340 8096 	ble.w	800f8c2 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	2b5c      	cmp	r3, #92	; 0x5c
 800f79c:	f040 8093 	bne.w	800f8c6 <utf16_literal_to_utf8+0x1b6>
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	2b75      	cmp	r3, #117	; 0x75
 800f7a8:	f040 808d 	bne.w	800f8c6 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	3302      	adds	r3, #2
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7ff ff4b 	bl	800f64c <parse_hex4>
 800f7b6:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f7be:	f0c0 8084 	bcc.w	800f8ca <utf16_literal_to_utf8+0x1ba>
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800f7c8:	d27f      	bcs.n	800f8ca <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	029a      	lsls	r2, r3, #10
 800f7ce:	4b43      	ldr	r3, [pc, #268]	; (800f8dc <utf16_literal_to_utf8+0x1cc>)
 800f7d0:	4013      	ands	r3, r2
 800f7d2:	693a      	ldr	r2, [r7, #16]
 800f7d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f7de:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800f7e0:	e004      	b.n	800f7ec <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800f7e2:	2306      	movs	r3, #6
 800f7e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800f7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ee:	2b7f      	cmp	r3, #127	; 0x7f
 800f7f0:	d803      	bhi.n	800f7fa <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f7f8:	e01f      	b.n	800f83a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800f7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f800:	d206      	bcs.n	800f810 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800f802:	2302      	movs	r3, #2
 800f804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800f808:	23c0      	movs	r3, #192	; 0xc0
 800f80a:	f887 3020 	strb.w	r3, [r7, #32]
 800f80e:	e014      	b.n	800f83a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f816:	d206      	bcs.n	800f826 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800f818:	2303      	movs	r3, #3
 800f81a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800f81e:	23e0      	movs	r3, #224	; 0xe0
 800f820:	f887 3020 	strb.w	r3, [r7, #32]
 800f824:	e009      	b.n	800f83a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800f826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f828:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800f82c:	d24f      	bcs.n	800f8ce <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800f82e:	2304      	movs	r3, #4
 800f830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800f834:	23f0      	movs	r3, #240	; 0xf0
 800f836:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800f83a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f83e:	3b01      	subs	r3, #1
 800f840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f844:	e015      	b.n	800f872 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800f846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f84e:	b2da      	uxtb	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6819      	ldr	r1, [r3, #0]
 800f854:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f858:	440b      	add	r3, r1
 800f85a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f85e:	b2d2      	uxtb	r2, r2
 800f860:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800f862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f864:	099b      	lsrs	r3, r3, #6
 800f866:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800f868:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f86c:	3b01      	subs	r3, #1
 800f86e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f872:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f876:	2b00      	cmp	r3, #0
 800f878:	d1e5      	bne.n	800f846 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800f87a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d909      	bls.n	800f896 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800f882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f884:	b2d9      	uxtb	r1, r3
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f88e:	430a      	orrs	r2, r1
 800f890:	b2d2      	uxtb	r2, r2
 800f892:	701a      	strb	r2, [r3, #0]
 800f894:	e007      	b.n	800f8a6 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800f896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f8a2:	b2d2      	uxtb	r2, r2
 800f8a4:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8ae:	441a      	add	r2, r3
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800f8b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f8b8:	e00b      	b.n	800f8d2 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800f8ba:	bf00      	nop
 800f8bc:	e008      	b.n	800f8d0 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800f8be:	bf00      	nop
 800f8c0:	e006      	b.n	800f8d0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f8c2:	bf00      	nop
 800f8c4:	e004      	b.n	800f8d0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f8c6:	bf00      	nop
 800f8c8:	e002      	b.n	800f8d0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f8ca:	bf00      	nop
 800f8cc:	e000      	b.n	800f8d0 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800f8ce:	bf00      	nop

fail:
    return 0;
 800f8d0:	2300      	movs	r3, #0
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3728      	adds	r7, #40	; 0x28
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	000ffc00 	.word	0x000ffc00

0800f8e0 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b08a      	sub	sp, #40	; 0x28
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	4413      	add	r3, r2
 800f8f6:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	689b      	ldr	r3, [r3, #8]
 800f900:	3301      	adds	r3, #1
 800f902:	4413      	add	r3, r2
 800f904:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800f906:	2300      	movs	r3, #0
 800f908:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800f90a:	2300      	movs	r3, #0
 800f90c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	4413      	add	r3, r2
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	2b22      	cmp	r3, #34	; 0x22
 800f91c:	f040 8102 	bne.w	800fb24 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800f920:	2300      	movs	r3, #0
 800f922:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800f924:	2300      	movs	r3, #0
 800f926:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800f928:	e017      	b.n	800f95a <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800f92a:	6a3b      	ldr	r3, [r7, #32]
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	2b5c      	cmp	r3, #92	; 0x5c
 800f930:	d110      	bne.n	800f954 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800f932:	6a3b      	ldr	r3, [r7, #32]
 800f934:	1c5a      	adds	r2, r3, #1
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	461a      	mov	r2, r3
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	429a      	cmp	r2, r3
 800f944:	f080 80f0 	bcs.w	800fb28 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800f948:	69bb      	ldr	r3, [r7, #24]
 800f94a:	3301      	adds	r3, #1
 800f94c:	61bb      	str	r3, [r7, #24]
                input_end++;
 800f94e:	6a3b      	ldr	r3, [r7, #32]
 800f950:	3301      	adds	r3, #1
 800f952:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800f954:	6a3b      	ldr	r3, [r7, #32]
 800f956:	3301      	adds	r3, #1
 800f958:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	6a3a      	ldr	r2, [r7, #32]
 800f960:	1ad3      	subs	r3, r2, r3
 800f962:	461a      	mov	r2, r3
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d203      	bcs.n	800f974 <parse_string+0x94>
 800f96c:	6a3b      	ldr	r3, [r7, #32]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	2b22      	cmp	r3, #34	; 0x22
 800f972:	d1da      	bne.n	800f92a <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	6a3a      	ldr	r2, [r7, #32]
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	461a      	mov	r2, r3
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	429a      	cmp	r2, r3
 800f984:	f080 80d2 	bcs.w	800fb2c <parse_string+0x24c>
 800f988:	6a3b      	ldr	r3, [r7, #32]
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	2b22      	cmp	r3, #34	; 0x22
 800f98e:	f040 80cd 	bne.w	800fb2c <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	4413      	add	r3, r2
 800f99c:	6a3a      	ldr	r2, [r7, #32]
 800f99e:	1ad3      	subs	r3, r2, r3
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	69bb      	ldr	r3, [r7, #24]
 800f9a4:	1ad3      	subs	r3, r2, r3
 800f9a6:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	691b      	ldr	r3, [r3, #16]
 800f9ac:	693a      	ldr	r2, [r7, #16]
 800f9ae:	3201      	adds	r2, #1
 800f9b0:	4610      	mov	r0, r2
 800f9b2:	4798      	blx	r3
 800f9b4:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f000 80b9 	beq.w	800fb30 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800f9c2:	e093      	b.n	800faec <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	2b5c      	cmp	r3, #92	; 0x5c
 800f9ca:	d008      	beq.n	800f9de <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800f9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9ce:	1c53      	adds	r3, r2, #1
 800f9d0:	627b      	str	r3, [r7, #36]	; 0x24
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	1c59      	adds	r1, r3, #1
 800f9d6:	60f9      	str	r1, [r7, #12]
 800f9d8:	7812      	ldrb	r2, [r2, #0]
 800f9da:	701a      	strb	r2, [r3, #0]
 800f9dc:	e086      	b.n	800faec <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800f9de:	2302      	movs	r3, #2
 800f9e0:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800f9e2:	6a3a      	ldr	r2, [r7, #32]
 800f9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f340 80a3 	ble.w	800fb34 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	2b75      	cmp	r3, #117	; 0x75
 800f9f6:	f300 809f 	bgt.w	800fb38 <parse_string+0x258>
 800f9fa:	2b5c      	cmp	r3, #92	; 0x5c
 800f9fc:	da04      	bge.n	800fa08 <parse_string+0x128>
 800f9fe:	2b22      	cmp	r3, #34	; 0x22
 800fa00:	d05c      	beq.n	800fabc <parse_string+0x1dc>
 800fa02:	2b2f      	cmp	r3, #47	; 0x2f
 800fa04:	d05a      	beq.n	800fabc <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800fa06:	e097      	b.n	800fb38 <parse_string+0x258>
 800fa08:	3b5c      	subs	r3, #92	; 0x5c
 800fa0a:	2b19      	cmp	r3, #25
 800fa0c:	f200 8094 	bhi.w	800fb38 <parse_string+0x258>
 800fa10:	a201      	add	r2, pc, #4	; (adr r2, 800fa18 <parse_string+0x138>)
 800fa12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa16:	bf00      	nop
 800fa18:	0800fabd 	.word	0x0800fabd
 800fa1c:	0800fb39 	.word	0x0800fb39
 800fa20:	0800fb39 	.word	0x0800fb39
 800fa24:	0800fb39 	.word	0x0800fb39
 800fa28:	0800fb39 	.word	0x0800fb39
 800fa2c:	0800fb39 	.word	0x0800fb39
 800fa30:	0800fa81 	.word	0x0800fa81
 800fa34:	0800fb39 	.word	0x0800fb39
 800fa38:	0800fb39 	.word	0x0800fb39
 800fa3c:	0800fb39 	.word	0x0800fb39
 800fa40:	0800fa8d 	.word	0x0800fa8d
 800fa44:	0800fb39 	.word	0x0800fb39
 800fa48:	0800fb39 	.word	0x0800fb39
 800fa4c:	0800fb39 	.word	0x0800fb39
 800fa50:	0800fb39 	.word	0x0800fb39
 800fa54:	0800fb39 	.word	0x0800fb39
 800fa58:	0800fb39 	.word	0x0800fb39
 800fa5c:	0800fb39 	.word	0x0800fb39
 800fa60:	0800fa99 	.word	0x0800fa99
 800fa64:	0800fb39 	.word	0x0800fb39
 800fa68:	0800fb39 	.word	0x0800fb39
 800fa6c:	0800fb39 	.word	0x0800fb39
 800fa70:	0800faa5 	.word	0x0800faa5
 800fa74:	0800fb39 	.word	0x0800fb39
 800fa78:	0800fab1 	.word	0x0800fab1
 800fa7c:	0800facb 	.word	0x0800facb
                    *output_pointer++ = '\b';
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	1c5a      	adds	r2, r3, #1
 800fa84:	60fa      	str	r2, [r7, #12]
 800fa86:	2208      	movs	r2, #8
 800fa88:	701a      	strb	r2, [r3, #0]
                    break;
 800fa8a:	e02b      	b.n	800fae4 <parse_string+0x204>
                    *output_pointer++ = '\f';
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	1c5a      	adds	r2, r3, #1
 800fa90:	60fa      	str	r2, [r7, #12]
 800fa92:	220c      	movs	r2, #12
 800fa94:	701a      	strb	r2, [r3, #0]
                    break;
 800fa96:	e025      	b.n	800fae4 <parse_string+0x204>
                    *output_pointer++ = '\n';
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	1c5a      	adds	r2, r3, #1
 800fa9c:	60fa      	str	r2, [r7, #12]
 800fa9e:	220a      	movs	r2, #10
 800faa0:	701a      	strb	r2, [r3, #0]
                    break;
 800faa2:	e01f      	b.n	800fae4 <parse_string+0x204>
                    *output_pointer++ = '\r';
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	60fa      	str	r2, [r7, #12]
 800faaa:	220d      	movs	r2, #13
 800faac:	701a      	strb	r2, [r3, #0]
                    break;
 800faae:	e019      	b.n	800fae4 <parse_string+0x204>
                    *output_pointer++ = '\t';
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	60fa      	str	r2, [r7, #12]
 800fab6:	2209      	movs	r2, #9
 800fab8:	701a      	strb	r2, [r3, #0]
                    break;
 800faba:	e013      	b.n	800fae4 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	60fa      	str	r2, [r7, #12]
 800fac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fac4:	7852      	ldrb	r2, [r2, #1]
 800fac6:	701a      	strb	r2, [r3, #0]
                    break;
 800fac8:	e00c      	b.n	800fae4 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800faca:	f107 030c 	add.w	r3, r7, #12
 800face:	461a      	mov	r2, r3
 800fad0:	6a39      	ldr	r1, [r7, #32]
 800fad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fad4:	f7ff fe1c 	bl	800f710 <utf16_literal_to_utf8>
 800fad8:	4603      	mov	r3, r0
 800fada:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800fadc:	7dfb      	ldrb	r3, [r7, #23]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d02c      	beq.n	800fb3c <parse_string+0x25c>
                    break;
 800fae2:	bf00      	nop
            }
            input_pointer += sequence_length;
 800fae4:	7dfb      	ldrb	r3, [r7, #23]
 800fae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fae8:	4413      	add	r3, r2
 800faea:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800faec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faee:	6a3b      	ldr	r3, [r7, #32]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	f4ff af67 	bcc.w	800f9c4 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2200      	movs	r2, #0
 800fafa:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2210      	movs	r2, #16
 800fb00:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	69fa      	ldr	r2, [r7, #28]
 800fb06:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	6a3a      	ldr	r2, [r7, #32]
 800fb0e:	1ad3      	subs	r3, r2, r3
 800fb10:	461a      	mov	r2, r3
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	689b      	ldr	r3, [r3, #8]
 800fb1a:	1c5a      	adds	r2, r3, #1
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	609a      	str	r2, [r3, #8]

    return true;
 800fb20:	2301      	movs	r3, #1
 800fb22:	e01e      	b.n	800fb62 <parse_string+0x282>
        goto fail;
 800fb24:	bf00      	nop
 800fb26:	e00a      	b.n	800fb3e <parse_string+0x25e>
                    goto fail;
 800fb28:	bf00      	nop
 800fb2a:	e008      	b.n	800fb3e <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800fb2c:	bf00      	nop
 800fb2e:	e006      	b.n	800fb3e <parse_string+0x25e>
            goto fail; /* allocation failure */
 800fb30:	bf00      	nop
 800fb32:	e004      	b.n	800fb3e <parse_string+0x25e>
                goto fail;
 800fb34:	bf00      	nop
 800fb36:	e002      	b.n	800fb3e <parse_string+0x25e>
                    goto fail;
 800fb38:	bf00      	nop
 800fb3a:	e000      	b.n	800fb3e <parse_string+0x25e>
                        goto fail;
 800fb3c:	bf00      	nop

fail:
    if (output != NULL)
 800fb3e:	69fb      	ldr	r3, [r7, #28]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d003      	beq.n	800fb4c <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	695b      	ldr	r3, [r3, #20]
 800fb48:	69f8      	ldr	r0, [r7, #28]
 800fb4a:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800fb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d006      	beq.n	800fb60 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb58:	1ad3      	subs	r3, r2, r3
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	609a      	str	r2, [r3, #8]
    }

    return false;
 800fb60:	2300      	movs	r3, #0
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3728      	adds	r7, #40	; 0x28
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
 800fb6a:	bf00      	nop

0800fb6c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d003      	beq.n	800fb82 <buffer_skip_whitespace+0x16>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d101      	bne.n	800fb86 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800fb82:	2300      	movs	r3, #0
 800fb84:	e02c      	b.n	800fbe0 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d005      	beq.n	800fb98 <buffer_skip_whitespace+0x2c>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	689a      	ldr	r2, [r3, #8]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d306      	bcc.n	800fba6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	e021      	b.n	800fbe0 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	1c5a      	adds	r2, r3, #1
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d00d      	beq.n	800fbc8 <buffer_skip_whitespace+0x5c>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	689a      	ldr	r2, [r3, #8]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d207      	bcs.n	800fbc8 <buffer_skip_whitespace+0x5c>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	2b20      	cmp	r3, #32
 800fbc6:	d9e9      	bls.n	800fb9c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	689a      	ldr	r2, [r3, #8]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d104      	bne.n	800fbde <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	689b      	ldr	r3, [r3, #8]
 800fbd8:	1e5a      	subs	r2, r3, #1
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800fbde:	687b      	ldr	r3, [r7, #4]
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	370c      	adds	r7, #12
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr

0800fbec <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d007      	beq.n	800fc0a <skip_utf8_bom+0x1e>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d003      	beq.n	800fc0a <skip_utf8_bom+0x1e>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d001      	beq.n	800fc0e <skip_utf8_bom+0x22>
    {
        return NULL;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	e01c      	b.n	800fc48 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d018      	beq.n	800fc46 <skip_utf8_bom+0x5a>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	689b      	ldr	r3, [r3, #8]
 800fc18:	1d1a      	adds	r2, r3, #4
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d211      	bcs.n	800fc46 <skip_utf8_bom+0x5a>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	689b      	ldr	r3, [r3, #8]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	2203      	movs	r2, #3
 800fc2e:	4908      	ldr	r1, [pc, #32]	; (800fc50 <skip_utf8_bom+0x64>)
 800fc30:	4618      	mov	r0, r3
 800fc32:	f000 ff7a 	bl	8010b2a <strncmp>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d104      	bne.n	800fc46 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	1cda      	adds	r2, r3, #3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800fc46:	687b      	ldr	r3, [r7, #4]
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	08013c04 	.word	0x08013c04

0800fc54 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b086      	sub	sp, #24
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d101      	bne.n	800fc6a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800fc66:	2300      	movs	r3, #0
 800fc68:	e00c      	b.n	800fc84 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f7f0 fac2 	bl	80001f4 <strlen>
 800fc70:	4603      	mov	r3, r0
 800fc72:	3301      	adds	r3, #1
 800fc74:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	68ba      	ldr	r2, [r7, #8]
 800fc7a:	6979      	ldr	r1, [r7, #20]
 800fc7c:	68f8      	ldr	r0, [r7, #12]
 800fc7e:	f000 f805 	bl	800fc8c <cJSON_ParseWithLengthOpts>
 800fc82:	4603      	mov	r3, r0
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3718      	adds	r7, #24
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b08e      	sub	sp, #56	; 0x38
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]
 800fc98:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800fc9a:	f107 0318 	add.w	r3, r7, #24
 800fc9e:	2200      	movs	r2, #0
 800fca0:	601a      	str	r2, [r3, #0]
 800fca2:	605a      	str	r2, [r3, #4]
 800fca4:	609a      	str	r2, [r3, #8]
 800fca6:	60da      	str	r2, [r3, #12]
 800fca8:	611a      	str	r2, [r3, #16]
 800fcaa:	615a      	str	r2, [r3, #20]
 800fcac:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800fcb2:	4b41      	ldr	r3, [pc, #260]	; (800fdb8 <cJSON_ParseWithLengthOpts+0x12c>)
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800fcb8:	4b3f      	ldr	r3, [pc, #252]	; (800fdb8 <cJSON_ParseWithLengthOpts+0x12c>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d042      	beq.n	800fd4a <cJSON_ParseWithLengthOpts+0xbe>
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d03f      	beq.n	800fd4a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800fcd6:	4a39      	ldr	r2, [pc, #228]	; (800fdbc <cJSON_ParseWithLengthOpts+0x130>)
 800fcd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fcdc:	ca07      	ldmia	r2, {r0, r1, r2}
 800fcde:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800fce2:	4836      	ldr	r0, [pc, #216]	; (800fdbc <cJSON_ParseWithLengthOpts+0x130>)
 800fce4:	f7ff fb5a 	bl	800f39c <cJSON_New_Item>
 800fce8:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800fcea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d02e      	beq.n	800fd4e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800fcf0:	f107 0318 	add.w	r3, r7, #24
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f7ff ff79 	bl	800fbec <skip_utf8_bom>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7ff ff35 	bl	800fb6c <buffer_skip_whitespace>
 800fd02:	4603      	mov	r3, r0
 800fd04:	4619      	mov	r1, r3
 800fd06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd08:	f000 f868 	bl	800fddc <parse_value>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d01f      	beq.n	800fd52 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d00e      	beq.n	800fd36 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800fd18:	f107 0318 	add.w	r3, r7, #24
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff ff25 	bl	800fb6c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800fd22:	6a3a      	ldr	r2, [r7, #32]
 800fd24:	69fb      	ldr	r3, [r7, #28]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d215      	bcs.n	800fd56 <cJSON_ParseWithLengthOpts+0xca>
 800fd2a:	69ba      	ldr	r2, [r7, #24]
 800fd2c:	6a3b      	ldr	r3, [r7, #32]
 800fd2e:	4413      	add	r3, r2
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d10f      	bne.n	800fd56 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d004      	beq.n	800fd46 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800fd3c:	69ba      	ldr	r2, [r7, #24]
 800fd3e:	6a3b      	ldr	r3, [r7, #32]
 800fd40:	441a      	add	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	601a      	str	r2, [r3, #0]
    }

    return item;
 800fd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd48:	e031      	b.n	800fdae <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800fd4a:	bf00      	nop
 800fd4c:	e004      	b.n	800fd58 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800fd4e:	bf00      	nop
 800fd50:	e002      	b.n	800fd58 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800fd52:	bf00      	nop
 800fd54:	e000      	b.n	800fd58 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800fd56:	bf00      	nop

fail:
    if (item != NULL)
 800fd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d002      	beq.n	800fd64 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800fd5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd60:	f7ff fb32 	bl	800f3c8 <cJSON_Delete>
    }

    if (value != NULL)
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d020      	beq.n	800fdac <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800fd72:	6a3a      	ldr	r2, [r7, #32]
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d202      	bcs.n	800fd80 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800fd7a:	6a3b      	ldr	r3, [r7, #32]
 800fd7c:	617b      	str	r3, [r7, #20]
 800fd7e:	e005      	b.n	800fd8c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d002      	beq.n	800fd8c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800fd86:	69fb      	ldr	r3, [r7, #28]
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d004      	beq.n	800fd9c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800fd92:	693a      	ldr	r2, [r7, #16]
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	441a      	add	r2, r3
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800fd9c:	4b06      	ldr	r3, [pc, #24]	; (800fdb8 <cJSON_ParseWithLengthOpts+0x12c>)
 800fd9e:	461a      	mov	r2, r3
 800fda0:	f107 0310 	add.w	r3, r7, #16
 800fda4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fda8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3738      	adds	r7, #56	; 0x38
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	20002570 	.word	0x20002570
 800fdbc:	20000154 	.word	0x20000154

0800fdc0 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800fdc8:	2200      	movs	r2, #0
 800fdca:	2100      	movs	r1, #0
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f7ff ff41 	bl	800fc54 <cJSON_ParseWithOpts>
 800fdd2:	4603      	mov	r3, r0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b082      	sub	sp, #8
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d003      	beq.n	800fdf4 <parse_value+0x18>
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d101      	bne.n	800fdf8 <parse_value+0x1c>
    {
        return false; /* no input */
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	e0d2      	b.n	800ff9e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d01d      	beq.n	800fe3a <parse_value+0x5e>
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	1d1a      	adds	r2, r3, #4
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d816      	bhi.n	800fe3a <parse_value+0x5e>
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	689b      	ldr	r3, [r3, #8]
 800fe14:	4413      	add	r3, r2
 800fe16:	2204      	movs	r2, #4
 800fe18:	4963      	ldr	r1, [pc, #396]	; (800ffa8 <parse_value+0x1cc>)
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f000 fe85 	bl	8010b2a <strncmp>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d109      	bne.n	800fe3a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2204      	movs	r2, #4
 800fe2a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	1d1a      	adds	r2, r3, #4
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	609a      	str	r2, [r3, #8]
        return true;
 800fe36:	2301      	movs	r3, #1
 800fe38:	e0b1      	b.n	800ff9e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d01d      	beq.n	800fe7c <parse_value+0xa0>
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	689b      	ldr	r3, [r3, #8]
 800fe44:	1d5a      	adds	r2, r3, #5
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d816      	bhi.n	800fe7c <parse_value+0xa0>
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	4413      	add	r3, r2
 800fe58:	2205      	movs	r2, #5
 800fe5a:	4954      	ldr	r1, [pc, #336]	; (800ffac <parse_value+0x1d0>)
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f000 fe64 	bl	8010b2a <strncmp>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d109      	bne.n	800fe7c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	689b      	ldr	r3, [r3, #8]
 800fe72:	1d5a      	adds	r2, r3, #5
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	609a      	str	r2, [r3, #8]
        return true;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	e090      	b.n	800ff9e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d020      	beq.n	800fec4 <parse_value+0xe8>
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	689b      	ldr	r3, [r3, #8]
 800fe86:	1d1a      	adds	r2, r3, #4
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d819      	bhi.n	800fec4 <parse_value+0xe8>
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	689b      	ldr	r3, [r3, #8]
 800fe98:	4413      	add	r3, r2
 800fe9a:	2204      	movs	r2, #4
 800fe9c:	4944      	ldr	r1, [pc, #272]	; (800ffb0 <parse_value+0x1d4>)
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f000 fe43 	bl	8010b2a <strncmp>
 800fea4:	4603      	mov	r3, r0
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d10c      	bne.n	800fec4 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2202      	movs	r2, #2
 800feae:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2201      	movs	r2, #1
 800feb4:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	689b      	ldr	r3, [r3, #8]
 800feba:	1d1a      	adds	r2, r3, #4
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	609a      	str	r2, [r3, #8]
        return true;
 800fec0:	2301      	movs	r3, #1
 800fec2:	e06c      	b.n	800ff9e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d013      	beq.n	800fef2 <parse_value+0x116>
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	689a      	ldr	r2, [r3, #8]
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d20d      	bcs.n	800fef2 <parse_value+0x116>
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	689b      	ldr	r3, [r3, #8]
 800fede:	4413      	add	r3, r2
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	2b22      	cmp	r3, #34	; 0x22
 800fee4:	d105      	bne.n	800fef2 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800fee6:	6839      	ldr	r1, [r7, #0]
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f7ff fcf9 	bl	800f8e0 <parse_string>
 800feee:	4603      	mov	r3, r0
 800fef0:	e055      	b.n	800ff9e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d023      	beq.n	800ff40 <parse_value+0x164>
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	689a      	ldr	r2, [r3, #8]
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d21d      	bcs.n	800ff40 <parse_value+0x164>
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	2b2d      	cmp	r3, #45	; 0x2d
 800ff12:	d00f      	beq.n	800ff34 <parse_value+0x158>
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	689b      	ldr	r3, [r3, #8]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	2b2f      	cmp	r3, #47	; 0x2f
 800ff22:	d90d      	bls.n	800ff40 <parse_value+0x164>
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	2b39      	cmp	r3, #57	; 0x39
 800ff32:	d805      	bhi.n	800ff40 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800ff34:	6839      	ldr	r1, [r7, #0]
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7ff fa9a 	bl	800f470 <parse_number>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	e02e      	b.n	800ff9e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d013      	beq.n	800ff6e <parse_value+0x192>
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	689a      	ldr	r2, [r3, #8]
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d20d      	bcs.n	800ff6e <parse_value+0x192>
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	689b      	ldr	r3, [r3, #8]
 800ff5a:	4413      	add	r3, r2
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	2b5b      	cmp	r3, #91	; 0x5b
 800ff60:	d105      	bne.n	800ff6e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800ff62:	6839      	ldr	r1, [r7, #0]
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 f825 	bl	800ffb4 <parse_array>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	e017      	b.n	800ff9e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d013      	beq.n	800ff9c <parse_value+0x1c0>
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	689a      	ldr	r2, [r3, #8]
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d20d      	bcs.n	800ff9c <parse_value+0x1c0>
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	681a      	ldr	r2, [r3, #0]
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	689b      	ldr	r3, [r3, #8]
 800ff88:	4413      	add	r3, r2
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	2b7b      	cmp	r3, #123	; 0x7b
 800ff8e:	d105      	bne.n	800ff9c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800ff90:	6839      	ldr	r1, [r7, #0]
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 f8d2 	bl	801013c <parse_object>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	e000      	b.n	800ff9e <parse_value+0x1c2>
    }

    return false;
 800ff9c:	2300      	movs	r3, #0
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3708      	adds	r7, #8
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	08013bdc 	.word	0x08013bdc
 800ffac:	08013c08 	.word	0x08013c08
 800ffb0:	08013c10 	.word	0x08013c10

0800ffb4 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b086      	sub	sp, #24
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	68db      	ldr	r3, [r3, #12]
 800ffca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ffce:	d301      	bcc.n	800ffd4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	e0af      	b.n	8010134 <parse_array+0x180>
    }
    input_buffer->depth++;
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	68db      	ldr	r3, [r3, #12]
 800ffd8:	1c5a      	adds	r2, r3, #1
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	2b5b      	cmp	r3, #91	; 0x5b
 800ffec:	f040 8094 	bne.w	8010118 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	689b      	ldr	r3, [r3, #8]
 800fff4:	1c5a      	adds	r2, r3, #1
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800fffa:	6838      	ldr	r0, [r7, #0]
 800fffc:	f7ff fdb6 	bl	800fb6c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d00d      	beq.n	8010022 <parse_array+0x6e>
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	689a      	ldr	r2, [r3, #8]
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	429a      	cmp	r2, r3
 8010010:	d207      	bcs.n	8010022 <parse_array+0x6e>
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	689b      	ldr	r3, [r3, #8]
 801001a:	4413      	add	r3, r2
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	2b5d      	cmp	r3, #93	; 0x5d
 8010020:	d061      	beq.n	80100e6 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d005      	beq.n	8010034 <parse_array+0x80>
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	689a      	ldr	r2, [r3, #8]
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	d305      	bcc.n	8010040 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	1e5a      	subs	r2, r3, #1
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	609a      	str	r2, [r3, #8]
        goto fail;
 801003e:	e072      	b.n	8010126 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	1e5a      	subs	r2, r3, #1
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	3310      	adds	r3, #16
 801004e:	4618      	mov	r0, r3
 8010050:	f7ff f9a4 	bl	800f39c <cJSON_New_Item>
 8010054:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d05f      	beq.n	801011c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d104      	bne.n	801006c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	617b      	str	r3, [r7, #20]
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	613b      	str	r3, [r7, #16]
 801006a:	e007      	b.n	801007c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	68fa      	ldr	r2, [r7, #12]
 8010070:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	693a      	ldr	r2, [r7, #16]
 8010076:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	1c5a      	adds	r2, r3, #1
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8010086:	6838      	ldr	r0, [r7, #0]
 8010088:	f7ff fd70 	bl	800fb6c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 801008c:	6839      	ldr	r1, [r7, #0]
 801008e:	6938      	ldr	r0, [r7, #16]
 8010090:	f7ff fea4 	bl	800fddc <parse_value>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d042      	beq.n	8010120 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 801009a:	6838      	ldr	r0, [r7, #0]
 801009c:	f7ff fd66 	bl	800fb6c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d00d      	beq.n	80100c2 <parse_array+0x10e>
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	689a      	ldr	r2, [r3, #8]
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d207      	bcs.n	80100c2 <parse_array+0x10e>
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	689b      	ldr	r3, [r3, #8]
 80100ba:	4413      	add	r3, r2
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	2b2c      	cmp	r3, #44	; 0x2c
 80100c0:	d0c3      	beq.n	801004a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d02d      	beq.n	8010124 <parse_array+0x170>
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	689a      	ldr	r2, [r3, #8]
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d227      	bcs.n	8010124 <parse_array+0x170>
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	689b      	ldr	r3, [r3, #8]
 80100dc:	4413      	add	r3, r2
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	2b5d      	cmp	r3, #93	; 0x5d
 80100e2:	d11f      	bne.n	8010124 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80100e4:	e000      	b.n	80100e8 <parse_array+0x134>
        goto success;
 80100e6:	bf00      	nop
    input_buffer->depth--;
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	1e5a      	subs	r2, r3, #1
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d002      	beq.n	80100fe <parse_array+0x14a>
        head->prev = current_item;
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	693a      	ldr	r2, [r7, #16]
 80100fc:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2220      	movs	r2, #32
 8010102:	60da      	str	r2, [r3, #12]
    item->child = head;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	697a      	ldr	r2, [r7, #20]
 8010108:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	1c5a      	adds	r2, r3, #1
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	609a      	str	r2, [r3, #8]

    return true;
 8010114:	2301      	movs	r3, #1
 8010116:	e00d      	b.n	8010134 <parse_array+0x180>
        goto fail;
 8010118:	bf00      	nop
 801011a:	e004      	b.n	8010126 <parse_array+0x172>
            goto fail; /* allocation failure */
 801011c:	bf00      	nop
 801011e:	e002      	b.n	8010126 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8010120:	bf00      	nop
 8010122:	e000      	b.n	8010126 <parse_array+0x172>
        goto fail; /* expected end of array */
 8010124:	bf00      	nop

fail:
    if (head != NULL)
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d002      	beq.n	8010132 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 801012c:	6978      	ldr	r0, [r7, #20]
 801012e:	f7ff f94b 	bl	800f3c8 <cJSON_Delete>
    }

    return false;
 8010132:	2300      	movs	r3, #0
}
 8010134:	4618      	mov	r0, r3
 8010136:	3718      	adds	r7, #24
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b086      	sub	sp, #24
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8010146:	2300      	movs	r3, #0
 8010148:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 801014a:	2300      	movs	r3, #0
 801014c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010156:	d301      	bcc.n	801015c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8010158:	2300      	movs	r3, #0
 801015a:	e0ea      	b.n	8010332 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	1c5a      	adds	r2, r3, #1
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	f000 80d0 	beq.w	801030e <parse_object+0x1d2>
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	689a      	ldr	r2, [r3, #8]
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	429a      	cmp	r2, r3
 8010178:	f080 80c9 	bcs.w	801030e <parse_object+0x1d2>
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	4413      	add	r3, r2
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	2b7b      	cmp	r3, #123	; 0x7b
 801018a:	f040 80c0 	bne.w	801030e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	689b      	ldr	r3, [r3, #8]
 8010192:	1c5a      	adds	r2, r3, #1
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8010198:	6838      	ldr	r0, [r7, #0]
 801019a:	f7ff fce7 	bl	800fb6c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00e      	beq.n	80101c2 <parse_object+0x86>
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	689a      	ldr	r2, [r3, #8]
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d208      	bcs.n	80101c2 <parse_object+0x86>
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	4413      	add	r3, r2
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2b7d      	cmp	r3, #125	; 0x7d
 80101be:	f000 808d 	beq.w	80102dc <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d005      	beq.n	80101d4 <parse_object+0x98>
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	689a      	ldr	r2, [r3, #8]
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d305      	bcc.n	80101e0 <parse_object+0xa4>
    {
        input_buffer->offset--;
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	689b      	ldr	r3, [r3, #8]
 80101d8:	1e5a      	subs	r2, r3, #1
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	609a      	str	r2, [r3, #8]
        goto fail;
 80101de:	e0a1      	b.n	8010324 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	1e5a      	subs	r2, r3, #1
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	3310      	adds	r3, #16
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff f8d4 	bl	800f39c <cJSON_New_Item>
 80101f4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f000 808a 	beq.w	8010312 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d104      	bne.n	801020e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	617b      	str	r3, [r7, #20]
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	613b      	str	r3, [r7, #16]
 801020c:	e007      	b.n	801021e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	68fa      	ldr	r2, [r7, #12]
 8010212:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	693a      	ldr	r2, [r7, #16]
 8010218:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	1c5a      	adds	r2, r3, #1
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8010228:	6838      	ldr	r0, [r7, #0]
 801022a:	f7ff fc9f 	bl	800fb6c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 801022e:	6839      	ldr	r1, [r7, #0]
 8010230:	6938      	ldr	r0, [r7, #16]
 8010232:	f7ff fb55 	bl	800f8e0 <parse_string>
 8010236:	4603      	mov	r3, r0
 8010238:	2b00      	cmp	r3, #0
 801023a:	d06c      	beq.n	8010316 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 801023c:	6838      	ldr	r0, [r7, #0]
 801023e:	f7ff fc95 	bl	800fb6c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	691a      	ldr	r2, [r3, #16]
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	2200      	movs	r2, #0
 801024e:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d061      	beq.n	801031a <parse_object+0x1de>
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	689a      	ldr	r2, [r3, #8]
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	429a      	cmp	r2, r3
 8010260:	d25b      	bcs.n	801031a <parse_object+0x1de>
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	4413      	add	r3, r2
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	2b3a      	cmp	r3, #58	; 0x3a
 8010270:	d153      	bne.n	801031a <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	689b      	ldr	r3, [r3, #8]
 8010276:	1c5a      	adds	r2, r3, #1
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 801027c:	6838      	ldr	r0, [r7, #0]
 801027e:	f7ff fc75 	bl	800fb6c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8010282:	6839      	ldr	r1, [r7, #0]
 8010284:	6938      	ldr	r0, [r7, #16]
 8010286:	f7ff fda9 	bl	800fddc <parse_value>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d046      	beq.n	801031e <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8010290:	6838      	ldr	r0, [r7, #0]
 8010292:	f7ff fc6b 	bl	800fb6c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d00d      	beq.n	80102b8 <parse_object+0x17c>
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	689a      	ldr	r2, [r3, #8]
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d207      	bcs.n	80102b8 <parse_object+0x17c>
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	689b      	ldr	r3, [r3, #8]
 80102b0:	4413      	add	r3, r2
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	2b2c      	cmp	r3, #44	; 0x2c
 80102b6:	d098      	beq.n	80101ea <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d031      	beq.n	8010322 <parse_object+0x1e6>
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	689a      	ldr	r2, [r3, #8]
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d22b      	bcs.n	8010322 <parse_object+0x1e6>
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	689b      	ldr	r3, [r3, #8]
 80102d2:	4413      	add	r3, r2
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	2b7d      	cmp	r3, #125	; 0x7d
 80102d8:	d123      	bne.n	8010322 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 80102da:	e000      	b.n	80102de <parse_object+0x1a2>
        goto success; /* empty object */
 80102dc:	bf00      	nop
    input_buffer->depth--;
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	1e5a      	subs	r2, r3, #1
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d002      	beq.n	80102f4 <parse_object+0x1b8>
        head->prev = current_item;
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	693a      	ldr	r2, [r7, #16]
 80102f2:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2240      	movs	r2, #64	; 0x40
 80102f8:	60da      	str	r2, [r3, #12]
    item->child = head;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	697a      	ldr	r2, [r7, #20]
 80102fe:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	689b      	ldr	r3, [r3, #8]
 8010304:	1c5a      	adds	r2, r3, #1
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	609a      	str	r2, [r3, #8]
    return true;
 801030a:	2301      	movs	r3, #1
 801030c:	e011      	b.n	8010332 <parse_object+0x1f6>
        goto fail; /* not an object */
 801030e:	bf00      	nop
 8010310:	e008      	b.n	8010324 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8010312:	bf00      	nop
 8010314:	e006      	b.n	8010324 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8010316:	bf00      	nop
 8010318:	e004      	b.n	8010324 <parse_object+0x1e8>
            goto fail; /* invalid object */
 801031a:	bf00      	nop
 801031c:	e002      	b.n	8010324 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 801031e:	bf00      	nop
 8010320:	e000      	b.n	8010324 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8010322:	bf00      	nop

fail:
    if (head != NULL)
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d002      	beq.n	8010330 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 801032a:	6978      	ldr	r0, [r7, #20]
 801032c:	f7ff f84c 	bl	800f3c8 <cJSON_Delete>
    }

    return false;
 8010330:	2300      	movs	r3, #0
}
 8010332:	4618      	mov	r0, r3
 8010334:	3718      	adds	r7, #24
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b086      	sub	sp, #24
 801033e:	af00      	add	r7, sp, #0
 8010340:	60f8      	str	r0, [r7, #12]
 8010342:	60b9      	str	r1, [r7, #8]
 8010344:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8010346:	2300      	movs	r3, #0
 8010348:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d002      	beq.n	8010356 <get_object_item+0x1c>
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d101      	bne.n	801035a <get_object_item+0x20>
    {
        return NULL;
 8010356:	2300      	movs	r3, #0
 8010358:	e033      	b.n	80103c2 <get_object_item+0x88>
    }

    current_element = object->child;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d017      	beq.n	8010396 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8010366:	e002      	b.n	801036e <get_object_item+0x34>
        {
            current_element = current_element->next;
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d01c      	beq.n	80103ae <get_object_item+0x74>
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	6a1b      	ldr	r3, [r3, #32]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d018      	beq.n	80103ae <get_object_item+0x74>
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	6a1b      	ldr	r3, [r3, #32]
 8010380:	4619      	mov	r1, r3
 8010382:	68b8      	ldr	r0, [r7, #8]
 8010384:	f7ef ff2c 	bl	80001e0 <strcmp>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d1ec      	bne.n	8010368 <get_object_item+0x2e>
 801038e:	e00e      	b.n	80103ae <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d008      	beq.n	80103ae <get_object_item+0x74>
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	6a1b      	ldr	r3, [r3, #32]
 80103a0:	4619      	mov	r1, r3
 80103a2:	68b8      	ldr	r0, [r7, #8]
 80103a4:	f7fe ff8e 	bl	800f2c4 <case_insensitive_strcmp>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1f0      	bne.n	8010390 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d003      	beq.n	80103bc <get_object_item+0x82>
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	6a1b      	ldr	r3, [r3, #32]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d101      	bne.n	80103c0 <get_object_item+0x86>
        return NULL;
 80103bc:	2300      	movs	r3, #0
 80103be:	e000      	b.n	80103c2 <get_object_item+0x88>
    }

    return current_element;
 80103c0:	697b      	ldr	r3, [r7, #20]
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3718      	adds	r7, #24
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}

080103ca <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80103ca:	b580      	push	{r7, lr}
 80103cc:	b082      	sub	sp, #8
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
 80103d2:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80103d4:	2201      	movs	r2, #1
 80103d6:	6839      	ldr	r1, [r7, #0]
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7ff ffae 	bl	801033a <get_object_item>
 80103de:	4603      	mov	r3, r0
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <__errno>:
 80103e8:	4b01      	ldr	r3, [pc, #4]	; (80103f0 <__errno+0x8>)
 80103ea:	6818      	ldr	r0, [r3, #0]
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop
 80103f0:	20000160 	.word	0x20000160

080103f4 <__libc_init_array>:
 80103f4:	b570      	push	{r4, r5, r6, lr}
 80103f6:	4d0d      	ldr	r5, [pc, #52]	; (801042c <__libc_init_array+0x38>)
 80103f8:	4c0d      	ldr	r4, [pc, #52]	; (8010430 <__libc_init_array+0x3c>)
 80103fa:	1b64      	subs	r4, r4, r5
 80103fc:	10a4      	asrs	r4, r4, #2
 80103fe:	2600      	movs	r6, #0
 8010400:	42a6      	cmp	r6, r4
 8010402:	d109      	bne.n	8010418 <__libc_init_array+0x24>
 8010404:	4d0b      	ldr	r5, [pc, #44]	; (8010434 <__libc_init_array+0x40>)
 8010406:	4c0c      	ldr	r4, [pc, #48]	; (8010438 <__libc_init_array+0x44>)
 8010408:	f003 fa98 	bl	801393c <_init>
 801040c:	1b64      	subs	r4, r4, r5
 801040e:	10a4      	asrs	r4, r4, #2
 8010410:	2600      	movs	r6, #0
 8010412:	42a6      	cmp	r6, r4
 8010414:	d105      	bne.n	8010422 <__libc_init_array+0x2e>
 8010416:	bd70      	pop	{r4, r5, r6, pc}
 8010418:	f855 3b04 	ldr.w	r3, [r5], #4
 801041c:	4798      	blx	r3
 801041e:	3601      	adds	r6, #1
 8010420:	e7ee      	b.n	8010400 <__libc_init_array+0xc>
 8010422:	f855 3b04 	ldr.w	r3, [r5], #4
 8010426:	4798      	blx	r3
 8010428:	3601      	adds	r6, #1
 801042a:	e7f2      	b.n	8010412 <__libc_init_array+0x1e>
 801042c:	0801575c 	.word	0x0801575c
 8010430:	0801575c 	.word	0x0801575c
 8010434:	0801575c 	.word	0x0801575c
 8010438:	08015760 	.word	0x08015760

0801043c <malloc>:
 801043c:	4b02      	ldr	r3, [pc, #8]	; (8010448 <malloc+0xc>)
 801043e:	4601      	mov	r1, r0
 8010440:	6818      	ldr	r0, [r3, #0]
 8010442:	f000 b871 	b.w	8010528 <_malloc_r>
 8010446:	bf00      	nop
 8010448:	20000160 	.word	0x20000160

0801044c <free>:
 801044c:	4b02      	ldr	r3, [pc, #8]	; (8010458 <free+0xc>)
 801044e:	4601      	mov	r1, r0
 8010450:	6818      	ldr	r0, [r3, #0]
 8010452:	f000 b819 	b.w	8010488 <_free_r>
 8010456:	bf00      	nop
 8010458:	20000160 	.word	0x20000160

0801045c <memcpy>:
 801045c:	440a      	add	r2, r1
 801045e:	4291      	cmp	r1, r2
 8010460:	f100 33ff 	add.w	r3, r0, #4294967295
 8010464:	d100      	bne.n	8010468 <memcpy+0xc>
 8010466:	4770      	bx	lr
 8010468:	b510      	push	{r4, lr}
 801046a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801046e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010472:	4291      	cmp	r1, r2
 8010474:	d1f9      	bne.n	801046a <memcpy+0xe>
 8010476:	bd10      	pop	{r4, pc}

08010478 <memset>:
 8010478:	4402      	add	r2, r0
 801047a:	4603      	mov	r3, r0
 801047c:	4293      	cmp	r3, r2
 801047e:	d100      	bne.n	8010482 <memset+0xa>
 8010480:	4770      	bx	lr
 8010482:	f803 1b01 	strb.w	r1, [r3], #1
 8010486:	e7f9      	b.n	801047c <memset+0x4>

08010488 <_free_r>:
 8010488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801048a:	2900      	cmp	r1, #0
 801048c:	d048      	beq.n	8010520 <_free_r+0x98>
 801048e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010492:	9001      	str	r0, [sp, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	f1a1 0404 	sub.w	r4, r1, #4
 801049a:	bfb8      	it	lt
 801049c:	18e4      	addlt	r4, r4, r3
 801049e:	f002 f81d 	bl	80124dc <__malloc_lock>
 80104a2:	4a20      	ldr	r2, [pc, #128]	; (8010524 <_free_r+0x9c>)
 80104a4:	9801      	ldr	r0, [sp, #4]
 80104a6:	6813      	ldr	r3, [r2, #0]
 80104a8:	4615      	mov	r5, r2
 80104aa:	b933      	cbnz	r3, 80104ba <_free_r+0x32>
 80104ac:	6063      	str	r3, [r4, #4]
 80104ae:	6014      	str	r4, [r2, #0]
 80104b0:	b003      	add	sp, #12
 80104b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104b6:	f002 b817 	b.w	80124e8 <__malloc_unlock>
 80104ba:	42a3      	cmp	r3, r4
 80104bc:	d90b      	bls.n	80104d6 <_free_r+0x4e>
 80104be:	6821      	ldr	r1, [r4, #0]
 80104c0:	1862      	adds	r2, r4, r1
 80104c2:	4293      	cmp	r3, r2
 80104c4:	bf04      	itt	eq
 80104c6:	681a      	ldreq	r2, [r3, #0]
 80104c8:	685b      	ldreq	r3, [r3, #4]
 80104ca:	6063      	str	r3, [r4, #4]
 80104cc:	bf04      	itt	eq
 80104ce:	1852      	addeq	r2, r2, r1
 80104d0:	6022      	streq	r2, [r4, #0]
 80104d2:	602c      	str	r4, [r5, #0]
 80104d4:	e7ec      	b.n	80104b0 <_free_r+0x28>
 80104d6:	461a      	mov	r2, r3
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	b10b      	cbz	r3, 80104e0 <_free_r+0x58>
 80104dc:	42a3      	cmp	r3, r4
 80104de:	d9fa      	bls.n	80104d6 <_free_r+0x4e>
 80104e0:	6811      	ldr	r1, [r2, #0]
 80104e2:	1855      	adds	r5, r2, r1
 80104e4:	42a5      	cmp	r5, r4
 80104e6:	d10b      	bne.n	8010500 <_free_r+0x78>
 80104e8:	6824      	ldr	r4, [r4, #0]
 80104ea:	4421      	add	r1, r4
 80104ec:	1854      	adds	r4, r2, r1
 80104ee:	42a3      	cmp	r3, r4
 80104f0:	6011      	str	r1, [r2, #0]
 80104f2:	d1dd      	bne.n	80104b0 <_free_r+0x28>
 80104f4:	681c      	ldr	r4, [r3, #0]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	6053      	str	r3, [r2, #4]
 80104fa:	4421      	add	r1, r4
 80104fc:	6011      	str	r1, [r2, #0]
 80104fe:	e7d7      	b.n	80104b0 <_free_r+0x28>
 8010500:	d902      	bls.n	8010508 <_free_r+0x80>
 8010502:	230c      	movs	r3, #12
 8010504:	6003      	str	r3, [r0, #0]
 8010506:	e7d3      	b.n	80104b0 <_free_r+0x28>
 8010508:	6825      	ldr	r5, [r4, #0]
 801050a:	1961      	adds	r1, r4, r5
 801050c:	428b      	cmp	r3, r1
 801050e:	bf04      	itt	eq
 8010510:	6819      	ldreq	r1, [r3, #0]
 8010512:	685b      	ldreq	r3, [r3, #4]
 8010514:	6063      	str	r3, [r4, #4]
 8010516:	bf04      	itt	eq
 8010518:	1949      	addeq	r1, r1, r5
 801051a:	6021      	streq	r1, [r4, #0]
 801051c:	6054      	str	r4, [r2, #4]
 801051e:	e7c7      	b.n	80104b0 <_free_r+0x28>
 8010520:	b003      	add	sp, #12
 8010522:	bd30      	pop	{r4, r5, pc}
 8010524:	20002578 	.word	0x20002578

08010528 <_malloc_r>:
 8010528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801052a:	1ccd      	adds	r5, r1, #3
 801052c:	f025 0503 	bic.w	r5, r5, #3
 8010530:	3508      	adds	r5, #8
 8010532:	2d0c      	cmp	r5, #12
 8010534:	bf38      	it	cc
 8010536:	250c      	movcc	r5, #12
 8010538:	2d00      	cmp	r5, #0
 801053a:	4606      	mov	r6, r0
 801053c:	db01      	blt.n	8010542 <_malloc_r+0x1a>
 801053e:	42a9      	cmp	r1, r5
 8010540:	d903      	bls.n	801054a <_malloc_r+0x22>
 8010542:	230c      	movs	r3, #12
 8010544:	6033      	str	r3, [r6, #0]
 8010546:	2000      	movs	r0, #0
 8010548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801054a:	f001 ffc7 	bl	80124dc <__malloc_lock>
 801054e:	4921      	ldr	r1, [pc, #132]	; (80105d4 <_malloc_r+0xac>)
 8010550:	680a      	ldr	r2, [r1, #0]
 8010552:	4614      	mov	r4, r2
 8010554:	b99c      	cbnz	r4, 801057e <_malloc_r+0x56>
 8010556:	4f20      	ldr	r7, [pc, #128]	; (80105d8 <_malloc_r+0xb0>)
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	b923      	cbnz	r3, 8010566 <_malloc_r+0x3e>
 801055c:	4621      	mov	r1, r4
 801055e:	4630      	mov	r0, r6
 8010560:	f000 fa5c 	bl	8010a1c <_sbrk_r>
 8010564:	6038      	str	r0, [r7, #0]
 8010566:	4629      	mov	r1, r5
 8010568:	4630      	mov	r0, r6
 801056a:	f000 fa57 	bl	8010a1c <_sbrk_r>
 801056e:	1c43      	adds	r3, r0, #1
 8010570:	d123      	bne.n	80105ba <_malloc_r+0x92>
 8010572:	230c      	movs	r3, #12
 8010574:	6033      	str	r3, [r6, #0]
 8010576:	4630      	mov	r0, r6
 8010578:	f001 ffb6 	bl	80124e8 <__malloc_unlock>
 801057c:	e7e3      	b.n	8010546 <_malloc_r+0x1e>
 801057e:	6823      	ldr	r3, [r4, #0]
 8010580:	1b5b      	subs	r3, r3, r5
 8010582:	d417      	bmi.n	80105b4 <_malloc_r+0x8c>
 8010584:	2b0b      	cmp	r3, #11
 8010586:	d903      	bls.n	8010590 <_malloc_r+0x68>
 8010588:	6023      	str	r3, [r4, #0]
 801058a:	441c      	add	r4, r3
 801058c:	6025      	str	r5, [r4, #0]
 801058e:	e004      	b.n	801059a <_malloc_r+0x72>
 8010590:	6863      	ldr	r3, [r4, #4]
 8010592:	42a2      	cmp	r2, r4
 8010594:	bf0c      	ite	eq
 8010596:	600b      	streq	r3, [r1, #0]
 8010598:	6053      	strne	r3, [r2, #4]
 801059a:	4630      	mov	r0, r6
 801059c:	f001 ffa4 	bl	80124e8 <__malloc_unlock>
 80105a0:	f104 000b 	add.w	r0, r4, #11
 80105a4:	1d23      	adds	r3, r4, #4
 80105a6:	f020 0007 	bic.w	r0, r0, #7
 80105aa:	1ac2      	subs	r2, r0, r3
 80105ac:	d0cc      	beq.n	8010548 <_malloc_r+0x20>
 80105ae:	1a1b      	subs	r3, r3, r0
 80105b0:	50a3      	str	r3, [r4, r2]
 80105b2:	e7c9      	b.n	8010548 <_malloc_r+0x20>
 80105b4:	4622      	mov	r2, r4
 80105b6:	6864      	ldr	r4, [r4, #4]
 80105b8:	e7cc      	b.n	8010554 <_malloc_r+0x2c>
 80105ba:	1cc4      	adds	r4, r0, #3
 80105bc:	f024 0403 	bic.w	r4, r4, #3
 80105c0:	42a0      	cmp	r0, r4
 80105c2:	d0e3      	beq.n	801058c <_malloc_r+0x64>
 80105c4:	1a21      	subs	r1, r4, r0
 80105c6:	4630      	mov	r0, r6
 80105c8:	f000 fa28 	bl	8010a1c <_sbrk_r>
 80105cc:	3001      	adds	r0, #1
 80105ce:	d1dd      	bne.n	801058c <_malloc_r+0x64>
 80105d0:	e7cf      	b.n	8010572 <_malloc_r+0x4a>
 80105d2:	bf00      	nop
 80105d4:	20002578 	.word	0x20002578
 80105d8:	2000257c 	.word	0x2000257c

080105dc <iprintf>:
 80105dc:	b40f      	push	{r0, r1, r2, r3}
 80105de:	4b0a      	ldr	r3, [pc, #40]	; (8010608 <iprintf+0x2c>)
 80105e0:	b513      	push	{r0, r1, r4, lr}
 80105e2:	681c      	ldr	r4, [r3, #0]
 80105e4:	b124      	cbz	r4, 80105f0 <iprintf+0x14>
 80105e6:	69a3      	ldr	r3, [r4, #24]
 80105e8:	b913      	cbnz	r3, 80105f0 <iprintf+0x14>
 80105ea:	4620      	mov	r0, r4
 80105ec:	f001 fade 	bl	8011bac <__sinit>
 80105f0:	ab05      	add	r3, sp, #20
 80105f2:	9a04      	ldr	r2, [sp, #16]
 80105f4:	68a1      	ldr	r1, [r4, #8]
 80105f6:	9301      	str	r3, [sp, #4]
 80105f8:	4620      	mov	r0, r4
 80105fa:	f002 fdf1 	bl	80131e0 <_vfiprintf_r>
 80105fe:	b002      	add	sp, #8
 8010600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010604:	b004      	add	sp, #16
 8010606:	4770      	bx	lr
 8010608:	20000160 	.word	0x20000160

0801060c <_puts_r>:
 801060c:	b570      	push	{r4, r5, r6, lr}
 801060e:	460e      	mov	r6, r1
 8010610:	4605      	mov	r5, r0
 8010612:	b118      	cbz	r0, 801061c <_puts_r+0x10>
 8010614:	6983      	ldr	r3, [r0, #24]
 8010616:	b90b      	cbnz	r3, 801061c <_puts_r+0x10>
 8010618:	f001 fac8 	bl	8011bac <__sinit>
 801061c:	69ab      	ldr	r3, [r5, #24]
 801061e:	68ac      	ldr	r4, [r5, #8]
 8010620:	b913      	cbnz	r3, 8010628 <_puts_r+0x1c>
 8010622:	4628      	mov	r0, r5
 8010624:	f001 fac2 	bl	8011bac <__sinit>
 8010628:	4b2c      	ldr	r3, [pc, #176]	; (80106dc <_puts_r+0xd0>)
 801062a:	429c      	cmp	r4, r3
 801062c:	d120      	bne.n	8010670 <_puts_r+0x64>
 801062e:	686c      	ldr	r4, [r5, #4]
 8010630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010632:	07db      	lsls	r3, r3, #31
 8010634:	d405      	bmi.n	8010642 <_puts_r+0x36>
 8010636:	89a3      	ldrh	r3, [r4, #12]
 8010638:	0598      	lsls	r0, r3, #22
 801063a:	d402      	bmi.n	8010642 <_puts_r+0x36>
 801063c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801063e:	f001 fec2 	bl	80123c6 <__retarget_lock_acquire_recursive>
 8010642:	89a3      	ldrh	r3, [r4, #12]
 8010644:	0719      	lsls	r1, r3, #28
 8010646:	d51d      	bpl.n	8010684 <_puts_r+0x78>
 8010648:	6923      	ldr	r3, [r4, #16]
 801064a:	b1db      	cbz	r3, 8010684 <_puts_r+0x78>
 801064c:	3e01      	subs	r6, #1
 801064e:	68a3      	ldr	r3, [r4, #8]
 8010650:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010654:	3b01      	subs	r3, #1
 8010656:	60a3      	str	r3, [r4, #8]
 8010658:	bb39      	cbnz	r1, 80106aa <_puts_r+0x9e>
 801065a:	2b00      	cmp	r3, #0
 801065c:	da38      	bge.n	80106d0 <_puts_r+0xc4>
 801065e:	4622      	mov	r2, r4
 8010660:	210a      	movs	r1, #10
 8010662:	4628      	mov	r0, r5
 8010664:	f001 f8a6 	bl	80117b4 <__swbuf_r>
 8010668:	3001      	adds	r0, #1
 801066a:	d011      	beq.n	8010690 <_puts_r+0x84>
 801066c:	250a      	movs	r5, #10
 801066e:	e011      	b.n	8010694 <_puts_r+0x88>
 8010670:	4b1b      	ldr	r3, [pc, #108]	; (80106e0 <_puts_r+0xd4>)
 8010672:	429c      	cmp	r4, r3
 8010674:	d101      	bne.n	801067a <_puts_r+0x6e>
 8010676:	68ac      	ldr	r4, [r5, #8]
 8010678:	e7da      	b.n	8010630 <_puts_r+0x24>
 801067a:	4b1a      	ldr	r3, [pc, #104]	; (80106e4 <_puts_r+0xd8>)
 801067c:	429c      	cmp	r4, r3
 801067e:	bf08      	it	eq
 8010680:	68ec      	ldreq	r4, [r5, #12]
 8010682:	e7d5      	b.n	8010630 <_puts_r+0x24>
 8010684:	4621      	mov	r1, r4
 8010686:	4628      	mov	r0, r5
 8010688:	f001 f8f8 	bl	801187c <__swsetup_r>
 801068c:	2800      	cmp	r0, #0
 801068e:	d0dd      	beq.n	801064c <_puts_r+0x40>
 8010690:	f04f 35ff 	mov.w	r5, #4294967295
 8010694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010696:	07da      	lsls	r2, r3, #31
 8010698:	d405      	bmi.n	80106a6 <_puts_r+0x9a>
 801069a:	89a3      	ldrh	r3, [r4, #12]
 801069c:	059b      	lsls	r3, r3, #22
 801069e:	d402      	bmi.n	80106a6 <_puts_r+0x9a>
 80106a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106a2:	f001 fe91 	bl	80123c8 <__retarget_lock_release_recursive>
 80106a6:	4628      	mov	r0, r5
 80106a8:	bd70      	pop	{r4, r5, r6, pc}
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	da04      	bge.n	80106b8 <_puts_r+0xac>
 80106ae:	69a2      	ldr	r2, [r4, #24]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	dc06      	bgt.n	80106c2 <_puts_r+0xb6>
 80106b4:	290a      	cmp	r1, #10
 80106b6:	d004      	beq.n	80106c2 <_puts_r+0xb6>
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	1c5a      	adds	r2, r3, #1
 80106bc:	6022      	str	r2, [r4, #0]
 80106be:	7019      	strb	r1, [r3, #0]
 80106c0:	e7c5      	b.n	801064e <_puts_r+0x42>
 80106c2:	4622      	mov	r2, r4
 80106c4:	4628      	mov	r0, r5
 80106c6:	f001 f875 	bl	80117b4 <__swbuf_r>
 80106ca:	3001      	adds	r0, #1
 80106cc:	d1bf      	bne.n	801064e <_puts_r+0x42>
 80106ce:	e7df      	b.n	8010690 <_puts_r+0x84>
 80106d0:	6823      	ldr	r3, [r4, #0]
 80106d2:	250a      	movs	r5, #10
 80106d4:	1c5a      	adds	r2, r3, #1
 80106d6:	6022      	str	r2, [r4, #0]
 80106d8:	701d      	strb	r5, [r3, #0]
 80106da:	e7db      	b.n	8010694 <_puts_r+0x88>
 80106dc:	080154a0 	.word	0x080154a0
 80106e0:	080154c0 	.word	0x080154c0
 80106e4:	08015480 	.word	0x08015480

080106e8 <puts>:
 80106e8:	4b02      	ldr	r3, [pc, #8]	; (80106f4 <puts+0xc>)
 80106ea:	4601      	mov	r1, r0
 80106ec:	6818      	ldr	r0, [r3, #0]
 80106ee:	f7ff bf8d 	b.w	801060c <_puts_r>
 80106f2:	bf00      	nop
 80106f4:	20000160 	.word	0x20000160

080106f8 <swapfunc>:
 80106f8:	2b02      	cmp	r3, #2
 80106fa:	b510      	push	{r4, lr}
 80106fc:	d00a      	beq.n	8010714 <swapfunc+0x1c>
 80106fe:	0892      	lsrs	r2, r2, #2
 8010700:	3a01      	subs	r2, #1
 8010702:	6803      	ldr	r3, [r0, #0]
 8010704:	680c      	ldr	r4, [r1, #0]
 8010706:	f840 4b04 	str.w	r4, [r0], #4
 801070a:	2a00      	cmp	r2, #0
 801070c:	f841 3b04 	str.w	r3, [r1], #4
 8010710:	dcf6      	bgt.n	8010700 <swapfunc+0x8>
 8010712:	bd10      	pop	{r4, pc}
 8010714:	4402      	add	r2, r0
 8010716:	780c      	ldrb	r4, [r1, #0]
 8010718:	7803      	ldrb	r3, [r0, #0]
 801071a:	f800 4b01 	strb.w	r4, [r0], #1
 801071e:	f801 3b01 	strb.w	r3, [r1], #1
 8010722:	1a13      	subs	r3, r2, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	dcf6      	bgt.n	8010716 <swapfunc+0x1e>
 8010728:	e7f3      	b.n	8010712 <swapfunc+0x1a>

0801072a <med3.isra.0>:
 801072a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072c:	460f      	mov	r7, r1
 801072e:	4614      	mov	r4, r2
 8010730:	4606      	mov	r6, r0
 8010732:	461d      	mov	r5, r3
 8010734:	4798      	blx	r3
 8010736:	2800      	cmp	r0, #0
 8010738:	4621      	mov	r1, r4
 801073a:	4638      	mov	r0, r7
 801073c:	da0c      	bge.n	8010758 <med3.isra.0+0x2e>
 801073e:	47a8      	blx	r5
 8010740:	2800      	cmp	r0, #0
 8010742:	da02      	bge.n	801074a <med3.isra.0+0x20>
 8010744:	463c      	mov	r4, r7
 8010746:	4620      	mov	r0, r4
 8010748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801074a:	4621      	mov	r1, r4
 801074c:	4630      	mov	r0, r6
 801074e:	47a8      	blx	r5
 8010750:	2800      	cmp	r0, #0
 8010752:	dbf8      	blt.n	8010746 <med3.isra.0+0x1c>
 8010754:	4634      	mov	r4, r6
 8010756:	e7f6      	b.n	8010746 <med3.isra.0+0x1c>
 8010758:	47a8      	blx	r5
 801075a:	2800      	cmp	r0, #0
 801075c:	dcf2      	bgt.n	8010744 <med3.isra.0+0x1a>
 801075e:	4621      	mov	r1, r4
 8010760:	4630      	mov	r0, r6
 8010762:	47a8      	blx	r5
 8010764:	2800      	cmp	r0, #0
 8010766:	daee      	bge.n	8010746 <med3.isra.0+0x1c>
 8010768:	e7f4      	b.n	8010754 <med3.isra.0+0x2a>

0801076a <qsort>:
 801076a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801076e:	469a      	mov	sl, r3
 8010770:	ea40 0302 	orr.w	r3, r0, r2
 8010774:	079b      	lsls	r3, r3, #30
 8010776:	b097      	sub	sp, #92	; 0x5c
 8010778:	4606      	mov	r6, r0
 801077a:	4614      	mov	r4, r2
 801077c:	d11a      	bne.n	80107b4 <qsort+0x4a>
 801077e:	f1b2 0804 	subs.w	r8, r2, #4
 8010782:	bf18      	it	ne
 8010784:	f04f 0801 	movne.w	r8, #1
 8010788:	2300      	movs	r3, #0
 801078a:	9302      	str	r3, [sp, #8]
 801078c:	1933      	adds	r3, r6, r4
 801078e:	fb04 f701 	mul.w	r7, r4, r1
 8010792:	9301      	str	r3, [sp, #4]
 8010794:	2906      	cmp	r1, #6
 8010796:	eb06 0307 	add.w	r3, r6, r7
 801079a:	9303      	str	r3, [sp, #12]
 801079c:	d82a      	bhi.n	80107f4 <qsort+0x8a>
 801079e:	9b01      	ldr	r3, [sp, #4]
 80107a0:	9a03      	ldr	r2, [sp, #12]
 80107a2:	4293      	cmp	r3, r2
 80107a4:	d310      	bcc.n	80107c8 <qsort+0x5e>
 80107a6:	9b02      	ldr	r3, [sp, #8]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	f040 811f 	bne.w	80109ec <qsort+0x282>
 80107ae:	b017      	add	sp, #92	; 0x5c
 80107b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b4:	f04f 0802 	mov.w	r8, #2
 80107b8:	e7e6      	b.n	8010788 <qsort+0x1e>
 80107ba:	4643      	mov	r3, r8
 80107bc:	4622      	mov	r2, r4
 80107be:	4639      	mov	r1, r7
 80107c0:	4628      	mov	r0, r5
 80107c2:	f7ff ff99 	bl	80106f8 <swapfunc>
 80107c6:	e00e      	b.n	80107e6 <qsort+0x7c>
 80107c8:	9d01      	ldr	r5, [sp, #4]
 80107ca:	e00d      	b.n	80107e8 <qsort+0x7e>
 80107cc:	1b2f      	subs	r7, r5, r4
 80107ce:	4629      	mov	r1, r5
 80107d0:	4638      	mov	r0, r7
 80107d2:	47d0      	blx	sl
 80107d4:	2800      	cmp	r0, #0
 80107d6:	dd09      	ble.n	80107ec <qsort+0x82>
 80107d8:	f1b8 0f00 	cmp.w	r8, #0
 80107dc:	d1ed      	bne.n	80107ba <qsort+0x50>
 80107de:	682b      	ldr	r3, [r5, #0]
 80107e0:	683a      	ldr	r2, [r7, #0]
 80107e2:	602a      	str	r2, [r5, #0]
 80107e4:	603b      	str	r3, [r7, #0]
 80107e6:	463d      	mov	r5, r7
 80107e8:	42ae      	cmp	r6, r5
 80107ea:	d3ef      	bcc.n	80107cc <qsort+0x62>
 80107ec:	9b01      	ldr	r3, [sp, #4]
 80107ee:	4423      	add	r3, r4
 80107f0:	9301      	str	r3, [sp, #4]
 80107f2:	e7d4      	b.n	801079e <qsort+0x34>
 80107f4:	ea4f 0951 	mov.w	r9, r1, lsr #1
 80107f8:	1b3f      	subs	r7, r7, r4
 80107fa:	2907      	cmp	r1, #7
 80107fc:	fb04 6909 	mla	r9, r4, r9, r6
 8010800:	4437      	add	r7, r6
 8010802:	d022      	beq.n	801084a <qsort+0xe0>
 8010804:	2928      	cmp	r1, #40	; 0x28
 8010806:	d945      	bls.n	8010894 <qsort+0x12a>
 8010808:	08c9      	lsrs	r1, r1, #3
 801080a:	fb04 f501 	mul.w	r5, r4, r1
 801080e:	4653      	mov	r3, sl
 8010810:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8010814:	1971      	adds	r1, r6, r5
 8010816:	4630      	mov	r0, r6
 8010818:	f7ff ff87 	bl	801072a <med3.isra.0>
 801081c:	4649      	mov	r1, r9
 801081e:	eb09 0205 	add.w	r2, r9, r5
 8010822:	4653      	mov	r3, sl
 8010824:	4683      	mov	fp, r0
 8010826:	1b48      	subs	r0, r1, r5
 8010828:	f7ff ff7f 	bl	801072a <med3.isra.0>
 801082c:	463a      	mov	r2, r7
 801082e:	4681      	mov	r9, r0
 8010830:	4653      	mov	r3, sl
 8010832:	1b79      	subs	r1, r7, r5
 8010834:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8010838:	f7ff ff77 	bl	801072a <med3.isra.0>
 801083c:	4602      	mov	r2, r0
 801083e:	4649      	mov	r1, r9
 8010840:	4653      	mov	r3, sl
 8010842:	4658      	mov	r0, fp
 8010844:	f7ff ff71 	bl	801072a <med3.isra.0>
 8010848:	4681      	mov	r9, r0
 801084a:	f1b8 0f00 	cmp.w	r8, #0
 801084e:	d124      	bne.n	801089a <qsort+0x130>
 8010850:	6833      	ldr	r3, [r6, #0]
 8010852:	f8d9 2000 	ldr.w	r2, [r9]
 8010856:	6032      	str	r2, [r6, #0]
 8010858:	f8c9 3000 	str.w	r3, [r9]
 801085c:	eb06 0b04 	add.w	fp, r6, r4
 8010860:	46b9      	mov	r9, r7
 8010862:	465d      	mov	r5, fp
 8010864:	2300      	movs	r3, #0
 8010866:	45bb      	cmp	fp, r7
 8010868:	d835      	bhi.n	80108d6 <qsort+0x16c>
 801086a:	4631      	mov	r1, r6
 801086c:	4658      	mov	r0, fp
 801086e:	9304      	str	r3, [sp, #16]
 8010870:	47d0      	blx	sl
 8010872:	2800      	cmp	r0, #0
 8010874:	9b04      	ldr	r3, [sp, #16]
 8010876:	dc3e      	bgt.n	80108f6 <qsort+0x18c>
 8010878:	d10a      	bne.n	8010890 <qsort+0x126>
 801087a:	f1b8 0f00 	cmp.w	r8, #0
 801087e:	d113      	bne.n	80108a8 <qsort+0x13e>
 8010880:	682b      	ldr	r3, [r5, #0]
 8010882:	f8db 2000 	ldr.w	r2, [fp]
 8010886:	602a      	str	r2, [r5, #0]
 8010888:	f8cb 3000 	str.w	r3, [fp]
 801088c:	4425      	add	r5, r4
 801088e:	2301      	movs	r3, #1
 8010890:	44a3      	add	fp, r4
 8010892:	e7e8      	b.n	8010866 <qsort+0xfc>
 8010894:	463a      	mov	r2, r7
 8010896:	46b3      	mov	fp, r6
 8010898:	e7d1      	b.n	801083e <qsort+0xd4>
 801089a:	4643      	mov	r3, r8
 801089c:	4622      	mov	r2, r4
 801089e:	4649      	mov	r1, r9
 80108a0:	4630      	mov	r0, r6
 80108a2:	f7ff ff29 	bl	80106f8 <swapfunc>
 80108a6:	e7d9      	b.n	801085c <qsort+0xf2>
 80108a8:	4643      	mov	r3, r8
 80108aa:	4622      	mov	r2, r4
 80108ac:	4659      	mov	r1, fp
 80108ae:	4628      	mov	r0, r5
 80108b0:	f7ff ff22 	bl	80106f8 <swapfunc>
 80108b4:	e7ea      	b.n	801088c <qsort+0x122>
 80108b6:	d10b      	bne.n	80108d0 <qsort+0x166>
 80108b8:	f1b8 0f00 	cmp.w	r8, #0
 80108bc:	d114      	bne.n	80108e8 <qsort+0x17e>
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	f8d9 2000 	ldr.w	r2, [r9]
 80108c4:	603a      	str	r2, [r7, #0]
 80108c6:	f8c9 3000 	str.w	r3, [r9]
 80108ca:	eba9 0904 	sub.w	r9, r9, r4
 80108ce:	2301      	movs	r3, #1
 80108d0:	9f04      	ldr	r7, [sp, #16]
 80108d2:	45bb      	cmp	fp, r7
 80108d4:	d90f      	bls.n	80108f6 <qsort+0x18c>
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d143      	bne.n	8010962 <qsort+0x1f8>
 80108da:	9b01      	ldr	r3, [sp, #4]
 80108dc:	9a03      	ldr	r2, [sp, #12]
 80108de:	4293      	cmp	r3, r2
 80108e0:	f4bf af61 	bcs.w	80107a6 <qsort+0x3c>
 80108e4:	9d01      	ldr	r5, [sp, #4]
 80108e6:	e036      	b.n	8010956 <qsort+0x1ec>
 80108e8:	4643      	mov	r3, r8
 80108ea:	4622      	mov	r2, r4
 80108ec:	4649      	mov	r1, r9
 80108ee:	4638      	mov	r0, r7
 80108f0:	f7ff ff02 	bl	80106f8 <swapfunc>
 80108f4:	e7e9      	b.n	80108ca <qsort+0x160>
 80108f6:	4631      	mov	r1, r6
 80108f8:	4638      	mov	r0, r7
 80108fa:	9305      	str	r3, [sp, #20]
 80108fc:	47d0      	blx	sl
 80108fe:	1b3b      	subs	r3, r7, r4
 8010900:	2800      	cmp	r0, #0
 8010902:	9304      	str	r3, [sp, #16]
 8010904:	9b05      	ldr	r3, [sp, #20]
 8010906:	dad6      	bge.n	80108b6 <qsort+0x14c>
 8010908:	f1b8 0f00 	cmp.w	r8, #0
 801090c:	d006      	beq.n	801091c <qsort+0x1b2>
 801090e:	4643      	mov	r3, r8
 8010910:	4622      	mov	r2, r4
 8010912:	4639      	mov	r1, r7
 8010914:	4658      	mov	r0, fp
 8010916:	f7ff feef 	bl	80106f8 <swapfunc>
 801091a:	e005      	b.n	8010928 <qsort+0x1be>
 801091c:	f8db 3000 	ldr.w	r3, [fp]
 8010920:	683a      	ldr	r2, [r7, #0]
 8010922:	f8cb 2000 	str.w	r2, [fp]
 8010926:	603b      	str	r3, [r7, #0]
 8010928:	9f04      	ldr	r7, [sp, #16]
 801092a:	e7b0      	b.n	801088e <qsort+0x124>
 801092c:	4643      	mov	r3, r8
 801092e:	4622      	mov	r2, r4
 8010930:	4639      	mov	r1, r7
 8010932:	4628      	mov	r0, r5
 8010934:	f7ff fee0 	bl	80106f8 <swapfunc>
 8010938:	e00c      	b.n	8010954 <qsort+0x1ea>
 801093a:	1b2f      	subs	r7, r5, r4
 801093c:	4629      	mov	r1, r5
 801093e:	4638      	mov	r0, r7
 8010940:	47d0      	blx	sl
 8010942:	2800      	cmp	r0, #0
 8010944:	dd09      	ble.n	801095a <qsort+0x1f0>
 8010946:	f1b8 0f00 	cmp.w	r8, #0
 801094a:	d1ef      	bne.n	801092c <qsort+0x1c2>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	683a      	ldr	r2, [r7, #0]
 8010950:	602a      	str	r2, [r5, #0]
 8010952:	603b      	str	r3, [r7, #0]
 8010954:	463d      	mov	r5, r7
 8010956:	42ae      	cmp	r6, r5
 8010958:	d3ef      	bcc.n	801093a <qsort+0x1d0>
 801095a:	9b01      	ldr	r3, [sp, #4]
 801095c:	4423      	add	r3, r4
 801095e:	9301      	str	r3, [sp, #4]
 8010960:	e7bb      	b.n	80108da <qsort+0x170>
 8010962:	ebab 0305 	sub.w	r3, fp, r5
 8010966:	1baa      	subs	r2, r5, r6
 8010968:	429a      	cmp	r2, r3
 801096a:	bfa8      	it	ge
 801096c:	461a      	movge	r2, r3
 801096e:	9301      	str	r3, [sp, #4]
 8010970:	b12a      	cbz	r2, 801097e <qsort+0x214>
 8010972:	4643      	mov	r3, r8
 8010974:	ebab 0102 	sub.w	r1, fp, r2
 8010978:	4630      	mov	r0, r6
 801097a:	f7ff febd 	bl	80106f8 <swapfunc>
 801097e:	9b03      	ldr	r3, [sp, #12]
 8010980:	eba3 0209 	sub.w	r2, r3, r9
 8010984:	eba9 0707 	sub.w	r7, r9, r7
 8010988:	1b12      	subs	r2, r2, r4
 801098a:	42ba      	cmp	r2, r7
 801098c:	bf28      	it	cs
 801098e:	463a      	movcs	r2, r7
 8010990:	b12a      	cbz	r2, 801099e <qsort+0x234>
 8010992:	9903      	ldr	r1, [sp, #12]
 8010994:	4643      	mov	r3, r8
 8010996:	1a89      	subs	r1, r1, r2
 8010998:	4658      	mov	r0, fp
 801099a:	f7ff fead 	bl	80106f8 <swapfunc>
 801099e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80109a2:	9b03      	ldr	r3, [sp, #12]
 80109a4:	454f      	cmp	r7, r9
 80109a6:	eba3 0007 	sub.w	r0, r3, r7
 80109aa:	d904      	bls.n	80109b6 <qsort+0x24c>
 80109ac:	4633      	mov	r3, r6
 80109ae:	46b9      	mov	r9, r7
 80109b0:	9f01      	ldr	r7, [sp, #4]
 80109b2:	4606      	mov	r6, r0
 80109b4:	4618      	mov	r0, r3
 80109b6:	42a7      	cmp	r7, r4
 80109b8:	d921      	bls.n	80109fe <qsort+0x294>
 80109ba:	fbb7 f1f4 	udiv	r1, r7, r4
 80109be:	9b02      	ldr	r3, [sp, #8]
 80109c0:	2b07      	cmp	r3, #7
 80109c2:	d80d      	bhi.n	80109e0 <qsort+0x276>
 80109c4:	fbb9 f7f4 	udiv	r7, r9, r4
 80109c8:	aa16      	add	r2, sp, #88	; 0x58
 80109ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80109ce:	f843 6c40 	str.w	r6, [r3, #-64]
 80109d2:	f843 7c3c 	str.w	r7, [r3, #-60]
 80109d6:	9b02      	ldr	r3, [sp, #8]
 80109d8:	3301      	adds	r3, #1
 80109da:	9302      	str	r3, [sp, #8]
 80109dc:	4606      	mov	r6, r0
 80109de:	e6d5      	b.n	801078c <qsort+0x22>
 80109e0:	4653      	mov	r3, sl
 80109e2:	4622      	mov	r2, r4
 80109e4:	f7ff fec1 	bl	801076a <qsort>
 80109e8:	45a1      	cmp	r9, r4
 80109ea:	d80b      	bhi.n	8010a04 <qsort+0x29a>
 80109ec:	9b02      	ldr	r3, [sp, #8]
 80109ee:	aa16      	add	r2, sp, #88	; 0x58
 80109f0:	3b01      	subs	r3, #1
 80109f2:	9302      	str	r3, [sp, #8]
 80109f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80109f8:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 80109fc:	e7ee      	b.n	80109dc <qsort+0x272>
 80109fe:	45a1      	cmp	r9, r4
 8010a00:	f67f aed1 	bls.w	80107a6 <qsort+0x3c>
 8010a04:	fbb9 f1f4 	udiv	r1, r9, r4
 8010a08:	4630      	mov	r0, r6
 8010a0a:	e7e7      	b.n	80109dc <qsort+0x272>

08010a0c <realloc>:
 8010a0c:	4b02      	ldr	r3, [pc, #8]	; (8010a18 <realloc+0xc>)
 8010a0e:	460a      	mov	r2, r1
 8010a10:	4601      	mov	r1, r0
 8010a12:	6818      	ldr	r0, [r3, #0]
 8010a14:	f002 ba38 	b.w	8012e88 <_realloc_r>
 8010a18:	20000160 	.word	0x20000160

08010a1c <_sbrk_r>:
 8010a1c:	b538      	push	{r3, r4, r5, lr}
 8010a1e:	4d06      	ldr	r5, [pc, #24]	; (8010a38 <_sbrk_r+0x1c>)
 8010a20:	2300      	movs	r3, #0
 8010a22:	4604      	mov	r4, r0
 8010a24:	4608      	mov	r0, r1
 8010a26:	602b      	str	r3, [r5, #0]
 8010a28:	f7f2 f9f8 	bl	8002e1c <_sbrk>
 8010a2c:	1c43      	adds	r3, r0, #1
 8010a2e:	d102      	bne.n	8010a36 <_sbrk_r+0x1a>
 8010a30:	682b      	ldr	r3, [r5, #0]
 8010a32:	b103      	cbz	r3, 8010a36 <_sbrk_r+0x1a>
 8010a34:	6023      	str	r3, [r4, #0]
 8010a36:	bd38      	pop	{r3, r4, r5, pc}
 8010a38:	200034d4 	.word	0x200034d4

08010a3c <sniprintf>:
 8010a3c:	b40c      	push	{r2, r3}
 8010a3e:	b530      	push	{r4, r5, lr}
 8010a40:	4b17      	ldr	r3, [pc, #92]	; (8010aa0 <sniprintf+0x64>)
 8010a42:	1e0c      	subs	r4, r1, #0
 8010a44:	681d      	ldr	r5, [r3, #0]
 8010a46:	b09d      	sub	sp, #116	; 0x74
 8010a48:	da08      	bge.n	8010a5c <sniprintf+0x20>
 8010a4a:	238b      	movs	r3, #139	; 0x8b
 8010a4c:	602b      	str	r3, [r5, #0]
 8010a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a52:	b01d      	add	sp, #116	; 0x74
 8010a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a58:	b002      	add	sp, #8
 8010a5a:	4770      	bx	lr
 8010a5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010a60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010a64:	bf14      	ite	ne
 8010a66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010a6a:	4623      	moveq	r3, r4
 8010a6c:	9304      	str	r3, [sp, #16]
 8010a6e:	9307      	str	r3, [sp, #28]
 8010a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a74:	9002      	str	r0, [sp, #8]
 8010a76:	9006      	str	r0, [sp, #24]
 8010a78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010a7e:	ab21      	add	r3, sp, #132	; 0x84
 8010a80:	a902      	add	r1, sp, #8
 8010a82:	4628      	mov	r0, r5
 8010a84:	9301      	str	r3, [sp, #4]
 8010a86:	f002 fa81 	bl	8012f8c <_svfiprintf_r>
 8010a8a:	1c43      	adds	r3, r0, #1
 8010a8c:	bfbc      	itt	lt
 8010a8e:	238b      	movlt	r3, #139	; 0x8b
 8010a90:	602b      	strlt	r3, [r5, #0]
 8010a92:	2c00      	cmp	r4, #0
 8010a94:	d0dd      	beq.n	8010a52 <sniprintf+0x16>
 8010a96:	9b02      	ldr	r3, [sp, #8]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	701a      	strb	r2, [r3, #0]
 8010a9c:	e7d9      	b.n	8010a52 <sniprintf+0x16>
 8010a9e:	bf00      	nop
 8010aa0:	20000160 	.word	0x20000160

08010aa4 <__sread>:
 8010aa4:	b510      	push	{r4, lr}
 8010aa6:	460c      	mov	r4, r1
 8010aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aac:	f002 fe5c 	bl	8013768 <_read_r>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	bfab      	itete	ge
 8010ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8010ab8:	181b      	addge	r3, r3, r0
 8010aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010abe:	bfac      	ite	ge
 8010ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010ac2:	81a3      	strhlt	r3, [r4, #12]
 8010ac4:	bd10      	pop	{r4, pc}

08010ac6 <__swrite>:
 8010ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aca:	461f      	mov	r7, r3
 8010acc:	898b      	ldrh	r3, [r1, #12]
 8010ace:	05db      	lsls	r3, r3, #23
 8010ad0:	4605      	mov	r5, r0
 8010ad2:	460c      	mov	r4, r1
 8010ad4:	4616      	mov	r6, r2
 8010ad6:	d505      	bpl.n	8010ae4 <__swrite+0x1e>
 8010ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010adc:	2302      	movs	r3, #2
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f001 fc74 	bl	80123cc <_lseek_r>
 8010ae4:	89a3      	ldrh	r3, [r4, #12]
 8010ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010aee:	81a3      	strh	r3, [r4, #12]
 8010af0:	4632      	mov	r2, r6
 8010af2:	463b      	mov	r3, r7
 8010af4:	4628      	mov	r0, r5
 8010af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010afa:	f000 bead 	b.w	8011858 <_write_r>

08010afe <__sseek>:
 8010afe:	b510      	push	{r4, lr}
 8010b00:	460c      	mov	r4, r1
 8010b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b06:	f001 fc61 	bl	80123cc <_lseek_r>
 8010b0a:	1c43      	adds	r3, r0, #1
 8010b0c:	89a3      	ldrh	r3, [r4, #12]
 8010b0e:	bf15      	itete	ne
 8010b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8010b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010b1a:	81a3      	strheq	r3, [r4, #12]
 8010b1c:	bf18      	it	ne
 8010b1e:	81a3      	strhne	r3, [r4, #12]
 8010b20:	bd10      	pop	{r4, pc}

08010b22 <__sclose>:
 8010b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b26:	f000 bf17 	b.w	8011958 <_close_r>

08010b2a <strncmp>:
 8010b2a:	b510      	push	{r4, lr}
 8010b2c:	b16a      	cbz	r2, 8010b4a <strncmp+0x20>
 8010b2e:	3901      	subs	r1, #1
 8010b30:	1884      	adds	r4, r0, r2
 8010b32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010b36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d103      	bne.n	8010b46 <strncmp+0x1c>
 8010b3e:	42a0      	cmp	r0, r4
 8010b40:	d001      	beq.n	8010b46 <strncmp+0x1c>
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d1f5      	bne.n	8010b32 <strncmp+0x8>
 8010b46:	1a98      	subs	r0, r3, r2
 8010b48:	bd10      	pop	{r4, pc}
 8010b4a:	4610      	mov	r0, r2
 8010b4c:	e7fc      	b.n	8010b48 <strncmp+0x1e>

08010b4e <sulp>:
 8010b4e:	b570      	push	{r4, r5, r6, lr}
 8010b50:	4604      	mov	r4, r0
 8010b52:	460d      	mov	r5, r1
 8010b54:	ec45 4b10 	vmov	d0, r4, r5
 8010b58:	4616      	mov	r6, r2
 8010b5a:	f002 f837 	bl	8012bcc <__ulp>
 8010b5e:	ec51 0b10 	vmov	r0, r1, d0
 8010b62:	b17e      	cbz	r6, 8010b84 <sulp+0x36>
 8010b64:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010b68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	dd09      	ble.n	8010b84 <sulp+0x36>
 8010b70:	051b      	lsls	r3, r3, #20
 8010b72:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010b76:	2400      	movs	r4, #0
 8010b78:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010b7c:	4622      	mov	r2, r4
 8010b7e:	462b      	mov	r3, r5
 8010b80:	f7ef fd52 	bl	8000628 <__aeabi_dmul>
 8010b84:	bd70      	pop	{r4, r5, r6, pc}
	...

08010b88 <_strtod_l>:
 8010b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8c:	b0a3      	sub	sp, #140	; 0x8c
 8010b8e:	461f      	mov	r7, r3
 8010b90:	2300      	movs	r3, #0
 8010b92:	931e      	str	r3, [sp, #120]	; 0x78
 8010b94:	4ba4      	ldr	r3, [pc, #656]	; (8010e28 <_strtod_l+0x2a0>)
 8010b96:	9219      	str	r2, [sp, #100]	; 0x64
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	9307      	str	r3, [sp, #28]
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	4688      	mov	r8, r1
 8010ba2:	f7ef fb27 	bl	80001f4 <strlen>
 8010ba6:	f04f 0a00 	mov.w	sl, #0
 8010baa:	4605      	mov	r5, r0
 8010bac:	f04f 0b00 	mov.w	fp, #0
 8010bb0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010bb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010bb6:	781a      	ldrb	r2, [r3, #0]
 8010bb8:	2a2b      	cmp	r2, #43	; 0x2b
 8010bba:	d04c      	beq.n	8010c56 <_strtod_l+0xce>
 8010bbc:	d839      	bhi.n	8010c32 <_strtod_l+0xaa>
 8010bbe:	2a0d      	cmp	r2, #13
 8010bc0:	d832      	bhi.n	8010c28 <_strtod_l+0xa0>
 8010bc2:	2a08      	cmp	r2, #8
 8010bc4:	d832      	bhi.n	8010c2c <_strtod_l+0xa4>
 8010bc6:	2a00      	cmp	r2, #0
 8010bc8:	d03c      	beq.n	8010c44 <_strtod_l+0xbc>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	930e      	str	r3, [sp, #56]	; 0x38
 8010bce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010bd0:	7833      	ldrb	r3, [r6, #0]
 8010bd2:	2b30      	cmp	r3, #48	; 0x30
 8010bd4:	f040 80b4 	bne.w	8010d40 <_strtod_l+0x1b8>
 8010bd8:	7873      	ldrb	r3, [r6, #1]
 8010bda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010bde:	2b58      	cmp	r3, #88	; 0x58
 8010be0:	d16c      	bne.n	8010cbc <_strtod_l+0x134>
 8010be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010be4:	9301      	str	r3, [sp, #4]
 8010be6:	ab1e      	add	r3, sp, #120	; 0x78
 8010be8:	9702      	str	r7, [sp, #8]
 8010bea:	9300      	str	r3, [sp, #0]
 8010bec:	4a8f      	ldr	r2, [pc, #572]	; (8010e2c <_strtod_l+0x2a4>)
 8010bee:	ab1f      	add	r3, sp, #124	; 0x7c
 8010bf0:	a91d      	add	r1, sp, #116	; 0x74
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f001 f8de 	bl	8011db4 <__gethex>
 8010bf8:	f010 0707 	ands.w	r7, r0, #7
 8010bfc:	4605      	mov	r5, r0
 8010bfe:	d005      	beq.n	8010c0c <_strtod_l+0x84>
 8010c00:	2f06      	cmp	r7, #6
 8010c02:	d12a      	bne.n	8010c5a <_strtod_l+0xd2>
 8010c04:	3601      	adds	r6, #1
 8010c06:	2300      	movs	r3, #0
 8010c08:	961d      	str	r6, [sp, #116]	; 0x74
 8010c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8010c0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	f040 8596 	bne.w	8011740 <_strtod_l+0xbb8>
 8010c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c16:	b1db      	cbz	r3, 8010c50 <_strtod_l+0xc8>
 8010c18:	4652      	mov	r2, sl
 8010c1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010c1e:	ec43 2b10 	vmov	d0, r2, r3
 8010c22:	b023      	add	sp, #140	; 0x8c
 8010c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c28:	2a20      	cmp	r2, #32
 8010c2a:	d1ce      	bne.n	8010bca <_strtod_l+0x42>
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	931d      	str	r3, [sp, #116]	; 0x74
 8010c30:	e7c0      	b.n	8010bb4 <_strtod_l+0x2c>
 8010c32:	2a2d      	cmp	r2, #45	; 0x2d
 8010c34:	d1c9      	bne.n	8010bca <_strtod_l+0x42>
 8010c36:	2201      	movs	r2, #1
 8010c38:	920e      	str	r2, [sp, #56]	; 0x38
 8010c3a:	1c5a      	adds	r2, r3, #1
 8010c3c:	921d      	str	r2, [sp, #116]	; 0x74
 8010c3e:	785b      	ldrb	r3, [r3, #1]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d1c4      	bne.n	8010bce <_strtod_l+0x46>
 8010c44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010c46:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	f040 8576 	bne.w	801173c <_strtod_l+0xbb4>
 8010c50:	4652      	mov	r2, sl
 8010c52:	465b      	mov	r3, fp
 8010c54:	e7e3      	b.n	8010c1e <_strtod_l+0x96>
 8010c56:	2200      	movs	r2, #0
 8010c58:	e7ee      	b.n	8010c38 <_strtod_l+0xb0>
 8010c5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010c5c:	b13a      	cbz	r2, 8010c6e <_strtod_l+0xe6>
 8010c5e:	2135      	movs	r1, #53	; 0x35
 8010c60:	a820      	add	r0, sp, #128	; 0x80
 8010c62:	f002 f8be 	bl	8012de2 <__copybits>
 8010c66:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f001 fc83 	bl	8012574 <_Bfree>
 8010c6e:	3f01      	subs	r7, #1
 8010c70:	2f05      	cmp	r7, #5
 8010c72:	d807      	bhi.n	8010c84 <_strtod_l+0xfc>
 8010c74:	e8df f007 	tbb	[pc, r7]
 8010c78:	1d180b0e 	.word	0x1d180b0e
 8010c7c:	030e      	.short	0x030e
 8010c7e:	f04f 0b00 	mov.w	fp, #0
 8010c82:	46da      	mov	sl, fp
 8010c84:	0728      	lsls	r0, r5, #28
 8010c86:	d5c1      	bpl.n	8010c0c <_strtod_l+0x84>
 8010c88:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010c8c:	e7be      	b.n	8010c0c <_strtod_l+0x84>
 8010c8e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010c92:	e7f7      	b.n	8010c84 <_strtod_l+0xfc>
 8010c94:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010c98:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010c9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010c9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010ca2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010ca6:	e7ed      	b.n	8010c84 <_strtod_l+0xfc>
 8010ca8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010e30 <_strtod_l+0x2a8>
 8010cac:	f04f 0a00 	mov.w	sl, #0
 8010cb0:	e7e8      	b.n	8010c84 <_strtod_l+0xfc>
 8010cb2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010cb6:	f04f 3aff 	mov.w	sl, #4294967295
 8010cba:	e7e3      	b.n	8010c84 <_strtod_l+0xfc>
 8010cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010cbe:	1c5a      	adds	r2, r3, #1
 8010cc0:	921d      	str	r2, [sp, #116]	; 0x74
 8010cc2:	785b      	ldrb	r3, [r3, #1]
 8010cc4:	2b30      	cmp	r3, #48	; 0x30
 8010cc6:	d0f9      	beq.n	8010cbc <_strtod_l+0x134>
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d09f      	beq.n	8010c0c <_strtod_l+0x84>
 8010ccc:	2301      	movs	r3, #1
 8010cce:	f04f 0900 	mov.w	r9, #0
 8010cd2:	9304      	str	r3, [sp, #16]
 8010cd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8010cd8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010cdc:	464f      	mov	r7, r9
 8010cde:	220a      	movs	r2, #10
 8010ce0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010ce2:	7806      	ldrb	r6, [r0, #0]
 8010ce4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010ce8:	b2d9      	uxtb	r1, r3
 8010cea:	2909      	cmp	r1, #9
 8010cec:	d92a      	bls.n	8010d44 <_strtod_l+0x1bc>
 8010cee:	9907      	ldr	r1, [sp, #28]
 8010cf0:	462a      	mov	r2, r5
 8010cf2:	f7ff ff1a 	bl	8010b2a <strncmp>
 8010cf6:	b398      	cbz	r0, 8010d60 <_strtod_l+0x1d8>
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	4633      	mov	r3, r6
 8010cfc:	463d      	mov	r5, r7
 8010cfe:	9007      	str	r0, [sp, #28]
 8010d00:	4602      	mov	r2, r0
 8010d02:	2b65      	cmp	r3, #101	; 0x65
 8010d04:	d001      	beq.n	8010d0a <_strtod_l+0x182>
 8010d06:	2b45      	cmp	r3, #69	; 0x45
 8010d08:	d118      	bne.n	8010d3c <_strtod_l+0x1b4>
 8010d0a:	b91d      	cbnz	r5, 8010d14 <_strtod_l+0x18c>
 8010d0c:	9b04      	ldr	r3, [sp, #16]
 8010d0e:	4303      	orrs	r3, r0
 8010d10:	d098      	beq.n	8010c44 <_strtod_l+0xbc>
 8010d12:	2500      	movs	r5, #0
 8010d14:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010d18:	f108 0301 	add.w	r3, r8, #1
 8010d1c:	931d      	str	r3, [sp, #116]	; 0x74
 8010d1e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010d22:	2b2b      	cmp	r3, #43	; 0x2b
 8010d24:	d075      	beq.n	8010e12 <_strtod_l+0x28a>
 8010d26:	2b2d      	cmp	r3, #45	; 0x2d
 8010d28:	d07b      	beq.n	8010e22 <_strtod_l+0x29a>
 8010d2a:	f04f 0c00 	mov.w	ip, #0
 8010d2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010d32:	2909      	cmp	r1, #9
 8010d34:	f240 8082 	bls.w	8010e3c <_strtod_l+0x2b4>
 8010d38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010d3c:	2600      	movs	r6, #0
 8010d3e:	e09d      	b.n	8010e7c <_strtod_l+0x2f4>
 8010d40:	2300      	movs	r3, #0
 8010d42:	e7c4      	b.n	8010cce <_strtod_l+0x146>
 8010d44:	2f08      	cmp	r7, #8
 8010d46:	bfd8      	it	le
 8010d48:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010d4a:	f100 0001 	add.w	r0, r0, #1
 8010d4e:	bfda      	itte	le
 8010d50:	fb02 3301 	mlale	r3, r2, r1, r3
 8010d54:	9309      	strle	r3, [sp, #36]	; 0x24
 8010d56:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010d5a:	3701      	adds	r7, #1
 8010d5c:	901d      	str	r0, [sp, #116]	; 0x74
 8010d5e:	e7bf      	b.n	8010ce0 <_strtod_l+0x158>
 8010d60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d62:	195a      	adds	r2, r3, r5
 8010d64:	921d      	str	r2, [sp, #116]	; 0x74
 8010d66:	5d5b      	ldrb	r3, [r3, r5]
 8010d68:	2f00      	cmp	r7, #0
 8010d6a:	d037      	beq.n	8010ddc <_strtod_l+0x254>
 8010d6c:	9007      	str	r0, [sp, #28]
 8010d6e:	463d      	mov	r5, r7
 8010d70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010d74:	2a09      	cmp	r2, #9
 8010d76:	d912      	bls.n	8010d9e <_strtod_l+0x216>
 8010d78:	2201      	movs	r2, #1
 8010d7a:	e7c2      	b.n	8010d02 <_strtod_l+0x17a>
 8010d7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d7e:	1c5a      	adds	r2, r3, #1
 8010d80:	921d      	str	r2, [sp, #116]	; 0x74
 8010d82:	785b      	ldrb	r3, [r3, #1]
 8010d84:	3001      	adds	r0, #1
 8010d86:	2b30      	cmp	r3, #48	; 0x30
 8010d88:	d0f8      	beq.n	8010d7c <_strtod_l+0x1f4>
 8010d8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010d8e:	2a08      	cmp	r2, #8
 8010d90:	f200 84db 	bhi.w	801174a <_strtod_l+0xbc2>
 8010d94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010d96:	9007      	str	r0, [sp, #28]
 8010d98:	2000      	movs	r0, #0
 8010d9a:	920a      	str	r2, [sp, #40]	; 0x28
 8010d9c:	4605      	mov	r5, r0
 8010d9e:	3b30      	subs	r3, #48	; 0x30
 8010da0:	f100 0201 	add.w	r2, r0, #1
 8010da4:	d014      	beq.n	8010dd0 <_strtod_l+0x248>
 8010da6:	9907      	ldr	r1, [sp, #28]
 8010da8:	4411      	add	r1, r2
 8010daa:	9107      	str	r1, [sp, #28]
 8010dac:	462a      	mov	r2, r5
 8010dae:	eb00 0e05 	add.w	lr, r0, r5
 8010db2:	210a      	movs	r1, #10
 8010db4:	4572      	cmp	r2, lr
 8010db6:	d113      	bne.n	8010de0 <_strtod_l+0x258>
 8010db8:	182a      	adds	r2, r5, r0
 8010dba:	2a08      	cmp	r2, #8
 8010dbc:	f105 0501 	add.w	r5, r5, #1
 8010dc0:	4405      	add	r5, r0
 8010dc2:	dc1c      	bgt.n	8010dfe <_strtod_l+0x276>
 8010dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010dc6:	220a      	movs	r2, #10
 8010dc8:	fb02 3301 	mla	r3, r2, r1, r3
 8010dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8010dce:	2200      	movs	r2, #0
 8010dd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010dd2:	1c59      	adds	r1, r3, #1
 8010dd4:	911d      	str	r1, [sp, #116]	; 0x74
 8010dd6:	785b      	ldrb	r3, [r3, #1]
 8010dd8:	4610      	mov	r0, r2
 8010dda:	e7c9      	b.n	8010d70 <_strtod_l+0x1e8>
 8010ddc:	4638      	mov	r0, r7
 8010dde:	e7d2      	b.n	8010d86 <_strtod_l+0x1fe>
 8010de0:	2a08      	cmp	r2, #8
 8010de2:	dc04      	bgt.n	8010dee <_strtod_l+0x266>
 8010de4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010de6:	434e      	muls	r6, r1
 8010de8:	9609      	str	r6, [sp, #36]	; 0x24
 8010dea:	3201      	adds	r2, #1
 8010dec:	e7e2      	b.n	8010db4 <_strtod_l+0x22c>
 8010dee:	f102 0c01 	add.w	ip, r2, #1
 8010df2:	f1bc 0f10 	cmp.w	ip, #16
 8010df6:	bfd8      	it	le
 8010df8:	fb01 f909 	mulle.w	r9, r1, r9
 8010dfc:	e7f5      	b.n	8010dea <_strtod_l+0x262>
 8010dfe:	2d10      	cmp	r5, #16
 8010e00:	bfdc      	itt	le
 8010e02:	220a      	movle	r2, #10
 8010e04:	fb02 3909 	mlale	r9, r2, r9, r3
 8010e08:	e7e1      	b.n	8010dce <_strtod_l+0x246>
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	9307      	str	r3, [sp, #28]
 8010e0e:	2201      	movs	r2, #1
 8010e10:	e77c      	b.n	8010d0c <_strtod_l+0x184>
 8010e12:	f04f 0c00 	mov.w	ip, #0
 8010e16:	f108 0302 	add.w	r3, r8, #2
 8010e1a:	931d      	str	r3, [sp, #116]	; 0x74
 8010e1c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010e20:	e785      	b.n	8010d2e <_strtod_l+0x1a6>
 8010e22:	f04f 0c01 	mov.w	ip, #1
 8010e26:	e7f6      	b.n	8010e16 <_strtod_l+0x28e>
 8010e28:	0801555c 	.word	0x0801555c
 8010e2c:	08015430 	.word	0x08015430
 8010e30:	7ff00000 	.word	0x7ff00000
 8010e34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e36:	1c59      	adds	r1, r3, #1
 8010e38:	911d      	str	r1, [sp, #116]	; 0x74
 8010e3a:	785b      	ldrb	r3, [r3, #1]
 8010e3c:	2b30      	cmp	r3, #48	; 0x30
 8010e3e:	d0f9      	beq.n	8010e34 <_strtod_l+0x2ac>
 8010e40:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8010e44:	2908      	cmp	r1, #8
 8010e46:	f63f af79 	bhi.w	8010d3c <_strtod_l+0x1b4>
 8010e4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010e4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e50:	9308      	str	r3, [sp, #32]
 8010e52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e54:	1c59      	adds	r1, r3, #1
 8010e56:	911d      	str	r1, [sp, #116]	; 0x74
 8010e58:	785b      	ldrb	r3, [r3, #1]
 8010e5a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8010e5e:	2e09      	cmp	r6, #9
 8010e60:	d937      	bls.n	8010ed2 <_strtod_l+0x34a>
 8010e62:	9e08      	ldr	r6, [sp, #32]
 8010e64:	1b89      	subs	r1, r1, r6
 8010e66:	2908      	cmp	r1, #8
 8010e68:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010e6c:	dc02      	bgt.n	8010e74 <_strtod_l+0x2ec>
 8010e6e:	4576      	cmp	r6, lr
 8010e70:	bfa8      	it	ge
 8010e72:	4676      	movge	r6, lr
 8010e74:	f1bc 0f00 	cmp.w	ip, #0
 8010e78:	d000      	beq.n	8010e7c <_strtod_l+0x2f4>
 8010e7a:	4276      	negs	r6, r6
 8010e7c:	2d00      	cmp	r5, #0
 8010e7e:	d14f      	bne.n	8010f20 <_strtod_l+0x398>
 8010e80:	9904      	ldr	r1, [sp, #16]
 8010e82:	4301      	orrs	r1, r0
 8010e84:	f47f aec2 	bne.w	8010c0c <_strtod_l+0x84>
 8010e88:	2a00      	cmp	r2, #0
 8010e8a:	f47f aedb 	bne.w	8010c44 <_strtod_l+0xbc>
 8010e8e:	2b69      	cmp	r3, #105	; 0x69
 8010e90:	d027      	beq.n	8010ee2 <_strtod_l+0x35a>
 8010e92:	dc24      	bgt.n	8010ede <_strtod_l+0x356>
 8010e94:	2b49      	cmp	r3, #73	; 0x49
 8010e96:	d024      	beq.n	8010ee2 <_strtod_l+0x35a>
 8010e98:	2b4e      	cmp	r3, #78	; 0x4e
 8010e9a:	f47f aed3 	bne.w	8010c44 <_strtod_l+0xbc>
 8010e9e:	499e      	ldr	r1, [pc, #632]	; (8011118 <_strtod_l+0x590>)
 8010ea0:	a81d      	add	r0, sp, #116	; 0x74
 8010ea2:	f001 f9df 	bl	8012264 <__match>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	f43f aecc 	beq.w	8010c44 <_strtod_l+0xbc>
 8010eac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	2b28      	cmp	r3, #40	; 0x28
 8010eb2:	d12d      	bne.n	8010f10 <_strtod_l+0x388>
 8010eb4:	4999      	ldr	r1, [pc, #612]	; (801111c <_strtod_l+0x594>)
 8010eb6:	aa20      	add	r2, sp, #128	; 0x80
 8010eb8:	a81d      	add	r0, sp, #116	; 0x74
 8010eba:	f001 f9e7 	bl	801228c <__hexnan>
 8010ebe:	2805      	cmp	r0, #5
 8010ec0:	d126      	bne.n	8010f10 <_strtod_l+0x388>
 8010ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ec4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010ec8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010ecc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010ed0:	e69c      	b.n	8010c0c <_strtod_l+0x84>
 8010ed2:	210a      	movs	r1, #10
 8010ed4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010ed8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010edc:	e7b9      	b.n	8010e52 <_strtod_l+0x2ca>
 8010ede:	2b6e      	cmp	r3, #110	; 0x6e
 8010ee0:	e7db      	b.n	8010e9a <_strtod_l+0x312>
 8010ee2:	498f      	ldr	r1, [pc, #572]	; (8011120 <_strtod_l+0x598>)
 8010ee4:	a81d      	add	r0, sp, #116	; 0x74
 8010ee6:	f001 f9bd 	bl	8012264 <__match>
 8010eea:	2800      	cmp	r0, #0
 8010eec:	f43f aeaa 	beq.w	8010c44 <_strtod_l+0xbc>
 8010ef0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ef2:	498c      	ldr	r1, [pc, #560]	; (8011124 <_strtod_l+0x59c>)
 8010ef4:	3b01      	subs	r3, #1
 8010ef6:	a81d      	add	r0, sp, #116	; 0x74
 8010ef8:	931d      	str	r3, [sp, #116]	; 0x74
 8010efa:	f001 f9b3 	bl	8012264 <__match>
 8010efe:	b910      	cbnz	r0, 8010f06 <_strtod_l+0x37e>
 8010f00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f02:	3301      	adds	r3, #1
 8010f04:	931d      	str	r3, [sp, #116]	; 0x74
 8010f06:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011134 <_strtod_l+0x5ac>
 8010f0a:	f04f 0a00 	mov.w	sl, #0
 8010f0e:	e67d      	b.n	8010c0c <_strtod_l+0x84>
 8010f10:	4885      	ldr	r0, [pc, #532]	; (8011128 <_strtod_l+0x5a0>)
 8010f12:	f002 fc3d 	bl	8013790 <nan>
 8010f16:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010f1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010f1e:	e675      	b.n	8010c0c <_strtod_l+0x84>
 8010f20:	9b07      	ldr	r3, [sp, #28]
 8010f22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f24:	1af3      	subs	r3, r6, r3
 8010f26:	2f00      	cmp	r7, #0
 8010f28:	bf08      	it	eq
 8010f2a:	462f      	moveq	r7, r5
 8010f2c:	2d10      	cmp	r5, #16
 8010f2e:	9308      	str	r3, [sp, #32]
 8010f30:	46a8      	mov	r8, r5
 8010f32:	bfa8      	it	ge
 8010f34:	f04f 0810 	movge.w	r8, #16
 8010f38:	f7ef fafc 	bl	8000534 <__aeabi_ui2d>
 8010f3c:	2d09      	cmp	r5, #9
 8010f3e:	4682      	mov	sl, r0
 8010f40:	468b      	mov	fp, r1
 8010f42:	dd13      	ble.n	8010f6c <_strtod_l+0x3e4>
 8010f44:	4b79      	ldr	r3, [pc, #484]	; (801112c <_strtod_l+0x5a4>)
 8010f46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010f4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010f4e:	f7ef fb6b 	bl	8000628 <__aeabi_dmul>
 8010f52:	4682      	mov	sl, r0
 8010f54:	4648      	mov	r0, r9
 8010f56:	468b      	mov	fp, r1
 8010f58:	f7ef faec 	bl	8000534 <__aeabi_ui2d>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	460b      	mov	r3, r1
 8010f60:	4650      	mov	r0, sl
 8010f62:	4659      	mov	r1, fp
 8010f64:	f7ef f9aa 	bl	80002bc <__adddf3>
 8010f68:	4682      	mov	sl, r0
 8010f6a:	468b      	mov	fp, r1
 8010f6c:	2d0f      	cmp	r5, #15
 8010f6e:	dc38      	bgt.n	8010fe2 <_strtod_l+0x45a>
 8010f70:	9b08      	ldr	r3, [sp, #32]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	f43f ae4a 	beq.w	8010c0c <_strtod_l+0x84>
 8010f78:	dd24      	ble.n	8010fc4 <_strtod_l+0x43c>
 8010f7a:	2b16      	cmp	r3, #22
 8010f7c:	dc0b      	bgt.n	8010f96 <_strtod_l+0x40e>
 8010f7e:	4d6b      	ldr	r5, [pc, #428]	; (801112c <_strtod_l+0x5a4>)
 8010f80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010f84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010f88:	4652      	mov	r2, sl
 8010f8a:	465b      	mov	r3, fp
 8010f8c:	f7ef fb4c 	bl	8000628 <__aeabi_dmul>
 8010f90:	4682      	mov	sl, r0
 8010f92:	468b      	mov	fp, r1
 8010f94:	e63a      	b.n	8010c0c <_strtod_l+0x84>
 8010f96:	9a08      	ldr	r2, [sp, #32]
 8010f98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	db20      	blt.n	8010fe2 <_strtod_l+0x45a>
 8010fa0:	4c62      	ldr	r4, [pc, #392]	; (801112c <_strtod_l+0x5a4>)
 8010fa2:	f1c5 050f 	rsb	r5, r5, #15
 8010fa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010faa:	4652      	mov	r2, sl
 8010fac:	465b      	mov	r3, fp
 8010fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fb2:	f7ef fb39 	bl	8000628 <__aeabi_dmul>
 8010fb6:	9b08      	ldr	r3, [sp, #32]
 8010fb8:	1b5d      	subs	r5, r3, r5
 8010fba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010fbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010fc2:	e7e3      	b.n	8010f8c <_strtod_l+0x404>
 8010fc4:	9b08      	ldr	r3, [sp, #32]
 8010fc6:	3316      	adds	r3, #22
 8010fc8:	db0b      	blt.n	8010fe2 <_strtod_l+0x45a>
 8010fca:	9b07      	ldr	r3, [sp, #28]
 8010fcc:	4a57      	ldr	r2, [pc, #348]	; (801112c <_strtod_l+0x5a4>)
 8010fce:	1b9e      	subs	r6, r3, r6
 8010fd0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010fd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010fd8:	4650      	mov	r0, sl
 8010fda:	4659      	mov	r1, fp
 8010fdc:	f7ef fc4e 	bl	800087c <__aeabi_ddiv>
 8010fe0:	e7d6      	b.n	8010f90 <_strtod_l+0x408>
 8010fe2:	9b08      	ldr	r3, [sp, #32]
 8010fe4:	eba5 0808 	sub.w	r8, r5, r8
 8010fe8:	4498      	add	r8, r3
 8010fea:	f1b8 0f00 	cmp.w	r8, #0
 8010fee:	dd71      	ble.n	80110d4 <_strtod_l+0x54c>
 8010ff0:	f018 030f 	ands.w	r3, r8, #15
 8010ff4:	d00a      	beq.n	801100c <_strtod_l+0x484>
 8010ff6:	494d      	ldr	r1, [pc, #308]	; (801112c <_strtod_l+0x5a4>)
 8010ff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010ffc:	4652      	mov	r2, sl
 8010ffe:	465b      	mov	r3, fp
 8011000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011004:	f7ef fb10 	bl	8000628 <__aeabi_dmul>
 8011008:	4682      	mov	sl, r0
 801100a:	468b      	mov	fp, r1
 801100c:	f038 080f 	bics.w	r8, r8, #15
 8011010:	d04d      	beq.n	80110ae <_strtod_l+0x526>
 8011012:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011016:	dd22      	ble.n	801105e <_strtod_l+0x4d6>
 8011018:	2500      	movs	r5, #0
 801101a:	462e      	mov	r6, r5
 801101c:	9509      	str	r5, [sp, #36]	; 0x24
 801101e:	9507      	str	r5, [sp, #28]
 8011020:	2322      	movs	r3, #34	; 0x22
 8011022:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011134 <_strtod_l+0x5ac>
 8011026:	6023      	str	r3, [r4, #0]
 8011028:	f04f 0a00 	mov.w	sl, #0
 801102c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801102e:	2b00      	cmp	r3, #0
 8011030:	f43f adec 	beq.w	8010c0c <_strtod_l+0x84>
 8011034:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011036:	4620      	mov	r0, r4
 8011038:	f001 fa9c 	bl	8012574 <_Bfree>
 801103c:	9907      	ldr	r1, [sp, #28]
 801103e:	4620      	mov	r0, r4
 8011040:	f001 fa98 	bl	8012574 <_Bfree>
 8011044:	4631      	mov	r1, r6
 8011046:	4620      	mov	r0, r4
 8011048:	f001 fa94 	bl	8012574 <_Bfree>
 801104c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801104e:	4620      	mov	r0, r4
 8011050:	f001 fa90 	bl	8012574 <_Bfree>
 8011054:	4629      	mov	r1, r5
 8011056:	4620      	mov	r0, r4
 8011058:	f001 fa8c 	bl	8012574 <_Bfree>
 801105c:	e5d6      	b.n	8010c0c <_strtod_l+0x84>
 801105e:	2300      	movs	r3, #0
 8011060:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011064:	4650      	mov	r0, sl
 8011066:	4659      	mov	r1, fp
 8011068:	4699      	mov	r9, r3
 801106a:	f1b8 0f01 	cmp.w	r8, #1
 801106e:	dc21      	bgt.n	80110b4 <_strtod_l+0x52c>
 8011070:	b10b      	cbz	r3, 8011076 <_strtod_l+0x4ee>
 8011072:	4682      	mov	sl, r0
 8011074:	468b      	mov	fp, r1
 8011076:	4b2e      	ldr	r3, [pc, #184]	; (8011130 <_strtod_l+0x5a8>)
 8011078:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801107c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011080:	4652      	mov	r2, sl
 8011082:	465b      	mov	r3, fp
 8011084:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011088:	f7ef face 	bl	8000628 <__aeabi_dmul>
 801108c:	4b29      	ldr	r3, [pc, #164]	; (8011134 <_strtod_l+0x5ac>)
 801108e:	460a      	mov	r2, r1
 8011090:	400b      	ands	r3, r1
 8011092:	4929      	ldr	r1, [pc, #164]	; (8011138 <_strtod_l+0x5b0>)
 8011094:	428b      	cmp	r3, r1
 8011096:	4682      	mov	sl, r0
 8011098:	d8be      	bhi.n	8011018 <_strtod_l+0x490>
 801109a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801109e:	428b      	cmp	r3, r1
 80110a0:	bf86      	itte	hi
 80110a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801113c <_strtod_l+0x5b4>
 80110a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80110aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80110ae:	2300      	movs	r3, #0
 80110b0:	9304      	str	r3, [sp, #16]
 80110b2:	e081      	b.n	80111b8 <_strtod_l+0x630>
 80110b4:	f018 0f01 	tst.w	r8, #1
 80110b8:	d007      	beq.n	80110ca <_strtod_l+0x542>
 80110ba:	4b1d      	ldr	r3, [pc, #116]	; (8011130 <_strtod_l+0x5a8>)
 80110bc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80110c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c4:	f7ef fab0 	bl	8000628 <__aeabi_dmul>
 80110c8:	2301      	movs	r3, #1
 80110ca:	f109 0901 	add.w	r9, r9, #1
 80110ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80110d2:	e7ca      	b.n	801106a <_strtod_l+0x4e2>
 80110d4:	d0eb      	beq.n	80110ae <_strtod_l+0x526>
 80110d6:	f1c8 0800 	rsb	r8, r8, #0
 80110da:	f018 020f 	ands.w	r2, r8, #15
 80110de:	d00a      	beq.n	80110f6 <_strtod_l+0x56e>
 80110e0:	4b12      	ldr	r3, [pc, #72]	; (801112c <_strtod_l+0x5a4>)
 80110e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110e6:	4650      	mov	r0, sl
 80110e8:	4659      	mov	r1, fp
 80110ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ee:	f7ef fbc5 	bl	800087c <__aeabi_ddiv>
 80110f2:	4682      	mov	sl, r0
 80110f4:	468b      	mov	fp, r1
 80110f6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80110fa:	d0d8      	beq.n	80110ae <_strtod_l+0x526>
 80110fc:	f1b8 0f1f 	cmp.w	r8, #31
 8011100:	dd1e      	ble.n	8011140 <_strtod_l+0x5b8>
 8011102:	2500      	movs	r5, #0
 8011104:	462e      	mov	r6, r5
 8011106:	9509      	str	r5, [sp, #36]	; 0x24
 8011108:	9507      	str	r5, [sp, #28]
 801110a:	2322      	movs	r3, #34	; 0x22
 801110c:	f04f 0a00 	mov.w	sl, #0
 8011110:	f04f 0b00 	mov.w	fp, #0
 8011114:	6023      	str	r3, [r4, #0]
 8011116:	e789      	b.n	801102c <_strtod_l+0x4a4>
 8011118:	0801542d 	.word	0x0801542d
 801111c:	08015444 	.word	0x08015444
 8011120:	08015424 	.word	0x08015424
 8011124:	08015427 	.word	0x08015427
 8011128:	08015752 	.word	0x08015752
 801112c:	08015610 	.word	0x08015610
 8011130:	080155e8 	.word	0x080155e8
 8011134:	7ff00000 	.word	0x7ff00000
 8011138:	7ca00000 	.word	0x7ca00000
 801113c:	7fefffff 	.word	0x7fefffff
 8011140:	f018 0310 	ands.w	r3, r8, #16
 8011144:	bf18      	it	ne
 8011146:	236a      	movne	r3, #106	; 0x6a
 8011148:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011500 <_strtod_l+0x978>
 801114c:	9304      	str	r3, [sp, #16]
 801114e:	4650      	mov	r0, sl
 8011150:	4659      	mov	r1, fp
 8011152:	2300      	movs	r3, #0
 8011154:	f018 0f01 	tst.w	r8, #1
 8011158:	d004      	beq.n	8011164 <_strtod_l+0x5dc>
 801115a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801115e:	f7ef fa63 	bl	8000628 <__aeabi_dmul>
 8011162:	2301      	movs	r3, #1
 8011164:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011168:	f109 0908 	add.w	r9, r9, #8
 801116c:	d1f2      	bne.n	8011154 <_strtod_l+0x5cc>
 801116e:	b10b      	cbz	r3, 8011174 <_strtod_l+0x5ec>
 8011170:	4682      	mov	sl, r0
 8011172:	468b      	mov	fp, r1
 8011174:	9b04      	ldr	r3, [sp, #16]
 8011176:	b1bb      	cbz	r3, 80111a8 <_strtod_l+0x620>
 8011178:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801117c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011180:	2b00      	cmp	r3, #0
 8011182:	4659      	mov	r1, fp
 8011184:	dd10      	ble.n	80111a8 <_strtod_l+0x620>
 8011186:	2b1f      	cmp	r3, #31
 8011188:	f340 8128 	ble.w	80113dc <_strtod_l+0x854>
 801118c:	2b34      	cmp	r3, #52	; 0x34
 801118e:	bfde      	ittt	le
 8011190:	3b20      	suble	r3, #32
 8011192:	f04f 32ff 	movle.w	r2, #4294967295
 8011196:	fa02 f303 	lslle.w	r3, r2, r3
 801119a:	f04f 0a00 	mov.w	sl, #0
 801119e:	bfcc      	ite	gt
 80111a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80111a4:	ea03 0b01 	andle.w	fp, r3, r1
 80111a8:	2200      	movs	r2, #0
 80111aa:	2300      	movs	r3, #0
 80111ac:	4650      	mov	r0, sl
 80111ae:	4659      	mov	r1, fp
 80111b0:	f7ef fca2 	bl	8000af8 <__aeabi_dcmpeq>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d1a4      	bne.n	8011102 <_strtod_l+0x57a>
 80111b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ba:	9300      	str	r3, [sp, #0]
 80111bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80111be:	462b      	mov	r3, r5
 80111c0:	463a      	mov	r2, r7
 80111c2:	4620      	mov	r0, r4
 80111c4:	f001 fa42 	bl	801264c <__s2b>
 80111c8:	9009      	str	r0, [sp, #36]	; 0x24
 80111ca:	2800      	cmp	r0, #0
 80111cc:	f43f af24 	beq.w	8011018 <_strtod_l+0x490>
 80111d0:	9b07      	ldr	r3, [sp, #28]
 80111d2:	1b9e      	subs	r6, r3, r6
 80111d4:	9b08      	ldr	r3, [sp, #32]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	bfb4      	ite	lt
 80111da:	4633      	movlt	r3, r6
 80111dc:	2300      	movge	r3, #0
 80111de:	9310      	str	r3, [sp, #64]	; 0x40
 80111e0:	9b08      	ldr	r3, [sp, #32]
 80111e2:	2500      	movs	r5, #0
 80111e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80111e8:	9318      	str	r3, [sp, #96]	; 0x60
 80111ea:	462e      	mov	r6, r5
 80111ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ee:	4620      	mov	r0, r4
 80111f0:	6859      	ldr	r1, [r3, #4]
 80111f2:	f001 f97f 	bl	80124f4 <_Balloc>
 80111f6:	9007      	str	r0, [sp, #28]
 80111f8:	2800      	cmp	r0, #0
 80111fa:	f43f af11 	beq.w	8011020 <_strtod_l+0x498>
 80111fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011200:	691a      	ldr	r2, [r3, #16]
 8011202:	3202      	adds	r2, #2
 8011204:	f103 010c 	add.w	r1, r3, #12
 8011208:	0092      	lsls	r2, r2, #2
 801120a:	300c      	adds	r0, #12
 801120c:	f7ff f926 	bl	801045c <memcpy>
 8011210:	ec4b ab10 	vmov	d0, sl, fp
 8011214:	aa20      	add	r2, sp, #128	; 0x80
 8011216:	a91f      	add	r1, sp, #124	; 0x7c
 8011218:	4620      	mov	r0, r4
 801121a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801121e:	f001 fd51 	bl	8012cc4 <__d2b>
 8011222:	901e      	str	r0, [sp, #120]	; 0x78
 8011224:	2800      	cmp	r0, #0
 8011226:	f43f aefb 	beq.w	8011020 <_strtod_l+0x498>
 801122a:	2101      	movs	r1, #1
 801122c:	4620      	mov	r0, r4
 801122e:	f001 faa7 	bl	8012780 <__i2b>
 8011232:	4606      	mov	r6, r0
 8011234:	2800      	cmp	r0, #0
 8011236:	f43f aef3 	beq.w	8011020 <_strtod_l+0x498>
 801123a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801123c:	9904      	ldr	r1, [sp, #16]
 801123e:	2b00      	cmp	r3, #0
 8011240:	bfab      	itete	ge
 8011242:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011244:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011246:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011248:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801124c:	bfac      	ite	ge
 801124e:	eb03 0902 	addge.w	r9, r3, r2
 8011252:	1ad7      	sublt	r7, r2, r3
 8011254:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011256:	eba3 0801 	sub.w	r8, r3, r1
 801125a:	4490      	add	r8, r2
 801125c:	4ba3      	ldr	r3, [pc, #652]	; (80114ec <_strtod_l+0x964>)
 801125e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011262:	4598      	cmp	r8, r3
 8011264:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011268:	f280 80cc 	bge.w	8011404 <_strtod_l+0x87c>
 801126c:	eba3 0308 	sub.w	r3, r3, r8
 8011270:	2b1f      	cmp	r3, #31
 8011272:	eba2 0203 	sub.w	r2, r2, r3
 8011276:	f04f 0101 	mov.w	r1, #1
 801127a:	f300 80b6 	bgt.w	80113ea <_strtod_l+0x862>
 801127e:	fa01 f303 	lsl.w	r3, r1, r3
 8011282:	9311      	str	r3, [sp, #68]	; 0x44
 8011284:	2300      	movs	r3, #0
 8011286:	930c      	str	r3, [sp, #48]	; 0x30
 8011288:	eb09 0802 	add.w	r8, r9, r2
 801128c:	9b04      	ldr	r3, [sp, #16]
 801128e:	45c1      	cmp	r9, r8
 8011290:	4417      	add	r7, r2
 8011292:	441f      	add	r7, r3
 8011294:	464b      	mov	r3, r9
 8011296:	bfa8      	it	ge
 8011298:	4643      	movge	r3, r8
 801129a:	42bb      	cmp	r3, r7
 801129c:	bfa8      	it	ge
 801129e:	463b      	movge	r3, r7
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	bfc2      	ittt	gt
 80112a4:	eba8 0803 	subgt.w	r8, r8, r3
 80112a8:	1aff      	subgt	r7, r7, r3
 80112aa:	eba9 0903 	subgt.w	r9, r9, r3
 80112ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	dd17      	ble.n	80112e4 <_strtod_l+0x75c>
 80112b4:	4631      	mov	r1, r6
 80112b6:	461a      	mov	r2, r3
 80112b8:	4620      	mov	r0, r4
 80112ba:	f001 fb1d 	bl	80128f8 <__pow5mult>
 80112be:	4606      	mov	r6, r0
 80112c0:	2800      	cmp	r0, #0
 80112c2:	f43f aead 	beq.w	8011020 <_strtod_l+0x498>
 80112c6:	4601      	mov	r1, r0
 80112c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80112ca:	4620      	mov	r0, r4
 80112cc:	f001 fa6e 	bl	80127ac <__multiply>
 80112d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80112d2:	2800      	cmp	r0, #0
 80112d4:	f43f aea4 	beq.w	8011020 <_strtod_l+0x498>
 80112d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80112da:	4620      	mov	r0, r4
 80112dc:	f001 f94a 	bl	8012574 <_Bfree>
 80112e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112e2:	931e      	str	r3, [sp, #120]	; 0x78
 80112e4:	f1b8 0f00 	cmp.w	r8, #0
 80112e8:	f300 8091 	bgt.w	801140e <_strtod_l+0x886>
 80112ec:	9b08      	ldr	r3, [sp, #32]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	dd08      	ble.n	8011304 <_strtod_l+0x77c>
 80112f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80112f4:	9907      	ldr	r1, [sp, #28]
 80112f6:	4620      	mov	r0, r4
 80112f8:	f001 fafe 	bl	80128f8 <__pow5mult>
 80112fc:	9007      	str	r0, [sp, #28]
 80112fe:	2800      	cmp	r0, #0
 8011300:	f43f ae8e 	beq.w	8011020 <_strtod_l+0x498>
 8011304:	2f00      	cmp	r7, #0
 8011306:	dd08      	ble.n	801131a <_strtod_l+0x792>
 8011308:	9907      	ldr	r1, [sp, #28]
 801130a:	463a      	mov	r2, r7
 801130c:	4620      	mov	r0, r4
 801130e:	f001 fb4d 	bl	80129ac <__lshift>
 8011312:	9007      	str	r0, [sp, #28]
 8011314:	2800      	cmp	r0, #0
 8011316:	f43f ae83 	beq.w	8011020 <_strtod_l+0x498>
 801131a:	f1b9 0f00 	cmp.w	r9, #0
 801131e:	dd08      	ble.n	8011332 <_strtod_l+0x7aa>
 8011320:	4631      	mov	r1, r6
 8011322:	464a      	mov	r2, r9
 8011324:	4620      	mov	r0, r4
 8011326:	f001 fb41 	bl	80129ac <__lshift>
 801132a:	4606      	mov	r6, r0
 801132c:	2800      	cmp	r0, #0
 801132e:	f43f ae77 	beq.w	8011020 <_strtod_l+0x498>
 8011332:	9a07      	ldr	r2, [sp, #28]
 8011334:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011336:	4620      	mov	r0, r4
 8011338:	f001 fbc0 	bl	8012abc <__mdiff>
 801133c:	4605      	mov	r5, r0
 801133e:	2800      	cmp	r0, #0
 8011340:	f43f ae6e 	beq.w	8011020 <_strtod_l+0x498>
 8011344:	68c3      	ldr	r3, [r0, #12]
 8011346:	930f      	str	r3, [sp, #60]	; 0x3c
 8011348:	2300      	movs	r3, #0
 801134a:	60c3      	str	r3, [r0, #12]
 801134c:	4631      	mov	r1, r6
 801134e:	f001 fb99 	bl	8012a84 <__mcmp>
 8011352:	2800      	cmp	r0, #0
 8011354:	da65      	bge.n	8011422 <_strtod_l+0x89a>
 8011356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011358:	ea53 030a 	orrs.w	r3, r3, sl
 801135c:	f040 8087 	bne.w	801146e <_strtod_l+0x8e6>
 8011360:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011364:	2b00      	cmp	r3, #0
 8011366:	f040 8082 	bne.w	801146e <_strtod_l+0x8e6>
 801136a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801136e:	0d1b      	lsrs	r3, r3, #20
 8011370:	051b      	lsls	r3, r3, #20
 8011372:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011376:	d97a      	bls.n	801146e <_strtod_l+0x8e6>
 8011378:	696b      	ldr	r3, [r5, #20]
 801137a:	b913      	cbnz	r3, 8011382 <_strtod_l+0x7fa>
 801137c:	692b      	ldr	r3, [r5, #16]
 801137e:	2b01      	cmp	r3, #1
 8011380:	dd75      	ble.n	801146e <_strtod_l+0x8e6>
 8011382:	4629      	mov	r1, r5
 8011384:	2201      	movs	r2, #1
 8011386:	4620      	mov	r0, r4
 8011388:	f001 fb10 	bl	80129ac <__lshift>
 801138c:	4631      	mov	r1, r6
 801138e:	4605      	mov	r5, r0
 8011390:	f001 fb78 	bl	8012a84 <__mcmp>
 8011394:	2800      	cmp	r0, #0
 8011396:	dd6a      	ble.n	801146e <_strtod_l+0x8e6>
 8011398:	9904      	ldr	r1, [sp, #16]
 801139a:	4a55      	ldr	r2, [pc, #340]	; (80114f0 <_strtod_l+0x968>)
 801139c:	465b      	mov	r3, fp
 801139e:	2900      	cmp	r1, #0
 80113a0:	f000 8085 	beq.w	80114ae <_strtod_l+0x926>
 80113a4:	ea02 010b 	and.w	r1, r2, fp
 80113a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80113ac:	dc7f      	bgt.n	80114ae <_strtod_l+0x926>
 80113ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80113b2:	f77f aeaa 	ble.w	801110a <_strtod_l+0x582>
 80113b6:	4a4f      	ldr	r2, [pc, #316]	; (80114f4 <_strtod_l+0x96c>)
 80113b8:	2300      	movs	r3, #0
 80113ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80113be:	4650      	mov	r0, sl
 80113c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80113c4:	4659      	mov	r1, fp
 80113c6:	f7ef f92f 	bl	8000628 <__aeabi_dmul>
 80113ca:	460b      	mov	r3, r1
 80113cc:	4303      	orrs	r3, r0
 80113ce:	bf08      	it	eq
 80113d0:	2322      	moveq	r3, #34	; 0x22
 80113d2:	4682      	mov	sl, r0
 80113d4:	468b      	mov	fp, r1
 80113d6:	bf08      	it	eq
 80113d8:	6023      	streq	r3, [r4, #0]
 80113da:	e62b      	b.n	8011034 <_strtod_l+0x4ac>
 80113dc:	f04f 32ff 	mov.w	r2, #4294967295
 80113e0:	fa02 f303 	lsl.w	r3, r2, r3
 80113e4:	ea03 0a0a 	and.w	sl, r3, sl
 80113e8:	e6de      	b.n	80111a8 <_strtod_l+0x620>
 80113ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80113ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80113f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80113f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80113fa:	fa01 f308 	lsl.w	r3, r1, r8
 80113fe:	930c      	str	r3, [sp, #48]	; 0x30
 8011400:	9111      	str	r1, [sp, #68]	; 0x44
 8011402:	e741      	b.n	8011288 <_strtod_l+0x700>
 8011404:	2300      	movs	r3, #0
 8011406:	930c      	str	r3, [sp, #48]	; 0x30
 8011408:	2301      	movs	r3, #1
 801140a:	9311      	str	r3, [sp, #68]	; 0x44
 801140c:	e73c      	b.n	8011288 <_strtod_l+0x700>
 801140e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011410:	4642      	mov	r2, r8
 8011412:	4620      	mov	r0, r4
 8011414:	f001 faca 	bl	80129ac <__lshift>
 8011418:	901e      	str	r0, [sp, #120]	; 0x78
 801141a:	2800      	cmp	r0, #0
 801141c:	f47f af66 	bne.w	80112ec <_strtod_l+0x764>
 8011420:	e5fe      	b.n	8011020 <_strtod_l+0x498>
 8011422:	465f      	mov	r7, fp
 8011424:	d16e      	bne.n	8011504 <_strtod_l+0x97c>
 8011426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011428:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801142c:	b342      	cbz	r2, 8011480 <_strtod_l+0x8f8>
 801142e:	4a32      	ldr	r2, [pc, #200]	; (80114f8 <_strtod_l+0x970>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d128      	bne.n	8011486 <_strtod_l+0x8fe>
 8011434:	9b04      	ldr	r3, [sp, #16]
 8011436:	4650      	mov	r0, sl
 8011438:	b1eb      	cbz	r3, 8011476 <_strtod_l+0x8ee>
 801143a:	4a2d      	ldr	r2, [pc, #180]	; (80114f0 <_strtod_l+0x968>)
 801143c:	403a      	ands	r2, r7
 801143e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011442:	f04f 31ff 	mov.w	r1, #4294967295
 8011446:	d819      	bhi.n	801147c <_strtod_l+0x8f4>
 8011448:	0d12      	lsrs	r2, r2, #20
 801144a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801144e:	fa01 f303 	lsl.w	r3, r1, r3
 8011452:	4298      	cmp	r0, r3
 8011454:	d117      	bne.n	8011486 <_strtod_l+0x8fe>
 8011456:	4b29      	ldr	r3, [pc, #164]	; (80114fc <_strtod_l+0x974>)
 8011458:	429f      	cmp	r7, r3
 801145a:	d102      	bne.n	8011462 <_strtod_l+0x8da>
 801145c:	3001      	adds	r0, #1
 801145e:	f43f addf 	beq.w	8011020 <_strtod_l+0x498>
 8011462:	4b23      	ldr	r3, [pc, #140]	; (80114f0 <_strtod_l+0x968>)
 8011464:	403b      	ands	r3, r7
 8011466:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801146a:	f04f 0a00 	mov.w	sl, #0
 801146e:	9b04      	ldr	r3, [sp, #16]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d1a0      	bne.n	80113b6 <_strtod_l+0x82e>
 8011474:	e5de      	b.n	8011034 <_strtod_l+0x4ac>
 8011476:	f04f 33ff 	mov.w	r3, #4294967295
 801147a:	e7ea      	b.n	8011452 <_strtod_l+0x8ca>
 801147c:	460b      	mov	r3, r1
 801147e:	e7e8      	b.n	8011452 <_strtod_l+0x8ca>
 8011480:	ea53 030a 	orrs.w	r3, r3, sl
 8011484:	d088      	beq.n	8011398 <_strtod_l+0x810>
 8011486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011488:	b1db      	cbz	r3, 80114c2 <_strtod_l+0x93a>
 801148a:	423b      	tst	r3, r7
 801148c:	d0ef      	beq.n	801146e <_strtod_l+0x8e6>
 801148e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011490:	9a04      	ldr	r2, [sp, #16]
 8011492:	4650      	mov	r0, sl
 8011494:	4659      	mov	r1, fp
 8011496:	b1c3      	cbz	r3, 80114ca <_strtod_l+0x942>
 8011498:	f7ff fb59 	bl	8010b4e <sulp>
 801149c:	4602      	mov	r2, r0
 801149e:	460b      	mov	r3, r1
 80114a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114a4:	f7ee ff0a 	bl	80002bc <__adddf3>
 80114a8:	4682      	mov	sl, r0
 80114aa:	468b      	mov	fp, r1
 80114ac:	e7df      	b.n	801146e <_strtod_l+0x8e6>
 80114ae:	4013      	ands	r3, r2
 80114b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80114b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80114b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80114bc:	f04f 3aff 	mov.w	sl, #4294967295
 80114c0:	e7d5      	b.n	801146e <_strtod_l+0x8e6>
 80114c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114c4:	ea13 0f0a 	tst.w	r3, sl
 80114c8:	e7e0      	b.n	801148c <_strtod_l+0x904>
 80114ca:	f7ff fb40 	bl	8010b4e <sulp>
 80114ce:	4602      	mov	r2, r0
 80114d0:	460b      	mov	r3, r1
 80114d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114d6:	f7ee feef 	bl	80002b8 <__aeabi_dsub>
 80114da:	2200      	movs	r2, #0
 80114dc:	2300      	movs	r3, #0
 80114de:	4682      	mov	sl, r0
 80114e0:	468b      	mov	fp, r1
 80114e2:	f7ef fb09 	bl	8000af8 <__aeabi_dcmpeq>
 80114e6:	2800      	cmp	r0, #0
 80114e8:	d0c1      	beq.n	801146e <_strtod_l+0x8e6>
 80114ea:	e60e      	b.n	801110a <_strtod_l+0x582>
 80114ec:	fffffc02 	.word	0xfffffc02
 80114f0:	7ff00000 	.word	0x7ff00000
 80114f4:	39500000 	.word	0x39500000
 80114f8:	000fffff 	.word	0x000fffff
 80114fc:	7fefffff 	.word	0x7fefffff
 8011500:	08015458 	.word	0x08015458
 8011504:	4631      	mov	r1, r6
 8011506:	4628      	mov	r0, r5
 8011508:	f001 fc38 	bl	8012d7c <__ratio>
 801150c:	ec59 8b10 	vmov	r8, r9, d0
 8011510:	ee10 0a10 	vmov	r0, s0
 8011514:	2200      	movs	r2, #0
 8011516:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801151a:	4649      	mov	r1, r9
 801151c:	f7ef fb00 	bl	8000b20 <__aeabi_dcmple>
 8011520:	2800      	cmp	r0, #0
 8011522:	d07c      	beq.n	801161e <_strtod_l+0xa96>
 8011524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011526:	2b00      	cmp	r3, #0
 8011528:	d04c      	beq.n	80115c4 <_strtod_l+0xa3c>
 801152a:	4b95      	ldr	r3, [pc, #596]	; (8011780 <_strtod_l+0xbf8>)
 801152c:	2200      	movs	r2, #0
 801152e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011532:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011780 <_strtod_l+0xbf8>
 8011536:	f04f 0800 	mov.w	r8, #0
 801153a:	4b92      	ldr	r3, [pc, #584]	; (8011784 <_strtod_l+0xbfc>)
 801153c:	403b      	ands	r3, r7
 801153e:	9311      	str	r3, [sp, #68]	; 0x44
 8011540:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011542:	4b91      	ldr	r3, [pc, #580]	; (8011788 <_strtod_l+0xc00>)
 8011544:	429a      	cmp	r2, r3
 8011546:	f040 80b2 	bne.w	80116ae <_strtod_l+0xb26>
 801154a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801154e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011552:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011556:	ec4b ab10 	vmov	d0, sl, fp
 801155a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801155e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011562:	f001 fb33 	bl	8012bcc <__ulp>
 8011566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801156a:	ec53 2b10 	vmov	r2, r3, d0
 801156e:	f7ef f85b 	bl	8000628 <__aeabi_dmul>
 8011572:	4652      	mov	r2, sl
 8011574:	465b      	mov	r3, fp
 8011576:	f7ee fea1 	bl	80002bc <__adddf3>
 801157a:	460b      	mov	r3, r1
 801157c:	4981      	ldr	r1, [pc, #516]	; (8011784 <_strtod_l+0xbfc>)
 801157e:	4a83      	ldr	r2, [pc, #524]	; (801178c <_strtod_l+0xc04>)
 8011580:	4019      	ands	r1, r3
 8011582:	4291      	cmp	r1, r2
 8011584:	4682      	mov	sl, r0
 8011586:	d95e      	bls.n	8011646 <_strtod_l+0xabe>
 8011588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801158a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801158e:	4293      	cmp	r3, r2
 8011590:	d103      	bne.n	801159a <_strtod_l+0xa12>
 8011592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011594:	3301      	adds	r3, #1
 8011596:	f43f ad43 	beq.w	8011020 <_strtod_l+0x498>
 801159a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011798 <_strtod_l+0xc10>
 801159e:	f04f 3aff 	mov.w	sl, #4294967295
 80115a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80115a4:	4620      	mov	r0, r4
 80115a6:	f000 ffe5 	bl	8012574 <_Bfree>
 80115aa:	9907      	ldr	r1, [sp, #28]
 80115ac:	4620      	mov	r0, r4
 80115ae:	f000 ffe1 	bl	8012574 <_Bfree>
 80115b2:	4631      	mov	r1, r6
 80115b4:	4620      	mov	r0, r4
 80115b6:	f000 ffdd 	bl	8012574 <_Bfree>
 80115ba:	4629      	mov	r1, r5
 80115bc:	4620      	mov	r0, r4
 80115be:	f000 ffd9 	bl	8012574 <_Bfree>
 80115c2:	e613      	b.n	80111ec <_strtod_l+0x664>
 80115c4:	f1ba 0f00 	cmp.w	sl, #0
 80115c8:	d11b      	bne.n	8011602 <_strtod_l+0xa7a>
 80115ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80115ce:	b9f3      	cbnz	r3, 801160e <_strtod_l+0xa86>
 80115d0:	4b6b      	ldr	r3, [pc, #428]	; (8011780 <_strtod_l+0xbf8>)
 80115d2:	2200      	movs	r2, #0
 80115d4:	4640      	mov	r0, r8
 80115d6:	4649      	mov	r1, r9
 80115d8:	f7ef fa98 	bl	8000b0c <__aeabi_dcmplt>
 80115dc:	b9d0      	cbnz	r0, 8011614 <_strtod_l+0xa8c>
 80115de:	4640      	mov	r0, r8
 80115e0:	4649      	mov	r1, r9
 80115e2:	4b6b      	ldr	r3, [pc, #428]	; (8011790 <_strtod_l+0xc08>)
 80115e4:	2200      	movs	r2, #0
 80115e6:	f7ef f81f 	bl	8000628 <__aeabi_dmul>
 80115ea:	4680      	mov	r8, r0
 80115ec:	4689      	mov	r9, r1
 80115ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80115f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80115f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80115f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80115fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011600:	e79b      	b.n	801153a <_strtod_l+0x9b2>
 8011602:	f1ba 0f01 	cmp.w	sl, #1
 8011606:	d102      	bne.n	801160e <_strtod_l+0xa86>
 8011608:	2f00      	cmp	r7, #0
 801160a:	f43f ad7e 	beq.w	801110a <_strtod_l+0x582>
 801160e:	4b61      	ldr	r3, [pc, #388]	; (8011794 <_strtod_l+0xc0c>)
 8011610:	2200      	movs	r2, #0
 8011612:	e78c      	b.n	801152e <_strtod_l+0x9a6>
 8011614:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011790 <_strtod_l+0xc08>
 8011618:	f04f 0800 	mov.w	r8, #0
 801161c:	e7e7      	b.n	80115ee <_strtod_l+0xa66>
 801161e:	4b5c      	ldr	r3, [pc, #368]	; (8011790 <_strtod_l+0xc08>)
 8011620:	4640      	mov	r0, r8
 8011622:	4649      	mov	r1, r9
 8011624:	2200      	movs	r2, #0
 8011626:	f7ee ffff 	bl	8000628 <__aeabi_dmul>
 801162a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801162c:	4680      	mov	r8, r0
 801162e:	4689      	mov	r9, r1
 8011630:	b933      	cbnz	r3, 8011640 <_strtod_l+0xab8>
 8011632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011636:	9012      	str	r0, [sp, #72]	; 0x48
 8011638:	9313      	str	r3, [sp, #76]	; 0x4c
 801163a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801163e:	e7dd      	b.n	80115fc <_strtod_l+0xa74>
 8011640:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011644:	e7f9      	b.n	801163a <_strtod_l+0xab2>
 8011646:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801164a:	9b04      	ldr	r3, [sp, #16]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d1a8      	bne.n	80115a2 <_strtod_l+0xa1a>
 8011650:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011654:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011656:	0d1b      	lsrs	r3, r3, #20
 8011658:	051b      	lsls	r3, r3, #20
 801165a:	429a      	cmp	r2, r3
 801165c:	d1a1      	bne.n	80115a2 <_strtod_l+0xa1a>
 801165e:	4640      	mov	r0, r8
 8011660:	4649      	mov	r1, r9
 8011662:	f7ef fb2b 	bl	8000cbc <__aeabi_d2lz>
 8011666:	f7ee ffb1 	bl	80005cc <__aeabi_l2d>
 801166a:	4602      	mov	r2, r0
 801166c:	460b      	mov	r3, r1
 801166e:	4640      	mov	r0, r8
 8011670:	4649      	mov	r1, r9
 8011672:	f7ee fe21 	bl	80002b8 <__aeabi_dsub>
 8011676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011678:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801167c:	ea43 030a 	orr.w	r3, r3, sl
 8011680:	4313      	orrs	r3, r2
 8011682:	4680      	mov	r8, r0
 8011684:	4689      	mov	r9, r1
 8011686:	d053      	beq.n	8011730 <_strtod_l+0xba8>
 8011688:	a335      	add	r3, pc, #212	; (adr r3, 8011760 <_strtod_l+0xbd8>)
 801168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168e:	f7ef fa3d 	bl	8000b0c <__aeabi_dcmplt>
 8011692:	2800      	cmp	r0, #0
 8011694:	f47f acce 	bne.w	8011034 <_strtod_l+0x4ac>
 8011698:	a333      	add	r3, pc, #204	; (adr r3, 8011768 <_strtod_l+0xbe0>)
 801169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801169e:	4640      	mov	r0, r8
 80116a0:	4649      	mov	r1, r9
 80116a2:	f7ef fa51 	bl	8000b48 <__aeabi_dcmpgt>
 80116a6:	2800      	cmp	r0, #0
 80116a8:	f43f af7b 	beq.w	80115a2 <_strtod_l+0xa1a>
 80116ac:	e4c2      	b.n	8011034 <_strtod_l+0x4ac>
 80116ae:	9b04      	ldr	r3, [sp, #16]
 80116b0:	b333      	cbz	r3, 8011700 <_strtod_l+0xb78>
 80116b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80116b8:	d822      	bhi.n	8011700 <_strtod_l+0xb78>
 80116ba:	a32d      	add	r3, pc, #180	; (adr r3, 8011770 <_strtod_l+0xbe8>)
 80116bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c0:	4640      	mov	r0, r8
 80116c2:	4649      	mov	r1, r9
 80116c4:	f7ef fa2c 	bl	8000b20 <__aeabi_dcmple>
 80116c8:	b1a0      	cbz	r0, 80116f4 <_strtod_l+0xb6c>
 80116ca:	4649      	mov	r1, r9
 80116cc:	4640      	mov	r0, r8
 80116ce:	f7ef fa6d 	bl	8000bac <__aeabi_d2uiz>
 80116d2:	2801      	cmp	r0, #1
 80116d4:	bf38      	it	cc
 80116d6:	2001      	movcc	r0, #1
 80116d8:	f7ee ff2c 	bl	8000534 <__aeabi_ui2d>
 80116dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116de:	4680      	mov	r8, r0
 80116e0:	4689      	mov	r9, r1
 80116e2:	bb13      	cbnz	r3, 801172a <_strtod_l+0xba2>
 80116e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80116e8:	9014      	str	r0, [sp, #80]	; 0x50
 80116ea:	9315      	str	r3, [sp, #84]	; 0x54
 80116ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80116f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80116f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80116f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80116fc:	1a9b      	subs	r3, r3, r2
 80116fe:	930d      	str	r3, [sp, #52]	; 0x34
 8011700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011704:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011708:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801170c:	f001 fa5e 	bl	8012bcc <__ulp>
 8011710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011714:	ec53 2b10 	vmov	r2, r3, d0
 8011718:	f7ee ff86 	bl	8000628 <__aeabi_dmul>
 801171c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011720:	f7ee fdcc 	bl	80002bc <__adddf3>
 8011724:	4682      	mov	sl, r0
 8011726:	468b      	mov	fp, r1
 8011728:	e78f      	b.n	801164a <_strtod_l+0xac2>
 801172a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801172e:	e7dd      	b.n	80116ec <_strtod_l+0xb64>
 8011730:	a311      	add	r3, pc, #68	; (adr r3, 8011778 <_strtod_l+0xbf0>)
 8011732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011736:	f7ef f9e9 	bl	8000b0c <__aeabi_dcmplt>
 801173a:	e7b4      	b.n	80116a6 <_strtod_l+0xb1e>
 801173c:	2300      	movs	r3, #0
 801173e:	930e      	str	r3, [sp, #56]	; 0x38
 8011740:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011742:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011744:	6013      	str	r3, [r2, #0]
 8011746:	f7ff ba65 	b.w	8010c14 <_strtod_l+0x8c>
 801174a:	2b65      	cmp	r3, #101	; 0x65
 801174c:	f43f ab5d 	beq.w	8010e0a <_strtod_l+0x282>
 8011750:	2b45      	cmp	r3, #69	; 0x45
 8011752:	f43f ab5a 	beq.w	8010e0a <_strtod_l+0x282>
 8011756:	2201      	movs	r2, #1
 8011758:	f7ff bb92 	b.w	8010e80 <_strtod_l+0x2f8>
 801175c:	f3af 8000 	nop.w
 8011760:	94a03595 	.word	0x94a03595
 8011764:	3fdfffff 	.word	0x3fdfffff
 8011768:	35afe535 	.word	0x35afe535
 801176c:	3fe00000 	.word	0x3fe00000
 8011770:	ffc00000 	.word	0xffc00000
 8011774:	41dfffff 	.word	0x41dfffff
 8011778:	94a03595 	.word	0x94a03595
 801177c:	3fcfffff 	.word	0x3fcfffff
 8011780:	3ff00000 	.word	0x3ff00000
 8011784:	7ff00000 	.word	0x7ff00000
 8011788:	7fe00000 	.word	0x7fe00000
 801178c:	7c9fffff 	.word	0x7c9fffff
 8011790:	3fe00000 	.word	0x3fe00000
 8011794:	bff00000 	.word	0xbff00000
 8011798:	7fefffff 	.word	0x7fefffff

0801179c <strtod>:
 801179c:	460a      	mov	r2, r1
 801179e:	4601      	mov	r1, r0
 80117a0:	4802      	ldr	r0, [pc, #8]	; (80117ac <strtod+0x10>)
 80117a2:	4b03      	ldr	r3, [pc, #12]	; (80117b0 <strtod+0x14>)
 80117a4:	6800      	ldr	r0, [r0, #0]
 80117a6:	f7ff b9ef 	b.w	8010b88 <_strtod_l>
 80117aa:	bf00      	nop
 80117ac:	20000160 	.word	0x20000160
 80117b0:	200001c8 	.word	0x200001c8

080117b4 <__swbuf_r>:
 80117b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117b6:	460e      	mov	r6, r1
 80117b8:	4614      	mov	r4, r2
 80117ba:	4605      	mov	r5, r0
 80117bc:	b118      	cbz	r0, 80117c6 <__swbuf_r+0x12>
 80117be:	6983      	ldr	r3, [r0, #24]
 80117c0:	b90b      	cbnz	r3, 80117c6 <__swbuf_r+0x12>
 80117c2:	f000 f9f3 	bl	8011bac <__sinit>
 80117c6:	4b21      	ldr	r3, [pc, #132]	; (801184c <__swbuf_r+0x98>)
 80117c8:	429c      	cmp	r4, r3
 80117ca:	d12b      	bne.n	8011824 <__swbuf_r+0x70>
 80117cc:	686c      	ldr	r4, [r5, #4]
 80117ce:	69a3      	ldr	r3, [r4, #24]
 80117d0:	60a3      	str	r3, [r4, #8]
 80117d2:	89a3      	ldrh	r3, [r4, #12]
 80117d4:	071a      	lsls	r2, r3, #28
 80117d6:	d52f      	bpl.n	8011838 <__swbuf_r+0x84>
 80117d8:	6923      	ldr	r3, [r4, #16]
 80117da:	b36b      	cbz	r3, 8011838 <__swbuf_r+0x84>
 80117dc:	6923      	ldr	r3, [r4, #16]
 80117de:	6820      	ldr	r0, [r4, #0]
 80117e0:	1ac0      	subs	r0, r0, r3
 80117e2:	6963      	ldr	r3, [r4, #20]
 80117e4:	b2f6      	uxtb	r6, r6
 80117e6:	4283      	cmp	r3, r0
 80117e8:	4637      	mov	r7, r6
 80117ea:	dc04      	bgt.n	80117f6 <__swbuf_r+0x42>
 80117ec:	4621      	mov	r1, r4
 80117ee:	4628      	mov	r0, r5
 80117f0:	f000 f948 	bl	8011a84 <_fflush_r>
 80117f4:	bb30      	cbnz	r0, 8011844 <__swbuf_r+0x90>
 80117f6:	68a3      	ldr	r3, [r4, #8]
 80117f8:	3b01      	subs	r3, #1
 80117fa:	60a3      	str	r3, [r4, #8]
 80117fc:	6823      	ldr	r3, [r4, #0]
 80117fe:	1c5a      	adds	r2, r3, #1
 8011800:	6022      	str	r2, [r4, #0]
 8011802:	701e      	strb	r6, [r3, #0]
 8011804:	6963      	ldr	r3, [r4, #20]
 8011806:	3001      	adds	r0, #1
 8011808:	4283      	cmp	r3, r0
 801180a:	d004      	beq.n	8011816 <__swbuf_r+0x62>
 801180c:	89a3      	ldrh	r3, [r4, #12]
 801180e:	07db      	lsls	r3, r3, #31
 8011810:	d506      	bpl.n	8011820 <__swbuf_r+0x6c>
 8011812:	2e0a      	cmp	r6, #10
 8011814:	d104      	bne.n	8011820 <__swbuf_r+0x6c>
 8011816:	4621      	mov	r1, r4
 8011818:	4628      	mov	r0, r5
 801181a:	f000 f933 	bl	8011a84 <_fflush_r>
 801181e:	b988      	cbnz	r0, 8011844 <__swbuf_r+0x90>
 8011820:	4638      	mov	r0, r7
 8011822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011824:	4b0a      	ldr	r3, [pc, #40]	; (8011850 <__swbuf_r+0x9c>)
 8011826:	429c      	cmp	r4, r3
 8011828:	d101      	bne.n	801182e <__swbuf_r+0x7a>
 801182a:	68ac      	ldr	r4, [r5, #8]
 801182c:	e7cf      	b.n	80117ce <__swbuf_r+0x1a>
 801182e:	4b09      	ldr	r3, [pc, #36]	; (8011854 <__swbuf_r+0xa0>)
 8011830:	429c      	cmp	r4, r3
 8011832:	bf08      	it	eq
 8011834:	68ec      	ldreq	r4, [r5, #12]
 8011836:	e7ca      	b.n	80117ce <__swbuf_r+0x1a>
 8011838:	4621      	mov	r1, r4
 801183a:	4628      	mov	r0, r5
 801183c:	f000 f81e 	bl	801187c <__swsetup_r>
 8011840:	2800      	cmp	r0, #0
 8011842:	d0cb      	beq.n	80117dc <__swbuf_r+0x28>
 8011844:	f04f 37ff 	mov.w	r7, #4294967295
 8011848:	e7ea      	b.n	8011820 <__swbuf_r+0x6c>
 801184a:	bf00      	nop
 801184c:	080154a0 	.word	0x080154a0
 8011850:	080154c0 	.word	0x080154c0
 8011854:	08015480 	.word	0x08015480

08011858 <_write_r>:
 8011858:	b538      	push	{r3, r4, r5, lr}
 801185a:	4d07      	ldr	r5, [pc, #28]	; (8011878 <_write_r+0x20>)
 801185c:	4604      	mov	r4, r0
 801185e:	4608      	mov	r0, r1
 8011860:	4611      	mov	r1, r2
 8011862:	2200      	movs	r2, #0
 8011864:	602a      	str	r2, [r5, #0]
 8011866:	461a      	mov	r2, r3
 8011868:	f7f1 fa87 	bl	8002d7a <_write>
 801186c:	1c43      	adds	r3, r0, #1
 801186e:	d102      	bne.n	8011876 <_write_r+0x1e>
 8011870:	682b      	ldr	r3, [r5, #0]
 8011872:	b103      	cbz	r3, 8011876 <_write_r+0x1e>
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	bd38      	pop	{r3, r4, r5, pc}
 8011878:	200034d4 	.word	0x200034d4

0801187c <__swsetup_r>:
 801187c:	4b32      	ldr	r3, [pc, #200]	; (8011948 <__swsetup_r+0xcc>)
 801187e:	b570      	push	{r4, r5, r6, lr}
 8011880:	681d      	ldr	r5, [r3, #0]
 8011882:	4606      	mov	r6, r0
 8011884:	460c      	mov	r4, r1
 8011886:	b125      	cbz	r5, 8011892 <__swsetup_r+0x16>
 8011888:	69ab      	ldr	r3, [r5, #24]
 801188a:	b913      	cbnz	r3, 8011892 <__swsetup_r+0x16>
 801188c:	4628      	mov	r0, r5
 801188e:	f000 f98d 	bl	8011bac <__sinit>
 8011892:	4b2e      	ldr	r3, [pc, #184]	; (801194c <__swsetup_r+0xd0>)
 8011894:	429c      	cmp	r4, r3
 8011896:	d10f      	bne.n	80118b8 <__swsetup_r+0x3c>
 8011898:	686c      	ldr	r4, [r5, #4]
 801189a:	89a3      	ldrh	r3, [r4, #12]
 801189c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118a0:	0719      	lsls	r1, r3, #28
 80118a2:	d42c      	bmi.n	80118fe <__swsetup_r+0x82>
 80118a4:	06dd      	lsls	r5, r3, #27
 80118a6:	d411      	bmi.n	80118cc <__swsetup_r+0x50>
 80118a8:	2309      	movs	r3, #9
 80118aa:	6033      	str	r3, [r6, #0]
 80118ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80118b0:	81a3      	strh	r3, [r4, #12]
 80118b2:	f04f 30ff 	mov.w	r0, #4294967295
 80118b6:	e03e      	b.n	8011936 <__swsetup_r+0xba>
 80118b8:	4b25      	ldr	r3, [pc, #148]	; (8011950 <__swsetup_r+0xd4>)
 80118ba:	429c      	cmp	r4, r3
 80118bc:	d101      	bne.n	80118c2 <__swsetup_r+0x46>
 80118be:	68ac      	ldr	r4, [r5, #8]
 80118c0:	e7eb      	b.n	801189a <__swsetup_r+0x1e>
 80118c2:	4b24      	ldr	r3, [pc, #144]	; (8011954 <__swsetup_r+0xd8>)
 80118c4:	429c      	cmp	r4, r3
 80118c6:	bf08      	it	eq
 80118c8:	68ec      	ldreq	r4, [r5, #12]
 80118ca:	e7e6      	b.n	801189a <__swsetup_r+0x1e>
 80118cc:	0758      	lsls	r0, r3, #29
 80118ce:	d512      	bpl.n	80118f6 <__swsetup_r+0x7a>
 80118d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118d2:	b141      	cbz	r1, 80118e6 <__swsetup_r+0x6a>
 80118d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118d8:	4299      	cmp	r1, r3
 80118da:	d002      	beq.n	80118e2 <__swsetup_r+0x66>
 80118dc:	4630      	mov	r0, r6
 80118de:	f7fe fdd3 	bl	8010488 <_free_r>
 80118e2:	2300      	movs	r3, #0
 80118e4:	6363      	str	r3, [r4, #52]	; 0x34
 80118e6:	89a3      	ldrh	r3, [r4, #12]
 80118e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118ec:	81a3      	strh	r3, [r4, #12]
 80118ee:	2300      	movs	r3, #0
 80118f0:	6063      	str	r3, [r4, #4]
 80118f2:	6923      	ldr	r3, [r4, #16]
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	89a3      	ldrh	r3, [r4, #12]
 80118f8:	f043 0308 	orr.w	r3, r3, #8
 80118fc:	81a3      	strh	r3, [r4, #12]
 80118fe:	6923      	ldr	r3, [r4, #16]
 8011900:	b94b      	cbnz	r3, 8011916 <__swsetup_r+0x9a>
 8011902:	89a3      	ldrh	r3, [r4, #12]
 8011904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801190c:	d003      	beq.n	8011916 <__swsetup_r+0x9a>
 801190e:	4621      	mov	r1, r4
 8011910:	4630      	mov	r0, r6
 8011912:	f000 fd91 	bl	8012438 <__smakebuf_r>
 8011916:	89a0      	ldrh	r0, [r4, #12]
 8011918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801191c:	f010 0301 	ands.w	r3, r0, #1
 8011920:	d00a      	beq.n	8011938 <__swsetup_r+0xbc>
 8011922:	2300      	movs	r3, #0
 8011924:	60a3      	str	r3, [r4, #8]
 8011926:	6963      	ldr	r3, [r4, #20]
 8011928:	425b      	negs	r3, r3
 801192a:	61a3      	str	r3, [r4, #24]
 801192c:	6923      	ldr	r3, [r4, #16]
 801192e:	b943      	cbnz	r3, 8011942 <__swsetup_r+0xc6>
 8011930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011934:	d1ba      	bne.n	80118ac <__swsetup_r+0x30>
 8011936:	bd70      	pop	{r4, r5, r6, pc}
 8011938:	0781      	lsls	r1, r0, #30
 801193a:	bf58      	it	pl
 801193c:	6963      	ldrpl	r3, [r4, #20]
 801193e:	60a3      	str	r3, [r4, #8]
 8011940:	e7f4      	b.n	801192c <__swsetup_r+0xb0>
 8011942:	2000      	movs	r0, #0
 8011944:	e7f7      	b.n	8011936 <__swsetup_r+0xba>
 8011946:	bf00      	nop
 8011948:	20000160 	.word	0x20000160
 801194c:	080154a0 	.word	0x080154a0
 8011950:	080154c0 	.word	0x080154c0
 8011954:	08015480 	.word	0x08015480

08011958 <_close_r>:
 8011958:	b538      	push	{r3, r4, r5, lr}
 801195a:	4d06      	ldr	r5, [pc, #24]	; (8011974 <_close_r+0x1c>)
 801195c:	2300      	movs	r3, #0
 801195e:	4604      	mov	r4, r0
 8011960:	4608      	mov	r0, r1
 8011962:	602b      	str	r3, [r5, #0]
 8011964:	f7f1 fa25 	bl	8002db2 <_close>
 8011968:	1c43      	adds	r3, r0, #1
 801196a:	d102      	bne.n	8011972 <_close_r+0x1a>
 801196c:	682b      	ldr	r3, [r5, #0]
 801196e:	b103      	cbz	r3, 8011972 <_close_r+0x1a>
 8011970:	6023      	str	r3, [r4, #0]
 8011972:	bd38      	pop	{r3, r4, r5, pc}
 8011974:	200034d4 	.word	0x200034d4

08011978 <__sflush_r>:
 8011978:	898a      	ldrh	r2, [r1, #12]
 801197a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801197e:	4605      	mov	r5, r0
 8011980:	0710      	lsls	r0, r2, #28
 8011982:	460c      	mov	r4, r1
 8011984:	d458      	bmi.n	8011a38 <__sflush_r+0xc0>
 8011986:	684b      	ldr	r3, [r1, #4]
 8011988:	2b00      	cmp	r3, #0
 801198a:	dc05      	bgt.n	8011998 <__sflush_r+0x20>
 801198c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801198e:	2b00      	cmp	r3, #0
 8011990:	dc02      	bgt.n	8011998 <__sflush_r+0x20>
 8011992:	2000      	movs	r0, #0
 8011994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801199a:	2e00      	cmp	r6, #0
 801199c:	d0f9      	beq.n	8011992 <__sflush_r+0x1a>
 801199e:	2300      	movs	r3, #0
 80119a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119a4:	682f      	ldr	r7, [r5, #0]
 80119a6:	602b      	str	r3, [r5, #0]
 80119a8:	d032      	beq.n	8011a10 <__sflush_r+0x98>
 80119aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119ac:	89a3      	ldrh	r3, [r4, #12]
 80119ae:	075a      	lsls	r2, r3, #29
 80119b0:	d505      	bpl.n	80119be <__sflush_r+0x46>
 80119b2:	6863      	ldr	r3, [r4, #4]
 80119b4:	1ac0      	subs	r0, r0, r3
 80119b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119b8:	b10b      	cbz	r3, 80119be <__sflush_r+0x46>
 80119ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80119bc:	1ac0      	subs	r0, r0, r3
 80119be:	2300      	movs	r3, #0
 80119c0:	4602      	mov	r2, r0
 80119c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119c4:	6a21      	ldr	r1, [r4, #32]
 80119c6:	4628      	mov	r0, r5
 80119c8:	47b0      	blx	r6
 80119ca:	1c43      	adds	r3, r0, #1
 80119cc:	89a3      	ldrh	r3, [r4, #12]
 80119ce:	d106      	bne.n	80119de <__sflush_r+0x66>
 80119d0:	6829      	ldr	r1, [r5, #0]
 80119d2:	291d      	cmp	r1, #29
 80119d4:	d82c      	bhi.n	8011a30 <__sflush_r+0xb8>
 80119d6:	4a2a      	ldr	r2, [pc, #168]	; (8011a80 <__sflush_r+0x108>)
 80119d8:	40ca      	lsrs	r2, r1
 80119da:	07d6      	lsls	r6, r2, #31
 80119dc:	d528      	bpl.n	8011a30 <__sflush_r+0xb8>
 80119de:	2200      	movs	r2, #0
 80119e0:	6062      	str	r2, [r4, #4]
 80119e2:	04d9      	lsls	r1, r3, #19
 80119e4:	6922      	ldr	r2, [r4, #16]
 80119e6:	6022      	str	r2, [r4, #0]
 80119e8:	d504      	bpl.n	80119f4 <__sflush_r+0x7c>
 80119ea:	1c42      	adds	r2, r0, #1
 80119ec:	d101      	bne.n	80119f2 <__sflush_r+0x7a>
 80119ee:	682b      	ldr	r3, [r5, #0]
 80119f0:	b903      	cbnz	r3, 80119f4 <__sflush_r+0x7c>
 80119f2:	6560      	str	r0, [r4, #84]	; 0x54
 80119f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119f6:	602f      	str	r7, [r5, #0]
 80119f8:	2900      	cmp	r1, #0
 80119fa:	d0ca      	beq.n	8011992 <__sflush_r+0x1a>
 80119fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a00:	4299      	cmp	r1, r3
 8011a02:	d002      	beq.n	8011a0a <__sflush_r+0x92>
 8011a04:	4628      	mov	r0, r5
 8011a06:	f7fe fd3f 	bl	8010488 <_free_r>
 8011a0a:	2000      	movs	r0, #0
 8011a0c:	6360      	str	r0, [r4, #52]	; 0x34
 8011a0e:	e7c1      	b.n	8011994 <__sflush_r+0x1c>
 8011a10:	6a21      	ldr	r1, [r4, #32]
 8011a12:	2301      	movs	r3, #1
 8011a14:	4628      	mov	r0, r5
 8011a16:	47b0      	blx	r6
 8011a18:	1c41      	adds	r1, r0, #1
 8011a1a:	d1c7      	bne.n	80119ac <__sflush_r+0x34>
 8011a1c:	682b      	ldr	r3, [r5, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d0c4      	beq.n	80119ac <__sflush_r+0x34>
 8011a22:	2b1d      	cmp	r3, #29
 8011a24:	d001      	beq.n	8011a2a <__sflush_r+0xb2>
 8011a26:	2b16      	cmp	r3, #22
 8011a28:	d101      	bne.n	8011a2e <__sflush_r+0xb6>
 8011a2a:	602f      	str	r7, [r5, #0]
 8011a2c:	e7b1      	b.n	8011992 <__sflush_r+0x1a>
 8011a2e:	89a3      	ldrh	r3, [r4, #12]
 8011a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a34:	81a3      	strh	r3, [r4, #12]
 8011a36:	e7ad      	b.n	8011994 <__sflush_r+0x1c>
 8011a38:	690f      	ldr	r7, [r1, #16]
 8011a3a:	2f00      	cmp	r7, #0
 8011a3c:	d0a9      	beq.n	8011992 <__sflush_r+0x1a>
 8011a3e:	0793      	lsls	r3, r2, #30
 8011a40:	680e      	ldr	r6, [r1, #0]
 8011a42:	bf08      	it	eq
 8011a44:	694b      	ldreq	r3, [r1, #20]
 8011a46:	600f      	str	r7, [r1, #0]
 8011a48:	bf18      	it	ne
 8011a4a:	2300      	movne	r3, #0
 8011a4c:	eba6 0807 	sub.w	r8, r6, r7
 8011a50:	608b      	str	r3, [r1, #8]
 8011a52:	f1b8 0f00 	cmp.w	r8, #0
 8011a56:	dd9c      	ble.n	8011992 <__sflush_r+0x1a>
 8011a58:	6a21      	ldr	r1, [r4, #32]
 8011a5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a5c:	4643      	mov	r3, r8
 8011a5e:	463a      	mov	r2, r7
 8011a60:	4628      	mov	r0, r5
 8011a62:	47b0      	blx	r6
 8011a64:	2800      	cmp	r0, #0
 8011a66:	dc06      	bgt.n	8011a76 <__sflush_r+0xfe>
 8011a68:	89a3      	ldrh	r3, [r4, #12]
 8011a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a6e:	81a3      	strh	r3, [r4, #12]
 8011a70:	f04f 30ff 	mov.w	r0, #4294967295
 8011a74:	e78e      	b.n	8011994 <__sflush_r+0x1c>
 8011a76:	4407      	add	r7, r0
 8011a78:	eba8 0800 	sub.w	r8, r8, r0
 8011a7c:	e7e9      	b.n	8011a52 <__sflush_r+0xda>
 8011a7e:	bf00      	nop
 8011a80:	20400001 	.word	0x20400001

08011a84 <_fflush_r>:
 8011a84:	b538      	push	{r3, r4, r5, lr}
 8011a86:	690b      	ldr	r3, [r1, #16]
 8011a88:	4605      	mov	r5, r0
 8011a8a:	460c      	mov	r4, r1
 8011a8c:	b913      	cbnz	r3, 8011a94 <_fflush_r+0x10>
 8011a8e:	2500      	movs	r5, #0
 8011a90:	4628      	mov	r0, r5
 8011a92:	bd38      	pop	{r3, r4, r5, pc}
 8011a94:	b118      	cbz	r0, 8011a9e <_fflush_r+0x1a>
 8011a96:	6983      	ldr	r3, [r0, #24]
 8011a98:	b90b      	cbnz	r3, 8011a9e <_fflush_r+0x1a>
 8011a9a:	f000 f887 	bl	8011bac <__sinit>
 8011a9e:	4b14      	ldr	r3, [pc, #80]	; (8011af0 <_fflush_r+0x6c>)
 8011aa0:	429c      	cmp	r4, r3
 8011aa2:	d11b      	bne.n	8011adc <_fflush_r+0x58>
 8011aa4:	686c      	ldr	r4, [r5, #4]
 8011aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d0ef      	beq.n	8011a8e <_fflush_r+0xa>
 8011aae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ab0:	07d0      	lsls	r0, r2, #31
 8011ab2:	d404      	bmi.n	8011abe <_fflush_r+0x3a>
 8011ab4:	0599      	lsls	r1, r3, #22
 8011ab6:	d402      	bmi.n	8011abe <_fflush_r+0x3a>
 8011ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011aba:	f000 fc84 	bl	80123c6 <__retarget_lock_acquire_recursive>
 8011abe:	4628      	mov	r0, r5
 8011ac0:	4621      	mov	r1, r4
 8011ac2:	f7ff ff59 	bl	8011978 <__sflush_r>
 8011ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ac8:	07da      	lsls	r2, r3, #31
 8011aca:	4605      	mov	r5, r0
 8011acc:	d4e0      	bmi.n	8011a90 <_fflush_r+0xc>
 8011ace:	89a3      	ldrh	r3, [r4, #12]
 8011ad0:	059b      	lsls	r3, r3, #22
 8011ad2:	d4dd      	bmi.n	8011a90 <_fflush_r+0xc>
 8011ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ad6:	f000 fc77 	bl	80123c8 <__retarget_lock_release_recursive>
 8011ada:	e7d9      	b.n	8011a90 <_fflush_r+0xc>
 8011adc:	4b05      	ldr	r3, [pc, #20]	; (8011af4 <_fflush_r+0x70>)
 8011ade:	429c      	cmp	r4, r3
 8011ae0:	d101      	bne.n	8011ae6 <_fflush_r+0x62>
 8011ae2:	68ac      	ldr	r4, [r5, #8]
 8011ae4:	e7df      	b.n	8011aa6 <_fflush_r+0x22>
 8011ae6:	4b04      	ldr	r3, [pc, #16]	; (8011af8 <_fflush_r+0x74>)
 8011ae8:	429c      	cmp	r4, r3
 8011aea:	bf08      	it	eq
 8011aec:	68ec      	ldreq	r4, [r5, #12]
 8011aee:	e7da      	b.n	8011aa6 <_fflush_r+0x22>
 8011af0:	080154a0 	.word	0x080154a0
 8011af4:	080154c0 	.word	0x080154c0
 8011af8:	08015480 	.word	0x08015480

08011afc <std>:
 8011afc:	2300      	movs	r3, #0
 8011afe:	b510      	push	{r4, lr}
 8011b00:	4604      	mov	r4, r0
 8011b02:	e9c0 3300 	strd	r3, r3, [r0]
 8011b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b0a:	6083      	str	r3, [r0, #8]
 8011b0c:	8181      	strh	r1, [r0, #12]
 8011b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8011b10:	81c2      	strh	r2, [r0, #14]
 8011b12:	6183      	str	r3, [r0, #24]
 8011b14:	4619      	mov	r1, r3
 8011b16:	2208      	movs	r2, #8
 8011b18:	305c      	adds	r0, #92	; 0x5c
 8011b1a:	f7fe fcad 	bl	8010478 <memset>
 8011b1e:	4b05      	ldr	r3, [pc, #20]	; (8011b34 <std+0x38>)
 8011b20:	6263      	str	r3, [r4, #36]	; 0x24
 8011b22:	4b05      	ldr	r3, [pc, #20]	; (8011b38 <std+0x3c>)
 8011b24:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b26:	4b05      	ldr	r3, [pc, #20]	; (8011b3c <std+0x40>)
 8011b28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b2a:	4b05      	ldr	r3, [pc, #20]	; (8011b40 <std+0x44>)
 8011b2c:	6224      	str	r4, [r4, #32]
 8011b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8011b30:	bd10      	pop	{r4, pc}
 8011b32:	bf00      	nop
 8011b34:	08010aa5 	.word	0x08010aa5
 8011b38:	08010ac7 	.word	0x08010ac7
 8011b3c:	08010aff 	.word	0x08010aff
 8011b40:	08010b23 	.word	0x08010b23

08011b44 <_cleanup_r>:
 8011b44:	4901      	ldr	r1, [pc, #4]	; (8011b4c <_cleanup_r+0x8>)
 8011b46:	f000 b8af 	b.w	8011ca8 <_fwalk_reent>
 8011b4a:	bf00      	nop
 8011b4c:	08011a85 	.word	0x08011a85

08011b50 <__sfmoreglue>:
 8011b50:	b570      	push	{r4, r5, r6, lr}
 8011b52:	1e4a      	subs	r2, r1, #1
 8011b54:	2568      	movs	r5, #104	; 0x68
 8011b56:	4355      	muls	r5, r2
 8011b58:	460e      	mov	r6, r1
 8011b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b5e:	f7fe fce3 	bl	8010528 <_malloc_r>
 8011b62:	4604      	mov	r4, r0
 8011b64:	b140      	cbz	r0, 8011b78 <__sfmoreglue+0x28>
 8011b66:	2100      	movs	r1, #0
 8011b68:	e9c0 1600 	strd	r1, r6, [r0]
 8011b6c:	300c      	adds	r0, #12
 8011b6e:	60a0      	str	r0, [r4, #8]
 8011b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011b74:	f7fe fc80 	bl	8010478 <memset>
 8011b78:	4620      	mov	r0, r4
 8011b7a:	bd70      	pop	{r4, r5, r6, pc}

08011b7c <__sfp_lock_acquire>:
 8011b7c:	4801      	ldr	r0, [pc, #4]	; (8011b84 <__sfp_lock_acquire+0x8>)
 8011b7e:	f000 bc22 	b.w	80123c6 <__retarget_lock_acquire_recursive>
 8011b82:	bf00      	nop
 8011b84:	200034d0 	.word	0x200034d0

08011b88 <__sfp_lock_release>:
 8011b88:	4801      	ldr	r0, [pc, #4]	; (8011b90 <__sfp_lock_release+0x8>)
 8011b8a:	f000 bc1d 	b.w	80123c8 <__retarget_lock_release_recursive>
 8011b8e:	bf00      	nop
 8011b90:	200034d0 	.word	0x200034d0

08011b94 <__sinit_lock_acquire>:
 8011b94:	4801      	ldr	r0, [pc, #4]	; (8011b9c <__sinit_lock_acquire+0x8>)
 8011b96:	f000 bc16 	b.w	80123c6 <__retarget_lock_acquire_recursive>
 8011b9a:	bf00      	nop
 8011b9c:	200034cb 	.word	0x200034cb

08011ba0 <__sinit_lock_release>:
 8011ba0:	4801      	ldr	r0, [pc, #4]	; (8011ba8 <__sinit_lock_release+0x8>)
 8011ba2:	f000 bc11 	b.w	80123c8 <__retarget_lock_release_recursive>
 8011ba6:	bf00      	nop
 8011ba8:	200034cb 	.word	0x200034cb

08011bac <__sinit>:
 8011bac:	b510      	push	{r4, lr}
 8011bae:	4604      	mov	r4, r0
 8011bb0:	f7ff fff0 	bl	8011b94 <__sinit_lock_acquire>
 8011bb4:	69a3      	ldr	r3, [r4, #24]
 8011bb6:	b11b      	cbz	r3, 8011bc0 <__sinit+0x14>
 8011bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bbc:	f7ff bff0 	b.w	8011ba0 <__sinit_lock_release>
 8011bc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011bc4:	6523      	str	r3, [r4, #80]	; 0x50
 8011bc6:	4b13      	ldr	r3, [pc, #76]	; (8011c14 <__sinit+0x68>)
 8011bc8:	4a13      	ldr	r2, [pc, #76]	; (8011c18 <__sinit+0x6c>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8011bce:	42a3      	cmp	r3, r4
 8011bd0:	bf04      	itt	eq
 8011bd2:	2301      	moveq	r3, #1
 8011bd4:	61a3      	streq	r3, [r4, #24]
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	f000 f820 	bl	8011c1c <__sfp>
 8011bdc:	6060      	str	r0, [r4, #4]
 8011bde:	4620      	mov	r0, r4
 8011be0:	f000 f81c 	bl	8011c1c <__sfp>
 8011be4:	60a0      	str	r0, [r4, #8]
 8011be6:	4620      	mov	r0, r4
 8011be8:	f000 f818 	bl	8011c1c <__sfp>
 8011bec:	2200      	movs	r2, #0
 8011bee:	60e0      	str	r0, [r4, #12]
 8011bf0:	2104      	movs	r1, #4
 8011bf2:	6860      	ldr	r0, [r4, #4]
 8011bf4:	f7ff ff82 	bl	8011afc <std>
 8011bf8:	68a0      	ldr	r0, [r4, #8]
 8011bfa:	2201      	movs	r2, #1
 8011bfc:	2109      	movs	r1, #9
 8011bfe:	f7ff ff7d 	bl	8011afc <std>
 8011c02:	68e0      	ldr	r0, [r4, #12]
 8011c04:	2202      	movs	r2, #2
 8011c06:	2112      	movs	r1, #18
 8011c08:	f7ff ff78 	bl	8011afc <std>
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	61a3      	str	r3, [r4, #24]
 8011c10:	e7d2      	b.n	8011bb8 <__sinit+0xc>
 8011c12:	bf00      	nop
 8011c14:	08015420 	.word	0x08015420
 8011c18:	08011b45 	.word	0x08011b45

08011c1c <__sfp>:
 8011c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1e:	4607      	mov	r7, r0
 8011c20:	f7ff ffac 	bl	8011b7c <__sfp_lock_acquire>
 8011c24:	4b1e      	ldr	r3, [pc, #120]	; (8011ca0 <__sfp+0x84>)
 8011c26:	681e      	ldr	r6, [r3, #0]
 8011c28:	69b3      	ldr	r3, [r6, #24]
 8011c2a:	b913      	cbnz	r3, 8011c32 <__sfp+0x16>
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	f7ff ffbd 	bl	8011bac <__sinit>
 8011c32:	3648      	adds	r6, #72	; 0x48
 8011c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c38:	3b01      	subs	r3, #1
 8011c3a:	d503      	bpl.n	8011c44 <__sfp+0x28>
 8011c3c:	6833      	ldr	r3, [r6, #0]
 8011c3e:	b30b      	cbz	r3, 8011c84 <__sfp+0x68>
 8011c40:	6836      	ldr	r6, [r6, #0]
 8011c42:	e7f7      	b.n	8011c34 <__sfp+0x18>
 8011c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c48:	b9d5      	cbnz	r5, 8011c80 <__sfp+0x64>
 8011c4a:	4b16      	ldr	r3, [pc, #88]	; (8011ca4 <__sfp+0x88>)
 8011c4c:	60e3      	str	r3, [r4, #12]
 8011c4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c52:	6665      	str	r5, [r4, #100]	; 0x64
 8011c54:	f000 fbb6 	bl	80123c4 <__retarget_lock_init_recursive>
 8011c58:	f7ff ff96 	bl	8011b88 <__sfp_lock_release>
 8011c5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011c60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011c64:	6025      	str	r5, [r4, #0]
 8011c66:	61a5      	str	r5, [r4, #24]
 8011c68:	2208      	movs	r2, #8
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011c70:	f7fe fc02 	bl	8010478 <memset>
 8011c74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011c78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c80:	3468      	adds	r4, #104	; 0x68
 8011c82:	e7d9      	b.n	8011c38 <__sfp+0x1c>
 8011c84:	2104      	movs	r1, #4
 8011c86:	4638      	mov	r0, r7
 8011c88:	f7ff ff62 	bl	8011b50 <__sfmoreglue>
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	6030      	str	r0, [r6, #0]
 8011c90:	2800      	cmp	r0, #0
 8011c92:	d1d5      	bne.n	8011c40 <__sfp+0x24>
 8011c94:	f7ff ff78 	bl	8011b88 <__sfp_lock_release>
 8011c98:	230c      	movs	r3, #12
 8011c9a:	603b      	str	r3, [r7, #0]
 8011c9c:	e7ee      	b.n	8011c7c <__sfp+0x60>
 8011c9e:	bf00      	nop
 8011ca0:	08015420 	.word	0x08015420
 8011ca4:	ffff0001 	.word	0xffff0001

08011ca8 <_fwalk_reent>:
 8011ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cac:	4606      	mov	r6, r0
 8011cae:	4688      	mov	r8, r1
 8011cb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011cb4:	2700      	movs	r7, #0
 8011cb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cba:	f1b9 0901 	subs.w	r9, r9, #1
 8011cbe:	d505      	bpl.n	8011ccc <_fwalk_reent+0x24>
 8011cc0:	6824      	ldr	r4, [r4, #0]
 8011cc2:	2c00      	cmp	r4, #0
 8011cc4:	d1f7      	bne.n	8011cb6 <_fwalk_reent+0xe>
 8011cc6:	4638      	mov	r0, r7
 8011cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ccc:	89ab      	ldrh	r3, [r5, #12]
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d907      	bls.n	8011ce2 <_fwalk_reent+0x3a>
 8011cd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	d003      	beq.n	8011ce2 <_fwalk_reent+0x3a>
 8011cda:	4629      	mov	r1, r5
 8011cdc:	4630      	mov	r0, r6
 8011cde:	47c0      	blx	r8
 8011ce0:	4307      	orrs	r7, r0
 8011ce2:	3568      	adds	r5, #104	; 0x68
 8011ce4:	e7e9      	b.n	8011cba <_fwalk_reent+0x12>

08011ce6 <rshift>:
 8011ce6:	6903      	ldr	r3, [r0, #16]
 8011ce8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cf0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011cf4:	f100 0414 	add.w	r4, r0, #20
 8011cf8:	dd45      	ble.n	8011d86 <rshift+0xa0>
 8011cfa:	f011 011f 	ands.w	r1, r1, #31
 8011cfe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011d02:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011d06:	d10c      	bne.n	8011d22 <rshift+0x3c>
 8011d08:	f100 0710 	add.w	r7, r0, #16
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	42b1      	cmp	r1, r6
 8011d10:	d334      	bcc.n	8011d7c <rshift+0x96>
 8011d12:	1a9b      	subs	r3, r3, r2
 8011d14:	009b      	lsls	r3, r3, #2
 8011d16:	1eea      	subs	r2, r5, #3
 8011d18:	4296      	cmp	r6, r2
 8011d1a:	bf38      	it	cc
 8011d1c:	2300      	movcc	r3, #0
 8011d1e:	4423      	add	r3, r4
 8011d20:	e015      	b.n	8011d4e <rshift+0x68>
 8011d22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011d26:	f1c1 0820 	rsb	r8, r1, #32
 8011d2a:	40cf      	lsrs	r7, r1
 8011d2c:	f105 0e04 	add.w	lr, r5, #4
 8011d30:	46a1      	mov	r9, r4
 8011d32:	4576      	cmp	r6, lr
 8011d34:	46f4      	mov	ip, lr
 8011d36:	d815      	bhi.n	8011d64 <rshift+0x7e>
 8011d38:	1a9b      	subs	r3, r3, r2
 8011d3a:	009a      	lsls	r2, r3, #2
 8011d3c:	3a04      	subs	r2, #4
 8011d3e:	3501      	adds	r5, #1
 8011d40:	42ae      	cmp	r6, r5
 8011d42:	bf38      	it	cc
 8011d44:	2200      	movcc	r2, #0
 8011d46:	18a3      	adds	r3, r4, r2
 8011d48:	50a7      	str	r7, [r4, r2]
 8011d4a:	b107      	cbz	r7, 8011d4e <rshift+0x68>
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	1b1a      	subs	r2, r3, r4
 8011d50:	42a3      	cmp	r3, r4
 8011d52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011d56:	bf08      	it	eq
 8011d58:	2300      	moveq	r3, #0
 8011d5a:	6102      	str	r2, [r0, #16]
 8011d5c:	bf08      	it	eq
 8011d5e:	6143      	streq	r3, [r0, #20]
 8011d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d64:	f8dc c000 	ldr.w	ip, [ip]
 8011d68:	fa0c fc08 	lsl.w	ip, ip, r8
 8011d6c:	ea4c 0707 	orr.w	r7, ip, r7
 8011d70:	f849 7b04 	str.w	r7, [r9], #4
 8011d74:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011d78:	40cf      	lsrs	r7, r1
 8011d7a:	e7da      	b.n	8011d32 <rshift+0x4c>
 8011d7c:	f851 cb04 	ldr.w	ip, [r1], #4
 8011d80:	f847 cf04 	str.w	ip, [r7, #4]!
 8011d84:	e7c3      	b.n	8011d0e <rshift+0x28>
 8011d86:	4623      	mov	r3, r4
 8011d88:	e7e1      	b.n	8011d4e <rshift+0x68>

08011d8a <__hexdig_fun>:
 8011d8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011d8e:	2b09      	cmp	r3, #9
 8011d90:	d802      	bhi.n	8011d98 <__hexdig_fun+0xe>
 8011d92:	3820      	subs	r0, #32
 8011d94:	b2c0      	uxtb	r0, r0
 8011d96:	4770      	bx	lr
 8011d98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011d9c:	2b05      	cmp	r3, #5
 8011d9e:	d801      	bhi.n	8011da4 <__hexdig_fun+0x1a>
 8011da0:	3847      	subs	r0, #71	; 0x47
 8011da2:	e7f7      	b.n	8011d94 <__hexdig_fun+0xa>
 8011da4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011da8:	2b05      	cmp	r3, #5
 8011daa:	d801      	bhi.n	8011db0 <__hexdig_fun+0x26>
 8011dac:	3827      	subs	r0, #39	; 0x27
 8011dae:	e7f1      	b.n	8011d94 <__hexdig_fun+0xa>
 8011db0:	2000      	movs	r0, #0
 8011db2:	4770      	bx	lr

08011db4 <__gethex>:
 8011db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db8:	ed2d 8b02 	vpush	{d8}
 8011dbc:	b089      	sub	sp, #36	; 0x24
 8011dbe:	ee08 0a10 	vmov	s16, r0
 8011dc2:	9304      	str	r3, [sp, #16]
 8011dc4:	4bbc      	ldr	r3, [pc, #752]	; (80120b8 <__gethex+0x304>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	9301      	str	r3, [sp, #4]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	468b      	mov	fp, r1
 8011dce:	4690      	mov	r8, r2
 8011dd0:	f7ee fa10 	bl	80001f4 <strlen>
 8011dd4:	9b01      	ldr	r3, [sp, #4]
 8011dd6:	f8db 2000 	ldr.w	r2, [fp]
 8011dda:	4403      	add	r3, r0
 8011ddc:	4682      	mov	sl, r0
 8011dde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011de2:	9305      	str	r3, [sp, #20]
 8011de4:	1c93      	adds	r3, r2, #2
 8011de6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011dea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011dee:	32fe      	adds	r2, #254	; 0xfe
 8011df0:	18d1      	adds	r1, r2, r3
 8011df2:	461f      	mov	r7, r3
 8011df4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011df8:	9100      	str	r1, [sp, #0]
 8011dfa:	2830      	cmp	r0, #48	; 0x30
 8011dfc:	d0f8      	beq.n	8011df0 <__gethex+0x3c>
 8011dfe:	f7ff ffc4 	bl	8011d8a <__hexdig_fun>
 8011e02:	4604      	mov	r4, r0
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d13a      	bne.n	8011e7e <__gethex+0xca>
 8011e08:	9901      	ldr	r1, [sp, #4]
 8011e0a:	4652      	mov	r2, sl
 8011e0c:	4638      	mov	r0, r7
 8011e0e:	f7fe fe8c 	bl	8010b2a <strncmp>
 8011e12:	4605      	mov	r5, r0
 8011e14:	2800      	cmp	r0, #0
 8011e16:	d168      	bne.n	8011eea <__gethex+0x136>
 8011e18:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011e1c:	eb07 060a 	add.w	r6, r7, sl
 8011e20:	f7ff ffb3 	bl	8011d8a <__hexdig_fun>
 8011e24:	2800      	cmp	r0, #0
 8011e26:	d062      	beq.n	8011eee <__gethex+0x13a>
 8011e28:	4633      	mov	r3, r6
 8011e2a:	7818      	ldrb	r0, [r3, #0]
 8011e2c:	2830      	cmp	r0, #48	; 0x30
 8011e2e:	461f      	mov	r7, r3
 8011e30:	f103 0301 	add.w	r3, r3, #1
 8011e34:	d0f9      	beq.n	8011e2a <__gethex+0x76>
 8011e36:	f7ff ffa8 	bl	8011d8a <__hexdig_fun>
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	fab0 f480 	clz	r4, r0
 8011e40:	0964      	lsrs	r4, r4, #5
 8011e42:	4635      	mov	r5, r6
 8011e44:	9300      	str	r3, [sp, #0]
 8011e46:	463a      	mov	r2, r7
 8011e48:	4616      	mov	r6, r2
 8011e4a:	3201      	adds	r2, #1
 8011e4c:	7830      	ldrb	r0, [r6, #0]
 8011e4e:	f7ff ff9c 	bl	8011d8a <__hexdig_fun>
 8011e52:	2800      	cmp	r0, #0
 8011e54:	d1f8      	bne.n	8011e48 <__gethex+0x94>
 8011e56:	9901      	ldr	r1, [sp, #4]
 8011e58:	4652      	mov	r2, sl
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	f7fe fe65 	bl	8010b2a <strncmp>
 8011e60:	b980      	cbnz	r0, 8011e84 <__gethex+0xd0>
 8011e62:	b94d      	cbnz	r5, 8011e78 <__gethex+0xc4>
 8011e64:	eb06 050a 	add.w	r5, r6, sl
 8011e68:	462a      	mov	r2, r5
 8011e6a:	4616      	mov	r6, r2
 8011e6c:	3201      	adds	r2, #1
 8011e6e:	7830      	ldrb	r0, [r6, #0]
 8011e70:	f7ff ff8b 	bl	8011d8a <__hexdig_fun>
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d1f8      	bne.n	8011e6a <__gethex+0xb6>
 8011e78:	1bad      	subs	r5, r5, r6
 8011e7a:	00ad      	lsls	r5, r5, #2
 8011e7c:	e004      	b.n	8011e88 <__gethex+0xd4>
 8011e7e:	2400      	movs	r4, #0
 8011e80:	4625      	mov	r5, r4
 8011e82:	e7e0      	b.n	8011e46 <__gethex+0x92>
 8011e84:	2d00      	cmp	r5, #0
 8011e86:	d1f7      	bne.n	8011e78 <__gethex+0xc4>
 8011e88:	7833      	ldrb	r3, [r6, #0]
 8011e8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011e8e:	2b50      	cmp	r3, #80	; 0x50
 8011e90:	d13b      	bne.n	8011f0a <__gethex+0x156>
 8011e92:	7873      	ldrb	r3, [r6, #1]
 8011e94:	2b2b      	cmp	r3, #43	; 0x2b
 8011e96:	d02c      	beq.n	8011ef2 <__gethex+0x13e>
 8011e98:	2b2d      	cmp	r3, #45	; 0x2d
 8011e9a:	d02e      	beq.n	8011efa <__gethex+0x146>
 8011e9c:	1c71      	adds	r1, r6, #1
 8011e9e:	f04f 0900 	mov.w	r9, #0
 8011ea2:	7808      	ldrb	r0, [r1, #0]
 8011ea4:	f7ff ff71 	bl	8011d8a <__hexdig_fun>
 8011ea8:	1e43      	subs	r3, r0, #1
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	2b18      	cmp	r3, #24
 8011eae:	d82c      	bhi.n	8011f0a <__gethex+0x156>
 8011eb0:	f1a0 0210 	sub.w	r2, r0, #16
 8011eb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011eb8:	f7ff ff67 	bl	8011d8a <__hexdig_fun>
 8011ebc:	1e43      	subs	r3, r0, #1
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	2b18      	cmp	r3, #24
 8011ec2:	d91d      	bls.n	8011f00 <__gethex+0x14c>
 8011ec4:	f1b9 0f00 	cmp.w	r9, #0
 8011ec8:	d000      	beq.n	8011ecc <__gethex+0x118>
 8011eca:	4252      	negs	r2, r2
 8011ecc:	4415      	add	r5, r2
 8011ece:	f8cb 1000 	str.w	r1, [fp]
 8011ed2:	b1e4      	cbz	r4, 8011f0e <__gethex+0x15a>
 8011ed4:	9b00      	ldr	r3, [sp, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	bf14      	ite	ne
 8011eda:	2700      	movne	r7, #0
 8011edc:	2706      	moveq	r7, #6
 8011ede:	4638      	mov	r0, r7
 8011ee0:	b009      	add	sp, #36	; 0x24
 8011ee2:	ecbd 8b02 	vpop	{d8}
 8011ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eea:	463e      	mov	r6, r7
 8011eec:	4625      	mov	r5, r4
 8011eee:	2401      	movs	r4, #1
 8011ef0:	e7ca      	b.n	8011e88 <__gethex+0xd4>
 8011ef2:	f04f 0900 	mov.w	r9, #0
 8011ef6:	1cb1      	adds	r1, r6, #2
 8011ef8:	e7d3      	b.n	8011ea2 <__gethex+0xee>
 8011efa:	f04f 0901 	mov.w	r9, #1
 8011efe:	e7fa      	b.n	8011ef6 <__gethex+0x142>
 8011f00:	230a      	movs	r3, #10
 8011f02:	fb03 0202 	mla	r2, r3, r2, r0
 8011f06:	3a10      	subs	r2, #16
 8011f08:	e7d4      	b.n	8011eb4 <__gethex+0x100>
 8011f0a:	4631      	mov	r1, r6
 8011f0c:	e7df      	b.n	8011ece <__gethex+0x11a>
 8011f0e:	1bf3      	subs	r3, r6, r7
 8011f10:	3b01      	subs	r3, #1
 8011f12:	4621      	mov	r1, r4
 8011f14:	2b07      	cmp	r3, #7
 8011f16:	dc0b      	bgt.n	8011f30 <__gethex+0x17c>
 8011f18:	ee18 0a10 	vmov	r0, s16
 8011f1c:	f000 faea 	bl	80124f4 <_Balloc>
 8011f20:	4604      	mov	r4, r0
 8011f22:	b940      	cbnz	r0, 8011f36 <__gethex+0x182>
 8011f24:	4b65      	ldr	r3, [pc, #404]	; (80120bc <__gethex+0x308>)
 8011f26:	4602      	mov	r2, r0
 8011f28:	21de      	movs	r1, #222	; 0xde
 8011f2a:	4865      	ldr	r0, [pc, #404]	; (80120c0 <__gethex+0x30c>)
 8011f2c:	f001 fc46 	bl	80137bc <__assert_func>
 8011f30:	3101      	adds	r1, #1
 8011f32:	105b      	asrs	r3, r3, #1
 8011f34:	e7ee      	b.n	8011f14 <__gethex+0x160>
 8011f36:	f100 0914 	add.w	r9, r0, #20
 8011f3a:	f04f 0b00 	mov.w	fp, #0
 8011f3e:	f1ca 0301 	rsb	r3, sl, #1
 8011f42:	f8cd 9008 	str.w	r9, [sp, #8]
 8011f46:	f8cd b000 	str.w	fp, [sp]
 8011f4a:	9306      	str	r3, [sp, #24]
 8011f4c:	42b7      	cmp	r7, r6
 8011f4e:	d340      	bcc.n	8011fd2 <__gethex+0x21e>
 8011f50:	9802      	ldr	r0, [sp, #8]
 8011f52:	9b00      	ldr	r3, [sp, #0]
 8011f54:	f840 3b04 	str.w	r3, [r0], #4
 8011f58:	eba0 0009 	sub.w	r0, r0, r9
 8011f5c:	1080      	asrs	r0, r0, #2
 8011f5e:	0146      	lsls	r6, r0, #5
 8011f60:	6120      	str	r0, [r4, #16]
 8011f62:	4618      	mov	r0, r3
 8011f64:	f000 fbbc 	bl	80126e0 <__hi0bits>
 8011f68:	1a30      	subs	r0, r6, r0
 8011f6a:	f8d8 6000 	ldr.w	r6, [r8]
 8011f6e:	42b0      	cmp	r0, r6
 8011f70:	dd63      	ble.n	801203a <__gethex+0x286>
 8011f72:	1b87      	subs	r7, r0, r6
 8011f74:	4639      	mov	r1, r7
 8011f76:	4620      	mov	r0, r4
 8011f78:	f000 ff56 	bl	8012e28 <__any_on>
 8011f7c:	4682      	mov	sl, r0
 8011f7e:	b1a8      	cbz	r0, 8011fac <__gethex+0x1f8>
 8011f80:	1e7b      	subs	r3, r7, #1
 8011f82:	1159      	asrs	r1, r3, #5
 8011f84:	f003 021f 	and.w	r2, r3, #31
 8011f88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011f8c:	f04f 0a01 	mov.w	sl, #1
 8011f90:	fa0a f202 	lsl.w	r2, sl, r2
 8011f94:	420a      	tst	r2, r1
 8011f96:	d009      	beq.n	8011fac <__gethex+0x1f8>
 8011f98:	4553      	cmp	r3, sl
 8011f9a:	dd05      	ble.n	8011fa8 <__gethex+0x1f4>
 8011f9c:	1eb9      	subs	r1, r7, #2
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f000 ff42 	bl	8012e28 <__any_on>
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	d145      	bne.n	8012034 <__gethex+0x280>
 8011fa8:	f04f 0a02 	mov.w	sl, #2
 8011fac:	4639      	mov	r1, r7
 8011fae:	4620      	mov	r0, r4
 8011fb0:	f7ff fe99 	bl	8011ce6 <rshift>
 8011fb4:	443d      	add	r5, r7
 8011fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011fba:	42ab      	cmp	r3, r5
 8011fbc:	da4c      	bge.n	8012058 <__gethex+0x2a4>
 8011fbe:	ee18 0a10 	vmov	r0, s16
 8011fc2:	4621      	mov	r1, r4
 8011fc4:	f000 fad6 	bl	8012574 <_Bfree>
 8011fc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011fca:	2300      	movs	r3, #0
 8011fcc:	6013      	str	r3, [r2, #0]
 8011fce:	27a3      	movs	r7, #163	; 0xa3
 8011fd0:	e785      	b.n	8011ede <__gethex+0x12a>
 8011fd2:	1e73      	subs	r3, r6, #1
 8011fd4:	9a05      	ldr	r2, [sp, #20]
 8011fd6:	9303      	str	r3, [sp, #12]
 8011fd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d019      	beq.n	8012014 <__gethex+0x260>
 8011fe0:	f1bb 0f20 	cmp.w	fp, #32
 8011fe4:	d107      	bne.n	8011ff6 <__gethex+0x242>
 8011fe6:	9b02      	ldr	r3, [sp, #8]
 8011fe8:	9a00      	ldr	r2, [sp, #0]
 8011fea:	f843 2b04 	str.w	r2, [r3], #4
 8011fee:	9302      	str	r3, [sp, #8]
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	9300      	str	r3, [sp, #0]
 8011ff4:	469b      	mov	fp, r3
 8011ff6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011ffa:	f7ff fec6 	bl	8011d8a <__hexdig_fun>
 8011ffe:	9b00      	ldr	r3, [sp, #0]
 8012000:	f000 000f 	and.w	r0, r0, #15
 8012004:	fa00 f00b 	lsl.w	r0, r0, fp
 8012008:	4303      	orrs	r3, r0
 801200a:	9300      	str	r3, [sp, #0]
 801200c:	f10b 0b04 	add.w	fp, fp, #4
 8012010:	9b03      	ldr	r3, [sp, #12]
 8012012:	e00d      	b.n	8012030 <__gethex+0x27c>
 8012014:	9b03      	ldr	r3, [sp, #12]
 8012016:	9a06      	ldr	r2, [sp, #24]
 8012018:	4413      	add	r3, r2
 801201a:	42bb      	cmp	r3, r7
 801201c:	d3e0      	bcc.n	8011fe0 <__gethex+0x22c>
 801201e:	4618      	mov	r0, r3
 8012020:	9901      	ldr	r1, [sp, #4]
 8012022:	9307      	str	r3, [sp, #28]
 8012024:	4652      	mov	r2, sl
 8012026:	f7fe fd80 	bl	8010b2a <strncmp>
 801202a:	9b07      	ldr	r3, [sp, #28]
 801202c:	2800      	cmp	r0, #0
 801202e:	d1d7      	bne.n	8011fe0 <__gethex+0x22c>
 8012030:	461e      	mov	r6, r3
 8012032:	e78b      	b.n	8011f4c <__gethex+0x198>
 8012034:	f04f 0a03 	mov.w	sl, #3
 8012038:	e7b8      	b.n	8011fac <__gethex+0x1f8>
 801203a:	da0a      	bge.n	8012052 <__gethex+0x29e>
 801203c:	1a37      	subs	r7, r6, r0
 801203e:	4621      	mov	r1, r4
 8012040:	ee18 0a10 	vmov	r0, s16
 8012044:	463a      	mov	r2, r7
 8012046:	f000 fcb1 	bl	80129ac <__lshift>
 801204a:	1bed      	subs	r5, r5, r7
 801204c:	4604      	mov	r4, r0
 801204e:	f100 0914 	add.w	r9, r0, #20
 8012052:	f04f 0a00 	mov.w	sl, #0
 8012056:	e7ae      	b.n	8011fb6 <__gethex+0x202>
 8012058:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801205c:	42a8      	cmp	r0, r5
 801205e:	dd72      	ble.n	8012146 <__gethex+0x392>
 8012060:	1b45      	subs	r5, r0, r5
 8012062:	42ae      	cmp	r6, r5
 8012064:	dc36      	bgt.n	80120d4 <__gethex+0x320>
 8012066:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801206a:	2b02      	cmp	r3, #2
 801206c:	d02a      	beq.n	80120c4 <__gethex+0x310>
 801206e:	2b03      	cmp	r3, #3
 8012070:	d02c      	beq.n	80120cc <__gethex+0x318>
 8012072:	2b01      	cmp	r3, #1
 8012074:	d115      	bne.n	80120a2 <__gethex+0x2ee>
 8012076:	42ae      	cmp	r6, r5
 8012078:	d113      	bne.n	80120a2 <__gethex+0x2ee>
 801207a:	2e01      	cmp	r6, #1
 801207c:	d10b      	bne.n	8012096 <__gethex+0x2e2>
 801207e:	9a04      	ldr	r2, [sp, #16]
 8012080:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012084:	6013      	str	r3, [r2, #0]
 8012086:	2301      	movs	r3, #1
 8012088:	6123      	str	r3, [r4, #16]
 801208a:	f8c9 3000 	str.w	r3, [r9]
 801208e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012090:	2762      	movs	r7, #98	; 0x62
 8012092:	601c      	str	r4, [r3, #0]
 8012094:	e723      	b.n	8011ede <__gethex+0x12a>
 8012096:	1e71      	subs	r1, r6, #1
 8012098:	4620      	mov	r0, r4
 801209a:	f000 fec5 	bl	8012e28 <__any_on>
 801209e:	2800      	cmp	r0, #0
 80120a0:	d1ed      	bne.n	801207e <__gethex+0x2ca>
 80120a2:	ee18 0a10 	vmov	r0, s16
 80120a6:	4621      	mov	r1, r4
 80120a8:	f000 fa64 	bl	8012574 <_Bfree>
 80120ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80120ae:	2300      	movs	r3, #0
 80120b0:	6013      	str	r3, [r2, #0]
 80120b2:	2750      	movs	r7, #80	; 0x50
 80120b4:	e713      	b.n	8011ede <__gethex+0x12a>
 80120b6:	bf00      	nop
 80120b8:	0801555c 	.word	0x0801555c
 80120bc:	080154e0 	.word	0x080154e0
 80120c0:	080154f1 	.word	0x080154f1
 80120c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d1eb      	bne.n	80120a2 <__gethex+0x2ee>
 80120ca:	e7d8      	b.n	801207e <__gethex+0x2ca>
 80120cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1d5      	bne.n	801207e <__gethex+0x2ca>
 80120d2:	e7e6      	b.n	80120a2 <__gethex+0x2ee>
 80120d4:	1e6f      	subs	r7, r5, #1
 80120d6:	f1ba 0f00 	cmp.w	sl, #0
 80120da:	d131      	bne.n	8012140 <__gethex+0x38c>
 80120dc:	b127      	cbz	r7, 80120e8 <__gethex+0x334>
 80120de:	4639      	mov	r1, r7
 80120e0:	4620      	mov	r0, r4
 80120e2:	f000 fea1 	bl	8012e28 <__any_on>
 80120e6:	4682      	mov	sl, r0
 80120e8:	117b      	asrs	r3, r7, #5
 80120ea:	2101      	movs	r1, #1
 80120ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80120f0:	f007 071f 	and.w	r7, r7, #31
 80120f4:	fa01 f707 	lsl.w	r7, r1, r7
 80120f8:	421f      	tst	r7, r3
 80120fa:	4629      	mov	r1, r5
 80120fc:	4620      	mov	r0, r4
 80120fe:	bf18      	it	ne
 8012100:	f04a 0a02 	orrne.w	sl, sl, #2
 8012104:	1b76      	subs	r6, r6, r5
 8012106:	f7ff fdee 	bl	8011ce6 <rshift>
 801210a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801210e:	2702      	movs	r7, #2
 8012110:	f1ba 0f00 	cmp.w	sl, #0
 8012114:	d048      	beq.n	80121a8 <__gethex+0x3f4>
 8012116:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801211a:	2b02      	cmp	r3, #2
 801211c:	d015      	beq.n	801214a <__gethex+0x396>
 801211e:	2b03      	cmp	r3, #3
 8012120:	d017      	beq.n	8012152 <__gethex+0x39e>
 8012122:	2b01      	cmp	r3, #1
 8012124:	d109      	bne.n	801213a <__gethex+0x386>
 8012126:	f01a 0f02 	tst.w	sl, #2
 801212a:	d006      	beq.n	801213a <__gethex+0x386>
 801212c:	f8d9 0000 	ldr.w	r0, [r9]
 8012130:	ea4a 0a00 	orr.w	sl, sl, r0
 8012134:	f01a 0f01 	tst.w	sl, #1
 8012138:	d10e      	bne.n	8012158 <__gethex+0x3a4>
 801213a:	f047 0710 	orr.w	r7, r7, #16
 801213e:	e033      	b.n	80121a8 <__gethex+0x3f4>
 8012140:	f04f 0a01 	mov.w	sl, #1
 8012144:	e7d0      	b.n	80120e8 <__gethex+0x334>
 8012146:	2701      	movs	r7, #1
 8012148:	e7e2      	b.n	8012110 <__gethex+0x35c>
 801214a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801214c:	f1c3 0301 	rsb	r3, r3, #1
 8012150:	9315      	str	r3, [sp, #84]	; 0x54
 8012152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012154:	2b00      	cmp	r3, #0
 8012156:	d0f0      	beq.n	801213a <__gethex+0x386>
 8012158:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801215c:	f104 0314 	add.w	r3, r4, #20
 8012160:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012164:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012168:	f04f 0c00 	mov.w	ip, #0
 801216c:	4618      	mov	r0, r3
 801216e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012172:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012176:	d01c      	beq.n	80121b2 <__gethex+0x3fe>
 8012178:	3201      	adds	r2, #1
 801217a:	6002      	str	r2, [r0, #0]
 801217c:	2f02      	cmp	r7, #2
 801217e:	f104 0314 	add.w	r3, r4, #20
 8012182:	d13f      	bne.n	8012204 <__gethex+0x450>
 8012184:	f8d8 2000 	ldr.w	r2, [r8]
 8012188:	3a01      	subs	r2, #1
 801218a:	42b2      	cmp	r2, r6
 801218c:	d10a      	bne.n	80121a4 <__gethex+0x3f0>
 801218e:	1171      	asrs	r1, r6, #5
 8012190:	2201      	movs	r2, #1
 8012192:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012196:	f006 061f 	and.w	r6, r6, #31
 801219a:	fa02 f606 	lsl.w	r6, r2, r6
 801219e:	421e      	tst	r6, r3
 80121a0:	bf18      	it	ne
 80121a2:	4617      	movne	r7, r2
 80121a4:	f047 0720 	orr.w	r7, r7, #32
 80121a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80121aa:	601c      	str	r4, [r3, #0]
 80121ac:	9b04      	ldr	r3, [sp, #16]
 80121ae:	601d      	str	r5, [r3, #0]
 80121b0:	e695      	b.n	8011ede <__gethex+0x12a>
 80121b2:	4299      	cmp	r1, r3
 80121b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80121b8:	d8d8      	bhi.n	801216c <__gethex+0x3b8>
 80121ba:	68a3      	ldr	r3, [r4, #8]
 80121bc:	459b      	cmp	fp, r3
 80121be:	db19      	blt.n	80121f4 <__gethex+0x440>
 80121c0:	6861      	ldr	r1, [r4, #4]
 80121c2:	ee18 0a10 	vmov	r0, s16
 80121c6:	3101      	adds	r1, #1
 80121c8:	f000 f994 	bl	80124f4 <_Balloc>
 80121cc:	4681      	mov	r9, r0
 80121ce:	b918      	cbnz	r0, 80121d8 <__gethex+0x424>
 80121d0:	4b1a      	ldr	r3, [pc, #104]	; (801223c <__gethex+0x488>)
 80121d2:	4602      	mov	r2, r0
 80121d4:	2184      	movs	r1, #132	; 0x84
 80121d6:	e6a8      	b.n	8011f2a <__gethex+0x176>
 80121d8:	6922      	ldr	r2, [r4, #16]
 80121da:	3202      	adds	r2, #2
 80121dc:	f104 010c 	add.w	r1, r4, #12
 80121e0:	0092      	lsls	r2, r2, #2
 80121e2:	300c      	adds	r0, #12
 80121e4:	f7fe f93a 	bl	801045c <memcpy>
 80121e8:	4621      	mov	r1, r4
 80121ea:	ee18 0a10 	vmov	r0, s16
 80121ee:	f000 f9c1 	bl	8012574 <_Bfree>
 80121f2:	464c      	mov	r4, r9
 80121f4:	6923      	ldr	r3, [r4, #16]
 80121f6:	1c5a      	adds	r2, r3, #1
 80121f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80121fc:	6122      	str	r2, [r4, #16]
 80121fe:	2201      	movs	r2, #1
 8012200:	615a      	str	r2, [r3, #20]
 8012202:	e7bb      	b.n	801217c <__gethex+0x3c8>
 8012204:	6922      	ldr	r2, [r4, #16]
 8012206:	455a      	cmp	r2, fp
 8012208:	dd0b      	ble.n	8012222 <__gethex+0x46e>
 801220a:	2101      	movs	r1, #1
 801220c:	4620      	mov	r0, r4
 801220e:	f7ff fd6a 	bl	8011ce6 <rshift>
 8012212:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012216:	3501      	adds	r5, #1
 8012218:	42ab      	cmp	r3, r5
 801221a:	f6ff aed0 	blt.w	8011fbe <__gethex+0x20a>
 801221e:	2701      	movs	r7, #1
 8012220:	e7c0      	b.n	80121a4 <__gethex+0x3f0>
 8012222:	f016 061f 	ands.w	r6, r6, #31
 8012226:	d0fa      	beq.n	801221e <__gethex+0x46a>
 8012228:	449a      	add	sl, r3
 801222a:	f1c6 0620 	rsb	r6, r6, #32
 801222e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012232:	f000 fa55 	bl	80126e0 <__hi0bits>
 8012236:	42b0      	cmp	r0, r6
 8012238:	dbe7      	blt.n	801220a <__gethex+0x456>
 801223a:	e7f0      	b.n	801221e <__gethex+0x46a>
 801223c:	080154e0 	.word	0x080154e0

08012240 <L_shift>:
 8012240:	f1c2 0208 	rsb	r2, r2, #8
 8012244:	0092      	lsls	r2, r2, #2
 8012246:	b570      	push	{r4, r5, r6, lr}
 8012248:	f1c2 0620 	rsb	r6, r2, #32
 801224c:	6843      	ldr	r3, [r0, #4]
 801224e:	6804      	ldr	r4, [r0, #0]
 8012250:	fa03 f506 	lsl.w	r5, r3, r6
 8012254:	432c      	orrs	r4, r5
 8012256:	40d3      	lsrs	r3, r2
 8012258:	6004      	str	r4, [r0, #0]
 801225a:	f840 3f04 	str.w	r3, [r0, #4]!
 801225e:	4288      	cmp	r0, r1
 8012260:	d3f4      	bcc.n	801224c <L_shift+0xc>
 8012262:	bd70      	pop	{r4, r5, r6, pc}

08012264 <__match>:
 8012264:	b530      	push	{r4, r5, lr}
 8012266:	6803      	ldr	r3, [r0, #0]
 8012268:	3301      	adds	r3, #1
 801226a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801226e:	b914      	cbnz	r4, 8012276 <__match+0x12>
 8012270:	6003      	str	r3, [r0, #0]
 8012272:	2001      	movs	r0, #1
 8012274:	bd30      	pop	{r4, r5, pc}
 8012276:	f813 2b01 	ldrb.w	r2, [r3], #1
 801227a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801227e:	2d19      	cmp	r5, #25
 8012280:	bf98      	it	ls
 8012282:	3220      	addls	r2, #32
 8012284:	42a2      	cmp	r2, r4
 8012286:	d0f0      	beq.n	801226a <__match+0x6>
 8012288:	2000      	movs	r0, #0
 801228a:	e7f3      	b.n	8012274 <__match+0x10>

0801228c <__hexnan>:
 801228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012290:	680b      	ldr	r3, [r1, #0]
 8012292:	6801      	ldr	r1, [r0, #0]
 8012294:	115e      	asrs	r6, r3, #5
 8012296:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801229a:	f013 031f 	ands.w	r3, r3, #31
 801229e:	b087      	sub	sp, #28
 80122a0:	bf18      	it	ne
 80122a2:	3604      	addne	r6, #4
 80122a4:	2500      	movs	r5, #0
 80122a6:	1f37      	subs	r7, r6, #4
 80122a8:	4682      	mov	sl, r0
 80122aa:	4690      	mov	r8, r2
 80122ac:	9301      	str	r3, [sp, #4]
 80122ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80122b2:	46b9      	mov	r9, r7
 80122b4:	463c      	mov	r4, r7
 80122b6:	9502      	str	r5, [sp, #8]
 80122b8:	46ab      	mov	fp, r5
 80122ba:	784a      	ldrb	r2, [r1, #1]
 80122bc:	1c4b      	adds	r3, r1, #1
 80122be:	9303      	str	r3, [sp, #12]
 80122c0:	b342      	cbz	r2, 8012314 <__hexnan+0x88>
 80122c2:	4610      	mov	r0, r2
 80122c4:	9105      	str	r1, [sp, #20]
 80122c6:	9204      	str	r2, [sp, #16]
 80122c8:	f7ff fd5f 	bl	8011d8a <__hexdig_fun>
 80122cc:	2800      	cmp	r0, #0
 80122ce:	d14f      	bne.n	8012370 <__hexnan+0xe4>
 80122d0:	9a04      	ldr	r2, [sp, #16]
 80122d2:	9905      	ldr	r1, [sp, #20]
 80122d4:	2a20      	cmp	r2, #32
 80122d6:	d818      	bhi.n	801230a <__hexnan+0x7e>
 80122d8:	9b02      	ldr	r3, [sp, #8]
 80122da:	459b      	cmp	fp, r3
 80122dc:	dd13      	ble.n	8012306 <__hexnan+0x7a>
 80122de:	454c      	cmp	r4, r9
 80122e0:	d206      	bcs.n	80122f0 <__hexnan+0x64>
 80122e2:	2d07      	cmp	r5, #7
 80122e4:	dc04      	bgt.n	80122f0 <__hexnan+0x64>
 80122e6:	462a      	mov	r2, r5
 80122e8:	4649      	mov	r1, r9
 80122ea:	4620      	mov	r0, r4
 80122ec:	f7ff ffa8 	bl	8012240 <L_shift>
 80122f0:	4544      	cmp	r4, r8
 80122f2:	d950      	bls.n	8012396 <__hexnan+0x10a>
 80122f4:	2300      	movs	r3, #0
 80122f6:	f1a4 0904 	sub.w	r9, r4, #4
 80122fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80122fe:	f8cd b008 	str.w	fp, [sp, #8]
 8012302:	464c      	mov	r4, r9
 8012304:	461d      	mov	r5, r3
 8012306:	9903      	ldr	r1, [sp, #12]
 8012308:	e7d7      	b.n	80122ba <__hexnan+0x2e>
 801230a:	2a29      	cmp	r2, #41	; 0x29
 801230c:	d156      	bne.n	80123bc <__hexnan+0x130>
 801230e:	3102      	adds	r1, #2
 8012310:	f8ca 1000 	str.w	r1, [sl]
 8012314:	f1bb 0f00 	cmp.w	fp, #0
 8012318:	d050      	beq.n	80123bc <__hexnan+0x130>
 801231a:	454c      	cmp	r4, r9
 801231c:	d206      	bcs.n	801232c <__hexnan+0xa0>
 801231e:	2d07      	cmp	r5, #7
 8012320:	dc04      	bgt.n	801232c <__hexnan+0xa0>
 8012322:	462a      	mov	r2, r5
 8012324:	4649      	mov	r1, r9
 8012326:	4620      	mov	r0, r4
 8012328:	f7ff ff8a 	bl	8012240 <L_shift>
 801232c:	4544      	cmp	r4, r8
 801232e:	d934      	bls.n	801239a <__hexnan+0x10e>
 8012330:	f1a8 0204 	sub.w	r2, r8, #4
 8012334:	4623      	mov	r3, r4
 8012336:	f853 1b04 	ldr.w	r1, [r3], #4
 801233a:	f842 1f04 	str.w	r1, [r2, #4]!
 801233e:	429f      	cmp	r7, r3
 8012340:	d2f9      	bcs.n	8012336 <__hexnan+0xaa>
 8012342:	1b3b      	subs	r3, r7, r4
 8012344:	f023 0303 	bic.w	r3, r3, #3
 8012348:	3304      	adds	r3, #4
 801234a:	3401      	adds	r4, #1
 801234c:	3e03      	subs	r6, #3
 801234e:	42b4      	cmp	r4, r6
 8012350:	bf88      	it	hi
 8012352:	2304      	movhi	r3, #4
 8012354:	4443      	add	r3, r8
 8012356:	2200      	movs	r2, #0
 8012358:	f843 2b04 	str.w	r2, [r3], #4
 801235c:	429f      	cmp	r7, r3
 801235e:	d2fb      	bcs.n	8012358 <__hexnan+0xcc>
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	b91b      	cbnz	r3, 801236c <__hexnan+0xe0>
 8012364:	4547      	cmp	r7, r8
 8012366:	d127      	bne.n	80123b8 <__hexnan+0x12c>
 8012368:	2301      	movs	r3, #1
 801236a:	603b      	str	r3, [r7, #0]
 801236c:	2005      	movs	r0, #5
 801236e:	e026      	b.n	80123be <__hexnan+0x132>
 8012370:	3501      	adds	r5, #1
 8012372:	2d08      	cmp	r5, #8
 8012374:	f10b 0b01 	add.w	fp, fp, #1
 8012378:	dd06      	ble.n	8012388 <__hexnan+0xfc>
 801237a:	4544      	cmp	r4, r8
 801237c:	d9c3      	bls.n	8012306 <__hexnan+0x7a>
 801237e:	2300      	movs	r3, #0
 8012380:	f844 3c04 	str.w	r3, [r4, #-4]
 8012384:	2501      	movs	r5, #1
 8012386:	3c04      	subs	r4, #4
 8012388:	6822      	ldr	r2, [r4, #0]
 801238a:	f000 000f 	and.w	r0, r0, #15
 801238e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012392:	6022      	str	r2, [r4, #0]
 8012394:	e7b7      	b.n	8012306 <__hexnan+0x7a>
 8012396:	2508      	movs	r5, #8
 8012398:	e7b5      	b.n	8012306 <__hexnan+0x7a>
 801239a:	9b01      	ldr	r3, [sp, #4]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d0df      	beq.n	8012360 <__hexnan+0xd4>
 80123a0:	f04f 32ff 	mov.w	r2, #4294967295
 80123a4:	f1c3 0320 	rsb	r3, r3, #32
 80123a8:	fa22 f303 	lsr.w	r3, r2, r3
 80123ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80123b0:	401a      	ands	r2, r3
 80123b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80123b6:	e7d3      	b.n	8012360 <__hexnan+0xd4>
 80123b8:	3f04      	subs	r7, #4
 80123ba:	e7d1      	b.n	8012360 <__hexnan+0xd4>
 80123bc:	2004      	movs	r0, #4
 80123be:	b007      	add	sp, #28
 80123c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080123c4 <__retarget_lock_init_recursive>:
 80123c4:	4770      	bx	lr

080123c6 <__retarget_lock_acquire_recursive>:
 80123c6:	4770      	bx	lr

080123c8 <__retarget_lock_release_recursive>:
 80123c8:	4770      	bx	lr
	...

080123cc <_lseek_r>:
 80123cc:	b538      	push	{r3, r4, r5, lr}
 80123ce:	4d07      	ldr	r5, [pc, #28]	; (80123ec <_lseek_r+0x20>)
 80123d0:	4604      	mov	r4, r0
 80123d2:	4608      	mov	r0, r1
 80123d4:	4611      	mov	r1, r2
 80123d6:	2200      	movs	r2, #0
 80123d8:	602a      	str	r2, [r5, #0]
 80123da:	461a      	mov	r2, r3
 80123dc:	f7f0 fd10 	bl	8002e00 <_lseek>
 80123e0:	1c43      	adds	r3, r0, #1
 80123e2:	d102      	bne.n	80123ea <_lseek_r+0x1e>
 80123e4:	682b      	ldr	r3, [r5, #0]
 80123e6:	b103      	cbz	r3, 80123ea <_lseek_r+0x1e>
 80123e8:	6023      	str	r3, [r4, #0]
 80123ea:	bd38      	pop	{r3, r4, r5, pc}
 80123ec:	200034d4 	.word	0x200034d4

080123f0 <__swhatbuf_r>:
 80123f0:	b570      	push	{r4, r5, r6, lr}
 80123f2:	460e      	mov	r6, r1
 80123f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123f8:	2900      	cmp	r1, #0
 80123fa:	b096      	sub	sp, #88	; 0x58
 80123fc:	4614      	mov	r4, r2
 80123fe:	461d      	mov	r5, r3
 8012400:	da07      	bge.n	8012412 <__swhatbuf_r+0x22>
 8012402:	2300      	movs	r3, #0
 8012404:	602b      	str	r3, [r5, #0]
 8012406:	89b3      	ldrh	r3, [r6, #12]
 8012408:	061a      	lsls	r2, r3, #24
 801240a:	d410      	bmi.n	801242e <__swhatbuf_r+0x3e>
 801240c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012410:	e00e      	b.n	8012430 <__swhatbuf_r+0x40>
 8012412:	466a      	mov	r2, sp
 8012414:	f001 fa02 	bl	801381c <_fstat_r>
 8012418:	2800      	cmp	r0, #0
 801241a:	dbf2      	blt.n	8012402 <__swhatbuf_r+0x12>
 801241c:	9a01      	ldr	r2, [sp, #4]
 801241e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012422:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012426:	425a      	negs	r2, r3
 8012428:	415a      	adcs	r2, r3
 801242a:	602a      	str	r2, [r5, #0]
 801242c:	e7ee      	b.n	801240c <__swhatbuf_r+0x1c>
 801242e:	2340      	movs	r3, #64	; 0x40
 8012430:	2000      	movs	r0, #0
 8012432:	6023      	str	r3, [r4, #0]
 8012434:	b016      	add	sp, #88	; 0x58
 8012436:	bd70      	pop	{r4, r5, r6, pc}

08012438 <__smakebuf_r>:
 8012438:	898b      	ldrh	r3, [r1, #12]
 801243a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801243c:	079d      	lsls	r5, r3, #30
 801243e:	4606      	mov	r6, r0
 8012440:	460c      	mov	r4, r1
 8012442:	d507      	bpl.n	8012454 <__smakebuf_r+0x1c>
 8012444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012448:	6023      	str	r3, [r4, #0]
 801244a:	6123      	str	r3, [r4, #16]
 801244c:	2301      	movs	r3, #1
 801244e:	6163      	str	r3, [r4, #20]
 8012450:	b002      	add	sp, #8
 8012452:	bd70      	pop	{r4, r5, r6, pc}
 8012454:	ab01      	add	r3, sp, #4
 8012456:	466a      	mov	r2, sp
 8012458:	f7ff ffca 	bl	80123f0 <__swhatbuf_r>
 801245c:	9900      	ldr	r1, [sp, #0]
 801245e:	4605      	mov	r5, r0
 8012460:	4630      	mov	r0, r6
 8012462:	f7fe f861 	bl	8010528 <_malloc_r>
 8012466:	b948      	cbnz	r0, 801247c <__smakebuf_r+0x44>
 8012468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801246c:	059a      	lsls	r2, r3, #22
 801246e:	d4ef      	bmi.n	8012450 <__smakebuf_r+0x18>
 8012470:	f023 0303 	bic.w	r3, r3, #3
 8012474:	f043 0302 	orr.w	r3, r3, #2
 8012478:	81a3      	strh	r3, [r4, #12]
 801247a:	e7e3      	b.n	8012444 <__smakebuf_r+0xc>
 801247c:	4b0d      	ldr	r3, [pc, #52]	; (80124b4 <__smakebuf_r+0x7c>)
 801247e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012480:	89a3      	ldrh	r3, [r4, #12]
 8012482:	6020      	str	r0, [r4, #0]
 8012484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012488:	81a3      	strh	r3, [r4, #12]
 801248a:	9b00      	ldr	r3, [sp, #0]
 801248c:	6163      	str	r3, [r4, #20]
 801248e:	9b01      	ldr	r3, [sp, #4]
 8012490:	6120      	str	r0, [r4, #16]
 8012492:	b15b      	cbz	r3, 80124ac <__smakebuf_r+0x74>
 8012494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012498:	4630      	mov	r0, r6
 801249a:	f001 f9d1 	bl	8013840 <_isatty_r>
 801249e:	b128      	cbz	r0, 80124ac <__smakebuf_r+0x74>
 80124a0:	89a3      	ldrh	r3, [r4, #12]
 80124a2:	f023 0303 	bic.w	r3, r3, #3
 80124a6:	f043 0301 	orr.w	r3, r3, #1
 80124aa:	81a3      	strh	r3, [r4, #12]
 80124ac:	89a0      	ldrh	r0, [r4, #12]
 80124ae:	4305      	orrs	r5, r0
 80124b0:	81a5      	strh	r5, [r4, #12]
 80124b2:	e7cd      	b.n	8012450 <__smakebuf_r+0x18>
 80124b4:	08011b45 	.word	0x08011b45

080124b8 <__ascii_mbtowc>:
 80124b8:	b082      	sub	sp, #8
 80124ba:	b901      	cbnz	r1, 80124be <__ascii_mbtowc+0x6>
 80124bc:	a901      	add	r1, sp, #4
 80124be:	b142      	cbz	r2, 80124d2 <__ascii_mbtowc+0x1a>
 80124c0:	b14b      	cbz	r3, 80124d6 <__ascii_mbtowc+0x1e>
 80124c2:	7813      	ldrb	r3, [r2, #0]
 80124c4:	600b      	str	r3, [r1, #0]
 80124c6:	7812      	ldrb	r2, [r2, #0]
 80124c8:	1e10      	subs	r0, r2, #0
 80124ca:	bf18      	it	ne
 80124cc:	2001      	movne	r0, #1
 80124ce:	b002      	add	sp, #8
 80124d0:	4770      	bx	lr
 80124d2:	4610      	mov	r0, r2
 80124d4:	e7fb      	b.n	80124ce <__ascii_mbtowc+0x16>
 80124d6:	f06f 0001 	mvn.w	r0, #1
 80124da:	e7f8      	b.n	80124ce <__ascii_mbtowc+0x16>

080124dc <__malloc_lock>:
 80124dc:	4801      	ldr	r0, [pc, #4]	; (80124e4 <__malloc_lock+0x8>)
 80124de:	f7ff bf72 	b.w	80123c6 <__retarget_lock_acquire_recursive>
 80124e2:	bf00      	nop
 80124e4:	200034cc 	.word	0x200034cc

080124e8 <__malloc_unlock>:
 80124e8:	4801      	ldr	r0, [pc, #4]	; (80124f0 <__malloc_unlock+0x8>)
 80124ea:	f7ff bf6d 	b.w	80123c8 <__retarget_lock_release_recursive>
 80124ee:	bf00      	nop
 80124f0:	200034cc 	.word	0x200034cc

080124f4 <_Balloc>:
 80124f4:	b570      	push	{r4, r5, r6, lr}
 80124f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80124f8:	4604      	mov	r4, r0
 80124fa:	460d      	mov	r5, r1
 80124fc:	b976      	cbnz	r6, 801251c <_Balloc+0x28>
 80124fe:	2010      	movs	r0, #16
 8012500:	f7fd ff9c 	bl	801043c <malloc>
 8012504:	4602      	mov	r2, r0
 8012506:	6260      	str	r0, [r4, #36]	; 0x24
 8012508:	b920      	cbnz	r0, 8012514 <_Balloc+0x20>
 801250a:	4b18      	ldr	r3, [pc, #96]	; (801256c <_Balloc+0x78>)
 801250c:	4818      	ldr	r0, [pc, #96]	; (8012570 <_Balloc+0x7c>)
 801250e:	2166      	movs	r1, #102	; 0x66
 8012510:	f001 f954 	bl	80137bc <__assert_func>
 8012514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012518:	6006      	str	r6, [r0, #0]
 801251a:	60c6      	str	r6, [r0, #12]
 801251c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801251e:	68f3      	ldr	r3, [r6, #12]
 8012520:	b183      	cbz	r3, 8012544 <_Balloc+0x50>
 8012522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801252a:	b9b8      	cbnz	r0, 801255c <_Balloc+0x68>
 801252c:	2101      	movs	r1, #1
 801252e:	fa01 f605 	lsl.w	r6, r1, r5
 8012532:	1d72      	adds	r2, r6, #5
 8012534:	0092      	lsls	r2, r2, #2
 8012536:	4620      	mov	r0, r4
 8012538:	f000 fc97 	bl	8012e6a <_calloc_r>
 801253c:	b160      	cbz	r0, 8012558 <_Balloc+0x64>
 801253e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012542:	e00e      	b.n	8012562 <_Balloc+0x6e>
 8012544:	2221      	movs	r2, #33	; 0x21
 8012546:	2104      	movs	r1, #4
 8012548:	4620      	mov	r0, r4
 801254a:	f000 fc8e 	bl	8012e6a <_calloc_r>
 801254e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012550:	60f0      	str	r0, [r6, #12]
 8012552:	68db      	ldr	r3, [r3, #12]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d1e4      	bne.n	8012522 <_Balloc+0x2e>
 8012558:	2000      	movs	r0, #0
 801255a:	bd70      	pop	{r4, r5, r6, pc}
 801255c:	6802      	ldr	r2, [r0, #0]
 801255e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012562:	2300      	movs	r3, #0
 8012564:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012568:	e7f7      	b.n	801255a <_Balloc+0x66>
 801256a:	bf00      	nop
 801256c:	08015570 	.word	0x08015570
 8012570:	08015587 	.word	0x08015587

08012574 <_Bfree>:
 8012574:	b570      	push	{r4, r5, r6, lr}
 8012576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012578:	4605      	mov	r5, r0
 801257a:	460c      	mov	r4, r1
 801257c:	b976      	cbnz	r6, 801259c <_Bfree+0x28>
 801257e:	2010      	movs	r0, #16
 8012580:	f7fd ff5c 	bl	801043c <malloc>
 8012584:	4602      	mov	r2, r0
 8012586:	6268      	str	r0, [r5, #36]	; 0x24
 8012588:	b920      	cbnz	r0, 8012594 <_Bfree+0x20>
 801258a:	4b09      	ldr	r3, [pc, #36]	; (80125b0 <_Bfree+0x3c>)
 801258c:	4809      	ldr	r0, [pc, #36]	; (80125b4 <_Bfree+0x40>)
 801258e:	218a      	movs	r1, #138	; 0x8a
 8012590:	f001 f914 	bl	80137bc <__assert_func>
 8012594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012598:	6006      	str	r6, [r0, #0]
 801259a:	60c6      	str	r6, [r0, #12]
 801259c:	b13c      	cbz	r4, 80125ae <_Bfree+0x3a>
 801259e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80125a0:	6862      	ldr	r2, [r4, #4]
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80125a8:	6021      	str	r1, [r4, #0]
 80125aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80125ae:	bd70      	pop	{r4, r5, r6, pc}
 80125b0:	08015570 	.word	0x08015570
 80125b4:	08015587 	.word	0x08015587

080125b8 <__multadd>:
 80125b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125bc:	690e      	ldr	r6, [r1, #16]
 80125be:	4607      	mov	r7, r0
 80125c0:	4698      	mov	r8, r3
 80125c2:	460c      	mov	r4, r1
 80125c4:	f101 0014 	add.w	r0, r1, #20
 80125c8:	2300      	movs	r3, #0
 80125ca:	6805      	ldr	r5, [r0, #0]
 80125cc:	b2a9      	uxth	r1, r5
 80125ce:	fb02 8101 	mla	r1, r2, r1, r8
 80125d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80125d6:	0c2d      	lsrs	r5, r5, #16
 80125d8:	fb02 c505 	mla	r5, r2, r5, ip
 80125dc:	b289      	uxth	r1, r1
 80125de:	3301      	adds	r3, #1
 80125e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80125e4:	429e      	cmp	r6, r3
 80125e6:	f840 1b04 	str.w	r1, [r0], #4
 80125ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80125ee:	dcec      	bgt.n	80125ca <__multadd+0x12>
 80125f0:	f1b8 0f00 	cmp.w	r8, #0
 80125f4:	d022      	beq.n	801263c <__multadd+0x84>
 80125f6:	68a3      	ldr	r3, [r4, #8]
 80125f8:	42b3      	cmp	r3, r6
 80125fa:	dc19      	bgt.n	8012630 <__multadd+0x78>
 80125fc:	6861      	ldr	r1, [r4, #4]
 80125fe:	4638      	mov	r0, r7
 8012600:	3101      	adds	r1, #1
 8012602:	f7ff ff77 	bl	80124f4 <_Balloc>
 8012606:	4605      	mov	r5, r0
 8012608:	b928      	cbnz	r0, 8012616 <__multadd+0x5e>
 801260a:	4602      	mov	r2, r0
 801260c:	4b0d      	ldr	r3, [pc, #52]	; (8012644 <__multadd+0x8c>)
 801260e:	480e      	ldr	r0, [pc, #56]	; (8012648 <__multadd+0x90>)
 8012610:	21b5      	movs	r1, #181	; 0xb5
 8012612:	f001 f8d3 	bl	80137bc <__assert_func>
 8012616:	6922      	ldr	r2, [r4, #16]
 8012618:	3202      	adds	r2, #2
 801261a:	f104 010c 	add.w	r1, r4, #12
 801261e:	0092      	lsls	r2, r2, #2
 8012620:	300c      	adds	r0, #12
 8012622:	f7fd ff1b 	bl	801045c <memcpy>
 8012626:	4621      	mov	r1, r4
 8012628:	4638      	mov	r0, r7
 801262a:	f7ff ffa3 	bl	8012574 <_Bfree>
 801262e:	462c      	mov	r4, r5
 8012630:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012634:	3601      	adds	r6, #1
 8012636:	f8c3 8014 	str.w	r8, [r3, #20]
 801263a:	6126      	str	r6, [r4, #16]
 801263c:	4620      	mov	r0, r4
 801263e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012642:	bf00      	nop
 8012644:	080154e0 	.word	0x080154e0
 8012648:	08015587 	.word	0x08015587

0801264c <__s2b>:
 801264c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012650:	460c      	mov	r4, r1
 8012652:	4615      	mov	r5, r2
 8012654:	461f      	mov	r7, r3
 8012656:	2209      	movs	r2, #9
 8012658:	3308      	adds	r3, #8
 801265a:	4606      	mov	r6, r0
 801265c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012660:	2100      	movs	r1, #0
 8012662:	2201      	movs	r2, #1
 8012664:	429a      	cmp	r2, r3
 8012666:	db09      	blt.n	801267c <__s2b+0x30>
 8012668:	4630      	mov	r0, r6
 801266a:	f7ff ff43 	bl	80124f4 <_Balloc>
 801266e:	b940      	cbnz	r0, 8012682 <__s2b+0x36>
 8012670:	4602      	mov	r2, r0
 8012672:	4b19      	ldr	r3, [pc, #100]	; (80126d8 <__s2b+0x8c>)
 8012674:	4819      	ldr	r0, [pc, #100]	; (80126dc <__s2b+0x90>)
 8012676:	21ce      	movs	r1, #206	; 0xce
 8012678:	f001 f8a0 	bl	80137bc <__assert_func>
 801267c:	0052      	lsls	r2, r2, #1
 801267e:	3101      	adds	r1, #1
 8012680:	e7f0      	b.n	8012664 <__s2b+0x18>
 8012682:	9b08      	ldr	r3, [sp, #32]
 8012684:	6143      	str	r3, [r0, #20]
 8012686:	2d09      	cmp	r5, #9
 8012688:	f04f 0301 	mov.w	r3, #1
 801268c:	6103      	str	r3, [r0, #16]
 801268e:	dd16      	ble.n	80126be <__s2b+0x72>
 8012690:	f104 0909 	add.w	r9, r4, #9
 8012694:	46c8      	mov	r8, r9
 8012696:	442c      	add	r4, r5
 8012698:	f818 3b01 	ldrb.w	r3, [r8], #1
 801269c:	4601      	mov	r1, r0
 801269e:	3b30      	subs	r3, #48	; 0x30
 80126a0:	220a      	movs	r2, #10
 80126a2:	4630      	mov	r0, r6
 80126a4:	f7ff ff88 	bl	80125b8 <__multadd>
 80126a8:	45a0      	cmp	r8, r4
 80126aa:	d1f5      	bne.n	8012698 <__s2b+0x4c>
 80126ac:	f1a5 0408 	sub.w	r4, r5, #8
 80126b0:	444c      	add	r4, r9
 80126b2:	1b2d      	subs	r5, r5, r4
 80126b4:	1963      	adds	r3, r4, r5
 80126b6:	42bb      	cmp	r3, r7
 80126b8:	db04      	blt.n	80126c4 <__s2b+0x78>
 80126ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126be:	340a      	adds	r4, #10
 80126c0:	2509      	movs	r5, #9
 80126c2:	e7f6      	b.n	80126b2 <__s2b+0x66>
 80126c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80126c8:	4601      	mov	r1, r0
 80126ca:	3b30      	subs	r3, #48	; 0x30
 80126cc:	220a      	movs	r2, #10
 80126ce:	4630      	mov	r0, r6
 80126d0:	f7ff ff72 	bl	80125b8 <__multadd>
 80126d4:	e7ee      	b.n	80126b4 <__s2b+0x68>
 80126d6:	bf00      	nop
 80126d8:	080154e0 	.word	0x080154e0
 80126dc:	08015587 	.word	0x08015587

080126e0 <__hi0bits>:
 80126e0:	0c03      	lsrs	r3, r0, #16
 80126e2:	041b      	lsls	r3, r3, #16
 80126e4:	b9d3      	cbnz	r3, 801271c <__hi0bits+0x3c>
 80126e6:	0400      	lsls	r0, r0, #16
 80126e8:	2310      	movs	r3, #16
 80126ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80126ee:	bf04      	itt	eq
 80126f0:	0200      	lsleq	r0, r0, #8
 80126f2:	3308      	addeq	r3, #8
 80126f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80126f8:	bf04      	itt	eq
 80126fa:	0100      	lsleq	r0, r0, #4
 80126fc:	3304      	addeq	r3, #4
 80126fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012702:	bf04      	itt	eq
 8012704:	0080      	lsleq	r0, r0, #2
 8012706:	3302      	addeq	r3, #2
 8012708:	2800      	cmp	r0, #0
 801270a:	db05      	blt.n	8012718 <__hi0bits+0x38>
 801270c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012710:	f103 0301 	add.w	r3, r3, #1
 8012714:	bf08      	it	eq
 8012716:	2320      	moveq	r3, #32
 8012718:	4618      	mov	r0, r3
 801271a:	4770      	bx	lr
 801271c:	2300      	movs	r3, #0
 801271e:	e7e4      	b.n	80126ea <__hi0bits+0xa>

08012720 <__lo0bits>:
 8012720:	6803      	ldr	r3, [r0, #0]
 8012722:	f013 0207 	ands.w	r2, r3, #7
 8012726:	4601      	mov	r1, r0
 8012728:	d00b      	beq.n	8012742 <__lo0bits+0x22>
 801272a:	07da      	lsls	r2, r3, #31
 801272c:	d424      	bmi.n	8012778 <__lo0bits+0x58>
 801272e:	0798      	lsls	r0, r3, #30
 8012730:	bf49      	itett	mi
 8012732:	085b      	lsrmi	r3, r3, #1
 8012734:	089b      	lsrpl	r3, r3, #2
 8012736:	2001      	movmi	r0, #1
 8012738:	600b      	strmi	r3, [r1, #0]
 801273a:	bf5c      	itt	pl
 801273c:	600b      	strpl	r3, [r1, #0]
 801273e:	2002      	movpl	r0, #2
 8012740:	4770      	bx	lr
 8012742:	b298      	uxth	r0, r3
 8012744:	b9b0      	cbnz	r0, 8012774 <__lo0bits+0x54>
 8012746:	0c1b      	lsrs	r3, r3, #16
 8012748:	2010      	movs	r0, #16
 801274a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801274e:	bf04      	itt	eq
 8012750:	0a1b      	lsreq	r3, r3, #8
 8012752:	3008      	addeq	r0, #8
 8012754:	071a      	lsls	r2, r3, #28
 8012756:	bf04      	itt	eq
 8012758:	091b      	lsreq	r3, r3, #4
 801275a:	3004      	addeq	r0, #4
 801275c:	079a      	lsls	r2, r3, #30
 801275e:	bf04      	itt	eq
 8012760:	089b      	lsreq	r3, r3, #2
 8012762:	3002      	addeq	r0, #2
 8012764:	07da      	lsls	r2, r3, #31
 8012766:	d403      	bmi.n	8012770 <__lo0bits+0x50>
 8012768:	085b      	lsrs	r3, r3, #1
 801276a:	f100 0001 	add.w	r0, r0, #1
 801276e:	d005      	beq.n	801277c <__lo0bits+0x5c>
 8012770:	600b      	str	r3, [r1, #0]
 8012772:	4770      	bx	lr
 8012774:	4610      	mov	r0, r2
 8012776:	e7e8      	b.n	801274a <__lo0bits+0x2a>
 8012778:	2000      	movs	r0, #0
 801277a:	4770      	bx	lr
 801277c:	2020      	movs	r0, #32
 801277e:	4770      	bx	lr

08012780 <__i2b>:
 8012780:	b510      	push	{r4, lr}
 8012782:	460c      	mov	r4, r1
 8012784:	2101      	movs	r1, #1
 8012786:	f7ff feb5 	bl	80124f4 <_Balloc>
 801278a:	4602      	mov	r2, r0
 801278c:	b928      	cbnz	r0, 801279a <__i2b+0x1a>
 801278e:	4b05      	ldr	r3, [pc, #20]	; (80127a4 <__i2b+0x24>)
 8012790:	4805      	ldr	r0, [pc, #20]	; (80127a8 <__i2b+0x28>)
 8012792:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012796:	f001 f811 	bl	80137bc <__assert_func>
 801279a:	2301      	movs	r3, #1
 801279c:	6144      	str	r4, [r0, #20]
 801279e:	6103      	str	r3, [r0, #16]
 80127a0:	bd10      	pop	{r4, pc}
 80127a2:	bf00      	nop
 80127a4:	080154e0 	.word	0x080154e0
 80127a8:	08015587 	.word	0x08015587

080127ac <__multiply>:
 80127ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b0:	4614      	mov	r4, r2
 80127b2:	690a      	ldr	r2, [r1, #16]
 80127b4:	6923      	ldr	r3, [r4, #16]
 80127b6:	429a      	cmp	r2, r3
 80127b8:	bfb8      	it	lt
 80127ba:	460b      	movlt	r3, r1
 80127bc:	460d      	mov	r5, r1
 80127be:	bfbc      	itt	lt
 80127c0:	4625      	movlt	r5, r4
 80127c2:	461c      	movlt	r4, r3
 80127c4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80127c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80127cc:	68ab      	ldr	r3, [r5, #8]
 80127ce:	6869      	ldr	r1, [r5, #4]
 80127d0:	eb0a 0709 	add.w	r7, sl, r9
 80127d4:	42bb      	cmp	r3, r7
 80127d6:	b085      	sub	sp, #20
 80127d8:	bfb8      	it	lt
 80127da:	3101      	addlt	r1, #1
 80127dc:	f7ff fe8a 	bl	80124f4 <_Balloc>
 80127e0:	b930      	cbnz	r0, 80127f0 <__multiply+0x44>
 80127e2:	4602      	mov	r2, r0
 80127e4:	4b42      	ldr	r3, [pc, #264]	; (80128f0 <__multiply+0x144>)
 80127e6:	4843      	ldr	r0, [pc, #268]	; (80128f4 <__multiply+0x148>)
 80127e8:	f240 115d 	movw	r1, #349	; 0x15d
 80127ec:	f000 ffe6 	bl	80137bc <__assert_func>
 80127f0:	f100 0614 	add.w	r6, r0, #20
 80127f4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80127f8:	4633      	mov	r3, r6
 80127fa:	2200      	movs	r2, #0
 80127fc:	4543      	cmp	r3, r8
 80127fe:	d31e      	bcc.n	801283e <__multiply+0x92>
 8012800:	f105 0c14 	add.w	ip, r5, #20
 8012804:	f104 0314 	add.w	r3, r4, #20
 8012808:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801280c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012810:	9202      	str	r2, [sp, #8]
 8012812:	ebac 0205 	sub.w	r2, ip, r5
 8012816:	3a15      	subs	r2, #21
 8012818:	f022 0203 	bic.w	r2, r2, #3
 801281c:	3204      	adds	r2, #4
 801281e:	f105 0115 	add.w	r1, r5, #21
 8012822:	458c      	cmp	ip, r1
 8012824:	bf38      	it	cc
 8012826:	2204      	movcc	r2, #4
 8012828:	9201      	str	r2, [sp, #4]
 801282a:	9a02      	ldr	r2, [sp, #8]
 801282c:	9303      	str	r3, [sp, #12]
 801282e:	429a      	cmp	r2, r3
 8012830:	d808      	bhi.n	8012844 <__multiply+0x98>
 8012832:	2f00      	cmp	r7, #0
 8012834:	dc55      	bgt.n	80128e2 <__multiply+0x136>
 8012836:	6107      	str	r7, [r0, #16]
 8012838:	b005      	add	sp, #20
 801283a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801283e:	f843 2b04 	str.w	r2, [r3], #4
 8012842:	e7db      	b.n	80127fc <__multiply+0x50>
 8012844:	f8b3 a000 	ldrh.w	sl, [r3]
 8012848:	f1ba 0f00 	cmp.w	sl, #0
 801284c:	d020      	beq.n	8012890 <__multiply+0xe4>
 801284e:	f105 0e14 	add.w	lr, r5, #20
 8012852:	46b1      	mov	r9, r6
 8012854:	2200      	movs	r2, #0
 8012856:	f85e 4b04 	ldr.w	r4, [lr], #4
 801285a:	f8d9 b000 	ldr.w	fp, [r9]
 801285e:	b2a1      	uxth	r1, r4
 8012860:	fa1f fb8b 	uxth.w	fp, fp
 8012864:	fb0a b101 	mla	r1, sl, r1, fp
 8012868:	4411      	add	r1, r2
 801286a:	f8d9 2000 	ldr.w	r2, [r9]
 801286e:	0c24      	lsrs	r4, r4, #16
 8012870:	0c12      	lsrs	r2, r2, #16
 8012872:	fb0a 2404 	mla	r4, sl, r4, r2
 8012876:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801287a:	b289      	uxth	r1, r1
 801287c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012880:	45f4      	cmp	ip, lr
 8012882:	f849 1b04 	str.w	r1, [r9], #4
 8012886:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801288a:	d8e4      	bhi.n	8012856 <__multiply+0xaa>
 801288c:	9901      	ldr	r1, [sp, #4]
 801288e:	5072      	str	r2, [r6, r1]
 8012890:	9a03      	ldr	r2, [sp, #12]
 8012892:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012896:	3304      	adds	r3, #4
 8012898:	f1b9 0f00 	cmp.w	r9, #0
 801289c:	d01f      	beq.n	80128de <__multiply+0x132>
 801289e:	6834      	ldr	r4, [r6, #0]
 80128a0:	f105 0114 	add.w	r1, r5, #20
 80128a4:	46b6      	mov	lr, r6
 80128a6:	f04f 0a00 	mov.w	sl, #0
 80128aa:	880a      	ldrh	r2, [r1, #0]
 80128ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 80128b0:	fb09 b202 	mla	r2, r9, r2, fp
 80128b4:	4492      	add	sl, r2
 80128b6:	b2a4      	uxth	r4, r4
 80128b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80128bc:	f84e 4b04 	str.w	r4, [lr], #4
 80128c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80128c4:	f8be 2000 	ldrh.w	r2, [lr]
 80128c8:	0c24      	lsrs	r4, r4, #16
 80128ca:	fb09 2404 	mla	r4, r9, r4, r2
 80128ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80128d2:	458c      	cmp	ip, r1
 80128d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80128d8:	d8e7      	bhi.n	80128aa <__multiply+0xfe>
 80128da:	9a01      	ldr	r2, [sp, #4]
 80128dc:	50b4      	str	r4, [r6, r2]
 80128de:	3604      	adds	r6, #4
 80128e0:	e7a3      	b.n	801282a <__multiply+0x7e>
 80128e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d1a5      	bne.n	8012836 <__multiply+0x8a>
 80128ea:	3f01      	subs	r7, #1
 80128ec:	e7a1      	b.n	8012832 <__multiply+0x86>
 80128ee:	bf00      	nop
 80128f0:	080154e0 	.word	0x080154e0
 80128f4:	08015587 	.word	0x08015587

080128f8 <__pow5mult>:
 80128f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128fc:	4615      	mov	r5, r2
 80128fe:	f012 0203 	ands.w	r2, r2, #3
 8012902:	4606      	mov	r6, r0
 8012904:	460f      	mov	r7, r1
 8012906:	d007      	beq.n	8012918 <__pow5mult+0x20>
 8012908:	4c25      	ldr	r4, [pc, #148]	; (80129a0 <__pow5mult+0xa8>)
 801290a:	3a01      	subs	r2, #1
 801290c:	2300      	movs	r3, #0
 801290e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012912:	f7ff fe51 	bl	80125b8 <__multadd>
 8012916:	4607      	mov	r7, r0
 8012918:	10ad      	asrs	r5, r5, #2
 801291a:	d03d      	beq.n	8012998 <__pow5mult+0xa0>
 801291c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801291e:	b97c      	cbnz	r4, 8012940 <__pow5mult+0x48>
 8012920:	2010      	movs	r0, #16
 8012922:	f7fd fd8b 	bl	801043c <malloc>
 8012926:	4602      	mov	r2, r0
 8012928:	6270      	str	r0, [r6, #36]	; 0x24
 801292a:	b928      	cbnz	r0, 8012938 <__pow5mult+0x40>
 801292c:	4b1d      	ldr	r3, [pc, #116]	; (80129a4 <__pow5mult+0xac>)
 801292e:	481e      	ldr	r0, [pc, #120]	; (80129a8 <__pow5mult+0xb0>)
 8012930:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012934:	f000 ff42 	bl	80137bc <__assert_func>
 8012938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801293c:	6004      	str	r4, [r0, #0]
 801293e:	60c4      	str	r4, [r0, #12]
 8012940:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012948:	b94c      	cbnz	r4, 801295e <__pow5mult+0x66>
 801294a:	f240 2171 	movw	r1, #625	; 0x271
 801294e:	4630      	mov	r0, r6
 8012950:	f7ff ff16 	bl	8012780 <__i2b>
 8012954:	2300      	movs	r3, #0
 8012956:	f8c8 0008 	str.w	r0, [r8, #8]
 801295a:	4604      	mov	r4, r0
 801295c:	6003      	str	r3, [r0, #0]
 801295e:	f04f 0900 	mov.w	r9, #0
 8012962:	07eb      	lsls	r3, r5, #31
 8012964:	d50a      	bpl.n	801297c <__pow5mult+0x84>
 8012966:	4639      	mov	r1, r7
 8012968:	4622      	mov	r2, r4
 801296a:	4630      	mov	r0, r6
 801296c:	f7ff ff1e 	bl	80127ac <__multiply>
 8012970:	4639      	mov	r1, r7
 8012972:	4680      	mov	r8, r0
 8012974:	4630      	mov	r0, r6
 8012976:	f7ff fdfd 	bl	8012574 <_Bfree>
 801297a:	4647      	mov	r7, r8
 801297c:	106d      	asrs	r5, r5, #1
 801297e:	d00b      	beq.n	8012998 <__pow5mult+0xa0>
 8012980:	6820      	ldr	r0, [r4, #0]
 8012982:	b938      	cbnz	r0, 8012994 <__pow5mult+0x9c>
 8012984:	4622      	mov	r2, r4
 8012986:	4621      	mov	r1, r4
 8012988:	4630      	mov	r0, r6
 801298a:	f7ff ff0f 	bl	80127ac <__multiply>
 801298e:	6020      	str	r0, [r4, #0]
 8012990:	f8c0 9000 	str.w	r9, [r0]
 8012994:	4604      	mov	r4, r0
 8012996:	e7e4      	b.n	8012962 <__pow5mult+0x6a>
 8012998:	4638      	mov	r0, r7
 801299a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801299e:	bf00      	nop
 80129a0:	080156d8 	.word	0x080156d8
 80129a4:	08015570 	.word	0x08015570
 80129a8:	08015587 	.word	0x08015587

080129ac <__lshift>:
 80129ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129b0:	460c      	mov	r4, r1
 80129b2:	6849      	ldr	r1, [r1, #4]
 80129b4:	6923      	ldr	r3, [r4, #16]
 80129b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80129ba:	68a3      	ldr	r3, [r4, #8]
 80129bc:	4607      	mov	r7, r0
 80129be:	4691      	mov	r9, r2
 80129c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80129c4:	f108 0601 	add.w	r6, r8, #1
 80129c8:	42b3      	cmp	r3, r6
 80129ca:	db0b      	blt.n	80129e4 <__lshift+0x38>
 80129cc:	4638      	mov	r0, r7
 80129ce:	f7ff fd91 	bl	80124f4 <_Balloc>
 80129d2:	4605      	mov	r5, r0
 80129d4:	b948      	cbnz	r0, 80129ea <__lshift+0x3e>
 80129d6:	4602      	mov	r2, r0
 80129d8:	4b28      	ldr	r3, [pc, #160]	; (8012a7c <__lshift+0xd0>)
 80129da:	4829      	ldr	r0, [pc, #164]	; (8012a80 <__lshift+0xd4>)
 80129dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80129e0:	f000 feec 	bl	80137bc <__assert_func>
 80129e4:	3101      	adds	r1, #1
 80129e6:	005b      	lsls	r3, r3, #1
 80129e8:	e7ee      	b.n	80129c8 <__lshift+0x1c>
 80129ea:	2300      	movs	r3, #0
 80129ec:	f100 0114 	add.w	r1, r0, #20
 80129f0:	f100 0210 	add.w	r2, r0, #16
 80129f4:	4618      	mov	r0, r3
 80129f6:	4553      	cmp	r3, sl
 80129f8:	db33      	blt.n	8012a62 <__lshift+0xb6>
 80129fa:	6920      	ldr	r0, [r4, #16]
 80129fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a00:	f104 0314 	add.w	r3, r4, #20
 8012a04:	f019 091f 	ands.w	r9, r9, #31
 8012a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012a10:	d02b      	beq.n	8012a6a <__lshift+0xbe>
 8012a12:	f1c9 0e20 	rsb	lr, r9, #32
 8012a16:	468a      	mov	sl, r1
 8012a18:	2200      	movs	r2, #0
 8012a1a:	6818      	ldr	r0, [r3, #0]
 8012a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8012a20:	4302      	orrs	r2, r0
 8012a22:	f84a 2b04 	str.w	r2, [sl], #4
 8012a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a2a:	459c      	cmp	ip, r3
 8012a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012a30:	d8f3      	bhi.n	8012a1a <__lshift+0x6e>
 8012a32:	ebac 0304 	sub.w	r3, ip, r4
 8012a36:	3b15      	subs	r3, #21
 8012a38:	f023 0303 	bic.w	r3, r3, #3
 8012a3c:	3304      	adds	r3, #4
 8012a3e:	f104 0015 	add.w	r0, r4, #21
 8012a42:	4584      	cmp	ip, r0
 8012a44:	bf38      	it	cc
 8012a46:	2304      	movcc	r3, #4
 8012a48:	50ca      	str	r2, [r1, r3]
 8012a4a:	b10a      	cbz	r2, 8012a50 <__lshift+0xa4>
 8012a4c:	f108 0602 	add.w	r6, r8, #2
 8012a50:	3e01      	subs	r6, #1
 8012a52:	4638      	mov	r0, r7
 8012a54:	612e      	str	r6, [r5, #16]
 8012a56:	4621      	mov	r1, r4
 8012a58:	f7ff fd8c 	bl	8012574 <_Bfree>
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8012a66:	3301      	adds	r3, #1
 8012a68:	e7c5      	b.n	80129f6 <__lshift+0x4a>
 8012a6a:	3904      	subs	r1, #4
 8012a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8012a74:	459c      	cmp	ip, r3
 8012a76:	d8f9      	bhi.n	8012a6c <__lshift+0xc0>
 8012a78:	e7ea      	b.n	8012a50 <__lshift+0xa4>
 8012a7a:	bf00      	nop
 8012a7c:	080154e0 	.word	0x080154e0
 8012a80:	08015587 	.word	0x08015587

08012a84 <__mcmp>:
 8012a84:	b530      	push	{r4, r5, lr}
 8012a86:	6902      	ldr	r2, [r0, #16]
 8012a88:	690c      	ldr	r4, [r1, #16]
 8012a8a:	1b12      	subs	r2, r2, r4
 8012a8c:	d10e      	bne.n	8012aac <__mcmp+0x28>
 8012a8e:	f100 0314 	add.w	r3, r0, #20
 8012a92:	3114      	adds	r1, #20
 8012a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012aa4:	42a5      	cmp	r5, r4
 8012aa6:	d003      	beq.n	8012ab0 <__mcmp+0x2c>
 8012aa8:	d305      	bcc.n	8012ab6 <__mcmp+0x32>
 8012aaa:	2201      	movs	r2, #1
 8012aac:	4610      	mov	r0, r2
 8012aae:	bd30      	pop	{r4, r5, pc}
 8012ab0:	4283      	cmp	r3, r0
 8012ab2:	d3f3      	bcc.n	8012a9c <__mcmp+0x18>
 8012ab4:	e7fa      	b.n	8012aac <__mcmp+0x28>
 8012ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8012aba:	e7f7      	b.n	8012aac <__mcmp+0x28>

08012abc <__mdiff>:
 8012abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac0:	460c      	mov	r4, r1
 8012ac2:	4606      	mov	r6, r0
 8012ac4:	4611      	mov	r1, r2
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	4617      	mov	r7, r2
 8012aca:	f7ff ffdb 	bl	8012a84 <__mcmp>
 8012ace:	1e05      	subs	r5, r0, #0
 8012ad0:	d110      	bne.n	8012af4 <__mdiff+0x38>
 8012ad2:	4629      	mov	r1, r5
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	f7ff fd0d 	bl	80124f4 <_Balloc>
 8012ada:	b930      	cbnz	r0, 8012aea <__mdiff+0x2e>
 8012adc:	4b39      	ldr	r3, [pc, #228]	; (8012bc4 <__mdiff+0x108>)
 8012ade:	4602      	mov	r2, r0
 8012ae0:	f240 2132 	movw	r1, #562	; 0x232
 8012ae4:	4838      	ldr	r0, [pc, #224]	; (8012bc8 <__mdiff+0x10c>)
 8012ae6:	f000 fe69 	bl	80137bc <__assert_func>
 8012aea:	2301      	movs	r3, #1
 8012aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af4:	bfa4      	itt	ge
 8012af6:	463b      	movge	r3, r7
 8012af8:	4627      	movge	r7, r4
 8012afa:	4630      	mov	r0, r6
 8012afc:	6879      	ldr	r1, [r7, #4]
 8012afe:	bfa6      	itte	ge
 8012b00:	461c      	movge	r4, r3
 8012b02:	2500      	movge	r5, #0
 8012b04:	2501      	movlt	r5, #1
 8012b06:	f7ff fcf5 	bl	80124f4 <_Balloc>
 8012b0a:	b920      	cbnz	r0, 8012b16 <__mdiff+0x5a>
 8012b0c:	4b2d      	ldr	r3, [pc, #180]	; (8012bc4 <__mdiff+0x108>)
 8012b0e:	4602      	mov	r2, r0
 8012b10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012b14:	e7e6      	b.n	8012ae4 <__mdiff+0x28>
 8012b16:	693e      	ldr	r6, [r7, #16]
 8012b18:	60c5      	str	r5, [r0, #12]
 8012b1a:	6925      	ldr	r5, [r4, #16]
 8012b1c:	f107 0114 	add.w	r1, r7, #20
 8012b20:	f104 0914 	add.w	r9, r4, #20
 8012b24:	f100 0e14 	add.w	lr, r0, #20
 8012b28:	f107 0210 	add.w	r2, r7, #16
 8012b2c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012b30:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012b34:	46f2      	mov	sl, lr
 8012b36:	2700      	movs	r7, #0
 8012b38:	f859 3b04 	ldr.w	r3, [r9], #4
 8012b3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012b40:	fa1f f883 	uxth.w	r8, r3
 8012b44:	fa17 f78b 	uxtah	r7, r7, fp
 8012b48:	0c1b      	lsrs	r3, r3, #16
 8012b4a:	eba7 0808 	sub.w	r8, r7, r8
 8012b4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012b52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012b56:	fa1f f888 	uxth.w	r8, r8
 8012b5a:	141f      	asrs	r7, r3, #16
 8012b5c:	454d      	cmp	r5, r9
 8012b5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012b62:	f84a 3b04 	str.w	r3, [sl], #4
 8012b66:	d8e7      	bhi.n	8012b38 <__mdiff+0x7c>
 8012b68:	1b2b      	subs	r3, r5, r4
 8012b6a:	3b15      	subs	r3, #21
 8012b6c:	f023 0303 	bic.w	r3, r3, #3
 8012b70:	3304      	adds	r3, #4
 8012b72:	3415      	adds	r4, #21
 8012b74:	42a5      	cmp	r5, r4
 8012b76:	bf38      	it	cc
 8012b78:	2304      	movcc	r3, #4
 8012b7a:	4419      	add	r1, r3
 8012b7c:	4473      	add	r3, lr
 8012b7e:	469e      	mov	lr, r3
 8012b80:	460d      	mov	r5, r1
 8012b82:	4565      	cmp	r5, ip
 8012b84:	d30e      	bcc.n	8012ba4 <__mdiff+0xe8>
 8012b86:	f10c 0203 	add.w	r2, ip, #3
 8012b8a:	1a52      	subs	r2, r2, r1
 8012b8c:	f022 0203 	bic.w	r2, r2, #3
 8012b90:	3903      	subs	r1, #3
 8012b92:	458c      	cmp	ip, r1
 8012b94:	bf38      	it	cc
 8012b96:	2200      	movcc	r2, #0
 8012b98:	441a      	add	r2, r3
 8012b9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012b9e:	b17b      	cbz	r3, 8012bc0 <__mdiff+0x104>
 8012ba0:	6106      	str	r6, [r0, #16]
 8012ba2:	e7a5      	b.n	8012af0 <__mdiff+0x34>
 8012ba4:	f855 8b04 	ldr.w	r8, [r5], #4
 8012ba8:	fa17 f488 	uxtah	r4, r7, r8
 8012bac:	1422      	asrs	r2, r4, #16
 8012bae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012bb2:	b2a4      	uxth	r4, r4
 8012bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012bb8:	f84e 4b04 	str.w	r4, [lr], #4
 8012bbc:	1417      	asrs	r7, r2, #16
 8012bbe:	e7e0      	b.n	8012b82 <__mdiff+0xc6>
 8012bc0:	3e01      	subs	r6, #1
 8012bc2:	e7ea      	b.n	8012b9a <__mdiff+0xde>
 8012bc4:	080154e0 	.word	0x080154e0
 8012bc8:	08015587 	.word	0x08015587

08012bcc <__ulp>:
 8012bcc:	b082      	sub	sp, #8
 8012bce:	ed8d 0b00 	vstr	d0, [sp]
 8012bd2:	9b01      	ldr	r3, [sp, #4]
 8012bd4:	4912      	ldr	r1, [pc, #72]	; (8012c20 <__ulp+0x54>)
 8012bd6:	4019      	ands	r1, r3
 8012bd8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012bdc:	2900      	cmp	r1, #0
 8012bde:	dd05      	ble.n	8012bec <__ulp+0x20>
 8012be0:	2200      	movs	r2, #0
 8012be2:	460b      	mov	r3, r1
 8012be4:	ec43 2b10 	vmov	d0, r2, r3
 8012be8:	b002      	add	sp, #8
 8012bea:	4770      	bx	lr
 8012bec:	4249      	negs	r1, r1
 8012bee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012bf2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012bf6:	f04f 0200 	mov.w	r2, #0
 8012bfa:	f04f 0300 	mov.w	r3, #0
 8012bfe:	da04      	bge.n	8012c0a <__ulp+0x3e>
 8012c00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012c04:	fa41 f300 	asr.w	r3, r1, r0
 8012c08:	e7ec      	b.n	8012be4 <__ulp+0x18>
 8012c0a:	f1a0 0114 	sub.w	r1, r0, #20
 8012c0e:	291e      	cmp	r1, #30
 8012c10:	bfda      	itte	le
 8012c12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012c16:	fa20 f101 	lsrle.w	r1, r0, r1
 8012c1a:	2101      	movgt	r1, #1
 8012c1c:	460a      	mov	r2, r1
 8012c1e:	e7e1      	b.n	8012be4 <__ulp+0x18>
 8012c20:	7ff00000 	.word	0x7ff00000

08012c24 <__b2d>:
 8012c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c26:	6905      	ldr	r5, [r0, #16]
 8012c28:	f100 0714 	add.w	r7, r0, #20
 8012c2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012c30:	1f2e      	subs	r6, r5, #4
 8012c32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012c36:	4620      	mov	r0, r4
 8012c38:	f7ff fd52 	bl	80126e0 <__hi0bits>
 8012c3c:	f1c0 0320 	rsb	r3, r0, #32
 8012c40:	280a      	cmp	r0, #10
 8012c42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012cc0 <__b2d+0x9c>
 8012c46:	600b      	str	r3, [r1, #0]
 8012c48:	dc14      	bgt.n	8012c74 <__b2d+0x50>
 8012c4a:	f1c0 0e0b 	rsb	lr, r0, #11
 8012c4e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012c52:	42b7      	cmp	r7, r6
 8012c54:	ea41 030c 	orr.w	r3, r1, ip
 8012c58:	bf34      	ite	cc
 8012c5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012c5e:	2100      	movcs	r1, #0
 8012c60:	3015      	adds	r0, #21
 8012c62:	fa04 f000 	lsl.w	r0, r4, r0
 8012c66:	fa21 f10e 	lsr.w	r1, r1, lr
 8012c6a:	ea40 0201 	orr.w	r2, r0, r1
 8012c6e:	ec43 2b10 	vmov	d0, r2, r3
 8012c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c74:	42b7      	cmp	r7, r6
 8012c76:	bf3a      	itte	cc
 8012c78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012c7c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012c80:	2100      	movcs	r1, #0
 8012c82:	380b      	subs	r0, #11
 8012c84:	d017      	beq.n	8012cb6 <__b2d+0x92>
 8012c86:	f1c0 0c20 	rsb	ip, r0, #32
 8012c8a:	fa04 f500 	lsl.w	r5, r4, r0
 8012c8e:	42be      	cmp	r6, r7
 8012c90:	fa21 f40c 	lsr.w	r4, r1, ip
 8012c94:	ea45 0504 	orr.w	r5, r5, r4
 8012c98:	bf8c      	ite	hi
 8012c9a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012c9e:	2400      	movls	r4, #0
 8012ca0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012ca4:	fa01 f000 	lsl.w	r0, r1, r0
 8012ca8:	fa24 f40c 	lsr.w	r4, r4, ip
 8012cac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012cb0:	ea40 0204 	orr.w	r2, r0, r4
 8012cb4:	e7db      	b.n	8012c6e <__b2d+0x4a>
 8012cb6:	ea44 030c 	orr.w	r3, r4, ip
 8012cba:	460a      	mov	r2, r1
 8012cbc:	e7d7      	b.n	8012c6e <__b2d+0x4a>
 8012cbe:	bf00      	nop
 8012cc0:	3ff00000 	.word	0x3ff00000

08012cc4 <__d2b>:
 8012cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012cc8:	4689      	mov	r9, r1
 8012cca:	2101      	movs	r1, #1
 8012ccc:	ec57 6b10 	vmov	r6, r7, d0
 8012cd0:	4690      	mov	r8, r2
 8012cd2:	f7ff fc0f 	bl	80124f4 <_Balloc>
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	b930      	cbnz	r0, 8012ce8 <__d2b+0x24>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	4b25      	ldr	r3, [pc, #148]	; (8012d74 <__d2b+0xb0>)
 8012cde:	4826      	ldr	r0, [pc, #152]	; (8012d78 <__d2b+0xb4>)
 8012ce0:	f240 310a 	movw	r1, #778	; 0x30a
 8012ce4:	f000 fd6a 	bl	80137bc <__assert_func>
 8012ce8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012cec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012cf0:	bb35      	cbnz	r5, 8012d40 <__d2b+0x7c>
 8012cf2:	2e00      	cmp	r6, #0
 8012cf4:	9301      	str	r3, [sp, #4]
 8012cf6:	d028      	beq.n	8012d4a <__d2b+0x86>
 8012cf8:	4668      	mov	r0, sp
 8012cfa:	9600      	str	r6, [sp, #0]
 8012cfc:	f7ff fd10 	bl	8012720 <__lo0bits>
 8012d00:	9900      	ldr	r1, [sp, #0]
 8012d02:	b300      	cbz	r0, 8012d46 <__d2b+0x82>
 8012d04:	9a01      	ldr	r2, [sp, #4]
 8012d06:	f1c0 0320 	rsb	r3, r0, #32
 8012d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8012d0e:	430b      	orrs	r3, r1
 8012d10:	40c2      	lsrs	r2, r0
 8012d12:	6163      	str	r3, [r4, #20]
 8012d14:	9201      	str	r2, [sp, #4]
 8012d16:	9b01      	ldr	r3, [sp, #4]
 8012d18:	61a3      	str	r3, [r4, #24]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	bf14      	ite	ne
 8012d1e:	2202      	movne	r2, #2
 8012d20:	2201      	moveq	r2, #1
 8012d22:	6122      	str	r2, [r4, #16]
 8012d24:	b1d5      	cbz	r5, 8012d5c <__d2b+0x98>
 8012d26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012d2a:	4405      	add	r5, r0
 8012d2c:	f8c9 5000 	str.w	r5, [r9]
 8012d30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012d34:	f8c8 0000 	str.w	r0, [r8]
 8012d38:	4620      	mov	r0, r4
 8012d3a:	b003      	add	sp, #12
 8012d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012d44:	e7d5      	b.n	8012cf2 <__d2b+0x2e>
 8012d46:	6161      	str	r1, [r4, #20]
 8012d48:	e7e5      	b.n	8012d16 <__d2b+0x52>
 8012d4a:	a801      	add	r0, sp, #4
 8012d4c:	f7ff fce8 	bl	8012720 <__lo0bits>
 8012d50:	9b01      	ldr	r3, [sp, #4]
 8012d52:	6163      	str	r3, [r4, #20]
 8012d54:	2201      	movs	r2, #1
 8012d56:	6122      	str	r2, [r4, #16]
 8012d58:	3020      	adds	r0, #32
 8012d5a:	e7e3      	b.n	8012d24 <__d2b+0x60>
 8012d5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012d60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012d64:	f8c9 0000 	str.w	r0, [r9]
 8012d68:	6918      	ldr	r0, [r3, #16]
 8012d6a:	f7ff fcb9 	bl	80126e0 <__hi0bits>
 8012d6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012d72:	e7df      	b.n	8012d34 <__d2b+0x70>
 8012d74:	080154e0 	.word	0x080154e0
 8012d78:	08015587 	.word	0x08015587

08012d7c <__ratio>:
 8012d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d80:	4688      	mov	r8, r1
 8012d82:	4669      	mov	r1, sp
 8012d84:	4681      	mov	r9, r0
 8012d86:	f7ff ff4d 	bl	8012c24 <__b2d>
 8012d8a:	a901      	add	r1, sp, #4
 8012d8c:	4640      	mov	r0, r8
 8012d8e:	ec55 4b10 	vmov	r4, r5, d0
 8012d92:	f7ff ff47 	bl	8012c24 <__b2d>
 8012d96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012d9a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012d9e:	eba3 0c02 	sub.w	ip, r3, r2
 8012da2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012da6:	1a9b      	subs	r3, r3, r2
 8012da8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012dac:	ec51 0b10 	vmov	r0, r1, d0
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	bfd6      	itet	le
 8012db4:	460a      	movle	r2, r1
 8012db6:	462a      	movgt	r2, r5
 8012db8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012dbc:	468b      	mov	fp, r1
 8012dbe:	462f      	mov	r7, r5
 8012dc0:	bfd4      	ite	le
 8012dc2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012dc6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012dca:	4620      	mov	r0, r4
 8012dcc:	ee10 2a10 	vmov	r2, s0
 8012dd0:	465b      	mov	r3, fp
 8012dd2:	4639      	mov	r1, r7
 8012dd4:	f7ed fd52 	bl	800087c <__aeabi_ddiv>
 8012dd8:	ec41 0b10 	vmov	d0, r0, r1
 8012ddc:	b003      	add	sp, #12
 8012dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012de2 <__copybits>:
 8012de2:	3901      	subs	r1, #1
 8012de4:	b570      	push	{r4, r5, r6, lr}
 8012de6:	1149      	asrs	r1, r1, #5
 8012de8:	6914      	ldr	r4, [r2, #16]
 8012dea:	3101      	adds	r1, #1
 8012dec:	f102 0314 	add.w	r3, r2, #20
 8012df0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012df4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012df8:	1f05      	subs	r5, r0, #4
 8012dfa:	42a3      	cmp	r3, r4
 8012dfc:	d30c      	bcc.n	8012e18 <__copybits+0x36>
 8012dfe:	1aa3      	subs	r3, r4, r2
 8012e00:	3b11      	subs	r3, #17
 8012e02:	f023 0303 	bic.w	r3, r3, #3
 8012e06:	3211      	adds	r2, #17
 8012e08:	42a2      	cmp	r2, r4
 8012e0a:	bf88      	it	hi
 8012e0c:	2300      	movhi	r3, #0
 8012e0e:	4418      	add	r0, r3
 8012e10:	2300      	movs	r3, #0
 8012e12:	4288      	cmp	r0, r1
 8012e14:	d305      	bcc.n	8012e22 <__copybits+0x40>
 8012e16:	bd70      	pop	{r4, r5, r6, pc}
 8012e18:	f853 6b04 	ldr.w	r6, [r3], #4
 8012e1c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012e20:	e7eb      	b.n	8012dfa <__copybits+0x18>
 8012e22:	f840 3b04 	str.w	r3, [r0], #4
 8012e26:	e7f4      	b.n	8012e12 <__copybits+0x30>

08012e28 <__any_on>:
 8012e28:	f100 0214 	add.w	r2, r0, #20
 8012e2c:	6900      	ldr	r0, [r0, #16]
 8012e2e:	114b      	asrs	r3, r1, #5
 8012e30:	4298      	cmp	r0, r3
 8012e32:	b510      	push	{r4, lr}
 8012e34:	db11      	blt.n	8012e5a <__any_on+0x32>
 8012e36:	dd0a      	ble.n	8012e4e <__any_on+0x26>
 8012e38:	f011 011f 	ands.w	r1, r1, #31
 8012e3c:	d007      	beq.n	8012e4e <__any_on+0x26>
 8012e3e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012e42:	fa24 f001 	lsr.w	r0, r4, r1
 8012e46:	fa00 f101 	lsl.w	r1, r0, r1
 8012e4a:	428c      	cmp	r4, r1
 8012e4c:	d10b      	bne.n	8012e66 <__any_on+0x3e>
 8012e4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012e52:	4293      	cmp	r3, r2
 8012e54:	d803      	bhi.n	8012e5e <__any_on+0x36>
 8012e56:	2000      	movs	r0, #0
 8012e58:	bd10      	pop	{r4, pc}
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	e7f7      	b.n	8012e4e <__any_on+0x26>
 8012e5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e62:	2900      	cmp	r1, #0
 8012e64:	d0f5      	beq.n	8012e52 <__any_on+0x2a>
 8012e66:	2001      	movs	r0, #1
 8012e68:	e7f6      	b.n	8012e58 <__any_on+0x30>

08012e6a <_calloc_r>:
 8012e6a:	b513      	push	{r0, r1, r4, lr}
 8012e6c:	434a      	muls	r2, r1
 8012e6e:	4611      	mov	r1, r2
 8012e70:	9201      	str	r2, [sp, #4]
 8012e72:	f7fd fb59 	bl	8010528 <_malloc_r>
 8012e76:	4604      	mov	r4, r0
 8012e78:	b118      	cbz	r0, 8012e82 <_calloc_r+0x18>
 8012e7a:	9a01      	ldr	r2, [sp, #4]
 8012e7c:	2100      	movs	r1, #0
 8012e7e:	f7fd fafb 	bl	8010478 <memset>
 8012e82:	4620      	mov	r0, r4
 8012e84:	b002      	add	sp, #8
 8012e86:	bd10      	pop	{r4, pc}

08012e88 <_realloc_r>:
 8012e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e8a:	4607      	mov	r7, r0
 8012e8c:	4614      	mov	r4, r2
 8012e8e:	460e      	mov	r6, r1
 8012e90:	b921      	cbnz	r1, 8012e9c <_realloc_r+0x14>
 8012e92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012e96:	4611      	mov	r1, r2
 8012e98:	f7fd bb46 	b.w	8010528 <_malloc_r>
 8012e9c:	b922      	cbnz	r2, 8012ea8 <_realloc_r+0x20>
 8012e9e:	f7fd faf3 	bl	8010488 <_free_r>
 8012ea2:	4625      	mov	r5, r4
 8012ea4:	4628      	mov	r0, r5
 8012ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ea8:	f000 fcf4 	bl	8013894 <_malloc_usable_size_r>
 8012eac:	42a0      	cmp	r0, r4
 8012eae:	d20f      	bcs.n	8012ed0 <_realloc_r+0x48>
 8012eb0:	4621      	mov	r1, r4
 8012eb2:	4638      	mov	r0, r7
 8012eb4:	f7fd fb38 	bl	8010528 <_malloc_r>
 8012eb8:	4605      	mov	r5, r0
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d0f2      	beq.n	8012ea4 <_realloc_r+0x1c>
 8012ebe:	4631      	mov	r1, r6
 8012ec0:	4622      	mov	r2, r4
 8012ec2:	f7fd facb 	bl	801045c <memcpy>
 8012ec6:	4631      	mov	r1, r6
 8012ec8:	4638      	mov	r0, r7
 8012eca:	f7fd fadd 	bl	8010488 <_free_r>
 8012ece:	e7e9      	b.n	8012ea4 <_realloc_r+0x1c>
 8012ed0:	4635      	mov	r5, r6
 8012ed2:	e7e7      	b.n	8012ea4 <_realloc_r+0x1c>

08012ed4 <__ssputs_r>:
 8012ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed8:	688e      	ldr	r6, [r1, #8]
 8012eda:	429e      	cmp	r6, r3
 8012edc:	4682      	mov	sl, r0
 8012ede:	460c      	mov	r4, r1
 8012ee0:	4690      	mov	r8, r2
 8012ee2:	461f      	mov	r7, r3
 8012ee4:	d838      	bhi.n	8012f58 <__ssputs_r+0x84>
 8012ee6:	898a      	ldrh	r2, [r1, #12]
 8012ee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012eec:	d032      	beq.n	8012f54 <__ssputs_r+0x80>
 8012eee:	6825      	ldr	r5, [r4, #0]
 8012ef0:	6909      	ldr	r1, [r1, #16]
 8012ef2:	eba5 0901 	sub.w	r9, r5, r1
 8012ef6:	6965      	ldr	r5, [r4, #20]
 8012ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012efc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f00:	3301      	adds	r3, #1
 8012f02:	444b      	add	r3, r9
 8012f04:	106d      	asrs	r5, r5, #1
 8012f06:	429d      	cmp	r5, r3
 8012f08:	bf38      	it	cc
 8012f0a:	461d      	movcc	r5, r3
 8012f0c:	0553      	lsls	r3, r2, #21
 8012f0e:	d531      	bpl.n	8012f74 <__ssputs_r+0xa0>
 8012f10:	4629      	mov	r1, r5
 8012f12:	f7fd fb09 	bl	8010528 <_malloc_r>
 8012f16:	4606      	mov	r6, r0
 8012f18:	b950      	cbnz	r0, 8012f30 <__ssputs_r+0x5c>
 8012f1a:	230c      	movs	r3, #12
 8012f1c:	f8ca 3000 	str.w	r3, [sl]
 8012f20:	89a3      	ldrh	r3, [r4, #12]
 8012f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f26:	81a3      	strh	r3, [r4, #12]
 8012f28:	f04f 30ff 	mov.w	r0, #4294967295
 8012f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f30:	6921      	ldr	r1, [r4, #16]
 8012f32:	464a      	mov	r2, r9
 8012f34:	f7fd fa92 	bl	801045c <memcpy>
 8012f38:	89a3      	ldrh	r3, [r4, #12]
 8012f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f42:	81a3      	strh	r3, [r4, #12]
 8012f44:	6126      	str	r6, [r4, #16]
 8012f46:	6165      	str	r5, [r4, #20]
 8012f48:	444e      	add	r6, r9
 8012f4a:	eba5 0509 	sub.w	r5, r5, r9
 8012f4e:	6026      	str	r6, [r4, #0]
 8012f50:	60a5      	str	r5, [r4, #8]
 8012f52:	463e      	mov	r6, r7
 8012f54:	42be      	cmp	r6, r7
 8012f56:	d900      	bls.n	8012f5a <__ssputs_r+0x86>
 8012f58:	463e      	mov	r6, r7
 8012f5a:	4632      	mov	r2, r6
 8012f5c:	6820      	ldr	r0, [r4, #0]
 8012f5e:	4641      	mov	r1, r8
 8012f60:	f000 fc7e 	bl	8013860 <memmove>
 8012f64:	68a3      	ldr	r3, [r4, #8]
 8012f66:	6822      	ldr	r2, [r4, #0]
 8012f68:	1b9b      	subs	r3, r3, r6
 8012f6a:	4432      	add	r2, r6
 8012f6c:	60a3      	str	r3, [r4, #8]
 8012f6e:	6022      	str	r2, [r4, #0]
 8012f70:	2000      	movs	r0, #0
 8012f72:	e7db      	b.n	8012f2c <__ssputs_r+0x58>
 8012f74:	462a      	mov	r2, r5
 8012f76:	f7ff ff87 	bl	8012e88 <_realloc_r>
 8012f7a:	4606      	mov	r6, r0
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	d1e1      	bne.n	8012f44 <__ssputs_r+0x70>
 8012f80:	6921      	ldr	r1, [r4, #16]
 8012f82:	4650      	mov	r0, sl
 8012f84:	f7fd fa80 	bl	8010488 <_free_r>
 8012f88:	e7c7      	b.n	8012f1a <__ssputs_r+0x46>
	...

08012f8c <_svfiprintf_r>:
 8012f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f90:	4698      	mov	r8, r3
 8012f92:	898b      	ldrh	r3, [r1, #12]
 8012f94:	061b      	lsls	r3, r3, #24
 8012f96:	b09d      	sub	sp, #116	; 0x74
 8012f98:	4607      	mov	r7, r0
 8012f9a:	460d      	mov	r5, r1
 8012f9c:	4614      	mov	r4, r2
 8012f9e:	d50e      	bpl.n	8012fbe <_svfiprintf_r+0x32>
 8012fa0:	690b      	ldr	r3, [r1, #16]
 8012fa2:	b963      	cbnz	r3, 8012fbe <_svfiprintf_r+0x32>
 8012fa4:	2140      	movs	r1, #64	; 0x40
 8012fa6:	f7fd fabf 	bl	8010528 <_malloc_r>
 8012faa:	6028      	str	r0, [r5, #0]
 8012fac:	6128      	str	r0, [r5, #16]
 8012fae:	b920      	cbnz	r0, 8012fba <_svfiprintf_r+0x2e>
 8012fb0:	230c      	movs	r3, #12
 8012fb2:	603b      	str	r3, [r7, #0]
 8012fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fb8:	e0d1      	b.n	801315e <_svfiprintf_r+0x1d2>
 8012fba:	2340      	movs	r3, #64	; 0x40
 8012fbc:	616b      	str	r3, [r5, #20]
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8012fc2:	2320      	movs	r3, #32
 8012fc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8012fcc:	2330      	movs	r3, #48	; 0x30
 8012fce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013178 <_svfiprintf_r+0x1ec>
 8012fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012fd6:	f04f 0901 	mov.w	r9, #1
 8012fda:	4623      	mov	r3, r4
 8012fdc:	469a      	mov	sl, r3
 8012fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fe2:	b10a      	cbz	r2, 8012fe8 <_svfiprintf_r+0x5c>
 8012fe4:	2a25      	cmp	r2, #37	; 0x25
 8012fe6:	d1f9      	bne.n	8012fdc <_svfiprintf_r+0x50>
 8012fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8012fec:	d00b      	beq.n	8013006 <_svfiprintf_r+0x7a>
 8012fee:	465b      	mov	r3, fp
 8012ff0:	4622      	mov	r2, r4
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	4638      	mov	r0, r7
 8012ff6:	f7ff ff6d 	bl	8012ed4 <__ssputs_r>
 8012ffa:	3001      	adds	r0, #1
 8012ffc:	f000 80aa 	beq.w	8013154 <_svfiprintf_r+0x1c8>
 8013000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013002:	445a      	add	r2, fp
 8013004:	9209      	str	r2, [sp, #36]	; 0x24
 8013006:	f89a 3000 	ldrb.w	r3, [sl]
 801300a:	2b00      	cmp	r3, #0
 801300c:	f000 80a2 	beq.w	8013154 <_svfiprintf_r+0x1c8>
 8013010:	2300      	movs	r3, #0
 8013012:	f04f 32ff 	mov.w	r2, #4294967295
 8013016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801301a:	f10a 0a01 	add.w	sl, sl, #1
 801301e:	9304      	str	r3, [sp, #16]
 8013020:	9307      	str	r3, [sp, #28]
 8013022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013026:	931a      	str	r3, [sp, #104]	; 0x68
 8013028:	4654      	mov	r4, sl
 801302a:	2205      	movs	r2, #5
 801302c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013030:	4851      	ldr	r0, [pc, #324]	; (8013178 <_svfiprintf_r+0x1ec>)
 8013032:	f7ed f8ed 	bl	8000210 <memchr>
 8013036:	9a04      	ldr	r2, [sp, #16]
 8013038:	b9d8      	cbnz	r0, 8013072 <_svfiprintf_r+0xe6>
 801303a:	06d0      	lsls	r0, r2, #27
 801303c:	bf44      	itt	mi
 801303e:	2320      	movmi	r3, #32
 8013040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013044:	0711      	lsls	r1, r2, #28
 8013046:	bf44      	itt	mi
 8013048:	232b      	movmi	r3, #43	; 0x2b
 801304a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801304e:	f89a 3000 	ldrb.w	r3, [sl]
 8013052:	2b2a      	cmp	r3, #42	; 0x2a
 8013054:	d015      	beq.n	8013082 <_svfiprintf_r+0xf6>
 8013056:	9a07      	ldr	r2, [sp, #28]
 8013058:	4654      	mov	r4, sl
 801305a:	2000      	movs	r0, #0
 801305c:	f04f 0c0a 	mov.w	ip, #10
 8013060:	4621      	mov	r1, r4
 8013062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013066:	3b30      	subs	r3, #48	; 0x30
 8013068:	2b09      	cmp	r3, #9
 801306a:	d94e      	bls.n	801310a <_svfiprintf_r+0x17e>
 801306c:	b1b0      	cbz	r0, 801309c <_svfiprintf_r+0x110>
 801306e:	9207      	str	r2, [sp, #28]
 8013070:	e014      	b.n	801309c <_svfiprintf_r+0x110>
 8013072:	eba0 0308 	sub.w	r3, r0, r8
 8013076:	fa09 f303 	lsl.w	r3, r9, r3
 801307a:	4313      	orrs	r3, r2
 801307c:	9304      	str	r3, [sp, #16]
 801307e:	46a2      	mov	sl, r4
 8013080:	e7d2      	b.n	8013028 <_svfiprintf_r+0x9c>
 8013082:	9b03      	ldr	r3, [sp, #12]
 8013084:	1d19      	adds	r1, r3, #4
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	9103      	str	r1, [sp, #12]
 801308a:	2b00      	cmp	r3, #0
 801308c:	bfbb      	ittet	lt
 801308e:	425b      	neglt	r3, r3
 8013090:	f042 0202 	orrlt.w	r2, r2, #2
 8013094:	9307      	strge	r3, [sp, #28]
 8013096:	9307      	strlt	r3, [sp, #28]
 8013098:	bfb8      	it	lt
 801309a:	9204      	strlt	r2, [sp, #16]
 801309c:	7823      	ldrb	r3, [r4, #0]
 801309e:	2b2e      	cmp	r3, #46	; 0x2e
 80130a0:	d10c      	bne.n	80130bc <_svfiprintf_r+0x130>
 80130a2:	7863      	ldrb	r3, [r4, #1]
 80130a4:	2b2a      	cmp	r3, #42	; 0x2a
 80130a6:	d135      	bne.n	8013114 <_svfiprintf_r+0x188>
 80130a8:	9b03      	ldr	r3, [sp, #12]
 80130aa:	1d1a      	adds	r2, r3, #4
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	9203      	str	r2, [sp, #12]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	bfb8      	it	lt
 80130b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80130b8:	3402      	adds	r4, #2
 80130ba:	9305      	str	r3, [sp, #20]
 80130bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013188 <_svfiprintf_r+0x1fc>
 80130c0:	7821      	ldrb	r1, [r4, #0]
 80130c2:	2203      	movs	r2, #3
 80130c4:	4650      	mov	r0, sl
 80130c6:	f7ed f8a3 	bl	8000210 <memchr>
 80130ca:	b140      	cbz	r0, 80130de <_svfiprintf_r+0x152>
 80130cc:	2340      	movs	r3, #64	; 0x40
 80130ce:	eba0 000a 	sub.w	r0, r0, sl
 80130d2:	fa03 f000 	lsl.w	r0, r3, r0
 80130d6:	9b04      	ldr	r3, [sp, #16]
 80130d8:	4303      	orrs	r3, r0
 80130da:	3401      	adds	r4, #1
 80130dc:	9304      	str	r3, [sp, #16]
 80130de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130e2:	4826      	ldr	r0, [pc, #152]	; (801317c <_svfiprintf_r+0x1f0>)
 80130e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80130e8:	2206      	movs	r2, #6
 80130ea:	f7ed f891 	bl	8000210 <memchr>
 80130ee:	2800      	cmp	r0, #0
 80130f0:	d038      	beq.n	8013164 <_svfiprintf_r+0x1d8>
 80130f2:	4b23      	ldr	r3, [pc, #140]	; (8013180 <_svfiprintf_r+0x1f4>)
 80130f4:	bb1b      	cbnz	r3, 801313e <_svfiprintf_r+0x1b2>
 80130f6:	9b03      	ldr	r3, [sp, #12]
 80130f8:	3307      	adds	r3, #7
 80130fa:	f023 0307 	bic.w	r3, r3, #7
 80130fe:	3308      	adds	r3, #8
 8013100:	9303      	str	r3, [sp, #12]
 8013102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013104:	4433      	add	r3, r6
 8013106:	9309      	str	r3, [sp, #36]	; 0x24
 8013108:	e767      	b.n	8012fda <_svfiprintf_r+0x4e>
 801310a:	fb0c 3202 	mla	r2, ip, r2, r3
 801310e:	460c      	mov	r4, r1
 8013110:	2001      	movs	r0, #1
 8013112:	e7a5      	b.n	8013060 <_svfiprintf_r+0xd4>
 8013114:	2300      	movs	r3, #0
 8013116:	3401      	adds	r4, #1
 8013118:	9305      	str	r3, [sp, #20]
 801311a:	4619      	mov	r1, r3
 801311c:	f04f 0c0a 	mov.w	ip, #10
 8013120:	4620      	mov	r0, r4
 8013122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013126:	3a30      	subs	r2, #48	; 0x30
 8013128:	2a09      	cmp	r2, #9
 801312a:	d903      	bls.n	8013134 <_svfiprintf_r+0x1a8>
 801312c:	2b00      	cmp	r3, #0
 801312e:	d0c5      	beq.n	80130bc <_svfiprintf_r+0x130>
 8013130:	9105      	str	r1, [sp, #20]
 8013132:	e7c3      	b.n	80130bc <_svfiprintf_r+0x130>
 8013134:	fb0c 2101 	mla	r1, ip, r1, r2
 8013138:	4604      	mov	r4, r0
 801313a:	2301      	movs	r3, #1
 801313c:	e7f0      	b.n	8013120 <_svfiprintf_r+0x194>
 801313e:	ab03      	add	r3, sp, #12
 8013140:	9300      	str	r3, [sp, #0]
 8013142:	462a      	mov	r2, r5
 8013144:	4b0f      	ldr	r3, [pc, #60]	; (8013184 <_svfiprintf_r+0x1f8>)
 8013146:	a904      	add	r1, sp, #16
 8013148:	4638      	mov	r0, r7
 801314a:	f3af 8000 	nop.w
 801314e:	1c42      	adds	r2, r0, #1
 8013150:	4606      	mov	r6, r0
 8013152:	d1d6      	bne.n	8013102 <_svfiprintf_r+0x176>
 8013154:	89ab      	ldrh	r3, [r5, #12]
 8013156:	065b      	lsls	r3, r3, #25
 8013158:	f53f af2c 	bmi.w	8012fb4 <_svfiprintf_r+0x28>
 801315c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801315e:	b01d      	add	sp, #116	; 0x74
 8013160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013164:	ab03      	add	r3, sp, #12
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	462a      	mov	r2, r5
 801316a:	4b06      	ldr	r3, [pc, #24]	; (8013184 <_svfiprintf_r+0x1f8>)
 801316c:	a904      	add	r1, sp, #16
 801316e:	4638      	mov	r0, r7
 8013170:	f000 f9d4 	bl	801351c <_printf_i>
 8013174:	e7eb      	b.n	801314e <_svfiprintf_r+0x1c2>
 8013176:	bf00      	nop
 8013178:	080156e4 	.word	0x080156e4
 801317c:	080156ee 	.word	0x080156ee
 8013180:	00000000 	.word	0x00000000
 8013184:	08012ed5 	.word	0x08012ed5
 8013188:	080156ea 	.word	0x080156ea

0801318c <__sfputc_r>:
 801318c:	6893      	ldr	r3, [r2, #8]
 801318e:	3b01      	subs	r3, #1
 8013190:	2b00      	cmp	r3, #0
 8013192:	b410      	push	{r4}
 8013194:	6093      	str	r3, [r2, #8]
 8013196:	da08      	bge.n	80131aa <__sfputc_r+0x1e>
 8013198:	6994      	ldr	r4, [r2, #24]
 801319a:	42a3      	cmp	r3, r4
 801319c:	db01      	blt.n	80131a2 <__sfputc_r+0x16>
 801319e:	290a      	cmp	r1, #10
 80131a0:	d103      	bne.n	80131aa <__sfputc_r+0x1e>
 80131a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131a6:	f7fe bb05 	b.w	80117b4 <__swbuf_r>
 80131aa:	6813      	ldr	r3, [r2, #0]
 80131ac:	1c58      	adds	r0, r3, #1
 80131ae:	6010      	str	r0, [r2, #0]
 80131b0:	7019      	strb	r1, [r3, #0]
 80131b2:	4608      	mov	r0, r1
 80131b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131b8:	4770      	bx	lr

080131ba <__sfputs_r>:
 80131ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131bc:	4606      	mov	r6, r0
 80131be:	460f      	mov	r7, r1
 80131c0:	4614      	mov	r4, r2
 80131c2:	18d5      	adds	r5, r2, r3
 80131c4:	42ac      	cmp	r4, r5
 80131c6:	d101      	bne.n	80131cc <__sfputs_r+0x12>
 80131c8:	2000      	movs	r0, #0
 80131ca:	e007      	b.n	80131dc <__sfputs_r+0x22>
 80131cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131d0:	463a      	mov	r2, r7
 80131d2:	4630      	mov	r0, r6
 80131d4:	f7ff ffda 	bl	801318c <__sfputc_r>
 80131d8:	1c43      	adds	r3, r0, #1
 80131da:	d1f3      	bne.n	80131c4 <__sfputs_r+0xa>
 80131dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080131e0 <_vfiprintf_r>:
 80131e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e4:	460d      	mov	r5, r1
 80131e6:	b09d      	sub	sp, #116	; 0x74
 80131e8:	4614      	mov	r4, r2
 80131ea:	4698      	mov	r8, r3
 80131ec:	4606      	mov	r6, r0
 80131ee:	b118      	cbz	r0, 80131f8 <_vfiprintf_r+0x18>
 80131f0:	6983      	ldr	r3, [r0, #24]
 80131f2:	b90b      	cbnz	r3, 80131f8 <_vfiprintf_r+0x18>
 80131f4:	f7fe fcda 	bl	8011bac <__sinit>
 80131f8:	4b89      	ldr	r3, [pc, #548]	; (8013420 <_vfiprintf_r+0x240>)
 80131fa:	429d      	cmp	r5, r3
 80131fc:	d11b      	bne.n	8013236 <_vfiprintf_r+0x56>
 80131fe:	6875      	ldr	r5, [r6, #4]
 8013200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013202:	07d9      	lsls	r1, r3, #31
 8013204:	d405      	bmi.n	8013212 <_vfiprintf_r+0x32>
 8013206:	89ab      	ldrh	r3, [r5, #12]
 8013208:	059a      	lsls	r2, r3, #22
 801320a:	d402      	bmi.n	8013212 <_vfiprintf_r+0x32>
 801320c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801320e:	f7ff f8da 	bl	80123c6 <__retarget_lock_acquire_recursive>
 8013212:	89ab      	ldrh	r3, [r5, #12]
 8013214:	071b      	lsls	r3, r3, #28
 8013216:	d501      	bpl.n	801321c <_vfiprintf_r+0x3c>
 8013218:	692b      	ldr	r3, [r5, #16]
 801321a:	b9eb      	cbnz	r3, 8013258 <_vfiprintf_r+0x78>
 801321c:	4629      	mov	r1, r5
 801321e:	4630      	mov	r0, r6
 8013220:	f7fe fb2c 	bl	801187c <__swsetup_r>
 8013224:	b1c0      	cbz	r0, 8013258 <_vfiprintf_r+0x78>
 8013226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013228:	07dc      	lsls	r4, r3, #31
 801322a:	d50e      	bpl.n	801324a <_vfiprintf_r+0x6a>
 801322c:	f04f 30ff 	mov.w	r0, #4294967295
 8013230:	b01d      	add	sp, #116	; 0x74
 8013232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013236:	4b7b      	ldr	r3, [pc, #492]	; (8013424 <_vfiprintf_r+0x244>)
 8013238:	429d      	cmp	r5, r3
 801323a:	d101      	bne.n	8013240 <_vfiprintf_r+0x60>
 801323c:	68b5      	ldr	r5, [r6, #8]
 801323e:	e7df      	b.n	8013200 <_vfiprintf_r+0x20>
 8013240:	4b79      	ldr	r3, [pc, #484]	; (8013428 <_vfiprintf_r+0x248>)
 8013242:	429d      	cmp	r5, r3
 8013244:	bf08      	it	eq
 8013246:	68f5      	ldreq	r5, [r6, #12]
 8013248:	e7da      	b.n	8013200 <_vfiprintf_r+0x20>
 801324a:	89ab      	ldrh	r3, [r5, #12]
 801324c:	0598      	lsls	r0, r3, #22
 801324e:	d4ed      	bmi.n	801322c <_vfiprintf_r+0x4c>
 8013250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013252:	f7ff f8b9 	bl	80123c8 <__retarget_lock_release_recursive>
 8013256:	e7e9      	b.n	801322c <_vfiprintf_r+0x4c>
 8013258:	2300      	movs	r3, #0
 801325a:	9309      	str	r3, [sp, #36]	; 0x24
 801325c:	2320      	movs	r3, #32
 801325e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013262:	f8cd 800c 	str.w	r8, [sp, #12]
 8013266:	2330      	movs	r3, #48	; 0x30
 8013268:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801342c <_vfiprintf_r+0x24c>
 801326c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013270:	f04f 0901 	mov.w	r9, #1
 8013274:	4623      	mov	r3, r4
 8013276:	469a      	mov	sl, r3
 8013278:	f813 2b01 	ldrb.w	r2, [r3], #1
 801327c:	b10a      	cbz	r2, 8013282 <_vfiprintf_r+0xa2>
 801327e:	2a25      	cmp	r2, #37	; 0x25
 8013280:	d1f9      	bne.n	8013276 <_vfiprintf_r+0x96>
 8013282:	ebba 0b04 	subs.w	fp, sl, r4
 8013286:	d00b      	beq.n	80132a0 <_vfiprintf_r+0xc0>
 8013288:	465b      	mov	r3, fp
 801328a:	4622      	mov	r2, r4
 801328c:	4629      	mov	r1, r5
 801328e:	4630      	mov	r0, r6
 8013290:	f7ff ff93 	bl	80131ba <__sfputs_r>
 8013294:	3001      	adds	r0, #1
 8013296:	f000 80aa 	beq.w	80133ee <_vfiprintf_r+0x20e>
 801329a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801329c:	445a      	add	r2, fp
 801329e:	9209      	str	r2, [sp, #36]	; 0x24
 80132a0:	f89a 3000 	ldrb.w	r3, [sl]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	f000 80a2 	beq.w	80133ee <_vfiprintf_r+0x20e>
 80132aa:	2300      	movs	r3, #0
 80132ac:	f04f 32ff 	mov.w	r2, #4294967295
 80132b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132b4:	f10a 0a01 	add.w	sl, sl, #1
 80132b8:	9304      	str	r3, [sp, #16]
 80132ba:	9307      	str	r3, [sp, #28]
 80132bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80132c0:	931a      	str	r3, [sp, #104]	; 0x68
 80132c2:	4654      	mov	r4, sl
 80132c4:	2205      	movs	r2, #5
 80132c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132ca:	4858      	ldr	r0, [pc, #352]	; (801342c <_vfiprintf_r+0x24c>)
 80132cc:	f7ec ffa0 	bl	8000210 <memchr>
 80132d0:	9a04      	ldr	r2, [sp, #16]
 80132d2:	b9d8      	cbnz	r0, 801330c <_vfiprintf_r+0x12c>
 80132d4:	06d1      	lsls	r1, r2, #27
 80132d6:	bf44      	itt	mi
 80132d8:	2320      	movmi	r3, #32
 80132da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132de:	0713      	lsls	r3, r2, #28
 80132e0:	bf44      	itt	mi
 80132e2:	232b      	movmi	r3, #43	; 0x2b
 80132e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132e8:	f89a 3000 	ldrb.w	r3, [sl]
 80132ec:	2b2a      	cmp	r3, #42	; 0x2a
 80132ee:	d015      	beq.n	801331c <_vfiprintf_r+0x13c>
 80132f0:	9a07      	ldr	r2, [sp, #28]
 80132f2:	4654      	mov	r4, sl
 80132f4:	2000      	movs	r0, #0
 80132f6:	f04f 0c0a 	mov.w	ip, #10
 80132fa:	4621      	mov	r1, r4
 80132fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013300:	3b30      	subs	r3, #48	; 0x30
 8013302:	2b09      	cmp	r3, #9
 8013304:	d94e      	bls.n	80133a4 <_vfiprintf_r+0x1c4>
 8013306:	b1b0      	cbz	r0, 8013336 <_vfiprintf_r+0x156>
 8013308:	9207      	str	r2, [sp, #28]
 801330a:	e014      	b.n	8013336 <_vfiprintf_r+0x156>
 801330c:	eba0 0308 	sub.w	r3, r0, r8
 8013310:	fa09 f303 	lsl.w	r3, r9, r3
 8013314:	4313      	orrs	r3, r2
 8013316:	9304      	str	r3, [sp, #16]
 8013318:	46a2      	mov	sl, r4
 801331a:	e7d2      	b.n	80132c2 <_vfiprintf_r+0xe2>
 801331c:	9b03      	ldr	r3, [sp, #12]
 801331e:	1d19      	adds	r1, r3, #4
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	9103      	str	r1, [sp, #12]
 8013324:	2b00      	cmp	r3, #0
 8013326:	bfbb      	ittet	lt
 8013328:	425b      	neglt	r3, r3
 801332a:	f042 0202 	orrlt.w	r2, r2, #2
 801332e:	9307      	strge	r3, [sp, #28]
 8013330:	9307      	strlt	r3, [sp, #28]
 8013332:	bfb8      	it	lt
 8013334:	9204      	strlt	r2, [sp, #16]
 8013336:	7823      	ldrb	r3, [r4, #0]
 8013338:	2b2e      	cmp	r3, #46	; 0x2e
 801333a:	d10c      	bne.n	8013356 <_vfiprintf_r+0x176>
 801333c:	7863      	ldrb	r3, [r4, #1]
 801333e:	2b2a      	cmp	r3, #42	; 0x2a
 8013340:	d135      	bne.n	80133ae <_vfiprintf_r+0x1ce>
 8013342:	9b03      	ldr	r3, [sp, #12]
 8013344:	1d1a      	adds	r2, r3, #4
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	9203      	str	r2, [sp, #12]
 801334a:	2b00      	cmp	r3, #0
 801334c:	bfb8      	it	lt
 801334e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013352:	3402      	adds	r4, #2
 8013354:	9305      	str	r3, [sp, #20]
 8013356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801343c <_vfiprintf_r+0x25c>
 801335a:	7821      	ldrb	r1, [r4, #0]
 801335c:	2203      	movs	r2, #3
 801335e:	4650      	mov	r0, sl
 8013360:	f7ec ff56 	bl	8000210 <memchr>
 8013364:	b140      	cbz	r0, 8013378 <_vfiprintf_r+0x198>
 8013366:	2340      	movs	r3, #64	; 0x40
 8013368:	eba0 000a 	sub.w	r0, r0, sl
 801336c:	fa03 f000 	lsl.w	r0, r3, r0
 8013370:	9b04      	ldr	r3, [sp, #16]
 8013372:	4303      	orrs	r3, r0
 8013374:	3401      	adds	r4, #1
 8013376:	9304      	str	r3, [sp, #16]
 8013378:	f814 1b01 	ldrb.w	r1, [r4], #1
 801337c:	482c      	ldr	r0, [pc, #176]	; (8013430 <_vfiprintf_r+0x250>)
 801337e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013382:	2206      	movs	r2, #6
 8013384:	f7ec ff44 	bl	8000210 <memchr>
 8013388:	2800      	cmp	r0, #0
 801338a:	d03f      	beq.n	801340c <_vfiprintf_r+0x22c>
 801338c:	4b29      	ldr	r3, [pc, #164]	; (8013434 <_vfiprintf_r+0x254>)
 801338e:	bb1b      	cbnz	r3, 80133d8 <_vfiprintf_r+0x1f8>
 8013390:	9b03      	ldr	r3, [sp, #12]
 8013392:	3307      	adds	r3, #7
 8013394:	f023 0307 	bic.w	r3, r3, #7
 8013398:	3308      	adds	r3, #8
 801339a:	9303      	str	r3, [sp, #12]
 801339c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801339e:	443b      	add	r3, r7
 80133a0:	9309      	str	r3, [sp, #36]	; 0x24
 80133a2:	e767      	b.n	8013274 <_vfiprintf_r+0x94>
 80133a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80133a8:	460c      	mov	r4, r1
 80133aa:	2001      	movs	r0, #1
 80133ac:	e7a5      	b.n	80132fa <_vfiprintf_r+0x11a>
 80133ae:	2300      	movs	r3, #0
 80133b0:	3401      	adds	r4, #1
 80133b2:	9305      	str	r3, [sp, #20]
 80133b4:	4619      	mov	r1, r3
 80133b6:	f04f 0c0a 	mov.w	ip, #10
 80133ba:	4620      	mov	r0, r4
 80133bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133c0:	3a30      	subs	r2, #48	; 0x30
 80133c2:	2a09      	cmp	r2, #9
 80133c4:	d903      	bls.n	80133ce <_vfiprintf_r+0x1ee>
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d0c5      	beq.n	8013356 <_vfiprintf_r+0x176>
 80133ca:	9105      	str	r1, [sp, #20]
 80133cc:	e7c3      	b.n	8013356 <_vfiprintf_r+0x176>
 80133ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80133d2:	4604      	mov	r4, r0
 80133d4:	2301      	movs	r3, #1
 80133d6:	e7f0      	b.n	80133ba <_vfiprintf_r+0x1da>
 80133d8:	ab03      	add	r3, sp, #12
 80133da:	9300      	str	r3, [sp, #0]
 80133dc:	462a      	mov	r2, r5
 80133de:	4b16      	ldr	r3, [pc, #88]	; (8013438 <_vfiprintf_r+0x258>)
 80133e0:	a904      	add	r1, sp, #16
 80133e2:	4630      	mov	r0, r6
 80133e4:	f3af 8000 	nop.w
 80133e8:	4607      	mov	r7, r0
 80133ea:	1c78      	adds	r0, r7, #1
 80133ec:	d1d6      	bne.n	801339c <_vfiprintf_r+0x1bc>
 80133ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133f0:	07d9      	lsls	r1, r3, #31
 80133f2:	d405      	bmi.n	8013400 <_vfiprintf_r+0x220>
 80133f4:	89ab      	ldrh	r3, [r5, #12]
 80133f6:	059a      	lsls	r2, r3, #22
 80133f8:	d402      	bmi.n	8013400 <_vfiprintf_r+0x220>
 80133fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133fc:	f7fe ffe4 	bl	80123c8 <__retarget_lock_release_recursive>
 8013400:	89ab      	ldrh	r3, [r5, #12]
 8013402:	065b      	lsls	r3, r3, #25
 8013404:	f53f af12 	bmi.w	801322c <_vfiprintf_r+0x4c>
 8013408:	9809      	ldr	r0, [sp, #36]	; 0x24
 801340a:	e711      	b.n	8013230 <_vfiprintf_r+0x50>
 801340c:	ab03      	add	r3, sp, #12
 801340e:	9300      	str	r3, [sp, #0]
 8013410:	462a      	mov	r2, r5
 8013412:	4b09      	ldr	r3, [pc, #36]	; (8013438 <_vfiprintf_r+0x258>)
 8013414:	a904      	add	r1, sp, #16
 8013416:	4630      	mov	r0, r6
 8013418:	f000 f880 	bl	801351c <_printf_i>
 801341c:	e7e4      	b.n	80133e8 <_vfiprintf_r+0x208>
 801341e:	bf00      	nop
 8013420:	080154a0 	.word	0x080154a0
 8013424:	080154c0 	.word	0x080154c0
 8013428:	08015480 	.word	0x08015480
 801342c:	080156e4 	.word	0x080156e4
 8013430:	080156ee 	.word	0x080156ee
 8013434:	00000000 	.word	0x00000000
 8013438:	080131bb 	.word	0x080131bb
 801343c:	080156ea 	.word	0x080156ea

08013440 <_printf_common>:
 8013440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013444:	4616      	mov	r6, r2
 8013446:	4699      	mov	r9, r3
 8013448:	688a      	ldr	r2, [r1, #8]
 801344a:	690b      	ldr	r3, [r1, #16]
 801344c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013450:	4293      	cmp	r3, r2
 8013452:	bfb8      	it	lt
 8013454:	4613      	movlt	r3, r2
 8013456:	6033      	str	r3, [r6, #0]
 8013458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801345c:	4607      	mov	r7, r0
 801345e:	460c      	mov	r4, r1
 8013460:	b10a      	cbz	r2, 8013466 <_printf_common+0x26>
 8013462:	3301      	adds	r3, #1
 8013464:	6033      	str	r3, [r6, #0]
 8013466:	6823      	ldr	r3, [r4, #0]
 8013468:	0699      	lsls	r1, r3, #26
 801346a:	bf42      	ittt	mi
 801346c:	6833      	ldrmi	r3, [r6, #0]
 801346e:	3302      	addmi	r3, #2
 8013470:	6033      	strmi	r3, [r6, #0]
 8013472:	6825      	ldr	r5, [r4, #0]
 8013474:	f015 0506 	ands.w	r5, r5, #6
 8013478:	d106      	bne.n	8013488 <_printf_common+0x48>
 801347a:	f104 0a19 	add.w	sl, r4, #25
 801347e:	68e3      	ldr	r3, [r4, #12]
 8013480:	6832      	ldr	r2, [r6, #0]
 8013482:	1a9b      	subs	r3, r3, r2
 8013484:	42ab      	cmp	r3, r5
 8013486:	dc26      	bgt.n	80134d6 <_printf_common+0x96>
 8013488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801348c:	1e13      	subs	r3, r2, #0
 801348e:	6822      	ldr	r2, [r4, #0]
 8013490:	bf18      	it	ne
 8013492:	2301      	movne	r3, #1
 8013494:	0692      	lsls	r2, r2, #26
 8013496:	d42b      	bmi.n	80134f0 <_printf_common+0xb0>
 8013498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801349c:	4649      	mov	r1, r9
 801349e:	4638      	mov	r0, r7
 80134a0:	47c0      	blx	r8
 80134a2:	3001      	adds	r0, #1
 80134a4:	d01e      	beq.n	80134e4 <_printf_common+0xa4>
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	68e5      	ldr	r5, [r4, #12]
 80134aa:	6832      	ldr	r2, [r6, #0]
 80134ac:	f003 0306 	and.w	r3, r3, #6
 80134b0:	2b04      	cmp	r3, #4
 80134b2:	bf08      	it	eq
 80134b4:	1aad      	subeq	r5, r5, r2
 80134b6:	68a3      	ldr	r3, [r4, #8]
 80134b8:	6922      	ldr	r2, [r4, #16]
 80134ba:	bf0c      	ite	eq
 80134bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134c0:	2500      	movne	r5, #0
 80134c2:	4293      	cmp	r3, r2
 80134c4:	bfc4      	itt	gt
 80134c6:	1a9b      	subgt	r3, r3, r2
 80134c8:	18ed      	addgt	r5, r5, r3
 80134ca:	2600      	movs	r6, #0
 80134cc:	341a      	adds	r4, #26
 80134ce:	42b5      	cmp	r5, r6
 80134d0:	d11a      	bne.n	8013508 <_printf_common+0xc8>
 80134d2:	2000      	movs	r0, #0
 80134d4:	e008      	b.n	80134e8 <_printf_common+0xa8>
 80134d6:	2301      	movs	r3, #1
 80134d8:	4652      	mov	r2, sl
 80134da:	4649      	mov	r1, r9
 80134dc:	4638      	mov	r0, r7
 80134de:	47c0      	blx	r8
 80134e0:	3001      	adds	r0, #1
 80134e2:	d103      	bne.n	80134ec <_printf_common+0xac>
 80134e4:	f04f 30ff 	mov.w	r0, #4294967295
 80134e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134ec:	3501      	adds	r5, #1
 80134ee:	e7c6      	b.n	801347e <_printf_common+0x3e>
 80134f0:	18e1      	adds	r1, r4, r3
 80134f2:	1c5a      	adds	r2, r3, #1
 80134f4:	2030      	movs	r0, #48	; 0x30
 80134f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80134fa:	4422      	add	r2, r4
 80134fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013504:	3302      	adds	r3, #2
 8013506:	e7c7      	b.n	8013498 <_printf_common+0x58>
 8013508:	2301      	movs	r3, #1
 801350a:	4622      	mov	r2, r4
 801350c:	4649      	mov	r1, r9
 801350e:	4638      	mov	r0, r7
 8013510:	47c0      	blx	r8
 8013512:	3001      	adds	r0, #1
 8013514:	d0e6      	beq.n	80134e4 <_printf_common+0xa4>
 8013516:	3601      	adds	r6, #1
 8013518:	e7d9      	b.n	80134ce <_printf_common+0x8e>
	...

0801351c <_printf_i>:
 801351c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013520:	460c      	mov	r4, r1
 8013522:	4691      	mov	r9, r2
 8013524:	7e27      	ldrb	r7, [r4, #24]
 8013526:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013528:	2f78      	cmp	r7, #120	; 0x78
 801352a:	4680      	mov	r8, r0
 801352c:	469a      	mov	sl, r3
 801352e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013532:	d807      	bhi.n	8013544 <_printf_i+0x28>
 8013534:	2f62      	cmp	r7, #98	; 0x62
 8013536:	d80a      	bhi.n	801354e <_printf_i+0x32>
 8013538:	2f00      	cmp	r7, #0
 801353a:	f000 80d8 	beq.w	80136ee <_printf_i+0x1d2>
 801353e:	2f58      	cmp	r7, #88	; 0x58
 8013540:	f000 80a3 	beq.w	801368a <_printf_i+0x16e>
 8013544:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801354c:	e03a      	b.n	80135c4 <_printf_i+0xa8>
 801354e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013552:	2b15      	cmp	r3, #21
 8013554:	d8f6      	bhi.n	8013544 <_printf_i+0x28>
 8013556:	a001      	add	r0, pc, #4	; (adr r0, 801355c <_printf_i+0x40>)
 8013558:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801355c:	080135b5 	.word	0x080135b5
 8013560:	080135c9 	.word	0x080135c9
 8013564:	08013545 	.word	0x08013545
 8013568:	08013545 	.word	0x08013545
 801356c:	08013545 	.word	0x08013545
 8013570:	08013545 	.word	0x08013545
 8013574:	080135c9 	.word	0x080135c9
 8013578:	08013545 	.word	0x08013545
 801357c:	08013545 	.word	0x08013545
 8013580:	08013545 	.word	0x08013545
 8013584:	08013545 	.word	0x08013545
 8013588:	080136d5 	.word	0x080136d5
 801358c:	080135f9 	.word	0x080135f9
 8013590:	080136b7 	.word	0x080136b7
 8013594:	08013545 	.word	0x08013545
 8013598:	08013545 	.word	0x08013545
 801359c:	080136f7 	.word	0x080136f7
 80135a0:	08013545 	.word	0x08013545
 80135a4:	080135f9 	.word	0x080135f9
 80135a8:	08013545 	.word	0x08013545
 80135ac:	08013545 	.word	0x08013545
 80135b0:	080136bf 	.word	0x080136bf
 80135b4:	680b      	ldr	r3, [r1, #0]
 80135b6:	1d1a      	adds	r2, r3, #4
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	600a      	str	r2, [r1, #0]
 80135bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80135c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80135c4:	2301      	movs	r3, #1
 80135c6:	e0a3      	b.n	8013710 <_printf_i+0x1f4>
 80135c8:	6825      	ldr	r5, [r4, #0]
 80135ca:	6808      	ldr	r0, [r1, #0]
 80135cc:	062e      	lsls	r6, r5, #24
 80135ce:	f100 0304 	add.w	r3, r0, #4
 80135d2:	d50a      	bpl.n	80135ea <_printf_i+0xce>
 80135d4:	6805      	ldr	r5, [r0, #0]
 80135d6:	600b      	str	r3, [r1, #0]
 80135d8:	2d00      	cmp	r5, #0
 80135da:	da03      	bge.n	80135e4 <_printf_i+0xc8>
 80135dc:	232d      	movs	r3, #45	; 0x2d
 80135de:	426d      	negs	r5, r5
 80135e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135e4:	485e      	ldr	r0, [pc, #376]	; (8013760 <_printf_i+0x244>)
 80135e6:	230a      	movs	r3, #10
 80135e8:	e019      	b.n	801361e <_printf_i+0x102>
 80135ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80135ee:	6805      	ldr	r5, [r0, #0]
 80135f0:	600b      	str	r3, [r1, #0]
 80135f2:	bf18      	it	ne
 80135f4:	b22d      	sxthne	r5, r5
 80135f6:	e7ef      	b.n	80135d8 <_printf_i+0xbc>
 80135f8:	680b      	ldr	r3, [r1, #0]
 80135fa:	6825      	ldr	r5, [r4, #0]
 80135fc:	1d18      	adds	r0, r3, #4
 80135fe:	6008      	str	r0, [r1, #0]
 8013600:	0628      	lsls	r0, r5, #24
 8013602:	d501      	bpl.n	8013608 <_printf_i+0xec>
 8013604:	681d      	ldr	r5, [r3, #0]
 8013606:	e002      	b.n	801360e <_printf_i+0xf2>
 8013608:	0669      	lsls	r1, r5, #25
 801360a:	d5fb      	bpl.n	8013604 <_printf_i+0xe8>
 801360c:	881d      	ldrh	r5, [r3, #0]
 801360e:	4854      	ldr	r0, [pc, #336]	; (8013760 <_printf_i+0x244>)
 8013610:	2f6f      	cmp	r7, #111	; 0x6f
 8013612:	bf0c      	ite	eq
 8013614:	2308      	moveq	r3, #8
 8013616:	230a      	movne	r3, #10
 8013618:	2100      	movs	r1, #0
 801361a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801361e:	6866      	ldr	r6, [r4, #4]
 8013620:	60a6      	str	r6, [r4, #8]
 8013622:	2e00      	cmp	r6, #0
 8013624:	bfa2      	ittt	ge
 8013626:	6821      	ldrge	r1, [r4, #0]
 8013628:	f021 0104 	bicge.w	r1, r1, #4
 801362c:	6021      	strge	r1, [r4, #0]
 801362e:	b90d      	cbnz	r5, 8013634 <_printf_i+0x118>
 8013630:	2e00      	cmp	r6, #0
 8013632:	d04d      	beq.n	80136d0 <_printf_i+0x1b4>
 8013634:	4616      	mov	r6, r2
 8013636:	fbb5 f1f3 	udiv	r1, r5, r3
 801363a:	fb03 5711 	mls	r7, r3, r1, r5
 801363e:	5dc7      	ldrb	r7, [r0, r7]
 8013640:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013644:	462f      	mov	r7, r5
 8013646:	42bb      	cmp	r3, r7
 8013648:	460d      	mov	r5, r1
 801364a:	d9f4      	bls.n	8013636 <_printf_i+0x11a>
 801364c:	2b08      	cmp	r3, #8
 801364e:	d10b      	bne.n	8013668 <_printf_i+0x14c>
 8013650:	6823      	ldr	r3, [r4, #0]
 8013652:	07df      	lsls	r7, r3, #31
 8013654:	d508      	bpl.n	8013668 <_printf_i+0x14c>
 8013656:	6923      	ldr	r3, [r4, #16]
 8013658:	6861      	ldr	r1, [r4, #4]
 801365a:	4299      	cmp	r1, r3
 801365c:	bfde      	ittt	le
 801365e:	2330      	movle	r3, #48	; 0x30
 8013660:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013664:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013668:	1b92      	subs	r2, r2, r6
 801366a:	6122      	str	r2, [r4, #16]
 801366c:	f8cd a000 	str.w	sl, [sp]
 8013670:	464b      	mov	r3, r9
 8013672:	aa03      	add	r2, sp, #12
 8013674:	4621      	mov	r1, r4
 8013676:	4640      	mov	r0, r8
 8013678:	f7ff fee2 	bl	8013440 <_printf_common>
 801367c:	3001      	adds	r0, #1
 801367e:	d14c      	bne.n	801371a <_printf_i+0x1fe>
 8013680:	f04f 30ff 	mov.w	r0, #4294967295
 8013684:	b004      	add	sp, #16
 8013686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801368a:	4835      	ldr	r0, [pc, #212]	; (8013760 <_printf_i+0x244>)
 801368c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013690:	6823      	ldr	r3, [r4, #0]
 8013692:	680e      	ldr	r6, [r1, #0]
 8013694:	061f      	lsls	r7, r3, #24
 8013696:	f856 5b04 	ldr.w	r5, [r6], #4
 801369a:	600e      	str	r6, [r1, #0]
 801369c:	d514      	bpl.n	80136c8 <_printf_i+0x1ac>
 801369e:	07d9      	lsls	r1, r3, #31
 80136a0:	bf44      	itt	mi
 80136a2:	f043 0320 	orrmi.w	r3, r3, #32
 80136a6:	6023      	strmi	r3, [r4, #0]
 80136a8:	b91d      	cbnz	r5, 80136b2 <_printf_i+0x196>
 80136aa:	6823      	ldr	r3, [r4, #0]
 80136ac:	f023 0320 	bic.w	r3, r3, #32
 80136b0:	6023      	str	r3, [r4, #0]
 80136b2:	2310      	movs	r3, #16
 80136b4:	e7b0      	b.n	8013618 <_printf_i+0xfc>
 80136b6:	6823      	ldr	r3, [r4, #0]
 80136b8:	f043 0320 	orr.w	r3, r3, #32
 80136bc:	6023      	str	r3, [r4, #0]
 80136be:	2378      	movs	r3, #120	; 0x78
 80136c0:	4828      	ldr	r0, [pc, #160]	; (8013764 <_printf_i+0x248>)
 80136c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80136c6:	e7e3      	b.n	8013690 <_printf_i+0x174>
 80136c8:	065e      	lsls	r6, r3, #25
 80136ca:	bf48      	it	mi
 80136cc:	b2ad      	uxthmi	r5, r5
 80136ce:	e7e6      	b.n	801369e <_printf_i+0x182>
 80136d0:	4616      	mov	r6, r2
 80136d2:	e7bb      	b.n	801364c <_printf_i+0x130>
 80136d4:	680b      	ldr	r3, [r1, #0]
 80136d6:	6826      	ldr	r6, [r4, #0]
 80136d8:	6960      	ldr	r0, [r4, #20]
 80136da:	1d1d      	adds	r5, r3, #4
 80136dc:	600d      	str	r5, [r1, #0]
 80136de:	0635      	lsls	r5, r6, #24
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	d501      	bpl.n	80136e8 <_printf_i+0x1cc>
 80136e4:	6018      	str	r0, [r3, #0]
 80136e6:	e002      	b.n	80136ee <_printf_i+0x1d2>
 80136e8:	0671      	lsls	r1, r6, #25
 80136ea:	d5fb      	bpl.n	80136e4 <_printf_i+0x1c8>
 80136ec:	8018      	strh	r0, [r3, #0]
 80136ee:	2300      	movs	r3, #0
 80136f0:	6123      	str	r3, [r4, #16]
 80136f2:	4616      	mov	r6, r2
 80136f4:	e7ba      	b.n	801366c <_printf_i+0x150>
 80136f6:	680b      	ldr	r3, [r1, #0]
 80136f8:	1d1a      	adds	r2, r3, #4
 80136fa:	600a      	str	r2, [r1, #0]
 80136fc:	681e      	ldr	r6, [r3, #0]
 80136fe:	6862      	ldr	r2, [r4, #4]
 8013700:	2100      	movs	r1, #0
 8013702:	4630      	mov	r0, r6
 8013704:	f7ec fd84 	bl	8000210 <memchr>
 8013708:	b108      	cbz	r0, 801370e <_printf_i+0x1f2>
 801370a:	1b80      	subs	r0, r0, r6
 801370c:	6060      	str	r0, [r4, #4]
 801370e:	6863      	ldr	r3, [r4, #4]
 8013710:	6123      	str	r3, [r4, #16]
 8013712:	2300      	movs	r3, #0
 8013714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013718:	e7a8      	b.n	801366c <_printf_i+0x150>
 801371a:	6923      	ldr	r3, [r4, #16]
 801371c:	4632      	mov	r2, r6
 801371e:	4649      	mov	r1, r9
 8013720:	4640      	mov	r0, r8
 8013722:	47d0      	blx	sl
 8013724:	3001      	adds	r0, #1
 8013726:	d0ab      	beq.n	8013680 <_printf_i+0x164>
 8013728:	6823      	ldr	r3, [r4, #0]
 801372a:	079b      	lsls	r3, r3, #30
 801372c:	d413      	bmi.n	8013756 <_printf_i+0x23a>
 801372e:	68e0      	ldr	r0, [r4, #12]
 8013730:	9b03      	ldr	r3, [sp, #12]
 8013732:	4298      	cmp	r0, r3
 8013734:	bfb8      	it	lt
 8013736:	4618      	movlt	r0, r3
 8013738:	e7a4      	b.n	8013684 <_printf_i+0x168>
 801373a:	2301      	movs	r3, #1
 801373c:	4632      	mov	r2, r6
 801373e:	4649      	mov	r1, r9
 8013740:	4640      	mov	r0, r8
 8013742:	47d0      	blx	sl
 8013744:	3001      	adds	r0, #1
 8013746:	d09b      	beq.n	8013680 <_printf_i+0x164>
 8013748:	3501      	adds	r5, #1
 801374a:	68e3      	ldr	r3, [r4, #12]
 801374c:	9903      	ldr	r1, [sp, #12]
 801374e:	1a5b      	subs	r3, r3, r1
 8013750:	42ab      	cmp	r3, r5
 8013752:	dcf2      	bgt.n	801373a <_printf_i+0x21e>
 8013754:	e7eb      	b.n	801372e <_printf_i+0x212>
 8013756:	2500      	movs	r5, #0
 8013758:	f104 0619 	add.w	r6, r4, #25
 801375c:	e7f5      	b.n	801374a <_printf_i+0x22e>
 801375e:	bf00      	nop
 8013760:	080156f5 	.word	0x080156f5
 8013764:	08015706 	.word	0x08015706

08013768 <_read_r>:
 8013768:	b538      	push	{r3, r4, r5, lr}
 801376a:	4d07      	ldr	r5, [pc, #28]	; (8013788 <_read_r+0x20>)
 801376c:	4604      	mov	r4, r0
 801376e:	4608      	mov	r0, r1
 8013770:	4611      	mov	r1, r2
 8013772:	2200      	movs	r2, #0
 8013774:	602a      	str	r2, [r5, #0]
 8013776:	461a      	mov	r2, r3
 8013778:	f7ef fae2 	bl	8002d40 <_read>
 801377c:	1c43      	adds	r3, r0, #1
 801377e:	d102      	bne.n	8013786 <_read_r+0x1e>
 8013780:	682b      	ldr	r3, [r5, #0]
 8013782:	b103      	cbz	r3, 8013786 <_read_r+0x1e>
 8013784:	6023      	str	r3, [r4, #0]
 8013786:	bd38      	pop	{r3, r4, r5, pc}
 8013788:	200034d4 	.word	0x200034d4
 801378c:	00000000 	.word	0x00000000

08013790 <nan>:
 8013790:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013798 <nan+0x8>
 8013794:	4770      	bx	lr
 8013796:	bf00      	nop
 8013798:	00000000 	.word	0x00000000
 801379c:	7ff80000 	.word	0x7ff80000

080137a0 <__ascii_wctomb>:
 80137a0:	b149      	cbz	r1, 80137b6 <__ascii_wctomb+0x16>
 80137a2:	2aff      	cmp	r2, #255	; 0xff
 80137a4:	bf85      	ittet	hi
 80137a6:	238a      	movhi	r3, #138	; 0x8a
 80137a8:	6003      	strhi	r3, [r0, #0]
 80137aa:	700a      	strbls	r2, [r1, #0]
 80137ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80137b0:	bf98      	it	ls
 80137b2:	2001      	movls	r0, #1
 80137b4:	4770      	bx	lr
 80137b6:	4608      	mov	r0, r1
 80137b8:	4770      	bx	lr
	...

080137bc <__assert_func>:
 80137bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137be:	4614      	mov	r4, r2
 80137c0:	461a      	mov	r2, r3
 80137c2:	4b09      	ldr	r3, [pc, #36]	; (80137e8 <__assert_func+0x2c>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	4605      	mov	r5, r0
 80137c8:	68d8      	ldr	r0, [r3, #12]
 80137ca:	b14c      	cbz	r4, 80137e0 <__assert_func+0x24>
 80137cc:	4b07      	ldr	r3, [pc, #28]	; (80137ec <__assert_func+0x30>)
 80137ce:	9100      	str	r1, [sp, #0]
 80137d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80137d4:	4906      	ldr	r1, [pc, #24]	; (80137f0 <__assert_func+0x34>)
 80137d6:	462b      	mov	r3, r5
 80137d8:	f000 f80e 	bl	80137f8 <fiprintf>
 80137dc:	f000 f862 	bl	80138a4 <abort>
 80137e0:	4b04      	ldr	r3, [pc, #16]	; (80137f4 <__assert_func+0x38>)
 80137e2:	461c      	mov	r4, r3
 80137e4:	e7f3      	b.n	80137ce <__assert_func+0x12>
 80137e6:	bf00      	nop
 80137e8:	20000160 	.word	0x20000160
 80137ec:	08015717 	.word	0x08015717
 80137f0:	08015724 	.word	0x08015724
 80137f4:	08015752 	.word	0x08015752

080137f8 <fiprintf>:
 80137f8:	b40e      	push	{r1, r2, r3}
 80137fa:	b503      	push	{r0, r1, lr}
 80137fc:	4601      	mov	r1, r0
 80137fe:	ab03      	add	r3, sp, #12
 8013800:	4805      	ldr	r0, [pc, #20]	; (8013818 <fiprintf+0x20>)
 8013802:	f853 2b04 	ldr.w	r2, [r3], #4
 8013806:	6800      	ldr	r0, [r0, #0]
 8013808:	9301      	str	r3, [sp, #4]
 801380a:	f7ff fce9 	bl	80131e0 <_vfiprintf_r>
 801380e:	b002      	add	sp, #8
 8013810:	f85d eb04 	ldr.w	lr, [sp], #4
 8013814:	b003      	add	sp, #12
 8013816:	4770      	bx	lr
 8013818:	20000160 	.word	0x20000160

0801381c <_fstat_r>:
 801381c:	b538      	push	{r3, r4, r5, lr}
 801381e:	4d07      	ldr	r5, [pc, #28]	; (801383c <_fstat_r+0x20>)
 8013820:	2300      	movs	r3, #0
 8013822:	4604      	mov	r4, r0
 8013824:	4608      	mov	r0, r1
 8013826:	4611      	mov	r1, r2
 8013828:	602b      	str	r3, [r5, #0]
 801382a:	f7ef face 	bl	8002dca <_fstat>
 801382e:	1c43      	adds	r3, r0, #1
 8013830:	d102      	bne.n	8013838 <_fstat_r+0x1c>
 8013832:	682b      	ldr	r3, [r5, #0]
 8013834:	b103      	cbz	r3, 8013838 <_fstat_r+0x1c>
 8013836:	6023      	str	r3, [r4, #0]
 8013838:	bd38      	pop	{r3, r4, r5, pc}
 801383a:	bf00      	nop
 801383c:	200034d4 	.word	0x200034d4

08013840 <_isatty_r>:
 8013840:	b538      	push	{r3, r4, r5, lr}
 8013842:	4d06      	ldr	r5, [pc, #24]	; (801385c <_isatty_r+0x1c>)
 8013844:	2300      	movs	r3, #0
 8013846:	4604      	mov	r4, r0
 8013848:	4608      	mov	r0, r1
 801384a:	602b      	str	r3, [r5, #0]
 801384c:	f7ef facd 	bl	8002dea <_isatty>
 8013850:	1c43      	adds	r3, r0, #1
 8013852:	d102      	bne.n	801385a <_isatty_r+0x1a>
 8013854:	682b      	ldr	r3, [r5, #0]
 8013856:	b103      	cbz	r3, 801385a <_isatty_r+0x1a>
 8013858:	6023      	str	r3, [r4, #0]
 801385a:	bd38      	pop	{r3, r4, r5, pc}
 801385c:	200034d4 	.word	0x200034d4

08013860 <memmove>:
 8013860:	4288      	cmp	r0, r1
 8013862:	b510      	push	{r4, lr}
 8013864:	eb01 0402 	add.w	r4, r1, r2
 8013868:	d902      	bls.n	8013870 <memmove+0x10>
 801386a:	4284      	cmp	r4, r0
 801386c:	4623      	mov	r3, r4
 801386e:	d807      	bhi.n	8013880 <memmove+0x20>
 8013870:	1e43      	subs	r3, r0, #1
 8013872:	42a1      	cmp	r1, r4
 8013874:	d008      	beq.n	8013888 <memmove+0x28>
 8013876:	f811 2b01 	ldrb.w	r2, [r1], #1
 801387a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801387e:	e7f8      	b.n	8013872 <memmove+0x12>
 8013880:	4402      	add	r2, r0
 8013882:	4601      	mov	r1, r0
 8013884:	428a      	cmp	r2, r1
 8013886:	d100      	bne.n	801388a <memmove+0x2a>
 8013888:	bd10      	pop	{r4, pc}
 801388a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801388e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013892:	e7f7      	b.n	8013884 <memmove+0x24>

08013894 <_malloc_usable_size_r>:
 8013894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013898:	1f18      	subs	r0, r3, #4
 801389a:	2b00      	cmp	r3, #0
 801389c:	bfbc      	itt	lt
 801389e:	580b      	ldrlt	r3, [r1, r0]
 80138a0:	18c0      	addlt	r0, r0, r3
 80138a2:	4770      	bx	lr

080138a4 <abort>:
 80138a4:	b508      	push	{r3, lr}
 80138a6:	2006      	movs	r0, #6
 80138a8:	f000 f82c 	bl	8013904 <raise>
 80138ac:	2001      	movs	r0, #1
 80138ae:	f7ef fa3d 	bl	8002d2c <_exit>

080138b2 <_raise_r>:
 80138b2:	291f      	cmp	r1, #31
 80138b4:	b538      	push	{r3, r4, r5, lr}
 80138b6:	4604      	mov	r4, r0
 80138b8:	460d      	mov	r5, r1
 80138ba:	d904      	bls.n	80138c6 <_raise_r+0x14>
 80138bc:	2316      	movs	r3, #22
 80138be:	6003      	str	r3, [r0, #0]
 80138c0:	f04f 30ff 	mov.w	r0, #4294967295
 80138c4:	bd38      	pop	{r3, r4, r5, pc}
 80138c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80138c8:	b112      	cbz	r2, 80138d0 <_raise_r+0x1e>
 80138ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80138ce:	b94b      	cbnz	r3, 80138e4 <_raise_r+0x32>
 80138d0:	4620      	mov	r0, r4
 80138d2:	f000 f831 	bl	8013938 <_getpid_r>
 80138d6:	462a      	mov	r2, r5
 80138d8:	4601      	mov	r1, r0
 80138da:	4620      	mov	r0, r4
 80138dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138e0:	f000 b818 	b.w	8013914 <_kill_r>
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d00a      	beq.n	80138fe <_raise_r+0x4c>
 80138e8:	1c59      	adds	r1, r3, #1
 80138ea:	d103      	bne.n	80138f4 <_raise_r+0x42>
 80138ec:	2316      	movs	r3, #22
 80138ee:	6003      	str	r3, [r0, #0]
 80138f0:	2001      	movs	r0, #1
 80138f2:	e7e7      	b.n	80138c4 <_raise_r+0x12>
 80138f4:	2400      	movs	r4, #0
 80138f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80138fa:	4628      	mov	r0, r5
 80138fc:	4798      	blx	r3
 80138fe:	2000      	movs	r0, #0
 8013900:	e7e0      	b.n	80138c4 <_raise_r+0x12>
	...

08013904 <raise>:
 8013904:	4b02      	ldr	r3, [pc, #8]	; (8013910 <raise+0xc>)
 8013906:	4601      	mov	r1, r0
 8013908:	6818      	ldr	r0, [r3, #0]
 801390a:	f7ff bfd2 	b.w	80138b2 <_raise_r>
 801390e:	bf00      	nop
 8013910:	20000160 	.word	0x20000160

08013914 <_kill_r>:
 8013914:	b538      	push	{r3, r4, r5, lr}
 8013916:	4d07      	ldr	r5, [pc, #28]	; (8013934 <_kill_r+0x20>)
 8013918:	2300      	movs	r3, #0
 801391a:	4604      	mov	r4, r0
 801391c:	4608      	mov	r0, r1
 801391e:	4611      	mov	r1, r2
 8013920:	602b      	str	r3, [r5, #0]
 8013922:	f7ef f9f3 	bl	8002d0c <_kill>
 8013926:	1c43      	adds	r3, r0, #1
 8013928:	d102      	bne.n	8013930 <_kill_r+0x1c>
 801392a:	682b      	ldr	r3, [r5, #0]
 801392c:	b103      	cbz	r3, 8013930 <_kill_r+0x1c>
 801392e:	6023      	str	r3, [r4, #0]
 8013930:	bd38      	pop	{r3, r4, r5, pc}
 8013932:	bf00      	nop
 8013934:	200034d4 	.word	0x200034d4

08013938 <_getpid_r>:
 8013938:	f7ef b9e0 	b.w	8002cfc <_getpid>

0801393c <_init>:
 801393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801393e:	bf00      	nop
 8013940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013942:	bc08      	pop	{r3}
 8013944:	469e      	mov	lr, r3
 8013946:	4770      	bx	lr

08013948 <_fini>:
 8013948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801394a:	bf00      	nop
 801394c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801394e:	bc08      	pop	{r3}
 8013950:	469e      	mov	lr, r3
 8013952:	4770      	bx	lr
